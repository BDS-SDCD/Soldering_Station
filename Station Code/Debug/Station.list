
Station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0c4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  0800b1d4  0800b1d4  0001b1d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b314  0800b314  00020298  2**0
                  CONTENTS
  4 .ARM          00000000  0800b314  0800b314  00020298  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b314  0800b314  00020298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b314  0800b314  0001b314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b318  0800b318  0001b318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000298  20000000  0800b31c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000630  20000298  0800b5b4  00020298  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200008c8  0800b5b4  000208c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020298  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202c1  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016c07  00000000  00000000  00020304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c2b  00000000  00000000  00036f0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001680  00000000  00000000  0003ab38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001163  00000000  00000000  0003c1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a9bd  00000000  00000000  0003d31b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b163  00000000  00000000  00057cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092338  00000000  00000000  00072e3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000635c  00000000  00000000  00105174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0010b4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000298 	.word	0x20000298
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b1bc 	.word	0x0800b1bc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000029c 	.word	0x2000029c
 800014c:	0800b1bc 	.word	0x0800b1bc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_dmul>:
 8000160:	b570      	push	{r4, r5, r6, lr}
 8000162:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000166:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800016a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016e:	bf1d      	ittte	ne
 8000170:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000174:	ea94 0f0c 	teqne	r4, ip
 8000178:	ea95 0f0c 	teqne	r5, ip
 800017c:	f000 f8de 	bleq	800033c <__aeabi_dmul+0x1dc>
 8000180:	442c      	add	r4, r5
 8000182:	ea81 0603 	eor.w	r6, r1, r3
 8000186:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800018a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000192:	bf18      	it	ne
 8000194:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000198:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800019c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001a0:	d038      	beq.n	8000214 <__aeabi_dmul+0xb4>
 80001a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a6:	f04f 0500 	mov.w	r5, #0
 80001aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b6:	f04f 0600 	mov.w	r6, #0
 80001ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001be:	f09c 0f00 	teq	ip, #0
 80001c2:	bf18      	it	ne
 80001c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001d4:	d204      	bcs.n	80001e0 <__aeabi_dmul+0x80>
 80001d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001da:	416d      	adcs	r5, r5
 80001dc:	eb46 0606 	adc.w	r6, r6, r6
 80001e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001f8:	bf88      	it	hi
 80001fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001fe:	d81e      	bhi.n	800023e <__aeabi_dmul+0xde>
 8000200:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000204:	bf08      	it	eq
 8000206:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800020a:	f150 0000 	adcs.w	r0, r0, #0
 800020e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000212:	bd70      	pop	{r4, r5, r6, pc}
 8000214:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000218:	ea46 0101 	orr.w	r1, r6, r1
 800021c:	ea40 0002 	orr.w	r0, r0, r2
 8000220:	ea81 0103 	eor.w	r1, r1, r3
 8000224:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000228:	bfc2      	ittt	gt
 800022a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000232:	bd70      	popgt	{r4, r5, r6, pc}
 8000234:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000238:	f04f 0e00 	mov.w	lr, #0
 800023c:	3c01      	subs	r4, #1
 800023e:	f300 80ab 	bgt.w	8000398 <__aeabi_dmul+0x238>
 8000242:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000246:	bfde      	ittt	le
 8000248:	2000      	movle	r0, #0
 800024a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800024e:	bd70      	pople	{r4, r5, r6, pc}
 8000250:	f1c4 0400 	rsb	r4, r4, #0
 8000254:	3c20      	subs	r4, #32
 8000256:	da35      	bge.n	80002c4 <__aeabi_dmul+0x164>
 8000258:	340c      	adds	r4, #12
 800025a:	dc1b      	bgt.n	8000294 <__aeabi_dmul+0x134>
 800025c:	f104 0414 	add.w	r4, r4, #20
 8000260:	f1c4 0520 	rsb	r5, r4, #32
 8000264:	fa00 f305 	lsl.w	r3, r0, r5
 8000268:	fa20 f004 	lsr.w	r0, r0, r4
 800026c:	fa01 f205 	lsl.w	r2, r1, r5
 8000270:	ea40 0002 	orr.w	r0, r0, r2
 8000274:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000278:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800027c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000280:	fa21 f604 	lsr.w	r6, r1, r4
 8000284:	eb42 0106 	adc.w	r1, r2, r6
 8000288:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800028c:	bf08      	it	eq
 800028e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f1c4 040c 	rsb	r4, r4, #12
 8000298:	f1c4 0520 	rsb	r5, r4, #32
 800029c:	fa00 f304 	lsl.w	r3, r0, r4
 80002a0:	fa20 f005 	lsr.w	r0, r0, r5
 80002a4:	fa01 f204 	lsl.w	r2, r1, r4
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002bc:	bf08      	it	eq
 80002be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f1c4 0520 	rsb	r5, r4, #32
 80002c8:	fa00 f205 	lsl.w	r2, r0, r5
 80002cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002d0:	fa20 f304 	lsr.w	r3, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea43 0302 	orr.w	r3, r3, r2
 80002dc:	fa21 f004 	lsr.w	r0, r1, r4
 80002e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	fa21 f204 	lsr.w	r2, r1, r4
 80002e8:	ea20 0002 	bic.w	r0, r0, r2
 80002ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f094 0f00 	teq	r4, #0
 8000300:	d10f      	bne.n	8000322 <__aeabi_dmul+0x1c2>
 8000302:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000306:	0040      	lsls	r0, r0, #1
 8000308:	eb41 0101 	adc.w	r1, r1, r1
 800030c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000310:	bf08      	it	eq
 8000312:	3c01      	subeq	r4, #1
 8000314:	d0f7      	beq.n	8000306 <__aeabi_dmul+0x1a6>
 8000316:	ea41 0106 	orr.w	r1, r1, r6
 800031a:	f095 0f00 	teq	r5, #0
 800031e:	bf18      	it	ne
 8000320:	4770      	bxne	lr
 8000322:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000326:	0052      	lsls	r2, r2, #1
 8000328:	eb43 0303 	adc.w	r3, r3, r3
 800032c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000330:	bf08      	it	eq
 8000332:	3d01      	subeq	r5, #1
 8000334:	d0f7      	beq.n	8000326 <__aeabi_dmul+0x1c6>
 8000336:	ea43 0306 	orr.w	r3, r3, r6
 800033a:	4770      	bx	lr
 800033c:	ea94 0f0c 	teq	r4, ip
 8000340:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000344:	bf18      	it	ne
 8000346:	ea95 0f0c 	teqne	r5, ip
 800034a:	d00c      	beq.n	8000366 <__aeabi_dmul+0x206>
 800034c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000350:	bf18      	it	ne
 8000352:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000356:	d1d1      	bne.n	80002fc <__aeabi_dmul+0x19c>
 8000358:	ea81 0103 	eor.w	r1, r1, r3
 800035c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000360:	f04f 0000 	mov.w	r0, #0
 8000364:	bd70      	pop	{r4, r5, r6, pc}
 8000366:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800036a:	bf06      	itte	eq
 800036c:	4610      	moveq	r0, r2
 800036e:	4619      	moveq	r1, r3
 8000370:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000374:	d019      	beq.n	80003aa <__aeabi_dmul+0x24a>
 8000376:	ea94 0f0c 	teq	r4, ip
 800037a:	d102      	bne.n	8000382 <__aeabi_dmul+0x222>
 800037c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000380:	d113      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000382:	ea95 0f0c 	teq	r5, ip
 8000386:	d105      	bne.n	8000394 <__aeabi_dmul+0x234>
 8000388:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800038c:	bf1c      	itt	ne
 800038e:	4610      	movne	r0, r2
 8000390:	4619      	movne	r1, r3
 8000392:	d10a      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000394:	ea81 0103 	eor.w	r1, r1, r3
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd70      	pop	{r4, r5, r6, pc}
 80003aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003b2:	bd70      	pop	{r4, r5, r6, pc}

080003b4 <__aeabi_drsub>:
 80003b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b8:	e002      	b.n	80003c0 <__adddf3>
 80003ba:	bf00      	nop

080003bc <__aeabi_dsub>:
 80003bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003c0 <__adddf3>:
 80003c0:	b530      	push	{r4, r5, lr}
 80003c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ca:	ea94 0f05 	teq	r4, r5
 80003ce:	bf08      	it	eq
 80003d0:	ea90 0f02 	teqeq	r0, r2
 80003d4:	bf1f      	itttt	ne
 80003d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e6:	f000 80e2 	beq.w	80005ae <__adddf3+0x1ee>
 80003ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003f2:	bfb8      	it	lt
 80003f4:	426d      	neglt	r5, r5
 80003f6:	dd0c      	ble.n	8000412 <__adddf3+0x52>
 80003f8:	442c      	add	r4, r5
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	ea82 0000 	eor.w	r0, r2, r0
 8000406:	ea83 0101 	eor.w	r1, r3, r1
 800040a:	ea80 0202 	eor.w	r2, r0, r2
 800040e:	ea81 0303 	eor.w	r3, r1, r3
 8000412:	2d36      	cmp	r5, #54	; 0x36
 8000414:	bf88      	it	hi
 8000416:	bd30      	pophi	{r4, r5, pc}
 8000418:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800041c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000420:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000424:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x70>
 800042a:	4240      	negs	r0, r0
 800042c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000430:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000434:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000438:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800043c:	d002      	beq.n	8000444 <__adddf3+0x84>
 800043e:	4252      	negs	r2, r2
 8000440:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000444:	ea94 0f05 	teq	r4, r5
 8000448:	f000 80a7 	beq.w	800059a <__adddf3+0x1da>
 800044c:	f1a4 0401 	sub.w	r4, r4, #1
 8000450:	f1d5 0e20 	rsbs	lr, r5, #32
 8000454:	db0d      	blt.n	8000472 <__adddf3+0xb2>
 8000456:	fa02 fc0e 	lsl.w	ip, r2, lr
 800045a:	fa22 f205 	lsr.w	r2, r2, r5
 800045e:	1880      	adds	r0, r0, r2
 8000460:	f141 0100 	adc.w	r1, r1, #0
 8000464:	fa03 f20e 	lsl.w	r2, r3, lr
 8000468:	1880      	adds	r0, r0, r2
 800046a:	fa43 f305 	asr.w	r3, r3, r5
 800046e:	4159      	adcs	r1, r3
 8000470:	e00e      	b.n	8000490 <__adddf3+0xd0>
 8000472:	f1a5 0520 	sub.w	r5, r5, #32
 8000476:	f10e 0e20 	add.w	lr, lr, #32
 800047a:	2a01      	cmp	r2, #1
 800047c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000480:	bf28      	it	cs
 8000482:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000486:	fa43 f305 	asr.w	r3, r3, r5
 800048a:	18c0      	adds	r0, r0, r3
 800048c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	d507      	bpl.n	80004a6 <__adddf3+0xe6>
 8000496:	f04f 0e00 	mov.w	lr, #0
 800049a:	f1dc 0c00 	rsbs	ip, ip, #0
 800049e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004aa:	d31b      	bcc.n	80004e4 <__adddf3+0x124>
 80004ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004b0:	d30c      	bcc.n	80004cc <__adddf3+0x10c>
 80004b2:	0849      	lsrs	r1, r1, #1
 80004b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004bc:	f104 0401 	add.w	r4, r4, #1
 80004c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c8:	f080 809a 	bcs.w	8000600 <__adddf3+0x240>
 80004cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004d0:	bf08      	it	eq
 80004d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d6:	f150 0000 	adcs.w	r0, r0, #0
 80004da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004de:	ea41 0105 	orr.w	r1, r1, r5
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e8:	4140      	adcs	r0, r0
 80004ea:	eb41 0101 	adc.w	r1, r1, r1
 80004ee:	3c01      	subs	r4, #1
 80004f0:	bf28      	it	cs
 80004f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f6:	d2e9      	bcs.n	80004cc <__adddf3+0x10c>
 80004f8:	f091 0f00 	teq	r1, #0
 80004fc:	bf04      	itt	eq
 80004fe:	4601      	moveq	r1, r0
 8000500:	2000      	moveq	r0, #0
 8000502:	fab1 f381 	clz	r3, r1
 8000506:	bf08      	it	eq
 8000508:	3320      	addeq	r3, #32
 800050a:	f1a3 030b 	sub.w	r3, r3, #11
 800050e:	f1b3 0220 	subs.w	r2, r3, #32
 8000512:	da0c      	bge.n	800052e <__adddf3+0x16e>
 8000514:	320c      	adds	r2, #12
 8000516:	dd08      	ble.n	800052a <__adddf3+0x16a>
 8000518:	f102 0c14 	add.w	ip, r2, #20
 800051c:	f1c2 020c 	rsb	r2, r2, #12
 8000520:	fa01 f00c 	lsl.w	r0, r1, ip
 8000524:	fa21 f102 	lsr.w	r1, r1, r2
 8000528:	e00c      	b.n	8000544 <__adddf3+0x184>
 800052a:	f102 0214 	add.w	r2, r2, #20
 800052e:	bfd8      	it	le
 8000530:	f1c2 0c20 	rsble	ip, r2, #32
 8000534:	fa01 f102 	lsl.w	r1, r1, r2
 8000538:	fa20 fc0c 	lsr.w	ip, r0, ip
 800053c:	bfdc      	itt	le
 800053e:	ea41 010c 	orrle.w	r1, r1, ip
 8000542:	4090      	lslle	r0, r2
 8000544:	1ae4      	subs	r4, r4, r3
 8000546:	bfa2      	ittt	ge
 8000548:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800054c:	4329      	orrge	r1, r5
 800054e:	bd30      	popge	{r4, r5, pc}
 8000550:	ea6f 0404 	mvn.w	r4, r4
 8000554:	3c1f      	subs	r4, #31
 8000556:	da1c      	bge.n	8000592 <__adddf3+0x1d2>
 8000558:	340c      	adds	r4, #12
 800055a:	dc0e      	bgt.n	800057a <__adddf3+0x1ba>
 800055c:	f104 0414 	add.w	r4, r4, #20
 8000560:	f1c4 0220 	rsb	r2, r4, #32
 8000564:	fa20 f004 	lsr.w	r0, r0, r4
 8000568:	fa01 f302 	lsl.w	r3, r1, r2
 800056c:	ea40 0003 	orr.w	r0, r0, r3
 8000570:	fa21 f304 	lsr.w	r3, r1, r4
 8000574:	ea45 0103 	orr.w	r1, r5, r3
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	f1c4 040c 	rsb	r4, r4, #12
 800057e:	f1c4 0220 	rsb	r2, r4, #32
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 f304 	lsl.w	r3, r1, r4
 800058a:	ea40 0003 	orr.w	r0, r0, r3
 800058e:	4629      	mov	r1, r5
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	fa21 f004 	lsr.w	r0, r1, r4
 8000596:	4629      	mov	r1, r5
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	f094 0f00 	teq	r4, #0
 800059e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005a2:	bf06      	itte	eq
 80005a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a8:	3401      	addeq	r4, #1
 80005aa:	3d01      	subne	r5, #1
 80005ac:	e74e      	b.n	800044c <__adddf3+0x8c>
 80005ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005b2:	bf18      	it	ne
 80005b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b8:	d029      	beq.n	800060e <__adddf3+0x24e>
 80005ba:	ea94 0f05 	teq	r4, r5
 80005be:	bf08      	it	eq
 80005c0:	ea90 0f02 	teqeq	r0, r2
 80005c4:	d005      	beq.n	80005d2 <__adddf3+0x212>
 80005c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ca:	bf04      	itt	eq
 80005cc:	4619      	moveq	r1, r3
 80005ce:	4610      	moveq	r0, r2
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	ea91 0f03 	teq	r1, r3
 80005d6:	bf1e      	ittt	ne
 80005d8:	2100      	movne	r1, #0
 80005da:	2000      	movne	r0, #0
 80005dc:	bd30      	popne	{r4, r5, pc}
 80005de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005e2:	d105      	bne.n	80005f0 <__adddf3+0x230>
 80005e4:	0040      	lsls	r0, r0, #1
 80005e6:	4149      	adcs	r1, r1
 80005e8:	bf28      	it	cs
 80005ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd30      	pop	{r4, r5, pc}
 80005f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f4:	bf3c      	itt	cc
 80005f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005fa:	bd30      	popcc	{r4, r5, pc}
 80005fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000600:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000604:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000608:	f04f 0000 	mov.w	r0, #0
 800060c:	bd30      	pop	{r4, r5, pc}
 800060e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000612:	bf1a      	itte	ne
 8000614:	4619      	movne	r1, r3
 8000616:	4610      	movne	r0, r2
 8000618:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800061c:	bf1c      	itt	ne
 800061e:	460b      	movne	r3, r1
 8000620:	4602      	movne	r2, r0
 8000622:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000626:	bf06      	itte	eq
 8000628:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800062c:	ea91 0f03 	teqeq	r1, r3
 8000630:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	bf00      	nop

08000638 <__aeabi_ui2d>:
 8000638:	f090 0f00 	teq	r0, #0
 800063c:	bf04      	itt	eq
 800063e:	2100      	moveq	r1, #0
 8000640:	4770      	bxeq	lr
 8000642:	b530      	push	{r4, r5, lr}
 8000644:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000648:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064c:	f04f 0500 	mov.w	r5, #0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e750      	b.n	80004f8 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_i2d>:
 8000658:	f090 0f00 	teq	r0, #0
 800065c:	bf04      	itt	eq
 800065e:	2100      	moveq	r1, #0
 8000660:	4770      	bxeq	lr
 8000662:	b530      	push	{r4, r5, lr}
 8000664:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000668:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800066c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000670:	bf48      	it	mi
 8000672:	4240      	negmi	r0, r0
 8000674:	f04f 0100 	mov.w	r1, #0
 8000678:	e73e      	b.n	80004f8 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_f2d>:
 800067c:	0042      	lsls	r2, r0, #1
 800067e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000682:	ea4f 0131 	mov.w	r1, r1, rrx
 8000686:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800068a:	bf1f      	itttt	ne
 800068c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000690:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000694:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000698:	4770      	bxne	lr
 800069a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069e:	bf08      	it	eq
 80006a0:	4770      	bxeq	lr
 80006a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a6:	bf04      	itt	eq
 80006a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006ac:	4770      	bxeq	lr
 80006ae:	b530      	push	{r4, r5, lr}
 80006b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	e71c      	b.n	80004f8 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_ul2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f04f 0500 	mov.w	r5, #0
 80006ce:	e00a      	b.n	80006e6 <__aeabi_l2d+0x16>

080006d0 <__aeabi_l2d>:
 80006d0:	ea50 0201 	orrs.w	r2, r0, r1
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	b530      	push	{r4, r5, lr}
 80006da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006de:	d502      	bpl.n	80006e6 <__aeabi_l2d+0x16>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006f2:	f43f aed8 	beq.w	80004a6 <__adddf3+0xe6>
 80006f6:	f04f 0203 	mov.w	r2, #3
 80006fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fe:	bf18      	it	ne
 8000700:	3203      	addne	r2, #3
 8000702:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000706:	bf18      	it	ne
 8000708:	3203      	addne	r2, #3
 800070a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070e:	f1c2 0320 	rsb	r3, r2, #32
 8000712:	fa00 fc03 	lsl.w	ip, r0, r3
 8000716:	fa20 f002 	lsr.w	r0, r0, r2
 800071a:	fa01 fe03 	lsl.w	lr, r1, r3
 800071e:	ea40 000e 	orr.w	r0, r0, lr
 8000722:	fa21 f102 	lsr.w	r1, r1, r2
 8000726:	4414      	add	r4, r2
 8000728:	e6bd      	b.n	80004a6 <__adddf3+0xe6>
 800072a:	bf00      	nop

0800072c <__aeabi_d2uiz>:
 800072c:	004a      	lsls	r2, r1, #1
 800072e:	d211      	bcs.n	8000754 <__aeabi_d2uiz+0x28>
 8000730:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000734:	d211      	bcs.n	800075a <__aeabi_d2uiz+0x2e>
 8000736:	d50d      	bpl.n	8000754 <__aeabi_d2uiz+0x28>
 8000738:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800073c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000740:	d40e      	bmi.n	8000760 <__aeabi_d2uiz+0x34>
 8000742:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000746:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800074a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800074e:	fa23 f002 	lsr.w	r0, r3, r2
 8000752:	4770      	bx	lr
 8000754:	f04f 0000 	mov.w	r0, #0
 8000758:	4770      	bx	lr
 800075a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800075e:	d102      	bne.n	8000766 <__aeabi_d2uiz+0x3a>
 8000760:	f04f 30ff 	mov.w	r0, #4294967295
 8000764:	4770      	bx	lr
 8000766:	f04f 0000 	mov.w	r0, #0
 800076a:	4770      	bx	lr

0800076c <__aeabi_frsub>:
 800076c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000770:	e002      	b.n	8000778 <__addsf3>
 8000772:	bf00      	nop

08000774 <__aeabi_fsub>:
 8000774:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000778 <__addsf3>:
 8000778:	0042      	lsls	r2, r0, #1
 800077a:	bf1f      	itttt	ne
 800077c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000780:	ea92 0f03 	teqne	r2, r3
 8000784:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000788:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800078c:	d06a      	beq.n	8000864 <__addsf3+0xec>
 800078e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000792:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000796:	bfc1      	itttt	gt
 8000798:	18d2      	addgt	r2, r2, r3
 800079a:	4041      	eorgt	r1, r0
 800079c:	4048      	eorgt	r0, r1
 800079e:	4041      	eorgt	r1, r0
 80007a0:	bfb8      	it	lt
 80007a2:	425b      	neglt	r3, r3
 80007a4:	2b19      	cmp	r3, #25
 80007a6:	bf88      	it	hi
 80007a8:	4770      	bxhi	lr
 80007aa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80007ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007b2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80007b6:	bf18      	it	ne
 80007b8:	4240      	negne	r0, r0
 80007ba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80007be:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80007c2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80007c6:	bf18      	it	ne
 80007c8:	4249      	negne	r1, r1
 80007ca:	ea92 0f03 	teq	r2, r3
 80007ce:	d03f      	beq.n	8000850 <__addsf3+0xd8>
 80007d0:	f1a2 0201 	sub.w	r2, r2, #1
 80007d4:	fa41 fc03 	asr.w	ip, r1, r3
 80007d8:	eb10 000c 	adds.w	r0, r0, ip
 80007dc:	f1c3 0320 	rsb	r3, r3, #32
 80007e0:	fa01 f103 	lsl.w	r1, r1, r3
 80007e4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007e8:	d502      	bpl.n	80007f0 <__addsf3+0x78>
 80007ea:	4249      	negs	r1, r1
 80007ec:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80007f0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80007f4:	d313      	bcc.n	800081e <__addsf3+0xa6>
 80007f6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80007fa:	d306      	bcc.n	800080a <__addsf3+0x92>
 80007fc:	0840      	lsrs	r0, r0, #1
 80007fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000802:	f102 0201 	add.w	r2, r2, #1
 8000806:	2afe      	cmp	r2, #254	; 0xfe
 8000808:	d251      	bcs.n	80008ae <__addsf3+0x136>
 800080a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800080e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000812:	bf08      	it	eq
 8000814:	f020 0001 	biceq.w	r0, r0, #1
 8000818:	ea40 0003 	orr.w	r0, r0, r3
 800081c:	4770      	bx	lr
 800081e:	0049      	lsls	r1, r1, #1
 8000820:	eb40 0000 	adc.w	r0, r0, r0
 8000824:	3a01      	subs	r2, #1
 8000826:	bf28      	it	cs
 8000828:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800082c:	d2ed      	bcs.n	800080a <__addsf3+0x92>
 800082e:	fab0 fc80 	clz	ip, r0
 8000832:	f1ac 0c08 	sub.w	ip, ip, #8
 8000836:	ebb2 020c 	subs.w	r2, r2, ip
 800083a:	fa00 f00c 	lsl.w	r0, r0, ip
 800083e:	bfaa      	itet	ge
 8000840:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000844:	4252      	neglt	r2, r2
 8000846:	4318      	orrge	r0, r3
 8000848:	bfbc      	itt	lt
 800084a:	40d0      	lsrlt	r0, r2
 800084c:	4318      	orrlt	r0, r3
 800084e:	4770      	bx	lr
 8000850:	f092 0f00 	teq	r2, #0
 8000854:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000858:	bf06      	itte	eq
 800085a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800085e:	3201      	addeq	r2, #1
 8000860:	3b01      	subne	r3, #1
 8000862:	e7b5      	b.n	80007d0 <__addsf3+0x58>
 8000864:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000868:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800086c:	bf18      	it	ne
 800086e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000872:	d021      	beq.n	80008b8 <__addsf3+0x140>
 8000874:	ea92 0f03 	teq	r2, r3
 8000878:	d004      	beq.n	8000884 <__addsf3+0x10c>
 800087a:	f092 0f00 	teq	r2, #0
 800087e:	bf08      	it	eq
 8000880:	4608      	moveq	r0, r1
 8000882:	4770      	bx	lr
 8000884:	ea90 0f01 	teq	r0, r1
 8000888:	bf1c      	itt	ne
 800088a:	2000      	movne	r0, #0
 800088c:	4770      	bxne	lr
 800088e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000892:	d104      	bne.n	800089e <__addsf3+0x126>
 8000894:	0040      	lsls	r0, r0, #1
 8000896:	bf28      	it	cs
 8000898:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800089c:	4770      	bx	lr
 800089e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80008a2:	bf3c      	itt	cc
 80008a4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80008a8:	4770      	bxcc	lr
 80008aa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80008ae:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80008b2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008b6:	4770      	bx	lr
 80008b8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80008bc:	bf16      	itet	ne
 80008be:	4608      	movne	r0, r1
 80008c0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80008c4:	4601      	movne	r1, r0
 80008c6:	0242      	lsls	r2, r0, #9
 80008c8:	bf06      	itte	eq
 80008ca:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80008ce:	ea90 0f01 	teqeq	r0, r1
 80008d2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80008d6:	4770      	bx	lr

080008d8 <__aeabi_ui2f>:
 80008d8:	f04f 0300 	mov.w	r3, #0
 80008dc:	e004      	b.n	80008e8 <__aeabi_i2f+0x8>
 80008de:	bf00      	nop

080008e0 <__aeabi_i2f>:
 80008e0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80008e4:	bf48      	it	mi
 80008e6:	4240      	negmi	r0, r0
 80008e8:	ea5f 0c00 	movs.w	ip, r0
 80008ec:	bf08      	it	eq
 80008ee:	4770      	bxeq	lr
 80008f0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80008f4:	4601      	mov	r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	e01c      	b.n	8000936 <__aeabi_l2f+0x2a>

080008fc <__aeabi_ul2f>:
 80008fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000900:	bf08      	it	eq
 8000902:	4770      	bxeq	lr
 8000904:	f04f 0300 	mov.w	r3, #0
 8000908:	e00a      	b.n	8000920 <__aeabi_l2f+0x14>
 800090a:	bf00      	nop

0800090c <__aeabi_l2f>:
 800090c:	ea50 0201 	orrs.w	r2, r0, r1
 8000910:	bf08      	it	eq
 8000912:	4770      	bxeq	lr
 8000914:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000918:	d502      	bpl.n	8000920 <__aeabi_l2f+0x14>
 800091a:	4240      	negs	r0, r0
 800091c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000920:	ea5f 0c01 	movs.w	ip, r1
 8000924:	bf02      	ittt	eq
 8000926:	4684      	moveq	ip, r0
 8000928:	4601      	moveq	r1, r0
 800092a:	2000      	moveq	r0, #0
 800092c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000930:	bf08      	it	eq
 8000932:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000936:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800093a:	fabc f28c 	clz	r2, ip
 800093e:	3a08      	subs	r2, #8
 8000940:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000944:	db10      	blt.n	8000968 <__aeabi_l2f+0x5c>
 8000946:	fa01 fc02 	lsl.w	ip, r1, r2
 800094a:	4463      	add	r3, ip
 800094c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000950:	f1c2 0220 	rsb	r2, r2, #32
 8000954:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000958:	fa20 f202 	lsr.w	r2, r0, r2
 800095c:	eb43 0002 	adc.w	r0, r3, r2
 8000960:	bf08      	it	eq
 8000962:	f020 0001 	biceq.w	r0, r0, #1
 8000966:	4770      	bx	lr
 8000968:	f102 0220 	add.w	r2, r2, #32
 800096c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000970:	f1c2 0220 	rsb	r2, r2, #32
 8000974:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000978:	fa21 f202 	lsr.w	r2, r1, r2
 800097c:	eb43 0002 	adc.w	r0, r3, r2
 8000980:	bf08      	it	eq
 8000982:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000986:	4770      	bx	lr

08000988 <__aeabi_fmul>:
 8000988:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800098c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000990:	bf1e      	ittt	ne
 8000992:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000996:	ea92 0f0c 	teqne	r2, ip
 800099a:	ea93 0f0c 	teqne	r3, ip
 800099e:	d06f      	beq.n	8000a80 <__aeabi_fmul+0xf8>
 80009a0:	441a      	add	r2, r3
 80009a2:	ea80 0c01 	eor.w	ip, r0, r1
 80009a6:	0240      	lsls	r0, r0, #9
 80009a8:	bf18      	it	ne
 80009aa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80009ae:	d01e      	beq.n	80009ee <__aeabi_fmul+0x66>
 80009b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80009b4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80009b8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80009bc:	fba0 3101 	umull	r3, r1, r0, r1
 80009c0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80009c4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80009c8:	bf3e      	ittt	cc
 80009ca:	0049      	lslcc	r1, r1, #1
 80009cc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80009d0:	005b      	lslcc	r3, r3, #1
 80009d2:	ea40 0001 	orr.w	r0, r0, r1
 80009d6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80009da:	2afd      	cmp	r2, #253	; 0xfd
 80009dc:	d81d      	bhi.n	8000a1a <__aeabi_fmul+0x92>
 80009de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80009e2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009e6:	bf08      	it	eq
 80009e8:	f020 0001 	biceq.w	r0, r0, #1
 80009ec:	4770      	bx	lr
 80009ee:	f090 0f00 	teq	r0, #0
 80009f2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80009f6:	bf08      	it	eq
 80009f8:	0249      	lsleq	r1, r1, #9
 80009fa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80009fe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000a02:	3a7f      	subs	r2, #127	; 0x7f
 8000a04:	bfc2      	ittt	gt
 8000a06:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a0a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a0e:	4770      	bxgt	lr
 8000a10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a14:	f04f 0300 	mov.w	r3, #0
 8000a18:	3a01      	subs	r2, #1
 8000a1a:	dc5d      	bgt.n	8000ad8 <__aeabi_fmul+0x150>
 8000a1c:	f112 0f19 	cmn.w	r2, #25
 8000a20:	bfdc      	itt	le
 8000a22:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000a26:	4770      	bxle	lr
 8000a28:	f1c2 0200 	rsb	r2, r2, #0
 8000a2c:	0041      	lsls	r1, r0, #1
 8000a2e:	fa21 f102 	lsr.w	r1, r1, r2
 8000a32:	f1c2 0220 	rsb	r2, r2, #32
 8000a36:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a3a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a3e:	f140 0000 	adc.w	r0, r0, #0
 8000a42:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000a46:	bf08      	it	eq
 8000a48:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a4c:	4770      	bx	lr
 8000a4e:	f092 0f00 	teq	r2, #0
 8000a52:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000a56:	bf02      	ittt	eq
 8000a58:	0040      	lsleq	r0, r0, #1
 8000a5a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000a5e:	3a01      	subeq	r2, #1
 8000a60:	d0f9      	beq.n	8000a56 <__aeabi_fmul+0xce>
 8000a62:	ea40 000c 	orr.w	r0, r0, ip
 8000a66:	f093 0f00 	teq	r3, #0
 8000a6a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a6e:	bf02      	ittt	eq
 8000a70:	0049      	lsleq	r1, r1, #1
 8000a72:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000a76:	3b01      	subeq	r3, #1
 8000a78:	d0f9      	beq.n	8000a6e <__aeabi_fmul+0xe6>
 8000a7a:	ea41 010c 	orr.w	r1, r1, ip
 8000a7e:	e78f      	b.n	80009a0 <__aeabi_fmul+0x18>
 8000a80:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a84:	ea92 0f0c 	teq	r2, ip
 8000a88:	bf18      	it	ne
 8000a8a:	ea93 0f0c 	teqne	r3, ip
 8000a8e:	d00a      	beq.n	8000aa6 <__aeabi_fmul+0x11e>
 8000a90:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000a94:	bf18      	it	ne
 8000a96:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000a9a:	d1d8      	bne.n	8000a4e <__aeabi_fmul+0xc6>
 8000a9c:	ea80 0001 	eor.w	r0, r0, r1
 8000aa0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000aa4:	4770      	bx	lr
 8000aa6:	f090 0f00 	teq	r0, #0
 8000aaa:	bf17      	itett	ne
 8000aac:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ab0:	4608      	moveq	r0, r1
 8000ab2:	f091 0f00 	teqne	r1, #0
 8000ab6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000aba:	d014      	beq.n	8000ae6 <__aeabi_fmul+0x15e>
 8000abc:	ea92 0f0c 	teq	r2, ip
 8000ac0:	d101      	bne.n	8000ac6 <__aeabi_fmul+0x13e>
 8000ac2:	0242      	lsls	r2, r0, #9
 8000ac4:	d10f      	bne.n	8000ae6 <__aeabi_fmul+0x15e>
 8000ac6:	ea93 0f0c 	teq	r3, ip
 8000aca:	d103      	bne.n	8000ad4 <__aeabi_fmul+0x14c>
 8000acc:	024b      	lsls	r3, r1, #9
 8000ace:	bf18      	it	ne
 8000ad0:	4608      	movne	r0, r1
 8000ad2:	d108      	bne.n	8000ae6 <__aeabi_fmul+0x15e>
 8000ad4:	ea80 0001 	eor.w	r0, r0, r1
 8000ad8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000adc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae4:	4770      	bx	lr
 8000ae6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aea:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_fdiv>:
 8000af0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000af4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000af8:	bf1e      	ittt	ne
 8000afa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000afe:	ea92 0f0c 	teqne	r2, ip
 8000b02:	ea93 0f0c 	teqne	r3, ip
 8000b06:	d069      	beq.n	8000bdc <__aeabi_fdiv+0xec>
 8000b08:	eba2 0203 	sub.w	r2, r2, r3
 8000b0c:	ea80 0c01 	eor.w	ip, r0, r1
 8000b10:	0249      	lsls	r1, r1, #9
 8000b12:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000b16:	d037      	beq.n	8000b88 <__aeabi_fdiv+0x98>
 8000b18:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b1c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000b20:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000b24:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b28:	428b      	cmp	r3, r1
 8000b2a:	bf38      	it	cc
 8000b2c:	005b      	lslcc	r3, r3, #1
 8000b2e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000b32:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000b36:	428b      	cmp	r3, r1
 8000b38:	bf24      	itt	cs
 8000b3a:	1a5b      	subcs	r3, r3, r1
 8000b3c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b40:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000b44:	bf24      	itt	cs
 8000b46:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000b4a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b4e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000b52:	bf24      	itt	cs
 8000b54:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000b58:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b5c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000b60:	bf24      	itt	cs
 8000b62:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000b66:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b6a:	011b      	lsls	r3, r3, #4
 8000b6c:	bf18      	it	ne
 8000b6e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000b72:	d1e0      	bne.n	8000b36 <__aeabi_fdiv+0x46>
 8000b74:	2afd      	cmp	r2, #253	; 0xfd
 8000b76:	f63f af50 	bhi.w	8000a1a <__aeabi_fmul+0x92>
 8000b7a:	428b      	cmp	r3, r1
 8000b7c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000b8c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b90:	327f      	adds	r2, #127	; 0x7f
 8000b92:	bfc2      	ittt	gt
 8000b94:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000b98:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b9c:	4770      	bxgt	lr
 8000b9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba2:	f04f 0300 	mov.w	r3, #0
 8000ba6:	3a01      	subs	r2, #1
 8000ba8:	e737      	b.n	8000a1a <__aeabi_fmul+0x92>
 8000baa:	f092 0f00 	teq	r2, #0
 8000bae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000bb2:	bf02      	ittt	eq
 8000bb4:	0040      	lsleq	r0, r0, #1
 8000bb6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000bba:	3a01      	subeq	r2, #1
 8000bbc:	d0f9      	beq.n	8000bb2 <__aeabi_fdiv+0xc2>
 8000bbe:	ea40 000c 	orr.w	r0, r0, ip
 8000bc2:	f093 0f00 	teq	r3, #0
 8000bc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bca:	bf02      	ittt	eq
 8000bcc:	0049      	lsleq	r1, r1, #1
 8000bce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000bd2:	3b01      	subeq	r3, #1
 8000bd4:	d0f9      	beq.n	8000bca <__aeabi_fdiv+0xda>
 8000bd6:	ea41 010c 	orr.w	r1, r1, ip
 8000bda:	e795      	b.n	8000b08 <__aeabi_fdiv+0x18>
 8000bdc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000be0:	ea92 0f0c 	teq	r2, ip
 8000be4:	d108      	bne.n	8000bf8 <__aeabi_fdiv+0x108>
 8000be6:	0242      	lsls	r2, r0, #9
 8000be8:	f47f af7d 	bne.w	8000ae6 <__aeabi_fmul+0x15e>
 8000bec:	ea93 0f0c 	teq	r3, ip
 8000bf0:	f47f af70 	bne.w	8000ad4 <__aeabi_fmul+0x14c>
 8000bf4:	4608      	mov	r0, r1
 8000bf6:	e776      	b.n	8000ae6 <__aeabi_fmul+0x15e>
 8000bf8:	ea93 0f0c 	teq	r3, ip
 8000bfc:	d104      	bne.n	8000c08 <__aeabi_fdiv+0x118>
 8000bfe:	024b      	lsls	r3, r1, #9
 8000c00:	f43f af4c 	beq.w	8000a9c <__aeabi_fmul+0x114>
 8000c04:	4608      	mov	r0, r1
 8000c06:	e76e      	b.n	8000ae6 <__aeabi_fmul+0x15e>
 8000c08:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c0c:	bf18      	it	ne
 8000c0e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c12:	d1ca      	bne.n	8000baa <__aeabi_fdiv+0xba>
 8000c14:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000c18:	f47f af5c 	bne.w	8000ad4 <__aeabi_fmul+0x14c>
 8000c1c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000c20:	f47f af3c 	bne.w	8000a9c <__aeabi_fmul+0x114>
 8000c24:	e75f      	b.n	8000ae6 <__aeabi_fmul+0x15e>
 8000c26:	bf00      	nop

08000c28 <__gesf2>:
 8000c28:	f04f 3cff 	mov.w	ip, #4294967295
 8000c2c:	e006      	b.n	8000c3c <__cmpsf2+0x4>
 8000c2e:	bf00      	nop

08000c30 <__lesf2>:
 8000c30:	f04f 0c01 	mov.w	ip, #1
 8000c34:	e002      	b.n	8000c3c <__cmpsf2+0x4>
 8000c36:	bf00      	nop

08000c38 <__cmpsf2>:
 8000c38:	f04f 0c01 	mov.w	ip, #1
 8000c3c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c40:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c44:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c4c:	bf18      	it	ne
 8000c4e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c52:	d011      	beq.n	8000c78 <__cmpsf2+0x40>
 8000c54:	b001      	add	sp, #4
 8000c56:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000c5a:	bf18      	it	ne
 8000c5c:	ea90 0f01 	teqne	r0, r1
 8000c60:	bf58      	it	pl
 8000c62:	ebb2 0003 	subspl.w	r0, r2, r3
 8000c66:	bf88      	it	hi
 8000c68:	17c8      	asrhi	r0, r1, #31
 8000c6a:	bf38      	it	cc
 8000c6c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000c70:	bf18      	it	ne
 8000c72:	f040 0001 	orrne.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	d102      	bne.n	8000c84 <__cmpsf2+0x4c>
 8000c7e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000c82:	d105      	bne.n	8000c90 <__cmpsf2+0x58>
 8000c84:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000c88:	d1e4      	bne.n	8000c54 <__cmpsf2+0x1c>
 8000c8a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000c8e:	d0e1      	beq.n	8000c54 <__cmpsf2+0x1c>
 8000c90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_cfrcmple>:
 8000c98:	4684      	mov	ip, r0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	4661      	mov	r1, ip
 8000c9e:	e7ff      	b.n	8000ca0 <__aeabi_cfcmpeq>

08000ca0 <__aeabi_cfcmpeq>:
 8000ca0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ca2:	f7ff ffc9 	bl	8000c38 <__cmpsf2>
 8000ca6:	2800      	cmp	r0, #0
 8000ca8:	bf48      	it	mi
 8000caa:	f110 0f00 	cmnmi.w	r0, #0
 8000cae:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000cb0 <__aeabi_fcmpeq>:
 8000cb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cb4:	f7ff fff4 	bl	8000ca0 <__aeabi_cfcmpeq>
 8000cb8:	bf0c      	ite	eq
 8000cba:	2001      	moveq	r0, #1
 8000cbc:	2000      	movne	r0, #0
 8000cbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_fcmplt>:
 8000cc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cc8:	f7ff ffea 	bl	8000ca0 <__aeabi_cfcmpeq>
 8000ccc:	bf34      	ite	cc
 8000cce:	2001      	movcc	r0, #1
 8000cd0:	2000      	movcs	r0, #0
 8000cd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_fcmple>:
 8000cd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cdc:	f7ff ffe0 	bl	8000ca0 <__aeabi_cfcmpeq>
 8000ce0:	bf94      	ite	ls
 8000ce2:	2001      	movls	r0, #1
 8000ce4:	2000      	movhi	r0, #0
 8000ce6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cea:	bf00      	nop

08000cec <__aeabi_fcmpge>:
 8000cec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cf0:	f7ff ffd2 	bl	8000c98 <__aeabi_cfrcmple>
 8000cf4:	bf94      	ite	ls
 8000cf6:	2001      	movls	r0, #1
 8000cf8:	2000      	movhi	r0, #0
 8000cfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cfe:	bf00      	nop

08000d00 <__aeabi_fcmpgt>:
 8000d00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d04:	f7ff ffc8 	bl	8000c98 <__aeabi_cfrcmple>
 8000d08:	bf34      	ite	cc
 8000d0a:	2001      	movcc	r0, #1
 8000d0c:	2000      	movcs	r0, #0
 8000d0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d12:	bf00      	nop

08000d14 <__aeabi_f2iz>:
 8000d14:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d18:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d1c:	d30f      	bcc.n	8000d3e <__aeabi_f2iz+0x2a>
 8000d1e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d22:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d26:	d90d      	bls.n	8000d44 <__aeabi_f2iz+0x30>
 8000d28:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d30:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d34:	fa23 f002 	lsr.w	r0, r3, r2
 8000d38:	bf18      	it	ne
 8000d3a:	4240      	negne	r0, r0
 8000d3c:	4770      	bx	lr
 8000d3e:	f04f 0000 	mov.w	r0, #0
 8000d42:	4770      	bx	lr
 8000d44:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d48:	d101      	bne.n	8000d4e <__aeabi_f2iz+0x3a>
 8000d4a:	0242      	lsls	r2, r0, #9
 8000d4c:	d105      	bne.n	8000d5a <__aeabi_f2iz+0x46>
 8000d4e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000d58:	4770      	bx	lr
 8000d5a:	f04f 0000 	mov.w	r0, #0
 8000d5e:	4770      	bx	lr

08000d60 <__aeabi_f2uiz>:
 8000d60:	0042      	lsls	r2, r0, #1
 8000d62:	d20e      	bcs.n	8000d82 <__aeabi_f2uiz+0x22>
 8000d64:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d68:	d30b      	bcc.n	8000d82 <__aeabi_f2uiz+0x22>
 8000d6a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d6e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d72:	d409      	bmi.n	8000d88 <__aeabi_f2uiz+0x28>
 8000d74:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d7c:	fa23 f002 	lsr.w	r0, r3, r2
 8000d80:	4770      	bx	lr
 8000d82:	f04f 0000 	mov.w	r0, #0
 8000d86:	4770      	bx	lr
 8000d88:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d8c:	d101      	bne.n	8000d92 <__aeabi_f2uiz+0x32>
 8000d8e:	0242      	lsls	r2, r0, #9
 8000d90:	d102      	bne.n	8000d98 <__aeabi_f2uiz+0x38>
 8000d92:	f04f 30ff 	mov.w	r0, #4294967295
 8000d96:	4770      	bx	lr
 8000d98:	f04f 0000 	mov.w	r0, #0
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop

08000da0 <Encoder_Handler>:
 *
 *  Created on: Jul 30, 2024
 *      Author: I
 */
//---------------------------------------------------------------------------------
void Encoder_Handler(struct Encoder *self){
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
	/**
	 * This function describes method of interacting with Encoder based on buffer
	 */
	if(self->Rotary_Switch.event){
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	7f5b      	ldrb	r3, [r3, #29]
 8000dac:	f003 0302 	and.w	r3, r3, #2
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d029      	beq.n	8000e0a <Encoder_Handler+0x6a>
		if(self->Rotary_Switch.Rotary_Switch_Direcion==Direct)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	7f9b      	ldrb	r3, [r3, #30]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d112      	bne.n	8000de4 <Encoder_Handler+0x44>
			if(self->Rotary_Switch.State){
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	7f5b      	ldrb	r3, [r3, #29]
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d005      	beq.n	8000dd8 <Encoder_Handler+0x38>
				self->Encoder_Rotary_Switch_Buffer++;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd0:	1c5a      	adds	r2, r3, #1
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	62da      	str	r2, [r3, #44]	; 0x2c
		}else{
			self->Encoder_Button_State=Encoder_Button_long;
		}
		self->Button.Button_Event=0;
	}
}
 8000dd6:	e031      	b.n	8000e3c <Encoder_Handler+0x9c>
				self->Encoder_Rotary_Switch_Buffer--;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ddc:	1e5a      	subs	r2, r3, #1
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000de2:	e02b      	b.n	8000e3c <Encoder_Handler+0x9c>
			if(self->Rotary_Switch.State){
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	7f5b      	ldrb	r3, [r3, #29]
 8000de8:	f003 0301 	and.w	r3, r3, #1
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d005      	beq.n	8000dfe <Encoder_Handler+0x5e>
				self->Encoder_Rotary_Switch_Buffer--;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000df6:	1e5a      	subs	r2, r3, #1
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000dfc:	e01e      	b.n	8000e3c <Encoder_Handler+0x9c>
				self->Encoder_Rotary_Switch_Buffer++;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e02:	1c5a      	adds	r2, r3, #1
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000e08:	e018      	b.n	8000e3c <Encoder_Handler+0x9c>
	}else if(self->Button.Button_Event){
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	7a9b      	ldrb	r3, [r3, #10]
 8000e0e:	f003 0302 	and.w	r3, r3, #2
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d011      	beq.n	8000e3c <Encoder_Handler+0x9c>
		if(self->Button.State==1){
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	7adb      	ldrb	r3, [r3, #11]
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d104      	bne.n	8000e2a <Encoder_Handler+0x8a>
			self->Encoder_Button_State=Encoder_Button_Short;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2202      	movs	r2, #2
 8000e24:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8000e28:	e003      	b.n	8000e32 <Encoder_Handler+0x92>
			self->Encoder_Button_State=Encoder_Button_long;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2203      	movs	r2, #3
 8000e2e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		self->Button.Button_Event=0;
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	7a93      	ldrb	r3, [r2, #10]
 8000e36:	f36f 0341 	bfc	r3, #1, #1
 8000e3a:	7293      	strb	r3, [r2, #10]
}
 8000e3c:	bf00      	nop
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bc80      	pop	{r7}
 8000e44:	4770      	bx	lr

08000e46 <Button_Handler>:
//---------------------------------------------------------------------------------
void Button_Handler(struct Button* self){
 8000e46:	b480      	push	{r7}
 8000e48:	b083      	sub	sp, #12
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
	self->Button_Event=1;
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	7993      	ldrb	r3, [r2, #6]
 8000e52:	f043 0302 	orr.w	r3, r3, #2
 8000e56:	7193      	strb	r3, [r2, #6]
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bc80      	pop	{r7}
 8000e60:	4770      	bx	lr

08000e62 <Rotary_Switch_Handler>:
//---------------------------------------------------------------------------------
void Rotary_Switch_Handler(struct Rotary_Switch *self){
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
	/**
	 * Set event equal 1 and run Encoder_Handler
	 */
	self->event=1;
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	7853      	ldrb	r3, [r2, #1]
 8000e6e:	f043 0302 	orr.w	r3, r3, #2
 8000e72:	7053      	strb	r3, [r2, #1]
	Encoder_Handler(self->base);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff ff91 	bl	8000da0 <Encoder_Handler>
	self->event=0;
 8000e7e:	687a      	ldr	r2, [r7, #4]
 8000e80:	7853      	ldrb	r3, [r2, #1]
 8000e82:	f36f 0341 	bfc	r3, #1, #1
 8000e86:	7053      	strb	r3, [r2, #1]
}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <Rotary_Switch_EXTI>:
//---------------------------------------------------------------------------------
void Rotary_Switch_EXTI(struct Rotary_Switch *self, uint16_t* EXTI_PIN){
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
	/**
	 * Check if current EXTI are cursed by current Rotary_Switch EXTI_PIN
	 */
	if(self->EXTI_PIN==*EXTI_PIN){
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	889a      	ldrh	r2, [r3, #4]
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	881b      	ldrh	r3, [r3, #0]
 8000ea2:	429a      	cmp	r2, r3
 8000ea4:	d113      	bne.n	8000ece <Rotary_Switch_EXTI+0x3e>
		self->State=HAL_GPIO_ReadPin(self->GPIO,self->PIN);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	689a      	ldr	r2, [r3, #8]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	88db      	ldrh	r3, [r3, #6]
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	f006 ff85 	bl	8007dc0 <HAL_GPIO_ReadPin>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	f003 0301 	and.w	r3, r3, #1
 8000ebc:	b2d9      	uxtb	r1, r3
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	7853      	ldrb	r3, [r2, #1]
 8000ec2:	f361 0300 	bfi	r3, r1, #0, #1
 8000ec6:	7053      	strb	r3, [r2, #1]
		Rotary_Switch_Handler(self);
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f7ff ffca 	bl	8000e62 <Rotary_Switch_Handler>
	}
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <Button_EXTI>:
//---------------------------------------------------------------------------------
void Button_EXTI(struct Button* self, uint16_t *EXTI_PIN){
 8000ed6:	b480      	push	{r7}
 8000ed8:	b083      	sub	sp, #12
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
 8000ede:	6039      	str	r1, [r7, #0]
	/*
	 * Check if current EXTI are cursed by current BUTTON EXTI_PIN
	 * All buttons with same EXTI_PIN gets EXTI_Event
	 */
	if(self->EXTI_PIN==*EXTI_PIN){
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	891a      	ldrh	r2, [r3, #8]
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	881b      	ldrh	r3, [r3, #0]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d107      	bne.n	8000efc <Button_EXTI+0x26>
		self->EXTI_Event=1;
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	7993      	ldrb	r3, [r2, #6]
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	7193      	strb	r3, [r2, #6]
		self->count=0;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	711a      	strb	r2, [r3, #4]
	}
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bc80      	pop	{r7}
 8000f04:	4770      	bx	lr

08000f06 <Encoder_EXTI>:
//---------------------------------------------------------------------------------
void Encoder_EXTI(struct Encoder *self, uint16_t *EXTI_PIN){
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
 8000f0e:	6039      	str	r1, [r7, #0]
	/**
	 *Check if current EXTI are cursed by current Encoder's parts
	 */
	Rotary_Switch_EXTI(&(self->Rotary_Switch),  EXTI_PIN);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	331c      	adds	r3, #28
 8000f14:	6839      	ldr	r1, [r7, #0]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff ffba 	bl	8000e90 <Rotary_Switch_EXTI>
	Button_EXTI(&(self->Button), EXTI_PIN);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3304      	adds	r3, #4
 8000f20:	6839      	ldr	r1, [r7, #0]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff ffd7 	bl	8000ed6 <Button_EXTI>
}
 8000f28:	bf00      	nop
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <Button_MODE_it>:
//---------------------------------------------------------------------------------
void Button_MODE_it(struct Button* self){
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
	/**
	 * Function that describes every button's work mode algorithm
	 */
	switch (self->MODE){
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	7c1b      	ldrb	r3, [r3, #16]
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d05c      	beq.n	8000ffa <Button_MODE_it+0xca>
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	f300 80ac 	bgt.w	800109e <Button_MODE_it+0x16e>
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d002      	beq.n	8000f50 <Button_MODE_it+0x20>
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d029      	beq.n	8000fa2 <Button_MODE_it+0x72>
			}
			self->Previos_Stable_State=self->Stable_State;			//Rewrite prew stable state

		break;
	}
}
 8000f4e:	e0a6      	b.n	800109e <Button_MODE_it+0x16e>
			self->Stable_State=self->PIN_State;			//Write stable state
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	785b      	ldrb	r3, [r3, #1]
 8000f54:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000f58:	b2d9      	uxtb	r1, r3
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	7853      	ldrb	r3, [r2, #1]
 8000f5e:	f361 0382 	bfi	r3, r1, #2, #1
 8000f62:	7053      	strb	r3, [r2, #1]
			if(self->Stable_State!=self->Previos_Stable_State){
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	785b      	ldrb	r3, [r3, #1]
 8000f68:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	785b      	ldrb	r3, [r3, #1]
 8000f72:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d00c      	beq.n	8000f96 <Button_MODE_it+0x66>
				Button_Handler(self);						//Run button handler
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f7ff ff62 	bl	8000e46 <Button_Handler>
				self->Previos_Stable_State=self->Stable_State;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	785b      	ldrb	r3, [r3, #1]
 8000f86:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000f8a:	b2d9      	uxtb	r1, r3
 8000f8c:	687a      	ldr	r2, [r7, #4]
 8000f8e:	7853      	ldrb	r3, [r2, #1]
 8000f90:	f361 03c3 	bfi	r3, r1, #3, #1
 8000f94:	7053      	strb	r3, [r2, #1]
			self->EXTI_Event=0;							//Reset EXTI event to didn't check the button without EXTI interrupt
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	7993      	ldrb	r3, [r2, #6]
 8000f9a:	f36f 0300 	bfc	r3, #0, #1
 8000f9e:	7193      	strb	r3, [r2, #6]
		break;
 8000fa0:	e07d      	b.n	800109e <Button_MODE_it+0x16e>
			self->Stable_State=self->PIN_State;			//Write stable state
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	785b      	ldrb	r3, [r3, #1]
 8000fa6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000faa:	b2d9      	uxtb	r1, r3
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	7853      	ldrb	r3, [r2, #1]
 8000fb0:	f361 0382 	bfi	r3, r1, #2, #1
 8000fb4:	7053      	strb	r3, [r2, #1]
			if(self->Stable_State!=self->Previos_Stable_State){
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	785b      	ldrb	r3, [r3, #1]
 8000fba:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	785b      	ldrb	r3, [r3, #1]
 8000fc4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	d00a      	beq.n	8000fe4 <Button_MODE_it+0xb4>
				self->State=self->PIN_State;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	785b      	ldrb	r3, [r3, #1]
 8000fd2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	461a      	mov	r2, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	71da      	strb	r2, [r3, #7]
				Button_Handler(self);					//Run button handler
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f7ff ff31 	bl	8000e46 <Button_Handler>
			self->Previos_Stable_State=self->Stable_State;	//Rewrite prew stable state
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	785b      	ldrb	r3, [r3, #1]
 8000fe8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000fec:	b2d9      	uxtb	r1, r3
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	7853      	ldrb	r3, [r2, #1]
 8000ff2:	f361 03c3 	bfi	r3, r1, #3, #1
 8000ff6:	7053      	strb	r3, [r2, #1]
		break;
 8000ff8:	e051      	b.n	800109e <Button_MODE_it+0x16e>
			self->Stable_State=self->PIN_State;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	785b      	ldrb	r3, [r3, #1]
 8000ffe:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001002:	b2d9      	uxtb	r1, r3
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	7853      	ldrb	r3, [r2, #1]
 8001008:	f361 0382 	bfi	r3, r1, #2, #1
 800100c:	7053      	strb	r3, [r2, #1]
			if(self->Stable_State==GPIO_PIN_RESET){					//
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	785b      	ldrb	r3, [r3, #1]
 8001012:	f003 0304 	and.w	r3, r3, #4
 8001016:	b2db      	uxtb	r3, r3
 8001018:	2b00      	cmp	r3, #0
 800101a:	d106      	bne.n	800102a <Button_MODE_it+0xfa>
				self->Presed_counter++;								//Counting how many iterations button was pressed
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	789b      	ldrb	r3, [r3, #2]
 8001020:	3301      	adds	r3, #1
 8001022:	b2da      	uxtb	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	709a      	strb	r2, [r3, #2]
 8001028:	e02e      	b.n	8001088 <Button_MODE_it+0x158>
			else if(self->Previos_Stable_State==GPIO_PIN_RESET){	//If stable state was changed (rising edge)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	785b      	ldrb	r3, [r3, #1]
 800102e:	f003 0308 	and.w	r3, r3, #8
 8001032:	b2db      	uxtb	r3, r3
 8001034:	2b00      	cmp	r3, #0
 8001036:	d11f      	bne.n	8001078 <Button_MODE_it+0x148>
				if(self->Presed_counter<self->Presed_counter_max)	//and button was pressed less than Presed_counter_max
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	789a      	ldrb	r2, [r3, #2]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	78db      	ldrb	r3, [r3, #3]
 8001040:	429a      	cmp	r2, r3
 8001042:	d203      	bcs.n	800104c <Button_MODE_it+0x11c>
					self->State=1;									//State equal 1(short press)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2201      	movs	r2, #1
 8001048:	71da      	strb	r2, [r3, #7]
 800104a:	e002      	b.n	8001052 <Button_MODE_it+0x122>
					self->State=2;									//State equal 1(Long press)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2202      	movs	r2, #2
 8001050:	71da      	strb	r2, [r3, #7]
				self->Presed_counter=0;								//Reset pressed iteration counter
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	709a      	strb	r2, [r3, #2]
				self->EXTI_Event=0;									//Reset EXTI event
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	7993      	ldrb	r3, [r2, #6]
 800105c:	f36f 0300 	bfc	r3, #0, #1
 8001060:	7193      	strb	r3, [r2, #6]
				self->Button_Event=1;								//Set button event
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	7993      	ldrb	r3, [r2, #6]
 8001066:	f043 0302 	orr.w	r3, r3, #2
 800106a:	7193      	strb	r3, [r2, #6]
				Encoder_Handler(self->base);						//run Encoder_Handler
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	695b      	ldr	r3, [r3, #20]
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff fe95 	bl	8000da0 <Encoder_Handler>
 8001076:	e007      	b.n	8001088 <Button_MODE_it+0x158>
				self->EXTI_Event=0;									//Reset EXTI event
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	7993      	ldrb	r3, [r2, #6]
 800107c:	f36f 0300 	bfc	r3, #0, #1
 8001080:	7193      	strb	r3, [r2, #6]
				self->Presed_counter=0;								//Reset pressed iteration counter
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2200      	movs	r2, #0
 8001086:	709a      	strb	r2, [r3, #2]
			self->Previos_Stable_State=self->Stable_State;			//Rewrite prew stable state
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	785b      	ldrb	r3, [r3, #1]
 800108c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001090:	b2d9      	uxtb	r1, r3
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	7853      	ldrb	r3, [r2, #1]
 8001096:	f361 03c3 	bfi	r3, r1, #3, #1
 800109a:	7053      	strb	r3, [r2, #1]
		break;
 800109c:	bf00      	nop
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <Button_it>:
//---------------------------------------------------------------------------------
void Button_it(struct Button* self){
 80010a6:	b590      	push	{r4, r7, lr}
 80010a8:	b083      	sub	sp, #12
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
	/**
	 * This function realize "Contact bounce" filter and run main logic function
	 */
	if(self->EXTI_Event==1){												//Check pins state every time when EXTI's interrupt goes
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	799b      	ldrb	r3, [r3, #6]
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d038      	beq.n	800112e <Button_it+0x88>
		if(self->count==1){													//Contact bounce filter
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	791b      	ldrb	r3, [r3, #4]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d111      	bne.n	80010e8 <Button_it+0x42>
			self->PIN_State=HAL_GPIO_ReadPin(self->GPIO,self->PIN);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	68da      	ldr	r2, [r3, #12]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	895b      	ldrh	r3, [r3, #10]
 80010cc:	4619      	mov	r1, r3
 80010ce:	4610      	mov	r0, r2
 80010d0:	f006 fe76 	bl	8007dc0 <HAL_GPIO_ReadPin>
 80010d4:	4603      	mov	r3, r0
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	b2d9      	uxtb	r1, r3
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	7853      	ldrb	r3, [r2, #1]
 80010e0:	f361 0300 	bfi	r3, r1, #0, #1
 80010e4:	7053      	strb	r3, [r2, #1]
 80010e6:	e01c      	b.n	8001122 <Button_it+0x7c>
		}
		else if(self->count==self->count_max){
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	791a      	ldrb	r2, [r3, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	795b      	ldrb	r3, [r3, #5]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d116      	bne.n	8001122 <Button_it+0x7c>
			if(self->PIN_State==HAL_GPIO_ReadPin(self->GPIO,self->PIN)){
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	785b      	ldrb	r3, [r3, #1]
 80010f8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	461c      	mov	r4, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	68da      	ldr	r2, [r3, #12]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	895b      	ldrh	r3, [r3, #10]
 8001108:	4619      	mov	r1, r3
 800110a:	4610      	mov	r0, r2
 800110c:	f006 fe58 	bl	8007dc0 <HAL_GPIO_ReadPin>
 8001110:	4603      	mov	r3, r0
 8001112:	429c      	cmp	r4, r3
 8001114:	d102      	bne.n	800111c <Button_it+0x76>
				Button_MODE_it(self);
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f7ff ff0a 	bl	8000f30 <Button_MODE_it>
			}
			self->count=0;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2200      	movs	r2, #0
 8001120:	711a      	strb	r2, [r3, #4]
		}
		self->count++;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	791b      	ldrb	r3, [r3, #4]
 8001126:	3301      	adds	r3, #1
 8001128:	b2da      	uxtb	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	711a      	strb	r2, [r3, #4]
	}
}
 800112e:	bf00      	nop
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	bd90      	pop	{r4, r7, pc}

08001136 <Encoder_it>:
//---------------------------------------------------------------------------------
void Encoder_it(struct Encoder *self){
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
	/*
	 * Encoder iteration
	 */
	Button_it(&self->Button);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	3304      	adds	r3, #4
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff ffaf 	bl	80010a6 <Button_it>
}
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <Button_ini>:
//---------------------------------------------------------------------------------
void Button_ini(struct Button* self){
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
	/**
	 *Base button's parameters initialization
	 */
	self->count=0;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2200      	movs	r2, #0
 800115c:	711a      	strb	r2, [r3, #4]
	self->Presed_counter=0;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	709a      	strb	r2, [r3, #2]
	self->Previos_Stable_State=1;
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	7853      	ldrb	r3, [r2, #1]
 8001168:	f043 0308 	orr.w	r3, r3, #8
 800116c:	7053      	strb	r3, [r2, #1]
	self->Button_Event=0;
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	7993      	ldrb	r3, [r2, #6]
 8001172:	f36f 0341 	bfc	r3, #1, #1
 8001176:	7193      	strb	r3, [r2, #6]
	if(self->MODE==Button_Mode_Regular_Without_EXTI)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	7c1b      	ldrb	r3, [r3, #16]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d105      	bne.n	800118c <Button_ini+0x3c>
		self->EXTI_Event=1;								//for button without interrupts EXTI_Event always equal 1
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	7993      	ldrb	r3, [r2, #6]
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	7193      	strb	r3, [r2, #6]
	else
		self->EXTI_Event=0;
}
 800118a:	e004      	b.n	8001196 <Button_ini+0x46>
		self->EXTI_Event=0;
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	7993      	ldrb	r3, [r2, #6]
 8001190:	f36f 0300 	bfc	r3, #0, #1
 8001194:	7193      	strb	r3, [r2, #6]
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr

080011a0 <Button_Vector_Create>:
//---------------------------------------------------------------------------------
void Button_Vector_Create(struct Button_Vector *Vector, struct Button *Button){
 80011a0:	b5b0      	push	{r4, r5, r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
	/**
	 * Create a new element of Button_Vector which contain Button struct
	 */
	Button_ini(Button);
 80011aa:	6838      	ldr	r0, [r7, #0]
 80011ac:	f7ff ffd0 	bl	8001150 <Button_ini>
	struct Button *Bpr= malloc(sizeof(struct Button));
 80011b0:	2018      	movs	r0, #24
 80011b2:	f009 fea5 	bl	800af00 <malloc>
 80011b6:	4603      	mov	r3, r0
 80011b8:	613b      	str	r3, [r7, #16]
	*Bpr= *Button;
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	4614      	mov	r4, r2
 80011c0:	461d      	mov	r5, r3
 80011c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011c6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80011ca:	e884 0003 	stmia.w	r4, {r0, r1}
	if(Vector->Button==NULL)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d103      	bne.n	80011de <Button_Vector_Create+0x3e>
		Vector->Button=Bpr;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	605a      	str	r2, [r3, #4]
		}
		Vpr->Button=Bpr;
		NOW->next=Vpr;
		NOW->next->next=NULL;
	}
}
 80011dc:	e018      	b.n	8001210 <Button_Vector_Create+0x70>
		struct Button_Vector *Vpr= malloc(sizeof(struct Button_Vector));
 80011de:	2008      	movs	r0, #8
 80011e0:	f009 fe8e 	bl	800af00 <malloc>
 80011e4:	4603      	mov	r3, r0
 80011e6:	60fb      	str	r3, [r7, #12]
		struct Button_Vector *NOW=Vector;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	617b      	str	r3, [r7, #20]
		while(NOW->next!=NULL){
 80011ec:	e002      	b.n	80011f4 <Button_Vector_Create+0x54>
			NOW=NOW->next;
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	617b      	str	r3, [r7, #20]
		while(NOW->next!=NULL){
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d1f8      	bne.n	80011ee <Button_Vector_Create+0x4e>
		Vpr->Button=Bpr;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	605a      	str	r2, [r3, #4]
		NOW->next=Vpr;
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	68fa      	ldr	r2, [r7, #12]
 8001206:	601a      	str	r2, [r3, #0]
		NOW->next->next=NULL;
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
}
 8001210:	bf00      	nop
 8001212:	3718      	adds	r7, #24
 8001214:	46bd      	mov	sp, r7
 8001216:	bdb0      	pop	{r4, r5, r7, pc}

08001218 <Button_Vector_EXTI>:
//---------------------------------------------------------------------------------
void Button_Vector_EXTI(struct Button_Vector *self, uint16_t* GPIO){
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
	/**
	 * Run Button EXTI for all Button into Button_Vector
	 * First Parameter must be head of vector
	 */
	struct Button_Vector *NOW=self;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	60fb      	str	r3, [r7, #12]
	do{
		Button_EXTI(NOW->Button,GPIO);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	6839      	ldr	r1, [r7, #0]
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff fe52 	bl	8000ed6 <Button_EXTI>
		NOW=NOW->next;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	60fb      	str	r3, [r7, #12]
	}while(NOW!=NULL);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d1f3      	bne.n	8001226 <Button_Vector_EXTI+0xe>
}
 800123e:	bf00      	nop
 8001240:	bf00      	nop
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <Button_Vector_it>:
//---------------------------------------------------------------------------------
void Button_Vector_it(struct Button_Vector *self){
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
	/**
	 * Run Button_it for all Button into Button_Vector
	 */
	struct Button_Vector *NOW=self;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	60fb      	str	r3, [r7, #12]
	do{
		Button_it(NOW->Button);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff ff24 	bl	80010a6 <Button_it>
		NOW=NOW->next;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	60fb      	str	r3, [r7, #12]
	} while(NOW!=NULL);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d1f4      	bne.n	8001254 <Button_Vector_it+0xc>
}
 800126a:	bf00      	nop
 800126c:	bf00      	nop
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <Button_Get_Pin_State>:
//---------------------------------------------------------------------------------
GPIO_PinState Button_Get_Pin_State(struct Button* self){
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
	/*
	 * Return Button stable state and reset Button_Event
	 */
	self->Button_Event=0;
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	7993      	ldrb	r3, [r2, #6]
 8001280:	f36f 0341 	bfc	r3, #1, #1
 8001284:	7193      	strb	r3, [r2, #6]
	return self->Stable_State;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	785b      	ldrb	r3, [r3, #1]
 800128a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800128e:	b2db      	uxtb	r3, r3
}
 8001290:	4618      	mov	r0, r3
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr

0800129a <Button_Get_Event_State>:
//---------------------------------------------------------------------------------
uint8_t  Button_Get_Event_State(struct Button* self){
 800129a:	b480      	push	{r7}
 800129c:	b083      	sub	sp, #12
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
	/*
	 * Return Button event
	 */
	return self->Button_Event;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	799b      	ldrb	r3, [r3, #6]
 80012a6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80012aa:	b2db      	uxtb	r3, r3
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bc80      	pop	{r7}
 80012b4:	4770      	bx	lr

080012b6 <Encoder_Reset_Rotary_Switch_Buffer>:
//---------------------------------------------------------------------------------
void Encoder_Reset_Rotary_Switch_Buffer(struct Encoder *self){
 80012b6:	b480      	push	{r7}
 80012b8:	b083      	sub	sp, #12
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
	/**
	 * Reset Encoder_Rotary switch buffer
	 */
	self->Encoder_Rotary_Switch_Buffer=0;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2200      	movs	r2, #0
 80012c2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr

080012ce <Encoder_Get_Rotary_Switch_Buffer>:
//---------------------------------------------------------------------------------
int Encoder_Get_Rotary_Switch_Buffer(struct Encoder *self){
 80012ce:	b480      	push	{r7}
 80012d0:	b083      	sub	sp, #12
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
	/**
	 * Return how many times Rotary_Switch has switch it's position
	 * Return value can have negative value
	 */
	return  self->Encoder_Rotary_Switch_Buffer;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80012da:	4618      	mov	r0, r3
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr

080012e4 <Encoder_Reset_Button_State>:
//---------------------------------------------------------------------------------
void Encoder_Reset_Button_State(struct Encoder *self){
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
	self->Encoder_Button_State=Encoder_Button_NotPressed;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr

080012fe <Encoder_Get_Button_State>:
//---------------------------------------------------------------------------------
enum Encoder_Button_State Encoder_Get_Button_State(struct Encoder *self){
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
	return self->Encoder_Button_State;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
}
 800130c:	4618      	mov	r0, r3
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	bc80      	pop	{r7}
 8001314:	4770      	bx	lr

08001316 <Encoder_ini>:
//---------------------------------------------------------------------------------
void Rotary_Switch_ini(struct Rotary_Switch *self){

}
//---------------------------------------------------------------------------------
void Encoder_ini(struct Encoder *self){
 8001316:	b580      	push	{r7, lr}
 8001318:	b082      	sub	sp, #8
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
	/**
	 * Base Encoder's parameters initialization
	 */
	Button_ini(&(self->Button));
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	3304      	adds	r3, #4
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff ff14 	bl	8001150 <Button_ini>
	self->Button.base=self;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	619a      	str	r2, [r3, #24]
	self->Rotary_Switch.base=self;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	629a      	str	r2, [r3, #40]	; 0x28
	self->Button.ID=self->ID;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	781a      	ldrb	r2, [r3, #0]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	711a      	strb	r2, [r3, #4]
	self->Rotary_Switch.ID=self->ID;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	781a      	ldrb	r2, [r3, #0]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	771a      	strb	r2, [r3, #28]
	self->Encoder_Button_State=Encoder_Button_NotPressed;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2200      	movs	r2, #0
 8001348:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	self->Encoder_Rotary_Switch_Buffer=0;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <Filter_Mediana_3>:
#include"Filter.h"
//--------------------------------------------------------------------------------- Middle Average Filter
uint16_t Filter_Mediana_3(uint16_t a,uint16_t b, uint16_t c){
 800135a:	b480      	push	{r7}
 800135c:	b083      	sub	sp, #12
 800135e:	af00      	add	r7, sp, #0
 8001360:	4603      	mov	r3, r0
 8001362:	80fb      	strh	r3, [r7, #6]
 8001364:	460b      	mov	r3, r1
 8001366:	80bb      	strh	r3, [r7, #4]
 8001368:	4613      	mov	r3, r2
 800136a:	807b      	strh	r3, [r7, #2]
	/**
	 * Median filter for 3 samples
	 */
	if(a<=b){
 800136c:	88fa      	ldrh	r2, [r7, #6]
 800136e:	88bb      	ldrh	r3, [r7, #4]
 8001370:	429a      	cmp	r2, r3
 8001372:	d80d      	bhi.n	8001390 <Filter_Mediana_3+0x36>
		if(a<=c){
 8001374:	88fa      	ldrh	r2, [r7, #6]
 8001376:	887b      	ldrh	r3, [r7, #2]
 8001378:	429a      	cmp	r2, r3
 800137a:	d807      	bhi.n	800138c <Filter_Mediana_3+0x32>
			if(b<=c)
 800137c:	88ba      	ldrh	r2, [r7, #4]
 800137e:	887b      	ldrh	r3, [r7, #2]
 8001380:	429a      	cmp	r2, r3
 8001382:	d801      	bhi.n	8001388 <Filter_Mediana_3+0x2e>
				return b;
 8001384:	88bb      	ldrh	r3, [r7, #4]
 8001386:	e010      	b.n	80013aa <Filter_Mediana_3+0x50>
			else
				return c;
 8001388:	887b      	ldrh	r3, [r7, #2]
 800138a:	e00e      	b.n	80013aa <Filter_Mediana_3+0x50>
		}
		else
			return a;
 800138c:	88fb      	ldrh	r3, [r7, #6]
 800138e:	e00c      	b.n	80013aa <Filter_Mediana_3+0x50>
	}
	else
	{
		if(a<=c){
 8001390:	88fa      	ldrh	r2, [r7, #6]
 8001392:	887b      	ldrh	r3, [r7, #2]
 8001394:	429a      	cmp	r2, r3
 8001396:	d801      	bhi.n	800139c <Filter_Mediana_3+0x42>
			return c;
 8001398:	887b      	ldrh	r3, [r7, #2]
 800139a:	e006      	b.n	80013aa <Filter_Mediana_3+0x50>
		}
		else
			if(b<=c)
 800139c:	88ba      	ldrh	r2, [r7, #4]
 800139e:	887b      	ldrh	r3, [r7, #2]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d801      	bhi.n	80013a8 <Filter_Mediana_3+0x4e>
				return c;
 80013a4:	887b      	ldrh	r3, [r7, #2]
 80013a6:	e000      	b.n	80013aa <Filter_Mediana_3+0x50>
			else
				return b;
 80013a8:	88bb      	ldrh	r3, [r7, #4]
	}
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr

080013b4 <Filter_Mediana_9>:
//---------------------------------------------------------------------------------
uint16_t Filter_Mediana_9 (uint16_t *mas){
 80013b4:	b5b0      	push	{r4, r5, r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
	/**
	 * Median filter for 9 samples
	 */
	return	Filter_Mediana_3(
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	8818      	ldrh	r0, [r3, #0]
			Filter_Mediana_3(*mas,*(mas+1), *(mas+2)),
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3302      	adds	r3, #2
	return	Filter_Mediana_3(
 80013c4:	8819      	ldrh	r1, [r3, #0]
			Filter_Mediana_3(*mas,*(mas+1), *(mas+2)),
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	3304      	adds	r3, #4
	return	Filter_Mediana_3(
 80013ca:	881b      	ldrh	r3, [r3, #0]
 80013cc:	461a      	mov	r2, r3
 80013ce:	f7ff ffc4 	bl	800135a <Filter_Mediana_3>
 80013d2:	4603      	mov	r3, r0
 80013d4:	461c      	mov	r4, r3
			Filter_Mediana_3(*(mas+3),*(mas+4), *(mas+5)),
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	3306      	adds	r3, #6
	return	Filter_Mediana_3(
 80013da:	8818      	ldrh	r0, [r3, #0]
			Filter_Mediana_3(*(mas+3),*(mas+4), *(mas+5)),
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3308      	adds	r3, #8
	return	Filter_Mediana_3(
 80013e0:	8819      	ldrh	r1, [r3, #0]
			Filter_Mediana_3(*(mas+3),*(mas+4), *(mas+5)),
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	330a      	adds	r3, #10
	return	Filter_Mediana_3(
 80013e6:	881b      	ldrh	r3, [r3, #0]
 80013e8:	461a      	mov	r2, r3
 80013ea:	f7ff ffb6 	bl	800135a <Filter_Mediana_3>
 80013ee:	4603      	mov	r3, r0
 80013f0:	461d      	mov	r5, r3
			Filter_Mediana_3(*(mas+6),*(mas+7), *(mas+8)));
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	330c      	adds	r3, #12
	return	Filter_Mediana_3(
 80013f6:	8818      	ldrh	r0, [r3, #0]
			Filter_Mediana_3(*(mas+6),*(mas+7), *(mas+8)));
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	330e      	adds	r3, #14
	return	Filter_Mediana_3(
 80013fc:	8819      	ldrh	r1, [r3, #0]
			Filter_Mediana_3(*(mas+6),*(mas+7), *(mas+8)));
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	3310      	adds	r3, #16
	return	Filter_Mediana_3(
 8001402:	881b      	ldrh	r3, [r3, #0]
 8001404:	461a      	mov	r2, r3
 8001406:	f7ff ffa8 	bl	800135a <Filter_Mediana_3>
 800140a:	4603      	mov	r3, r0
 800140c:	461a      	mov	r2, r3
 800140e:	4629      	mov	r1, r5
 8001410:	4620      	mov	r0, r4
 8001412:	f7ff ffa2 	bl	800135a <Filter_Mediana_3>
 8001416:	4603      	mov	r3, r0
}
 8001418:	4618      	mov	r0, r3
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bdb0      	pop	{r4, r5, r7, pc}

08001420 <Filter_ini>:
//---------------------------------------------------------------------------------
void Filter_ini(struct Filter * self){
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
	/**
	 * Reset buffer
	 */
	self->Filter_Buffer=0;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	60da      	str	r2, [r3, #12]
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr

0800143a <Filter_Exp_Mov_Average>:
//--------------------------------------------------------------------------------- Exponential Moving Average Filter with adaptive koef
uint16_t Filter_Exp_Mov_Average(struct Filter* self){
 800143a:	b590      	push	{r4, r7, lr}
 800143c:	b083      	sub	sp, #12
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
		if(abs((int)self->Val_Now - self->Filter_Buffer)>self->Val_Delata)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff fc64 	bl	8000d14 <__aeabi_f2iz>
 800144c:	4603      	mov	r3, r0
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff fa46 	bl	80008e0 <__aeabi_i2f>
 8001454:	4602      	mov	r2, r0
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	4619      	mov	r1, r3
 800145c:	4610      	mov	r0, r2
 800145e:	f7ff f989 	bl	8000774 <__aeabi_fsub>
 8001462:	4603      	mov	r3, r0
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff fc55 	bl	8000d14 <__aeabi_f2iz>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	bfb8      	it	lt
 8001470:	425b      	neglt	r3, r3
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff fa34 	bl	80008e0 <__aeabi_i2f>
 8001478:	4602      	mov	r2, r0
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	691b      	ldr	r3, [r3, #16]
 800147e:	4619      	mov	r1, r3
 8001480:	4610      	mov	r0, r2
 8001482:	f7ff fc3d 	bl	8000d00 <__aeabi_fcmpgt>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d004      	beq.n	8001496 <Filter_Exp_Mov_Average+0x5c>
			self->k=self->k_max;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689a      	ldr	r2, [r3, #8]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	e003      	b.n	800149e <Filter_Exp_Mov_Average+0x64>
		else
			self->k=self->k_min;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685a      	ldr	r2, [r3, #4]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	601a      	str	r2, [r3, #0]

	  self->Filter_Buffer += (self->Val_Now - self->Filter_Buffer) * self->k;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	68dc      	ldr	r4, [r3, #12]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	695a      	ldr	r2, [r3, #20]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	4619      	mov	r1, r3
 80014ac:	4610      	mov	r0, r2
 80014ae:	f7ff f961 	bl	8000774 <__aeabi_fsub>
 80014b2:	4603      	mov	r3, r0
 80014b4:	461a      	mov	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4619      	mov	r1, r3
 80014bc:	4610      	mov	r0, r2
 80014be:	f7ff fa63 	bl	8000988 <__aeabi_fmul>
 80014c2:	4603      	mov	r3, r0
 80014c4:	4619      	mov	r1, r3
 80014c6:	4620      	mov	r0, r4
 80014c8:	f7ff f956 	bl	8000778 <__addsf3>
 80014cc:	4603      	mov	r3, r0
 80014ce:	461a      	mov	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	60da      	str	r2, [r3, #12]
	  return (uint16_t)self->Filter_Buffer;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff fc41 	bl	8000d60 <__aeabi_f2uiz>
 80014de:	4603      	mov	r3, r0
 80014e0:	b29b      	uxth	r3, r3
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd90      	pop	{r4, r7, pc}

080014ea <Filter_Combined>:
//---------------------------------------------------------------------------------
uint16_t Filter_Combined(struct Filter* self){
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b082      	sub	sp, #8
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
	/**
	 * 	Exponential Moving Average Filter with adaptive koef combined with Median filter
	 * 	Return result of Filter
	 */
	if(self->Filter_Mode==Three_Samples){
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	7e1b      	ldrb	r3, [r3, #24]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d114      	bne.n	8001524 <Filter_Combined+0x3a>
		self->Val_Now=Filter_Mediana_3(*(self->mass),*((self->mass)+1), *((self->mass)+2));
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	69db      	ldr	r3, [r3, #28]
 80014fe:	8818      	ldrh	r0, [r3, #0]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	69db      	ldr	r3, [r3, #28]
 8001504:	3302      	adds	r3, #2
 8001506:	8819      	ldrh	r1, [r3, #0]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	69db      	ldr	r3, [r3, #28]
 800150c:	3304      	adds	r3, #4
 800150e:	881b      	ldrh	r3, [r3, #0]
 8001510:	461a      	mov	r2, r3
 8001512:	f7ff ff22 	bl	800135a <Filter_Mediana_3>
 8001516:	4603      	mov	r3, r0
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff f9dd 	bl	80008d8 <__aeabi_ui2f>
 800151e:	4602      	mov	r2, r0
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	615a      	str	r2, [r3, #20]
	}
	if(self->Filter_Mode==Nine_Samples){
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	7e1b      	ldrb	r3, [r3, #24]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d10b      	bne.n	8001544 <Filter_Combined+0x5a>
		self->Val_Now=Filter_Mediana_9(self->mass);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	69db      	ldr	r3, [r3, #28]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff ff3f 	bl	80013b4 <Filter_Mediana_9>
 8001536:	4603      	mov	r3, r0
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff f9cd 	bl	80008d8 <__aeabi_ui2f>
 800153e:	4602      	mov	r2, r0
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	615a      	str	r2, [r3, #20]
	}
	return Filter_Exp_Mov_Average(self);
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7ff ff78 	bl	800143a <Filter_Exp_Mov_Average>
 800154a:	4603      	mov	r3, r0
}
 800154c:	4618      	mov	r0, r3
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <Flash_Erase>:
 *  Created on: Nov 11, 2024
 *      Author: I
 */
#include "Flash_Custom.h"
//---------------------------------------------------------------------------------
uint8_t Flash_Erase (uint32_t addr, uint16_t size){
 8001554:	b580      	push	{r7, lr}
 8001556:	b088      	sub	sp, #32
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	460b      	mov	r3, r1
 800155e:	807b      	strh	r3, [r7, #2]
	  * addr  Base address.
	  * size  Size all data for recording into page.
	  * return HAL_StatusTypeDef HAL_OK or HAL_ERROR .
	  */
		FLASH_EraseInitTypeDef FlashErase;
		uint32_t sectorError = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	60fb      	str	r3, [r7, #12]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001564:	b672      	cpsid	i
}
 8001566:	bf00      	nop

		__disable_irq();
		HAL_FLASH_Unlock();
 8001568:	f006 f916 	bl	8007798 <HAL_FLASH_Unlock>

		FlashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 800156c:	2300      	movs	r3, #0
 800156e:	613b      	str	r3, [r7, #16]
		FlashErase.PageAddress = addr;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	61bb      	str	r3, [r7, #24]
		FlashErase.NbPages = size / 1024 + 1;
 8001574:	887b      	ldrh	r3, [r7, #2]
 8001576:	0a9b      	lsrs	r3, r3, #10
 8001578:	b29b      	uxth	r3, r3
 800157a:	3301      	adds	r3, #1
 800157c:	61fb      	str	r3, [r7, #28]

		if (HAL_FLASHEx_Erase(&FlashErase, &sectorError) != HAL_OK)
 800157e:	f107 020c 	add.w	r2, r7, #12
 8001582:	f107 0310 	add.w	r3, r7, #16
 8001586:	4611      	mov	r1, r2
 8001588:	4618      	mov	r0, r3
 800158a:	f006 f9ed 	bl	8007968 <HAL_FLASHEx_Erase>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d005      	beq.n	80015a0 <Flash_Erase+0x4c>
		{
			HAL_FLASH_Lock();
 8001594:	f006 f926 	bl	80077e4 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8001598:	b662      	cpsie	i
}
 800159a:	bf00      	nop
	        __enable_irq();
			return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e004      	b.n	80015aa <Flash_Erase+0x56>
		}
		HAL_FLASH_Lock();
 80015a0:	f006 f920 	bl	80077e4 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 80015a4:	b662      	cpsie	i
}
 80015a6:	bf00      	nop
		__enable_irq();
		return HAL_OK;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3720      	adds	r7, #32
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <Flash_Write>:

//---------------------------------------------------------------------------------
uint32_t Flash_Write (uint32_t addr, void *data_ptr, uint16_t size){
 80015b2:	b5b0      	push	{r4, r5, r7, lr}
 80015b4:	b086      	sub	sp, #24
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	60f8      	str	r0, [r7, #12]
 80015ba:	60b9      	str	r1, [r7, #8]
 80015bc:	4613      	mov	r3, r2
 80015be:	80fb      	strh	r3, [r7, #6]
  __ASM volatile ("cpsid i" : : : "memory");
 80015c0:	b672      	cpsid	i
}
 80015c2:	bf00      	nop
	  * return HAL_StatusTypeDef HAL_OK or HAL_ERROR .
	  */

	HAL_StatusTypeDef status;
	__disable_irq();
	HAL_FLASH_Unlock();
 80015c4:	f006 f8e8 	bl	8007798 <HAL_FLASH_Unlock>

	for (uint8_t i = 0; i < size/2; i++)
 80015c8:	2300      	movs	r3, #0
 80015ca:	75bb      	strb	r3, [r7, #22]
 80015cc:	e019      	b.n	8001602 <Flash_Write+0x50>
	{
		status += HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr, ((uint16_t *)data_ptr)[i]);
 80015ce:	7dbb      	ldrb	r3, [r7, #22]
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	68ba      	ldr	r2, [r7, #8]
 80015d4:	4413      	add	r3, r2
 80015d6:	881b      	ldrh	r3, [r3, #0]
 80015d8:	b29b      	uxth	r3, r3
 80015da:	2200      	movs	r2, #0
 80015dc:	461c      	mov	r4, r3
 80015de:	4615      	mov	r5, r2
 80015e0:	4622      	mov	r2, r4
 80015e2:	462b      	mov	r3, r5
 80015e4:	68f9      	ldr	r1, [r7, #12]
 80015e6:	2001      	movs	r0, #1
 80015e8:	f005 ff70 	bl	80074cc <HAL_FLASH_Program>
 80015ec:	4603      	mov	r3, r0
 80015ee:	461a      	mov	r2, r3
 80015f0:	7dfb      	ldrb	r3, [r7, #23]
 80015f2:	4413      	add	r3, r2
 80015f4:	75fb      	strb	r3, [r7, #23]
		addr+=2;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	3302      	adds	r3, #2
 80015fa:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < size/2; i++)
 80015fc:	7dbb      	ldrb	r3, [r7, #22]
 80015fe:	3301      	adds	r3, #1
 8001600:	75bb      	strb	r3, [r7, #22]
 8001602:	7dbb      	ldrb	r3, [r7, #22]
 8001604:	b29a      	uxth	r2, r3
 8001606:	88fb      	ldrh	r3, [r7, #6]
 8001608:	085b      	lsrs	r3, r3, #1
 800160a:	b29b      	uxth	r3, r3
 800160c:	429a      	cmp	r2, r3
 800160e:	d3de      	bcc.n	80015ce <Flash_Write+0x1c>
	}
	HAL_FLASH_Lock();
 8001610:	f006 f8e8 	bl	80077e4 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8001614:	b662      	cpsie	i
}
 8001616:	bf00      	nop
	__enable_irq();

	if(status != HAL_OK)
 8001618:	7dfb      	ldrb	r3, [r7, #23]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <Flash_Write+0x70>
		return status;
 800161e:	7dfb      	ldrb	r3, [r7, #23]
 8001620:	e000      	b.n	8001624 <Flash_Write+0x72>
	else
		return addr;
 8001622:	68fb      	ldr	r3, [r7, #12]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bdb0      	pop	{r4, r5, r7, pc}

0800162c <Flash_Read>:
//---------------------------------------------------------------------------------
void Flash_Read (uint32_t addr, void *data_ptr, uint16_t size){
 800162c:	b480      	push	{r7}
 800162e:	b087      	sub	sp, #28
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	4613      	mov	r3, r2
 8001638:	80fb      	strh	r3, [r7, #6]
	 * Read data from flash into data_ptr
	 * addr  Base address.
	 * size  Size all data for recording into page.
	 *
	 */
	for (int i = 0; i < size; i++)
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
 800163e:	e00c      	b.n	800165a <Flash_Read+0x2e>
	{
		((uint8_t *)data_ptr)[i] = *(__IO uint32_t*)addr;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	6819      	ldr	r1, [r3, #0]
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	68ba      	ldr	r2, [r7, #8]
 8001648:	4413      	add	r3, r2
 800164a:	b2ca      	uxtb	r2, r1
 800164c:	701a      	strb	r2, [r3, #0]
		addr++;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	3301      	adds	r3, #1
 8001652:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < size; i++)
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	3301      	adds	r3, #1
 8001658:	617b      	str	r3, [r7, #20]
 800165a:	88fb      	ldrh	r3, [r7, #6]
 800165c:	697a      	ldr	r2, [r7, #20]
 800165e:	429a      	cmp	r2, r3
 8001660:	dbee      	blt.n	8001640 <Flash_Read+0x14>
	}
}
 8001662:	bf00      	nop
 8001664:	bf00      	nop
 8001666:	371c      	adds	r7, #28
 8001668:	46bd      	mov	sp, r7
 800166a:	bc80      	pop	{r7}
 800166c:	4770      	bx	lr

0800166e <OLED_Send_Command>:
		0x00, 0x00, 0x82, 0x7C, 0x10, 0x00,   // }
		0x00, 0x00, 0x06, 0x09, 0x09, 0x06    // ~ (Degrees)
};

//----------------------------------------------------------------------------
void OLED_Send_Command(struct OLED * self,uint8_t Command){
 800166e:	b580      	push	{r7, lr}
 8001670:	b086      	sub	sp, #24
 8001672:	af02      	add	r7, sp, #8
 8001674:	6078      	str	r0, [r7, #4]
 8001676:	460b      	mov	r3, r1
 8001678:	70fb      	strb	r3, [r7, #3]
	/**
	 * Send command to the OLED display
	 */
	uint8_t Local_Bufer[1]={0};
 800167a:	2300      	movs	r3, #0
 800167c:	733b      	strb	r3, [r7, #12]
	Local_Bufer[0]=OLED_Command_Buffer;
 800167e:	2380      	movs	r3, #128	; 0x80
 8001680:	733b      	strb	r3, [r7, #12]
	Local_Bufer[1]=Command;
 8001682:	78fb      	ldrb	r3, [r7, #3]
 8001684:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(self->hi2c,self->Adress,(uint8_t *)&Local_Bufer,(uint16_t)2,1000);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6818      	ldr	r0, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	8899      	ldrh	r1, [r3, #4]
 800168e:	f107 020c 	add.w	r2, r7, #12
 8001692:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001696:	9300      	str	r3, [sp, #0]
 8001698:	2302      	movs	r3, #2
 800169a:	f006 fd1d 	bl	80080d8 <HAL_I2C_Master_Transmit>
}
 800169e:	bf00      	nop
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <OLED_Search_Adress>:
//----------------------------------------------------------------------------
void OLED_Search_Adress(struct OLED * self){
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b084      	sub	sp, #16
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
	/**
	 *	Searching address for current OLED
	 */
	for(int i=0;i<256;i++){
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	e012      	b.n	80016da <OLED_Search_Adress+0x34>
			if(HAL_I2C_IsDeviceReady((self->hi2c),i,10,2)==HAL_OK){
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6818      	ldr	r0, [r3, #0]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	b299      	uxth	r1, r3
 80016bc:	2302      	movs	r3, #2
 80016be:	220a      	movs	r2, #10
 80016c0:	f006 fe08 	bl	80082d4 <HAL_I2C_IsDeviceReady>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d104      	bne.n	80016d4 <OLED_Search_Adress+0x2e>
				self->Adress=i;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	b29a      	uxth	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	809a      	strh	r2, [r3, #4]
				break;
 80016d2:	e006      	b.n	80016e2 <OLED_Search_Adress+0x3c>
	for(int i=0;i<256;i++){
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	3301      	adds	r3, #1
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2bff      	cmp	r3, #255	; 0xff
 80016de:	dde9      	ble.n	80016b4 <OLED_Search_Adress+0xe>
			}
		}
}
 80016e0:	bf00      	nop
 80016e2:	bf00      	nop
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <OLED_ini>:
//----------------------------------------------------------------------------

void OLED_ini(struct OLED * self){
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b082      	sub	sp, #8
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
	/**
	 * Command initialization of OLED display
	 */
	OLED_Send_Command(self,0xAF);		//Display on/off
 80016f2:	21af      	movs	r1, #175	; 0xaf
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f7ff ffba 	bl	800166e <OLED_Send_Command>

	OLED_Send_Command(self,0xA6);		//Normal/inverse color mode
 80016fa:	21a6      	movs	r1, #166	; 0xa6
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7ff ffb6 	bl	800166e <OLED_Send_Command>

	OLED_Send_Command(self,0x20);		//Set page address mode
 8001702:	2120      	movs	r1, #32
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7ff ffb2 	bl	800166e <OLED_Send_Command>
	OLED_Send_Command(self,0x0);
 800170a:	2100      	movs	r1, #0
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f7ff ffae 	bl	800166e <OLED_Send_Command>

	OLED_Send_Command(self,0x8d);		//Pump Charge
 8001712:	218d      	movs	r1, #141	; 0x8d
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7ff ffaa 	bl	800166e <OLED_Send_Command>

	OLED_Send_Command(self,0xA4);		//Entire display on (output flows/ignore ram)
 800171a:	21a4      	movs	r1, #164	; 0xa4
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f7ff ffa6 	bl	800166e <OLED_Send_Command>

	OLED_Send_Command(self,0xA0);		//Segment re-map
 8001722:	21a0      	movs	r1, #160	; 0xa0
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f7ff ffa2 	bl	800166e <OLED_Send_Command>

	OLED_Send_Command(self,0xC7);		//Com output right direction/inverse direction
 800172a:	21c7      	movs	r1, #199	; 0xc7
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7ff ff9e 	bl	800166e <OLED_Send_Command>

	OLED_Clear_Display(self);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f000 f876 	bl	8001824 <OLED_Clear_Display>

	OLED_Send_Command(self,0x21);    	//Set COM remap value(Set Column Address)
 8001738:	2121      	movs	r1, #33	; 0x21
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f7ff ff97 	bl	800166e <OLED_Send_Command>
	OLED_Send_Command(self,0x1);			//1
 8001740:	2101      	movs	r1, #1
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff ff93 	bl	800166e <OLED_Send_Command>
	OLED_Send_Command(self,0x7E);		//126
 8001748:	217e      	movs	r1, #126	; 0x7e
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7ff ff8f 	bl	800166e <OLED_Send_Command>

	OLED_Send_Command(self,0x22);		//Set Page Address
 8001750:	2122      	movs	r1, #34	; 0x22
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff ff8b 	bl	800166e <OLED_Send_Command>
	OLED_Send_Command(self,0x0);
 8001758:	2100      	movs	r1, #0
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7ff ff87 	bl	800166e <OLED_Send_Command>
	OLED_Send_Command(self,0x7);
 8001760:	2107      	movs	r1, #7
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f7ff ff83 	bl	800166e <OLED_Send_Command>

}
 8001768:	bf00      	nop
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <OLED_Set_Cursor>:
//----------------------------------------------------------------------------
void OLED_Set_Cursor(struct OLED * self,uint16_t x,uint8_t y){
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	460b      	mov	r3, r1
 800177a:	807b      	strh	r3, [r7, #2]
 800177c:	4613      	mov	r3, r2
 800177e:	707b      	strb	r3, [r7, #1]
	/**
	 * Sets position on display from what will be display
	 */
	OLED_Send_Command(self,0xB0|y);
 8001780:	787b      	ldrb	r3, [r7, #1]
 8001782:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8001786:	b2db      	uxtb	r3, r3
 8001788:	4619      	mov	r1, r3
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7ff ff6f 	bl	800166e <OLED_Send_Command>
	OLED_Send_Command(self,x & 0x0F);
 8001790:	887b      	ldrh	r3, [r7, #2]
 8001792:	b2db      	uxtb	r3, r3
 8001794:	f003 030f 	and.w	r3, r3, #15
 8001798:	b2db      	uxtb	r3, r3
 800179a:	4619      	mov	r1, r3
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f7ff ff66 	bl	800166e <OLED_Send_Command>
	OLED_Send_Command(self,((x>>4) & 0x0F)+0x10);
 80017a2:	887b      	ldrh	r3, [r7, #2]
 80017a4:	091b      	lsrs	r3, r3, #4
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	f003 030f 	and.w	r3, r3, #15
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	3310      	adds	r3, #16
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	4619      	mov	r1, r3
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f7ff ff59 	bl	800166e <OLED_Send_Command>
}
 80017bc:	bf00      	nop
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <OLED_Set_Char_Cursor>:
//----------------------------------------------------------------------------
void OLED_Set_Char_Cursor(struct OLED * self, uint16_t x,uint8_t y){
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	460b      	mov	r3, r1
 80017ce:	807b      	strh	r3, [r7, #2]
 80017d0:	4613      	mov	r3, r2
 80017d2:	707b      	strb	r3, [r7, #1]
	/**
	 * Sets position on display from what will be display based on ASII symbols size
	 */
	x*=6;
 80017d4:	887b      	ldrh	r3, [r7, #2]
 80017d6:	461a      	mov	r2, r3
 80017d8:	0052      	lsls	r2, r2, #1
 80017da:	4413      	add	r3, r2
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	807b      	strh	r3, [r7, #2]
	OLED_Send_Command(self,0xB0|y);
 80017e0:	787b      	ldrb	r3, [r7, #1]
 80017e2:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	4619      	mov	r1, r3
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7ff ff3f 	bl	800166e <OLED_Send_Command>
	OLED_Send_Command(self,x & 0x0F);
 80017f0:	887b      	ldrh	r3, [r7, #2]
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	f003 030f 	and.w	r3, r3, #15
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	4619      	mov	r1, r3
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f7ff ff36 	bl	800166e <OLED_Send_Command>
	OLED_Send_Command(self,((x>>4) & 0x0F)+0x10);
 8001802:	887b      	ldrh	r3, [r7, #2]
 8001804:	091b      	lsrs	r3, r3, #4
 8001806:	b29b      	uxth	r3, r3
 8001808:	b2db      	uxtb	r3, r3
 800180a:	f003 030f 	and.w	r3, r3, #15
 800180e:	b2db      	uxtb	r3, r3
 8001810:	3310      	adds	r3, #16
 8001812:	b2db      	uxtb	r3, r3
 8001814:	4619      	mov	r1, r3
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f7ff ff29 	bl	800166e <OLED_Send_Command>
}
 800181c:	bf00      	nop
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <OLED_Clear_Display>:
//----------------------------------------------------------------------------
void OLED_Clear_Display(struct OLED * self){
 8001824:	b580      	push	{r7, lr}
 8001826:	b0a6      	sub	sp, #152	; 0x98
 8001828:	af02      	add	r7, sp, #8
 800182a:	6078      	str	r0, [r7, #4]
	/**
	 * Clear OLED display
	 */
	uint8_t Local_Bufer[129]={0};
 800182c:	2300      	movs	r3, #0
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	f107 0310 	add.w	r3, r7, #16
 8001834:	227d      	movs	r2, #125	; 0x7d
 8001836:	2100      	movs	r1, #0
 8001838:	4618      	mov	r0, r3
 800183a:	f009 fc1d 	bl	800b078 <memset>
	Local_Bufer[0]=OLED_Data_Buffer;
 800183e:	2340      	movs	r3, #64	; 0x40
 8001840:	733b      	strb	r3, [r7, #12]
	for(uint8_t j=0;j<8;j++){
 8001842:	2300      	movs	r3, #0
 8001844:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8001848:	e017      	b.n	800187a <OLED_Clear_Display+0x56>
		OLED_Set_Cursor(self,0,j);
 800184a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800184e:	461a      	mov	r2, r3
 8001850:	2100      	movs	r1, #0
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f7ff ff8c 	bl	8001770 <OLED_Set_Cursor>
		HAL_I2C_Master_Transmit(self->hi2c,self->Adress,(uint8_t *)&Local_Bufer,(uint16_t)129,1000);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6818      	ldr	r0, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	8899      	ldrh	r1, [r3, #4]
 8001860:	f107 020c 	add.w	r2, r7, #12
 8001864:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001868:	9300      	str	r3, [sp, #0]
 800186a:	2381      	movs	r3, #129	; 0x81
 800186c:	f006 fc34 	bl	80080d8 <HAL_I2C_Master_Transmit>
	for(uint8_t j=0;j<8;j++){
 8001870:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001874:	3301      	adds	r3, #1
 8001876:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800187a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800187e:	2b07      	cmp	r3, #7
 8001880:	d9e3      	bls.n	800184a <OLED_Clear_Display+0x26>
		}
}
 8001882:	bf00      	nop
 8001884:	bf00      	nop
 8001886:	3790      	adds	r7, #144	; 0x90
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <OLED_Send_Char>:
//----------------------------------------------------------------------------
void OLED_Send_Char(struct OLED * self, uint8_t data){
 800188c:	b580      	push	{r7, lr}
 800188e:	b088      	sub	sp, #32
 8001890:	af02      	add	r7, sp, #8
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	460b      	mov	r3, r1
 8001896:	70fb      	strb	r3, [r7, #3]
	/**
	 * Drawing char on a OLED display
	 */
	uint8_t Local_Bufer[7]={0};
 8001898:	2300      	movs	r3, #0
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	f107 030c 	add.w	r3, r7, #12
 80018a0:	2100      	movs	r1, #0
 80018a2:	460a      	mov	r2, r1
 80018a4:	801a      	strh	r2, [r3, #0]
 80018a6:	460a      	mov	r2, r1
 80018a8:	709a      	strb	r2, [r3, #2]
	Local_Bufer[0]=OLED_Data_Buffer;
 80018aa:	2340      	movs	r3, #64	; 0x40
 80018ac:	723b      	strb	r3, [r7, #8]
	int sp=(data-(int)' ')*6;
 80018ae:	78fb      	ldrb	r3, [r7, #3]
 80018b0:	f1a3 0220 	sub.w	r2, r3, #32
 80018b4:	4613      	mov	r3, r2
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	4413      	add	r3, r2
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	613b      	str	r3, [r7, #16]
	for(int j=1;j<7;j++)
 80018be:	2301      	movs	r3, #1
 80018c0:	617b      	str	r3, [r7, #20]
 80018c2:	e00e      	b.n	80018e2 <OLED_Send_Char+0x56>
		Local_Bufer[j]=CharMass[sp+j-1];
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	4413      	add	r3, r2
 80018ca:	3b01      	subs	r3, #1
 80018cc:	4a0e      	ldr	r2, [pc, #56]	; (8001908 <OLED_Send_Char+0x7c>)
 80018ce:	5cd1      	ldrb	r1, [r2, r3]
 80018d0:	f107 0208 	add.w	r2, r7, #8
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	4413      	add	r3, r2
 80018d8:	460a      	mov	r2, r1
 80018da:	701a      	strb	r2, [r3, #0]
	for(int j=1;j<7;j++)
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	3301      	adds	r3, #1
 80018e0:	617b      	str	r3, [r7, #20]
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	2b06      	cmp	r3, #6
 80018e6:	dded      	ble.n	80018c4 <OLED_Send_Char+0x38>

	HAL_I2C_Master_Transmit(self->hi2c,self->Adress,(uint8_t *)&Local_Bufer,(uint16_t)7,1000);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6818      	ldr	r0, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	8899      	ldrh	r1, [r3, #4]
 80018f0:	f107 0208 	add.w	r2, r7, #8
 80018f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	2307      	movs	r3, #7
 80018fc:	f006 fbec 	bl	80080d8 <HAL_I2C_Master_Transmit>

}
 8001900:	bf00      	nop
 8001902:	3718      	adds	r7, #24
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	20000000 	.word	0x20000000

0800190c <OLED_Clear_Line>:
	 */
	OLED_Set_Char_Cursor(self,x, y);
	OLED_Send_Char(self,' ');
}
//----------------------------------------------------------------------------
void OLED_Clear_Line (struct OLED * self, uint8_t y){
 800190c:	b580      	push	{r7, lr}
 800190e:	b0a4      	sub	sp, #144	; 0x90
 8001910:	af02      	add	r7, sp, #8
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	460b      	mov	r3, r1
 8001916:	70fb      	strb	r3, [r7, #3]
	/**
	 * Clear line on OLED display
	 */
	uint8_t Local_Bufer[127]={0};
 8001918:	2300      	movs	r3, #0
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	f107 030c 	add.w	r3, r7, #12
 8001920:	227b      	movs	r2, #123	; 0x7b
 8001922:	2100      	movs	r1, #0
 8001924:	4618      	mov	r0, r3
 8001926:	f009 fba7 	bl	800b078 <memset>
	Local_Bufer[0]=OLED_Data_Buffer;
 800192a:	2340      	movs	r3, #64	; 0x40
 800192c:	723b      	strb	r3, [r7, #8]
	OLED_Set_Cursor(self,0,y);
 800192e:	78fb      	ldrb	r3, [r7, #3]
 8001930:	461a      	mov	r2, r3
 8001932:	2100      	movs	r1, #0
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f7ff ff1b 	bl	8001770 <OLED_Set_Cursor>
	HAL_I2C_Master_Transmit(self->hi2c,self->Adress,(uint8_t *)&Local_Bufer,(uint16_t)127,1000);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6818      	ldr	r0, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	8899      	ldrh	r1, [r3, #4]
 8001942:	f107 0208 	add.w	r2, r7, #8
 8001946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800194a:	9300      	str	r3, [sp, #0]
 800194c:	237f      	movs	r3, #127	; 0x7f
 800194e:	f006 fbc3 	bl	80080d8 <HAL_I2C_Master_Transmit>
}
 8001952:	bf00      	nop
 8001954:	3788      	adds	r7, #136	; 0x88
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
	...

0800195c <OLED_Send_String>:
//----------------------------------------------------------------------------
void OLED_Send_String(struct OLED * self,char* str, enum Display_Write_MODE Display_Write_MODE){
 800195c:	b580      	push	{r7, lr}
 800195e:	b08a      	sub	sp, #40	; 0x28
 8001960:	af02      	add	r7, sp, #8
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	4613      	mov	r3, r2
 8001968:	71fb      	strb	r3, [r7, #7]
	/**
	 * Drawing string on a OLED display
	 */
	uint8_t *Local_Buffer=malloc(sizeof(uint8_t)*strlen(str)*6+1);	//Create a local buffer for str*6(because every symbol has size 6) +1 for data address
 800196a:	68b8      	ldr	r0, [r7, #8]
 800196c:	f7fe fbf0 	bl	8000150 <strlen>
 8001970:	4602      	mov	r2, r0
 8001972:	4613      	mov	r3, r2
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	4413      	add	r3, r2
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	3301      	adds	r3, #1
 800197c:	4618      	mov	r0, r3
 800197e:	f009 fabf 	bl	800af00 <malloc>
 8001982:	4603      	mov	r3, r0
 8001984:	617b      	str	r3, [r7, #20]
	Local_Buffer[0]=OLED_Data_Buffer;							//Set buffer address as first transfered data
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	2240      	movs	r2, #64	; 0x40
 800198a:	701a      	strb	r2, [r3, #0]

	int i=0,													//i sift string symbol every iteration
 800198c:	2300      	movs	r3, #0
 800198e:	61fb      	str	r3, [r7, #28]
		sp;														//Contain the first column of symbol
	uint8_t j;
	uint16_t counter=0;											//Count quantity of symbols
 8001990:	2300      	movs	r3, #0
 8001992:	833b      	strh	r3, [r7, #24]
	while(str[i]!='\0'){										//Loop while str not end
 8001994:	e04f      	b.n	8001a36 <OLED_Send_String+0xda>
		if(str[i]=='\r'||str[i]=='\n'){							//filter all another special symbols
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	68ba      	ldr	r2, [r7, #8]
 800199a:	4413      	add	r3, r2
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b0d      	cmp	r3, #13
 80019a0:	d005      	beq.n	80019ae <OLED_Send_String+0x52>
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	68ba      	ldr	r2, [r7, #8]
 80019a6:	4413      	add	r3, r2
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2b0a      	cmp	r3, #10
 80019ac:	d103      	bne.n	80019b6 <OLED_Send_String+0x5a>
			i++;
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	3301      	adds	r3, #1
 80019b2:	61fb      	str	r3, [r7, #28]
			continue;
 80019b4:	e03f      	b.n	8001a36 <OLED_Send_String+0xda>
		}
		sp=(str[i]-(int)' ')*6;									//Computing the first column of symbol
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	68ba      	ldr	r2, [r7, #8]
 80019ba:	4413      	add	r3, r2
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	f1a3 0220 	sub.w	r2, r3, #32
 80019c2:	4613      	mov	r3, r2
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	4413      	add	r3, r2
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	613b      	str	r3, [r7, #16]
		for(j=0;j<6;j++){										//Write 6 column of symbol based on Display_Write_MODE
 80019cc:	2300      	movs	r3, #0
 80019ce:	76fb      	strb	r3, [r7, #27]
 80019d0:	e028      	b.n	8001a24 <OLED_Send_String+0xc8>
			if(Display_Write_MODE==Direct_Display_MODE)
 80019d2:	79fb      	ldrb	r3, [r7, #7]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d110      	bne.n	80019fa <OLED_Send_String+0x9e>
				Local_Buffer[(j+counter*6)+1]=CharMass[sp+j];
 80019d8:	7efa      	ldrb	r2, [r7, #27]
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	18d1      	adds	r1, r2, r3
 80019de:	7ef8      	ldrb	r0, [r7, #27]
 80019e0:	8b3a      	ldrh	r2, [r7, #24]
 80019e2:	4613      	mov	r3, r2
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	4413      	add	r3, r2
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	4403      	add	r3, r0
 80019ec:	3301      	adds	r3, #1
 80019ee:	697a      	ldr	r2, [r7, #20]
 80019f0:	4413      	add	r3, r2
 80019f2:	4a20      	ldr	r2, [pc, #128]	; (8001a74 <OLED_Send_String+0x118>)
 80019f4:	5c52      	ldrb	r2, [r2, r1]
 80019f6:	701a      	strb	r2, [r3, #0]
 80019f8:	e011      	b.n	8001a1e <OLED_Send_String+0xc2>
			else
				Local_Buffer[(j+counter*6)+1]=~CharMass[sp+j];
 80019fa:	7efa      	ldrb	r2, [r7, #27]
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	4413      	add	r3, r2
 8001a00:	4a1c      	ldr	r2, [pc, #112]	; (8001a74 <OLED_Send_String+0x118>)
 8001a02:	5cd1      	ldrb	r1, [r2, r3]
 8001a04:	7ef8      	ldrb	r0, [r7, #27]
 8001a06:	8b3a      	ldrh	r2, [r7, #24]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	4413      	add	r3, r2
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	4403      	add	r3, r0
 8001a12:	3301      	adds	r3, #1
 8001a14:	697a      	ldr	r2, [r7, #20]
 8001a16:	4413      	add	r3, r2
 8001a18:	43ca      	mvns	r2, r1
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	701a      	strb	r2, [r3, #0]
		for(j=0;j<6;j++){										//Write 6 column of symbol based on Display_Write_MODE
 8001a1e:	7efb      	ldrb	r3, [r7, #27]
 8001a20:	3301      	adds	r3, #1
 8001a22:	76fb      	strb	r3, [r7, #27]
 8001a24:	7efb      	ldrb	r3, [r7, #27]
 8001a26:	2b05      	cmp	r3, #5
 8001a28:	d9d3      	bls.n	80019d2 <OLED_Send_String+0x76>
		}
		i++;
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	61fb      	str	r3, [r7, #28]
		counter++;
 8001a30:	8b3b      	ldrh	r3, [r7, #24]
 8001a32:	3301      	adds	r3, #1
 8001a34:	833b      	strh	r3, [r7, #24]
	while(str[i]!='\0'){										//Loop while str not end
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	68ba      	ldr	r2, [r7, #8]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1a9      	bne.n	8001996 <OLED_Send_String+0x3a>
	}
	HAL_I2C_Master_Transmit(self->hi2c,self->Adress,Local_Buffer,(uint16_t)(counter*6)+1,1000);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6818      	ldr	r0, [r3, #0]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	8899      	ldrh	r1, [r3, #4]
 8001a4a:	8b3b      	ldrh	r3, [r7, #24]
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	0052      	lsls	r2, r2, #1
 8001a50:	4413      	add	r3, r2
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	3301      	adds	r3, #1
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a5e:	9200      	str	r2, [sp, #0]
 8001a60:	697a      	ldr	r2, [r7, #20]
 8001a62:	f006 fb39 	bl	80080d8 <HAL_I2C_Master_Transmit>
	free(Local_Buffer);
 8001a66:	6978      	ldr	r0, [r7, #20]
 8001a68:	f009 fa52 	bl	800af10 <free>
}
 8001a6c:	bf00      	nop
 8001a6e:	3720      	adds	r7, #32
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	20000000 	.word	0x20000000

08001a78 <PAC_Base_Create>:
 */
#include "PAC.h"
//---------------------------------------------------------------------------------
void PAC_Reset(struct PAC *self);
//---------------------------------------------------------------------------------
struct PAC *PAC_Base_Create(struct PAC_Init *self){
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]

	struct PAC *PAC = malloc(sizeof(struct PAC));
 8001a80:	202c      	movs	r0, #44	; 0x2c
 8001a82:	f009 fa3d 	bl	800af00 <malloc>
 8001a86:	4603      	mov	r3, r0
 8001a88:	60fb      	str	r3, [r7, #12]
	PAC->ZCD.tim = malloc(sizeof(TIM_HandleTypeDef));
 8001a8a:	2048      	movs	r0, #72	; 0x48
 8001a8c:	f009 fa38 	bl	800af00 <malloc>
 8001a90:	4603      	mov	r3, r0
 8001a92:	461a      	mov	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	60da      	str	r2, [r3, #12]

	PAC->ZCD.DMA = self->DMA;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	601a      	str	r2, [r3, #0]
	PAC->ZCD.DMA_Chanel = self->DMA_Chanel;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685a      	ldr	r2, [r3, #4]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	605a      	str	r2, [r3, #4]
	PAC->ZCD.TIM_Instance = self->TIM_Instance;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689a      	ldr	r2, [r3, #8]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	609a      	str	r2, [r3, #8]
	PAC->ZCD.IC_Trigger_Channel_GPIO = self->IC_Trigger_Channel_GPIO;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	68da      	ldr	r2, [r3, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	611a      	str	r2, [r3, #16]
	PAC->ZCD.IC_Trigger_Channel_PIN = self->IC_Trigger_Channel_PIN;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	8a1a      	ldrh	r2, [r3, #16]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	829a      	strh	r2, [r3, #20]
	PAC->ZCD.TIM_CHANNEL = self->TIM_CHANNEL;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	695a      	ldr	r2, [r3, #20]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	619a      	str	r2, [r3, #24]
	PAC->ZCD.State = ZCD_STATE_OFF;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2200      	movs	r2, #0
 8001acc:	771a      	strb	r2, [r3, #28]

	PAC_Reset(PAC);
 8001ace:	68f8      	ldr	r0, [r7, #12]
 8001ad0:	f000 fc62 	bl	8002398 <PAC_Reset>

	PAC->PAC_Devices_Control_Vector_Head = NULL;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	629a      	str	r2, [r3, #40]	; 0x28

	return PAC;
 8001ada:	68fb      	ldr	r3, [r7, #12]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3710      	adds	r7, #16
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <PAC_Devise_Control_Create>:
//---------------------------------------------------------------------------------
struct PAC_Devices_Control_Vector *PAC_Devise_Control_Create(struct PAC *self, struct PAC_Devices_Control_Init *element){
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
	/**
	 * Create new PAC_Control_Unit to PAC_Devices_Control_Vector into PAC
	 * return pointer to new PAC_Control_Unit
	 */
	struct PAC_Devices_Control_Vector *NEW_Element = malloc(sizeof(struct PAC_Devices_Control_Vector));	//allocate memory for a new element
 8001aee:	201c      	movs	r0, #28
 8001af0:	f009 fa06 	bl	800af00 <malloc>
 8001af4:	4603      	mov	r3, r0
 8001af6:	60bb      	str	r3, [r7, #8]
	NEW_Element->Channel_PIN = element->Channel_PIN;									//copy data to a new element
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	881a      	ldrh	r2, [r3, #0]
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	809a      	strh	r2, [r3, #4]
	NEW_Element->Channel_GPIO = element->Channel_GPIO;
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685a      	ldr	r2, [r3, #4]
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	609a      	str	r2, [r3, #8]
	NEW_Element->TIM_CHANNEL = element->TIM_CHANNEL;
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	60da      	str	r2, [r3, #12]
	NEW_Element->tim = self->ZCD.tim;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	68da      	ldr	r2, [r3, #12]
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	611a      	str	r2, [r3, #16]
	NEW_Element->State = PAC_Device_OFF;
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	751a      	strb	r2, [r3, #20]
	NEW_Element->next = NULL;
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
	NEW_Element->Parent = self;
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	619a      	str	r2, [r3, #24]
	if(self->PAC_Devices_Control_Vector_Head == NULL){									//Check. is this a first element
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d103      	bne.n	8001b3a <PAC_Devise_Control_Create+0x56>
		self->PAC_Devices_Control_Vector_Head = NEW_Element;							// New element is head
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	68ba      	ldr	r2, [r7, #8]
 8001b36:	629a      	str	r2, [r3, #40]	; 0x28
 8001b38:	e00d      	b.n	8001b56 <PAC_Devise_Control_Create+0x72>
	}else{																				// else skip to last element
		struct PAC_Devices_Control_Vector *now = self->PAC_Devices_Control_Vector_Head;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3e:	60fb      	str	r3, [r7, #12]
		while(now->next!=NULL){
 8001b40:	e002      	b.n	8001b48 <PAC_Devise_Control_Create+0x64>
			now=now->next;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	60fb      	str	r3, [r7, #12]
		while(now->next!=NULL){
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d1f8      	bne.n	8001b42 <PAC_Devise_Control_Create+0x5e>
		}
		now->next=NEW_Element;															//next last element is new element
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	68ba      	ldr	r2, [r7, #8]
 8001b54:	601a      	str	r2, [r3, #0]
	}
	return NEW_Element;																	//return pointer for a new element
 8001b56:	68bb      	ldr	r3, [r7, #8]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <PAC_IC_Init>:
//----------------------------------------------------------------------------------------------
void PAC_IC_Init(struct PAC *self){
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b092      	sub	sp, #72	; 0x48
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
	/**
	 * Initializing TIM, DMA and PIN into input capture mode
	 */

	PAC_Reset(self);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f000 fc15 	bl	8002398 <PAC_Reset>

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	605a      	str	r2, [r3, #4]
 8001b78:	609a      	str	r2, [r3, #8]
 8001b7a:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Pin = self->ZCD.IC_Trigger_Channel_PIN;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	8a9b      	ldrh	r3, [r3, #20]
 8001b80:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b82:	2300      	movs	r3, #0
 8001b84:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(self->ZCD.IC_Trigger_Channel_GPIO, &GPIO_InitStruct);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001b92:	4611      	mov	r1, r2
 8001b94:	4618      	mov	r0, r3
 8001b96:	f005 ff8f 	bl	8007ab8 <HAL_GPIO_Init>

	struct PAC_Devices_Control_Vector *now = self->PAC_Devices_Control_Vector_Head;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9e:	647b      	str	r3, [r7, #68]	; 0x44

	while(now != NULL){
 8001ba0:	e01b      	b.n	8001bda <PAC_IC_Init+0x7a>
		GPIO_InitStruct.Pin = now->Channel_PIN;
 8001ba2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ba4:	889b      	ldrh	r3, [r3, #4]
 8001ba6:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	63fb      	str	r3, [r7, #60]	; 0x3c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	643b      	str	r3, [r7, #64]	; 0x40
		HAL_GPIO_Init(now->Channel_GPIO, &GPIO_InitStruct);
 8001bb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001bbc:	4611      	mov	r1, r2
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f005 ff7a 	bl	8007ab8 <HAL_GPIO_Init>
		HAL_GPIO_WritePin(now->Channel_GPIO, now->Channel_PIN, GPIO_PIN_RESET);
 8001bc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bc6:	6898      	ldr	r0, [r3, #8]
 8001bc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bca:	889b      	ldrh	r3, [r3, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	4619      	mov	r1, r3
 8001bd0:	f006 f90d 	bl	8007dee <HAL_GPIO_WritePin>
		now=now->next;
 8001bd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	647b      	str	r3, [r7, #68]	; 0x44
	while(now != NULL){
 8001bda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d1e0      	bne.n	8001ba2 <PAC_IC_Init+0x42>
	}


	self->ZCD.DMA->Instance = self->ZCD.DMA_Chanel;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	6852      	ldr	r2, [r2, #4]
 8001be8:	601a      	str	r2, [r3, #0]
	self->ZCD.DMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	605a      	str	r2, [r3, #4]
	self->ZCD.DMA->Init.PeriphInc = DMA_PINC_DISABLE;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	609a      	str	r2, [r3, #8]
	self->ZCD.DMA->Init.MemInc = DMA_MINC_ENABLE;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2280      	movs	r2, #128	; 0x80
 8001c00:	60da      	str	r2, [r3, #12]
	self->ZCD.DMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c0a:	611a      	str	r2, [r3, #16]
	self->ZCD.DMA->Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c14:	615a      	str	r2, [r3, #20]
	self->ZCD.DMA->Init.Mode = DMA_NORMAL;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	619a      	str	r2, [r3, #24]
	self->ZCD.DMA->Init.Priority = DMA_PRIORITY_LOW;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2200      	movs	r2, #0
 8001c24:	61da      	str	r2, [r3, #28]
	HAL_DMA_Init(self->ZCD.DMA);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f005 fa04 	bl	8007038 <HAL_DMA_Init>


	self->ZCD.tim->hdma[TIM_DMA_ID_CC1] = self->ZCD.DMA;			//__HAL_LINKDMA
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	6812      	ldr	r2, [r2, #0]
 8001c38:	625a      	str	r2, [r3, #36]	; 0x24
	self->ZCD.DMA->Parent = self->ZCD.tim;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	68d2      	ldr	r2, [r2, #12]
 8001c42:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001c44:	2200      	movs	r2, #0
 8001c46:	2100      	movs	r1, #0
 8001c48:	2010      	movs	r0, #16
 8001c4a:	f005 f9b0 	bl	8006fae <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001c4e:	2010      	movs	r0, #16
 8001c50:	f005 f9c9 	bl	8006fe6 <HAL_NVIC_EnableIRQ>



	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	609a      	str	r2, [r3, #8]
 8001c60:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c62:	f107 031c 	add.w	r3, r7, #28
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = {0};
 8001c6c:	f107 030c 	add.w	r3, r7, #12
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]

	__HAL_RCC_TIM3_CLK_ENABLE();
 8001c7a:	4b2e      	ldr	r3, [pc, #184]	; (8001d34 <PAC_IC_Init+0x1d4>)
 8001c7c:	69db      	ldr	r3, [r3, #28]
 8001c7e:	4a2d      	ldr	r2, [pc, #180]	; (8001d34 <PAC_IC_Init+0x1d4>)
 8001c80:	f043 0302 	orr.w	r3, r3, #2
 8001c84:	61d3      	str	r3, [r2, #28]
 8001c86:	4b2b      	ldr	r3, [pc, #172]	; (8001d34 <PAC_IC_Init+0x1d4>)
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	60bb      	str	r3, [r7, #8]
 8001c90:	68bb      	ldr	r3, [r7, #8]

	self->ZCD.tim->Instance = self->ZCD.TIM_Instance;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	6892      	ldr	r2, [r2, #8]
 8001c9a:	601a      	str	r2, [r3, #0]
	self->ZCD.tim->Init.Prescaler = 799;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	f240 321f 	movw	r2, #799	; 0x31f
 8001ca4:	605a      	str	r2, [r3, #4]
	self->ZCD.tim->Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	2200      	movs	r2, #0
 8001cac:	609a      	str	r2, [r3, #8]
	self->ZCD.tim->Init.Period = 65535;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cb6:	60da      	str	r2, [r3, #12]
	self->ZCD.tim->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	611a      	str	r2, [r3, #16]
	self->ZCD.tim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(self->ZCD.tim);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f007 fb07 	bl	80092e0 <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cd6:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_TIM_ConfigClockSource(self->ZCD.tim, &sClockSourceConfig);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001ce0:	4611      	mov	r1, r2
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f008 fa48 	bl	800a178 <HAL_TIM_ConfigClockSource>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cec:	2300      	movs	r3, #0
 8001cee:	623b      	str	r3, [r7, #32]
	HAL_TIMEx_MasterConfigSynchronization(self->ZCD.tim, &sMasterConfig);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	f107 021c 	add.w	r2, r7, #28
 8001cf8:	4611      	mov	r1, r2
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f009 f890 	bl	800ae20 <HAL_TIMEx_MasterConfigSynchronization>

	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001d00:	2300      	movs	r3, #0
 8001d02:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001d04:	2301      	movs	r3, #1
 8001d06:	613b      	str	r3, [r7, #16]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]
	sConfigIC.ICFilter = 0;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	61bb      	str	r3, [r7, #24]
	HAL_TIM_IC_ConfigChannel(self->ZCD.tim, &sConfigIC, TIM_CHANNEL_1);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	f107 010c 	add.w	r1, r7, #12
 8001d18:	2200      	movs	r2, #0
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f008 f8da 	bl	8009ed4 <HAL_TIM_IC_ConfigChannel>

	HAL_TIM_IC_Init(self->ZCD.tim);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f007 fd8d 	bl	8009844 <HAL_TIM_IC_Init>



}
 8001d2a:	bf00      	nop
 8001d2c:	3748      	adds	r7, #72	; 0x48
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40021000 	.word	0x40021000

08001d38 <PAC_IC_DeInit>:
//----------------------------------------------------------------------------------------------
void PAC_IC_DeInit(struct PAC *self){
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]

	__HAL_RCC_TIM3_CLK_DISABLE();
 8001d40:	4b0c      	ldr	r3, [pc, #48]	; (8001d74 <PAC_IC_DeInit+0x3c>)
 8001d42:	69db      	ldr	r3, [r3, #28]
 8001d44:	4a0b      	ldr	r2, [pc, #44]	; (8001d74 <PAC_IC_DeInit+0x3c>)
 8001d46:	f023 0302 	bic.w	r3, r3, #2
 8001d4a:	61d3      	str	r3, [r2, #28]

	//HAL_GPIO_DeInit(self->ZCD.IC_Trigger_Channel_GPIO, self->ZCD.IC_Trigger_Channel_PIN);

	HAL_DMA_DeInit(self->ZCD.tim->hdma[TIM_DMA_ID_CC1]);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d52:	4618      	mov	r0, r3
 8001d54:	f005 f9ca 	bl	80070ec <HAL_DMA_DeInit>
	HAL_TIM_IC_DeInit(self->ZCD.tim);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f007 fdc0 	bl	80098e2 <HAL_TIM_IC_DeInit>

	HAL_TIM_Base_DeInit(self->ZCD.tim);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f007 fb09 	bl	800937e <HAL_TIM_Base_DeInit>

	//HAL_NVIC_DisableIRQ(DMA1_Channel6_IRQn);

}
 8001d6c:	bf00      	nop
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40021000 	.word	0x40021000

08001d78 <PAC_PWM_Init>:
//---------------------------------------------------------------------------------
void PAC_PWM_Init(struct PAC *self){
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b096      	sub	sp, #88	; 0x58
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
	/**
	 * Initializing TIM and PINs into PWM mode
	 */

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d80:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
 8001d8c:	60da      	str	r2, [r3, #12]


    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d8e:	4b56      	ldr	r3, [pc, #344]	; (8001ee8 <PAC_PWM_Init+0x170>)
 8001d90:	69db      	ldr	r3, [r3, #28]
 8001d92:	4a55      	ldr	r2, [pc, #340]	; (8001ee8 <PAC_PWM_Init+0x170>)
 8001d94:	f043 0302 	orr.w	r3, r3, #2
 8001d98:	61d3      	str	r3, [r2, #28]
 8001d9a:	4b53      	ldr	r3, [pc, #332]	; (8001ee8 <PAC_PWM_Init+0x170>)
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	60bb      	str	r3, [r7, #8]
 8001da4:	68bb      	ldr	r3, [r7, #8]

	GPIO_InitStruct.Pin = self->ZCD.IC_Trigger_Channel_PIN;				//Initializing TIMs TI1FP1 PIN
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	8a9b      	ldrh	r3, [r3, #20]
 8001daa:	647b      	str	r3, [r7, #68]	; 0x44
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dac:	2300      	movs	r3, #0
 8001dae:	64bb      	str	r3, [r7, #72]	; 0x48
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	64fb      	str	r3, [r7, #76]	; 0x4c
	HAL_GPIO_Init(self->ZCD.IC_Trigger_Channel_GPIO, &GPIO_InitStruct);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001dbc:	4611      	mov	r1, r2
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f005 fe7a 	bl	8007ab8 <HAL_GPIO_Init>


	struct PAC_Devices_Control_Vector *now = self->PAC_Devices_Control_Vector_Head;		//Initializing TIM's CHANNELs PINs
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc8:	657b      	str	r3, [r7, #84]	; 0x54
	while(now != NULL){
 8001dca:	e011      	b.n	8001df0 <PAC_PWM_Init+0x78>
		GPIO_InitStruct.Pin = now->Channel_PIN;
 8001dcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dce:	889b      	ldrh	r3, [r3, #4]
 8001dd0:	647b      	str	r3, [r7, #68]	; 0x44
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	64bb      	str	r3, [r7, #72]	; 0x48
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	653b      	str	r3, [r7, #80]	; 0x50
		HAL_GPIO_Init(now->Channel_GPIO, &GPIO_InitStruct);
 8001dda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001de2:	4611      	mov	r1, r2
 8001de4:	4618      	mov	r0, r3
 8001de6:	f005 fe67 	bl	8007ab8 <HAL_GPIO_Init>
		now=now->next;
 8001dea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	657b      	str	r3, [r7, #84]	; 0x54
	while(now != NULL){
 8001df0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1ea      	bne.n	8001dcc <PAC_PWM_Init+0x54>
	}

	TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001df6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	605a      	str	r2, [r3, #4]
 8001e00:	609a      	str	r2, [r3, #8]
 8001e02:	60da      	str	r2, [r3, #12]
 8001e04:	611a      	str	r2, [r3, #16]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001e10:	f107 030c 	add.w	r3, r7, #12
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	605a      	str	r2, [r3, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	60da      	str	r2, [r3, #12]
 8001e1e:	611a      	str	r2, [r3, #16]
 8001e20:	615a      	str	r2, [r3, #20]
 8001e22:	619a      	str	r2, [r3, #24]


	self->ZCD.tim->Instance = self->ZCD.TIM_Instance;					// Initializing TIM into TIM_SLAVEMODE_RESET for PWM synchronization
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	6892      	ldr	r2, [r2, #8]
 8001e2c:	601a      	str	r2, [r3, #0]
	self->ZCD.tim->Init.Prescaler = 799;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	f240 321f 	movw	r2, #799	; 0x31f
 8001e36:	605a      	str	r2, [r3, #4]
	self->ZCD.tim->Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	609a      	str	r2, [r3, #8]
	self->ZCD.tim->Init.Period = self->ZCD.TIM_MAX_Count;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	60da      	str	r2, [r3, #12]
	self->ZCD.tim->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	611a      	str	r2, [r3, #16]
	self->ZCD.tim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	2280      	movs	r2, #128	; 0x80
 8001e58:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(self->ZCD.tim);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f007 fa3e 	bl	80092e0 <HAL_TIM_Base_Init>

	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001e64:	2304      	movs	r3, #4
 8001e66:	633b      	str	r3, [r7, #48]	; 0x30
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001e68:	2350      	movs	r3, #80	; 0x50
 8001e6a:	637b      	str	r3, [r7, #52]	; 0x34
	sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_FALLING;
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	63bb      	str	r3, [r7, #56]	; 0x38
	sSlaveConfig.TriggerFilter = 0;
 8001e70:	2300      	movs	r3, #0
 8001e72:	643b      	str	r3, [r7, #64]	; 0x40
	HAL_TIM_SlaveConfigSynchro(self->ZCD.tim, &sSlaveConfig);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001e7c:	4611      	mov	r1, r2
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f008 fa3e 	bl	800a300 <HAL_TIM_SlaveConfigSynchro>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e84:	2300      	movs	r3, #0
 8001e86:	62bb      	str	r3, [r7, #40]	; 0x28
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_TIMEx_MasterConfigSynchronization(self->ZCD.tim, &sMasterConfig);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e94:	4611      	mov	r1, r2
 8001e96:	4618      	mov	r0, r3
 8001e98:	f008 ffc2 	bl	800ae20 <HAL_TIMEx_MasterConfigSynchronization>

	HAL_TIM_PWM_Init(self->ZCD.tim);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f007 fb13 	bl	80094cc <HAL_TIM_PWM_Init>

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ea6:	2360      	movs	r3, #96	; 0x60
 8001ea8:	60fb      	str	r3, [r7, #12]
	sConfigOC.Pulse = 0;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	613b      	str	r3, [r7, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	617b      	str	r3, [r7, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61fb      	str	r3, [r7, #28]

	now = self->PAC_Devices_Control_Vector_Head;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eba:	657b      	str	r3, [r7, #84]	; 0x54
	while(now != NULL){
 8001ebc:	e00b      	b.n	8001ed6 <PAC_PWM_Init+0x15e>
		HAL_TIM_PWM_ConfigChannel(now->tim, &sConfigOC, now->TIM_CHANNEL);
 8001ebe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ec0:	6918      	ldr	r0, [r3, #16]
 8001ec2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ec4:	68da      	ldr	r2, [r3, #12]
 8001ec6:	f107 030c 	add.w	r3, r7, #12
 8001eca:	4619      	mov	r1, r3
 8001ecc:	f008 f896 	bl	8009ffc <HAL_TIM_PWM_ConfigChannel>
		now=now->next;
 8001ed0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	657b      	str	r3, [r7, #84]	; 0x54
	while(now != NULL){
 8001ed6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d1f0      	bne.n	8001ebe <PAC_PWM_Init+0x146>
	}

}
 8001edc:	bf00      	nop
 8001ede:	bf00      	nop
 8001ee0:	3758      	adds	r7, #88	; 0x58
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40021000 	.word	0x40021000

08001eec <PAC_PWM_DeInit>:
//---------------------------------------------------------------------------------
void PAC_PWM_DeInit(struct PAC *self)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b088      	sub	sp, #32
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]

    __HAL_RCC_TIM3_CLK_DISABLE();
 8001ef4:	4b1e      	ldr	r3, [pc, #120]	; (8001f70 <PAC_PWM_DeInit+0x84>)
 8001ef6:	69db      	ldr	r3, [r3, #28]
 8001ef8:	4a1d      	ldr	r2, [pc, #116]	; (8001f70 <PAC_PWM_DeInit+0x84>)
 8001efa:	f023 0302 	bic.w	r3, r3, #2
 8001efe:	61d3      	str	r3, [r2, #28]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f00:	f107 030c 	add.w	r3, r7, #12
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	605a      	str	r2, [r3, #4]
 8001f0a:	609a      	str	r2, [r3, #8]
 8001f0c:	60da      	str	r2, [r3, #12]

    struct PAC_Devices_Control_Vector *now = self->PAC_Devices_Control_Vector_Head;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f12:	61fb      	str	r3, [r7, #28]

	while(now != NULL){
 8001f14:	e01b      	b.n	8001f4e <PAC_PWM_DeInit+0x62>
		GPIO_InitStruct.Pin = now->Channel_PIN;
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	889b      	ldrh	r3, [r3, #4]
 8001f1a:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f24:	2302      	movs	r3, #2
 8001f26:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(now->Channel_GPIO, &GPIO_InitStruct);
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f107 020c 	add.w	r2, r7, #12
 8001f30:	4611      	mov	r1, r2
 8001f32:	4618      	mov	r0, r3
 8001f34:	f005 fdc0 	bl	8007ab8 <HAL_GPIO_Init>
		HAL_GPIO_WritePin(now->Channel_GPIO, now->Channel_PIN, GPIO_PIN_RESET);
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	6898      	ldr	r0, [r3, #8]
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	889b      	ldrh	r3, [r3, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	4619      	mov	r1, r3
 8001f44:	f005 ff53 	bl	8007dee <HAL_GPIO_WritePin>
		now=now->next;
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	61fb      	str	r3, [r7, #28]
	while(now != NULL){
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1e0      	bne.n	8001f16 <PAC_PWM_DeInit+0x2a>
	}

	HAL_TIM_Base_DeInit(self->ZCD.tim);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f007 fa10 	bl	800937e <HAL_TIM_Base_DeInit>

	HAL_TIM_PWM_DeInit(self->ZCD.tim);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f007 fb01 	bl	800956a <HAL_TIM_PWM_DeInit>

}
 8001f68:	bf00      	nop
 8001f6a:	3720      	adds	r7, #32
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40021000 	.word	0x40021000

08001f74 <PAC_Device_Control_Get_Control_Value>:
//---------------------------------------------------------------------------------
uint16_t PAC_Device_Control_Get_Control_Value(struct PAC_Devices_Control_Vector *self){
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
	/**
	 * Return Current PAC_Device_Control_Unit's Control Value
	 */
	switch(self->TIM_CHANNEL){
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	2b0c      	cmp	r3, #12
 8001f82:	d849      	bhi.n	8002018 <PAC_Device_Control_Get_Control_Value+0xa4>
 8001f84:	a201      	add	r2, pc, #4	; (adr r2, 8001f8c <PAC_Device_Control_Get_Control_Value+0x18>)
 8001f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f8a:	bf00      	nop
 8001f8c:	08001fc1 	.word	0x08001fc1
 8001f90:	08002019 	.word	0x08002019
 8001f94:	08002019 	.word	0x08002019
 8001f98:	08002019 	.word	0x08002019
 8001f9c:	08001fd7 	.word	0x08001fd7
 8001fa0:	08002019 	.word	0x08002019
 8001fa4:	08002019 	.word	0x08002019
 8001fa8:	08002019 	.word	0x08002019
 8001fac:	08001fed 	.word	0x08001fed
 8001fb0:	08002019 	.word	0x08002019
 8001fb4:	08002019 	.word	0x08002019
 8001fb8:	08002019 	.word	0x08002019
 8001fbc:	08002003 	.word	0x08002003
		case TIM_CHANNEL_1: return self->Parent->ZCD.TIM_MAX_Count - self->tim->Instance->CCR1; break;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	e021      	b.n	800201a <PAC_Device_Control_Get_Control_Value+0xa6>
		case TIM_CHANNEL_2: return self->Parent->ZCD.TIM_MAX_Count - self->tim->Instance->CCR2; break;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	691b      	ldr	r3, [r3, #16]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	e016      	b.n	800201a <PAC_Device_Control_Get_Control_Value+0xa6>
		case TIM_CHANNEL_3: return self->Parent->ZCD.TIM_MAX_Count - self->tim->Instance->CCR3; break;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	e00b      	b.n	800201a <PAC_Device_Control_Get_Control_Value+0xa6>
		case TIM_CHANNEL_4: return self->Parent->ZCD.TIM_MAX_Count - self->tim->Instance->CCR4; break;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002010:	b29b      	uxth	r3, r3
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	b29b      	uxth	r3, r3
 8002016:	e000      	b.n	800201a <PAC_Device_Control_Get_Control_Value+0xa6>
	};
	return 0;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	bc80      	pop	{r7}
 8002022:	4770      	bx	lr

08002024 <PAC_Device_Control_Set_Control_Value>:
//---------------------------------------------------------------------------------
void PAC_Device_Control_Set_Control_Value(struct PAC_Devices_Control_Vector *self, uint16_t value){
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	460b      	mov	r3, r1
 800202e:	807b      	strh	r3, [r7, #2]
	/**
	 * Set control value for current PAC_Control_Unit
	 */
	switch(self->TIM_CHANNEL){
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	2b0c      	cmp	r3, #12
 8002036:	d849      	bhi.n	80020cc <PAC_Device_Control_Set_Control_Value+0xa8>
 8002038:	a201      	add	r2, pc, #4	; (adr r2, 8002040 <PAC_Device_Control_Set_Control_Value+0x1c>)
 800203a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800203e:	bf00      	nop
 8002040:	08002075 	.word	0x08002075
 8002044:	080020cd 	.word	0x080020cd
 8002048:	080020cd 	.word	0x080020cd
 800204c:	080020cd 	.word	0x080020cd
 8002050:	0800208b 	.word	0x0800208b
 8002054:	080020cd 	.word	0x080020cd
 8002058:	080020cd 	.word	0x080020cd
 800205c:	080020cd 	.word	0x080020cd
 8002060:	080020a1 	.word	0x080020a1
 8002064:	080020cd 	.word	0x080020cd
 8002068:	080020cd 	.word	0x080020cd
 800206c:	080020cd 	.word	0x080020cd
 8002070:	080020b7 	.word	0x080020b7
		case TIM_CHANNEL_1: self->tim->Instance->CCR1 = self->Parent->ZCD.TIM_MAX_Count - value; break;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800207a:	461a      	mov	r2, r3
 800207c:	887b      	ldrh	r3, [r7, #2]
 800207e:	1ad2      	subs	r2, r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	635a      	str	r2, [r3, #52]	; 0x34
 8002088:	e020      	b.n	80020cc <PAC_Device_Control_Set_Control_Value+0xa8>
		case TIM_CHANNEL_2: self->tim->Instance->CCR2 = self->Parent->ZCD.TIM_MAX_Count - value; break;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002090:	461a      	mov	r2, r3
 8002092:	887b      	ldrh	r3, [r7, #2]
 8002094:	1ad2      	subs	r2, r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	639a      	str	r2, [r3, #56]	; 0x38
 800209e:	e015      	b.n	80020cc <PAC_Device_Control_Set_Control_Value+0xa8>
		case TIM_CHANNEL_3: self->tim->Instance->CCR3 = self->Parent->ZCD.TIM_MAX_Count - value; break;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80020a6:	461a      	mov	r2, r3
 80020a8:	887b      	ldrh	r3, [r7, #2]
 80020aa:	1ad2      	subs	r2, r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	63da      	str	r2, [r3, #60]	; 0x3c
 80020b4:	e00a      	b.n	80020cc <PAC_Device_Control_Set_Control_Value+0xa8>
		case TIM_CHANNEL_4: self->tim->Instance->CCR4 = self->Parent->ZCD.TIM_MAX_Count - value; break;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80020bc:	461a      	mov	r2, r3
 80020be:	887b      	ldrh	r3, [r7, #2]
 80020c0:	1ad2      	subs	r2, r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	641a      	str	r2, [r3, #64]	; 0x40
 80020ca:	bf00      	nop
	};
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bc80      	pop	{r7}
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop

080020d8 <PAC_IC_Capture_INT>:
//---------------------------------------------------------------------------------
void PAC_IC_Capture_INT(struct PAC *self){
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
	 * Input capture internal interrupt.
	 * Mast be called after IC DMA. When CNT data has been received.
	 * Transfer PAC from Setup to ON state.
	 */

	self->ZCD.TIM_MAX_Count = (self->ZCD.CNT_DATA[2] - self->ZCD.CNT_DATA[1]);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	8c1b      	ldrh	r3, [r3, #32]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	849a      	strh	r2, [r3, #36]	; 0x24

	if(self->ZCD.TIM_MAX_Count != 0){
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d06a      	beq.n	80021ce <PAC_IC_Capture_INT+0xf6>

		//self->ZCD.Frequency = self->ZCD.TIM_MAX_Count / 2;
		if(self->ZCD.tim->Instance == TIM3){
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a3e      	ldr	r2, [pc, #248]	; (80021f8 <PAC_IC_Capture_INT+0x120>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d10d      	bne.n	8002120 <PAC_IC_Capture_INT+0x48>
			self->ZCD.Frequency = HAL_RCC_GetPCLK1Freq() / (self->ZCD.tim->Instance->PSC+1);
 8002104:	f006 fff0 	bl	80090e8 <HAL_RCC_GetPCLK1Freq>
 8002108:	4602      	mov	r2, r0
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002112:	3301      	adds	r3, #1
 8002114:	fbb2 f3f3 	udiv	r3, r2, r3
 8002118:	b29a      	uxth	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	84da      	strh	r2, [r3, #38]	; 0x26
 800211e:	e012      	b.n	8002146 <PAC_IC_Capture_INT+0x6e>
		}
		else if(self->ZCD.tim->Instance == TIM1)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a35      	ldr	r2, [pc, #212]	; (80021fc <PAC_IC_Capture_INT+0x124>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d10c      	bne.n	8002146 <PAC_IC_Capture_INT+0x6e>
			self->ZCD.Frequency = HAL_RCC_GetPCLK2Freq() / (self->ZCD.tim->Instance->PSC+1);
 800212c:	f006 fff0 	bl	8009110 <HAL_RCC_GetPCLK2Freq>
 8002130:	4602      	mov	r2, r0
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213a:	3301      	adds	r3, #1
 800213c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002140:	b29a      	uxth	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	84da      	strh	r2, [r3, #38]	; 0x26

		self->ZCD.Frequency = self->ZCD.Frequency / self->ZCD.TIM_MAX_Count;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800214e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002152:	b29a      	uxth	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	84da      	strh	r2, [r3, #38]	; 0x26

		self->ZCD.TIM_MAX_Count*=KOEF;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800215c:	4618      	mov	r0, r3
 800215e:	f7fe fa7b 	bl	8000658 <__aeabi_i2d>
 8002162:	a323      	add	r3, pc, #140	; (adr r3, 80021f0 <PAC_IC_Capture_INT+0x118>)
 8002164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002168:	f7fd fffa 	bl	8000160 <__aeabi_dmul>
 800216c:	4602      	mov	r2, r0
 800216e:	460b      	mov	r3, r1
 8002170:	4610      	mov	r0, r2
 8002172:	4619      	mov	r1, r3
 8002174:	f7fe fada 	bl	800072c <__aeabi_d2uiz>
 8002178:	4603      	mov	r3, r0
 800217a:	b29a      	uxth	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	849a      	strh	r2, [r3, #36]	; 0x24

		PAC_IC_DeInit(self);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f7ff fdd9 	bl	8001d38 <PAC_IC_DeInit>
		PAC_PWM_Init(self);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7ff fdf6 	bl	8001d78 <PAC_PWM_Init>

		struct PAC_Devices_Control_Vector *now = self->PAC_Devices_Control_Vector_Head;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002190:	60fb      	str	r3, [r7, #12]

		while(now != NULL){
 8002192:	e012      	b.n	80021ba <PAC_IC_Capture_INT+0xe2>
			if(now->State == PAC_Device_ON){
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	7d1b      	ldrb	r3, [r3, #20]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d10b      	bne.n	80021b4 <PAC_IC_Capture_INT+0xdc>
				PAC_Device_Control_Set_Control_Value(now, 0);
 800219c:	2100      	movs	r1, #0
 800219e:	68f8      	ldr	r0, [r7, #12]
 80021a0:	f7ff ff40 	bl	8002024 <PAC_Device_Control_Set_Control_Value>
				HAL_TIM_PWM_Start(now->tim, now->TIM_CHANNEL);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	691a      	ldr	r2, [r3, #16]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	4619      	mov	r1, r3
 80021ae:	4610      	mov	r0, r2
 80021b0:	f007 fa42 	bl	8009638 <HAL_TIM_PWM_Start>
			}
			now = now->next;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	60fb      	str	r3, [r7, #12]
		while(now != NULL){
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1e9      	bne.n	8002194 <PAC_IC_Capture_INT+0xbc>
		}

		self->ZCD.State = ZCD_STATE_ON;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	771a      	strb	r2, [r3, #28]
		PAC_ON_Callback(self);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f002 fce6 	bl	8004b98 <PAC_ON_Callback>
	}
	else
		HAL_TIM_IC_Start_DMA(self->ZCD.tim, self->ZCD.TIM_CHANNEL, (uint32_t *)self->ZCD.CNT_DATA, 3);
}
 80021cc:	e009      	b.n	80021e2 <PAC_IC_Capture_INT+0x10a>
		HAL_TIM_IC_Start_DMA(self->ZCD.tim, self->ZCD.TIM_CHANNEL, (uint32_t *)self->ZCD.CNT_DATA, 3);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	68d8      	ldr	r0, [r3, #12]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6999      	ldr	r1, [r3, #24]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f103 021e 	add.w	r2, r3, #30
 80021dc:	2303      	movs	r3, #3
 80021de:	f007 fbe7 	bl	80099b0 <HAL_TIM_IC_Start_DMA>
}
 80021e2:	bf00      	nop
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	f3af 8000 	nop.w
 80021f0:	66666666 	.word	0x66666666
 80021f4:	3fee6666 	.word	0x3fee6666
 80021f8:	40000400 	.word	0x40000400
 80021fc:	40012c00 	.word	0x40012c00

08002200 <ZCD_ON>:
//---------------------------------------------------------------------------------
void ZCD_ON(struct PAC *self){
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
	/**
	 * Turn ON ZCD
	 */
	if(PAC_Get_State(self) == ZCD_STATE_OFF){
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f000 f8a3 	bl	8002354 <PAC_Get_State>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d10f      	bne.n	8002234 <ZCD_ON+0x34>
		self->ZCD.State = ZCD_STATE_SETUP;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2202      	movs	r2, #2
 8002218:	771a      	strb	r2, [r3, #28]
		PAC_IC_Init(self);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7ff fca0 	bl	8001b60 <PAC_IC_Init>
		HAL_TIM_IC_Start_DMA(self->ZCD.tim, self->ZCD.TIM_CHANNEL, (uint32_t *)self->ZCD.CNT_DATA, 3);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	68d8      	ldr	r0, [r3, #12]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6999      	ldr	r1, [r3, #24]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f103 021e 	add.w	r2, r3, #30
 800222e:	2303      	movs	r3, #3
 8002230:	f007 fbbe 	bl	80099b0 <HAL_TIM_IC_Start_DMA>
	}
}
 8002234:	bf00      	nop
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <ZCD_OFF>:
//---------------------------------------------------------------------------------
void ZCD_OFF(struct PAC *self){
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
	/**
	 * ZCD Turns OFF
	 */
	if(PAC_Get_State(self) != ZCD_STATE_OFF){	//if ZCD already is Turns OFF do nothing
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f000 f885 	bl	8002354 <PAC_Get_State>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d008      	beq.n	8002262 <ZCD_OFF+0x26>
		PAC_PWM_DeInit(self);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f7ff fe4b 	bl	8001eec <PAC_PWM_DeInit>
		PAC_Reset(self);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 f89e 	bl	8002398 <PAC_Reset>
		self->ZCD.State = ZCD_STATE_OFF;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	771a      	strb	r2, [r3, #28]
	}
}
 8002262:	bf00      	nop
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <PAC_Device_Control_ON>:
//---------------------------------------------------------------------------------
void PAC_Device_Control_ON(struct PAC_Devices_Control_Vector *self){
 800226a:	b580      	push	{r7, lr}
 800226c:	b082      	sub	sp, #8
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
	/**
	 * Turn ON PAC_Device_Control_Unit if ZCD_STATE_ON else Turn ON ZCD
	 */
	self->State = PAC_Device_ON;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2201      	movs	r2, #1
 8002276:	751a      	strb	r2, [r3, #20]
	if(PAC_Get_State(self->Parent) == ZCD_STATE_ON){
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	4618      	mov	r0, r3
 800227e:	f000 f869 	bl	8002354 <PAC_Get_State>
 8002282:	4603      	mov	r3, r0
 8002284:	2b01      	cmp	r3, #1
 8002286:	d10c      	bne.n	80022a2 <PAC_Device_Control_ON+0x38>
		PAC_Device_Control_Set_Control_Value(self, 0);
 8002288:	2100      	movs	r1, #0
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7ff feca 	bl	8002024 <PAC_Device_Control_Set_Control_Value>
		HAL_TIM_PWM_Start(self->tim, self->TIM_CHANNEL);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	691a      	ldr	r2, [r3, #16]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	4619      	mov	r1, r3
 800229a:	4610      	mov	r0, r2
 800229c:	f007 f9cc 	bl	8009638 <HAL_TIM_PWM_Start>
	}
	else if(PAC_Get_State(self->Parent) == ZCD_STATE_OFF)
		ZCD_ON(self->Parent);
}
 80022a0:	e00c      	b.n	80022bc <PAC_Device_Control_ON+0x52>
	else if(PAC_Get_State(self->Parent) == ZCD_STATE_OFF)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f000 f854 	bl	8002354 <PAC_Get_State>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d104      	bne.n	80022bc <PAC_Device_Control_ON+0x52>
		ZCD_ON(self->Parent);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff ffa2 	bl	8002200 <ZCD_ON>
}
 80022bc:	bf00      	nop
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <PAC_Device_Control_OFF>:
//---------------------------------------------------------------------------------
void PAC_Device_Control_OFF(struct PAC_Devices_Control_Vector *self){
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
	/**
	 * Turn OFF PAC_Device_Control_Unit if it is the last one PAC_Device_Control_Unit than Turn OFF ZCD
	 */
	if(self->State == PAC_Device_ON)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	7d1b      	ldrb	r3, [r3, #20]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d107      	bne.n	80022e4 <PAC_Device_Control_OFF+0x20>
		HAL_TIM_PWM_Stop(self->tim, self->TIM_CHANNEL);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	691a      	ldr	r2, [r3, #16]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	4619      	mov	r1, r3
 80022de:	4610      	mov	r0, r2
 80022e0:	f007 fa4c 	bl	800977c <HAL_TIM_PWM_Stop>

	self->State = PAC_Device_OFF;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	751a      	strb	r2, [r3, #20]

	struct PAC_Devices_Control_Vector *now = self->Parent->PAC_Devices_Control_Vector_Head;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f0:	60fb      	str	r3, [r7, #12]

	enum PAC_Device_Control_State State = PAC_Device_OFF;
 80022f2:	2300      	movs	r3, #0
 80022f4:	72fb      	strb	r3, [r7, #11]

 	while(now != NULL){									// Check ALL PAC_Device_Control_Units states
 80022f6:	e007      	b.n	8002308 <PAC_Device_Control_OFF+0x44>
 		State |= now->State;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	7d1a      	ldrb	r2, [r3, #20]
 80022fc:	7afb      	ldrb	r3, [r7, #11]
 80022fe:	4313      	orrs	r3, r2
 8002300:	72fb      	strb	r3, [r7, #11]
 		now = now->next;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	60fb      	str	r3, [r7, #12]
 	while(now != NULL){									// Check ALL PAC_Device_Control_Units states
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1f4      	bne.n	80022f8 <PAC_Device_Control_OFF+0x34>
 	}

 	if(State == PAC_Device_OFF){						// if ALL PAC_Device_Control_Units are turn OFF then turn off ZCD;
 800230e:	7afb      	ldrb	r3, [r7, #11]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d104      	bne.n	800231e <PAC_Device_Control_OFF+0x5a>
 		ZCD_OFF(self->Parent);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff ff8f 	bl	800223c <ZCD_OFF>
 	}
}
 800231e:	bf00      	nop
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <PAC_Device_Control_Get_State>:
//---------------------------------------------------------------------------------
enum PAC_Device_Control_State PAC_Device_Control_Get_State(struct PAC_Devices_Control_Vector *self){
 8002326:	b580      	push	{r7, lr}
 8002328:	b082      	sub	sp, #8
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
	/**
	 * Return PAC_Device_Control_Unit State if ZCD turn ON
	 */
	if(self->State == PAC_Device_ON && PAC_Get_State(self->Parent) == ZCD_STATE_ON)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	7d1b      	ldrb	r3, [r3, #20]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d109      	bne.n	800234a <PAC_Device_Control_Get_State+0x24>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	4618      	mov	r0, r3
 800233c:	f000 f80a 	bl	8002354 <PAC_Get_State>
 8002340:	4603      	mov	r3, r0
 8002342:	2b01      	cmp	r3, #1
 8002344:	d101      	bne.n	800234a <PAC_Device_Control_Get_State+0x24>
		return PAC_Device_ON;
 8002346:	2301      	movs	r3, #1
 8002348:	e000      	b.n	800234c <PAC_Device_Control_Get_State+0x26>
	else
		return PAC_Device_OFF;
 800234a:	2300      	movs	r3, #0
}
 800234c:	4618      	mov	r0, r3
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <PAC_Get_State>:
//---------------------------------------------------------------------------------
enum ZCD_State PAC_Get_State(struct PAC *self){
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
	/**
	 * Return ZCD STATE
	 */
	return self->ZCD.State;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	7f1b      	ldrb	r3, [r3, #28]
}
 8002360:	4618      	mov	r0, r3
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	bc80      	pop	{r7}
 8002368:	4770      	bx	lr

0800236a <PAC_Get_Frequency>:
//---------------------------------------------------------------------------------
uint8_t PAC_Get_Frequency(struct PAC *self){
 800236a:	b480      	push	{r7}
 800236c:	b083      	sub	sp, #12
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
	/**
	 * Return Frequency
	 */
	return self->ZCD.Frequency; //Frequency
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002376:	b2db      	uxtb	r3, r3
}
 8002378:	4618      	mov	r0, r3
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	bc80      	pop	{r7}
 8002380:	4770      	bx	lr

08002382 <PAC_Get_Max_Control_Value>:
//---------------------------------------------------------------------------------
uint16_t PAC_Get_Max_Control_Value(struct PAC *self){
 8002382:	b480      	push	{r7}
 8002384:	b083      	sub	sp, #12
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
	/**
	 * MAX control value for PAC_Control_Unit
	*/
	return self->ZCD.TIM_MAX_Count;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
}
 800238e:	4618      	mov	r0, r3
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr

08002398 <PAC_Reset>:
//---------------------------------------------------------------------------------
void PAC_Reset(struct PAC *self){
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
	/**
	 * Reset all variables
	 */
	self->ZCD.CNT_DATA[0] = 0;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	83da      	strh	r2, [r3, #30]
	self->ZCD.CNT_DATA[1] = 0;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	841a      	strh	r2, [r3, #32]
	self->ZCD.CNT_DATA[3] = 0;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	849a      	strh	r2, [r3, #36]	; 0x24
	self->ZCD.TIM_MAX_Count=0;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	849a      	strh	r2, [r3, #36]	; 0x24
	self->ZCD.Frequency = 0;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	84da      	strh	r2, [r3, #38]	; 0x26
}
 80023be:	bf00      	nop
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bc80      	pop	{r7}
 80023c6:	4770      	bx	lr

080023c8 <PID_ini>:
#include "PID.h"
//---------------------------------------------------------------------------------
void PID_ini(struct PID* self){
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
	/**
	 * Reset I nad P buffers
	 */
	self->D_Prev=0;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f04f 0200 	mov.w	r2, #0
 80023d6:	619a      	str	r2, [r3, #24]
	self->I=0;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f04f 0200 	mov.w	r2, #0
 80023de:	615a      	str	r2, [r3, #20]
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bc80      	pop	{r7}
 80023e8:	4770      	bx	lr
	...

080023ec <PID_it>:
//---------------------------------------------------------------------------------
uint32_t PID_it(struct PID* self){
 80023ec:	b590      	push	{r4, r7, lr}
 80023ee:	b087      	sub	sp, #28
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
	 * if res control value <0 return 0;
	 * if res control MAX_Control value >0 return MAX_Control;
	 */
	float P,D,Res;

	P=self->Point-self->Point_Now;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	69da      	ldr	r2, [r3, #28]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	4619      	mov	r1, r3
 80023fe:	4610      	mov	r0, r2
 8002400:	f7fe f9b8 	bl	8000774 <__aeabi_fsub>
 8002404:	4603      	mov	r3, r0
 8002406:	617b      	str	r3, [r7, #20]
	self->I=self->I+P*self->dt;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	695c      	ldr	r4, [r3, #20]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	6979      	ldr	r1, [r7, #20]
 8002412:	4618      	mov	r0, r3
 8002414:	f7fe fab8 	bl	8000988 <__aeabi_fmul>
 8002418:	4603      	mov	r3, r0
 800241a:	4619      	mov	r1, r3
 800241c:	4620      	mov	r0, r4
 800241e:	f7fe f9ab 	bl	8000778 <__addsf3>
 8002422:	4603      	mov	r3, r0
 8002424:	461a      	mov	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	615a      	str	r2, [r3, #20]
	D=(P-self->D_Prev)/self->dt;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	4619      	mov	r1, r3
 8002430:	6978      	ldr	r0, [r7, #20]
 8002432:	f7fe f99f 	bl	8000774 <__aeabi_fsub>
 8002436:	4603      	mov	r3, r0
 8002438:	461a      	mov	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	4619      	mov	r1, r3
 8002440:	4610      	mov	r0, r2
 8002442:	f7fe fb55 	bl	8000af0 <__aeabi_fdiv>
 8002446:	4603      	mov	r3, r0
 8002448:	613b      	str	r3, [r7, #16]
	self->D_Prev=P;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	697a      	ldr	r2, [r7, #20]
 800244e:	619a      	str	r2, [r3, #24]
	Res=((P*self->KP)+(self->I*self->KI)+(D*self->KD));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6979      	ldr	r1, [r7, #20]
 8002456:	4618      	mov	r0, r3
 8002458:	f7fe fa96 	bl	8000988 <__aeabi_fmul>
 800245c:	4603      	mov	r3, r0
 800245e:	461c      	mov	r4, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	695a      	ldr	r2, [r3, #20]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	4619      	mov	r1, r3
 800246a:	4610      	mov	r0, r2
 800246c:	f7fe fa8c 	bl	8000988 <__aeabi_fmul>
 8002470:	4603      	mov	r3, r0
 8002472:	4619      	mov	r1, r3
 8002474:	4620      	mov	r0, r4
 8002476:	f7fe f97f 	bl	8000778 <__addsf3>
 800247a:	4603      	mov	r3, r0
 800247c:	461c      	mov	r4, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	6939      	ldr	r1, [r7, #16]
 8002484:	4618      	mov	r0, r3
 8002486:	f7fe fa7f 	bl	8000988 <__aeabi_fmul>
 800248a:	4603      	mov	r3, r0
 800248c:	4619      	mov	r1, r3
 800248e:	4620      	mov	r0, r4
 8002490:	f7fe f972 	bl	8000778 <__addsf3>
 8002494:	4603      	mov	r3, r0
 8002496:	60fb      	str	r3, [r7, #12]
	if(self->Point_Now-self->Point>100){
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a1a      	ldr	r2, [r3, #32]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	69db      	ldr	r3, [r3, #28]
 80024a0:	4619      	mov	r1, r3
 80024a2:	4610      	mov	r0, r2
 80024a4:	f7fe f966 	bl	8000774 <__aeabi_fsub>
 80024a8:	4603      	mov	r3, r0
 80024aa:	4916      	ldr	r1, [pc, #88]	; (8002504 <PID_it+0x118>)
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7fe fc27 	bl	8000d00 <__aeabi_fcmpgt>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d002      	beq.n	80024be <PID_it+0xd2>
		PID_ini(self);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f7ff ff85 	bl	80023c8 <PID_ini>
	}

	if(Res<0){
 80024be:	f04f 0100 	mov.w	r1, #0
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	f7fe fbfe 	bl	8000cc4 <__aeabi_fcmplt>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <PID_it+0xe6>
		return 0;
 80024ce:	2300      	movs	r3, #0
 80024d0:	e013      	b.n	80024fa <PID_it+0x10e>
	}
	if (Res<=self->MAX_Control)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	8a1b      	ldrh	r3, [r3, #16]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7fe fa02 	bl	80008e0 <__aeabi_i2f>
 80024dc:	4603      	mov	r3, r0
 80024de:	4619      	mov	r1, r3
 80024e0:	68f8      	ldr	r0, [r7, #12]
 80024e2:	f7fe fbf9 	bl	8000cd8 <__aeabi_fcmple>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d004      	beq.n	80024f6 <PID_it+0x10a>
		return Res;
 80024ec:	68f8      	ldr	r0, [r7, #12]
 80024ee:	f7fe fc37 	bl	8000d60 <__aeabi_f2uiz>
 80024f2:	4603      	mov	r3, r0
 80024f4:	e001      	b.n	80024fa <PID_it+0x10e>
	else
		return self->MAX_Control;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	8a1b      	ldrh	r3, [r3, #16]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	371c      	adds	r7, #28
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd90      	pop	{r4, r7, pc}
 8002502:	bf00      	nop
 8002504:	42c80000 	.word	0x42c80000

08002508 <PID_Set_Point>:
//---------------------------------------------------------------------------------
void PID_Set_Point(struct PID* self,int Point){
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
	/**
	 * Set point for what system will be going
	 */
	self->Point=Point;
 8002512:	6838      	ldr	r0, [r7, #0]
 8002514:	f7fe f9e4 	bl	80008e0 <__aeabi_i2f>
 8002518:	4602      	mov	r2, r0
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	61da      	str	r2, [r3, #28]
}
 800251e:	bf00      	nop
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <PID_Set_Curent_Point>:
//---------------------------------------------------------------------------------
void PID_Set_Curent_Point(struct PID* self,int Point){
 8002526:	b580      	push	{r7, lr}
 8002528:	b082      	sub	sp, #8
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
 800252e:	6039      	str	r1, [r7, #0]
	/*
	 * Set current point
	 */
	self->Point_Now=Point;
 8002530:	6838      	ldr	r0, [r7, #0]
 8002532:	f7fe f9d5 	bl	80008e0 <__aeabi_i2f>
 8002536:	4602      	mov	r2, r0
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	621a      	str	r2, [r3, #32]
}
 800253c:	bf00      	nop
 800253e:	3708      	adds	r7, #8
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <PID_Set_MAX_Control>:
//---------------------------------------------------------------------------------
void PID_Set_MAX_Control(uint16_t MAX_Control_Value, struct PID* self){
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	6039      	str	r1, [r7, #0]
 800254e:	80fb      	strh	r3, [r7, #6]
	/*
	 * Set max value witch can PID_it return as result
	 */
	self->MAX_Control=MAX_Control_Value;
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	88fa      	ldrh	r2, [r7, #6]
 8002554:	821a      	strh	r2, [r3, #16]
}
 8002556:	bf00      	nop
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	bc80      	pop	{r7}
 800255e:	4770      	bx	lr

08002560 <Set_Temperature>:
#include "Soldering_Station.h"
//---------------------------------------------------------------------------------
uint16_t Set_Temperature(struct Temperature_Presets *Temperature_Presets_C, struct Temperature_Converting *Temperature_Converting, enum MODE *MODE){
 8002560:	b590      	push	{r4, r7, lr}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
	 * Set temperature in ADC Levels which occur to the MODE
	 * Temperature_Presets_C;
	 * MODE - MANUAL PRESSET1 PRESSET2 SLEEP
	 * return Temperature in ADC levels
	 */
	switch(*MODE){						//Set temperature in celsius which occur to the MODE
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	2b03      	cmp	r3, #3
 8002572:	d81f      	bhi.n	80025b4 <Set_Temperature+0x54>
 8002574:	a201      	add	r2, pc, #4	; (adr r2, 800257c <Set_Temperature+0x1c>)
 8002576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800257a:	bf00      	nop
 800257c:	0800258d 	.word	0x0800258d
 8002580:	08002597 	.word	0x08002597
 8002584:	080025a1 	.word	0x080025a1
 8002588:	080025ab 	.word	0x080025ab
			case MANUAL:
				Temperature_Converting->Temperature_Set_C=Temperature_Presets_C->Manual;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	881a      	ldrh	r2, [r3, #0]
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	80da      	strh	r2, [r3, #6]
				break;
 8002594:	e00e      	b.n	80025b4 <Set_Temperature+0x54>
			case PRESET1:
				Temperature_Converting->Temperature_Set_C=Temperature_Presets_C->Preset1;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	885a      	ldrh	r2, [r3, #2]
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	80da      	strh	r2, [r3, #6]
				break;
 800259e:	e009      	b.n	80025b4 <Set_Temperature+0x54>
			case PRESET2:
				Temperature_Converting->Temperature_Set_C=Temperature_Presets_C->Preset2;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	889a      	ldrh	r2, [r3, #4]
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	80da      	strh	r2, [r3, #6]
				break;
 80025a8:	e004      	b.n	80025b4 <Set_Temperature+0x54>
			case SLEEP:
				Temperature_Converting->Temperature_Set_C=Temperature_Presets_C->Sleep;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	88da      	ldrh	r2, [r3, #6]
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	80da      	strh	r2, [r3, #6]
				break;
 80025b2:	bf00      	nop
		}

	Temperature_Converting->Temperature_Set_ADC=(uint16_t)(Temperature_Converting->Temperature_Set_C*Temperature_Converting->Coeff+Temperature_Converting->Coeff/2);	//Converting Celsius to ADC Levels
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	88db      	ldrh	r3, [r3, #6]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7fe f991 	bl	80008e0 <__aeabi_i2f>
 80025be:	4602      	mov	r2, r0
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	4619      	mov	r1, r3
 80025c6:	4610      	mov	r0, r2
 80025c8:	f7fe f9de 	bl	8000988 <__aeabi_fmul>
 80025cc:	4603      	mov	r3, r0
 80025ce:	461c      	mov	r4, r3
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80025d8:	4618      	mov	r0, r3
 80025da:	f7fe fa89 	bl	8000af0 <__aeabi_fdiv>
 80025de:	4603      	mov	r3, r0
 80025e0:	4619      	mov	r1, r3
 80025e2:	4620      	mov	r0, r4
 80025e4:	f7fe f8c8 	bl	8000778 <__addsf3>
 80025e8:	4603      	mov	r3, r0
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7fe fbb8 	bl	8000d60 <__aeabi_f2uiz>
 80025f0:	4603      	mov	r3, r0
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	809a      	strh	r2, [r3, #4]

	if(Temperature_Converting->Temperature_Set_ADC>=MAX_ADC_Value){		// If result more than MAX_ADC_Value
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	889b      	ldrh	r3, [r3, #4]
 80025fc:	f640 62d7 	movw	r2, #3799	; 0xed7
 8002600:	4293      	cmp	r3, r2
 8002602:	d90c      	bls.n	800261e <Set_Temperature+0xbe>
		Temperature_Converting->Temperature_Set_ADC=MAX_ADC_Value;		// Set MAX_ADC_Value as result
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	f640 62d8 	movw	r2, #3800	; 0xed8
 800260a:	809a      	strh	r2, [r3, #4]
		if(*MODE==MANUAL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d108      	bne.n	8002626 <Set_Temperature+0xc6>
			Temperature_Presets_C->Manual=Temperature_Presets_C->Prew_Set_Temperature_Manual;	//Return Manual Preset to Prew_Manual_Preset
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	891a      	ldrh	r2, [r3, #8]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	801a      	strh	r2, [r3, #0]
 800261c:	e003      	b.n	8002626 <Set_Temperature+0xc6>
	}
	else
		Temperature_Presets_C->Prew_Set_Temperature_Manual=Temperature_Presets_C->Manual;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	881a      	ldrh	r2, [r3, #0]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	811a      	strh	r2, [r3, #8]

	return Temperature_Converting->Temperature_Set_ADC;
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	889b      	ldrh	r3, [r3, #4]
}
 800262a:	4618      	mov	r0, r3
 800262c:	3714      	adds	r7, #20
 800262e:	46bd      	mov	sp, r7
 8002630:	bd90      	pop	{r4, r7, pc}
 8002632:	bf00      	nop

08002634 <Temperatur_Correction>:
//---------------------------------------------------------------------------------
uint16_t Temperatur_Correction(uint16_t Filtred_ADC_Value, struct Temperature_Converting *Temperature_Converting, struct Temperature_Corection *Temperature_Corection_ADC, enum MODE *MODE){
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	60b9      	str	r1, [r7, #8]
 800263c:	607a      	str	r2, [r7, #4]
 800263e:	603b      	str	r3, [r7, #0]
 8002640:	4603      	mov	r3, r0
 8002642:	81fb      	strh	r3, [r7, #14]
	/**
	 * Correcting Current ADC Temperature which occur to the MODE and convert Current_Temperature_ADC to Celsius
	 * Return Current_Temperature in ADC levels
	 * Temperature correction work with ADC Level Presets
	 */
	switch(*MODE){
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	2b03      	cmp	r3, #3
 800264a:	d845      	bhi.n	80026d8 <Temperatur_Correction+0xa4>
 800264c:	a201      	add	r2, pc, #4	; (adr r2, 8002654 <Temperatur_Correction+0x20>)
 800264e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002652:	bf00      	nop
 8002654:	08002665 	.word	0x08002665
 8002658:	08002689 	.word	0x08002689
 800265c:	080026ad 	.word	0x080026ad
 8002660:	080026d1 	.word	0x080026d1
				case MANUAL:
					if(Filtred_ADC_Value>Temperature_Corection_ADC->Manual)		// if current value in ADC levels more than Temperature_Corection_ADC
 8002664:	89fa      	ldrh	r2, [r7, #14]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	429a      	cmp	r2, r3
 800266c:	dd08      	ble.n	8002680 <Temperatur_Correction+0x4c>
						Temperature_Converting->Current_Temperature_ADC=Filtred_ADC_Value-Temperature_Corection_ADC->Manual;	//Set corrected Current Temperature in ADC Levels
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	b29b      	uxth	r3, r3
 8002674:	89fa      	ldrh	r2, [r7, #14]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	b29a      	uxth	r2, r3
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	801a      	strh	r2, [r3, #0]
					else
						Temperature_Converting->Current_Temperature_ADC=0;	//Set Current Temperature in ADC Levels to 0;
					break;
 800267e:	e02b      	b.n	80026d8 <Temperatur_Correction+0xa4>
						Temperature_Converting->Current_Temperature_ADC=0;	//Set Current Temperature in ADC Levels to 0;
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	2200      	movs	r2, #0
 8002684:	801a      	strh	r2, [r3, #0]
					break;
 8002686:	e027      	b.n	80026d8 <Temperatur_Correction+0xa4>
				case PRESET1:
					if(Filtred_ADC_Value>Temperature_Corection_ADC->Preset1)
 8002688:	89fa      	ldrh	r2, [r7, #14]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	429a      	cmp	r2, r3
 8002690:	dd08      	ble.n	80026a4 <Temperatur_Correction+0x70>
						Temperature_Converting->Current_Temperature_ADC=Filtred_ADC_Value-Temperature_Corection_ADC->Preset1;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	b29b      	uxth	r3, r3
 8002698:	89fa      	ldrh	r2, [r7, #14]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	b29a      	uxth	r2, r3
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	801a      	strh	r2, [r3, #0]
					else
						Temperature_Converting->Current_Temperature_ADC=0;
					break;
 80026a2:	e019      	b.n	80026d8 <Temperatur_Correction+0xa4>
						Temperature_Converting->Current_Temperature_ADC=0;
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	2200      	movs	r2, #0
 80026a8:	801a      	strh	r2, [r3, #0]
					break;
 80026aa:	e015      	b.n	80026d8 <Temperatur_Correction+0xa4>
				case PRESET2:
					if(Filtred_ADC_Value>Temperature_Corection_ADC->Preset2)
 80026ac:	89fa      	ldrh	r2, [r7, #14]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	dd08      	ble.n	80026c8 <Temperatur_Correction+0x94>
						Temperature_Converting->Current_Temperature_ADC=Filtred_ADC_Value-Temperature_Corection_ADC->Preset2;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	89fa      	ldrh	r2, [r7, #14]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	801a      	strh	r2, [r3, #0]
					else
						Temperature_Converting->Current_Temperature_ADC=0;
					break;
 80026c6:	e007      	b.n	80026d8 <Temperatur_Correction+0xa4>
						Temperature_Converting->Current_Temperature_ADC=0;
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	2200      	movs	r2, #0
 80026cc:	801a      	strh	r2, [r3, #0]
					break;
 80026ce:	e003      	b.n	80026d8 <Temperatur_Correction+0xa4>
				case SLEEP:
					Temperature_Converting->Current_Temperature_ADC=Filtred_ADC_Value;
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	89fa      	ldrh	r2, [r7, #14]
 80026d4:	801a      	strh	r2, [r3, #0]
					break;
 80026d6:	bf00      	nop
		}

	return Temperature_Converting->Current_Temperature_ADC;
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	881b      	ldrh	r3, [r3, #0]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3714      	adds	r7, #20
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bc80      	pop	{r7}
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop

080026e8 <Temperature_Presets_Corection_Converting>:
//---------------------------------------------------------------------------------
void Temperature_Presets_Corection_Converting(struct Temperature_Corection *Temperature_Corection_C, struct Temperature_Corection *Temperature_Corection_ADC, struct Temperature_Converting *Temperature_Converting){
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
	/**
	 * Converting Temperature_Presets_Corection from Celsius to ADC Levels
	 */
	Temperature_Corection_ADC->Manual=Temperature_Corection_C->Manual*Temperature_Converting->Coeff;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7fe f8f1 	bl	80008e0 <__aeabi_i2f>
 80026fe:	4602      	mov	r2, r0
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	4619      	mov	r1, r3
 8002706:	4610      	mov	r0, r2
 8002708:	f7fe f93e 	bl	8000988 <__aeabi_fmul>
 800270c:	4603      	mov	r3, r0
 800270e:	4618      	mov	r0, r3
 8002710:	f7fe fb00 	bl	8000d14 <__aeabi_f2iz>
 8002714:	4602      	mov	r2, r0
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	601a      	str	r2, [r3, #0]
	Temperature_Corection_ADC->Preset1=Temperature_Corection_C->Preset1*Temperature_Converting->Coeff;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	4618      	mov	r0, r3
 8002720:	f7fe f8de 	bl	80008e0 <__aeabi_i2f>
 8002724:	4602      	mov	r2, r0
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	4619      	mov	r1, r3
 800272c:	4610      	mov	r0, r2
 800272e:	f7fe f92b 	bl	8000988 <__aeabi_fmul>
 8002732:	4603      	mov	r3, r0
 8002734:	4618      	mov	r0, r3
 8002736:	f7fe faed 	bl	8000d14 <__aeabi_f2iz>
 800273a:	4602      	mov	r2, r0
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	605a      	str	r2, [r3, #4]
	Temperature_Corection_ADC->Preset2=Temperature_Corection_C->Preset2*Temperature_Converting->Coeff;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	4618      	mov	r0, r3
 8002746:	f7fe f8cb 	bl	80008e0 <__aeabi_i2f>
 800274a:	4602      	mov	r2, r0
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	4619      	mov	r1, r3
 8002752:	4610      	mov	r0, r2
 8002754:	f7fe f918 	bl	8000988 <__aeabi_fmul>
 8002758:	4603      	mov	r3, r0
 800275a:	4618      	mov	r0, r3
 800275c:	f7fe fada 	bl	8000d14 <__aeabi_f2iz>
 8002760:	4602      	mov	r2, r0
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	609a      	str	r2, [r3, #8]
}
 8002766:	bf00      	nop
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <Get_Temperature_Set_C>:
//---------------------------------------------------------------------------------
uint16_t Get_Temperature_Set_C(struct Temperature_Converting *self){
 800276e:	b480      	push	{r7}
 8002770:	b083      	sub	sp, #12
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
	/**
	 * Return Set temperature in Celsius
	 */
	return self->Temperature_Set_C;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	88db      	ldrh	r3, [r3, #6]
}
 800277a:	4618      	mov	r0, r3
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	bc80      	pop	{r7}
 8002782:	4770      	bx	lr

08002784 <Get_Current_Temperature_C>:
//---------------------------------------------------------------------------------
uint16_t Get_Current_Temperature_C(struct Temperature_Converting *Temperature_Converting){
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
	/**
	 * Convert and return Current temperature in Celsius
	 */
	Temperature_Converting->Current_Temperature_C=(uint16_t)Temperature_Converting->Current_Temperature_ADC/Temperature_Converting->Coeff; //Converting Current_Temperature_ADC to Celsius
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	881b      	ldrh	r3, [r3, #0]
 8002790:	4618      	mov	r0, r3
 8002792:	f7fe f8a5 	bl	80008e0 <__aeabi_i2f>
 8002796:	4602      	mov	r2, r0
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	4619      	mov	r1, r3
 800279e:	4610      	mov	r0, r2
 80027a0:	f7fe f9a6 	bl	8000af0 <__aeabi_fdiv>
 80027a4:	4603      	mov	r3, r0
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7fe fada 	bl	8000d60 <__aeabi_f2uiz>
 80027ac:	4603      	mov	r3, r0
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	805a      	strh	r2, [r3, #2]
	return Temperature_Converting->Current_Temperature_C;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	885b      	ldrh	r3, [r3, #2]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <Get_Manual_Preset_Temperature_C>:
//---------------------------------------------------------------------------------
uint16_t Get_Manual_Preset_Temperature_C(struct Temperature_Presets *self){
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
	return self->Manual;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	881b      	ldrh	r3, [r3, #0]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bc80      	pop	{r7}
 80027d4:	4770      	bx	lr

080027d6 <Set_Manual_Preset_Temperature_C>:
//---------------------------------------------------------------------------------
void Set_Manual_Preset_Temperature_C(uint16_t value, struct Temperature_Presets *self){
 80027d6:	b480      	push	{r7}
 80027d8:	b083      	sub	sp, #12
 80027da:	af00      	add	r7, sp, #0
 80027dc:	4603      	mov	r3, r0
 80027de:	6039      	str	r1, [r7, #0]
 80027e0:	80fb      	strh	r3, [r7, #6]
	self->Manual=value;
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	88fa      	ldrh	r2, [r7, #6]
 80027e6:	801a      	strh	r2, [r3, #0]
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bc80      	pop	{r7}
 80027f0:	4770      	bx	lr

080027f2 <Solder_Iron_it>:
void Solder_Iron_Set_MODE_Temperature(struct Soldering_Iron *self, enum MODE MODE);
void Solder_Iron_Flash_Reset_Rewrite_Timer(struct Soldering_Iron *self);
uint32_t Write_Manual_Temperature(struct Temperature_Presets *self, uint32_t Flash_Key, uint8_t Flash_Page);
uint8_t Flash_Read_Manual_Temperature(struct Temperature_Presets *self, uint32_t Flash_Key, uint8_t Flash_Page);
//---------------------------------------------------------------------------------
void Solder_Iron_it(struct Soldering_Iron *self){
 80027f2:	b590      	push	{r4, r7, lr}
 80027f4:	b083      	sub	sp, #12
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
	/**
	 * PID and Filter iteration for Soldering_Iron
	 */
	Vibration_Sensor_it(self);				// We can read state of Vibration Sensor only when PWM is stopped
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f9e7 	bl	8002bce <Vibration_Sensor_it>
	Button_it(&self->Full_Power_Button); 	// We can read state of button only when PWM is stopped
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	337c      	adds	r3, #124	; 0x7c
 8002804:	4618      	mov	r0, r3
 8002806:	f7fe fc4e 	bl	80010a6 <Button_it>
	if(self->State==1){
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002810:	2b01      	cmp	r3, #1
 8002812:	d127      	bne.n	8002864 <Solder_Iron_it+0x72>
	  HAL_TIM_PWM_Start(self->PWM_htim, TIM_CHANNEL_4);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800281a:	210c      	movs	r1, #12
 800281c:	4618      	mov	r0, r3
 800281e:	f006 ff0b 	bl	8009638 <HAL_TIM_PWM_Start>
	  PID_Set_Curent_Point(&self->PID,(int)(Temperatur_Correction(Filter_Combined(&self->Filter), &self->Temperature_Converting, &self->Temperature_Corection_ADC, &self->MODE)));
 8002822:	687c      	ldr	r4, [r7, #4]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3324      	adds	r3, #36	; 0x24
 8002828:	4618      	mov	r0, r3
 800282a:	f7fe fe5e 	bl	80014ea <Filter_Combined>
 800282e:	4603      	mov	r3, r0
 8002830:	4618      	mov	r0, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	3344      	adds	r3, #68	; 0x44
 8002842:	f7ff fef7 	bl	8002634 <Temperatur_Correction>
 8002846:	4603      	mov	r3, r0
 8002848:	4619      	mov	r1, r3
 800284a:	4620      	mov	r0, r4
 800284c:	f7ff fe6b 	bl	8002526 <PID_Set_Curent_Point>
	  self->PWM_htim->Instance->CCR4=PID_it(&self->PID);	//PID it
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002858:	681c      	ldr	r4, [r3, #0]
 800285a:	4610      	mov	r0, r2
 800285c:	f7ff fdc6 	bl	80023ec <PID_it>
 8002860:	4603      	mov	r3, r0
 8002862:	6423      	str	r3, [r4, #64]	; 0x40
	}
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	bd90      	pop	{r4, r7, pc}

0800286c <Solder_Iron_Sleep_Time_Resset>:
//---------------------------------------------------------------------------------
void Solder_Iron_Sleep_Time_Resset(struct Soldering_Iron *self){
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
	/**
	 * Reset sleep mode timer and if last mode was Sleep Set previous mode;
	 */
	if(self->MODE==SLEEP)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800287a:	2b03      	cmp	r3, #3
 800287c:	d105      	bne.n	800288a <Solder_Iron_Sleep_Time_Resset+0x1e>
		self->MODE=self->PREW_MODE;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	self->Timer=0;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr

0800289c <Solder_Iron_tim_it>:
//---------------------------------------------------------------------------------
void Solder_Iron_tim_it(struct Soldering_Iron *self){
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
	/**
	 * Solder_Iron_tim_it Main purples ones a second create Button event for full power button and sleep Mode management
	 */
	static uint8_t TIM_prescaler=0;

	if(TIM_prescaler++==10){
 80028a4:	4b1e      	ldr	r3, [pc, #120]	; (8002920 <Solder_Iron_tim_it+0x84>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	1c5a      	adds	r2, r3, #1
 80028aa:	b2d1      	uxtb	r1, r2
 80028ac:	4a1c      	ldr	r2, [pc, #112]	; (8002920 <Solder_Iron_tim_it+0x84>)
 80028ae:	7011      	strb	r1, [r2, #0]
 80028b0:	2b0a      	cmp	r3, #10
 80028b2:	d131      	bne.n	8002918 <Solder_Iron_tim_it+0x7c>
		if(self->State){
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d029      	beq.n	8002912 <Solder_Iron_tim_it+0x76>
			if(self->Timer++==self->Sleep_time){						//if Time more than Sleep time value set sleep mode
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 80028c4:	1c5a      	adds	r2, r3, #1
 80028c6:	b291      	uxth	r1, r2
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	f8a2 109a 	strh.w	r1, [r2, #154]	; 0x9a
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	f892 209c 	ldrb.w	r2, [r2, #156]	; 0x9c
 80028d4:	b292      	uxth	r2, r2
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d10a      	bne.n	80028f0 <Solder_Iron_tim_it+0x54>
				self->PREW_MODE=self->MODE;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
				Solder_Iron_Set_MODE_Temperature(self, SLEEP);			//Set Sleep Mode Temperature preset
 80028e6:	2103      	movs	r1, #3
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 f861 	bl	80029b0 <Solder_Iron_Set_MODE_Temperature>
 80028ee:	e010      	b.n	8002912 <Solder_Iron_tim_it+0x76>
			}else if(self->Timer==self->Disable_time+self->Sleep_time)	//if time more than Disable_time+Sleep_time Turn OFF Soldering_Iron
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 80028f6:	461a      	mov	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 80028fe:	4619      	mov	r1, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8002906:	440b      	add	r3, r1
 8002908:	429a      	cmp	r2, r3
 800290a:	d102      	bne.n	8002912 <Solder_Iron_tim_it+0x76>
				Solder_Iron_OFF(self);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 f83d 	bl	800298c <Solder_Iron_OFF>
		}
		TIM_prescaler=0;
 8002912:	4b03      	ldr	r3, [pc, #12]	; (8002920 <Solder_Iron_tim_it+0x84>)
 8002914:	2200      	movs	r2, #0
 8002916:	701a      	strb	r2, [r3, #0]
	}
}
 8002918:	bf00      	nop
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	200002b4 	.word	0x200002b4

08002924 <Solder_Iron_ini>:
//---------------------------------------------------------------------------------
void Solder_Iron_ini(struct Soldering_Iron *self){
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
	/**
	 * Basic initialization of all part for starting all processes
	 */
	PID_ini(&self->PID);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4618      	mov	r0, r3
 8002930:	f7ff fd4a 	bl	80023c8 <PID_ini>
	Filter_ini(&self->Filter);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	3324      	adds	r3, #36	; 0x24
 8002938:	4618      	mov	r0, r3
 800293a:	f7fe fd71 	bl	8001420 <Filter_ini>
	Button_ini(&self->Full_Power_Button);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	337c      	adds	r3, #124	; 0x7c
 8002942:	4618      	mov	r0, r3
 8002944:	f7fe fc04 	bl	8001150 <Button_ini>
	Flash_Rewrite_Timer_ini(&self->Flash_Rewrite_Timer);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	33a2      	adds	r3, #162	; 0xa2
 800294c:	4618      	mov	r0, r3
 800294e:	f000 feab 	bl	80036a8 <Flash_Rewrite_Timer_ini>
	Solder_Iron_Set_Manual_Temperature(self);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 f883 	bl	8002a5e <Solder_Iron_Set_Manual_Temperature>
}
 8002958:	bf00      	nop
 800295a:	3708      	adds	r7, #8
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <Solder_Iron_ON>:

//---------------------------------------------------------------------------------
void Solder_Iron_ON(struct Soldering_Iron *self){
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
	Solder_Iron_Sleep_Time_Resset(self);  					//Reset Sleep_timer
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f7ff ff7f 	bl	800286c <Solder_Iron_Sleep_Time_Resset>
	Solder_Iron_Set_MODE_Temperature(self,self->MODE);		//Set Temperature
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002974:	4619      	mov	r1, r3
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 f81a 	bl	80029b0 <Solder_Iron_Set_MODE_Temperature>
	self->State=Soldering_Iron_ON;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
}
 8002984:	bf00      	nop
 8002986:	3708      	adds	r7, #8
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <Solder_Iron_OFF>:
//---------------------------------------------------------------------------------
void Solder_Iron_OFF(struct Soldering_Iron *self){
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
	self->State=Soldering_Iron_OFF;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	Solder_Iron_Sleep_Time_Resset(self); 	//Reset Sleep_timer
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f7ff ff65 	bl	800286c <Solder_Iron_Sleep_Time_Resset>
	Solder_Iron_ini(self);					//Reset All Spldering Iron parameters
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7ff ffbe 	bl	8002924 <Solder_Iron_ini>
}
 80029a8:	bf00      	nop
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <Solder_Iron_Set_MODE_Temperature>:
//---------------------------------------------------------------------------------
void Solder_Iron_Set_MODE_Temperature(struct Soldering_Iron *self, enum MODE MODE){
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	460b      	mov	r3, r1
 80029ba:	70fb      	strb	r3, [r7, #3]
	/**
	 * Solder_Iron_Set_Temperature based on MODE and Full_Power_Button
	 * Set Point for PID
	 */
	self->MODE=MODE;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	78fa      	ldrb	r2, [r7, #3]
 80029c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	uint16_t Set_Temperature_ADC_Piont;

	if(self->Full_Power_State==1){
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d11d      	bne.n	8002a0a <Solder_Iron_Set_MODE_Temperature+0x5a>
		Set_Temperature_ADC_Piont=self->Temperature_Converting.Temperature_Set_ADC=MAX_ADC_Value;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f640 62d8 	movw	r2, #3800	; 0xed8
 80029d4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80029de:	81fb      	strh	r3, [r7, #14]
		self->Temperature_Converting.Temperature_Set_C=(uint16_t)(Set_Temperature_ADC_Piont/self->Temperature_Converting.Coeff);
 80029e0:	89fb      	ldrh	r3, [r7, #14]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7fd ff7c 	bl	80008e0 <__aeabi_i2f>
 80029e8:	4602      	mov	r2, r0
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ee:	4619      	mov	r1, r3
 80029f0:	4610      	mov	r0, r2
 80029f2:	f7fe f87d 	bl	8000af0 <__aeabi_fdiv>
 80029f6:	4603      	mov	r3, r0
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7fe f9b1 	bl	8000d60 <__aeabi_f2uiz>
 80029fe:	4603      	mov	r3, r0
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 8002a08:	e00a      	b.n	8002a20 <Solder_Iron_Set_MODE_Temperature+0x70>
	}
	else
		Set_Temperature(&self->Temperature_Presets_C, &self->Temperature_Converting, &self->MODE);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f103 0046 	add.w	r0, r3, #70	; 0x46
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	3344      	adds	r3, #68	; 0x44
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	f7ff fda0 	bl	8002560 <Set_Temperature>

	PID_Set_Point(&self->PID, self->Temperature_Converting.Temperature_Set_ADC);		//Set Point for PID
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002a28:	4619      	mov	r1, r3
 8002a2a:	4610      	mov	r0, r2
 8002a2c:	f7ff fd6c 	bl	8002508 <PID_Set_Point>
}
 8002a30:	bf00      	nop
 8002a32:	3710      	adds	r7, #16
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <Solder_Iron_Temperature_Presets_Corection_Converting>:
//---------------------------------------------------------------------------------
void Solder_Iron_Temperature_Presets_Corection_Converting(struct Soldering_Iron *self){
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
	/**
	 * Converting Solder_Iron_Temperature_Presets_Corection from Celsius to ADC Levels
	 */
	Temperature_Presets_Corection_Converting(&self->Temperature_Corection_C, &self->Temperature_Corection_ADC, &self->Temperature_Converting);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f103 0168 	add.w	r1, r3, #104	; 0x68
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	3350      	adds	r3, #80	; 0x50
 8002a50:	461a      	mov	r2, r3
 8002a52:	f7ff fe49 	bl	80026e8 <Temperature_Presets_Corection_Converting>
}
 8002a56:	bf00      	nop
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <Solder_Iron_Set_Manual_Temperature>:
//---------------------------------------------------------------------------------
void Solder_Iron_Set_Manual_Temperature(struct Soldering_Iron *self){
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b082      	sub	sp, #8
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
	/**
	 * Set manual temperature for Solder_Iron and set Manual MODE
	 */
	if(self->Temperature_Presets_C.Prew_Set_Temperature_Manual!=self->Temperature_Presets_C.Manual){	//if curent set temperature != Prew_Manual set temperature
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d009      	beq.n	8002a8a <Solder_Iron_Set_Manual_Temperature+0x2c>
		Solder_Iron_Set_MODE_Temperature(self, MANUAL);	//Set temperature PID point
 8002a76:	2100      	movs	r1, #0
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f7ff ff99 	bl	80029b0 <Solder_Iron_Set_MODE_Temperature>
		Solder_Iron_Sleep_Time_Resset(self);			//Reset sleep timer
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f7ff fef4 	bl	800286c <Solder_Iron_Sleep_Time_Resset>
		Solder_Iron_Flash_Reset_Rewrite_Timer(self);	//
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 f913 	bl	8002cb0 <Solder_Iron_Flash_Reset_Rewrite_Timer>
	}
}
 8002a8a:	bf00      	nop
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <Solder_Iron_Set_Preset1_Temperature>:
//---------------------------------------------------------------------------------
void Solder_Iron_Set_Preset1_Temperature(struct Soldering_Iron *self){
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b082      	sub	sp, #8
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
	/**
	 * Set Preset1 temperature for Solder_Iron and set Preset1 MODE
	 */
	 Solder_Iron_Set_MODE_Temperature(self, PRESET1);	//Set temperature PID point
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f7ff ff87 	bl	80029b0 <Solder_Iron_Set_MODE_Temperature>
	 Solder_Iron_Sleep_Time_Resset(self);				//Reset sleep timer
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f7ff fee2 	bl	800286c <Solder_Iron_Sleep_Time_Resset>
}
 8002aa8:	bf00      	nop
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <Solder_Iron_Set_Preset2_Temperature>:
//---------------------------------------------------------------------------------
void Solder_Iron_Set_Preset2_Temperature(struct Soldering_Iron *self){
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
	/**
	 * Set Preset2 temperature for Solder_Iron and set Preset2 MODE
	 */
	 Solder_Iron_Set_MODE_Temperature(self, PRESET2);	//Set temperature PID point
 8002ab8:	2102      	movs	r1, #2
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7ff ff78 	bl	80029b0 <Solder_Iron_Set_MODE_Temperature>
	 Solder_Iron_Sleep_Time_Resset(self);				//Reset sleep timer
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f7ff fed3 	bl	800286c <Solder_Iron_Sleep_Time_Resset>
}
 8002ac6:	bf00      	nop
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <Solder_Iron_Set_Manual_Preset_Temperature_C>:
//---------------------------------------------------------------------------------
void Solder_Iron_Set_Manual_Preset_Temperature_C(uint16_t value, struct Soldering_Iron *self){
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b082      	sub	sp, #8
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	6039      	str	r1, [r7, #0]
 8002ad8:	80fb      	strh	r3, [r7, #6]
	/**
	 * Set Manual_Preset_Temperature temperature for Solder_Iron in Celsius
	 */
	Set_Manual_Preset_Temperature_C(value, &self->Temperature_Presets_C);
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	f103 0246 	add.w	r2, r3, #70	; 0x46
 8002ae0:	88fb      	ldrh	r3, [r7, #6]
 8002ae2:	4611      	mov	r1, r2
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff fe76 	bl	80027d6 <Set_Manual_Preset_Temperature_C>
}
 8002aea:	bf00      	nop
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <Solder_Iron_Full_Power_ON>:
//---------------------------------------------------------------------------------
void Solder_Iron_Full_Power_ON(struct Soldering_Iron *self){
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b082      	sub	sp, #8
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
	/**
	 * Turn ON Full_Power
	 */
	self->Full_Power_State=Full_Power_ON;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	Solder_Iron_Set_MODE_Temperature(self, self->MODE);	//Set temperature PID point
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b08:	4619      	mov	r1, r3
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7ff ff50 	bl	80029b0 <Solder_Iron_Set_MODE_Temperature>
	Solder_Iron_Sleep_Time_Resset(self);				//Reset sleep timer
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f7ff feab 	bl	800286c <Solder_Iron_Sleep_Time_Resset>
}
 8002b16:	bf00      	nop
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <Solder_Iron_Full_Power_OFF>:
//---------------------------------------------------------------------------------
void Solder_Iron_Full_Power_OFF(struct Soldering_Iron *self){
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b082      	sub	sp, #8
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
	/**
	 * Turn OFF Full_Power
	 */
	self->Full_Power_State=Full_Power_OFF;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	Solder_Iron_Set_MODE_Temperature(self, self->MODE);	//Set temperature PID point
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b34:	4619      	mov	r1, r3
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f7ff ff3a 	bl	80029b0 <Solder_Iron_Set_MODE_Temperature>
	Solder_Iron_Sleep_Time_Resset(self);				//Reset sleep timer
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f7ff fe95 	bl	800286c <Solder_Iron_Sleep_Time_Resset>
}
 8002b42:	bf00      	nop
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <Solder_Iron_Get_Full_Power_State>:
//---------------------------------------------------------------------------------
enum Full_Power_State Solder_Iron_Get_Full_Power_State(struct Soldering_Iron *self){
 8002b4a:	b480      	push	{r7}
 8002b4c:	b083      	sub	sp, #12
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
	/**
	 * Return Full_Powr_State	(Full_Power_ON,Full_Power_OFF)
	 */
	return self->Full_Power_State;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bc80      	pop	{r7}
 8002b60:	4770      	bx	lr

08002b62 <Solder_Iron_Get_State>:
//---------------------------------------------------------------------------------
enum Soldering_Iron_State Solder_Iron_Get_State(struct Soldering_Iron *self){
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
	/**
	 * Return Solder_Iron_State (Soldering_Iron_ON Soldering_Iron_OFF)
	 */
	return self->State;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bc80      	pop	{r7}
 8002b78:	4770      	bx	lr

08002b7a <Soldering_Iron_Get_Manual_Preset_Temperature_C>:
//---------------------------------------------------------------------------------
uint16_t Soldering_Iron_Get_Manual_Preset_Temperature_C(struct Soldering_Iron *self){
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b082      	sub	sp, #8
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
	/*
	 * Return manual preset preset temperature in celsius
	 */
	return Get_Manual_Preset_Temperature_C(&self->Temperature_Presets_C);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	3346      	adds	r3, #70	; 0x46
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff fe1a 	bl	80027c0 <Get_Manual_Preset_Temperature_C>
 8002b8c:	4603      	mov	r3, r0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <Soldering_Iron_Get_Temperature_Set_C>:
//---------------------------------------------------------------------------------
uint16_t Soldering_Iron_Get_Temperature_Set_C(struct Soldering_Iron *self){
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b082      	sub	sp, #8
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
	/*
	 * Return Current Set temperature in celsius
	 */
	return Get_Temperature_Set_C(&self->Temperature_Converting);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	3350      	adds	r3, #80	; 0x50
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff fde3 	bl	800276e <Get_Temperature_Set_C>
 8002ba8:	4603      	mov	r3, r0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <Soldering_Iron_Get_Current_Temperature_C>:
//---------------------------------------------------------------------------------
uint16_t Soldering_Iron_Get_Current_Temperature_C(struct Soldering_Iron *self){
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b082      	sub	sp, #8
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
	/*
	 * Return Current temperature in celsius
	 */
	return Get_Current_Temperature_C(&self->Temperature_Converting);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	3350      	adds	r3, #80	; 0x50
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff fde0 	bl	8002784 <Get_Current_Temperature_C>
 8002bc4:	4603      	mov	r3, r0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <Vibration_Sensor_it>:
//---------------------------------------------------------------------------------
void Vibration_Sensor_it(struct Soldering_Iron *self){
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b082      	sub	sp, #8
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
	/**
	 * Vibration sensor have not any check
	 * Main function reset Sleep timer when rising / falling edge
	 */
	self->VS.State=HAL_GPIO_ReadPin(self->VS.GPIO,self->VS.EXTI_PIN);						//Read Pin State
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8002be0:	4619      	mov	r1, r3
 8002be2:	4610      	mov	r0, r2
 8002be4:	f005 f8ec 	bl	8007dc0 <HAL_GPIO_ReadPin>
 8002be8:	4603      	mov	r3, r0
 8002bea:	461a      	mov	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
		if(self->VS.State!=self->VS.Prew_State){											//IF ReadState!=Prew_Stae
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f893 207a 	ldrb.w	r2, [r3, #122]	; 0x7a
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d009      	beq.n	8002c16 <Vibration_Sensor_it+0x48>
			Solder_Iron_Sleep_Time_Resset(self);											//Sleep Timer Reset and current MODE(sleep) set previous mode(Manual/Preset1/Preset2)
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f7ff fe32 	bl	800286c <Solder_Iron_Sleep_Time_Resset>
			Solder_Iron_Set_MODE_Temperature(self,self->MODE);								//Set previous mode temperature before sleep mode temperature;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c0e:	4619      	mov	r1, r3
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f7ff fecd 	bl	80029b0 <Solder_Iron_Set_MODE_Temperature>
		}
		self->VS.Prew_State=self->VS.State;													//Prew State = Read State
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 207a 	ldrb.w	r2, [r3, #122]	; 0x7a
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
}
 8002c22:	bf00      	nop
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <Solder_Iron_Flash_Write_Struct>:
//---------------------------------------------------------------------------------------------------------------------------------// Solder_Iron Flash
uint32_t Solder_Iron_Flash_Write_Struct(struct Soldering_Iron *self,uint32_t addr){
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b082      	sub	sp, #8
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
 8002c32:	6039      	str	r1, [r7, #0]
	/**
	 * Using to write main structure Soldering_Iron into Flash Memory for an address
	 * return address of the end of writing
	 */
	return Flash_Write (addr, self, sizeof(*self));
 8002c34:	22ac      	movs	r2, #172	; 0xac
 8002c36:	6879      	ldr	r1, [r7, #4]
 8002c38:	6838      	ldr	r0, [r7, #0]
 8002c3a:	f7fe fcba 	bl	80015b2 <Flash_Write>
 8002c3e:	4603      	mov	r3, r0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3708      	adds	r7, #8
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <Solder_Iron_Flash_Read_Struct>:
//---------------------------------------------------------------------------------
HAL_StatusTypeDef Solder_Iron_Flash_Read_Struct(struct Soldering_Iron *self,uint32_t addr){
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b0ae      	sub	sp, #184	; 0xb8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
	 * Using to read main structure Soldering_Iron from Flash Memory for an address
	 * return HAL_OK is read  struct was successful  and HAL_ERROR if not
	 * If reading is correct function write all data into a structure
	 */
	struct Soldering_Iron Read_Struct;
	Flash_Read (addr, &Read_Struct, sizeof(*self));			//Read struct into copy
 8002c52:	f107 030c 	add.w	r3, r7, #12
 8002c56:	22ac      	movs	r2, #172	; 0xac
 8002c58:	4619      	mov	r1, r3
 8002c5a:	6838      	ldr	r0, [r7, #0]
 8002c5c:	f7fe fce6 	bl	800162c <Flash_Read>
	if(Read_Struct.Flash_Key==Soldering_Iron_Struct_Key){	//Check if wrote data is a struct
 8002c60:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c64:	4a08      	ldr	r2, [pc, #32]	; (8002c88 <Solder_Iron_Flash_Read_Struct+0x40>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d109      	bne.n	8002c7e <Solder_Iron_Flash_Read_Struct+0x36>
		*self=Read_Struct;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f107 030c 	add.w	r3, r7, #12
 8002c72:	22ac      	movs	r2, #172	; 0xac
 8002c74:	4619      	mov	r1, r3
 8002c76:	f008 fa4b 	bl	800b110 <memcpy>
		return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	e000      	b.n	8002c80 <Solder_Iron_Flash_Read_Struct+0x38>
	}else
		return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	37b8      	adds	r7, #184	; 0xb8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	0801f802 	.word	0x0801f802

08002c8c <Solder_Iron_Flash_Read_Manual_Temperature>:
//---------------------------------------------------------------------------------
HAL_StatusTypeDef Solder_Iron_Flash_Read_Manual_Temperature(struct Soldering_Iron *self){
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
	/**
	 * Using to read structure Temperature_Presets from Flash Memory for an Page
	 * return HAL_OK or HAL_ERROR
	 */
	return Flash_Read_Manual_Temperature(&self->Temperature_Presets_C, Soldering_Iron_Manual_Temperature_Flash_Key, Soldering_Iron_Manual_Temperature_Flash_Page);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3346      	adds	r3, #70	; 0x46
 8002c98:	227d      	movs	r2, #125	; 0x7d
 8002c9a:	4904      	ldr	r1, [pc, #16]	; (8002cac <Solder_Iron_Flash_Read_Manual_Temperature+0x20>)
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f000 fc78 	bl	8003592 <Flash_Read_Manual_Temperature>
 8002ca2:	4603      	mov	r3, r0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3708      	adds	r7, #8
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	0801f806 	.word	0x0801f806

08002cb0 <Solder_Iron_Flash_Reset_Rewrite_Timer>:
//---------------------------------------------------------------------------------
void Solder_Iron_Flash_Reset_Rewrite_Timer(struct Soldering_Iron *self){
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
	/**
	 * This function reset rewrite timer.
	 */
	Flash_Reset_Rewrite_Timer(&self->Flash_Rewrite_Timer);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	33a2      	adds	r3, #162	; 0xa2
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f000 fc95 	bl	80035ec <Flash_Reset_Rewrite_Timer>
}
 8002cc2:	bf00      	nop
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <Soldering_Heat_Gun_ini>:
//-----------------------------------------------------------------------------------------------------------------------------------// Heat gun
void Soldering_Heat_Gun_Flash_Reset_Rewrite_Timer(struct Soldering_Heat_Gun *self);
void Soldering_Heat_Gun_Temperature_Coolling_Converting(struct Soldering_Heat_Gun *self);
//---------------------------------------------------------------------------------
void Soldering_Heat_Gun_ini(struct Soldering_Heat_Gun *self){
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b082      	sub	sp, #8
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
	/**
	 * Basic initialization of all part for starting all processes
	 */
	PID_ini(&self->PID);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7ff fb77 	bl	80023c8 <PID_ini>
	Filter_ini(&self->Filter);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	3324      	adds	r3, #36	; 0x24
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7fe fb9e 	bl	8001420 <Filter_ini>
	Flash_Rewrite_Timer_ini(&self->Flash_Rewrite_Timer);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	3392      	adds	r3, #146	; 0x92
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f000 fcdd 	bl	80036a8 <Flash_Rewrite_Timer_ini>
	Soldering_Heat_Gun_Set_Manual_Temperature(self);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 f8ae 	bl	8002e50 <Soldering_Heat_Gun_Set_Manual_Temperature>
}
 8002cf4:	bf00      	nop
 8002cf6:	3708      	adds	r7, #8
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <Soldering_Heat_Gun_ON>:
//---------------------------------------------------------------------------------
void Soldering_Heat_Gun_ON(struct Soldering_Heat_Gun *self){
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
	/**
	 * Turn ON Heat Gun
	 */

	PAC_Device_Control_ON(self->PAC_Control);	//Turn ON Phase Angle Control
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff faae 	bl	800226a <PAC_Device_Control_ON>
	PID_ini(&self->PID);						//Reset PID
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7ff fb59 	bl	80023c8 <PID_ini>
	Filter_ini(&self->Filter);					//Reset Filter
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	3324      	adds	r3, #36	; 0x24
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7fe fb80 	bl	8001420 <Filter_ini>

	HAL_GPIO_WritePin(self->OFF_GPIO, self->OFF_PIN, GPIO_PIN_RESET);		//Set manual mode to FAN rotating speed controll
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	4619      	mov	r1, r3
 8002d30:	f005 f85d 	bl	8007dee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(self->MANUAL_GPIO, self->MANUAL_PIN, GPIO_PIN_SET);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8002d40:	2201      	movs	r2, #1
 8002d42:	4619      	mov	r1, r3
 8002d44:	f005 f853 	bl	8007dee <HAL_GPIO_WritePin>

	self->State=Heat_Gun_ON;					//Set turn ON State
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
}
 8002d50:	bf00      	nop
 8002d52:	3708      	adds	r7, #8
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <Soldering_Heat_Gun_OFF>:
//---------------------------------------------------------------------------------
void Soldering_Heat_Gun_OFF(struct Soldering_Heat_Gun *self){
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
	/**
	 * Turn OFF Heat Gun
	 */
	Soldering_Heat_Gun_Temperature_Coolling_Converting(self);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 f849 	bl	8002df8 <Soldering_Heat_Gun_Temperature_Coolling_Converting>
	self->State=Heat_Gun_COOLING;					//Set COOLING State. It needs to cool heat gun to Temperature_Coolling. After set Turn OFF state
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2202      	movs	r2, #2
 8002d6a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	PAC_Device_Control_OFF(self->PAC_Control);											// Turn OFF Phase Angle Control
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7ff faa6 	bl	80022c4 <PAC_Device_Control_OFF>
	HAL_GPIO_WritePin(self->MANUAL_GPIO, self->MANUAL_PIN, GPIO_PIN_RESET);	 	//Turn ON Full Speed FAN rotation
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8002d84:	2200      	movs	r2, #0
 8002d86:	4619      	mov	r1, r3
 8002d88:	f005 f831 	bl	8007dee <HAL_GPIO_WritePin>
}
 8002d8c:	bf00      	nop
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <Soldering_Heat_Gun_Set_MODE_Temperature>:
//---------------------------------------------------------------------------------
void Soldering_Heat_Gun_Set_MODE_Temperature(struct Soldering_Heat_Gun *self,enum MODE MODE){
 8002d94:	b590      	push	{r4, r7, lr}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	70fb      	strb	r3, [r7, #3]
	/**
	 * Heat_Gun set temperature for PID based on mode
	 * Needs set mode struct.mode(MANUAL/PRESET1..) Before use
	 */
	self->MODE=MODE;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	78fa      	ldrb	r2, [r7, #3]
 8002da4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	PID_Set_Point(&self->PID, Set_Temperature(&self->Temperature_Presets_C, &self->Temperature_Converting, &self->MODE));
 8002da8:	687c      	ldr	r4, [r7, #4]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f103 0046 	add.w	r0, r3, #70	; 0x46
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	3344      	adds	r3, #68	; 0x44
 8002dba:	461a      	mov	r2, r3
 8002dbc:	f7ff fbd0 	bl	8002560 <Set_Temperature>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	4620      	mov	r0, r4
 8002dc6:	f7ff fb9f 	bl	8002508 <PID_Set_Point>
}
 8002dca:	bf00      	nop
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd90      	pop	{r4, r7, pc}

08002dd2 <Soldering_Heat_Gun_Temperature_Presets_Corection_Converting>:
//---------------------------------------------------------------------------------
void Soldering_Heat_Gun_Temperature_Presets_Corection_Converting(struct Soldering_Heat_Gun *self){
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b082      	sub	sp, #8
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
	/**
	 * Converting Soldering_Heat_Gun_Temperature_Presets_Corection from Celsius to ADC Levels
	 */
	Temperature_Presets_Corection_Converting(&self->Temperature_Corection_C, &self->Temperature_Corection_ADC, &self->Temperature_Converting);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f103 0168 	add.w	r1, r3, #104	; 0x68
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	3350      	adds	r3, #80	; 0x50
 8002dea:	461a      	mov	r2, r3
 8002dec:	f7ff fc7c 	bl	80026e8 <Temperature_Presets_Corection_Converting>
}
 8002df0:	bf00      	nop
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <Soldering_Heat_Gun_Temperature_Coolling_Converting>:
//---------------------------------------------------------------------------------
void Soldering_Heat_Gun_Temperature_Coolling_Converting(struct Soldering_Heat_Gun *self){
 8002df8:	b590      	push	{r4, r7, lr}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
	self->Temperature_Coolling.ADC=(uint16_t)(self->Temperature_Coolling.C*self->Temperature_Converting.Coeff+self->Temperature_Converting.Coeff/2);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f8b3 308e 	ldrh.w	r3, [r3, #142]	; 0x8e
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7fd fd6a 	bl	80008e0 <__aeabi_i2f>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e12:	4619      	mov	r1, r3
 8002e14:	4610      	mov	r0, r2
 8002e16:	f7fd fdb7 	bl	8000988 <__aeabi_fmul>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	461c      	mov	r4, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e22:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7fd fe62 	bl	8000af0 <__aeabi_fdiv>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	4619      	mov	r1, r3
 8002e30:	4620      	mov	r0, r4
 8002e32:	f7fd fca1 	bl	8000778 <__addsf3>
 8002e36:	4603      	mov	r3, r0
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7fd ff91 	bl	8000d60 <__aeabi_f2uiz>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	b29a      	uxth	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd90      	pop	{r4, r7, pc}

08002e50 <Soldering_Heat_Gun_Set_Manual_Temperature>:
//---------------------------------------------------------------------------------
void Soldering_Heat_Gun_Set_Manual_Temperature(struct Soldering_Heat_Gun *self){
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
	/**
	 * Set manual temperature for Soldering_Heat_Gun and set Manual MODE
	 */
	if(self->Temperature_Presets_C.Prew_Set_Temperature_Manual!=self->Temperature_Presets_C.Manual){
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d006      	beq.n	8002e76 <Soldering_Heat_Gun_Set_Manual_Temperature+0x26>
		Soldering_Heat_Gun_Set_MODE_Temperature(self, MANUAL);	//Set temperature PID point
 8002e68:	2100      	movs	r1, #0
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7ff ff92 	bl	8002d94 <Soldering_Heat_Gun_Set_MODE_Temperature>
		Soldering_Heat_Gun_Flash_Reset_Rewrite_Timer(self);		//Reset rewrite timer
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 f937 	bl	80030e4 <Soldering_Heat_Gun_Flash_Reset_Rewrite_Timer>
	}
}
 8002e76:	bf00      	nop
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <Soldering_Heat_Gun_Set_Preset1_Temperature>:
//---------------------------------------------------------------------------------
void Soldering_Heat_Gun_Set_Preset1_Temperature(struct Soldering_Heat_Gun *self){
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b082      	sub	sp, #8
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
	/**
	 * Set Preset1 temperature for Soldering_Heat_Gun and set Preset1 MODE
	 */
	Soldering_Heat_Gun_Set_MODE_Temperature(self, PRESET1);
 8002e86:	2101      	movs	r1, #1
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f7ff ff83 	bl	8002d94 <Soldering_Heat_Gun_Set_MODE_Temperature>
}
 8002e8e:	bf00      	nop
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <Soldering_Heat_Gun_Set_Preset2_Temperature>:
//---------------------------------------------------------------------------------
void Soldering_Heat_Gun_Set_Preset2_Temperature(struct Soldering_Heat_Gun *self){
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b082      	sub	sp, #8
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
	/**
	 * Set Preset2 temperature for Soldering_Heat_Gun and set Preset2 MODE
	 */
	Soldering_Heat_Gun_Set_MODE_Temperature(self, PRESET2);
 8002e9e:	2102      	movs	r1, #2
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f7ff ff77 	bl	8002d94 <Soldering_Heat_Gun_Set_MODE_Temperature>
}
 8002ea6:	bf00      	nop
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <Soldering_Heat_Gun_Set_Manual_Preset_Temperature_C>:
//---------------------------------------------------------------------------------
void Soldering_Heat_Gun_Set_Manual_Preset_Temperature_C(uint16_t value, struct Soldering_Heat_Gun *self){
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b082      	sub	sp, #8
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	6039      	str	r1, [r7, #0]
 8002eb8:	80fb      	strh	r3, [r7, #6]
	/**
	 * Set manual temperature for Soldering_Heat_Gun in Celsius
	 */
	Set_Manual_Preset_Temperature_C(value, &self->Temperature_Presets_C);
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	f103 0246 	add.w	r2, r3, #70	; 0x46
 8002ec0:	88fb      	ldrh	r3, [r7, #6]
 8002ec2:	4611      	mov	r1, r2
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff fc86 	bl	80027d6 <Set_Manual_Preset_Temperature_C>
}
 8002eca:	bf00      	nop
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <Soldering_Heat_Gun_Set_PID_MAX_Control_Value>:
//---------------------------------------------------------------------------------
void Soldering_Heat_Gun_Set_PID_MAX_Control_Value(uint16_t MAX_Control_Value, struct Soldering_Heat_Gun *self){
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b082      	sub	sp, #8
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	4603      	mov	r3, r0
 8002eda:	6039      	str	r1, [r7, #0]
 8002edc:	80fb      	strh	r3, [r7, #6]
	/**
	 * Set PID's max control value
	 */
	PID_Set_MAX_Control(MAX_Control_Value, &self->PID);
 8002ede:	683a      	ldr	r2, [r7, #0]
 8002ee0:	88fb      	ldrh	r3, [r7, #6]
 8002ee2:	4611      	mov	r1, r2
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff fb2d 	bl	8002544 <PID_Set_MAX_Control>
}
 8002eea:	bf00      	nop
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <Soldering_Heat_Gun_Get_State>:
//---------------------------------------------------------------------------------
enum Soldering_Heat_Gun_State Soldering_Heat_Gun_Get_State(struct Soldering_Heat_Gun *self){
 8002ef2:	b480      	push	{r7}
 8002ef4:	b083      	sub	sp, #12
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
	/**
	 * Return Soldering_Heat_Gun_State (Heat_Gun_OFF Heat_Gun_ON Heat_Gun_COOLING)
	 */
	return self->State;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bc80      	pop	{r7}
 8002f08:	4770      	bx	lr

08002f0a <Soldering_Heat_Gun_Get_Manual_Preset_Temperature_C>:
//---------------------------------------------------------------------------------
uint16_t Soldering_Heat_Gun_Get_Manual_Preset_Temperature_C(struct Soldering_Heat_Gun *self){
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b082      	sub	sp, #8
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
	/*
	 * Return manual preset preset temperature in celsius
	 */
	return Get_Manual_Preset_Temperature_C(&self->Temperature_Presets_C);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	3346      	adds	r3, #70	; 0x46
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7ff fc52 	bl	80027c0 <Get_Manual_Preset_Temperature_C>
 8002f1c:	4603      	mov	r3, r0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <Soldering_Heat_Gun_Get_Temperature_Set_C>:
//---------------------------------------------------------------------------------
uint16_t Soldering_Heat_Gun_Get_Temperature_Set_C(struct Soldering_Heat_Gun *self){
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b082      	sub	sp, #8
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
	/*
	 * Return Current set temperature  preset temperature in celsius
	 */
	return Get_Temperature_Set_C(&self->Temperature_Converting);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	3350      	adds	r3, #80	; 0x50
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7ff fc1b 	bl	800276e <Get_Temperature_Set_C>
 8002f38:	4603      	mov	r3, r0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <Soldering_Heat_Gun_Get_Current_Temperature_C>:
//---------------------------------------------------------------------------------
uint16_t Soldering_Heat_Gun_Get_Current_Temperature_C(struct Soldering_Heat_Gun *self){
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b082      	sub	sp, #8
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
	/*
	 * Return Current temperature temperature in celsius
	 */
	return Get_Current_Temperature_C(&self->Temperature_Converting);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	3350      	adds	r3, #80	; 0x50
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff fc18 	bl	8002784 <Get_Current_Temperature_C>
 8002f54:	4603      	mov	r3, r0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <Soldering_Heat_Gun_Get_PAC_Controll_State>:
//---------------------------------------------------------------------------------
enum PAC_Device_Control_State Soldering_Heat_Gun_Get_PAC_Controll_State(struct Soldering_Heat_Gun *self){
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b082      	sub	sp, #8
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
	/**
	 * return  Soldering_Heat_Gun_Get_PAC_Controll_State(PAC_Control_OFF PAC_Control_ON)
	 */
	return PAC_Device_Control_Get_State(self->PAC_Control);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7ff f9db 	bl	8002326 <PAC_Device_Control_Get_State>
 8002f70:	4603      	mov	r3, r0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <Soldering_Heat_Gun_Get_PAC_Controll_Value>:
//---------------------------------------------------------------------------------
uint16_t Soldering_Heat_Gun_Get_PAC_Controll_Value(struct Soldering_Heat_Gun *self){
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b082      	sub	sp, #8
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
	/**
	 * return Soldering_Heat_Gun PAC's control value
	 */
	return PAC_Device_Control_Get_Control_Value(self->PAC_Control);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7fe fff4 	bl	8001f74 <PAC_Device_Control_Get_Control_Value>
 8002f8c:	4603      	mov	r3, r0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <Soldering_Heat_Gun_it>:
//---------------------------------------------------------------------------------
void Soldering_Heat_Gun_it(struct Soldering_Heat_Gun *self){
 8002f96:	b590      	push	{r4, r7, lr}
 8002f98:	b083      	sub	sp, #12
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
	/**
	 * Main function PID and Filter iteration for Soldering_Heat_Gun
	 * Secondary Cooling Heat GUN
	 */
	if(self->State==Heat_Gun_ON&&PAC_Get_State(self->PAC)==ZCD_STATE_ON){									//if Heat GUN turn ON && ZCD ON
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d12b      	bne.n	8003000 <Soldering_Heat_Gun_it+0x6a>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7ff f9d1 	bl	8002354 <PAC_Get_State>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d123      	bne.n	8003000 <Soldering_Heat_Gun_it+0x6a>
		PID_Set_Curent_Point(&self->PID,(int)Temperatur_Correction(Filter_Combined(&self->Filter), &self->Temperature_Converting, &self->Temperature_Corection_ADC, &self->MODE));
 8002fb8:	687c      	ldr	r4, [r7, #4]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	3324      	adds	r3, #36	; 0x24
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7fe fa93 	bl	80014ea <Filter_Combined>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	3344      	adds	r3, #68	; 0x44
 8002fd8:	f7ff fb2c 	bl	8002634 <Temperatur_Correction>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	4619      	mov	r1, r3
 8002fe0:	4620      	mov	r0, r4
 8002fe2:	f7ff faa0 	bl	8002526 <PID_Set_Curent_Point>
																										//Filter and set current Temperature and Heat_Gun PID IT
		PAC_Device_Control_Set_Control_Value(self->PAC_Control, (uint16_t)PID_it(&self->PID));							//Set PAC control value
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7ff f9fd 	bl	80023ec <PID_it>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	4620      	mov	r0, r4
 8002ffa:	f7ff f813 	bl	8002024 <PAC_Device_Control_Set_Control_Value>
		if(Temperatur_Correction(Filter_Combined(&self->Filter), &self->Temperature_Converting, &self->Temperature_Corection_C, &self->MODE)<=self->Temperature_Coolling.ADC){	//and set current Temperature											//if the current temperature is less than  Temperature_Coolling
			self->State=Heat_Gun_OFF;																	//Turn off heat gun
			HAL_GPIO_WritePin(self->OFF_GPIO, self->OFF_PIN, GPIO_PIN_SET);								// Turn OF FAN rotating
		}
	}
}
 8002ffe:	e02a      	b.n	8003056 <Soldering_Heat_Gun_it+0xc0>
	}else if(self->State==Heat_Gun_COOLING){															//if Heat GUN Cooling
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8003006:	2b02      	cmp	r3, #2
 8003008:	d125      	bne.n	8003056 <Soldering_Heat_Gun_it+0xc0>
		if(Temperatur_Correction(Filter_Combined(&self->Filter), &self->Temperature_Converting, &self->Temperature_Corection_C, &self->MODE)<=self->Temperature_Coolling.ADC){	//and set current Temperature											//if the current temperature is less than  Temperature_Coolling
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	3324      	adds	r3, #36	; 0x24
 800300e:	4618      	mov	r0, r3
 8003010:	f7fe fa6b 	bl	80014ea <Filter_Combined>
 8003014:	4603      	mov	r3, r0
 8003016:	4618      	mov	r0, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f103 0150 	add.w	r1, r3, #80	; 0x50
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f103 025c 	add.w	r2, r3, #92	; 0x5c
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3344      	adds	r3, #68	; 0x44
 8003028:	f7ff fb04 	bl	8002634 <Temperatur_Correction>
 800302c:	4603      	mov	r3, r0
 800302e:	461a      	mov	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8003036:	429a      	cmp	r2, r3
 8003038:	d80d      	bhi.n	8003056 <Soldering_Heat_Gun_it+0xc0>
			self->State=Heat_Gun_OFF;																	//Turn off heat gun
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
			HAL_GPIO_WritePin(self->OFF_GPIO, self->OFF_PIN, GPIO_PIN_SET);								// Turn OF FAN rotating
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800304e:	2201      	movs	r2, #1
 8003050:	4619      	mov	r1, r3
 8003052:	f004 fecc 	bl	8007dee <HAL_GPIO_WritePin>
}
 8003056:	bf00      	nop
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	bd90      	pop	{r4, r7, pc}

0800305e <Soldering_Heat_Gun_Flash_Write_Struct>:
//---------------------------------------------------------------------------------------------------------------------------------// Heat_Gun Flash
uint32_t Soldering_Heat_Gun_Flash_Write_Struct(struct Soldering_Heat_Gun *self,uint32_t addr){
 800305e:	b580      	push	{r7, lr}
 8003060:	b082      	sub	sp, #8
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
 8003066:	6039      	str	r1, [r7, #0]
	/**
	 * Using to write main structure Soldering_Heat_Gun into Flash Memory for an address
	 * return address of the end of writing
	 */
	return Flash_Write (addr, self, sizeof(*self));
 8003068:	229c      	movs	r2, #156	; 0x9c
 800306a:	6879      	ldr	r1, [r7, #4]
 800306c:	6838      	ldr	r0, [r7, #0]
 800306e:	f7fe faa0 	bl	80015b2 <Flash_Write>
 8003072:	4603      	mov	r3, r0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3708      	adds	r7, #8
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <Soldering_Heat_Gun_Flash_Read_Struct>:
//---------------------------------------------------------------------------------
uint8_t Soldering_Heat_Gun_Flash_Read_Struct(struct Soldering_Heat_Gun *self,uint32_t addr){
 800307c:	b580      	push	{r7, lr}
 800307e:	b0aa      	sub	sp, #168	; 0xa8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
	 * Using to read main structure Soldering_Heat_Gun from Flash Memory for an address
	 * return HAL_OK is read  struct was successful  and HAL_ERROR if not
	 * If reading is correct function write all data into a structure
	 */
	struct Soldering_Heat_Gun Read_Struct;
	Flash_Read (addr, &Read_Struct, sizeof(*self));						//Read struct into copy
 8003086:	f107 030c 	add.w	r3, r7, #12
 800308a:	229c      	movs	r2, #156	; 0x9c
 800308c:	4619      	mov	r1, r3
 800308e:	6838      	ldr	r0, [r7, #0]
 8003090:	f7fe facc 	bl	800162c <Flash_Read>
	if(Read_Struct.Flash_Key==Soldering_Heat_Gun_Struct_Key){			//Check if wrote data is a struct
 8003094:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003098:	4a08      	ldr	r2, [pc, #32]	; (80030bc <Soldering_Heat_Gun_Flash_Read_Struct+0x40>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d109      	bne.n	80030b2 <Soldering_Heat_Gun_Flash_Read_Struct+0x36>
		*self=Read_Struct;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f107 030c 	add.w	r3, r7, #12
 80030a6:	229c      	movs	r2, #156	; 0x9c
 80030a8:	4619      	mov	r1, r3
 80030aa:	f008 f831 	bl	800b110 <memcpy>
		return HAL_OK;
 80030ae:	2300      	movs	r3, #0
 80030b0:	e000      	b.n	80030b4 <Soldering_Heat_Gun_Flash_Read_Struct+0x38>
	}else
		return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	37a8      	adds	r7, #168	; 0xa8
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	0801f804 	.word	0x0801f804

080030c0 <Soldering_Heat_Gun_Flash_Read_Manual_Temperature>:
//---------------------------------------------------------------------------------
HAL_StatusTypeDef Soldering_Heat_Gun_Flash_Read_Manual_Temperature(struct Soldering_Heat_Gun *self){
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
	/**
	 * Using to read structure Temperature_Presets from Flash Memory for an Page
	 * return HAL_OK or HAL_ERROR
	 */
	return Flash_Read_Manual_Temperature(&self->Temperature_Presets_C, Soldering_Heat_Gun_Manual_Temperature_Flash_Key, Soldering_Heat_Gun_Manual_Temperature_Flash_Page);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3346      	adds	r3, #70	; 0x46
 80030cc:	227c      	movs	r2, #124	; 0x7c
 80030ce:	4904      	ldr	r1, [pc, #16]	; (80030e0 <Soldering_Heat_Gun_Flash_Read_Manual_Temperature+0x20>)
 80030d0:	4618      	mov	r0, r3
 80030d2:	f000 fa5e 	bl	8003592 <Flash_Read_Manual_Temperature>
 80030d6:	4603      	mov	r3, r0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3708      	adds	r7, #8
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	0801f808 	.word	0x0801f808

080030e4 <Soldering_Heat_Gun_Flash_Reset_Rewrite_Timer>:
//---------------------------------------------------------------------------------
void Soldering_Heat_Gun_Flash_Reset_Rewrite_Timer(struct Soldering_Heat_Gun *self){
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
	/**
	 * This function reset rewrite timer.
	 */
	Flash_Reset_Rewrite_Timer(&self->Flash_Rewrite_Timer);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	3392      	adds	r3, #146	; 0x92
 80030f0:	4618      	mov	r0, r3
 80030f2:	f000 fa7b 	bl	80035ec <Flash_Reset_Rewrite_Timer>
}
 80030f6:	bf00      	nop
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <Soldering_Separator_ini>:
//---------------------------------------------------------------------------------------------------------------------------------//Soldering_Separator
void Soldering_Separator_Flash_Reset_Rewrite_Timer(struct Soldering_Separator *self);
//---------------------------------------------------------------------------------
void Soldering_Separator_ini(struct Soldering_Separator *self){
 80030fe:	b580      	push	{r7, lr}
 8003100:	b082      	sub	sp, #8
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
	/**
	 * Basic initialization of all part for starting all processes
	 */
	PID_ini(&self->PID);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4618      	mov	r0, r3
 800310a:	f7ff f95d 	bl	80023c8 <PID_ini>
	Filter_ini(&self->Filter);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	3324      	adds	r3, #36	; 0x24
 8003112:	4618      	mov	r0, r3
 8003114:	f7fe f984 	bl	8001420 <Filter_ini>
	Flash_Rewrite_Timer_ini(&self->Flash_Rewrite_Timer);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	337e      	adds	r3, #126	; 0x7e
 800311c:	4618      	mov	r0, r3
 800311e:	f000 fac3 	bl	80036a8 <Flash_Rewrite_Timer_ini>
	 Soldering_Separator_Set_Manual_Temperature(self);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f861 	bl	80031ea <Soldering_Separator_Set_Manual_Temperature>
}
 8003128:	bf00      	nop
 800312a:	3708      	adds	r7, #8
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <Soldering_Separator_ON>:
//---------------------------------------------------------------------------------
void Soldering_Separator_ON(struct Soldering_Separator *self){
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
	/**
	 * Turn ON Soldering_Separator
	 */
	PAC_Device_Control_ON(self->PAC_Control);				//Turn ON Phase Angle Control
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800313c:	4618      	mov	r0, r3
 800313e:	f7ff f894 	bl	800226a <PAC_Device_Control_ON>
	PID_ini(&self->PID);							//Reset PID
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4618      	mov	r0, r3
 8003146:	f7ff f93f 	bl	80023c8 <PID_ini>
	Filter_ini(&self->Filter);						//Reset Filter
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	3324      	adds	r3, #36	; 0x24
 800314e:	4618      	mov	r0, r3
 8003150:	f7fe f966 	bl	8001420 <Filter_ini>
	self->State=Separator_ON;						//Set Turn ON State
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
}
 800315c:	bf00      	nop
 800315e:	3708      	adds	r7, #8
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <Soldering_Separator_OFF>:
//---------------------------------------------------------------------------------
void Soldering_Separator_OFF(struct Soldering_Separator *self){
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
	/**
	 * Turn OFF Soldering Separator
	 */
	PAC_Device_Control_OFF(self->PAC_Control); 				// Turn OFF Phase Angle Control
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003170:	4618      	mov	r0, r3
 8003172:	f7ff f8a7 	bl	80022c4 <PAC_Device_Control_OFF>
	self->State=Separator_OFF;						// Set Soldering_Separator Turn OFF State
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
}
 800317e:	bf00      	nop
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <Soldering_Separator_Set_MODE_Temperature>:
//---------------------------------------------------------------------------------
void Soldering_Separator_Set_MODE_Temperature(struct Soldering_Separator *self, enum MODE MODE){
 8003186:	b590      	push	{r4, r7, lr}
 8003188:	b083      	sub	sp, #12
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
 800318e:	460b      	mov	r3, r1
 8003190:	70fb      	strb	r3, [r7, #3]
	/**
	 * Soldering_Separator set temperature for PID based on mode
	 * Needs set mode struct.mode(MANUAL/PRESET1..) Before use
	 */
	self->MODE=MODE;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	78fa      	ldrb	r2, [r7, #3]
 8003196:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	PID_Set_Point(&self->PID, Set_Temperature(&self->Temperature_Presets_C, &self->Temperature_Converting, &self->MODE));
 800319a:	687c      	ldr	r4, [r7, #4]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f103 0046 	add.w	r0, r3, #70	; 0x46
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f103 0150 	add.w	r1, r3, #80	; 0x50
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	3344      	adds	r3, #68	; 0x44
 80031ac:	461a      	mov	r2, r3
 80031ae:	f7ff f9d7 	bl	8002560 <Set_Temperature>
 80031b2:	4603      	mov	r3, r0
 80031b4:	4619      	mov	r1, r3
 80031b6:	4620      	mov	r0, r4
 80031b8:	f7ff f9a6 	bl	8002508 <PID_Set_Point>
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd90      	pop	{r4, r7, pc}

080031c4 <Soldering_Separator_Temperature_Presets_Corection_Converting>:
//---------------------------------------------------------------------------------
void Soldering_Separator_Temperature_Presets_Corection_Converting(struct Soldering_Separator *self){
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
	Temperature_Presets_Corection_Converting(&self->Temperature_Corection_C, &self->Temperature_Corection_ADC, &self->Temperature_Converting);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f103 0168 	add.w	r1, r3, #104	; 0x68
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	3350      	adds	r3, #80	; 0x50
 80031dc:	461a      	mov	r2, r3
 80031de:	f7ff fa83 	bl	80026e8 <Temperature_Presets_Corection_Converting>
}
 80031e2:	bf00      	nop
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <Soldering_Separator_Set_Manual_Temperature>:
//---------------------------------------------------------------------------------
void Soldering_Separator_Set_Manual_Temperature(struct Soldering_Separator *self){
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b082      	sub	sp, #8
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
	/**
	 * Set manual temperature for oldering_Separator and set Manual MODE
	 */
	if(self->Temperature_Presets_C.Prew_Set_Temperature_Manual!=self->Temperature_Presets_C.Manual){
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031fe:	429a      	cmp	r2, r3
 8003200:	d006      	beq.n	8003210 <Soldering_Separator_Set_Manual_Temperature+0x26>
		Soldering_Separator_Set_MODE_Temperature(self, MANUAL);	//Set temperature PID point
 8003202:	2100      	movs	r1, #0
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f7ff ffbe 	bl	8003186 <Soldering_Separator_Set_MODE_Temperature>
		Soldering_Separator_Flash_Reset_Rewrite_Timer(self);	//Reset rewrite Timer
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 f90c 	bl	8003428 <Soldering_Separator_Flash_Reset_Rewrite_Timer>
	}
}
 8003210:	bf00      	nop
 8003212:	3708      	adds	r7, #8
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <Soldering_Separator_Set_Preset1_Temperature>:
//---------------------------------------------------------------------------------
void Soldering_Separator_Set_Preset1_Temperature(struct Soldering_Separator *self){
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
	/**
	 * Set Preset1 temperature for Soldering_Separator and set Preset1 MODE
	 */
	Soldering_Separator_Set_MODE_Temperature(self, PRESET1);
 8003220:	2101      	movs	r1, #1
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7ff ffaf 	bl	8003186 <Soldering_Separator_Set_MODE_Temperature>
}
 8003228:	bf00      	nop
 800322a:	3708      	adds	r7, #8
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <Soldering_Separator_Set_Preset2_Temperature>:
//---------------------------------------------------------------------------------
void Soldering_Separator_Set_Preset2_Temperature(struct Soldering_Separator *self){
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
	/**
	 * Set Preset2 temperature for Soldering_Separator and set Preset1 MODE
	 */
	Soldering_Separator_Set_MODE_Temperature(self, PRESET2);
 8003238:	2102      	movs	r1, #2
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f7ff ffa3 	bl	8003186 <Soldering_Separator_Set_MODE_Temperature>
}
 8003240:	bf00      	nop
 8003242:	3708      	adds	r7, #8
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <Soldering_Separator_Set_Manual_Preset_Temperature_C>:
//---------------------------------------------------------------------------------
void Soldering_Separator_Set_Manual_Preset_Temperature_C(uint16_t value, struct Soldering_Separator *self){
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	4603      	mov	r3, r0
 8003250:	6039      	str	r1, [r7, #0]
 8003252:	80fb      	strh	r3, [r7, #6]
	/**
	 * Set manual preset temperature for Soldering_Separator in Celsius
	 */
	Set_Manual_Preset_Temperature_C(value, &self->Temperature_Presets_C);
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	f103 0246 	add.w	r2, r3, #70	; 0x46
 800325a:	88fb      	ldrh	r3, [r7, #6]
 800325c:	4611      	mov	r1, r2
 800325e:	4618      	mov	r0, r3
 8003260:	f7ff fab9 	bl	80027d6 <Set_Manual_Preset_Temperature_C>
}
 8003264:	bf00      	nop
 8003266:	3708      	adds	r7, #8
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <Soldering_Separator_Get_State>:
//---------------------------------------------------------------------------------
enum Soldering_Separator_State Soldering_Separator_Get_State(struct Soldering_Separator *self){
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
	/**
	 * return Soldering_Separator_State (Separator_OFF,Separator_ON)
	 */
	return self->State;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
}
 800327a:	4618      	mov	r0, r3
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	bc80      	pop	{r7}
 8003282:	4770      	bx	lr

08003284 <Soldering_Separator_Get_Temperature_Set_C>:
//---------------------------------------------------------------------------------
uint16_t Soldering_Separator_Get_Temperature_Set_C(struct Soldering_Separator *self){
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
	/*
	 * Return Current set temperature preset temperature in celsius
	 */
	return Get_Temperature_Set_C(&self->Temperature_Converting);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	3350      	adds	r3, #80	; 0x50
 8003290:	4618      	mov	r0, r3
 8003292:	f7ff fa6c 	bl	800276e <Get_Temperature_Set_C>
 8003296:	4603      	mov	r3, r0
}
 8003298:	4618      	mov	r0, r3
 800329a:	3708      	adds	r7, #8
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <Soldering_Separator_Get_Current_Temperature_C>:
//---------------------------------------------------------------------------------
uint16_t Soldering_Separator_Get_Current_Temperature_C(struct Soldering_Separator *self){
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
	/*
	 * Return Current temperature temperature in celsius
	 */
	return Get_Current_Temperature_C(&self->Temperature_Converting);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	3350      	adds	r3, #80	; 0x50
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7ff fa69 	bl	8002784 <Get_Current_Temperature_C>
 80032b2:	4603      	mov	r3, r0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3708      	adds	r7, #8
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <Soldering_Separator_Get_Manual_Preset_Temperature_C>:
//---------------------------------------------------------------------------------
uint16_t Soldering_Separator_Get_Manual_Preset_Temperature_C(struct Soldering_Separator *self){
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
	/*
	 * Return manual preset temperature in celsius
	 */
	return Get_Manual_Preset_Temperature_C(&self->Temperature_Presets_C);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	3346      	adds	r3, #70	; 0x46
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7ff fa79 	bl	80027c0 <Get_Manual_Preset_Temperature_C>
 80032ce:	4603      	mov	r3, r0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3708      	adds	r7, #8
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <Soldering_Separator_Set_PID_MAX_Control_Value>:
//---------------------------------------------------------------------------------
void Soldering_Separator_Set_PID_MAX_Control_Value(uint16_t MAX_Control_Value, struct Soldering_Separator *self){
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	4603      	mov	r3, r0
 80032e0:	6039      	str	r1, [r7, #0]
 80032e2:	80fb      	strh	r3, [r7, #6]
	/**
	 * Set PID's max control value
	 */
	PID_Set_MAX_Control(MAX_Control_Value, &self->PID);
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	88fb      	ldrh	r3, [r7, #6]
 80032e8:	4611      	mov	r1, r2
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7ff f92a 	bl	8002544 <PID_Set_MAX_Control>
}
 80032f0:	bf00      	nop
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <Soldering_Separator_Get_PAC_Controll_State>:
//---------------------------------------------------------------------------------
enum PAC_Device_Control_State Soldering_Separator_Get_PAC_Controll_State(struct Soldering_Separator *self){
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
	/**
	 * return  Soldering_Heat_Gun_Get_PAC_Controll_State(PAC_Control_OFF PAC_Control_ON)
	 */
	return PAC_Device_Control_Get_State(self->PAC_Control);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003304:	4618      	mov	r0, r3
 8003306:	f7ff f80e 	bl	8002326 <PAC_Device_Control_Get_State>
 800330a:	4603      	mov	r3, r0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <Soldering_Separator_Get_PAC_Controll_Value>:
//---------------------------------------------------------------------------------
uint16_t Soldering_Separator_Get_PAC_Controll_Value(struct Soldering_Separator *self){
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
	/**
	 * return Soldering_Separator PAC's control value
	 */
	return PAC_Device_Control_Get_Control_Value(self->PAC_Control);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003320:	4618      	mov	r0, r3
 8003322:	f7fe fe27 	bl	8001f74 <PAC_Device_Control_Get_Control_Value>
 8003326:	4603      	mov	r3, r0
}
 8003328:	4618      	mov	r0, r3
 800332a:	3708      	adds	r7, #8
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <Soldering_Separator_it>:
//---------------------------------------------------------------------------------
void Soldering_Separator_it(struct Soldering_Separator *self){
 8003330:	b590      	push	{r4, r7, lr}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
	/**
	 * Main function PID and Filter iteration for Soldering_Separator
	 *
	 */
	if(self->State==Separator_ON&&PAC_Get_State(self->PAC)==ZCD_STATE_ON){				//if Heat Soldering_Separator turn ON && ZCD ON
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800333e:	2b01      	cmp	r3, #1
 8003340:	d12a      	bne.n	8003398 <Soldering_Separator_it+0x68>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003346:	4618      	mov	r0, r3
 8003348:	f7ff f804 	bl	8002354 <PAC_Get_State>
 800334c:	4603      	mov	r3, r0
 800334e:	2b01      	cmp	r3, #1
 8003350:	d122      	bne.n	8003398 <Soldering_Separator_it+0x68>
		PID_Set_Curent_Point(&self->PID,(int)Temperatur_Correction(Filter_Combined(&self->Filter), &self->Temperature_Converting, &self->Temperature_Corection_ADC, &self->MODE));
 8003352:	687c      	ldr	r4, [r7, #4]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	3324      	adds	r3, #36	; 0x24
 8003358:	4618      	mov	r0, r3
 800335a:	f7fe f8c6 	bl	80014ea <Filter_Combined>
 800335e:	4603      	mov	r3, r0
 8003360:	4618      	mov	r0, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	3344      	adds	r3, #68	; 0x44
 8003372:	f7ff f95f 	bl	8002634 <Temperatur_Correction>
 8003376:	4603      	mov	r3, r0
 8003378:	4619      	mov	r1, r3
 800337a:	4620      	mov	r0, r4
 800337c:	f7ff f8d3 	bl	8002526 <PID_Set_Curent_Point>
																						//Filter and set current Temperature and Soldering_Separator PID IT;
		PAC_Device_Control_Set_Control_Value(self->PAC_Control, (uint16_t)PID_it(&self->PID));			//Set PAC control value
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4618      	mov	r0, r3
 8003388:	f7ff f830 	bl	80023ec <PID_it>
 800338c:	4603      	mov	r3, r0
 800338e:	b29b      	uxth	r3, r3
 8003390:	4619      	mov	r1, r3
 8003392:	4620      	mov	r0, r4
 8003394:	f7fe fe46 	bl	8002024 <PAC_Device_Control_Set_Control_Value>
	}
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	bd90      	pop	{r4, r7, pc}

080033a0 <Soldering_Separator_Flash_Write_Struct>:
//---------------------------------------------------------------------------------------------------------------------------------// Soldering_Separator Flash
uint32_t Soldering_Separator_Flash_Write_Struct(struct Soldering_Separator *self,uint32_t addr){
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
	/**
	 * Write general Soldering_Separator struct
	 */
	return Flash_Write (addr, self, sizeof(*self));
 80033aa:	2288      	movs	r2, #136	; 0x88
 80033ac:	6879      	ldr	r1, [r7, #4]
 80033ae:	6838      	ldr	r0, [r7, #0]
 80033b0:	f7fe f8ff 	bl	80015b2 <Flash_Write>
 80033b4:	4603      	mov	r3, r0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
	...

080033c0 <Soldering_Separator_Flash_Read_Struct>:
//---------------------------------------------------------------------------------
HAL_StatusTypeDef Soldering_Separator_Flash_Read_Struct(struct Soldering_Separator *self,uint32_t addr){
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b0a4      	sub	sp, #144	; 0x90
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
	/**
	 * Read general Soldering_Separator struct
	 * return HAL_OK or HAL_ERROR
	 */
	struct Soldering_Separator Read_Struct;
	Flash_Read (addr, &Read_Struct, sizeof(*self));
 80033ca:	f107 0308 	add.w	r3, r7, #8
 80033ce:	2288      	movs	r2, #136	; 0x88
 80033d0:	4619      	mov	r1, r3
 80033d2:	6838      	ldr	r0, [r7, #0]
 80033d4:	f7fe f92a 	bl	800162c <Flash_Read>
	if(Read_Struct.Flash_Key==Soldering_Separator_Struct_Key){
 80033d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033dc:	4a08      	ldr	r2, [pc, #32]	; (8003400 <Soldering_Separator_Flash_Read_Struct+0x40>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d109      	bne.n	80033f6 <Soldering_Separator_Flash_Read_Struct+0x36>
		*self=Read_Struct;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f107 0308 	add.w	r3, r7, #8
 80033ea:	2288      	movs	r2, #136	; 0x88
 80033ec:	4619      	mov	r1, r3
 80033ee:	f007 fe8f 	bl	800b110 <memcpy>
		return HAL_OK;
 80033f2:	2300      	movs	r3, #0
 80033f4:	e000      	b.n	80033f8 <Soldering_Separator_Flash_Read_Struct+0x38>
	}else
		return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3790      	adds	r7, #144	; 0x90
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	1801f804 	.word	0x1801f804

08003404 <Soldering_Separator_Flash_Read_Manual_Temperature>:
	 * Write manual Temperature
	 */
	return Write_Manual_Temperature(&self->Temperature_Presets_C, Soldering_Separator_Manual_Temperature_Flash_Key, Soldering_Separator_Manual_Temperature_Flash_Page);
}
//---------------------------------------------------------------------------------
HAL_StatusTypeDef Soldering_Separator_Flash_Read_Manual_Temperature(struct Soldering_Separator *self){
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
	/**
	 * Read manual Temperature
	 * return HAL_OK or HAL_ERROR
	 */
	return Flash_Read_Manual_Temperature(&self->Temperature_Presets_C, Soldering_Separator_Manual_Temperature_Flash_Key, Soldering_Separator_Manual_Temperature_Flash_Page);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	3346      	adds	r3, #70	; 0x46
 8003410:	227b      	movs	r2, #123	; 0x7b
 8003412:	4904      	ldr	r1, [pc, #16]	; (8003424 <Soldering_Separator_Flash_Read_Manual_Temperature+0x20>)
 8003414:	4618      	mov	r0, r3
 8003416:	f000 f8bc 	bl	8003592 <Flash_Read_Manual_Temperature>
 800341a:	4603      	mov	r3, r0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3708      	adds	r7, #8
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	1801f808 	.word	0x1801f808

08003428 <Soldering_Separator_Flash_Reset_Rewrite_Timer>:
//---------------------------------------------------------------------------------
void Soldering_Separator_Flash_Reset_Rewrite_Timer(struct Soldering_Separator *self){
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
	/**
	 * rewrite Soldering_Separator's flash timer
	 */
	Flash_Reset_Rewrite_Timer(&self->Flash_Rewrite_Timer);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	337e      	adds	r3, #126	; 0x7e
 8003434:	4618      	mov	r0, r3
 8003436:	f000 f8d9 	bl	80035ec <Flash_Reset_Rewrite_Timer>
}
 800343a:	bf00      	nop
 800343c:	3708      	adds	r7, #8
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}

08003442 <Soldering_Station_Temperature_Presets_Corection_Converting>:
//---------------------------------------------------------------------------------------------------------------------------------//Soldering_Station
void Soldering_Station_Temperature_Presets_Corection_Converting(struct Soldering_Iron *Soldering_Iron, struct Soldering_Heat_Gun *Soldering_Heat_Gun, struct Soldering_Separator *Soldering_Separator){
 8003442:	b580      	push	{r7, lr}
 8003444:	b084      	sub	sp, #16
 8003446:	af00      	add	r7, sp, #0
 8003448:	60f8      	str	r0, [r7, #12]
 800344a:	60b9      	str	r1, [r7, #8]
 800344c:	607a      	str	r2, [r7, #4]
	/**
	 * Convert Temperature_Presets_Corection_C (celsius) to Temperature_Presets_Corection_ADC For all part of soldering station
	 */
	Solder_Iron_Temperature_Presets_Corection_Converting(Soldering_Iron);
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f7ff faf2 	bl	8002a38 <Solder_Iron_Temperature_Presets_Corection_Converting>
	Soldering_Heat_Gun_Temperature_Presets_Corection_Converting(Soldering_Heat_Gun);
 8003454:	68b8      	ldr	r0, [r7, #8]
 8003456:	f7ff fcbc 	bl	8002dd2 <Soldering_Heat_Gun_Temperature_Presets_Corection_Converting>
	Soldering_Separator_Temperature_Presets_Corection_Converting(Soldering_Separator);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f7ff feb2 	bl	80031c4 <Soldering_Separator_Temperature_Presets_Corection_Converting>

}
 8003460:	bf00      	nop
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <Soldering_Station_Read_Struct>:
//---------------------------------------------------------------------------------------------------------------------------------
HAL_StatusTypeDef Soldering_Station_Read_Struct(struct Soldering_Iron *Soldering_Iron, struct Soldering_Heat_Gun *Soldering_Heat_Gun, struct Soldering_Separator *Soldering_Separator){
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
	/**
	 * 	Read all general structures from flash
	 * 	return HAL_OK or HAL_ERROR
	 */
	HAL_StatusTypeDef Status=HAL_OK;
 8003474:	2300      	movs	r3, #0
 8003476:	75fb      	strb	r3, [r7, #23]
	uint32_t addr = Flash_Base_Addr + Flash_Addr_Page_Size*Soldering_Station_ALL_Struct_Flash_Page;	//computing start read addr
 8003478:	4b13      	ldr	r3, [pc, #76]	; (80034c8 <Soldering_Station_Read_Struct+0x60>)
 800347a:	613b      	str	r3, [r7, #16]
	Status|=Solder_Iron_Flash_Read_Struct(Soldering_Iron,addr);										//read Solder_Iron general struct
 800347c:	6939      	ldr	r1, [r7, #16]
 800347e:	68f8      	ldr	r0, [r7, #12]
 8003480:	f7ff fbe2 	bl	8002c48 <Solder_Iron_Flash_Read_Struct>
 8003484:	4603      	mov	r3, r0
 8003486:	461a      	mov	r2, r3
 8003488:	7dfb      	ldrb	r3, [r7, #23]
 800348a:	4313      	orrs	r3, r2
 800348c:	75fb      	strb	r3, [r7, #23]
	addr+=sizeof(*Soldering_Iron)+2;																//Address shift for prew read struct
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	33ae      	adds	r3, #174	; 0xae
 8003492:	613b      	str	r3, [r7, #16]
	Status|=Soldering_Heat_Gun_Flash_Read_Struct(Soldering_Heat_Gun,addr);							//read Soldering_Heat_Gun general struct
 8003494:	6939      	ldr	r1, [r7, #16]
 8003496:	68b8      	ldr	r0, [r7, #8]
 8003498:	f7ff fdf0 	bl	800307c <Soldering_Heat_Gun_Flash_Read_Struct>
 800349c:	4603      	mov	r3, r0
 800349e:	461a      	mov	r2, r3
 80034a0:	7dfb      	ldrb	r3, [r7, #23]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	75fb      	strb	r3, [r7, #23]
	addr+=sizeof(*Soldering_Heat_Gun)+2;															//Address shift for prew read struct
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	339e      	adds	r3, #158	; 0x9e
 80034aa:	613b      	str	r3, [r7, #16]
	Status|=Soldering_Separator_Flash_Read_Struct(Soldering_Separator,addr);						//read Soldering_Separator general struct
 80034ac:	6939      	ldr	r1, [r7, #16]
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7ff ff86 	bl	80033c0 <Soldering_Separator_Flash_Read_Struct>
 80034b4:	4603      	mov	r3, r0
 80034b6:	461a      	mov	r2, r3
 80034b8:	7dfb      	ldrb	r3, [r7, #23]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	75fb      	strb	r3, [r7, #23]

	return Status;
 80034be:	7dfb      	ldrb	r3, [r7, #23]
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3718      	adds	r7, #24
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	0801f800 	.word	0x0801f800

080034cc <Soldering_Station_Write_Struct>:
//---------------------------------------------------------------------------------
HAL_StatusTypeDef Soldering_Station_Write_Struct(struct Soldering_Iron *Soldering_Iron, struct Soldering_Heat_Gun *Soldering_Heat_Gun, struct Soldering_Separator *Soldering_Separator){
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
	/**
	 *	Write all general structures from flash
	 * 	return HAL_OK or HAL_ERROR
	 */
	HAL_StatusTypeDef Status=HAL_OK;
 80034d8:	2300      	movs	r3, #0
 80034da:	75fb      	strb	r3, [r7, #23]

	uint32_t addr = Flash_Base_Addr + Flash_Addr_Page_Size*Soldering_Station_ALL_Struct_Flash_Page;	//computing start read addr
 80034dc:	4b19      	ldr	r3, [pc, #100]	; (8003544 <Soldering_Station_Write_Struct+0x78>)
 80034de:	613b      	str	r3, [r7, #16]

	Flash_Erase (addr,sizeof(*Soldering_Iron)+2+sizeof(*Soldering_Heat_Gun)+2+sizeof(*Soldering_Separator));
 80034e0:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 80034e4:	6938      	ldr	r0, [r7, #16]
 80034e6:	f7fe f835 	bl	8001554 <Flash_Erase>

	if(Solder_Iron_Flash_Write_Struct(Soldering_Iron,addr)==HAL_ERROR)					//write Solder_Iron general struct
 80034ea:	6939      	ldr	r1, [r7, #16]
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f7ff fb9c 	bl	8002c2a <Solder_Iron_Flash_Write_Struct>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d103      	bne.n	8003500 <Soldering_Station_Write_Struct+0x34>
		Status|=HAL_ERROR;
 80034f8:	7dfb      	ldrb	r3, [r7, #23]
 80034fa:	f043 0301 	orr.w	r3, r3, #1
 80034fe:	75fb      	strb	r3, [r7, #23]
	addr+=sizeof(*Soldering_Iron)+2;													//Address shift for prew read struct
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	33ae      	adds	r3, #174	; 0xae
 8003504:	613b      	str	r3, [r7, #16]
	if(Soldering_Heat_Gun_Flash_Write_Struct(Soldering_Heat_Gun,addr)==HAL_ERROR)		//write Soldering_Heat_Gun general struct
 8003506:	6939      	ldr	r1, [r7, #16]
 8003508:	68b8      	ldr	r0, [r7, #8]
 800350a:	f7ff fda8 	bl	800305e <Soldering_Heat_Gun_Flash_Write_Struct>
 800350e:	4603      	mov	r3, r0
 8003510:	2b01      	cmp	r3, #1
 8003512:	d103      	bne.n	800351c <Soldering_Station_Write_Struct+0x50>
		Status|=HAL_ERROR;
 8003514:	7dfb      	ldrb	r3, [r7, #23]
 8003516:	f043 0301 	orr.w	r3, r3, #1
 800351a:	75fb      	strb	r3, [r7, #23]
	addr+=sizeof(*Soldering_Heat_Gun)+2;												//Address shift for prew read struct
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	339e      	adds	r3, #158	; 0x9e
 8003520:	613b      	str	r3, [r7, #16]
	if(Soldering_Separator_Flash_Write_Struct(Soldering_Separator,addr)==HAL_ERROR)		//write Soldering_Separator general struct
 8003522:	6939      	ldr	r1, [r7, #16]
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f7ff ff3b 	bl	80033a0 <Soldering_Separator_Flash_Write_Struct>
 800352a:	4603      	mov	r3, r0
 800352c:	2b01      	cmp	r3, #1
 800352e:	d103      	bne.n	8003538 <Soldering_Station_Write_Struct+0x6c>
		Status|=HAL_ERROR;
 8003530:	7dfb      	ldrb	r3, [r7, #23]
 8003532:	f043 0301 	orr.w	r3, r3, #1
 8003536:	75fb      	strb	r3, [r7, #23]

	return Status;
 8003538:	7dfb      	ldrb	r3, [r7, #23]
}
 800353a:	4618      	mov	r0, r3
 800353c:	3718      	adds	r7, #24
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	0801f800 	.word	0x0801f800

08003548 <Write_Manual_Temperature>:
//---------------------------------------------------------------------------------
uint32_t Write_Manual_Temperature(struct Temperature_Presets *self, uint32_t Flash_Key, uint8_t Flash_Page){
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	4613      	mov	r3, r2
 8003554:	71fb      	strb	r3, [r7, #7]
	/**
	 * write manual temperature parameter
	 * return end address
	 */
	uint32_t addr = Flash_Base_Addr + Flash_Addr_Page_Size*Flash_Page;	//computing start write addr
 8003556:	79fb      	ldrb	r3, [r7, #7]
 8003558:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800355c:	029b      	lsls	r3, r3, #10
 800355e:	617b      	str	r3, [r7, #20]

	Flash_Erase (addr,sizeof(self->Manual)+sizeof(Flash_Key));			//Erese PAGE
 8003560:	2106      	movs	r1, #6
 8003562:	6978      	ldr	r0, [r7, #20]
 8003564:	f7fd fff6 	bl	8001554 <Flash_Erase>

	Flash_Write (addr,&self->Manual, sizeof(self->Manual));				//Write manual temperature parameter
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2202      	movs	r2, #2
 800356c:	4619      	mov	r1, r3
 800356e:	6978      	ldr	r0, [r7, #20]
 8003570:	f7fe f81f 	bl	80015b2 <Flash_Write>

	addr+=sizeof(self->Manual)+2;										//Address shift for prew read struct
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	3304      	adds	r3, #4
 8003578:	617b      	str	r3, [r7, #20]

	return Flash_Write (addr,&Flash_Key, sizeof(Flash_Key));			//Write Flash_Key
 800357a:	f107 0308 	add.w	r3, r7, #8
 800357e:	2204      	movs	r2, #4
 8003580:	4619      	mov	r1, r3
 8003582:	6978      	ldr	r0, [r7, #20]
 8003584:	f7fe f815 	bl	80015b2 <Flash_Write>
 8003588:	4603      	mov	r3, r0

}
 800358a:	4618      	mov	r0, r3
 800358c:	3718      	adds	r7, #24
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <Flash_Read_Manual_Temperature>:
//---------------------------------------------------------------------------------
HAL_StatusTypeDef Flash_Read_Manual_Temperature(struct Temperature_Presets *self, uint32_t Flash_Key, uint8_t Flash_Page){
 8003592:	b580      	push	{r7, lr}
 8003594:	b088      	sub	sp, #32
 8003596:	af00      	add	r7, sp, #0
 8003598:	60f8      	str	r0, [r7, #12]
 800359a:	60b9      	str	r1, [r7, #8]
 800359c:	4613      	mov	r3, r2
 800359e:	71fb      	strb	r3, [r7, #7]
	/**
	 * Read Manual_Temperature parameter from flash
	 * return HAL_OK or HAL_ERROR
	 */
	uint32_t addr = Flash_Base_Addr + Flash_Addr_Page_Size*Flash_Page;		//computing start read addr
 80035a0:	79fb      	ldrb	r3, [r7, #7]
 80035a2:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80035a6:	029b      	lsls	r3, r3, #10
 80035a8:	61fb      	str	r3, [r7, #28]
	uint32_t Flash_Read_Key=0;
 80035aa:	2300      	movs	r3, #0
 80035ac:	61bb      	str	r3, [r7, #24]
	uint16_t Temperature;

	Flash_Read (addr, &Temperature, sizeof(self->Manual));					//read manual temperature
 80035ae:	f107 0316 	add.w	r3, r7, #22
 80035b2:	2202      	movs	r2, #2
 80035b4:	4619      	mov	r1, r3
 80035b6:	69f8      	ldr	r0, [r7, #28]
 80035b8:	f7fe f838 	bl	800162c <Flash_Read>
	addr+=sizeof(self->Manual)+2;											//Address shift for prew read struct
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	3304      	adds	r3, #4
 80035c0:	61fb      	str	r3, [r7, #28]
	Flash_Read (addr, &Flash_Read_Key,  sizeof(Flash_Read_Key));			//Read flash_key;
 80035c2:	f107 0318 	add.w	r3, r7, #24
 80035c6:	2204      	movs	r2, #4
 80035c8:	4619      	mov	r1, r3
 80035ca:	69f8      	ldr	r0, [r7, #28]
 80035cc:	f7fe f82e 	bl	800162c <Flash_Read>

	if(Flash_Read_Key==Flash_Key){											//if flash key was read success
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	68ba      	ldr	r2, [r7, #8]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d104      	bne.n	80035e2 <Flash_Read_Manual_Temperature+0x50>
		self->Manual=Temperature;											//write temperature into struct
 80035d8:	8afa      	ldrh	r2, [r7, #22]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	801a      	strh	r2, [r3, #0]
		return HAL_OK;
 80035de:	2300      	movs	r3, #0
 80035e0:	e000      	b.n	80035e4 <Flash_Read_Manual_Temperature+0x52>
	}
	else
		return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3720      	adds	r7, #32
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <Flash_Reset_Rewrite_Timer>:
//---------------------------------------------------------------------------------
void Flash_Reset_Rewrite_Timer(struct Flash_Rewrite_Timer *self){
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
	/**
	 * Reset Rewrite_Timer
	 */
	self->Flash_Timer_Count=0;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	801a      	strh	r2, [r3, #0]
	self->Flash_Timer_State=Flash_Timer_State_ON;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	709a      	strb	r2, [r3, #2]
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	bc80      	pop	{r7}
 8003608:	4770      	bx	lr

0800360a <Flash_Rewrite_Timer_it>:
//---------------------------------------------------------------------------------
void Flash_Rewrite_Timer_it(struct Flash_Rewrite_Timer *Flash_Rewrite_Timer, struct Temperature_Presets *Temperature_Presets,uint32_t Flash_Key, uint8_t Flash_Page){
 800360a:	b580      	push	{r7, lr}
 800360c:	b084      	sub	sp, #16
 800360e:	af00      	add	r7, sp, #0
 8003610:	60f8      	str	r0, [r7, #12]
 8003612:	60b9      	str	r1, [r7, #8]
 8003614:	607a      	str	r2, [r7, #4]
 8003616:	70fb      	strb	r3, [r7, #3]
	/**
	 * Falsh rewrite timer iteration
	 */
	if(Flash_Rewrite_Timer->Flash_Timer_State==Flash_Timer_State_ON){					//if timer turn ON
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	789b      	ldrb	r3, [r3, #2]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d110      	bne.n	8003642 <Flash_Rewrite_Timer_it+0x38>
		if(Flash_Rewrite_Timer->Flash_Timer_Count++==Flash_Rewrite_Timer_Max_Count){	//count++ & equal Flash_Rewrite_Timer_Max_Count
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	881b      	ldrh	r3, [r3, #0]
 8003624:	1c5a      	adds	r2, r3, #1
 8003626:	b291      	uxth	r1, r2
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	8011      	strh	r1, [r2, #0]
 800362c:	2bc8      	cmp	r3, #200	; 0xc8
 800362e:	d108      	bne.n	8003642 <Flash_Rewrite_Timer_it+0x38>
			Write_Manual_Temperature(Temperature_Presets, Flash_Key, Flash_Page);		//write manual temperature
 8003630:	78fb      	ldrb	r3, [r7, #3]
 8003632:	461a      	mov	r2, r3
 8003634:	6879      	ldr	r1, [r7, #4]
 8003636:	68b8      	ldr	r0, [r7, #8]
 8003638:	f7ff ff86 	bl	8003548 <Write_Manual_Temperature>
			Flash_Rewrite_Timer->Flash_Timer_State=Flash_Timer_State_OFF;				//Turn OFF timer
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	709a      	strb	r2, [r3, #2]
		}
	}
}
 8003642:	bf00      	nop
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
	...

0800364c <Flash_Rewrite_Timer_tim_it>:
//---------------------------------------------------------------------------------
void Flash_Rewrite_Timer_tim_it(struct Soldering_Iron *Soldering_Iron, struct Soldering_Heat_Gun *Soldering_Heat_Gun, struct Soldering_Separator *Soldering_Separator){
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
	/**
	 * Falsh rewrite timer iteration for ALL Soldering_Station parts
	 */
	Flash_Rewrite_Timer_it(&Soldering_Iron->Flash_Rewrite_Timer, &Soldering_Iron->Temperature_Presets_C, Soldering_Iron_Manual_Temperature_Flash_Key, Soldering_Iron_Manual_Temperature_Flash_Page);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f103 00a2 	add.w	r0, r3, #162	; 0xa2
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f103 0146 	add.w	r1, r3, #70	; 0x46
 8003664:	237d      	movs	r3, #125	; 0x7d
 8003666:	4a0d      	ldr	r2, [pc, #52]	; (800369c <Flash_Rewrite_Timer_tim_it+0x50>)
 8003668:	f7ff ffcf 	bl	800360a <Flash_Rewrite_Timer_it>
	Flash_Rewrite_Timer_it(&Soldering_Heat_Gun->Flash_Rewrite_Timer, &Soldering_Heat_Gun->Temperature_Presets_C, Soldering_Heat_Gun_Manual_Temperature_Flash_Key, Soldering_Heat_Gun_Manual_Temperature_Flash_Page);
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	f103 0092 	add.w	r0, r3, #146	; 0x92
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	f103 0146 	add.w	r1, r3, #70	; 0x46
 8003678:	237c      	movs	r3, #124	; 0x7c
 800367a:	4a09      	ldr	r2, [pc, #36]	; (80036a0 <Flash_Rewrite_Timer_tim_it+0x54>)
 800367c:	f7ff ffc5 	bl	800360a <Flash_Rewrite_Timer_it>
	Flash_Rewrite_Timer_it(&Soldering_Separator->Flash_Rewrite_Timer, &Soldering_Separator->Temperature_Presets_C, Soldering_Separator_Manual_Temperature_Flash_Key, Soldering_Separator_Manual_Temperature_Flash_Page);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f103 007e 	add.w	r0, r3, #126	; 0x7e
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f103 0146 	add.w	r1, r3, #70	; 0x46
 800368c:	237b      	movs	r3, #123	; 0x7b
 800368e:	4a05      	ldr	r2, [pc, #20]	; (80036a4 <Flash_Rewrite_Timer_tim_it+0x58>)
 8003690:	f7ff ffbb 	bl	800360a <Flash_Rewrite_Timer_it>
}
 8003694:	bf00      	nop
 8003696:	3710      	adds	r7, #16
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	0801f806 	.word	0x0801f806
 80036a0:	0801f808 	.word	0x0801f808
 80036a4:	1801f808 	.word	0x1801f808

080036a8 <Flash_Rewrite_Timer_ini>:
//---------------------------------------------------------------------------------
void Flash_Rewrite_Timer_ini(struct Flash_Rewrite_Timer *self){
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
	/**
	 * Rewrite timer ini
	 */
	self->Flash_Timer_Count=0;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	801a      	strh	r2, [r3, #0]
	self->Flash_Timer_State=Flash_Timer_State_OFF;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	709a      	strb	r2, [r3, #2]
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bc80      	pop	{r7}
 80036c4:	4770      	bx	lr
	...

080036c8 <UI_Draw_Parmetr_Ptr>:
#include "UI_Base_Func.h"
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void UI_Draw_Parmetr_Ptr(void *value, uint8_t x, uint8_t y, enum Type mode){
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	4608      	mov	r0, r1
 80036d2:	4611      	mov	r1, r2
 80036d4:	461a      	mov	r2, r3
 80036d6:	4603      	mov	r3, r0
 80036d8:	70fb      	strb	r3, [r7, #3]
 80036da:	460b      	mov	r3, r1
 80036dc:	70bb      	strb	r3, [r7, #2]
 80036de:	4613      	mov	r3, r2
 80036e0:	707b      	strb	r3, [r7, #1]
	/**
	 *	Displays the value on the display based on the variable pointer, type of variable and the x y position
	 *	Types INT, UIT8, UINT16, BOOL
	 */
	switch(mode){
 80036e2:	787b      	ldrb	r3, [r7, #1]
 80036e4:	2b03      	cmp	r3, #3
 80036e6:	f200 8179 	bhi.w	80039dc <UI_Draw_Parmetr_Ptr+0x314>
 80036ea:	a201      	add	r2, pc, #4	; (adr r2, 80036f0 <UI_Draw_Parmetr_Ptr+0x28>)
 80036ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f0:	08003701 	.word	0x08003701
 80036f4:	08003819 	.word	0x08003819
 80036f8:	080038e1 	.word	0x080038e1
 80036fc:	080039ab 	.word	0x080039ab
		case INT:
			int num_int=*(int*)value;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	617b      	str	r3, [r7, #20]
			if(num_int<0){
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	2b00      	cmp	r3, #0
 800370a:	da0c      	bge.n	8003726 <UI_Draw_Parmetr_Ptr+0x5e>
				OLED_Set_Char_Cursor(&OLED1,x-1,y);
 800370c:	78fb      	ldrb	r3, [r7, #3]
 800370e:	b29b      	uxth	r3, r3
 8003710:	3b01      	subs	r3, #1
 8003712:	b29b      	uxth	r3, r3
 8003714:	78ba      	ldrb	r2, [r7, #2]
 8003716:	4619      	mov	r1, r3
 8003718:	48b2      	ldr	r0, [pc, #712]	; (80039e4 <UI_Draw_Parmetr_Ptr+0x31c>)
 800371a:	f7fe f853 	bl	80017c4 <OLED_Set_Char_Cursor>
				OLED_Send_Char(&OLED1,'-');
 800371e:	212d      	movs	r1, #45	; 0x2d
 8003720:	48b0      	ldr	r0, [pc, #704]	; (80039e4 <UI_Draw_Parmetr_Ptr+0x31c>)
 8003722:	f7fe f8b3 	bl	800188c <OLED_Send_Char>
			}
			OLED_Set_Char_Cursor(&OLED1,x-1,y);
 8003726:	78fb      	ldrb	r3, [r7, #3]
 8003728:	b29b      	uxth	r3, r3
 800372a:	3b01      	subs	r3, #1
 800372c:	b29b      	uxth	r3, r3
 800372e:	78ba      	ldrb	r2, [r7, #2]
 8003730:	4619      	mov	r1, r3
 8003732:	48ac      	ldr	r0, [pc, #688]	; (80039e4 <UI_Draw_Parmetr_Ptr+0x31c>)
 8003734:	f7fe f846 	bl	80017c4 <OLED_Set_Char_Cursor>
			if(num_int<0){
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	2b00      	cmp	r3, #0
 800373c:	da09      	bge.n	8003752 <UI_Draw_Parmetr_Ptr+0x8a>
				OLED_Send_Char(&OLED1,'-');
 800373e:	212d      	movs	r1, #45	; 0x2d
 8003740:	48a8      	ldr	r0, [pc, #672]	; (80039e4 <UI_Draw_Parmetr_Ptr+0x31c>)
 8003742:	f7fe f8a3 	bl	800188c <OLED_Send_Char>
				num_int=abs(num_int);
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	2b00      	cmp	r3, #0
 800374a:	bfb8      	it	lt
 800374c:	425b      	neglt	r3, r3
 800374e:	617b      	str	r3, [r7, #20]
 8003750:	e003      	b.n	800375a <UI_Draw_Parmetr_Ptr+0x92>
			}
			else
				OLED_Send_Char(&OLED1,' ');
 8003752:	2120      	movs	r1, #32
 8003754:	48a3      	ldr	r0, [pc, #652]	; (80039e4 <UI_Draw_Parmetr_Ptr+0x31c>)
 8003756:	f7fe f899 	bl	800188c <OLED_Send_Char>
			OLED_Send_Char(&OLED1,(num_int/1000)%10+'0');
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	4aa2      	ldr	r2, [pc, #648]	; (80039e8 <UI_Draw_Parmetr_Ptr+0x320>)
 800375e:	fb82 1203 	smull	r1, r2, r2, r3
 8003762:	1192      	asrs	r2, r2, #6
 8003764:	17db      	asrs	r3, r3, #31
 8003766:	1ad2      	subs	r2, r2, r3
 8003768:	4ba0      	ldr	r3, [pc, #640]	; (80039ec <UI_Draw_Parmetr_Ptr+0x324>)
 800376a:	fb83 1302 	smull	r1, r3, r3, r2
 800376e:	1099      	asrs	r1, r3, #2
 8003770:	17d3      	asrs	r3, r2, #31
 8003772:	1ac9      	subs	r1, r1, r3
 8003774:	460b      	mov	r3, r1
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	440b      	add	r3, r1
 800377a:	005b      	lsls	r3, r3, #1
 800377c:	1ad1      	subs	r1, r2, r3
 800377e:	b2cb      	uxtb	r3, r1
 8003780:	3330      	adds	r3, #48	; 0x30
 8003782:	b2db      	uxtb	r3, r3
 8003784:	4619      	mov	r1, r3
 8003786:	4897      	ldr	r0, [pc, #604]	; (80039e4 <UI_Draw_Parmetr_Ptr+0x31c>)
 8003788:	f7fe f880 	bl	800188c <OLED_Send_Char>
			OLED_Send_Char(&OLED1,(num_int/100)%10+'0');
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	4a98      	ldr	r2, [pc, #608]	; (80039f0 <UI_Draw_Parmetr_Ptr+0x328>)
 8003790:	fb82 1203 	smull	r1, r2, r2, r3
 8003794:	1152      	asrs	r2, r2, #5
 8003796:	17db      	asrs	r3, r3, #31
 8003798:	1ad2      	subs	r2, r2, r3
 800379a:	4b94      	ldr	r3, [pc, #592]	; (80039ec <UI_Draw_Parmetr_Ptr+0x324>)
 800379c:	fb83 1302 	smull	r1, r3, r3, r2
 80037a0:	1099      	asrs	r1, r3, #2
 80037a2:	17d3      	asrs	r3, r2, #31
 80037a4:	1ac9      	subs	r1, r1, r3
 80037a6:	460b      	mov	r3, r1
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	440b      	add	r3, r1
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	1ad1      	subs	r1, r2, r3
 80037b0:	b2cb      	uxtb	r3, r1
 80037b2:	3330      	adds	r3, #48	; 0x30
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	4619      	mov	r1, r3
 80037b8:	488a      	ldr	r0, [pc, #552]	; (80039e4 <UI_Draw_Parmetr_Ptr+0x31c>)
 80037ba:	f7fe f867 	bl	800188c <OLED_Send_Char>
			OLED_Send_Char(&OLED1,(num_int/10)%10+'0');
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	4a8a      	ldr	r2, [pc, #552]	; (80039ec <UI_Draw_Parmetr_Ptr+0x324>)
 80037c2:	fb82 1203 	smull	r1, r2, r2, r3
 80037c6:	1092      	asrs	r2, r2, #2
 80037c8:	17db      	asrs	r3, r3, #31
 80037ca:	1ad2      	subs	r2, r2, r3
 80037cc:	4b87      	ldr	r3, [pc, #540]	; (80039ec <UI_Draw_Parmetr_Ptr+0x324>)
 80037ce:	fb83 1302 	smull	r1, r3, r3, r2
 80037d2:	1099      	asrs	r1, r3, #2
 80037d4:	17d3      	asrs	r3, r2, #31
 80037d6:	1ac9      	subs	r1, r1, r3
 80037d8:	460b      	mov	r3, r1
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	440b      	add	r3, r1
 80037de:	005b      	lsls	r3, r3, #1
 80037e0:	1ad1      	subs	r1, r2, r3
 80037e2:	b2cb      	uxtb	r3, r1
 80037e4:	3330      	adds	r3, #48	; 0x30
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	4619      	mov	r1, r3
 80037ea:	487e      	ldr	r0, [pc, #504]	; (80039e4 <UI_Draw_Parmetr_Ptr+0x31c>)
 80037ec:	f7fe f84e 	bl	800188c <OLED_Send_Char>
			OLED_Send_Char(&OLED1,(num_int)%10+'0');
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	4b7e      	ldr	r3, [pc, #504]	; (80039ec <UI_Draw_Parmetr_Ptr+0x324>)
 80037f4:	fb83 1302 	smull	r1, r3, r3, r2
 80037f8:	1099      	asrs	r1, r3, #2
 80037fa:	17d3      	asrs	r3, r2, #31
 80037fc:	1ac9      	subs	r1, r1, r3
 80037fe:	460b      	mov	r3, r1
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	440b      	add	r3, r1
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	1ad1      	subs	r1, r2, r3
 8003808:	b2cb      	uxtb	r3, r1
 800380a:	3330      	adds	r3, #48	; 0x30
 800380c:	b2db      	uxtb	r3, r3
 800380e:	4619      	mov	r1, r3
 8003810:	4874      	ldr	r0, [pc, #464]	; (80039e4 <UI_Draw_Parmetr_Ptr+0x31c>)
 8003812:	f7fe f83b 	bl	800188c <OLED_Send_Char>
		break;
 8003816:	e0e1      	b.n	80039dc <UI_Draw_Parmetr_Ptr+0x314>
		case UINT8:
			uint8_t *num_8=value;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	60bb      	str	r3, [r7, #8]
			OLED_Set_Char_Cursor(&OLED1,x,y);
 800381c:	78fb      	ldrb	r3, [r7, #3]
 800381e:	b29b      	uxth	r3, r3
 8003820:	78ba      	ldrb	r2, [r7, #2]
 8003822:	4619      	mov	r1, r3
 8003824:	486f      	ldr	r0, [pc, #444]	; (80039e4 <UI_Draw_Parmetr_Ptr+0x31c>)
 8003826:	f7fd ffcd 	bl	80017c4 <OLED_Set_Char_Cursor>
			OLED_Send_Char(&OLED1,(*num_8/1000)%10+'0');
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	4a6e      	ldr	r2, [pc, #440]	; (80039e8 <UI_Draw_Parmetr_Ptr+0x320>)
 8003830:	fb82 1203 	smull	r1, r2, r2, r3
 8003834:	1192      	asrs	r2, r2, #6
 8003836:	17db      	asrs	r3, r3, #31
 8003838:	1ad2      	subs	r2, r2, r3
 800383a:	4b6c      	ldr	r3, [pc, #432]	; (80039ec <UI_Draw_Parmetr_Ptr+0x324>)
 800383c:	fb83 1302 	smull	r1, r3, r3, r2
 8003840:	1099      	asrs	r1, r3, #2
 8003842:	17d3      	asrs	r3, r2, #31
 8003844:	1ac9      	subs	r1, r1, r3
 8003846:	460b      	mov	r3, r1
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	440b      	add	r3, r1
 800384c:	005b      	lsls	r3, r3, #1
 800384e:	1ad1      	subs	r1, r2, r3
 8003850:	b2cb      	uxtb	r3, r1
 8003852:	3330      	adds	r3, #48	; 0x30
 8003854:	b2db      	uxtb	r3, r3
 8003856:	4619      	mov	r1, r3
 8003858:	4862      	ldr	r0, [pc, #392]	; (80039e4 <UI_Draw_Parmetr_Ptr+0x31c>)
 800385a:	f7fe f817 	bl	800188c <OLED_Send_Char>
			OLED_Send_Char(&OLED1,(*num_8/100)%10+'0');
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	4a63      	ldr	r2, [pc, #396]	; (80039f0 <UI_Draw_Parmetr_Ptr+0x328>)
 8003864:	fba2 2303 	umull	r2, r3, r2, r3
 8003868:	095b      	lsrs	r3, r3, #5
 800386a:	b2da      	uxtb	r2, r3
 800386c:	4b61      	ldr	r3, [pc, #388]	; (80039f4 <UI_Draw_Parmetr_Ptr+0x32c>)
 800386e:	fba3 1302 	umull	r1, r3, r3, r2
 8003872:	08d9      	lsrs	r1, r3, #3
 8003874:	460b      	mov	r3, r1
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	440b      	add	r3, r1
 800387a:	005b      	lsls	r3, r3, #1
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	b2db      	uxtb	r3, r3
 8003880:	3330      	adds	r3, #48	; 0x30
 8003882:	b2db      	uxtb	r3, r3
 8003884:	4619      	mov	r1, r3
 8003886:	4857      	ldr	r0, [pc, #348]	; (80039e4 <UI_Draw_Parmetr_Ptr+0x31c>)
 8003888:	f7fe f800 	bl	800188c <OLED_Send_Char>
			OLED_Send_Char(&OLED1,(*num_8/10)%10+'0');
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	4a58      	ldr	r2, [pc, #352]	; (80039f4 <UI_Draw_Parmetr_Ptr+0x32c>)
 8003892:	fba2 2303 	umull	r2, r3, r2, r3
 8003896:	08db      	lsrs	r3, r3, #3
 8003898:	b2da      	uxtb	r2, r3
 800389a:	4b56      	ldr	r3, [pc, #344]	; (80039f4 <UI_Draw_Parmetr_Ptr+0x32c>)
 800389c:	fba3 1302 	umull	r1, r3, r3, r2
 80038a0:	08d9      	lsrs	r1, r3, #3
 80038a2:	460b      	mov	r3, r1
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	440b      	add	r3, r1
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	3330      	adds	r3, #48	; 0x30
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	4619      	mov	r1, r3
 80038b4:	484b      	ldr	r0, [pc, #300]	; (80039e4 <UI_Draw_Parmetr_Ptr+0x31c>)
 80038b6:	f7fd ffe9 	bl	800188c <OLED_Send_Char>
			OLED_Send_Char(&OLED1,(*num_8)%10+'0');
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	781a      	ldrb	r2, [r3, #0]
 80038be:	4b4d      	ldr	r3, [pc, #308]	; (80039f4 <UI_Draw_Parmetr_Ptr+0x32c>)
 80038c0:	fba3 1302 	umull	r1, r3, r3, r2
 80038c4:	08d9      	lsrs	r1, r3, #3
 80038c6:	460b      	mov	r3, r1
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	440b      	add	r3, r1
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	3330      	adds	r3, #48	; 0x30
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	4619      	mov	r1, r3
 80038d8:	4842      	ldr	r0, [pc, #264]	; (80039e4 <UI_Draw_Parmetr_Ptr+0x31c>)
 80038da:	f7fd ffd7 	bl	800188c <OLED_Send_Char>
		break;
 80038de:	e07d      	b.n	80039dc <UI_Draw_Parmetr_Ptr+0x314>
		case UINT16:
			uint16_t *num_16=value;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	60fb      	str	r3, [r7, #12]
			OLED_Set_Char_Cursor(&OLED1,x,y);
 80038e4:	78fb      	ldrb	r3, [r7, #3]
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	78ba      	ldrb	r2, [r7, #2]
 80038ea:	4619      	mov	r1, r3
 80038ec:	483d      	ldr	r0, [pc, #244]	; (80039e4 <UI_Draw_Parmetr_Ptr+0x31c>)
 80038ee:	f7fd ff69 	bl	80017c4 <OLED_Set_Char_Cursor>
			OLED_Send_Char(&OLED1,(*num_16/1000)%10+'0');
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	881b      	ldrh	r3, [r3, #0]
 80038f6:	4a3c      	ldr	r2, [pc, #240]	; (80039e8 <UI_Draw_Parmetr_Ptr+0x320>)
 80038f8:	fba2 2303 	umull	r2, r3, r2, r3
 80038fc:	099b      	lsrs	r3, r3, #6
 80038fe:	b29a      	uxth	r2, r3
 8003900:	4b3c      	ldr	r3, [pc, #240]	; (80039f4 <UI_Draw_Parmetr_Ptr+0x32c>)
 8003902:	fba3 1302 	umull	r1, r3, r3, r2
 8003906:	08d9      	lsrs	r1, r3, #3
 8003908:	460b      	mov	r3, r1
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	440b      	add	r3, r1
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	b29b      	uxth	r3, r3
 8003914:	b2db      	uxtb	r3, r3
 8003916:	3330      	adds	r3, #48	; 0x30
 8003918:	b2db      	uxtb	r3, r3
 800391a:	4619      	mov	r1, r3
 800391c:	4831      	ldr	r0, [pc, #196]	; (80039e4 <UI_Draw_Parmetr_Ptr+0x31c>)
 800391e:	f7fd ffb5 	bl	800188c <OLED_Send_Char>
			OLED_Send_Char(&OLED1,(*num_16/100)%10+'0');
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	881b      	ldrh	r3, [r3, #0]
 8003926:	4a32      	ldr	r2, [pc, #200]	; (80039f0 <UI_Draw_Parmetr_Ptr+0x328>)
 8003928:	fba2 2303 	umull	r2, r3, r2, r3
 800392c:	095b      	lsrs	r3, r3, #5
 800392e:	b29a      	uxth	r2, r3
 8003930:	4b30      	ldr	r3, [pc, #192]	; (80039f4 <UI_Draw_Parmetr_Ptr+0x32c>)
 8003932:	fba3 1302 	umull	r1, r3, r3, r2
 8003936:	08d9      	lsrs	r1, r3, #3
 8003938:	460b      	mov	r3, r1
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	440b      	add	r3, r1
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	b29b      	uxth	r3, r3
 8003944:	b2db      	uxtb	r3, r3
 8003946:	3330      	adds	r3, #48	; 0x30
 8003948:	b2db      	uxtb	r3, r3
 800394a:	4619      	mov	r1, r3
 800394c:	4825      	ldr	r0, [pc, #148]	; (80039e4 <UI_Draw_Parmetr_Ptr+0x31c>)
 800394e:	f7fd ff9d 	bl	800188c <OLED_Send_Char>
			OLED_Send_Char(&OLED1,(*num_16/10)%10+'0');
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	881b      	ldrh	r3, [r3, #0]
 8003956:	4a27      	ldr	r2, [pc, #156]	; (80039f4 <UI_Draw_Parmetr_Ptr+0x32c>)
 8003958:	fba2 2303 	umull	r2, r3, r2, r3
 800395c:	08db      	lsrs	r3, r3, #3
 800395e:	b29a      	uxth	r2, r3
 8003960:	4b24      	ldr	r3, [pc, #144]	; (80039f4 <UI_Draw_Parmetr_Ptr+0x32c>)
 8003962:	fba3 1302 	umull	r1, r3, r3, r2
 8003966:	08d9      	lsrs	r1, r3, #3
 8003968:	460b      	mov	r3, r1
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	440b      	add	r3, r1
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	b29b      	uxth	r3, r3
 8003974:	b2db      	uxtb	r3, r3
 8003976:	3330      	adds	r3, #48	; 0x30
 8003978:	b2db      	uxtb	r3, r3
 800397a:	4619      	mov	r1, r3
 800397c:	4819      	ldr	r0, [pc, #100]	; (80039e4 <UI_Draw_Parmetr_Ptr+0x31c>)
 800397e:	f7fd ff85 	bl	800188c <OLED_Send_Char>
			OLED_Send_Char(&OLED1,(*num_16)%10+'0');
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	881a      	ldrh	r2, [r3, #0]
 8003986:	4b1b      	ldr	r3, [pc, #108]	; (80039f4 <UI_Draw_Parmetr_Ptr+0x32c>)
 8003988:	fba3 1302 	umull	r1, r3, r3, r2
 800398c:	08d9      	lsrs	r1, r3, #3
 800398e:	460b      	mov	r3, r1
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	440b      	add	r3, r1
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	b29b      	uxth	r3, r3
 800399a:	b2db      	uxtb	r3, r3
 800399c:	3330      	adds	r3, #48	; 0x30
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	4619      	mov	r1, r3
 80039a2:	4810      	ldr	r0, [pc, #64]	; (80039e4 <UI_Draw_Parmetr_Ptr+0x31c>)
 80039a4:	f7fd ff72 	bl	800188c <OLED_Send_Char>
		break;
 80039a8:	e018      	b.n	80039dc <UI_Draw_Parmetr_Ptr+0x314>
		case BOOL:
			uint8_t *num=value;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	613b      	str	r3, [r7, #16]
			OLED_Set_Char_Cursor(&OLED1,x,y);
 80039ae:	78fb      	ldrb	r3, [r7, #3]
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	78ba      	ldrb	r2, [r7, #2]
 80039b4:	4619      	mov	r1, r3
 80039b6:	480b      	ldr	r0, [pc, #44]	; (80039e4 <UI_Draw_Parmetr_Ptr+0x31c>)
 80039b8:	f7fd ff04 	bl	80017c4 <OLED_Set_Char_Cursor>
			if(*num==1){
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d105      	bne.n	80039d0 <UI_Draw_Parmetr_Ptr+0x308>
				OLED_Send_String(&OLED1,"ON ", Direct_Display_MODE);
 80039c4:	2200      	movs	r2, #0
 80039c6:	490c      	ldr	r1, [pc, #48]	; (80039f8 <UI_Draw_Parmetr_Ptr+0x330>)
 80039c8:	4806      	ldr	r0, [pc, #24]	; (80039e4 <UI_Draw_Parmetr_Ptr+0x31c>)
 80039ca:	f7fd ffc7 	bl	800195c <OLED_Send_String>
			}else
				OLED_Send_String(&OLED1,"OFF", Direct_Display_MODE);
		break;
 80039ce:	e004      	b.n	80039da <UI_Draw_Parmetr_Ptr+0x312>
				OLED_Send_String(&OLED1,"OFF", Direct_Display_MODE);
 80039d0:	2200      	movs	r2, #0
 80039d2:	490a      	ldr	r1, [pc, #40]	; (80039fc <UI_Draw_Parmetr_Ptr+0x334>)
 80039d4:	4803      	ldr	r0, [pc, #12]	; (80039e4 <UI_Draw_Parmetr_Ptr+0x31c>)
 80039d6:	f7fd ffc1 	bl	800195c <OLED_Send_String>
		break;
 80039da:	bf00      	nop
	}
}
 80039dc:	bf00      	nop
 80039de:	3718      	adds	r7, #24
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	2000049c 	.word	0x2000049c
 80039e8:	10624dd3 	.word	0x10624dd3
 80039ec:	66666667 	.word	0x66666667
 80039f0:	51eb851f 	.word	0x51eb851f
 80039f4:	cccccccd 	.word	0xcccccccd
 80039f8:	0800b1d4 	.word	0x0800b1d4
 80039fc:	0800b1d8 	.word	0x0800b1d8

08003a00 <UI_Draw_Parmetr>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void UI_Draw_Parmetr(int value, uint8_t x,uint8_t y,enum Type mode){
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	4608      	mov	r0, r1
 8003a0a:	4611      	mov	r1, r2
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	4603      	mov	r3, r0
 8003a10:	70fb      	strb	r3, [r7, #3]
 8003a12:	460b      	mov	r3, r1
 8003a14:	70bb      	strb	r3, [r7, #2]
 8003a16:	4613      	mov	r3, r2
 8003a18:	707b      	strb	r3, [r7, #1]
	/**
	 * Displays the value on the display based on the variable, type of variable and the x y position
	 */
	UI_Draw_Parmetr_Ptr(&value, x, y, mode);
 8003a1a:	787b      	ldrb	r3, [r7, #1]
 8003a1c:	78ba      	ldrb	r2, [r7, #2]
 8003a1e:	78f9      	ldrb	r1, [r7, #3]
 8003a20:	1d38      	adds	r0, r7, #4
 8003a22:	f7ff fe51 	bl	80036c8 <UI_Draw_Parmetr_Ptr>
}
 8003a26:	bf00      	nop
 8003a28:	3708      	adds	r7, #8
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
	...

08003a30 <UI_Draw_String>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void UI_Draw_String(char *str, uint8_t x, uint8_t y, enum Display_Write_MODE Display_Write_MODE){
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	4608      	mov	r0, r1
 8003a3a:	4611      	mov	r1, r2
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	4603      	mov	r3, r0
 8003a40:	70fb      	strb	r3, [r7, #3]
 8003a42:	460b      	mov	r3, r1
 8003a44:	70bb      	strb	r3, [r7, #2]
 8003a46:	4613      	mov	r3, r2
 8003a48:	707b      	strb	r3, [r7, #1]
	/**
	 * Displays the string on the display based x y position and Display_Write_MODE(direct inverse)
	 */
	OLED_Set_Char_Cursor(&OLED1,x,y);					//Sets position on display from what will be display based on ASII symbols size
 8003a4a:	78fb      	ldrb	r3, [r7, #3]
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	78ba      	ldrb	r2, [r7, #2]
 8003a50:	4619      	mov	r1, r3
 8003a52:	4806      	ldr	r0, [pc, #24]	; (8003a6c <UI_Draw_String+0x3c>)
 8003a54:	f7fd feb6 	bl	80017c4 <OLED_Set_Char_Cursor>
	OLED_Send_String(&OLED1, str, Display_Write_MODE);	//Display string on the Display
 8003a58:	787b      	ldrb	r3, [r7, #1]
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	6879      	ldr	r1, [r7, #4]
 8003a5e:	4803      	ldr	r0, [pc, #12]	; (8003a6c <UI_Draw_String+0x3c>)
 8003a60:	f7fd ff7c 	bl	800195c <OLED_Send_String>

}
 8003a64:	bf00      	nop
 8003a66:	3708      	adds	r7, #8
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	2000049c 	.word	0x2000049c

08003a70 <UI_Set_Cursor>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void UI_Set_Cursor(uint8_t x, uint8_t y){
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	4603      	mov	r3, r0
 8003a78:	460a      	mov	r2, r1
 8003a7a:	71fb      	strb	r3, [r7, #7]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	71bb      	strb	r3, [r7, #6]
	/**
	 * Set symbol cursor(>) based on x, y position and clear prew cursor position
	 */
	static uint8_t Prew_Pos_x=0,Prew_Pos_y=0;
		OLED_Set_Char_Cursor(&OLED1,Prew_Pos_x,Prew_Pos_y);
 8003a80:	4b10      	ldr	r3, [pc, #64]	; (8003ac4 <UI_Set_Cursor+0x54>)
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	4a10      	ldr	r2, [pc, #64]	; (8003ac8 <UI_Set_Cursor+0x58>)
 8003a88:	7812      	ldrb	r2, [r2, #0]
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	480f      	ldr	r0, [pc, #60]	; (8003acc <UI_Set_Cursor+0x5c>)
 8003a8e:	f7fd fe99 	bl	80017c4 <OLED_Set_Char_Cursor>
		OLED_Send_Char(&OLED1,' ');
 8003a92:	2120      	movs	r1, #32
 8003a94:	480d      	ldr	r0, [pc, #52]	; (8003acc <UI_Set_Cursor+0x5c>)
 8003a96:	f7fd fef9 	bl	800188c <OLED_Send_Char>
		OLED_Set_Char_Cursor(&OLED1,x,y);
 8003a9a:	79fb      	ldrb	r3, [r7, #7]
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	79ba      	ldrb	r2, [r7, #6]
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	480a      	ldr	r0, [pc, #40]	; (8003acc <UI_Set_Cursor+0x5c>)
 8003aa4:	f7fd fe8e 	bl	80017c4 <OLED_Set_Char_Cursor>
		OLED_Send_Char(&OLED1,'>');
 8003aa8:	213e      	movs	r1, #62	; 0x3e
 8003aaa:	4808      	ldr	r0, [pc, #32]	; (8003acc <UI_Set_Cursor+0x5c>)
 8003aac:	f7fd feee 	bl	800188c <OLED_Send_Char>
		Prew_Pos_x=x;
 8003ab0:	4a04      	ldr	r2, [pc, #16]	; (8003ac4 <UI_Set_Cursor+0x54>)
 8003ab2:	79fb      	ldrb	r3, [r7, #7]
 8003ab4:	7013      	strb	r3, [r2, #0]
		Prew_Pos_y=y;
 8003ab6:	4a04      	ldr	r2, [pc, #16]	; (8003ac8 <UI_Set_Cursor+0x58>)
 8003ab8:	79bb      	ldrb	r3, [r7, #6]
 8003aba:	7013      	strb	r3, [r2, #0]
}
 8003abc:	bf00      	nop
 8003abe:	3708      	adds	r7, #8
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	200002b5 	.word	0x200002b5
 8003ac8:	200002b6 	.word	0x200002b6
 8003acc:	2000049c 	.word	0x2000049c

08003ad0 <UI_Clear_Line>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void UI_Clear_Line(uint8_t y){
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	71fb      	strb	r3, [r7, #7]
	/**
	 * Clear row on display based on y position
	 */
	OLED_Clear_Line(&OLED1,y);
 8003ada:	79fb      	ldrb	r3, [r7, #7]
 8003adc:	4619      	mov	r1, r3
 8003ade:	4803      	ldr	r0, [pc, #12]	; (8003aec <UI_Clear_Line+0x1c>)
 8003ae0:	f7fd ff14 	bl	800190c <OLED_Clear_Line>
}
 8003ae4:	bf00      	nop
 8003ae6:	3708      	adds	r7, #8
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	2000049c 	.word	0x2000049c

08003af0 <UI_Change_Value_Ptr>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void UI_Change_Value_Ptr(void *parametr, uint8_t step, enum Type mode, uint16_t min, uint16_t max, struct Encoder *Encoder){
 8003af0:	b590      	push	{r4, r7, lr}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	4608      	mov	r0, r1
 8003afa:	4611      	mov	r1, r2
 8003afc:	461a      	mov	r2, r3
 8003afe:	4603      	mov	r3, r0
 8003b00:	70fb      	strb	r3, [r7, #3]
 8003b02:	460b      	mov	r3, r1
 8003b04:	70bb      	strb	r3, [r7, #2]
 8003b06:	4613      	mov	r3, r2
 8003b08:	803b      	strh	r3, [r7, #0]
	/**
	 * Change the value based on the variable pointer, step, type of variable and encoder buffer
	 */
	switch(mode){
 8003b0a:	78bb      	ldrb	r3, [r7, #2]
 8003b0c:	2b03      	cmp	r3, #3
 8003b0e:	f200 8098 	bhi.w	8003c42 <UI_Change_Value_Ptr+0x152>
 8003b12:	a201      	add	r2, pc, #4	; (adr r2, 8003b18 <UI_Change_Value_Ptr+0x28>)
 8003b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b18:	08003b29 	.word	0x08003b29
 8003b1c:	08003b43 	.word	0x08003b43
 8003b20:	08003bb1 	.word	0x08003bb1
 8003b24:	08003c1b 	.word	0x08003c1b
		case INT:
			*(int*)parametr+=Encoder_Get_Rotary_Switch_Buffer(Encoder)*step;
 8003b28:	69f8      	ldr	r0, [r7, #28]
 8003b2a:	f7fd fbd0 	bl	80012ce <Encoder_Get_Rotary_Switch_Buffer>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	78fb      	ldrb	r3, [r7, #3]
 8003b32:	fb03 f202 	mul.w	r2, r3, r2
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	441a      	add	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	601a      	str	r2, [r3, #0]
		break;
 8003b40:	e07f      	b.n	8003c42 <UI_Change_Value_Ptr+0x152>
		case UINT8:
			if((*(uint8_t*)parametr+Encoder_Get_Rotary_Switch_Buffer(Encoder)*step)<min)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	461c      	mov	r4, r3
 8003b48:	69f8      	ldr	r0, [r7, #28]
 8003b4a:	f7fd fbc0 	bl	80012ce <Encoder_Get_Rotary_Switch_Buffer>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	78fb      	ldrb	r3, [r7, #3]
 8003b52:	fb02 f303 	mul.w	r3, r2, r3
 8003b56:	18e2      	adds	r2, r4, r3
 8003b58:	883b      	ldrh	r3, [r7, #0]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	da04      	bge.n	8003b68 <UI_Change_Value_Ptr+0x78>
				*(uint8_t*)parametr=(uint8_t)min;
 8003b5e:	883b      	ldrh	r3, [r7, #0]
 8003b60:	b2da      	uxtb	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	701a      	strb	r2, [r3, #0]
			else if ((*(uint8_t*)parametr+Encoder_Get_Rotary_Switch_Buffer(Encoder)*step)>max)
				*(uint8_t*)parametr=(uint8_t)max;
			else
				*(uint8_t*)parametr+=(uint8_t)Encoder_Get_Rotary_Switch_Buffer(Encoder)*step;
		break;
 8003b66:	e06c      	b.n	8003c42 <UI_Change_Value_Ptr+0x152>
			else if ((*(uint8_t*)parametr+Encoder_Get_Rotary_Switch_Buffer(Encoder)*step)>max)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	461c      	mov	r4, r3
 8003b6e:	69f8      	ldr	r0, [r7, #28]
 8003b70:	f7fd fbad 	bl	80012ce <Encoder_Get_Rotary_Switch_Buffer>
 8003b74:	4602      	mov	r2, r0
 8003b76:	78fb      	ldrb	r3, [r7, #3]
 8003b78:	fb02 f303 	mul.w	r3, r2, r3
 8003b7c:	18e2      	adds	r2, r4, r3
 8003b7e:	8b3b      	ldrh	r3, [r7, #24]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	dd04      	ble.n	8003b8e <UI_Change_Value_Ptr+0x9e>
				*(uint8_t*)parametr=(uint8_t)max;
 8003b84:	8b3b      	ldrh	r3, [r7, #24]
 8003b86:	b2da      	uxtb	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	701a      	strb	r2, [r3, #0]
		break;
 8003b8c:	e059      	b.n	8003c42 <UI_Change_Value_Ptr+0x152>
				*(uint8_t*)parametr+=(uint8_t)Encoder_Get_Rotary_Switch_Buffer(Encoder)*step;
 8003b8e:	69f8      	ldr	r0, [r7, #28]
 8003b90:	f7fd fb9d 	bl	80012ce <Encoder_Get_Rotary_Switch_Buffer>
 8003b94:	4603      	mov	r3, r0
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	461a      	mov	r2, r3
 8003b9a:	78fb      	ldrb	r3, [r7, #3]
 8003b9c:	fb03 f102 	mul.w	r1, r3, r2
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	781a      	ldrb	r2, [r3, #0]
 8003ba4:	b2cb      	uxtb	r3, r1
 8003ba6:	4413      	add	r3, r2
 8003ba8:	b2da      	uxtb	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	701a      	strb	r2, [r3, #0]
		break;
 8003bae:	e048      	b.n	8003c42 <UI_Change_Value_Ptr+0x152>
		case UINT16:
			if((*(uint16_t*)parametr+Encoder_Get_Rotary_Switch_Buffer(Encoder)*step)<min)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	881b      	ldrh	r3, [r3, #0]
 8003bb4:	461c      	mov	r4, r3
 8003bb6:	69f8      	ldr	r0, [r7, #28]
 8003bb8:	f7fd fb89 	bl	80012ce <Encoder_Get_Rotary_Switch_Buffer>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	78fb      	ldrb	r3, [r7, #3]
 8003bc0:	fb02 f303 	mul.w	r3, r2, r3
 8003bc4:	18e2      	adds	r2, r4, r3
 8003bc6:	883b      	ldrh	r3, [r7, #0]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	da03      	bge.n	8003bd4 <UI_Change_Value_Ptr+0xe4>
				*(uint16_t*)parametr=(uint16_t)min;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	883a      	ldrh	r2, [r7, #0]
 8003bd0:	801a      	strh	r2, [r3, #0]
			else if ((*(uint16_t*)parametr+Encoder_Get_Rotary_Switch_Buffer(Encoder)*step)>max)
				*(uint16_t*)parametr=(uint16_t)max;
			else
				*(uint16_t*)parametr+=(uint16_t)Encoder_Get_Rotary_Switch_Buffer(Encoder)*step;
		break;
 8003bd2:	e036      	b.n	8003c42 <UI_Change_Value_Ptr+0x152>
			else if ((*(uint16_t*)parametr+Encoder_Get_Rotary_Switch_Buffer(Encoder)*step)>max)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	881b      	ldrh	r3, [r3, #0]
 8003bd8:	461c      	mov	r4, r3
 8003bda:	69f8      	ldr	r0, [r7, #28]
 8003bdc:	f7fd fb77 	bl	80012ce <Encoder_Get_Rotary_Switch_Buffer>
 8003be0:	4602      	mov	r2, r0
 8003be2:	78fb      	ldrb	r3, [r7, #3]
 8003be4:	fb02 f303 	mul.w	r3, r2, r3
 8003be8:	18e2      	adds	r2, r4, r3
 8003bea:	8b3b      	ldrh	r3, [r7, #24]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	dd03      	ble.n	8003bf8 <UI_Change_Value_Ptr+0x108>
				*(uint16_t*)parametr=(uint16_t)max;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	8b3a      	ldrh	r2, [r7, #24]
 8003bf4:	801a      	strh	r2, [r3, #0]
		break;
 8003bf6:	e024      	b.n	8003c42 <UI_Change_Value_Ptr+0x152>
				*(uint16_t*)parametr+=(uint16_t)Encoder_Get_Rotary_Switch_Buffer(Encoder)*step;
 8003bf8:	69f8      	ldr	r0, [r7, #28]
 8003bfa:	f7fd fb68 	bl	80012ce <Encoder_Get_Rotary_Switch_Buffer>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	461a      	mov	r2, r3
 8003c04:	78fb      	ldrb	r3, [r7, #3]
 8003c06:	fb03 f102 	mul.w	r1, r3, r2
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	881a      	ldrh	r2, [r3, #0]
 8003c0e:	b28b      	uxth	r3, r1
 8003c10:	4413      	add	r3, r2
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	801a      	strh	r2, [r3, #0]
		break;
 8003c18:	e013      	b.n	8003c42 <UI_Change_Value_Ptr+0x152>
		case BOOL:
			if(Encoder_Get_Rotary_Switch_Buffer(Encoder)>0)
 8003c1a:	69f8      	ldr	r0, [r7, #28]
 8003c1c:	f7fd fb57 	bl	80012ce <Encoder_Get_Rotary_Switch_Buffer>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	dd03      	ble.n	8003c2e <UI_Change_Value_Ptr+0x13e>
				*(uint8_t*)parametr=1;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	701a      	strb	r2, [r3, #0]
			else if(Encoder_Get_Rotary_Switch_Buffer(Encoder)<0)
				*(uint8_t*)parametr=0;
		break;
 8003c2c:	e008      	b.n	8003c40 <UI_Change_Value_Ptr+0x150>
			else if(Encoder_Get_Rotary_Switch_Buffer(Encoder)<0)
 8003c2e:	69f8      	ldr	r0, [r7, #28]
 8003c30:	f7fd fb4d 	bl	80012ce <Encoder_Get_Rotary_Switch_Buffer>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	da02      	bge.n	8003c40 <UI_Change_Value_Ptr+0x150>
				*(uint8_t*)parametr=0;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	701a      	strb	r2, [r3, #0]
		break;
 8003c40:	bf00      	nop
	}
	Encoder_Reset_Rotary_Switch_Buffer(Encoder);
 8003c42:	69f8      	ldr	r0, [r7, #28]
 8003c44:	f7fd fb37 	bl	80012b6 <Encoder_Reset_Rotary_Switch_Buffer>
}
 8003c48:	bf00      	nop
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd90      	pop	{r4, r7, pc}

08003c50 <UI_Change_Value>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
int UI_Change_Value(int parametr, uint8_t step, enum Type mode, uint16_t min, uint16_t max, struct Encoder *Encoder){
 8003c50:	b590      	push	{r4, r7, lr}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af02      	add	r7, sp, #8
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	4608      	mov	r0, r1
 8003c5a:	4611      	mov	r1, r2
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	4603      	mov	r3, r0
 8003c60:	70fb      	strb	r3, [r7, #3]
 8003c62:	460b      	mov	r3, r1
 8003c64:	70bb      	strb	r3, [r7, #2]
 8003c66:	4613      	mov	r3, r2
 8003c68:	803b      	strh	r3, [r7, #0]
	/**
	 * Change the value based on the variable, step, type of variable and encoder buffer
	 * return Changed Variable
	 */
	UI_Change_Value_Ptr(&parametr, step, mode, min, max, Encoder);
 8003c6a:	883c      	ldrh	r4, [r7, #0]
 8003c6c:	78ba      	ldrb	r2, [r7, #2]
 8003c6e:	78f9      	ldrb	r1, [r7, #3]
 8003c70:	1d38      	adds	r0, r7, #4
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	9301      	str	r3, [sp, #4]
 8003c76:	8b3b      	ldrh	r3, [r7, #24]
 8003c78:	9300      	str	r3, [sp, #0]
 8003c7a:	4623      	mov	r3, r4
 8003c7c:	f7ff ff38 	bl	8003af0 <UI_Change_Value_Ptr>
	return parametr;
 8003c80:	687b      	ldr	r3, [r7, #4]
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd90      	pop	{r4, r7, pc}
	...

08003c8c <UI_Draw_String_Center>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void UI_Draw_String_Center(char *str, uint8_t y, enum Display_Write_MODE Display_Write_MODE){
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	460b      	mov	r3, r1
 8003c96:	70fb      	strb	r3, [r7, #3]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	70bb      	strb	r3, [r7, #2]
	/**
	 * Draw string in center of row based on row position and Display_Write_MODE
	 */
	uint8_t str_len =strlen(str);						//Get string length
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f7fc fa57 	bl	8000150 <strlen>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	73fb      	strb	r3, [r7, #15]
	uint8_t center= (OLED_Colume_Number-str_len*6)/2;	//Counting start position x to draw string
 8003ca6:	7bfa      	ldrb	r2, [r7, #15]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	0092      	lsls	r2, r2, #2
 8003cac:	1a9b      	subs	r3, r3, r2
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	337d      	adds	r3, #125	; 0x7d
 8003cb2:	0fda      	lsrs	r2, r3, #31
 8003cb4:	4413      	add	r3, r2
 8003cb6:	105b      	asrs	r3, r3, #1
 8003cb8:	73bb      	strb	r3, [r7, #14]
	OLED_Set_Cursor(&OLED1, center, y);					//Sets position on display from what will be display
 8003cba:	7bbb      	ldrb	r3, [r7, #14]
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	78fa      	ldrb	r2, [r7, #3]
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	4806      	ldr	r0, [pc, #24]	; (8003cdc <UI_Draw_String_Center+0x50>)
 8003cc4:	f7fd fd54 	bl	8001770 <OLED_Set_Cursor>
	OLED_Send_String(&OLED1, str, Display_Write_MODE);	//Display string on display
 8003cc8:	78bb      	ldrb	r3, [r7, #2]
 8003cca:	461a      	mov	r2, r3
 8003ccc:	6879      	ldr	r1, [r7, #4]
 8003cce:	4803      	ldr	r0, [pc, #12]	; (8003cdc <UI_Draw_String_Center+0x50>)
 8003cd0:	f7fd fe44 	bl	800195c <OLED_Send_String>
}
 8003cd4:	bf00      	nop
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	2000049c 	.word	0x2000049c

08003ce0 <UI_Encoder_Reset_Rotary_Switch_Buffer>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void UI_Encoder_Reset_Rotary_Switch_Buffer(struct Encoder *Encoder){
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
	/**
	 * Reset Encoder_Rotary switch buffer
	 */
	Encoder_Reset_Rotary_Switch_Buffer(Encoder);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f7fd fae4 	bl	80012b6 <Encoder_Reset_Rotary_Switch_Buffer>
}
 8003cee:	bf00      	nop
 8003cf0:	3708      	adds	r7, #8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <UI_Encoder_Reset_Button_State>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void UI_Encoder_Reset_Button_State(struct Encoder *Encoder){
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b082      	sub	sp, #8
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
	/**
	 * Reset Encoder_Rotary button buffer
	 */
	Encoder_Reset_Button_State(Encoder);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f7fd faf0 	bl	80012e4 <Encoder_Reset_Button_State>
}
 8003d04:	bf00      	nop
 8003d06:	3708      	adds	r7, #8
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <Face_UI_Draw_Name_List>:
#include "UI_Face.h"

//--------------------------------------------------------------------------------------------------------------------------------------------------------
void Face_UI_Draw_Name_List(){
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	af00      	add	r7, sp, #0
	UI_Clear_Line(0);
 8003d10:	2000      	movs	r0, #0
 8003d12:	f7ff fedd 	bl	8003ad0 <UI_Clear_Line>
	UI_Draw_String(" SoldIron ", 0, 0, Inverse_Display_MODE);
 8003d16:	2301      	movs	r3, #1
 8003d18:	2200      	movs	r2, #0
 8003d1a:	2100      	movs	r1, #0
 8003d1c:	4835      	ldr	r0, [pc, #212]	; (8003df4 <Face_UI_Draw_Name_List+0xe8>)
 8003d1e:	f7ff fe87 	bl	8003a30 <UI_Draw_String>
	UI_Clear_Line(1);
 8003d22:	2001      	movs	r0, #1
 8003d24:	f7ff fed4 	bl	8003ad0 <UI_Clear_Line>
	UI_Draw_String("State:", 0, 1, Direct_Display_MODE);
 8003d28:	2300      	movs	r3, #0
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	2100      	movs	r1, #0
 8003d2e:	4832      	ldr	r0, [pc, #200]	; (8003df8 <Face_UI_Draw_Name_List+0xec>)
 8003d30:	f7ff fe7e 	bl	8003a30 <UI_Draw_String>
	UI_Clear_Line(2);
 8003d34:	2002      	movs	r0, #2
 8003d36:	f7ff fecb 	bl	8003ad0 <UI_Clear_Line>
	UI_Draw_String("TSetC:", 0, 2, Direct_Display_MODE);
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	2202      	movs	r2, #2
 8003d3e:	2100      	movs	r1, #0
 8003d40:	482e      	ldr	r0, [pc, #184]	; (8003dfc <Face_UI_Draw_Name_List+0xf0>)
 8003d42:	f7ff fe75 	bl	8003a30 <UI_Draw_String>
	UI_Clear_Line(3);
 8003d46:	2003      	movs	r0, #3
 8003d48:	f7ff fec2 	bl	8003ad0 <UI_Clear_Line>
	UI_Draw_String("TNowC:", 0, 3, Direct_Display_MODE);
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	2203      	movs	r2, #3
 8003d50:	2100      	movs	r1, #0
 8003d52:	482b      	ldr	r0, [pc, #172]	; (8003e00 <Face_UI_Draw_Name_List+0xf4>)
 8003d54:	f7ff fe6c 	bl	8003a30 <UI_Draw_String>
	UI_Clear_Line(4);
 8003d58:	2004      	movs	r0, #4
 8003d5a:	f7ff feb9 	bl	8003ad0 <UI_Clear_Line>
	UI_Draw_String("AdPow:", 0, 4, Direct_Display_MODE);
 8003d5e:	2300      	movs	r3, #0
 8003d60:	2204      	movs	r2, #4
 8003d62:	2100      	movs	r1, #0
 8003d64:	4827      	ldr	r0, [pc, #156]	; (8003e04 <Face_UI_Draw_Name_List+0xf8>)
 8003d66:	f7ff fe63 	bl	8003a30 <UI_Draw_String>
	UI_Clear_Line(5);
 8003d6a:	2005      	movs	r0, #5
 8003d6c:	f7ff feb0 	bl	8003ad0 <UI_Clear_Line>


	UI_Draw_String("Freq:", 0, 5, Inverse_Display_MODE);
 8003d70:	2301      	movs	r3, #1
 8003d72:	2205      	movs	r2, #5
 8003d74:	2100      	movs	r1, #0
 8003d76:	4824      	ldr	r0, [pc, #144]	; (8003e08 <Face_UI_Draw_Name_List+0xfc>)
 8003d78:	f7ff fe5a 	bl	8003a30 <UI_Draw_String>
	UI_Clear_Line(6);
 8003d7c:	2006      	movs	r0, #6
 8003d7e:	f7ff fea7 	bl	8003ad0 <UI_Clear_Line>
	UI_Draw_String("Count:", 0, 6, Direct_Display_MODE);
 8003d82:	2300      	movs	r3, #0
 8003d84:	2206      	movs	r2, #6
 8003d86:	2100      	movs	r1, #0
 8003d88:	4820      	ldr	r0, [pc, #128]	; (8003e0c <Face_UI_Draw_Name_List+0x100>)
 8003d8a:	f7ff fe51 	bl	8003a30 <UI_Draw_String>


	UI_Draw_String(" SoldFAN ", 11, 0, Inverse_Display_MODE);
 8003d8e:	2301      	movs	r3, #1
 8003d90:	2200      	movs	r2, #0
 8003d92:	210b      	movs	r1, #11
 8003d94:	481e      	ldr	r0, [pc, #120]	; (8003e10 <Face_UI_Draw_Name_List+0x104>)
 8003d96:	f7ff fe4b 	bl	8003a30 <UI_Draw_String>
	UI_Draw_String("State:", 11, 1, Direct_Display_MODE);
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	210b      	movs	r1, #11
 8003da0:	4815      	ldr	r0, [pc, #84]	; (8003df8 <Face_UI_Draw_Name_List+0xec>)
 8003da2:	f7ff fe45 	bl	8003a30 <UI_Draw_String>
	UI_Draw_String("TSetC:", 11, 2, Direct_Display_MODE);
 8003da6:	2300      	movs	r3, #0
 8003da8:	2202      	movs	r2, #2
 8003daa:	210b      	movs	r1, #11
 8003dac:	4813      	ldr	r0, [pc, #76]	; (8003dfc <Face_UI_Draw_Name_List+0xf0>)
 8003dae:	f7ff fe3f 	bl	8003a30 <UI_Draw_String>
	UI_Draw_String("TNowC:", 11, 3, Direct_Display_MODE);
 8003db2:	2300      	movs	r3, #0
 8003db4:	2203      	movs	r2, #3
 8003db6:	210b      	movs	r1, #11
 8003db8:	4811      	ldr	r0, [pc, #68]	; (8003e00 <Face_UI_Draw_Name_List+0xf4>)
 8003dba:	f7ff fe39 	bl	8003a30 <UI_Draw_String>


	UI_Draw_String(" Separator", 11, 4, Direct_Display_MODE);
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	2204      	movs	r2, #4
 8003dc2:	210b      	movs	r1, #11
 8003dc4:	4813      	ldr	r0, [pc, #76]	; (8003e14 <Face_UI_Draw_Name_List+0x108>)
 8003dc6:	f7ff fe33 	bl	8003a30 <UI_Draw_String>
	UI_Draw_String("State:", 11, 5, Direct_Display_MODE);
 8003dca:	2300      	movs	r3, #0
 8003dcc:	2205      	movs	r2, #5
 8003dce:	210b      	movs	r1, #11
 8003dd0:	4809      	ldr	r0, [pc, #36]	; (8003df8 <Face_UI_Draw_Name_List+0xec>)
 8003dd2:	f7ff fe2d 	bl	8003a30 <UI_Draw_String>
	UI_Draw_String("TSetC:", 11, 6, Direct_Display_MODE);
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	2206      	movs	r2, #6
 8003dda:	210b      	movs	r1, #11
 8003ddc:	4807      	ldr	r0, [pc, #28]	; (8003dfc <Face_UI_Draw_Name_List+0xf0>)
 8003dde:	f7ff fe27 	bl	8003a30 <UI_Draw_String>
	UI_Draw_String("TNowC:", 11, 7, Direct_Display_MODE);
 8003de2:	2300      	movs	r3, #0
 8003de4:	2207      	movs	r2, #7
 8003de6:	210b      	movs	r1, #11
 8003de8:	4805      	ldr	r0, [pc, #20]	; (8003e00 <Face_UI_Draw_Name_List+0xf4>)
 8003dea:	f7ff fe21 	bl	8003a30 <UI_Draw_String>

}
 8003dee:	bf00      	nop
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	0800b1dc 	.word	0x0800b1dc
 8003df8:	0800b1e8 	.word	0x0800b1e8
 8003dfc:	0800b1f0 	.word	0x0800b1f0
 8003e00:	0800b1f8 	.word	0x0800b1f8
 8003e04:	0800b200 	.word	0x0800b200
 8003e08:	0800b208 	.word	0x0800b208
 8003e0c:	0800b210 	.word	0x0800b210
 8003e10:	0800b218 	.word	0x0800b218
 8003e14:	0800b224 	.word	0x0800b224

08003e18 <Face_UI_Draw_Parameters_List>:
//---------------------------------------------------------------------------------
void Face_UI_Draw_Parameters_List(){
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	af00      	add	r7, sp, #0
							//Draw Solder_Iron Parameters
	UI_Draw_Parmetr(Solder_Iron_Get_State(&Soldering_Iron), 6, 1, BOOL);
 8003e1c:	4879      	ldr	r0, [pc, #484]	; (8004004 <Face_UI_Draw_Parameters_List+0x1ec>)
 8003e1e:	f7fe fea0 	bl	8002b62 <Solder_Iron_Get_State>
 8003e22:	4603      	mov	r3, r0
 8003e24:	4618      	mov	r0, r3
 8003e26:	2303      	movs	r3, #3
 8003e28:	2201      	movs	r2, #1
 8003e2a:	2106      	movs	r1, #6
 8003e2c:	f7ff fde8 	bl	8003a00 <UI_Draw_Parmetr>
	UI_Draw_Parmetr(Soldering_Iron_Get_Temperature_Set_C(&Soldering_Iron), 6, 2, UINT16);
 8003e30:	4874      	ldr	r0, [pc, #464]	; (8004004 <Face_UI_Draw_Parameters_List+0x1ec>)
 8003e32:	f7fe feb0 	bl	8002b96 <Soldering_Iron_Get_Temperature_Set_C>
 8003e36:	4603      	mov	r3, r0
 8003e38:	4618      	mov	r0, r3
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	2202      	movs	r2, #2
 8003e3e:	2106      	movs	r1, #6
 8003e40:	f7ff fdde 	bl	8003a00 <UI_Draw_Parmetr>
	if(Solder_Iron_Get_State(&Soldering_Iron)==Soldering_Iron_ON)
 8003e44:	486f      	ldr	r0, [pc, #444]	; (8004004 <Face_UI_Draw_Parameters_List+0x1ec>)
 8003e46:	f7fe fe8c 	bl	8002b62 <Solder_Iron_Get_State>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d10a      	bne.n	8003e66 <Face_UI_Draw_Parameters_List+0x4e>
		UI_Draw_Parmetr(Soldering_Iron_Get_Current_Temperature_C(&Soldering_Iron), 6, 3, UINT16);
 8003e50:	486c      	ldr	r0, [pc, #432]	; (8004004 <Face_UI_Draw_Parameters_List+0x1ec>)
 8003e52:	f7fe feae 	bl	8002bb2 <Soldering_Iron_Get_Current_Temperature_C>
 8003e56:	4603      	mov	r3, r0
 8003e58:	4618      	mov	r0, r3
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	2203      	movs	r2, #3
 8003e5e:	2106      	movs	r1, #6
 8003e60:	f7ff fdce 	bl	8003a00 <UI_Draw_Parmetr>
 8003e64:	e005      	b.n	8003e72 <Face_UI_Draw_Parameters_List+0x5a>
	else
		UI_Draw_String("----",6,3,Direct_Display_MODE);
 8003e66:	2300      	movs	r3, #0
 8003e68:	2203      	movs	r2, #3
 8003e6a:	2106      	movs	r1, #6
 8003e6c:	4866      	ldr	r0, [pc, #408]	; (8004008 <Face_UI_Draw_Parameters_List+0x1f0>)
 8003e6e:	f7ff fddf 	bl	8003a30 <UI_Draw_String>
	UI_Draw_Parmetr(Solder_Iron_Get_Full_Power_State(&Soldering_Iron), 6, 4, BOOL);
 8003e72:	4864      	ldr	r0, [pc, #400]	; (8004004 <Face_UI_Draw_Parameters_List+0x1ec>)
 8003e74:	f7fe fe69 	bl	8002b4a <Solder_Iron_Get_Full_Power_State>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	2204      	movs	r2, #4
 8003e80:	2106      	movs	r1, #6
 8003e82:	f7ff fdbd 	bl	8003a00 <UI_Draw_Parmetr>

							//Draw Phase Angle Control Parameters
	if(PAC_Get_State(PAC)==ZCD_STATE_ON){
 8003e86:	4b61      	ldr	r3, [pc, #388]	; (800400c <Face_UI_Draw_Parameters_List+0x1f4>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7fe fa62 	bl	8002354 <PAC_Get_State>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d146      	bne.n	8003f24 <Face_UI_Draw_Parameters_List+0x10c>
		UI_Draw_Parmetr(PAC_Get_Frequency(PAC), 6, 5, UINT8);
 8003e96:	4b5d      	ldr	r3, [pc, #372]	; (800400c <Face_UI_Draw_Parameters_List+0x1f4>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7fe fa65 	bl	800236a <PAC_Get_Frequency>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	2205      	movs	r2, #5
 8003ea8:	2106      	movs	r1, #6
 8003eaa:	f7ff fda9 	bl	8003a00 <UI_Draw_Parmetr>
		UI_Draw_Parmetr(PAC_Get_Max_Control_Value(PAC), 6, 6, UINT16);
 8003eae:	4b57      	ldr	r3, [pc, #348]	; (800400c <Face_UI_Draw_Parameters_List+0x1f4>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7fe fa65 	bl	8002382 <PAC_Get_Max_Control_Value>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	4618      	mov	r0, r3
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	2206      	movs	r2, #6
 8003ec0:	2106      	movs	r1, #6
 8003ec2:	f7ff fd9d 	bl	8003a00 <UI_Draw_Parmetr>
		if(Soldering_Heat_Gun_Get_PAC_Controll_State(&Soldering_Heat_Gun)==PAC_Device_ON)
 8003ec6:	4852      	ldr	r0, [pc, #328]	; (8004010 <Face_UI_Draw_Parameters_List+0x1f8>)
 8003ec8:	f7ff f849 	bl	8002f5e <Soldering_Heat_Gun_Get_PAC_Controll_State>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d10a      	bne.n	8003ee8 <Face_UI_Draw_Parameters_List+0xd0>
			UI_Draw_Parmetr(Soldering_Heat_Gun_Get_PAC_Controll_Value(&Soldering_Heat_Gun), 1, 7, UINT16);
 8003ed2:	484f      	ldr	r0, [pc, #316]	; (8004010 <Face_UI_Draw_Parameters_List+0x1f8>)
 8003ed4:	f7ff f851 	bl	8002f7a <Soldering_Heat_Gun_Get_PAC_Controll_Value>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	4618      	mov	r0, r3
 8003edc:	2302      	movs	r3, #2
 8003ede:	2207      	movs	r2, #7
 8003ee0:	2101      	movs	r1, #1
 8003ee2:	f7ff fd8d 	bl	8003a00 <UI_Draw_Parmetr>
 8003ee6:	e005      	b.n	8003ef4 <Face_UI_Draw_Parameters_List+0xdc>
		else
			UI_Draw_String("----",1,7,Direct_Display_MODE);
 8003ee8:	2300      	movs	r3, #0
 8003eea:	2207      	movs	r2, #7
 8003eec:	2101      	movs	r1, #1
 8003eee:	4846      	ldr	r0, [pc, #280]	; (8004008 <Face_UI_Draw_Parameters_List+0x1f0>)
 8003ef0:	f7ff fd9e 	bl	8003a30 <UI_Draw_String>
		if(Soldering_Separator_Get_PAC_Controll_State(&Soldering_Separator)==PAC_Device_ON)
 8003ef4:	4847      	ldr	r0, [pc, #284]	; (8004014 <Face_UI_Draw_Parameters_List+0x1fc>)
 8003ef6:	f7ff f9ff 	bl	80032f8 <Soldering_Separator_Get_PAC_Controll_State>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d10a      	bne.n	8003f16 <Face_UI_Draw_Parameters_List+0xfe>
			UI_Draw_Parmetr(Soldering_Separator_Get_PAC_Controll_Value(&Soldering_Separator), 6, 7, UINT16);
 8003f00:	4844      	ldr	r0, [pc, #272]	; (8004014 <Face_UI_Draw_Parameters_List+0x1fc>)
 8003f02:	f7ff fa07 	bl	8003314 <Soldering_Separator_Get_PAC_Controll_Value>
 8003f06:	4603      	mov	r3, r0
 8003f08:	4618      	mov	r0, r3
 8003f0a:	2302      	movs	r3, #2
 8003f0c:	2207      	movs	r2, #7
 8003f0e:	2106      	movs	r1, #6
 8003f10:	f7ff fd76 	bl	8003a00 <UI_Draw_Parmetr>
 8003f14:	e01e      	b.n	8003f54 <Face_UI_Draw_Parameters_List+0x13c>
		else
			UI_Draw_String("----",6,7,Direct_Display_MODE);
 8003f16:	2300      	movs	r3, #0
 8003f18:	2207      	movs	r2, #7
 8003f1a:	2106      	movs	r1, #6
 8003f1c:	483a      	ldr	r0, [pc, #232]	; (8004008 <Face_UI_Draw_Parameters_List+0x1f0>)
 8003f1e:	f7ff fd87 	bl	8003a30 <UI_Draw_String>
 8003f22:	e017      	b.n	8003f54 <Face_UI_Draw_Parameters_List+0x13c>
	}
	else{
		UI_Draw_String("----",6,5,Direct_Display_MODE);
 8003f24:	2300      	movs	r3, #0
 8003f26:	2205      	movs	r2, #5
 8003f28:	2106      	movs	r1, #6
 8003f2a:	4837      	ldr	r0, [pc, #220]	; (8004008 <Face_UI_Draw_Parameters_List+0x1f0>)
 8003f2c:	f7ff fd80 	bl	8003a30 <UI_Draw_String>
		UI_Draw_String("----",6,6,Direct_Display_MODE);
 8003f30:	2300      	movs	r3, #0
 8003f32:	2206      	movs	r2, #6
 8003f34:	2106      	movs	r1, #6
 8003f36:	4834      	ldr	r0, [pc, #208]	; (8004008 <Face_UI_Draw_Parameters_List+0x1f0>)
 8003f38:	f7ff fd7a 	bl	8003a30 <UI_Draw_String>
		UI_Draw_String("----",1,7,Direct_Display_MODE);
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	2207      	movs	r2, #7
 8003f40:	2101      	movs	r1, #1
 8003f42:	4831      	ldr	r0, [pc, #196]	; (8004008 <Face_UI_Draw_Parameters_List+0x1f0>)
 8003f44:	f7ff fd74 	bl	8003a30 <UI_Draw_String>
		UI_Draw_String("----",6,7,Direct_Display_MODE);
 8003f48:	2300      	movs	r3, #0
 8003f4a:	2207      	movs	r2, #7
 8003f4c:	2106      	movs	r1, #6
 8003f4e:	482e      	ldr	r0, [pc, #184]	; (8004008 <Face_UI_Draw_Parameters_List+0x1f0>)
 8003f50:	f7ff fd6e 	bl	8003a30 <UI_Draw_String>
	}

							//Draw Soldering_Heat_Gun Parameters
	UI_Draw_Parmetr(Soldering_Heat_Gun_Get_State(&Soldering_Heat_Gun), 17, 1, BOOL);
 8003f54:	482e      	ldr	r0, [pc, #184]	; (8004010 <Face_UI_Draw_Parameters_List+0x1f8>)
 8003f56:	f7fe ffcc 	bl	8002ef2 <Soldering_Heat_Gun_Get_State>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	2303      	movs	r3, #3
 8003f60:	2201      	movs	r2, #1
 8003f62:	2111      	movs	r1, #17
 8003f64:	f7ff fd4c 	bl	8003a00 <UI_Draw_Parmetr>
	UI_Draw_Parmetr(Soldering_Heat_Gun_Get_Temperature_Set_C(&Soldering_Heat_Gun), 17, 2, UINT16);
 8003f68:	4829      	ldr	r0, [pc, #164]	; (8004010 <Face_UI_Draw_Parameters_List+0x1f8>)
 8003f6a:	f7fe ffdc 	bl	8002f26 <Soldering_Heat_Gun_Get_Temperature_Set_C>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	4618      	mov	r0, r3
 8003f72:	2302      	movs	r3, #2
 8003f74:	2202      	movs	r2, #2
 8003f76:	2111      	movs	r1, #17
 8003f78:	f7ff fd42 	bl	8003a00 <UI_Draw_Parmetr>
	if(Soldering_Heat_Gun_Get_State(&Soldering_Heat_Gun)!=Heat_Gun_OFF)
 8003f7c:	4824      	ldr	r0, [pc, #144]	; (8004010 <Face_UI_Draw_Parameters_List+0x1f8>)
 8003f7e:	f7fe ffb8 	bl	8002ef2 <Soldering_Heat_Gun_Get_State>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00a      	beq.n	8003f9e <Face_UI_Draw_Parameters_List+0x186>
		UI_Draw_Parmetr(Soldering_Heat_Gun_Get_Current_Temperature_C(&Soldering_Heat_Gun), 17, 3, UINT16);
 8003f88:	4821      	ldr	r0, [pc, #132]	; (8004010 <Face_UI_Draw_Parameters_List+0x1f8>)
 8003f8a:	f7fe ffda 	bl	8002f42 <Soldering_Heat_Gun_Get_Current_Temperature_C>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	4618      	mov	r0, r3
 8003f92:	2302      	movs	r3, #2
 8003f94:	2203      	movs	r2, #3
 8003f96:	2111      	movs	r1, #17
 8003f98:	f7ff fd32 	bl	8003a00 <UI_Draw_Parmetr>
 8003f9c:	e005      	b.n	8003faa <Face_UI_Draw_Parameters_List+0x192>
	else
		UI_Draw_String("----",17,3,Direct_Display_MODE);
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	2203      	movs	r2, #3
 8003fa2:	2111      	movs	r1, #17
 8003fa4:	4818      	ldr	r0, [pc, #96]	; (8004008 <Face_UI_Draw_Parameters_List+0x1f0>)
 8003fa6:	f7ff fd43 	bl	8003a30 <UI_Draw_String>

							//Draw Soldering_Separator Parameters
	UI_Draw_Parmetr(Soldering_Separator_Get_State(&Soldering_Separator), 17, 5, BOOL);
 8003faa:	481a      	ldr	r0, [pc, #104]	; (8004014 <Face_UI_Draw_Parameters_List+0x1fc>)
 8003fac:	f7ff f95e 	bl	800326c <Soldering_Separator_Get_State>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	2205      	movs	r2, #5
 8003fb8:	2111      	movs	r1, #17
 8003fba:	f7ff fd21 	bl	8003a00 <UI_Draw_Parmetr>
	UI_Draw_Parmetr(Soldering_Separator_Get_Temperature_Set_C(&Soldering_Separator), 17, 6, UINT16);
 8003fbe:	4815      	ldr	r0, [pc, #84]	; (8004014 <Face_UI_Draw_Parameters_List+0x1fc>)
 8003fc0:	f7ff f960 	bl	8003284 <Soldering_Separator_Get_Temperature_Set_C>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	2302      	movs	r3, #2
 8003fca:	2206      	movs	r2, #6
 8003fcc:	2111      	movs	r1, #17
 8003fce:	f7ff fd17 	bl	8003a00 <UI_Draw_Parmetr>
	if(Soldering_Separator_Get_State(&Soldering_Separator)==Separator_ON)
 8003fd2:	4810      	ldr	r0, [pc, #64]	; (8004014 <Face_UI_Draw_Parameters_List+0x1fc>)
 8003fd4:	f7ff f94a 	bl	800326c <Soldering_Separator_Get_State>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d10a      	bne.n	8003ff4 <Face_UI_Draw_Parameters_List+0x1dc>
		UI_Draw_Parmetr(Soldering_Separator_Get_Current_Temperature_C(&Soldering_Separator), 17, 7, UINT16);
 8003fde:	480d      	ldr	r0, [pc, #52]	; (8004014 <Face_UI_Draw_Parameters_List+0x1fc>)
 8003fe0:	f7ff f95e 	bl	80032a0 <Soldering_Separator_Get_Current_Temperature_C>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	2302      	movs	r3, #2
 8003fea:	2207      	movs	r2, #7
 8003fec:	2111      	movs	r1, #17
 8003fee:	f7ff fd07 	bl	8003a00 <UI_Draw_Parmetr>
	else
		UI_Draw_String("----",17,7,Direct_Display_MODE);

}
 8003ff2:	e005      	b.n	8004000 <Face_UI_Draw_Parameters_List+0x1e8>
		UI_Draw_String("----",17,7,Direct_Display_MODE);
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	2207      	movs	r2, #7
 8003ff8:	2111      	movs	r1, #17
 8003ffa:	4803      	ldr	r0, [pc, #12]	; (8004008 <Face_UI_Draw_Parameters_List+0x1f0>)
 8003ffc:	f7ff fd18 	bl	8003a30 <UI_Draw_String>
}
 8004000:	bf00      	nop
 8004002:	bd80      	pop	{r7, pc}
 8004004:	20000560 	.word	0x20000560
 8004008:	0800b230 	.word	0x0800b230
 800400c:	20000730 	.word	0x20000730
 8004010:	2000060c 	.word	0x2000060c
 8004014:	200006a8 	.word	0x200006a8

08004018 <Get_Button_State>:
//---------------------------------------------------------------------------------Button_Handler
void Get_Button_State(struct Button_Vector *Button_Vector, struct Button* Full_Power_Button){
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
	/**
	 * //Work with buttons buffers and set modes for all part of soldering station witch ocure
	 */

	struct Button_Vector *now=Button_Vector;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	60fb      	str	r3, [r7, #12]
	do{
		if(Button_Get_Event_State(now->Button)){	//Сheck the current button for a state change
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	4618      	mov	r0, r3
 800402c:	f7fd f935 	bl	800129a <Button_Get_Event_State>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	f000 809f 	beq.w	8004176 <Get_Button_State+0x15e>
			switch(now->Button->ID){				//Identify the button by ID
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	2b06      	cmp	r3, #6
 8004040:	f200 8099 	bhi.w	8004176 <Get_Button_State+0x15e>
 8004044:	a201      	add	r2, pc, #4	; (adr r2, 800404c <Get_Button_State+0x34>)
 8004046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800404a:	bf00      	nop
 800404c:	080040d5 	.word	0x080040d5
 8004050:	080040f9 	.word	0x080040f9
 8004054:	0800411d 	.word	0x0800411d
 8004058:	08004069 	.word	0x08004069
 800405c:	0800408d 	.word	0x0800408d
 8004060:	080040b1 	.word	0x080040b1
 8004064:	08004141 	.word	0x08004141
				case Solder_Iron_Set_Preset2_Button_ID:
					if((Button_Get_Pin_State(now->Button)==GPIO_PIN_RESET)&&(Solder_Iron_Get_State(&Soldering_Iron)==Soldering_Iron_ON)){	//check for a falling edge event
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	4618      	mov	r0, r3
 800406e:	f7fd f901 	bl	8001274 <Button_Get_Pin_State>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d173      	bne.n	8004160 <Get_Button_State+0x148>
 8004078:	4851      	ldr	r0, [pc, #324]	; (80041c0 <Get_Button_State+0x1a8>)
 800407a:	f7fe fd72 	bl	8002b62 <Solder_Iron_Get_State>
 800407e:	4603      	mov	r3, r0
 8004080:	2b01      	cmp	r3, #1
 8004082:	d16d      	bne.n	8004160 <Get_Button_State+0x148>
						Solder_Iron_Set_Preset2_Temperature(&Soldering_Iron);	//Set temperature Preset
 8004084:	484e      	ldr	r0, [pc, #312]	; (80041c0 <Get_Button_State+0x1a8>)
 8004086:	f7fe fd13 	bl	8002ab0 <Solder_Iron_Set_Preset2_Temperature>
					}
					break;
 800408a:	e069      	b.n	8004160 <Get_Button_State+0x148>
				case Soldering_Heat_Gun_Set_Preset2_Button_ID:
					if((Button_Get_Pin_State(now->Button)==GPIO_PIN_RESET)&&(Soldering_Heat_Gun_Get_State(&Soldering_Heat_Gun)!=Heat_Gun_OFF)){
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	4618      	mov	r0, r3
 8004092:	f7fd f8ef 	bl	8001274 <Button_Get_Pin_State>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d163      	bne.n	8004164 <Get_Button_State+0x14c>
 800409c:	4849      	ldr	r0, [pc, #292]	; (80041c4 <Get_Button_State+0x1ac>)
 800409e:	f7fe ff28 	bl	8002ef2 <Soldering_Heat_Gun_Get_State>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d05d      	beq.n	8004164 <Get_Button_State+0x14c>
						Soldering_Heat_Gun_Set_Preset2_Temperature(&Soldering_Heat_Gun);
 80040a8:	4846      	ldr	r0, [pc, #280]	; (80041c4 <Get_Button_State+0x1ac>)
 80040aa:	f7fe fef4 	bl	8002e96 <Soldering_Heat_Gun_Set_Preset2_Temperature>
					}
					break;
 80040ae:	e059      	b.n	8004164 <Get_Button_State+0x14c>
				case Soldering_Separator_Set_Preset2_Button_ID:
					if((Button_Get_Pin_State(now->Button)==GPIO_PIN_RESET)&&(Soldering_Separator_Get_State(&Soldering_Separator)==Separator_ON))
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7fd f8dd 	bl	8001274 <Button_Get_Pin_State>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d153      	bne.n	8004168 <Get_Button_State+0x150>
 80040c0:	4841      	ldr	r0, [pc, #260]	; (80041c8 <Get_Button_State+0x1b0>)
 80040c2:	f7ff f8d3 	bl	800326c <Soldering_Separator_Get_State>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d14d      	bne.n	8004168 <Get_Button_State+0x150>
						Soldering_Separator_Set_Preset2_Temperature(&Soldering_Separator);
 80040cc:	483e      	ldr	r0, [pc, #248]	; (80041c8 <Get_Button_State+0x1b0>)
 80040ce:	f7ff f8af 	bl	8003230 <Soldering_Separator_Set_Preset2_Temperature>
					break;
 80040d2:	e049      	b.n	8004168 <Get_Button_State+0x150>
				case Solder_Iron_Set_Preset1_Button_ID:
					if((Button_Get_Pin_State(now->Button)==GPIO_PIN_RESET)&&(Solder_Iron_Get_State(&Soldering_Iron)==Soldering_Iron_ON)){
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	4618      	mov	r0, r3
 80040da:	f7fd f8cb 	bl	8001274 <Button_Get_Pin_State>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d143      	bne.n	800416c <Get_Button_State+0x154>
 80040e4:	4836      	ldr	r0, [pc, #216]	; (80041c0 <Get_Button_State+0x1a8>)
 80040e6:	f7fe fd3c 	bl	8002b62 <Solder_Iron_Get_State>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d13d      	bne.n	800416c <Get_Button_State+0x154>
						Solder_Iron_Set_Preset1_Temperature(&Soldering_Iron);
 80040f0:	4833      	ldr	r0, [pc, #204]	; (80041c0 <Get_Button_State+0x1a8>)
 80040f2:	f7fe fcce 	bl	8002a92 <Solder_Iron_Set_Preset1_Temperature>
					}
					break;
 80040f6:	e039      	b.n	800416c <Get_Button_State+0x154>
				case Soldering_Heat_Gun_Set_Preset1_Button_ID:
					if((Button_Get_Pin_State(now->Button)==GPIO_PIN_RESET)&&(Soldering_Heat_Gun_Get_State(&Soldering_Heat_Gun)!=Heat_Gun_OFF)){
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f7fd f8b9 	bl	8001274 <Button_Get_Pin_State>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d133      	bne.n	8004170 <Get_Button_State+0x158>
 8004108:	482e      	ldr	r0, [pc, #184]	; (80041c4 <Get_Button_State+0x1ac>)
 800410a:	f7fe fef2 	bl	8002ef2 <Soldering_Heat_Gun_Get_State>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d02d      	beq.n	8004170 <Get_Button_State+0x158>
						Soldering_Heat_Gun_Set_Preset1_Temperature(&Soldering_Heat_Gun);
 8004114:	482b      	ldr	r0, [pc, #172]	; (80041c4 <Get_Button_State+0x1ac>)
 8004116:	f7fe feb2 	bl	8002e7e <Soldering_Heat_Gun_Set_Preset1_Temperature>
					}
					break;
 800411a:	e029      	b.n	8004170 <Get_Button_State+0x158>
				case Soldering_Separator_Set_Preset1_Button_ID:
					if((Button_Get_Pin_State(now->Button)==GPIO_PIN_RESET)&&(Soldering_Separator_Get_State(&Soldering_Separator)==Separator_ON)){
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	4618      	mov	r0, r3
 8004122:	f7fd f8a7 	bl	8001274 <Button_Get_Pin_State>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d123      	bne.n	8004174 <Get_Button_State+0x15c>
 800412c:	4826      	ldr	r0, [pc, #152]	; (80041c8 <Get_Button_State+0x1b0>)
 800412e:	f7ff f89d 	bl	800326c <Soldering_Separator_Get_State>
 8004132:	4603      	mov	r3, r0
 8004134:	2b01      	cmp	r3, #1
 8004136:	d11d      	bne.n	8004174 <Get_Button_State+0x15c>
						Soldering_Separator_Set_Preset1_Temperature(&Soldering_Separator);
 8004138:	4823      	ldr	r0, [pc, #140]	; (80041c8 <Get_Button_State+0x1b0>)
 800413a:	f7ff f86d 	bl	8003218 <Soldering_Separator_Set_Preset1_Temperature>
					}
					break;
 800413e:	e019      	b.n	8004174 <Get_Button_State+0x15c>
				case Button_Gerkon_ID:										// if Gerkon
					if(Button_Get_Pin_State(now->Button)==GPIO_PIN_RESET)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	4618      	mov	r0, r3
 8004146:	f7fd f895 	bl	8001274 <Button_Get_Pin_State>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d103      	bne.n	8004158 <Get_Button_State+0x140>
						Soldering_Heat_Gun_OFF(&Soldering_Heat_Gun);
 8004150:	481c      	ldr	r0, [pc, #112]	; (80041c4 <Get_Button_State+0x1ac>)
 8004152:	f7fe fe01 	bl	8002d58 <Soldering_Heat_Gun_OFF>
					else
						Soldering_Heat_Gun_ON(&Soldering_Heat_Gun);

					break;
 8004156:	e00e      	b.n	8004176 <Get_Button_State+0x15e>
						Soldering_Heat_Gun_ON(&Soldering_Heat_Gun);
 8004158:	481a      	ldr	r0, [pc, #104]	; (80041c4 <Get_Button_State+0x1ac>)
 800415a:	f7fe fdcf 	bl	8002cfc <Soldering_Heat_Gun_ON>
					break;
 800415e:	e00a      	b.n	8004176 <Get_Button_State+0x15e>
					break;
 8004160:	bf00      	nop
 8004162:	e008      	b.n	8004176 <Get_Button_State+0x15e>
					break;
 8004164:	bf00      	nop
 8004166:	e006      	b.n	8004176 <Get_Button_State+0x15e>
					break;
 8004168:	bf00      	nop
 800416a:	e004      	b.n	8004176 <Get_Button_State+0x15e>
					break;
 800416c:	bf00      	nop
 800416e:	e002      	b.n	8004176 <Get_Button_State+0x15e>
					break;
 8004170:	bf00      	nop
 8004172:	e000      	b.n	8004176 <Get_Button_State+0x15e>
					break;
 8004174:	bf00      	nop

			}
		}
		now=now->next;			//Go to the next button
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	60fb      	str	r3, [r7, #12]
	}while(now!=NULL);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2b00      	cmp	r3, #0
 8004180:	f47f af51 	bne.w	8004026 <Get_Button_State+0xe>



	if(Solder_Iron_Get_State(&Soldering_Iron)==Soldering_Iron_ON){			//Check Full_Power_Button for a state change if Soldering_Iron is Turn on
 8004184:	480e      	ldr	r0, [pc, #56]	; (80041c0 <Get_Button_State+0x1a8>)
 8004186:	f7fe fcec 	bl	8002b62 <Solder_Iron_Get_State>
 800418a:	4603      	mov	r3, r0
 800418c:	2b01      	cmp	r3, #1
 800418e:	d112      	bne.n	80041b6 <Get_Button_State+0x19e>
		if(Button_Get_Event_State(Full_Power_Button)){
 8004190:	6838      	ldr	r0, [r7, #0]
 8004192:	f7fd f882 	bl	800129a <Button_Get_Event_State>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d00c      	beq.n	80041b6 <Get_Button_State+0x19e>
			if(Button_Get_Pin_State(Full_Power_Button)==GPIO_PIN_RESET)
 800419c:	6838      	ldr	r0, [r7, #0]
 800419e:	f7fd f869 	bl	8001274 <Button_Get_Pin_State>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d103      	bne.n	80041b0 <Get_Button_State+0x198>
				Solder_Iron_Full_Power_ON(&Soldering_Iron);
 80041a8:	4805      	ldr	r0, [pc, #20]	; (80041c0 <Get_Button_State+0x1a8>)
 80041aa:	f7fe fca2 	bl	8002af2 <Solder_Iron_Full_Power_ON>
			else
				Solder_Iron_Full_Power_OFF(&Soldering_Iron);
		}
	}
}
 80041ae:	e002      	b.n	80041b6 <Get_Button_State+0x19e>
				Solder_Iron_Full_Power_OFF(&Soldering_Iron);
 80041b0:	4803      	ldr	r0, [pc, #12]	; (80041c0 <Get_Button_State+0x1a8>)
 80041b2:	f7fe fcb4 	bl	8002b1e <Solder_Iron_Full_Power_OFF>
}
 80041b6:	bf00      	nop
 80041b8:	3710      	adds	r7, #16
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	20000560 	.word	0x20000560
 80041c4:	2000060c 	.word	0x2000060c
 80041c8:	200006a8 	.word	0x200006a8

080041cc <Face_UI_it>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void Face_UI_it(struct Encoder *Encoder_P1, struct Encoder *Encoder_P2, struct Button_Vector *Button_Vector){
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b088      	sub	sp, #32
 80041d0:	af02      	add	r7, sp, #8
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
	 * Elements of station such ass Solder_Irin can work only when MC transfer control to this function
	 */
	enum{
		Interface_Contoll_Soldering_Heat_Gun,
		Interface_Contoll_Soldering_Separator
	}Interface_Contoll=Interface_Contoll_Soldering_Heat_Gun;			//this parameter contain witch interface is active now
 80041d8:	2300      	movs	r3, #0
 80041da:	75fb      	strb	r3, [r7, #23]


	Soldering_Station_Temperature_Presets_Corection_Converting(&Soldering_Iron, &Soldering_Heat_Gun, &Soldering_Separator);	//Transfer Thermal correction Celsius to ADC's Levels
 80041dc:	4a84      	ldr	r2, [pc, #528]	; (80043f0 <Face_UI_it+0x224>)
 80041de:	4985      	ldr	r1, [pc, #532]	; (80043f4 <Face_UI_it+0x228>)
 80041e0:	4885      	ldr	r0, [pc, #532]	; (80043f8 <Face_UI_it+0x22c>)
 80041e2:	f7ff f92e 	bl	8003442 <Soldering_Station_Temperature_Presets_Corection_Converting>
																																// It needs because Thermal correction with PID work with ADC's Levels
	Face_UI_Draw_Name_List();													// Clear display and draw Name of parameters on the display
 80041e6:	f7ff fd91 	bl	8003d0c <Face_UI_Draw_Name_List>

	UI_Encoder_Reset_Button_State(Encoder_P2);
 80041ea:	68b8      	ldr	r0, [r7, #8]
 80041ec:	f7ff fd83 	bl	8003cf6 <UI_Encoder_Reset_Button_State>
	UI_Encoder_Reset_Button_State(Encoder_P1);									//Clear encoders
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f7ff fd80 	bl	8003cf6 <UI_Encoder_Reset_Button_State>

	do{																			//Start work cycle

		if(Encoder_Get_Button_State(Encoder_P1)==Encoder_Button_long){			//Select which element will be control by Encoder
 80041f6:	68f8      	ldr	r0, [r7, #12]
 80041f8:	f7fd f881 	bl	80012fe <Encoder_Get_Button_State>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b03      	cmp	r3, #3
 8004200:	d122      	bne.n	8004248 <Face_UI_it+0x7c>
			UI_Encoder_Reset_Button_State(Encoder_P1);							//Clear Encoder Buffer
 8004202:	68f8      	ldr	r0, [r7, #12]
 8004204:	f7ff fd77 	bl	8003cf6 <UI_Encoder_Reset_Button_State>
			if(Interface_Contoll==Interface_Contoll_Soldering_Heat_Gun){		// Soldering Separator
 8004208:	7dfb      	ldrb	r3, [r7, #23]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10e      	bne.n	800422c <Face_UI_it+0x60>
				Interface_Contoll=Interface_Contoll_Soldering_Separator;
 800420e:	2301      	movs	r3, #1
 8004210:	75fb      	strb	r3, [r7, #23]
				UI_Draw_String(" SoldFAN ", 11, 0, Direct_Display_MODE);		//Redraw part of name interface ton mark witch part are selected
 8004212:	2300      	movs	r3, #0
 8004214:	2200      	movs	r2, #0
 8004216:	210b      	movs	r1, #11
 8004218:	4878      	ldr	r0, [pc, #480]	; (80043fc <Face_UI_it+0x230>)
 800421a:	f7ff fc09 	bl	8003a30 <UI_Draw_String>
				UI_Draw_String(" Separator", 11, 4, Inverse_Display_MODE);
 800421e:	2301      	movs	r3, #1
 8004220:	2204      	movs	r2, #4
 8004222:	210b      	movs	r1, #11
 8004224:	4876      	ldr	r0, [pc, #472]	; (8004400 <Face_UI_it+0x234>)
 8004226:	f7ff fc03 	bl	8003a30 <UI_Draw_String>
 800422a:	e00d      	b.n	8004248 <Face_UI_it+0x7c>
			}
			else{																//Soldering heat gun
				Interface_Contoll=Interface_Contoll_Soldering_Heat_Gun;
 800422c:	2300      	movs	r3, #0
 800422e:	75fb      	strb	r3, [r7, #23]
				UI_Draw_String(" SoldFAN ", 11, 0, Inverse_Display_MODE);		//Redraw part of name interface ton mark witch part are select
 8004230:	2301      	movs	r3, #1
 8004232:	2200      	movs	r2, #0
 8004234:	210b      	movs	r1, #11
 8004236:	4871      	ldr	r0, [pc, #452]	; (80043fc <Face_UI_it+0x230>)
 8004238:	f7ff fbfa 	bl	8003a30 <UI_Draw_String>
				UI_Draw_String(" Separator", 11, 4, Direct_Display_MODE);
 800423c:	2300      	movs	r3, #0
 800423e:	2204      	movs	r2, #4
 8004240:	210b      	movs	r1, #11
 8004242:	486f      	ldr	r0, [pc, #444]	; (8004400 <Face_UI_it+0x234>)
 8004244:	f7ff fbf4 	bl	8003a30 <UI_Draw_String>
			}
		}

		Get_Button_State(Button_Vector, &Soldering_Iron.Full_Power_Button);		//Work with buttons buffers
 8004248:	496e      	ldr	r1, [pc, #440]	; (8004404 <Face_UI_it+0x238>)
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f7ff fee4 	bl	8004018 <Get_Button_State>

		if(Solder_Iron_Get_State(&Soldering_Iron)==Soldering_Iron_ON){			//Change Solder_Iron Manual Temperature if Solder_Iron is turn ON
 8004250:	4869      	ldr	r0, [pc, #420]	; (80043f8 <Face_UI_it+0x22c>)
 8004252:	f7fe fc86 	bl	8002b62 <Solder_Iron_Get_State>
 8004256:	4603      	mov	r3, r0
 8004258:	2b01      	cmp	r3, #1
 800425a:	d118      	bne.n	800428e <Face_UI_it+0xc2>
			Solder_Iron_Set_Manual_Preset_Temperature_C(
					(uint16_t)UI_Change_Value(Soldering_Iron_Get_Manual_Preset_Temperature_C(&Soldering_Iron), 5, UINT16, Soldering_Iron_MIN_Manual_Preset_Temperature_C, MAX_ADC_Value, Encoder_P2),
 800425c:	4866      	ldr	r0, [pc, #408]	; (80043f8 <Face_UI_it+0x22c>)
 800425e:	f7fe fc8c 	bl	8002b7a <Soldering_Iron_Get_Manual_Preset_Temperature_C>
 8004262:	4603      	mov	r3, r0
 8004264:	4618      	mov	r0, r3
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	9301      	str	r3, [sp, #4]
 800426a:	f640 63d8 	movw	r3, #3800	; 0xed8
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	2364      	movs	r3, #100	; 0x64
 8004272:	2202      	movs	r2, #2
 8004274:	2105      	movs	r1, #5
 8004276:	f7ff fceb 	bl	8003c50 <UI_Change_Value>
 800427a:	4603      	mov	r3, r0
			Solder_Iron_Set_Manual_Preset_Temperature_C(
 800427c:	b29b      	uxth	r3, r3
 800427e:	495e      	ldr	r1, [pc, #376]	; (80043f8 <Face_UI_it+0x22c>)
 8004280:	4618      	mov	r0, r3
 8004282:	f7fe fc24 	bl	8002ace <Solder_Iron_Set_Manual_Preset_Temperature_C>
					&Soldering_Iron);
			Solder_Iron_Set_Manual_Temperature(&Soldering_Iron);
 8004286:	485c      	ldr	r0, [pc, #368]	; (80043f8 <Face_UI_it+0x22c>)
 8004288:	f7fe fbe9 	bl	8002a5e <Solder_Iron_Set_Manual_Temperature>
 800428c:	e002      	b.n	8004294 <Face_UI_it+0xc8>
		}
		else
			UI_Encoder_Reset_Rotary_Switch_Buffer(Encoder_P2);					//Else clear Encoder Buffer
 800428e:	68b8      	ldr	r0, [r7, #8]
 8004290:	f7ff fd26 	bl	8003ce0 <UI_Encoder_Reset_Rotary_Switch_Buffer>


		if(Interface_Contoll==Interface_Contoll_Soldering_Heat_Gun){				//Soldering_Heat_Gun manual temperature changing
 8004294:	7dfb      	ldrb	r3, [r7, #23]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d122      	bne.n	80042e0 <Face_UI_it+0x114>
			if(Soldering_Heat_Gun_Get_State(&Soldering_Heat_Gun)!=Heat_Gun_OFF){	//Change Soldering_Heat_Gun Temperature if Soldering_Heat_Gun is turn ON
 800429a:	4856      	ldr	r0, [pc, #344]	; (80043f4 <Face_UI_it+0x228>)
 800429c:	f7fe fe29 	bl	8002ef2 <Soldering_Heat_Gun_Get_State>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d018      	beq.n	80042d8 <Face_UI_it+0x10c>
				Soldering_Heat_Gun_Set_Manual_Preset_Temperature_C(
						(uint16_t)UI_Change_Value(Soldering_Heat_Gun_Get_Manual_Preset_Temperature_C(&Soldering_Heat_Gun), 5, UINT16, Soldering_Heat_Gun_MIN_Manual_Preset_Temperature_C, MAX_ADC_Value, Encoder_P1),
 80042a6:	4853      	ldr	r0, [pc, #332]	; (80043f4 <Face_UI_it+0x228>)
 80042a8:	f7fe fe2f 	bl	8002f0a <Soldering_Heat_Gun_Get_Manual_Preset_Temperature_C>
 80042ac:	4603      	mov	r3, r0
 80042ae:	4618      	mov	r0, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	9301      	str	r3, [sp, #4]
 80042b4:	f640 63d8 	movw	r3, #3800	; 0xed8
 80042b8:	9300      	str	r3, [sp, #0]
 80042ba:	2332      	movs	r3, #50	; 0x32
 80042bc:	2202      	movs	r2, #2
 80042be:	2105      	movs	r1, #5
 80042c0:	f7ff fcc6 	bl	8003c50 <UI_Change_Value>
 80042c4:	4603      	mov	r3, r0
				Soldering_Heat_Gun_Set_Manual_Preset_Temperature_C(
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	494a      	ldr	r1, [pc, #296]	; (80043f4 <Face_UI_it+0x228>)
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7fe fdef 	bl	8002eae <Soldering_Heat_Gun_Set_Manual_Preset_Temperature_C>
						&Soldering_Heat_Gun);
				Soldering_Heat_Gun_Set_Manual_Temperature(&Soldering_Heat_Gun);
 80042d0:	4848      	ldr	r0, [pc, #288]	; (80043f4 <Face_UI_it+0x228>)
 80042d2:	f7fe fdbd 	bl	8002e50 <Soldering_Heat_Gun_Set_Manual_Temperature>
 80042d6:	e025      	b.n	8004324 <Face_UI_it+0x158>
			}
			else
				UI_Encoder_Reset_Rotary_Switch_Buffer(Encoder_P1);				//Else clear Encoder Buffer
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f7ff fd01 	bl	8003ce0 <UI_Encoder_Reset_Rotary_Switch_Buffer>
 80042de:	e021      	b.n	8004324 <Face_UI_it+0x158>
		}
		else{																		//Soldering_Separator manual temperature changing
			if(Soldering_Separator_Get_State(&Soldering_Separator)==Separator_ON){	//Change Soldering_Separator Temperature if Soldering_Separator is turn ON
 80042e0:	4843      	ldr	r0, [pc, #268]	; (80043f0 <Face_UI_it+0x224>)
 80042e2:	f7fe ffc3 	bl	800326c <Soldering_Separator_Get_State>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d118      	bne.n	800431e <Face_UI_it+0x152>
				Soldering_Separator_Set_Manual_Preset_Temperature_C(
						(uint16_t)UI_Change_Value(Soldering_Separator_Get_Manual_Preset_Temperature_C(&Soldering_Separator), 5, UINT16, Soldering_Separator_MIN_Manual_Preset_Temperature_C, MAX_ADC_Value, Encoder_P1),
 80042ec:	4840      	ldr	r0, [pc, #256]	; (80043f0 <Face_UI_it+0x224>)
 80042ee:	f7fe ffe5 	bl	80032bc <Soldering_Separator_Get_Manual_Preset_Temperature_C>
 80042f2:	4603      	mov	r3, r0
 80042f4:	4618      	mov	r0, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	9301      	str	r3, [sp, #4]
 80042fa:	f640 63d8 	movw	r3, #3800	; 0xed8
 80042fe:	9300      	str	r3, [sp, #0]
 8004300:	2332      	movs	r3, #50	; 0x32
 8004302:	2202      	movs	r2, #2
 8004304:	2105      	movs	r1, #5
 8004306:	f7ff fca3 	bl	8003c50 <UI_Change_Value>
 800430a:	4603      	mov	r3, r0
				Soldering_Separator_Set_Manual_Preset_Temperature_C(
 800430c:	b29b      	uxth	r3, r3
 800430e:	4938      	ldr	r1, [pc, #224]	; (80043f0 <Face_UI_it+0x224>)
 8004310:	4618      	mov	r0, r3
 8004312:	f7fe ff99 	bl	8003248 <Soldering_Separator_Set_Manual_Preset_Temperature_C>
						&Soldering_Separator);
				Soldering_Separator_Set_Manual_Temperature(&Soldering_Separator);
 8004316:	4836      	ldr	r0, [pc, #216]	; (80043f0 <Face_UI_it+0x224>)
 8004318:	f7fe ff67 	bl	80031ea <Soldering_Separator_Set_Manual_Temperature>
 800431c:	e002      	b.n	8004324 <Face_UI_it+0x158>
			}
			else
				UI_Encoder_Reset_Rotary_Switch_Buffer(Encoder_P1);					//Else clear Encoder Buffer
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	f7ff fcde 	bl	8003ce0 <UI_Encoder_Reset_Rotary_Switch_Buffer>
		}


		if(Encoder_Get_Button_State(Encoder_P2)==Encoder_Button_Short){                 //Solder_Iron_ON/OFF
 8004324:	68b8      	ldr	r0, [r7, #8]
 8004326:	f7fc ffea 	bl	80012fe <Encoder_Get_Button_State>
 800432a:	4603      	mov	r3, r0
 800432c:	2b02      	cmp	r3, #2
 800432e:	d10f      	bne.n	8004350 <Face_UI_it+0x184>
			UI_Encoder_Reset_Button_State(Encoder_P2);									//Clear Encoder Buffer
 8004330:	68b8      	ldr	r0, [r7, #8]
 8004332:	f7ff fce0 	bl	8003cf6 <UI_Encoder_Reset_Button_State>
			if(Solder_Iron_Get_State(&Soldering_Iron)==Soldering_Iron_OFF){				//Switch Solder_Iron state
 8004336:	4830      	ldr	r0, [pc, #192]	; (80043f8 <Face_UI_it+0x22c>)
 8004338:	f7fe fc13 	bl	8002b62 <Solder_Iron_Get_State>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d103      	bne.n	800434a <Face_UI_it+0x17e>
				Solder_Iron_ON(&Soldering_Iron);
 8004342:	482d      	ldr	r0, [pc, #180]	; (80043f8 <Face_UI_it+0x22c>)
 8004344:	f7fe fb0c 	bl	8002960 <Solder_Iron_ON>
 8004348:	e002      	b.n	8004350 <Face_UI_it+0x184>
			}else{
				Solder_Iron_OFF(&Soldering_Iron);
 800434a:	482b      	ldr	r0, [pc, #172]	; (80043f8 <Face_UI_it+0x22c>)
 800434c:	f7fe fb1e 	bl	800298c <Solder_Iron_OFF>
			}
		}

		if(Encoder_Get_Button_State(Encoder_P1)==Encoder_Button_Short&&Interface_Contoll==Interface_Contoll_Soldering_Heat_Gun){			//Soldering_Heat_Gun_ON/OFF
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f7fc ffd4 	bl	80012fe <Encoder_Get_Button_State>
 8004356:	4603      	mov	r3, r0
 8004358:	2b02      	cmp	r3, #2
 800435a:	d113      	bne.n	8004384 <Face_UI_it+0x1b8>
 800435c:	7dfb      	ldrb	r3, [r7, #23]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d110      	bne.n	8004384 <Face_UI_it+0x1b8>
			UI_Encoder_Reset_Button_State(Encoder_P1);								//Clear Encoder Buffer
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f7ff fcc7 	bl	8003cf6 <UI_Encoder_Reset_Button_State>
			if(Soldering_Heat_Gun_Get_State(&Soldering_Heat_Gun)!=Heat_Gun_ON)		//Switch Soldering_Heat_Gun state
 8004368:	4822      	ldr	r0, [pc, #136]	; (80043f4 <Face_UI_it+0x228>)
 800436a:	f7fe fdc2 	bl	8002ef2 <Soldering_Heat_Gun_Get_State>
 800436e:	4603      	mov	r3, r0
 8004370:	2b01      	cmp	r3, #1
 8004372:	d003      	beq.n	800437c <Face_UI_it+0x1b0>
				Soldering_Heat_Gun_ON(&Soldering_Heat_Gun);
 8004374:	481f      	ldr	r0, [pc, #124]	; (80043f4 <Face_UI_it+0x228>)
 8004376:	f7fe fcc1 	bl	8002cfc <Soldering_Heat_Gun_ON>
			if(Soldering_Heat_Gun_Get_State(&Soldering_Heat_Gun)!=Heat_Gun_ON)		//Switch Soldering_Heat_Gun state
 800437a:	e01c      	b.n	80043b6 <Face_UI_it+0x1ea>
			else
				Soldering_Heat_Gun_OFF(&Soldering_Heat_Gun);
 800437c:	481d      	ldr	r0, [pc, #116]	; (80043f4 <Face_UI_it+0x228>)
 800437e:	f7fe fceb 	bl	8002d58 <Soldering_Heat_Gun_OFF>
			if(Soldering_Heat_Gun_Get_State(&Soldering_Heat_Gun)!=Heat_Gun_ON)		//Switch Soldering_Heat_Gun state
 8004382:	e018      	b.n	80043b6 <Face_UI_it+0x1ea>
		}
		else if(Encoder_Get_Button_State(Encoder_P1)==Encoder_Button_Short&&Interface_Contoll==Interface_Contoll_Soldering_Separator){		//Soldering_Separator_ON/OFF
 8004384:	68f8      	ldr	r0, [r7, #12]
 8004386:	f7fc ffba 	bl	80012fe <Encoder_Get_Button_State>
 800438a:	4603      	mov	r3, r0
 800438c:	2b02      	cmp	r3, #2
 800438e:	d112      	bne.n	80043b6 <Face_UI_it+0x1ea>
 8004390:	7dfb      	ldrb	r3, [r7, #23]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d10f      	bne.n	80043b6 <Face_UI_it+0x1ea>
			UI_Encoder_Reset_Button_State(Encoder_P1);								//Clear Encoder Buffer
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f7ff fcad 	bl	8003cf6 <UI_Encoder_Reset_Button_State>
				if(Soldering_Separator_Get_State(&Soldering_Separator)!=Separator_ON)
 800439c:	4814      	ldr	r0, [pc, #80]	; (80043f0 <Face_UI_it+0x224>)
 800439e:	f7fe ff65 	bl	800326c <Soldering_Separator_Get_State>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d003      	beq.n	80043b0 <Face_UI_it+0x1e4>
					Soldering_Separator_ON(&Soldering_Separator);
 80043a8:	4811      	ldr	r0, [pc, #68]	; (80043f0 <Face_UI_it+0x224>)
 80043aa:	f7fe fec1 	bl	8003130 <Soldering_Separator_ON>
 80043ae:	e002      	b.n	80043b6 <Face_UI_it+0x1ea>
				else
					Soldering_Separator_OFF(&Soldering_Separator);
 80043b0:	480f      	ldr	r0, [pc, #60]	; (80043f0 <Face_UI_it+0x224>)
 80043b2:	f7fe fed7 	bl	8003164 <Soldering_Separator_OFF>
		}
		Face_UI_Draw_Parameters_List();
 80043b6:	f7ff fd2f 	bl	8003e18 <Face_UI_Draw_Parameters_List>

	}while(Encoder_Get_Button_State(Encoder_P2)!=Encoder_Button_long); //Exit from Face_Ui
 80043ba:	68b8      	ldr	r0, [r7, #8]
 80043bc:	f7fc ff9f 	bl	80012fe <Encoder_Get_Button_State>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b03      	cmp	r3, #3
 80043c4:	f47f af17 	bne.w	80041f6 <Face_UI_it+0x2a>

	Solder_Iron_OFF(&Soldering_Iron);				//Turn OFF ALL Devices
 80043c8:	480b      	ldr	r0, [pc, #44]	; (80043f8 <Face_UI_it+0x22c>)
 80043ca:	f7fe fadf 	bl	800298c <Solder_Iron_OFF>
	Soldering_Heat_Gun_OFF(&Soldering_Heat_Gun);
 80043ce:	4809      	ldr	r0, [pc, #36]	; (80043f4 <Face_UI_it+0x228>)
 80043d0:	f7fe fcc2 	bl	8002d58 <Soldering_Heat_Gun_OFF>
	Soldering_Separator_OFF(&Soldering_Separator);
 80043d4:	4806      	ldr	r0, [pc, #24]	; (80043f0 <Face_UI_it+0x224>)
 80043d6:	f7fe fec5 	bl	8003164 <Soldering_Separator_OFF>

	UI_Encoder_Reset_Button_State(Encoder_P2);		//Reset Encoders buffer state
 80043da:	68b8      	ldr	r0, [r7, #8]
 80043dc:	f7ff fc8b 	bl	8003cf6 <UI_Encoder_Reset_Button_State>
	UI_Encoder_Reset_Button_State(Encoder_P1);
 80043e0:	68f8      	ldr	r0, [r7, #12]
 80043e2:	f7ff fc88 	bl	8003cf6 <UI_Encoder_Reset_Button_State>
}
 80043e6:	bf00      	nop
 80043e8:	3718      	adds	r7, #24
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	200006a8 	.word	0x200006a8
 80043f4:	2000060c 	.word	0x2000060c
 80043f8:	20000560 	.word	0x20000560
 80043fc:	0800b218 	.word	0x0800b218
 8004400:	0800b224 	.word	0x0800b224
 8004404:	200005dc 	.word	0x200005dc

08004408 <Menu_List_Element_Draw>:
#include "UI_Menu.h"

//--------------------------------------------------------------------------------------------------------------------------------------------------------
void Menu_List_Element_Draw(struct Menu_List_Element_Vector *self, uint8_t y){
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	460b      	mov	r3, r1
 8004412:	70fb      	strb	r3, [r7, #3]
	/**
	 * Draw line with name and value of parameter
	 */
	UI_Clear_Line(y);
 8004414:	78fb      	ldrb	r3, [r7, #3]
 8004416:	4618      	mov	r0, r3
 8004418:	f7ff fb5a 	bl	8003ad0 <UI_Clear_Line>
	UI_Draw_String(self->name, 1, y, Direct_Display_MODE);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6898      	ldr	r0, [r3, #8]
 8004420:	78fa      	ldrb	r2, [r7, #3]
 8004422:	2300      	movs	r3, #0
 8004424:	2101      	movs	r1, #1
 8004426:	f7ff fb03 	bl	8003a30 <UI_Draw_String>
	UI_Draw_Parmetr_Ptr(self->parametr, 16, y, self->mode);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6918      	ldr	r0, [r3, #16]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	7b1b      	ldrb	r3, [r3, #12]
 8004432:	78fa      	ldrb	r2, [r7, #3]
 8004434:	2110      	movs	r1, #16
 8004436:	f7ff f947 	bl	80036c8 <UI_Draw_Parmetr_Ptr>
}
 800443a:	bf00      	nop
 800443c:	3708      	adds	r7, #8
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <Menu_List_Element_Vector_Draw>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void Menu_List_Element_Vector_Draw(struct Menu_List_Element_Vector *self, uint8_t start_point, uint8_t quantity){
 8004442:	b580      	push	{r7, lr}
 8004444:	b084      	sub	sp, #16
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
 800444a:	460b      	mov	r3, r1
 800444c:	70fb      	strb	r3, [r7, #3]
 800444e:	4613      	mov	r3, r2
 8004450:	70bb      	strb	r3, [r7, #2]
	/**
	 * Draw all  Menu_List_Element from start point ID of Menu_List_Element_Vector to start point + quantity
	 */
	while(self->ID!=start_point)		//skip to start point
 8004452:	e002      	b.n	800445a <Menu_List_Element_Vector_Draw+0x18>
		self=self->next;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	607b      	str	r3, [r7, #4]
	while(self->ID!=start_point)		//skip to start point
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	791b      	ldrb	r3, [r3, #4]
 800445e:	78fa      	ldrb	r2, [r7, #3]
 8004460:	429a      	cmp	r2, r3
 8004462:	d1f7      	bne.n	8004454 <Menu_List_Element_Vector_Draw+0x12>
	for(uint8_t i=0;i<quantity;i++){
 8004464:	2300      	movs	r3, #0
 8004466:	73fb      	strb	r3, [r7, #15]
 8004468:	e016      	b.n	8004498 <Menu_List_Element_Vector_Draw+0x56>
		if(self!=NULL){																//if Menu_List_Element was created
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00a      	beq.n	8004486 <Menu_List_Element_Vector_Draw+0x44>
			Menu_List_Element_Draw(self, i+Menu_List_Element_Vector_Draw_Shift);	//draw it based on position
 8004470:	7bfb      	ldrb	r3, [r7, #15]
 8004472:	3301      	adds	r3, #1
 8004474:	b2db      	uxtb	r3, r3
 8004476:	4619      	mov	r1, r3
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f7ff ffc5 	bl	8004408 <Menu_List_Element_Draw>
			self=self->next;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	607b      	str	r3, [r7, #4]
 8004484:	e005      	b.n	8004492 <Menu_List_Element_Vector_Draw+0x50>
		}
		else																		//else
			UI_Clear_Line(i+Menu_List_Element_Vector_Draw_Shift);					//clear it's based on line position
 8004486:	7bfb      	ldrb	r3, [r7, #15]
 8004488:	3301      	adds	r3, #1
 800448a:	b2db      	uxtb	r3, r3
 800448c:	4618      	mov	r0, r3
 800448e:	f7ff fb1f 	bl	8003ad0 <UI_Clear_Line>
	for(uint8_t i=0;i<quantity;i++){
 8004492:	7bfb      	ldrb	r3, [r7, #15]
 8004494:	3301      	adds	r3, #1
 8004496:	73fb      	strb	r3, [r7, #15]
 8004498:	7bfa      	ldrb	r2, [r7, #15]
 800449a:	78bb      	ldrb	r3, [r7, #2]
 800449c:	429a      	cmp	r2, r3
 800449e:	d3e4      	bcc.n	800446a <Menu_List_Element_Vector_Draw+0x28>
	}
}
 80044a0:	bf00      	nop
 80044a2:	bf00      	nop
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <Menu_List_Vector_Size>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
uint8_t Menu_List_Vector_Size(struct Menu_List_Element_Vector *self){
 80044aa:	b480      	push	{r7}
 80044ac:	b085      	sub	sp, #20
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
	/**
	 * Return quantity of elements in  Menu_List_Element_Vector
	 */
	uint8_t MAX_ID=0;
 80044b2:	2300      	movs	r3, #0
 80044b4:	73fb      	strb	r3, [r7, #15]
	while(self->next!=NULL){
 80044b6:	e005      	b.n	80044c4 <Menu_List_Vector_Size+0x1a>
			self=self->next;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	607b      	str	r3, [r7, #4]
			MAX_ID++;
 80044be:	7bfb      	ldrb	r3, [r7, #15]
 80044c0:	3301      	adds	r3, #1
 80044c2:	73fb      	strb	r3, [r7, #15]
	while(self->next!=NULL){
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1f5      	bne.n	80044b8 <Menu_List_Vector_Size+0xe>
	}
	return MAX_ID++;
 80044cc:	7bfb      	ldrb	r3, [r7, #15]
 80044ce:	1c5a      	adds	r2, r3, #1
 80044d0:	73fa      	strb	r2, [r7, #15]
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3714      	adds	r7, #20
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bc80      	pop	{r7}
 80044da:	4770      	bx	lr

080044dc <Get_Prescaler>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
uint8_t Get_Prescaler(struct Button_Vector *Button_Vector){
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
	/**
	 *	Return number based on witch buttons are pressed
	 *	x1 x2 x5 x10
	 */
	struct Button_Vector *now=Button_Vector;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	60fb      	str	r3, [r7, #12]

	static  uint8_t Button_State=0;											//Every bit of Button_State contain local button state (Turn OFF or ON)
	uint8_t Prescaler=1;
 80044e8:	2301      	movs	r3, #1
 80044ea:	72fb      	strb	r3, [r7, #11]
	do{
		if(Button_Get_Event_State(now->Button)){							//If Button Event
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7fc fed2 	bl	800129a <Button_Get_Event_State>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d02a      	beq.n	8004552 <Get_Prescaler+0x76>
			switch(now->Button->ID){										//Check button ID
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d002      	beq.n	800450c <Get_Prescaler+0x30>
 8004506:	2b03      	cmp	r3, #3
 8004508:	d010      	beq.n	800452c <Get_Prescaler+0x50>
 800450a:	e022      	b.n	8004552 <Get_Prescaler+0x76>
				case X2_Modefire_Button_ID:
					if(Button_Get_Pin_State(now->Button)==GPIO_PIN_RESET){	//If Falling edge
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	4618      	mov	r0, r3
 8004512:	f7fc feaf 	bl	8001274 <Button_Get_Pin_State>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d117      	bne.n	800454c <Get_Prescaler+0x70>
						Button_State^=0x02;									//Toggle state bit
 800451c:	4b1c      	ldr	r3, [pc, #112]	; (8004590 <Get_Prescaler+0xb4>)
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	f083 0302 	eor.w	r3, r3, #2
 8004524:	b2da      	uxtb	r2, r3
 8004526:	4b1a      	ldr	r3, [pc, #104]	; (8004590 <Get_Prescaler+0xb4>)
 8004528:	701a      	strb	r2, [r3, #0]
					}
				break;
 800452a:	e00f      	b.n	800454c <Get_Prescaler+0x70>
				case X5_Modefire_Button_ID:
					if(Button_Get_Pin_State(now->Button)==GPIO_PIN_RESET){	//If Falling edge
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	4618      	mov	r0, r3
 8004532:	f7fc fe9f 	bl	8001274 <Button_Get_Pin_State>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d109      	bne.n	8004550 <Get_Prescaler+0x74>
						Button_State^=0x01;									//Toggle state bit
 800453c:	4b14      	ldr	r3, [pc, #80]	; (8004590 <Get_Prescaler+0xb4>)
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	f083 0301 	eor.w	r3, r3, #1
 8004544:	b2da      	uxtb	r2, r3
 8004546:	4b12      	ldr	r3, [pc, #72]	; (8004590 <Get_Prescaler+0xb4>)
 8004548:	701a      	strb	r2, [r3, #0]
					}
				break;
 800454a:	e001      	b.n	8004550 <Get_Prescaler+0x74>
				break;
 800454c:	bf00      	nop
 800454e:	e000      	b.n	8004552 <Get_Prescaler+0x76>
				break;
 8004550:	bf00      	nop
			}
		}
		now=now->next;														//Go to next button
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	60fb      	str	r3, [r7, #12]
	}while(now!=NULL);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1c6      	bne.n	80044ec <Get_Prescaler+0x10>

	if((Button_State&0x02)!=0)												//Set value based on Button_State
 800455e:	4b0c      	ldr	r3, [pc, #48]	; (8004590 <Get_Prescaler+0xb4>)
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	2b00      	cmp	r3, #0
 8004568:	d002      	beq.n	8004570 <Get_Prescaler+0x94>
		Prescaler*=2;
 800456a:	7afb      	ldrb	r3, [r7, #11]
 800456c:	005b      	lsls	r3, r3, #1
 800456e:	72fb      	strb	r3, [r7, #11]
	if((Button_State&0x01)!=0)
 8004570:	4b07      	ldr	r3, [pc, #28]	; (8004590 <Get_Prescaler+0xb4>)
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	f003 0301 	and.w	r3, r3, #1
 8004578:	2b00      	cmp	r3, #0
 800457a:	d004      	beq.n	8004586 <Get_Prescaler+0xaa>
		Prescaler*=5;
 800457c:	7afb      	ldrb	r3, [r7, #11]
 800457e:	461a      	mov	r2, r3
 8004580:	0092      	lsls	r2, r2, #2
 8004582:	4413      	add	r3, r2
 8004584:	72fb      	strb	r3, [r7, #11]

	return Prescaler;														//Return value
 8004586:	7afb      	ldrb	r3, [r7, #11]
}
 8004588:	4618      	mov	r0, r3
 800458a:	3710      	adds	r7, #16
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	200002b7 	.word	0x200002b7

08004594 <Menu_List_Element_Value_Change>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void Menu_List_Element_Value_Change(struct Menu_List_Element_Vector *self, uint8_t y, struct Encoder *Encoder, struct Button_Vector *Button_Vector){
 8004594:	b5b0      	push	{r4, r5, r7, lr}
 8004596:	b086      	sub	sp, #24
 8004598:	af02      	add	r7, sp, #8
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	607a      	str	r2, [r7, #4]
 800459e:	603b      	str	r3, [r7, #0]
 80045a0:	460b      	mov	r3, r1
 80045a2:	72fb      	strb	r3, [r7, #11]
	/**
	 *	Changing value of Menu_List_Element and drawing it's value until encoder Button state not Encoder_Button_long
	 */
	UI_Encoder_Reset_Button_State(Encoder);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f7ff fba6 	bl	8003cf6 <UI_Encoder_Reset_Button_State>

	UI_Set_Cursor(Menu_List_Element_Vector_Cursor_x-1, y);																//SET CURSOR ON VALUE
 80045aa:	7afb      	ldrb	r3, [r7, #11]
 80045ac:	4619      	mov	r1, r3
 80045ae:	200f      	movs	r0, #15
 80045b0:	f7ff fa5e 	bl	8003a70 <UI_Set_Cursor>
	while(Encoder_Get_Button_State(Encoder)!=Encoder_Button_long){
 80045b4:	e01d      	b.n	80045f2 <Menu_List_Element_Value_Change+0x5e>
		UI_Change_Value_Ptr(self->parametr, (self->step)*Get_Prescaler(Button_Vector), self->mode, 0, 65535, Encoder);	//Changing value
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	691d      	ldr	r5, [r3, #16]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	7b5c      	ldrb	r4, [r3, #13]
 80045be:	6838      	ldr	r0, [r7, #0]
 80045c0:	f7ff ff8c 	bl	80044dc <Get_Prescaler>
 80045c4:	4603      	mov	r3, r0
 80045c6:	fb04 f303 	mul.w	r3, r4, r3
 80045ca:	b2d9      	uxtb	r1, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	7b1a      	ldrb	r2, [r3, #12]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	9301      	str	r3, [sp, #4]
 80045d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80045d8:	9300      	str	r3, [sp, #0]
 80045da:	2300      	movs	r3, #0
 80045dc:	4628      	mov	r0, r5
 80045de:	f7ff fa87 	bl	8003af0 <UI_Change_Value_Ptr>
		UI_Draw_Parmetr_Ptr(self->parametr, Menu_List_Element_Vector_Cursor_x, y, self->mode);							//Draw value
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6918      	ldr	r0, [r3, #16]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	7b1b      	ldrb	r3, [r3, #12]
 80045ea:	7afa      	ldrb	r2, [r7, #11]
 80045ec:	2110      	movs	r1, #16
 80045ee:	f7ff f86b 	bl	80036c8 <UI_Draw_Parmetr_Ptr>
	while(Encoder_Get_Button_State(Encoder)!=Encoder_Button_long){
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f7fc fe83 	bl	80012fe <Encoder_Get_Button_State>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b03      	cmp	r3, #3
 80045fc:	d1db      	bne.n	80045b6 <Menu_List_Element_Value_Change+0x22>
	}
	UI_Encoder_Reset_Button_State(Encoder);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f7ff fb79 	bl	8003cf6 <UI_Encoder_Reset_Button_State>

}
 8004604:	bf00      	nop
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	bdb0      	pop	{r4, r5, r7, pc}

0800460c <UI_Menu_List_Element_Vector_it>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void UI_Menu_List_Element_Vector_it(struct Menu_List_Element_Vector *self, char *Name, struct Encoder *Encoder, struct Button_Vector *Button_Vector){
 800460c:	b580      	push	{r7, lr}
 800460e:	b088      	sub	sp, #32
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
 8004618:	603b      	str	r3, [r7, #0]
	/**
	 * 	Display name, value of each element of current vector and can change value based on Type..... until Encoder button != Encoder_Button_long
	 *
	 */

	int Menu_Count=0,Menu_Count_Prew=255;				//Menu_Count current menu options, Menu_Count_Prew=255 needed to draw menu at first iteration
 800461a:	2300      	movs	r3, #0
 800461c:	61fb      	str	r3, [r7, #28]
 800461e:	23ff      	movs	r3, #255	; 0xff
 8004620:	61bb      	str	r3, [r7, #24]
	uint8_t MAX_ID=Menu_List_Vector_Size(self);			//Get max size of vector
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f7ff ff41 	bl	80044aa <Menu_List_Vector_Size>
 8004628:	4603      	mov	r3, r0
 800462a:	74fb      	strb	r3, [r7, #19]

	UI_Encoder_Reset_Button_State(Encoder);				//Reset encoder button state
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f7ff fb62 	bl	8003cf6 <UI_Encoder_Reset_Button_State>
	UI_Draw_String_Center(Name, 0, Inverse_Display_MODE);	//Draw Submenu name
 8004632:	2201      	movs	r2, #1
 8004634:	2100      	movs	r1, #0
 8004636:	68b8      	ldr	r0, [r7, #8]
 8004638:	f7ff fb28 	bl	8003c8c <UI_Draw_String_Center>
	UI_Set_Cursor(0, Menu_Count% (Draw_LIMIT-Menu_List_Element_Vector_Draw_Shift)+Menu_List_Element_Vector_Draw_Shift);	//Set cursor to first element based on shift
 800463c:	69fa      	ldr	r2, [r7, #28]
 800463e:	4b57      	ldr	r3, [pc, #348]	; (800479c <UI_Menu_List_Element_Vector_it+0x190>)
 8004640:	fb83 1302 	smull	r1, r3, r3, r2
 8004644:	4413      	add	r3, r2
 8004646:	1099      	asrs	r1, r3, #2
 8004648:	17d3      	asrs	r3, r2, #31
 800464a:	1ac9      	subs	r1, r1, r3
 800464c:	460b      	mov	r3, r1
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	1a5b      	subs	r3, r3, r1
 8004652:	1ad1      	subs	r1, r2, r3
 8004654:	b2cb      	uxtb	r3, r1
 8004656:	3301      	adds	r3, #1
 8004658:	b2db      	uxtb	r3, r3
 800465a:	4619      	mov	r1, r3
 800465c:	2000      	movs	r0, #0
 800465e:	f7ff fa07 	bl	8003a70 <UI_Set_Cursor>

	while(Encoder_Get_Button_State(Encoder)!=Encoder_Button_long){	//Main body which	contain main logic work with Menu_List_Element_Vector
 8004662:	e08f      	b.n	8004784 <UI_Menu_List_Element_Vector_it+0x178>

		Menu_Count+= Encoder_Get_Rotary_Switch_Buffer(Encoder);		//Get Menu_Count based on Rotary_Switch_Buffer
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f7fc fe32 	bl	80012ce <Encoder_Get_Rotary_Switch_Buffer>
 800466a:	4602      	mov	r2, r0
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	4413      	add	r3, r2
 8004670:	61fb      	str	r3, [r7, #28]
		Encoder_Reset_Rotary_Switch_Buffer(Encoder);				//Reset  Rotary_Switch_Buffer
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f7fc fe1f 	bl	80012b6 <Encoder_Reset_Rotary_Switch_Buffer>

		if(Menu_Count<0)											//Check if current Menu_Count is more than 0 and less than size of vector
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	2b00      	cmp	r3, #0
 800467c:	da02      	bge.n	8004684 <UI_Menu_List_Element_Vector_it+0x78>
			Menu_Count=0;
 800467e:	2300      	movs	r3, #0
 8004680:	61fb      	str	r3, [r7, #28]
 8004682:	e005      	b.n	8004690 <UI_Menu_List_Element_Vector_it+0x84>
		else if(Menu_Count>MAX_ID)
 8004684:	7cfb      	ldrb	r3, [r7, #19]
 8004686:	69fa      	ldr	r2, [r7, #28]
 8004688:	429a      	cmp	r2, r3
 800468a:	dd01      	ble.n	8004690 <UI_Menu_List_Element_Vector_it+0x84>
			Menu_Count=MAX_ID;
 800468c:	7cfb      	ldrb	r3, [r7, #19]
 800468e:	61fb      	str	r3, [r7, #28]

		if(Menu_Count_Prew!=Menu_Count){							//if Menu_Count was changed
 8004690:	69ba      	ldr	r2, [r7, #24]
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	429a      	cmp	r2, r3
 8004696:	d038      	beq.n	800470a <UI_Menu_List_Element_Vector_it+0xfe>
			if(((Menu_Count/(Draw_LIMIT-Menu_List_Element_Vector_Draw_Shift))*(Draw_LIMIT-Menu_List_Element_Vector_Draw_Shift))!=((Menu_Count_Prew/(Draw_LIMIT-Menu_List_Element_Vector_Draw_Shift))*(Draw_LIMIT-Menu_List_Element_Vector_Draw_Shift)))
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	4a40      	ldr	r2, [pc, #256]	; (800479c <UI_Menu_List_Element_Vector_it+0x190>)
 800469c:	fb82 1203 	smull	r1, r2, r2, r3
 80046a0:	441a      	add	r2, r3
 80046a2:	1092      	asrs	r2, r2, #2
 80046a4:	17db      	asrs	r3, r3, #31
 80046a6:	1ad2      	subs	r2, r2, r3
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	493c      	ldr	r1, [pc, #240]	; (800479c <UI_Menu_List_Element_Vector_it+0x190>)
 80046ac:	fb81 0103 	smull	r0, r1, r1, r3
 80046b0:	4419      	add	r1, r3
 80046b2:	1089      	asrs	r1, r1, #2
 80046b4:	17db      	asrs	r3, r3, #31
 80046b6:	1acb      	subs	r3, r1, r3
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d011      	beq.n	80046e0 <UI_Menu_List_Element_Vector_it+0xd4>
				// if Menu_Count more than quantity of rows on display than redraw new page with next names and values based on vector
				Menu_List_Element_Vector_Draw(self, (uint8_t)(Menu_Count/(Draw_LIMIT-Menu_List_Element_Vector_Draw_Shift))*(Draw_LIMIT-Menu_List_Element_Vector_Draw_Shift), Draw_LIMIT-Menu_List_Element_Vector_Draw_Shift);
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	4a37      	ldr	r2, [pc, #220]	; (800479c <UI_Menu_List_Element_Vector_it+0x190>)
 80046c0:	fb82 1203 	smull	r1, r2, r2, r3
 80046c4:	441a      	add	r2, r3
 80046c6:	1092      	asrs	r2, r2, #2
 80046c8:	17db      	asrs	r3, r3, #31
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	461a      	mov	r2, r3
 80046d0:	00d2      	lsls	r2, r2, #3
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2207      	movs	r2, #7
 80046d8:	4619      	mov	r1, r3
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f7ff feb1 	bl	8004442 <Menu_List_Element_Vector_Draw>
			UI_Set_Cursor(0, Menu_Count% (Draw_LIMIT-Menu_List_Element_Vector_Draw_Shift)+Menu_List_Element_Vector_Draw_Shift);	//Change cursor position every time
 80046e0:	69fa      	ldr	r2, [r7, #28]
 80046e2:	4b2e      	ldr	r3, [pc, #184]	; (800479c <UI_Menu_List_Element_Vector_it+0x190>)
 80046e4:	fb83 1302 	smull	r1, r3, r3, r2
 80046e8:	4413      	add	r3, r2
 80046ea:	1099      	asrs	r1, r3, #2
 80046ec:	17d3      	asrs	r3, r2, #31
 80046ee:	1ac9      	subs	r1, r1, r3
 80046f0:	460b      	mov	r3, r1
 80046f2:	00db      	lsls	r3, r3, #3
 80046f4:	1a5b      	subs	r3, r3, r1
 80046f6:	1ad1      	subs	r1, r2, r3
 80046f8:	b2cb      	uxtb	r3, r1
 80046fa:	3301      	adds	r3, #1
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	4619      	mov	r1, r3
 8004700:	2000      	movs	r0, #0
 8004702:	f7ff f9b5 	bl	8003a70 <UI_Set_Cursor>
			Menu_Count_Prew=Menu_Count;
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	61bb      	str	r3, [r7, #24]
		}

		if(Encoder_Get_Button_State(Encoder)==Encoder_Button_Short){	//If encoder button was pressed
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f7fc fdf7 	bl	80012fe <Encoder_Get_Button_State>
 8004710:	4603      	mov	r3, r0
 8004712:	2b02      	cmp	r3, #2
 8004714:	d136      	bne.n	8004784 <UI_Menu_List_Element_Vector_it+0x178>
			struct Menu_List_Element_Vector *now;
			now=self;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	617b      	str	r3, [r7, #20]
			while(now->ID!=Menu_Count){				//skip to Menu_List_Element which ID is equal to Menu_Count
 800471a:	e002      	b.n	8004722 <UI_Menu_List_Element_Vector_it+0x116>
				now=now->next;
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	617b      	str	r3, [r7, #20]
			while(now->ID!=Menu_Count){				//skip to Menu_List_Element which ID is equal to Menu_Count
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	791b      	ldrb	r3, [r3, #4]
 8004726:	461a      	mov	r2, r3
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	4293      	cmp	r3, r2
 800472c:	d1f6      	bne.n	800471c <UI_Menu_List_Element_Vector_it+0x110>
			}
			Menu_List_Element_Value_Change(now, now->ID% (Draw_LIMIT-Menu_List_Element_Vector_Draw_Shift)+Menu_List_Element_Vector_Draw_Shift, Encoder, Button_Vector);
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	791a      	ldrb	r2, [r3, #4]
 8004732:	4b1b      	ldr	r3, [pc, #108]	; (80047a0 <UI_Menu_List_Element_Vector_it+0x194>)
 8004734:	fba3 1302 	umull	r1, r3, r3, r2
 8004738:	1ad1      	subs	r1, r2, r3
 800473a:	0849      	lsrs	r1, r1, #1
 800473c:	440b      	add	r3, r1
 800473e:	0899      	lsrs	r1, r3, #2
 8004740:	460b      	mov	r3, r1
 8004742:	00db      	lsls	r3, r3, #3
 8004744:	1a5b      	subs	r3, r3, r1
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	b2db      	uxtb	r3, r3
 800474a:	3301      	adds	r3, #1
 800474c:	b2d9      	uxtb	r1, r3
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	6978      	ldr	r0, [r7, #20]
 8004754:	f7ff ff1e 	bl	8004594 <Menu_List_Element_Value_Change>
			//change value
			UI_Set_Cursor(0, Menu_Count% (Draw_LIMIT-Menu_List_Element_Vector_Draw_Shift)+Menu_List_Element_Vector_Draw_Shift);	//Return cursor
 8004758:	69fa      	ldr	r2, [r7, #28]
 800475a:	4b10      	ldr	r3, [pc, #64]	; (800479c <UI_Menu_List_Element_Vector_it+0x190>)
 800475c:	fb83 1302 	smull	r1, r3, r3, r2
 8004760:	4413      	add	r3, r2
 8004762:	1099      	asrs	r1, r3, #2
 8004764:	17d3      	asrs	r3, r2, #31
 8004766:	1ac9      	subs	r1, r1, r3
 8004768:	460b      	mov	r3, r1
 800476a:	00db      	lsls	r3, r3, #3
 800476c:	1a5b      	subs	r3, r3, r1
 800476e:	1ad1      	subs	r1, r2, r3
 8004770:	b2cb      	uxtb	r3, r1
 8004772:	3301      	adds	r3, #1
 8004774:	b2db      	uxtb	r3, r3
 8004776:	4619      	mov	r1, r3
 8004778:	2000      	movs	r0, #0
 800477a:	f7ff f979 	bl	8003a70 <UI_Set_Cursor>
			UI_Encoder_Reset_Button_State(Encoder);		//Reset encoder button state
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f7ff fab9 	bl	8003cf6 <UI_Encoder_Reset_Button_State>
	while(Encoder_Get_Button_State(Encoder)!=Encoder_Button_long){	//Main body which	contain main logic work with Menu_List_Element_Vector
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f7fc fdba 	bl	80012fe <Encoder_Get_Button_State>
 800478a:	4603      	mov	r3, r0
 800478c:	2b03      	cmp	r3, #3
 800478e:	f47f af69 	bne.w	8004664 <UI_Menu_List_Element_Vector_it+0x58>
		}
	}
}
 8004792:	bf00      	nop
 8004794:	bf00      	nop
 8004796:	3720      	adds	r7, #32
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	92492493 	.word	0x92492493
 80047a0:	24924925 	.word	0x24924925

080047a4 <UI_Menu_List_Element_Create>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void UI_Menu_List_Element_Create(struct Menu_List_Element_Vector *head,struct Menu_List_Element_Vector *ini_element){
 80047a4:	b5b0      	push	{r4, r5, r7, lr}
 80047a6:	b086      	sub	sp, #24
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
	/**
	 * Add a new element to enu_List_Element_Vector based on copy of ini_element
	 */
	char *st= malloc((sizeof(char)*(strlen(ini_element->name)+1)));
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7fb fccc 	bl	8000150 <strlen>
 80047b8:	4603      	mov	r3, r0
 80047ba:	3301      	adds	r3, #1
 80047bc:	4618      	mov	r0, r3
 80047be:	f006 fb9f 	bl	800af00 <malloc>
 80047c2:	4603      	mov	r3, r0
 80047c4:	613b      	str	r3, [r7, #16]
	strcpy(st,ini_element->name);
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	4619      	mov	r1, r3
 80047cc:	6938      	ldr	r0, [r7, #16]
 80047ce:	f006 fc97 	bl	800b100 <strcpy>
	if(head->parametr==NULL){				//If Head have not any data
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d10e      	bne.n	80047f8 <UI_Menu_List_Element_Create+0x54>
		*head=*ini_element;					//Head
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	4614      	mov	r4, r2
 80047e0:	461d      	mov	r5, r3
 80047e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047e6:	682b      	ldr	r3, [r5, #0]
 80047e8:	6023      	str	r3, [r4, #0]
		head->ID=0;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	711a      	strb	r2, [r3, #4]
		head->next=NULL;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	601a      	str	r2, [r3, #0]
			NEW_Element->ID++;
		}
		NEW_Element->ID++;
		now->next=NEW_Element;																			//pointer to a next element pointing to a new element
	}
}
 80047f6:	e02c      	b.n	8004852 <UI_Menu_List_Element_Create+0xae>
		struct Menu_List_Element_Vector *now=head;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	617b      	str	r3, [r7, #20]
		struct Menu_List_Element_Vector *NEW_Element= malloc(sizeof(struct Menu_List_Element_Vector));	//Create new element
 80047fc:	2014      	movs	r0, #20
 80047fe:	f006 fb7f 	bl	800af00 <malloc>
 8004802:	4603      	mov	r3, r0
 8004804:	60fb      	str	r3, [r7, #12]
		*NEW_Element=*ini_element;																		//Copy data to the new element
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	4614      	mov	r4, r2
 800480c:	461d      	mov	r5, r3
 800480e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004810:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004812:	682b      	ldr	r3, [r5, #0]
 8004814:	6023      	str	r3, [r4, #0]
		NEW_Element->ID=head->ID;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	791a      	ldrb	r2, [r3, #4]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	711a      	strb	r2, [r3, #4]
		NEW_Element->next=NULL;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	601a      	str	r2, [r3, #0]
		while(now->next!=NULL){																			//skip head to last element
 8004824:	e008      	b.n	8004838 <UI_Menu_List_Element_Create+0x94>
			now=now->next;
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	617b      	str	r3, [r7, #20]
			NEW_Element->ID++;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	791b      	ldrb	r3, [r3, #4]
 8004830:	3301      	adds	r3, #1
 8004832:	b2da      	uxtb	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	711a      	strb	r2, [r3, #4]
		while(now->next!=NULL){																			//skip head to last element
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1f2      	bne.n	8004826 <UI_Menu_List_Element_Create+0x82>
		NEW_Element->ID++;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	791b      	ldrb	r3, [r3, #4]
 8004844:	3301      	adds	r3, #1
 8004846:	b2da      	uxtb	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	711a      	strb	r2, [r3, #4]
		now->next=NEW_Element;																			//pointer to a next element pointing to a new element
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	601a      	str	r2, [r3, #0]
}
 8004852:	bf00      	nop
 8004854:	3718      	adds	r7, #24
 8004856:	46bd      	mov	sp, r7
 8004858:	bdb0      	pop	{r4, r5, r7, pc}

0800485a <Menu_List_Size>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
uint8_t Menu_List_Size(struct Menu_List_Vector *self){
 800485a:	b480      	push	{r7}
 800485c:	b085      	sub	sp, #20
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
	/**
	 * Return quantity of elements in  Menu_List_Vector
	 */
	uint8_t MAX_ID=0;
 8004862:	2300      	movs	r3, #0
 8004864:	73fb      	strb	r3, [r7, #15]
	while(self->next!=NULL){
 8004866:	e005      	b.n	8004874 <Menu_List_Size+0x1a>
			self=self->next;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	607b      	str	r3, [r7, #4]
			MAX_ID++;
 800486e:	7bfb      	ldrb	r3, [r7, #15]
 8004870:	3301      	adds	r3, #1
 8004872:	73fb      	strb	r3, [r7, #15]
	while(self->next!=NULL){
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1f5      	bne.n	8004868 <Menu_List_Size+0xe>
	}
	return MAX_ID++;
 800487c:	7bfb      	ldrb	r3, [r7, #15]
 800487e:	1c5a      	adds	r2, r3, #1
 8004880:	73fa      	strb	r2, [r7, #15]
}
 8004882:	4618      	mov	r0, r3
 8004884:	3714      	adds	r7, #20
 8004886:	46bd      	mov	sp, r7
 8004888:	bc80      	pop	{r7}
 800488a:	4770      	bx	lr

0800488c <Menu_List_Vector_Draw>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void Menu_List_Vector_Draw(struct Menu_List_Vector *self, uint8_t start_point, uint8_t quantity){
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	460b      	mov	r3, r1
 8004896:	70fb      	strb	r3, [r7, #3]
 8004898:	4613      	mov	r3, r2
 800489a:	70bb      	strb	r3, [r7, #2]
	/**
	 * Draw all names of submenu based on  Menu_List_Vector and clear all other lines
	 */
	while(self->ID!=start_point)						//skip to statr point
 800489c:	e002      	b.n	80048a4 <Menu_List_Vector_Draw+0x18>
		self=self->next;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	607b      	str	r3, [r7, #4]
	while(self->ID!=start_point)						//skip to statr point
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	7a1b      	ldrb	r3, [r3, #8]
 80048a8:	78fa      	ldrb	r2, [r7, #3]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d1f7      	bne.n	800489e <Menu_List_Vector_Draw+0x12>
	for(uint8_t i=1;i<Menu_List_Vector_Draw_Shift;i++){//Clear all lined before Menu_List_Vector. Line 0 is NAME of MENU
 80048ae:	2301      	movs	r3, #1
 80048b0:	73fb      	strb	r3, [r7, #15]
 80048b2:	e006      	b.n	80048c2 <Menu_List_Vector_Draw+0x36>
		UI_Clear_Line(i);
 80048b4:	7bfb      	ldrb	r3, [r7, #15]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7ff f90a 	bl	8003ad0 <UI_Clear_Line>
	for(uint8_t i=1;i<Menu_List_Vector_Draw_Shift;i++){//Clear all lined before Menu_List_Vector. Line 0 is NAME of MENU
 80048bc:	7bfb      	ldrb	r3, [r7, #15]
 80048be:	3301      	adds	r3, #1
 80048c0:	73fb      	strb	r3, [r7, #15]
 80048c2:	7bfb      	ldrb	r3, [r7, #15]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d9f5      	bls.n	80048b4 <Menu_List_Vector_Draw+0x28>
	}
	for(uint8_t i=Menu_List_Vector_Draw_Shift;i<quantity+Menu_List_Vector_Draw_Shift;i++){						//Draw all submenu's names and clear all other lines
 80048c8:	2302      	movs	r3, #2
 80048ca:	73bb      	strb	r3, [r7, #14]
 80048cc:	e018      	b.n	8004900 <Menu_List_Vector_Draw+0x74>
		if(self!=NULL){
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00e      	beq.n	80048f2 <Menu_List_Vector_Draw+0x66>
			UI_Clear_Line(i);
 80048d4:	7bbb      	ldrb	r3, [r7, #14]
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7ff f8fa 	bl	8003ad0 <UI_Clear_Line>
			UI_Draw_String_Center(self->name, i, Direct_Display_MODE);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	7bb9      	ldrb	r1, [r7, #14]
 80048e2:	2200      	movs	r2, #0
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7ff f9d1 	bl	8003c8c <UI_Draw_String_Center>
			self=self->next;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	607b      	str	r3, [r7, #4]
 80048f0:	e003      	b.n	80048fa <Menu_List_Vector_Draw+0x6e>
		}
		else
			UI_Clear_Line(i);
 80048f2:	7bbb      	ldrb	r3, [r7, #14]
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7ff f8eb 	bl	8003ad0 <UI_Clear_Line>
	for(uint8_t i=Menu_List_Vector_Draw_Shift;i<quantity+Menu_List_Vector_Draw_Shift;i++){						//Draw all submenu's names and clear all other lines
 80048fa:	7bbb      	ldrb	r3, [r7, #14]
 80048fc:	3301      	adds	r3, #1
 80048fe:	73bb      	strb	r3, [r7, #14]
 8004900:	78bb      	ldrb	r3, [r7, #2]
 8004902:	1c5a      	adds	r2, r3, #1
 8004904:	7bbb      	ldrb	r3, [r7, #14]
 8004906:	429a      	cmp	r2, r3
 8004908:	dae1      	bge.n	80048ce <Menu_List_Vector_Draw+0x42>
	}
}
 800490a:	bf00      	nop
 800490c:	bf00      	nop
 800490e:	3710      	adds	r7, #16
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <Menu_Set_List_Cursor>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void Menu_Set_List_Cursor(struct Menu_List_Vector *self, uint8_t start_point, uint8_t quantity, uint8_t cursor_y){
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	4608      	mov	r0, r1
 800491e:	4611      	mov	r1, r2
 8004920:	461a      	mov	r2, r3
 8004922:	4603      	mov	r3, r0
 8004924:	70fb      	strb	r3, [r7, #3]
 8004926:	460b      	mov	r3, r1
 8004928:	70bb      	strb	r3, [r7, #2]
 800492a:	4613      	mov	r3, r2
 800492c:	707b      	strb	r3, [r7, #1]
	/**
	 *	Draw all names of submenu based on  Menu_List_Vector and inverse NAME output on cursor_y
	 */
	while(self->ID!=start_point)			//skip to start point
 800492e:	e002      	b.n	8004936 <Menu_Set_List_Cursor+0x22>
		self=self->next;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	607b      	str	r3, [r7, #4]
	while(self->ID!=start_point)			//skip to start point
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	7a1b      	ldrb	r3, [r3, #8]
 800493a:	78fa      	ldrb	r2, [r7, #3]
 800493c:	429a      	cmp	r2, r3
 800493e:	d1f7      	bne.n	8004930 <Menu_Set_List_Cursor+0x1c>
	for(uint8_t i=0;i<quantity;i++){		//Draw all Submenu titles
 8004940:	2300      	movs	r3, #0
 8004942:	73fb      	strb	r3, [r7, #15]
 8004944:	e01f      	b.n	8004986 <Menu_Set_List_Cursor+0x72>
		if(self!=NULL){
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d019      	beq.n	8004980 <Menu_Set_List_Cursor+0x6c>
			if(i==cursor_y)					//if selected
 800494c:	7bfa      	ldrb	r2, [r7, #15]
 800494e:	787b      	ldrb	r3, [r7, #1]
 8004950:	429a      	cmp	r2, r3
 8004952:	d109      	bne.n	8004968 <Menu_Set_List_Cursor+0x54>
				UI_Draw_String_Center(self->name, i+Menu_List_Vector_Draw_Shift, Inverse_Display_MODE);	//display title inverse
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	68d8      	ldr	r0, [r3, #12]
 8004958:	7bfb      	ldrb	r3, [r7, #15]
 800495a:	3302      	adds	r3, #2
 800495c:	b2db      	uxtb	r3, r3
 800495e:	2201      	movs	r2, #1
 8004960:	4619      	mov	r1, r3
 8004962:	f7ff f993 	bl	8003c8c <UI_Draw_String_Center>
 8004966:	e008      	b.n	800497a <Menu_Set_List_Cursor+0x66>
			else																						//else
				UI_Draw_String_Center(self->name, i+Menu_List_Vector_Draw_Shift, Direct_Display_MODE);	//display title direct
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68d8      	ldr	r0, [r3, #12]
 800496c:	7bfb      	ldrb	r3, [r7, #15]
 800496e:	3302      	adds	r3, #2
 8004970:	b2db      	uxtb	r3, r3
 8004972:	2200      	movs	r2, #0
 8004974:	4619      	mov	r1, r3
 8004976:	f7ff f989 	bl	8003c8c <UI_Draw_String_Center>
			self=self->next;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	607b      	str	r3, [r7, #4]
	for(uint8_t i=0;i<quantity;i++){		//Draw all Submenu titles
 8004980:	7bfb      	ldrb	r3, [r7, #15]
 8004982:	3301      	adds	r3, #1
 8004984:	73fb      	strb	r3, [r7, #15]
 8004986:	7bfa      	ldrb	r2, [r7, #15]
 8004988:	78bb      	ldrb	r3, [r7, #2]
 800498a:	429a      	cmp	r2, r3
 800498c:	d3db      	bcc.n	8004946 <Menu_Set_List_Cursor+0x32>
		}
	}
}
 800498e:	bf00      	nop
 8004990:	bf00      	nop
 8004992:	3710      	adds	r7, #16
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <UI_Menu_it>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void UI_Menu_it(struct Menu_List_Vector *self, struct Encoder *Encoder, struct Button_Vector *Button_Vector){
 8004998:	b580      	push	{r7, lr}
 800499a:	b088      	sub	sp, #32
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]

	int Menu_Count=0, Menu_Count_Prew=255;		//Menu_Count current menu options, Menu_Count_Prew=255 needed to draw menu at first iteration
 80049a4:	2300      	movs	r3, #0
 80049a6:	61fb      	str	r3, [r7, #28]
 80049a8:	23ff      	movs	r3, #255	; 0xff
 80049aa:	61bb      	str	r3, [r7, #24]

	uint8_t MAX_ID=Menu_List_Size(self);		//Get max size of vector
 80049ac:	68f8      	ldr	r0, [r7, #12]
 80049ae:	f7ff ff54 	bl	800485a <Menu_List_Size>
 80049b2:	4603      	mov	r3, r0
 80049b4:	74fb      	strb	r3, [r7, #19]
	UI_Encoder_Reset_Button_State(Encoder);		//Reset encoder button state
 80049b6:	68b8      	ldr	r0, [r7, #8]
 80049b8:	f7ff f99d 	bl	8003cf6 <UI_Encoder_Reset_Button_State>

	UI_Clear_Line(0);							//Clear line for Menu Title
 80049bc:	2000      	movs	r0, #0
 80049be:	f7ff f887 	bl	8003ad0 <UI_Clear_Line>
	UI_Draw_String_Center("MENU", 0, Direct_Display_MODE);	//Draw Menu Title
 80049c2:	2200      	movs	r2, #0
 80049c4:	2100      	movs	r1, #0
 80049c6:	4848      	ldr	r0, [pc, #288]	; (8004ae8 <UI_Menu_it+0x150>)
 80049c8:	f7ff f960 	bl	8003c8c <UI_Draw_String_Center>
	Menu_List_Vector_Draw(self, (uint8_t)(Menu_Count/(Draw_LIMIT-Menu_List_Vector_Draw_Shift))*(Draw_LIMIT-Menu_List_Vector_Draw_Shift), Draw_LIMIT-Menu_List_Vector_Draw_Shift);
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	4a47      	ldr	r2, [pc, #284]	; (8004aec <UI_Menu_it+0x154>)
 80049d0:	fb82 1203 	smull	r1, r2, r2, r3
 80049d4:	17db      	asrs	r3, r3, #31
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	461a      	mov	r2, r3
 80049dc:	0052      	lsls	r2, r2, #1
 80049de:	4413      	add	r3, r2
 80049e0:	005b      	lsls	r3, r3, #1
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	2206      	movs	r2, #6
 80049e6:	4619      	mov	r1, r3
 80049e8:	68f8      	ldr	r0, [r7, #12]
 80049ea:	f7ff ff4f 	bl	800488c <Menu_List_Vector_Draw>
															//Draw Menu subtitles based on Menu_List_Vector

	while(Encoder_Get_Button_State(Encoder)!=Encoder_Button_long){	//main cycle
 80049ee:	e070      	b.n	8004ad2 <UI_Menu_it+0x13a>

		Menu_Count+= Encoder_Get_Rotary_Switch_Buffer(Encoder);		//Get Menu_Count based on Rotary_Switch_Buffer
 80049f0:	68b8      	ldr	r0, [r7, #8]
 80049f2:	f7fc fc6c 	bl	80012ce <Encoder_Get_Rotary_Switch_Buffer>
 80049f6:	4602      	mov	r2, r0
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	4413      	add	r3, r2
 80049fc:	61fb      	str	r3, [r7, #28]
		Encoder_Reset_Rotary_Switch_Buffer(Encoder);				//Reset encoder button state
 80049fe:	68b8      	ldr	r0, [r7, #8]
 8004a00:	f7fc fc59 	bl	80012b6 <Encoder_Reset_Rotary_Switch_Buffer>

		if(Menu_Count<0)											//Check if current Menu_Count is more than 0 and less than size of vector
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	da02      	bge.n	8004a10 <UI_Menu_it+0x78>
			Menu_Count=0;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	61fb      	str	r3, [r7, #28]
 8004a0e:	e005      	b.n	8004a1c <UI_Menu_it+0x84>
		else if(Menu_Count>MAX_ID)
 8004a10:	7cfb      	ldrb	r3, [r7, #19]
 8004a12:	69fa      	ldr	r2, [r7, #28]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	dd01      	ble.n	8004a1c <UI_Menu_it+0x84>
			Menu_Count=MAX_ID;
 8004a18:	7cfb      	ldrb	r3, [r7, #19]
 8004a1a:	61fb      	str	r3, [r7, #28]

		if(Menu_Count_Prew!=Menu_Count){							//if Menu_Count was changed
 8004a1c:	69ba      	ldr	r2, [r7, #24]
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d01e      	beq.n	8004a62 <UI_Menu_it+0xca>
			Menu_Set_List_Cursor(self,								//Redraw cursor and subtitle list
					(uint8_t)(Menu_Count/(Draw_LIMIT-Menu_List_Vector_Draw_Shift))*(Draw_LIMIT-Menu_List_Vector_Draw_Shift),
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	4a31      	ldr	r2, [pc, #196]	; (8004aec <UI_Menu_it+0x154>)
 8004a28:	fb82 1203 	smull	r1, r2, r2, r3
 8004a2c:	17db      	asrs	r3, r3, #31
 8004a2e:	1ad3      	subs	r3, r2, r3
			Menu_Set_List_Cursor(self,								//Redraw cursor and subtitle list
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	461a      	mov	r2, r3
 8004a34:	0052      	lsls	r2, r2, #1
 8004a36:	4413      	add	r3, r2
 8004a38:	005b      	lsls	r3, r3, #1
 8004a3a:	b2d8      	uxtb	r0, r3
					Draw_LIMIT-Menu_List_Vector_Draw_Shift,
					(uint8_t)Menu_Count%(Draw_LIMIT-Menu_List_Vector_Draw_Shift));
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	b2da      	uxtb	r2, r3
			Menu_Set_List_Cursor(self,								//Redraw cursor and subtitle list
 8004a40:	4b2b      	ldr	r3, [pc, #172]	; (8004af0 <UI_Menu_it+0x158>)
 8004a42:	fba3 1302 	umull	r1, r3, r3, r2
 8004a46:	0899      	lsrs	r1, r3, #2
 8004a48:	460b      	mov	r3, r1
 8004a4a:	005b      	lsls	r3, r3, #1
 8004a4c:	440b      	add	r3, r1
 8004a4e:	005b      	lsls	r3, r3, #1
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	2206      	movs	r2, #6
 8004a56:	4601      	mov	r1, r0
 8004a58:	68f8      	ldr	r0, [r7, #12]
 8004a5a:	f7ff ff5b 	bl	8004914 <Menu_Set_List_Cursor>
			Menu_Count_Prew=Menu_Count;
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	61bb      	str	r3, [r7, #24]
		}

		if(Encoder_Get_Button_State(Encoder)==Encoder_Button_Short){   								//Element select
 8004a62:	68b8      	ldr	r0, [r7, #8]
 8004a64:	f7fc fc4b 	bl	80012fe <Encoder_Get_Button_State>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d131      	bne.n	8004ad2 <UI_Menu_it+0x13a>
			struct Menu_List_Vector *now;
			now=self;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	617b      	str	r3, [r7, #20]
			while(now->ID!=Menu_Count){
 8004a72:	e002      	b.n	8004a7a <UI_Menu_it+0xe2>
				now=now->next;																//Shift Element pointer to select element
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	617b      	str	r3, [r7, #20]
			while(now->ID!=Menu_Count){
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	7a1b      	ldrb	r3, [r3, #8]
 8004a7e:	461a      	mov	r2, r3
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d1f6      	bne.n	8004a74 <UI_Menu_it+0xdc>
			}
			UI_Menu_List_Element_Vector_it(now->Menu_List_Element_Vector, self->name, Encoder, Button_Vector);		//Transceive control to Menu_List_Element_Vector menu
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	6858      	ldr	r0, [r3, #4]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	68d9      	ldr	r1, [r3, #12]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	68ba      	ldr	r2, [r7, #8]
 8004a92:	f7ff fdbb 	bl	800460c <UI_Menu_List_Element_Vector_it>
																													//Area after resceive control start
			UI_Clear_Line(0);										//Clear line for Menu Title
 8004a96:	2000      	movs	r0, #0
 8004a98:	f7ff f81a 	bl	8003ad0 <UI_Clear_Line>
			UI_Draw_String_Center("MENU", 0, Direct_Display_MODE);	//Draw Menu Title
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	2100      	movs	r1, #0
 8004aa0:	4811      	ldr	r0, [pc, #68]	; (8004ae8 <UI_Menu_it+0x150>)
 8004aa2:	f7ff f8f3 	bl	8003c8c <UI_Draw_String_Center>
			Menu_List_Vector_Draw(self, (uint8_t)(Menu_Count/(Draw_LIMIT-Menu_List_Vector_Draw_Shift))*(Draw_LIMIT-Menu_List_Vector_Draw_Shift), Draw_LIMIT-Menu_List_Vector_Draw_Shift);
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	4a10      	ldr	r2, [pc, #64]	; (8004aec <UI_Menu_it+0x154>)
 8004aaa:	fb82 1203 	smull	r1, r2, r2, r3
 8004aae:	17db      	asrs	r3, r3, #31
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	0052      	lsls	r2, r2, #1
 8004ab8:	4413      	add	r3, r2
 8004aba:	005b      	lsls	r3, r3, #1
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	2206      	movs	r2, #6
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f7ff fee2 	bl	800488c <Menu_List_Vector_Draw>
			Menu_Count_Prew=255;									//Reset state
 8004ac8:	23ff      	movs	r3, #255	; 0xff
 8004aca:	61bb      	str	r3, [r7, #24]
			UI_Encoder_Reset_Button_State(Encoder);					//Reset encoder button state
 8004acc:	68b8      	ldr	r0, [r7, #8]
 8004ace:	f7ff f912 	bl	8003cf6 <UI_Encoder_Reset_Button_State>
	while(Encoder_Get_Button_State(Encoder)!=Encoder_Button_long){	//main cycle
 8004ad2:	68b8      	ldr	r0, [r7, #8]
 8004ad4:	f7fc fc13 	bl	80012fe <Encoder_Get_Button_State>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b03      	cmp	r3, #3
 8004adc:	d188      	bne.n	80049f0 <UI_Menu_it+0x58>
																	//Area after resceive control end
		}
	}
}
 8004ade:	bf00      	nop
 8004ae0:	bf00      	nop
 8004ae2:	3720      	adds	r7, #32
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	0800b238 	.word	0x0800b238
 8004aec:	2aaaaaab 	.word	0x2aaaaaab
 8004af0:	aaaaaaab 	.word	0xaaaaaaab

08004af4 <UI_Menu_List_Create>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void UI_Menu_List_Create(struct Menu_List_Vector *List_Vector, struct Menu_List_Element_Vector *List_Element_Vector, char *name){
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b088      	sub	sp, #32
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	607a      	str	r2, [r7, #4]
	/**
	 * Add a new element to List_Vector based on copy of List_Element_Vector
	 */
	char *st= malloc((sizeof(char)*(strlen(name)+1)));			//Lock memory for name str
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f7fb fb25 	bl	8000150 <strlen>
 8004b06:	4603      	mov	r3, r0
 8004b08:	3301      	adds	r3, #1
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f006 f9f8 	bl	800af00 <malloc>
 8004b10:	4603      	mov	r3, r0
 8004b12:	61bb      	str	r3, [r7, #24]
	strcpy(st,name);											//Copy string
 8004b14:	6879      	ldr	r1, [r7, #4]
 8004b16:	69b8      	ldr	r0, [r7, #24]
 8004b18:	f006 faf2 	bl	800b100 <strcpy>
	if(List_Vector->Menu_List_Element_Vector==NULL){			//If Head have not any data
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d109      	bne.n	8004b38 <UI_Menu_List_Create+0x44>
		List_Vector->ID=0;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	721a      	strb	r2, [r3, #8]
		List_Vector->name=st;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	69ba      	ldr	r2, [r7, #24]
 8004b2e:	60da      	str	r2, [r3, #12]
		List_Vector->Menu_List_Element_Vector=List_Element_Vector;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	68ba      	ldr	r2, [r7, #8]
 8004b34:	605a      	str	r2, [r3, #4]
			NEW_Element->ID++;
		}
		NEW_Element->ID++;
		now->next=NEW_Element;
	}
}
 8004b36:	e02a      	b.n	8004b8e <UI_Menu_List_Create+0x9a>
		struct Menu_List_Vector *now=List_Vector;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	61fb      	str	r3, [r7, #28]
		struct Menu_List_Vector *NEW_Element=malloc(sizeof(struct Menu_List_Vector));	//create new element
 8004b3c:	2010      	movs	r0, #16
 8004b3e:	f006 f9df 	bl	800af00 <malloc>
 8004b42:	4603      	mov	r3, r0
 8004b44:	617b      	str	r3, [r7, #20]
		NEW_Element->ID=List_Vector->ID;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	7a1a      	ldrb	r2, [r3, #8]
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	721a      	strb	r2, [r3, #8]
		NEW_Element->next=NULL;
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	2200      	movs	r2, #0
 8004b52:	601a      	str	r2, [r3, #0]
		NEW_Element->name=st;
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	69ba      	ldr	r2, [r7, #24]
 8004b58:	60da      	str	r2, [r3, #12]
		NEW_Element->Menu_List_Element_Vector=List_Element_Vector;						//Copy data to the new element
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	68ba      	ldr	r2, [r7, #8]
 8004b5e:	605a      	str	r2, [r3, #4]
		while(now->next!=NULL){															//Skip until current pointer is'not tail
 8004b60:	e008      	b.n	8004b74 <UI_Menu_List_Create+0x80>
			now=now->next;
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	61fb      	str	r3, [r7, #28]
			NEW_Element->ID++;
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	7a1b      	ldrb	r3, [r3, #8]
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	b2da      	uxtb	r2, r3
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	721a      	strb	r2, [r3, #8]
		while(now->next!=NULL){															//Skip until current pointer is'not tail
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1f2      	bne.n	8004b62 <UI_Menu_List_Create+0x6e>
		NEW_Element->ID++;
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	7a1b      	ldrb	r3, [r3, #8]
 8004b80:	3301      	adds	r3, #1
 8004b82:	b2da      	uxtb	r2, r3
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	721a      	strb	r2, [r3, #8]
		now->next=NEW_Element;
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	697a      	ldr	r2, [r7, #20]
 8004b8c:	601a      	str	r2, [r3, #0]
}
 8004b8e:	bf00      	nop
 8004b90:	3720      	adds	r7, #32
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
	...

08004b98 <PAC_ON_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//---------------------------------------------------------------------------------
void PAC_ON_Callback(struct PAC *self){
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]

	/**
	 * Set max MAX_Control_Value for all PID which controlling PAG
	 */
	Soldering_Heat_Gun_Set_PID_MAX_Control_Value(PAC_Get_Max_Control_Value(self), &Soldering_Heat_Gun);
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f7fd fbee 	bl	8002382 <PAC_Get_Max_Control_Value>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	4907      	ldr	r1, [pc, #28]	; (8004bc8 <PAC_ON_Callback+0x30>)
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7fe f991 	bl	8002ed2 <Soldering_Heat_Gun_Set_PID_MAX_Control_Value>
	Soldering_Separator_Set_PID_MAX_Control_Value(PAC_Get_Max_Control_Value(self), &Soldering_Separator);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f7fd fbe6 	bl	8002382 <PAC_Get_Max_Control_Value>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	4904      	ldr	r1, [pc, #16]	; (8004bcc <PAC_ON_Callback+0x34>)
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f7fe fb8c 	bl	80032d8 <Soldering_Separator_Set_PID_MAX_Control_Value>
}
 8004bc0:	bf00      	nop
 8004bc2:	3708      	adds	r7, #8
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	2000060c 	.word	0x2000060c
 8004bcc:	200006a8 	.word	0x200006a8

08004bd0 <HAL_TIM_IC_CaptureCallback>:
//---------------------------------------------------------------------------------
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
	PAC_IC_Capture_INT(PAC);
 8004bd8:	4b04      	ldr	r3, [pc, #16]	; (8004bec <HAL_TIM_IC_CaptureCallback+0x1c>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f7fd fa7b 	bl	80020d8 <PAC_IC_Capture_INT>
}
 8004be2:	bf00      	nop
 8004be4:	3708      	adds	r7, #8
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	20000730 	.word	0x20000730

08004bf0 <HAL_ADC_ConvCpltCallback>:
//--------------------------------------------------------------------------------- ADC_Callback
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
	/**
	 * After DAC_Read Analog signal into ADC_Data array
	 */
	Solder_Iron_it(&Soldering_Iron);				//PID_IT and PWM Start
 8004bf8:	4806      	ldr	r0, [pc, #24]	; (8004c14 <HAL_ADC_ConvCpltCallback+0x24>)
 8004bfa:	f7fd fdfa 	bl	80027f2 <Solder_Iron_it>
	Soldering_Heat_Gun_it(&Soldering_Heat_Gun);		//PID_IT
 8004bfe:	4806      	ldr	r0, [pc, #24]	; (8004c18 <HAL_ADC_ConvCpltCallback+0x28>)
 8004c00:	f7fe f9c9 	bl	8002f96 <Soldering_Heat_Gun_it>
	Soldering_Separator_it(&Soldering_Separator);	//PID_IT
 8004c04:	4805      	ldr	r0, [pc, #20]	; (8004c1c <HAL_ADC_ConvCpltCallback+0x2c>)
 8004c06:	f7fe fb93 	bl	8003330 <Soldering_Separator_it>
}
 8004c0a:	bf00      	nop
 8004c0c:	3708      	adds	r7, #8
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	20000560 	.word	0x20000560
 8004c18:	2000060c 	.word	0x2000060c
 8004c1c:	200006a8 	.word	0x200006a8

08004c20 <HAL_GPIO_EXTI_Callback>:
//--------------------------------------------------------------------------------- EXTI
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN){
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	4603      	mov	r3, r0
 8004c28:	80fb      	strh	r3, [r7, #6]
		Button_Vector_EXTI(&Button_Vector,&GPIO_PIN);
 8004c2a:	1dbb      	adds	r3, r7, #6
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	4808      	ldr	r0, [pc, #32]	; (8004c50 <HAL_GPIO_EXTI_Callback+0x30>)
 8004c30:	f7fc faf2 	bl	8001218 <Button_Vector_EXTI>
		Encoder_EXTI(&Encoder_P2, &GPIO_PIN);
 8004c34:	1dbb      	adds	r3, r7, #6
 8004c36:	4619      	mov	r1, r3
 8004c38:	4806      	ldr	r0, [pc, #24]	; (8004c54 <HAL_GPIO_EXTI_Callback+0x34>)
 8004c3a:	f7fc f964 	bl	8000f06 <Encoder_EXTI>
		Encoder_EXTI(&Encoder_P1, &GPIO_PIN);
 8004c3e:	1dbb      	adds	r3, r7, #6
 8004c40:	4619      	mov	r1, r3
 8004c42:	4805      	ldr	r0, [pc, #20]	; (8004c58 <HAL_GPIO_EXTI_Callback+0x38>)
 8004c44:	f7fc f95f 	bl	8000f06 <Encoder_EXTI>
}
 8004c48:	bf00      	nop
 8004c4a:	3708      	adds	r7, #8
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	2000050c 	.word	0x2000050c
 8004c54:	200004a4 	.word	0x200004a4
 8004c58:	200004d8 	.word	0x200004d8

08004c5c <HAL_TIM_PeriodElapsedCallback>:
//---------------------------------------------------------------------------------TIM_Callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]

	static uint8_t prescaler=1;


        if(htim->Instance == TIM1) //check if the interrupt comes from TIM1									//ADC DMA
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a1b      	ldr	r2, [pc, #108]	; (8004cd8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d114      	bne.n	8004c98 <HAL_TIM_PeriodElapsedCallback+0x3c>
        {
        	if(prescaler==1){													//First we needed stop PWM to read cotect temperature from ADC
 8004c6e:	4b1b      	ldr	r3, [pc, #108]	; (8004cdc <HAL_TIM_PeriodElapsedCallback+0x80>)
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d107      	bne.n	8004c86 <HAL_TIM_PeriodElapsedCallback+0x2a>
        		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);						//
 8004c76:	210c      	movs	r1, #12
 8004c78:	4819      	ldr	r0, [pc, #100]	; (8004ce0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8004c7a:	f004 fd7f 	bl	800977c <HAL_TIM_PWM_Stop>
        		prescaler=0;
 8004c7e:	4b17      	ldr	r3, [pc, #92]	; (8004cdc <HAL_TIM_PeriodElapsedCallback+0x80>)
 8004c80:	2200      	movs	r2, #0
 8004c82:	701a      	strb	r2, [r3, #0]
        	Solder_Iron_tim_it(&Soldering_Iron);
        	Button_Vector_it(&Button_Vector);
        	Encoder_it(&Encoder_P1);
        	Encoder_it(&Encoder_P2);
        }
}
 8004c84:	e023      	b.n	8004cce <HAL_TIM_PeriodElapsedCallback+0x72>
        		HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&ADC_Data[0],(uint32_t)16);	//Read data from ADC by DMA
 8004c86:	2210      	movs	r2, #16
 8004c88:	4916      	ldr	r1, [pc, #88]	; (8004ce4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8004c8a:	4817      	ldr	r0, [pc, #92]	; (8004ce8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8004c8c:	f001 fcd6 	bl	800663c <HAL_ADC_Start_DMA>
        		prescaler=1;
 8004c90:	4b12      	ldr	r3, [pc, #72]	; (8004cdc <HAL_TIM_PeriodElapsedCallback+0x80>)
 8004c92:	2201      	movs	r2, #1
 8004c94:	701a      	strb	r2, [r3, #0]
}
 8004c96:	e01a      	b.n	8004cce <HAL_TIM_PeriodElapsedCallback+0x72>
        }else if(htim->Instance == TIM3){																	//Service  TIM3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a13      	ldr	r2, [pc, #76]	; (8004cec <HAL_TIM_PeriodElapsedCallback+0x90>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d015      	beq.n	8004cce <HAL_TIM_PeriodElapsedCallback+0x72>
        }else if(htim->Instance == TIM4){						//Timer only for PAC
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a12      	ldr	r2, [pc, #72]	; (8004cf0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d110      	bne.n	8004cce <HAL_TIM_PeriodElapsedCallback+0x72>
        	Flash_Rewrite_Timer_tim_it(&Soldering_Iron, &Soldering_Heat_Gun, &Soldering_Separator);
 8004cac:	4a11      	ldr	r2, [pc, #68]	; (8004cf4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8004cae:	4912      	ldr	r1, [pc, #72]	; (8004cf8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8004cb0:	4812      	ldr	r0, [pc, #72]	; (8004cfc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8004cb2:	f7fe fccb 	bl	800364c <Flash_Rewrite_Timer_tim_it>
        	Solder_Iron_tim_it(&Soldering_Iron);
 8004cb6:	4811      	ldr	r0, [pc, #68]	; (8004cfc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8004cb8:	f7fd fdf0 	bl	800289c <Solder_Iron_tim_it>
        	Button_Vector_it(&Button_Vector);
 8004cbc:	4810      	ldr	r0, [pc, #64]	; (8004d00 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8004cbe:	f7fc fac3 	bl	8001248 <Button_Vector_it>
        	Encoder_it(&Encoder_P1);
 8004cc2:	4810      	ldr	r0, [pc, #64]	; (8004d04 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8004cc4:	f7fc fa37 	bl	8001136 <Encoder_it>
        	Encoder_it(&Encoder_P2);
 8004cc8:	480f      	ldr	r0, [pc, #60]	; (8004d08 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8004cca:	f7fc fa34 	bl	8001136 <Encoder_it>
}
 8004cce:	bf00      	nop
 8004cd0:	3708      	adds	r7, #8
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	40012c00 	.word	0x40012c00
 8004cdc:	2000023a 	.word	0x2000023a
 8004ce0:	200003c8 	.word	0x200003c8
 8004ce4:	20000734 	.word	0x20000734
 8004ce8:	200002b8 	.word	0x200002b8
 8004cec:	40000400 	.word	0x40000400
 8004cf0:	40000800 	.word	0x40000800
 8004cf4:	200006a8 	.word	0x200006a8
 8004cf8:	2000060c 	.word	0x2000060c
 8004cfc:	20000560 	.word	0x20000560
 8004d00:	2000050c 	.word	0x2000050c
 8004d04:	200004d8 	.word	0x200004d8
 8004d08:	200004a4 	.word	0x200004a4

08004d0c <BUTTON_INI>:
//--------------------------------------------------------------------------------- INI Blocks
void BUTTON_INI(void){
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b086      	sub	sp, #24
 8004d10:	af00      	add	r7, sp, #0
	/**
	 * Button initialization
	 */
	struct Button Button_ini;

	Button_ini.ID=Button_ID_SW8;		//ID
 8004d12:	2300      	movs	r3, #0
 8004d14:	703b      	strb	r3, [r7, #0]
	Button_ini.count_max=2;				//Contact bounce in tim interrupts
 8004d16:	2302      	movs	r3, #2
 8004d18:	717b      	strb	r3, [r7, #5]
	Button_ini.EXTI_PIN=GPIO_PIN_14;	//in my schematic different buttons have the same EXTI pin
 8004d1a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004d1e:	813b      	strh	r3, [r7, #8]
	Button_ini.PIN=GPIO_PIN_8;			//Actual state pin
 8004d20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d24:	817b      	strh	r3, [r7, #10]
	Button_ini.GPIO=GPIOA;				//Actual pin state GPIO
 8004d26:	4b3c      	ldr	r3, [pc, #240]	; (8004e18 <BUTTON_INI+0x10c>)
 8004d28:	60fb      	str	r3, [r7, #12]
	Button_ini.MODE=Button_Mode_Regular_With_EXTI;//MODE
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	743b      	strb	r3, [r7, #16]
	Button_Vector_Create(&Button_Vector,&Button_ini);
 8004d2e:	463b      	mov	r3, r7
 8004d30:	4619      	mov	r1, r3
 8004d32:	483a      	ldr	r0, [pc, #232]	; (8004e1c <BUTTON_INI+0x110>)
 8004d34:	f7fc fa34 	bl	80011a0 <Button_Vector_Create>

	Button_ini.ID=Button_ID_SW6;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	703b      	strb	r3, [r7, #0]
	Button_ini.count_max=2;
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	717b      	strb	r3, [r7, #5]
	Button_ini.EXTI_PIN=GPIO_PIN_14;
 8004d40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004d44:	813b      	strh	r3, [r7, #8]
	Button_ini.PIN=GPIO_PIN_9;
 8004d46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d4a:	817b      	strh	r3, [r7, #10]
	Button_ini.GPIO=GPIOA;
 8004d4c:	4b32      	ldr	r3, [pc, #200]	; (8004e18 <BUTTON_INI+0x10c>)
 8004d4e:	60fb      	str	r3, [r7, #12]
	Button_ini.MODE=Button_Mode_Regular_With_EXTI;
 8004d50:	2300      	movs	r3, #0
 8004d52:	743b      	strb	r3, [r7, #16]
	Button_Vector_Create(&Button_Vector,&Button_ini);
 8004d54:	463b      	mov	r3, r7
 8004d56:	4619      	mov	r1, r3
 8004d58:	4830      	ldr	r0, [pc, #192]	; (8004e1c <BUTTON_INI+0x110>)
 8004d5a:	f7fc fa21 	bl	80011a0 <Button_Vector_Create>

	Button_ini.ID=Button_ID_SW5;
 8004d5e:	2302      	movs	r3, #2
 8004d60:	703b      	strb	r3, [r7, #0]
	Button_ini.count_max=2;
 8004d62:	2302      	movs	r3, #2
 8004d64:	717b      	strb	r3, [r7, #5]
	Button_ini.EXTI_PIN=GPIO_PIN_14;
 8004d66:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004d6a:	813b      	strh	r3, [r7, #8]
	Button_ini.PIN=GPIO_PIN_10;
 8004d6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d70:	817b      	strh	r3, [r7, #10]
	Button_ini.GPIO=GPIOA;
 8004d72:	4b29      	ldr	r3, [pc, #164]	; (8004e18 <BUTTON_INI+0x10c>)
 8004d74:	60fb      	str	r3, [r7, #12]
	Button_ini.MODE=Button_Mode_Regular_With_EXTI;
 8004d76:	2300      	movs	r3, #0
 8004d78:	743b      	strb	r3, [r7, #16]
	Button_Vector_Create(&Button_Vector,&Button_ini);
 8004d7a:	463b      	mov	r3, r7
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	4827      	ldr	r0, [pc, #156]	; (8004e1c <BUTTON_INI+0x110>)
 8004d80:	f7fc fa0e 	bl	80011a0 <Button_Vector_Create>

	Button_ini.ID=Button_ID_SW2;
 8004d84:	2303      	movs	r3, #3
 8004d86:	703b      	strb	r3, [r7, #0]
	Button_ini.count_max=2;
 8004d88:	2302      	movs	r3, #2
 8004d8a:	717b      	strb	r3, [r7, #5]
	Button_ini.EXTI_PIN=GPIO_PIN_3;
 8004d8c:	2308      	movs	r3, #8
 8004d8e:	813b      	strh	r3, [r7, #8]
	Button_ini.PIN=GPIO_PIN_4;
 8004d90:	2310      	movs	r3, #16
 8004d92:	817b      	strh	r3, [r7, #10]
	Button_ini.GPIO=GPIOB;
 8004d94:	4b22      	ldr	r3, [pc, #136]	; (8004e20 <BUTTON_INI+0x114>)
 8004d96:	60fb      	str	r3, [r7, #12]
	Button_ini.MODE=Button_Mode_Regular_With_EXTI;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	743b      	strb	r3, [r7, #16]
	Button_Vector_Create(&Button_Vector,&Button_ini);
 8004d9c:	463b      	mov	r3, r7
 8004d9e:	4619      	mov	r1, r3
 8004da0:	481e      	ldr	r0, [pc, #120]	; (8004e1c <BUTTON_INI+0x110>)
 8004da2:	f7fc f9fd 	bl	80011a0 <Button_Vector_Create>

	Button_ini.ID=Button_ID_SW3;
 8004da6:	2304      	movs	r3, #4
 8004da8:	703b      	strb	r3, [r7, #0]
	Button_ini.count_max=2;
 8004daa:	2302      	movs	r3, #2
 8004dac:	717b      	strb	r3, [r7, #5]
	Button_ini.EXTI_PIN=GPIO_PIN_3;
 8004dae:	2308      	movs	r3, #8
 8004db0:	813b      	strh	r3, [r7, #8]
	Button_ini.PIN=GPIO_PIN_5;
 8004db2:	2320      	movs	r3, #32
 8004db4:	817b      	strh	r3, [r7, #10]
	Button_ini.GPIO=GPIOB;
 8004db6:	4b1a      	ldr	r3, [pc, #104]	; (8004e20 <BUTTON_INI+0x114>)
 8004db8:	60fb      	str	r3, [r7, #12]
	Button_ini.MODE=Button_Mode_Regular_With_EXTI;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	743b      	strb	r3, [r7, #16]
	Button_Vector_Create(&Button_Vector,&Button_ini);
 8004dbe:	463b      	mov	r3, r7
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	4816      	ldr	r0, [pc, #88]	; (8004e1c <BUTTON_INI+0x110>)
 8004dc4:	f7fc f9ec 	bl	80011a0 <Button_Vector_Create>

	Button_ini.ID=Button_ID_SW7;
 8004dc8:	2305      	movs	r3, #5
 8004dca:	703b      	strb	r3, [r7, #0]
	Button_ini.count_max=2;
 8004dcc:	2302      	movs	r3, #2
 8004dce:	717b      	strb	r3, [r7, #5]
	Button_ini.EXTI_PIN=GPIO_PIN_3;
 8004dd0:	2308      	movs	r3, #8
 8004dd2:	813b      	strh	r3, [r7, #8]
	Button_ini.PIN=GPIO_PIN_8;
 8004dd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004dd8:	817b      	strh	r3, [r7, #10]
	Button_ini.GPIO=GPIOB;
 8004dda:	4b11      	ldr	r3, [pc, #68]	; (8004e20 <BUTTON_INI+0x114>)
 8004ddc:	60fb      	str	r3, [r7, #12]
	Button_ini.MODE=Button_Mode_Regular_With_EXTI;
 8004dde:	2300      	movs	r3, #0
 8004de0:	743b      	strb	r3, [r7, #16]
	Button_Vector_Create(&Button_Vector,&Button_ini);
 8004de2:	463b      	mov	r3, r7
 8004de4:	4619      	mov	r1, r3
 8004de6:	480d      	ldr	r0, [pc, #52]	; (8004e1c <BUTTON_INI+0x110>)
 8004de8:	f7fc f9da 	bl	80011a0 <Button_Vector_Create>

	Button_ini.ID=Button_Gerkon_ID;
 8004dec:	2306      	movs	r3, #6
 8004dee:	703b      	strb	r3, [r7, #0]
	Button_ini.count_max=2;
 8004df0:	2302      	movs	r3, #2
 8004df2:	717b      	strb	r3, [r7, #5]
	Button_ini.EXTI_PIN=GPIO_PIN_2;
 8004df4:	2304      	movs	r3, #4
 8004df6:	813b      	strh	r3, [r7, #8]
	Button_ini.PIN=GPIO_PIN_2;
 8004df8:	2304      	movs	r3, #4
 8004dfa:	817b      	strh	r3, [r7, #10]
	Button_ini.GPIO=GPIOA;
 8004dfc:	4b06      	ldr	r3, [pc, #24]	; (8004e18 <BUTTON_INI+0x10c>)
 8004dfe:	60fb      	str	r3, [r7, #12]
	Button_ini.MODE=Button_Mode_Regular_With_EXTI;
 8004e00:	2300      	movs	r3, #0
 8004e02:	743b      	strb	r3, [r7, #16]
	Button_Vector_Create(&Button_Vector,&Button_ini);
 8004e04:	463b      	mov	r3, r7
 8004e06:	4619      	mov	r1, r3
 8004e08:	4804      	ldr	r0, [pc, #16]	; (8004e1c <BUTTON_INI+0x110>)
 8004e0a:	f7fc f9c9 	bl	80011a0 <Button_Vector_Create>


}
 8004e0e:	bf00      	nop
 8004e10:	3718      	adds	r7, #24
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	40010800 	.word	0x40010800
 8004e1c:	2000050c 	.word	0x2000050c
 8004e20:	40010c00 	.word	0x40010c00

08004e24 <Encoder_INI>:
//---------------------------------------------------------------------------------
void Encoder_INI(void){
 8004e24:	b580      	push	{r7, lr}
 8004e26:	af00      	add	r7, sp, #0
	Encoder_P2.ID=Encoder_ID_P2;
 8004e28:	4b2d      	ldr	r3, [pc, #180]	; (8004ee0 <Encoder_INI+0xbc>)
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	701a      	strb	r2, [r3, #0]
	Encoder_P2.Button.count_max=2;
 8004e2e:	4b2c      	ldr	r3, [pc, #176]	; (8004ee0 <Encoder_INI+0xbc>)
 8004e30:	2202      	movs	r2, #2
 8004e32:	725a      	strb	r2, [r3, #9]
	Encoder_P2.Button.EXTI_PIN=GPIO_PIN_14;
 8004e34:	4b2a      	ldr	r3, [pc, #168]	; (8004ee0 <Encoder_INI+0xbc>)
 8004e36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004e3a:	819a      	strh	r2, [r3, #12]
	Encoder_P2.Button.PIN=GPIO_PIN_15;
 8004e3c:	4b28      	ldr	r3, [pc, #160]	; (8004ee0 <Encoder_INI+0xbc>)
 8004e3e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004e42:	81da      	strh	r2, [r3, #14]
	Encoder_P2.Button.GPIO=GPIOB;
 8004e44:	4b26      	ldr	r3, [pc, #152]	; (8004ee0 <Encoder_INI+0xbc>)
 8004e46:	4a27      	ldr	r2, [pc, #156]	; (8004ee4 <Encoder_INI+0xc0>)
 8004e48:	611a      	str	r2, [r3, #16]
	Encoder_P2.Button.Presed_counter_max=3;
 8004e4a:	4b25      	ldr	r3, [pc, #148]	; (8004ee0 <Encoder_INI+0xbc>)
 8004e4c:	2203      	movs	r2, #3
 8004e4e:	71da      	strb	r2, [r3, #7]
	Encoder_P2.Button.MODE=Button_Mode_Encoder;
 8004e50:	4b23      	ldr	r3, [pc, #140]	; (8004ee0 <Encoder_INI+0xbc>)
 8004e52:	2202      	movs	r2, #2
 8004e54:	751a      	strb	r2, [r3, #20]

	Encoder_P2.Rotary_Switch.State=0;
 8004e56:	4a22      	ldr	r2, [pc, #136]	; (8004ee0 <Encoder_INI+0xbc>)
 8004e58:	7f53      	ldrb	r3, [r2, #29]
 8004e5a:	f36f 0300 	bfc	r3, #0, #1
 8004e5e:	7753      	strb	r3, [r2, #29]
	Encoder_P2.Rotary_Switch.EXTI_PIN=GPIO_PIN_12;
 8004e60:	4b1f      	ldr	r3, [pc, #124]	; (8004ee0 <Encoder_INI+0xbc>)
 8004e62:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004e66:	841a      	strh	r2, [r3, #32]
	Encoder_P2.Rotary_Switch.PIN=GPIO_PIN_13;
 8004e68:	4b1d      	ldr	r3, [pc, #116]	; (8004ee0 <Encoder_INI+0xbc>)
 8004e6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004e6e:	845a      	strh	r2, [r3, #34]	; 0x22
	Encoder_P2.Rotary_Switch.GPIO=GPIOB;
 8004e70:	4b1b      	ldr	r3, [pc, #108]	; (8004ee0 <Encoder_INI+0xbc>)
 8004e72:	4a1c      	ldr	r2, [pc, #112]	; (8004ee4 <Encoder_INI+0xc0>)
 8004e74:	625a      	str	r2, [r3, #36]	; 0x24
	Encoder_P2.Rotary_Switch.Rotary_Switch_Direcion=Reverse;
 8004e76:	4b1a      	ldr	r3, [pc, #104]	; (8004ee0 <Encoder_INI+0xbc>)
 8004e78:	2201      	movs	r2, #1
 8004e7a:	779a      	strb	r2, [r3, #30]

	Encoder_ini(&Encoder_P2);
 8004e7c:	4818      	ldr	r0, [pc, #96]	; (8004ee0 <Encoder_INI+0xbc>)
 8004e7e:	f7fc fa4a 	bl	8001316 <Encoder_ini>


	Encoder_P1.ID=Encoder_ID_P1;
 8004e82:	4b19      	ldr	r3, [pc, #100]	; (8004ee8 <Encoder_INI+0xc4>)
 8004e84:	2200      	movs	r2, #0
 8004e86:	701a      	strb	r2, [r3, #0]
	Encoder_P1.Button.count_max=2;
 8004e88:	4b17      	ldr	r3, [pc, #92]	; (8004ee8 <Encoder_INI+0xc4>)
 8004e8a:	2202      	movs	r2, #2
 8004e8c:	725a      	strb	r2, [r3, #9]
	Encoder_P1.Button.EXTI_PIN=GPIO_PIN_3;
 8004e8e:	4b16      	ldr	r3, [pc, #88]	; (8004ee8 <Encoder_INI+0xc4>)
 8004e90:	2208      	movs	r2, #8
 8004e92:	819a      	strh	r2, [r3, #12]
	Encoder_P1.Button.PIN=GPIO_PIN_12;
 8004e94:	4b14      	ldr	r3, [pc, #80]	; (8004ee8 <Encoder_INI+0xc4>)
 8004e96:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004e9a:	81da      	strh	r2, [r3, #14]
	Encoder_P1.Button.GPIO=GPIOA;
 8004e9c:	4b12      	ldr	r3, [pc, #72]	; (8004ee8 <Encoder_INI+0xc4>)
 8004e9e:	4a13      	ldr	r2, [pc, #76]	; (8004eec <Encoder_INI+0xc8>)
 8004ea0:	611a      	str	r2, [r3, #16]
	Encoder_P1.Button.Presed_counter_max=3;
 8004ea2:	4b11      	ldr	r3, [pc, #68]	; (8004ee8 <Encoder_INI+0xc4>)
 8004ea4:	2203      	movs	r2, #3
 8004ea6:	71da      	strb	r2, [r3, #7]
	Encoder_P1.Button.MODE=Button_Mode_Encoder;
 8004ea8:	4b0f      	ldr	r3, [pc, #60]	; (8004ee8 <Encoder_INI+0xc4>)
 8004eaa:	2202      	movs	r2, #2
 8004eac:	751a      	strb	r2, [r3, #20]

	Encoder_P1.Rotary_Switch.State=0;
 8004eae:	4a0e      	ldr	r2, [pc, #56]	; (8004ee8 <Encoder_INI+0xc4>)
 8004eb0:	7f53      	ldrb	r3, [r2, #29]
 8004eb2:	f36f 0300 	bfc	r3, #0, #1
 8004eb6:	7753      	strb	r3, [r2, #29]
	Encoder_P1.Rotary_Switch.EXTI_PIN=GPIO_PIN_15;
 8004eb8:	4b0b      	ldr	r3, [pc, #44]	; (8004ee8 <Encoder_INI+0xc4>)
 8004eba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004ebe:	841a      	strh	r2, [r3, #32]
	Encoder_P1.Rotary_Switch.PIN=GPIO_PIN_11;
 8004ec0:	4b09      	ldr	r3, [pc, #36]	; (8004ee8 <Encoder_INI+0xc4>)
 8004ec2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ec6:	845a      	strh	r2, [r3, #34]	; 0x22
	Encoder_P1.Rotary_Switch.GPIO=GPIOA;
 8004ec8:	4b07      	ldr	r3, [pc, #28]	; (8004ee8 <Encoder_INI+0xc4>)
 8004eca:	4a08      	ldr	r2, [pc, #32]	; (8004eec <Encoder_INI+0xc8>)
 8004ecc:	625a      	str	r2, [r3, #36]	; 0x24
	Encoder_P1.Rotary_Switch.Rotary_Switch_Direcion=Direct;
 8004ece:	4b06      	ldr	r3, [pc, #24]	; (8004ee8 <Encoder_INI+0xc4>)
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	779a      	strb	r2, [r3, #30]

	Encoder_ini(&Encoder_P1);
 8004ed4:	4804      	ldr	r0, [pc, #16]	; (8004ee8 <Encoder_INI+0xc4>)
 8004ed6:	f7fc fa1e 	bl	8001316 <Encoder_ini>

}
 8004eda:	bf00      	nop
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	200004a4 	.word	0x200004a4
 8004ee4:	40010c00 	.word	0x40010c00
 8004ee8:	200004d8 	.word	0x200004d8
 8004eec:	40010800 	.word	0x40010800

08004ef0 <MENU_INI>:
//----------------------------------------------------------------------------
void MENU_INI(void){
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b086      	sub	sp, #24
 8004ef4:	af00      	add	r7, sp, #0

	struct Menu_List_Element_Vector Menu_List_Element_Vector_ini;


	Menu_List_Element_Vector_ini.name="T_Corect_Manual";
 8004ef6:	4b8b      	ldr	r3, [pc, #556]	; (8005124 <MENU_INI+0x234>)
 8004ef8:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Iron.Temperature_Corection_C.Manual;
 8004efa:	4b8b      	ldr	r3, [pc, #556]	; (8005128 <MENU_INI+0x238>)
 8004efc:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=INT;
 8004efe:	2300      	movs	r3, #0
 8004f00:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 8004f02:	2301      	movs	r3, #1
 8004f04:	747b      	strb	r3, [r7, #17]
	UI_Menu_List_Element_Create(&Soldering_Iron_Menu_Vector,&Menu_List_Element_Vector_ini);
 8004f06:	1d3b      	adds	r3, r7, #4
 8004f08:	4619      	mov	r1, r3
 8004f0a:	4888      	ldr	r0, [pc, #544]	; (800512c <MENU_INI+0x23c>)
 8004f0c:	f7ff fc4a 	bl	80047a4 <UI_Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="Preset1";
 8004f10:	4b87      	ldr	r3, [pc, #540]	; (8005130 <MENU_INI+0x240>)
 8004f12:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Iron.Temperature_Presets_C.Preset1;
 8004f14:	4b87      	ldr	r3, [pc, #540]	; (8005134 <MENU_INI+0x244>)
 8004f16:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=UINT16;
 8004f18:	2302      	movs	r3, #2
 8004f1a:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	747b      	strb	r3, [r7, #17]
	UI_Menu_List_Element_Create(&Soldering_Iron_Menu_Vector,&Menu_List_Element_Vector_ini);
 8004f20:	1d3b      	adds	r3, r7, #4
 8004f22:	4619      	mov	r1, r3
 8004f24:	4881      	ldr	r0, [pc, #516]	; (800512c <MENU_INI+0x23c>)
 8004f26:	f7ff fc3d 	bl	80047a4 <UI_Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="T_Corect_Pres1";
 8004f2a:	4b83      	ldr	r3, [pc, #524]	; (8005138 <MENU_INI+0x248>)
 8004f2c:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Iron.Temperature_Corection_C.Preset1;
 8004f2e:	4b83      	ldr	r3, [pc, #524]	; (800513c <MENU_INI+0x24c>)
 8004f30:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=INT;
 8004f32:	2300      	movs	r3, #0
 8004f34:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 8004f36:	2301      	movs	r3, #1
 8004f38:	747b      	strb	r3, [r7, #17]
	UI_Menu_List_Element_Create(&Soldering_Iron_Menu_Vector,&Menu_List_Element_Vector_ini);
 8004f3a:	1d3b      	adds	r3, r7, #4
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	487b      	ldr	r0, [pc, #492]	; (800512c <MENU_INI+0x23c>)
 8004f40:	f7ff fc30 	bl	80047a4 <UI_Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="Preset2";
 8004f44:	4b7e      	ldr	r3, [pc, #504]	; (8005140 <MENU_INI+0x250>)
 8004f46:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Iron.Temperature_Presets_C.Preset2;
 8004f48:	4b7e      	ldr	r3, [pc, #504]	; (8005144 <MENU_INI+0x254>)
 8004f4a:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=UINT16;
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 8004f50:	2301      	movs	r3, #1
 8004f52:	747b      	strb	r3, [r7, #17]
	UI_Menu_List_Element_Create(&Soldering_Iron_Menu_Vector,&Menu_List_Element_Vector_ini);
 8004f54:	1d3b      	adds	r3, r7, #4
 8004f56:	4619      	mov	r1, r3
 8004f58:	4874      	ldr	r0, [pc, #464]	; (800512c <MENU_INI+0x23c>)
 8004f5a:	f7ff fc23 	bl	80047a4 <UI_Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="T_Corect_Pres2";
 8004f5e:	4b7a      	ldr	r3, [pc, #488]	; (8005148 <MENU_INI+0x258>)
 8004f60:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Iron.Temperature_Corection_C.Preset2;
 8004f62:	4b7a      	ldr	r3, [pc, #488]	; (800514c <MENU_INI+0x25c>)
 8004f64:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=INT;
 8004f66:	2300      	movs	r3, #0
 8004f68:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	747b      	strb	r3, [r7, #17]
	UI_Menu_List_Element_Create(&Soldering_Iron_Menu_Vector,&Menu_List_Element_Vector_ini);
 8004f6e:	1d3b      	adds	r3, r7, #4
 8004f70:	4619      	mov	r1, r3
 8004f72:	486e      	ldr	r0, [pc, #440]	; (800512c <MENU_INI+0x23c>)
 8004f74:	f7ff fc16 	bl	80047a4 <UI_Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="Sleep_mode_T";
 8004f78:	4b75      	ldr	r3, [pc, #468]	; (8005150 <MENU_INI+0x260>)
 8004f7a:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Iron.Temperature_Presets_C.Sleep;
 8004f7c:	4b75      	ldr	r3, [pc, #468]	; (8005154 <MENU_INI+0x264>)
 8004f7e:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=UINT16;
 8004f80:	2302      	movs	r3, #2
 8004f82:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 8004f84:	2301      	movs	r3, #1
 8004f86:	747b      	strb	r3, [r7, #17]
	UI_Menu_List_Element_Create(&Soldering_Iron_Menu_Vector,&Menu_List_Element_Vector_ini);
 8004f88:	1d3b      	adds	r3, r7, #4
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	4867      	ldr	r0, [pc, #412]	; (800512c <MENU_INI+0x23c>)
 8004f8e:	f7ff fc09 	bl	80047a4 <UI_Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="Sleep_timer";
 8004f92:	4b71      	ldr	r3, [pc, #452]	; (8005158 <MENU_INI+0x268>)
 8004f94:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Iron.Sleep_time;
 8004f96:	4b71      	ldr	r3, [pc, #452]	; (800515c <MENU_INI+0x26c>)
 8004f98:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=UINT8;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	747b      	strb	r3, [r7, #17]
	UI_Menu_List_Element_Create(&Soldering_Iron_Menu_Vector,&Menu_List_Element_Vector_ini);
 8004fa2:	1d3b      	adds	r3, r7, #4
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	4861      	ldr	r0, [pc, #388]	; (800512c <MENU_INI+0x23c>)
 8004fa8:	f7ff fbfc 	bl	80047a4 <UI_Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="Disable_timer";
 8004fac:	4b6c      	ldr	r3, [pc, #432]	; (8005160 <MENU_INI+0x270>)
 8004fae:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Iron.Disable_time;
 8004fb0:	4b6c      	ldr	r3, [pc, #432]	; (8005164 <MENU_INI+0x274>)
 8004fb2:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=UINT16;
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	747b      	strb	r3, [r7, #17]
	UI_Menu_List_Element_Create(&Soldering_Iron_Menu_Vector,&Menu_List_Element_Vector_ini);
 8004fbc:	1d3b      	adds	r3, r7, #4
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	485a      	ldr	r0, [pc, #360]	; (800512c <MENU_INI+0x23c>)
 8004fc2:	f7ff fbef 	bl	80047a4 <UI_Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="State";
 8004fc6:	4b68      	ldr	r3, [pc, #416]	; (8005168 <MENU_INI+0x278>)
 8004fc8:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Iron.State;
 8004fca:	4b68      	ldr	r3, [pc, #416]	; (800516c <MENU_INI+0x27c>)
 8004fcc:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=BOOL;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	747b      	strb	r3, [r7, #17]
	UI_Menu_List_Element_Create(&Soldering_Iron_Menu_Vector,&Menu_List_Element_Vector_ini);
 8004fd6:	1d3b      	adds	r3, r7, #4
 8004fd8:	4619      	mov	r1, r3
 8004fda:	4854      	ldr	r0, [pc, #336]	; (800512c <MENU_INI+0x23c>)
 8004fdc:	f7ff fbe2 	bl	80047a4 <UI_Menu_List_Element_Create>


	UI_Menu_List_Create(&Menu_List_Vector,&Soldering_Iron_Menu_Vector, " Soldering_Iron ");
 8004fe0:	4a63      	ldr	r2, [pc, #396]	; (8005170 <MENU_INI+0x280>)
 8004fe2:	4952      	ldr	r1, [pc, #328]	; (800512c <MENU_INI+0x23c>)
 8004fe4:	4863      	ldr	r0, [pc, #396]	; (8005174 <MENU_INI+0x284>)
 8004fe6:	f7ff fd85 	bl	8004af4 <UI_Menu_List_Create>


	Menu_List_Element_Vector_ini.name="T_Corect_Manual";
 8004fea:	4b4e      	ldr	r3, [pc, #312]	; (8005124 <MENU_INI+0x234>)
 8004fec:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Heat_Gun.Temperature_Corection_C.Manual;
 8004fee:	4b62      	ldr	r3, [pc, #392]	; (8005178 <MENU_INI+0x288>)
 8004ff0:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=INT;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	747b      	strb	r3, [r7, #17]
	UI_Menu_List_Element_Create(&Soldering_Heat_Gun_Menu_Vector,&Menu_List_Element_Vector_ini);
 8004ffa:	1d3b      	adds	r3, r7, #4
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	485f      	ldr	r0, [pc, #380]	; (800517c <MENU_INI+0x28c>)
 8005000:	f7ff fbd0 	bl	80047a4 <UI_Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="Preset1";
 8005004:	4b4a      	ldr	r3, [pc, #296]	; (8005130 <MENU_INI+0x240>)
 8005006:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Heat_Gun.Temperature_Presets_C.Preset1;
 8005008:	4b5d      	ldr	r3, [pc, #372]	; (8005180 <MENU_INI+0x290>)
 800500a:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=UINT16;
 800500c:	2302      	movs	r3, #2
 800500e:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 8005010:	2301      	movs	r3, #1
 8005012:	747b      	strb	r3, [r7, #17]
	UI_Menu_List_Element_Create(&Soldering_Heat_Gun_Menu_Vector,&Menu_List_Element_Vector_ini);
 8005014:	1d3b      	adds	r3, r7, #4
 8005016:	4619      	mov	r1, r3
 8005018:	4858      	ldr	r0, [pc, #352]	; (800517c <MENU_INI+0x28c>)
 800501a:	f7ff fbc3 	bl	80047a4 <UI_Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="T_Corect_Pres1";
 800501e:	4b46      	ldr	r3, [pc, #280]	; (8005138 <MENU_INI+0x248>)
 8005020:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Heat_Gun.Temperature_Corection_C.Preset1;
 8005022:	4b58      	ldr	r3, [pc, #352]	; (8005184 <MENU_INI+0x294>)
 8005024:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=INT;
 8005026:	2300      	movs	r3, #0
 8005028:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 800502a:	2301      	movs	r3, #1
 800502c:	747b      	strb	r3, [r7, #17]
	UI_Menu_List_Element_Create(&Soldering_Heat_Gun_Menu_Vector,&Menu_List_Element_Vector_ini);
 800502e:	1d3b      	adds	r3, r7, #4
 8005030:	4619      	mov	r1, r3
 8005032:	4852      	ldr	r0, [pc, #328]	; (800517c <MENU_INI+0x28c>)
 8005034:	f7ff fbb6 	bl	80047a4 <UI_Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="Preset2";
 8005038:	4b41      	ldr	r3, [pc, #260]	; (8005140 <MENU_INI+0x250>)
 800503a:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Heat_Gun.Temperature_Presets_C.Preset2;
 800503c:	4b52      	ldr	r3, [pc, #328]	; (8005188 <MENU_INI+0x298>)
 800503e:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=UINT16;
 8005040:	2302      	movs	r3, #2
 8005042:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 8005044:	2301      	movs	r3, #1
 8005046:	747b      	strb	r3, [r7, #17]
	UI_Menu_List_Element_Create(&Soldering_Heat_Gun_Menu_Vector,&Menu_List_Element_Vector_ini);
 8005048:	1d3b      	adds	r3, r7, #4
 800504a:	4619      	mov	r1, r3
 800504c:	484b      	ldr	r0, [pc, #300]	; (800517c <MENU_INI+0x28c>)
 800504e:	f7ff fba9 	bl	80047a4 <UI_Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="T_Corect_Pres2";
 8005052:	4b3d      	ldr	r3, [pc, #244]	; (8005148 <MENU_INI+0x258>)
 8005054:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Heat_Gun.Temperature_Corection_C.Preset2;
 8005056:	4b4d      	ldr	r3, [pc, #308]	; (800518c <MENU_INI+0x29c>)
 8005058:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=INT;
 800505a:	2300      	movs	r3, #0
 800505c:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 800505e:	2301      	movs	r3, #1
 8005060:	747b      	strb	r3, [r7, #17]
	UI_Menu_List_Element_Create(&Soldering_Heat_Gun_Menu_Vector,&Menu_List_Element_Vector_ini);
 8005062:	1d3b      	adds	r3, r7, #4
 8005064:	4619      	mov	r1, r3
 8005066:	4845      	ldr	r0, [pc, #276]	; (800517c <MENU_INI+0x28c>)
 8005068:	f7ff fb9c 	bl	80047a4 <UI_Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="T_Cooling_C";
 800506c:	4b48      	ldr	r3, [pc, #288]	; (8005190 <MENU_INI+0x2a0>)
 800506e:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Heat_Gun.Temperature_Coolling.C;
 8005070:	4b48      	ldr	r3, [pc, #288]	; (8005194 <MENU_INI+0x2a4>)
 8005072:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=UINT16;
 8005074:	2302      	movs	r3, #2
 8005076:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 8005078:	2301      	movs	r3, #1
 800507a:	747b      	strb	r3, [r7, #17]
	UI_Menu_List_Element_Create(&Soldering_Heat_Gun_Menu_Vector,&Menu_List_Element_Vector_ini);
 800507c:	1d3b      	adds	r3, r7, #4
 800507e:	4619      	mov	r1, r3
 8005080:	483e      	ldr	r0, [pc, #248]	; (800517c <MENU_INI+0x28c>)
 8005082:	f7ff fb8f 	bl	80047a4 <UI_Menu_List_Element_Create>



	UI_Menu_List_Create(&Menu_List_Vector,&Soldering_Heat_Gun_Menu_Vector, " Heat_Gun ");
 8005086:	4a44      	ldr	r2, [pc, #272]	; (8005198 <MENU_INI+0x2a8>)
 8005088:	493c      	ldr	r1, [pc, #240]	; (800517c <MENU_INI+0x28c>)
 800508a:	483a      	ldr	r0, [pc, #232]	; (8005174 <MENU_INI+0x284>)
 800508c:	f7ff fd32 	bl	8004af4 <UI_Menu_List_Create>



	Menu_List_Element_Vector_ini.name="T_Corect_Manual";
 8005090:	4b24      	ldr	r3, [pc, #144]	; (8005124 <MENU_INI+0x234>)
 8005092:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Separator.Temperature_Corection_C.Manual;
 8005094:	4b41      	ldr	r3, [pc, #260]	; (800519c <MENU_INI+0x2ac>)
 8005096:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=INT;
 8005098:	2300      	movs	r3, #0
 800509a:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 800509c:	2301      	movs	r3, #1
 800509e:	747b      	strb	r3, [r7, #17]
	UI_Menu_List_Element_Create(&Soldering_Separator_Menu_Vector, &Menu_List_Element_Vector_ini);
 80050a0:	1d3b      	adds	r3, r7, #4
 80050a2:	4619      	mov	r1, r3
 80050a4:	483e      	ldr	r0, [pc, #248]	; (80051a0 <MENU_INI+0x2b0>)
 80050a6:	f7ff fb7d 	bl	80047a4 <UI_Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="Preset1";
 80050aa:	4b21      	ldr	r3, [pc, #132]	; (8005130 <MENU_INI+0x240>)
 80050ac:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Separator.Temperature_Presets_C.Preset1;
 80050ae:	4b3d      	ldr	r3, [pc, #244]	; (80051a4 <MENU_INI+0x2b4>)
 80050b0:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=UINT16;
 80050b2:	2302      	movs	r3, #2
 80050b4:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 80050b6:	2301      	movs	r3, #1
 80050b8:	747b      	strb	r3, [r7, #17]
	UI_Menu_List_Element_Create(&Soldering_Separator_Menu_Vector, &Menu_List_Element_Vector_ini);
 80050ba:	1d3b      	adds	r3, r7, #4
 80050bc:	4619      	mov	r1, r3
 80050be:	4838      	ldr	r0, [pc, #224]	; (80051a0 <MENU_INI+0x2b0>)
 80050c0:	f7ff fb70 	bl	80047a4 <UI_Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="T_Corect_Pres1";
 80050c4:	4b1c      	ldr	r3, [pc, #112]	; (8005138 <MENU_INI+0x248>)
 80050c6:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Separator.Temperature_Corection_C.Preset1;
 80050c8:	4b37      	ldr	r3, [pc, #220]	; (80051a8 <MENU_INI+0x2b8>)
 80050ca:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=INT;
 80050cc:	2300      	movs	r3, #0
 80050ce:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 80050d0:	2301      	movs	r3, #1
 80050d2:	747b      	strb	r3, [r7, #17]
	UI_Menu_List_Element_Create(&Soldering_Separator_Menu_Vector, &Menu_List_Element_Vector_ini);
 80050d4:	1d3b      	adds	r3, r7, #4
 80050d6:	4619      	mov	r1, r3
 80050d8:	4831      	ldr	r0, [pc, #196]	; (80051a0 <MENU_INI+0x2b0>)
 80050da:	f7ff fb63 	bl	80047a4 <UI_Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="Preset2";
 80050de:	4b18      	ldr	r3, [pc, #96]	; (8005140 <MENU_INI+0x250>)
 80050e0:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Separator.Temperature_Presets_C.Preset2;
 80050e2:	4b32      	ldr	r3, [pc, #200]	; (80051ac <MENU_INI+0x2bc>)
 80050e4:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=UINT16;
 80050e6:	2302      	movs	r3, #2
 80050e8:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 80050ea:	2301      	movs	r3, #1
 80050ec:	747b      	strb	r3, [r7, #17]
	UI_Menu_List_Element_Create(&Soldering_Separator_Menu_Vector,&Menu_List_Element_Vector_ini);
 80050ee:	1d3b      	adds	r3, r7, #4
 80050f0:	4619      	mov	r1, r3
 80050f2:	482b      	ldr	r0, [pc, #172]	; (80051a0 <MENU_INI+0x2b0>)
 80050f4:	f7ff fb56 	bl	80047a4 <UI_Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="T_Corect_Pres2";
 80050f8:	4b13      	ldr	r3, [pc, #76]	; (8005148 <MENU_INI+0x258>)
 80050fa:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Separator.Temperature_Corection_C.Preset2;
 80050fc:	4b2c      	ldr	r3, [pc, #176]	; (80051b0 <MENU_INI+0x2c0>)
 80050fe:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=INT;
 8005100:	2300      	movs	r3, #0
 8005102:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 8005104:	2301      	movs	r3, #1
 8005106:	747b      	strb	r3, [r7, #17]
	UI_Menu_List_Element_Create(&Soldering_Separator_Menu_Vector, &Menu_List_Element_Vector_ini);
 8005108:	1d3b      	adds	r3, r7, #4
 800510a:	4619      	mov	r1, r3
 800510c:	4824      	ldr	r0, [pc, #144]	; (80051a0 <MENU_INI+0x2b0>)
 800510e:	f7ff fb49 	bl	80047a4 <UI_Menu_List_Element_Create>


	UI_Menu_List_Create(&Menu_List_Vector,&Soldering_Separator_Menu_Vector, " Separator ");
 8005112:	4a28      	ldr	r2, [pc, #160]	; (80051b4 <MENU_INI+0x2c4>)
 8005114:	4922      	ldr	r1, [pc, #136]	; (80051a0 <MENU_INI+0x2b0>)
 8005116:	4817      	ldr	r0, [pc, #92]	; (8005174 <MENU_INI+0x284>)
 8005118:	f7ff fcec 	bl	8004af4 <UI_Menu_List_Create>

}
 800511c:	bf00      	nop
 800511e:	3718      	adds	r7, #24
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}
 8005124:	0800b240 	.word	0x0800b240
 8005128:	200005bc 	.word	0x200005bc
 800512c:	20000514 	.word	0x20000514
 8005130:	0800b250 	.word	0x0800b250
 8005134:	200005a8 	.word	0x200005a8
 8005138:	0800b258 	.word	0x0800b258
 800513c:	200005c0 	.word	0x200005c0
 8005140:	0800b268 	.word	0x0800b268
 8005144:	200005aa 	.word	0x200005aa
 8005148:	0800b270 	.word	0x0800b270
 800514c:	200005c4 	.word	0x200005c4
 8005150:	0800b280 	.word	0x0800b280
 8005154:	200005ac 	.word	0x200005ac
 8005158:	0800b290 	.word	0x0800b290
 800515c:	200005fc 	.word	0x200005fc
 8005160:	0800b29c 	.word	0x0800b29c
 8005164:	200005fe 	.word	0x200005fe
 8005168:	0800b2ac 	.word	0x0800b2ac
 800516c:	20000600 	.word	0x20000600
 8005170:	0800b2b4 	.word	0x0800b2b4
 8005174:	20000550 	.word	0x20000550
 8005178:	20000668 	.word	0x20000668
 800517c:	20000528 	.word	0x20000528
 8005180:	20000654 	.word	0x20000654
 8005184:	2000066c 	.word	0x2000066c
 8005188:	20000656 	.word	0x20000656
 800518c:	20000670 	.word	0x20000670
 8005190:	0800b2c8 	.word	0x0800b2c8
 8005194:	2000069a 	.word	0x2000069a
 8005198:	0800b2d4 	.word	0x0800b2d4
 800519c:	20000704 	.word	0x20000704
 80051a0:	2000053c 	.word	0x2000053c
 80051a4:	200006f0 	.word	0x200006f0
 80051a8:	20000708 	.word	0x20000708
 80051ac:	200006f2 	.word	0x200006f2
 80051b0:	2000070c 	.word	0x2000070c
 80051b4:	0800b2e0 	.word	0x0800b2e0

080051b8 <OLED_INI>:
//----------------------------------------------------------------------------
void OLED_INI(void){
 80051b8:	b580      	push	{r7, lr}
 80051ba:	af00      	add	r7, sp, #0
	  OLED1.hi2c=&hi2c1;
 80051bc:	4b05      	ldr	r3, [pc, #20]	; (80051d4 <OLED_INI+0x1c>)
 80051be:	4a06      	ldr	r2, [pc, #24]	; (80051d8 <OLED_INI+0x20>)
 80051c0:	601a      	str	r2, [r3, #0]
	  OLED_Search_Adress(&OLED1);
 80051c2:	4804      	ldr	r0, [pc, #16]	; (80051d4 <OLED_INI+0x1c>)
 80051c4:	f7fc fa6f 	bl	80016a6 <OLED_Search_Adress>
	  OLED_ini(&OLED1);
 80051c8:	4802      	ldr	r0, [pc, #8]	; (80051d4 <OLED_INI+0x1c>)
 80051ca:	f7fc fa8e 	bl	80016ea <OLED_ini>
}
 80051ce:	bf00      	nop
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	2000049c 	.word	0x2000049c
 80051d8:	2000032c 	.word	0x2000032c

080051dc <Soldering_Iron_INI>:
//----------------------------------------------------------------------------
void Soldering_Iron_INI(uint8_t Flash_Read_Status){
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	4603      	mov	r3, r0
 80051e4:	71fb      	strb	r3, [r7, #7]

	Soldering_Iron.PID.KP=Soldering_Iron_PID_KP;
 80051e6:	4b3f      	ldr	r3, [pc, #252]	; (80052e4 <Soldering_Iron_INI+0x108>)
 80051e8:	4a3f      	ldr	r2, [pc, #252]	; (80052e8 <Soldering_Iron_INI+0x10c>)
 80051ea:	601a      	str	r2, [r3, #0]
	Soldering_Iron.PID.KI=Soldering_Iron_PID_KI;
 80051ec:	4b3d      	ldr	r3, [pc, #244]	; (80052e4 <Soldering_Iron_INI+0x108>)
 80051ee:	4a3f      	ldr	r2, [pc, #252]	; (80052ec <Soldering_Iron_INI+0x110>)
 80051f0:	605a      	str	r2, [r3, #4]
	Soldering_Iron.PID.KD=Soldering_Iron_PID_KD;
 80051f2:	4b3c      	ldr	r3, [pc, #240]	; (80052e4 <Soldering_Iron_INI+0x108>)
 80051f4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80051f8:	609a      	str	r2, [r3, #8]
	Soldering_Iron.PID.dt=0.1;
 80051fa:	4b3a      	ldr	r3, [pc, #232]	; (80052e4 <Soldering_Iron_INI+0x108>)
 80051fc:	4a3c      	ldr	r2, [pc, #240]	; (80052f0 <Soldering_Iron_INI+0x114>)
 80051fe:	60da      	str	r2, [r3, #12]
	Soldering_Iron.PID.MAX_Control=350;
 8005200:	4b38      	ldr	r3, [pc, #224]	; (80052e4 <Soldering_Iron_INI+0x108>)
 8005202:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8005206:	821a      	strh	r2, [r3, #16]

	Soldering_Iron.Filter.Filter_Mode=Nine_Samples;
 8005208:	4b36      	ldr	r3, [pc, #216]	; (80052e4 <Soldering_Iron_INI+0x108>)
 800520a:	2200      	movs	r2, #0
 800520c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Soldering_Iron.Filter.k_min=0.1;
 8005210:	4b34      	ldr	r3, [pc, #208]	; (80052e4 <Soldering_Iron_INI+0x108>)
 8005212:	4a37      	ldr	r2, [pc, #220]	; (80052f0 <Soldering_Iron_INI+0x114>)
 8005214:	629a      	str	r2, [r3, #40]	; 0x28
	Soldering_Iron.Filter.k_max=0.8;
 8005216:	4b33      	ldr	r3, [pc, #204]	; (80052e4 <Soldering_Iron_INI+0x108>)
 8005218:	4a36      	ldr	r2, [pc, #216]	; (80052f4 <Soldering_Iron_INI+0x118>)
 800521a:	62da      	str	r2, [r3, #44]	; 0x2c
	Soldering_Iron.Filter.Val_Delata=30;
 800521c:	4b31      	ldr	r3, [pc, #196]	; (80052e4 <Soldering_Iron_INI+0x108>)
 800521e:	4a36      	ldr	r2, [pc, #216]	; (80052f8 <Soldering_Iron_INI+0x11c>)
 8005220:	635a      	str	r2, [r3, #52]	; 0x34
	Soldering_Iron.Filter.mass=&ADC_Data[4];
 8005222:	4b30      	ldr	r3, [pc, #192]	; (80052e4 <Soldering_Iron_INI+0x108>)
 8005224:	4a35      	ldr	r2, [pc, #212]	; (80052fc <Soldering_Iron_INI+0x120>)
 8005226:	641a      	str	r2, [r3, #64]	; 0x40

	Soldering_Iron.PWM_htim=&htim2;
 8005228:	4b2e      	ldr	r3, [pc, #184]	; (80052e4 <Soldering_Iron_INI+0x108>)
 800522a:	4a35      	ldr	r2, [pc, #212]	; (8005300 <Soldering_Iron_INI+0x124>)
 800522c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

	Soldering_Iron.Full_Power_Button.ID=Full_Power_Button_ID;
 8005230:	4b2c      	ldr	r3, [pc, #176]	; (80052e4 <Soldering_Iron_INI+0x108>)
 8005232:	2207      	movs	r2, #7
 8005234:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	Soldering_Iron.Full_Power_Button.count_max=2;
 8005238:	4b2a      	ldr	r3, [pc, #168]	; (80052e4 <Soldering_Iron_INI+0x108>)
 800523a:	2202      	movs	r2, #2
 800523c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	Soldering_Iron.Full_Power_Button.EXTI_PIN=GPIO_PIN_4;
 8005240:	4b28      	ldr	r3, [pc, #160]	; (80052e4 <Soldering_Iron_INI+0x108>)
 8005242:	2210      	movs	r2, #16
 8005244:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	Soldering_Iron.Full_Power_Button.PIN=GPIO_PIN_4;
 8005248:	4b26      	ldr	r3, [pc, #152]	; (80052e4 <Soldering_Iron_INI+0x108>)
 800524a:	2210      	movs	r2, #16
 800524c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	Soldering_Iron.Full_Power_Button.GPIO=GPIOA;
 8005250:	4b24      	ldr	r3, [pc, #144]	; (80052e4 <Soldering_Iron_INI+0x108>)
 8005252:	4a2c      	ldr	r2, [pc, #176]	; (8005304 <Soldering_Iron_INI+0x128>)
 8005254:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	Soldering_Iron.Full_Power_Button.MODE=Button_Mode_Regular_Without_EXTI;
 8005258:	4b22      	ldr	r3, [pc, #136]	; (80052e4 <Soldering_Iron_INI+0x108>)
 800525a:	2201      	movs	r2, #1
 800525c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

	Soldering_Iron.VS.EXTI_PIN=GPIO_PIN_11;
 8005260:	4b20      	ldr	r3, [pc, #128]	; (80052e4 <Soldering_Iron_INI+0x108>)
 8005262:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005266:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	Soldering_Iron.VS.GPIO=GPIOB;
 800526a:	4b1e      	ldr	r3, [pc, #120]	; (80052e4 <Soldering_Iron_INI+0x108>)
 800526c:	4a26      	ldr	r2, [pc, #152]	; (8005308 <Soldering_Iron_INI+0x12c>)
 800526e:	675a      	str	r2, [r3, #116]	; 0x74
	Soldering_Iron.VS.State=3;
 8005270:	4b1c      	ldr	r3, [pc, #112]	; (80052e4 <Soldering_Iron_INI+0x108>)
 8005272:	2203      	movs	r2, #3
 8005274:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	Soldering_Iron.VS.Prew_State=4;
 8005278:	4b1a      	ldr	r3, [pc, #104]	; (80052e4 <Soldering_Iron_INI+0x108>)
 800527a:	2204      	movs	r2, #4
 800527c:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b

	Soldering_Iron.MODE=MANUAL;
 8005280:	4b18      	ldr	r3, [pc, #96]	; (80052e4 <Soldering_Iron_INI+0x108>)
 8005282:	2200      	movs	r2, #0
 8005284:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

	Soldering_Iron.Temperature_Converting.Coeff=Soldering_Iron_Temperature_Converting_Coeff;
 8005288:	4b16      	ldr	r3, [pc, #88]	; (80052e4 <Soldering_Iron_INI+0x108>)
 800528a:	4a20      	ldr	r2, [pc, #128]	; (800530c <Soldering_Iron_INI+0x130>)
 800528c:	659a      	str	r2, [r3, #88]	; 0x58

	if(Flash_Read_Status!=HAL_OK){							//if Data was read incorrect from flash reinitialize all user parameters
 800528e:	79fb      	ldrb	r3, [r7, #7]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d01d      	beq.n	80052d0 <Soldering_Iron_INI+0xf4>
		Soldering_Iron.Temperature_Presets_C.Manual=100;
 8005294:	4b13      	ldr	r3, [pc, #76]	; (80052e4 <Soldering_Iron_INI+0x108>)
 8005296:	2264      	movs	r2, #100	; 0x64
 8005298:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		Soldering_Iron.Temperature_Presets_C.Preset1=150;
 800529c:	4b11      	ldr	r3, [pc, #68]	; (80052e4 <Soldering_Iron_INI+0x108>)
 800529e:	2296      	movs	r2, #150	; 0x96
 80052a0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		Soldering_Iron.Temperature_Presets_C.Preset2=300;
 80052a4:	4b0f      	ldr	r3, [pc, #60]	; (80052e4 <Soldering_Iron_INI+0x108>)
 80052a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80052aa:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

		Soldering_Iron.Temperature_Presets_C.Sleep=100;
 80052ae:	4b0d      	ldr	r3, [pc, #52]	; (80052e4 <Soldering_Iron_INI+0x108>)
 80052b0:	2264      	movs	r2, #100	; 0x64
 80052b2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		Soldering_Iron.Sleep_time=200;
 80052b6:	4b0b      	ldr	r3, [pc, #44]	; (80052e4 <Soldering_Iron_INI+0x108>)
 80052b8:	22c8      	movs	r2, #200	; 0xc8
 80052ba:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		Soldering_Iron.Disable_time=400;
 80052be:	4b09      	ldr	r3, [pc, #36]	; (80052e4 <Soldering_Iron_INI+0x108>)
 80052c0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80052c4:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e

		Soldering_Iron.Flash_Key=0x0801F802;
 80052c8:	4b06      	ldr	r3, [pc, #24]	; (80052e4 <Soldering_Iron_INI+0x108>)
 80052ca:	4a11      	ldr	r2, [pc, #68]	; (8005310 <Soldering_Iron_INI+0x134>)
 80052cc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	}
	Solder_Iron_Flash_Read_Manual_Temperature(&Soldering_Iron);	//read Last manual temperature
 80052d0:	4804      	ldr	r0, [pc, #16]	; (80052e4 <Soldering_Iron_INI+0x108>)
 80052d2:	f7fd fcdb 	bl	8002c8c <Solder_Iron_Flash_Read_Manual_Temperature>
	Solder_Iron_ini(&Soldering_Iron);
 80052d6:	4803      	ldr	r0, [pc, #12]	; (80052e4 <Soldering_Iron_INI+0x108>)
 80052d8:	f7fd fb24 	bl	8002924 <Solder_Iron_ini>
}
 80052dc:	bf00      	nop
 80052de:	3708      	adds	r7, #8
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	20000560 	.word	0x20000560
 80052e8:	40a00000 	.word	0x40a00000
 80052ec:	3d4ccccd 	.word	0x3d4ccccd
 80052f0:	3dcccccd 	.word	0x3dcccccd
 80052f4:	3f4ccccd 	.word	0x3f4ccccd
 80052f8:	41f00000 	.word	0x41f00000
 80052fc:	2000073c 	.word	0x2000073c
 8005300:	200003c8 	.word	0x200003c8
 8005304:	40010800 	.word	0x40010800
 8005308:	40010c00 	.word	0x40010c00
 800530c:	41066666 	.word	0x41066666
 8005310:	0801f802 	.word	0x0801f802

08005314 <PAC_INI>:
//----------------------------------------------------------------------------
void PAC_INI(){
 8005314:	b580      	push	{r7, lr}
 8005316:	b086      	sub	sp, #24
 8005318:	af00      	add	r7, sp, #0
	struct PAC_Init PAC_ini;

	PAC_ini.DMA = &hdma_tim3_ch1_trig;
 800531a:	4b0b      	ldr	r3, [pc, #44]	; (8005348 <PAC_INI+0x34>)
 800531c:	603b      	str	r3, [r7, #0]
	PAC_ini.DMA_Chanel = DMA1_Channel6;
 800531e:	4b0b      	ldr	r3, [pc, #44]	; (800534c <PAC_INI+0x38>)
 8005320:	607b      	str	r3, [r7, #4]
	PAC_ini.TIM_Instance = TIM3;
 8005322:	4b0b      	ldr	r3, [pc, #44]	; (8005350 <PAC_INI+0x3c>)
 8005324:	60bb      	str	r3, [r7, #8]
	PAC_ini.IC_Trigger_Channel_GPIO = GPIOA;
 8005326:	4b0b      	ldr	r3, [pc, #44]	; (8005354 <PAC_INI+0x40>)
 8005328:	60fb      	str	r3, [r7, #12]
	PAC_ini.IC_Trigger_Channel_PIN = GPIO_PIN_6;
 800532a:	2340      	movs	r3, #64	; 0x40
 800532c:	823b      	strh	r3, [r7, #16]
	PAC_ini.TIM_CHANNEL=TIM_CHANNEL_1;
 800532e:	2300      	movs	r3, #0
 8005330:	617b      	str	r3, [r7, #20]

	PAC = PAC_Base_Create(&PAC_ini);
 8005332:	463b      	mov	r3, r7
 8005334:	4618      	mov	r0, r3
 8005336:	f7fc fb9f 	bl	8001a78 <PAC_Base_Create>
 800533a:	4603      	mov	r3, r0
 800533c:	4a06      	ldr	r2, [pc, #24]	; (8005358 <PAC_INI+0x44>)
 800533e:	6013      	str	r3, [r2, #0]

}
 8005340:	bf00      	nop
 8005342:	3718      	adds	r7, #24
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}
 8005348:	20000458 	.word	0x20000458
 800534c:	4002006c 	.word	0x4002006c
 8005350:	40000400 	.word	0x40000400
 8005354:	40010800 	.word	0x40010800
 8005358:	20000730 	.word	0x20000730

0800535c <Soldering_Heat_Gun_INI>:
//----------------------------------------------------------------------------
void Soldering_Heat_Gun_INI(uint8_t Flash_Read_Status){
 800535c:	b580      	push	{r7, lr}
 800535e:	b086      	sub	sp, #24
 8005360:	af00      	add	r7, sp, #0
 8005362:	4603      	mov	r3, r0
 8005364:	71fb      	strb	r3, [r7, #7]

	Soldering_Heat_Gun.PID.KP=Soldering_Heat_Gun_PID_KP;
 8005366:	4b35      	ldr	r3, [pc, #212]	; (800543c <Soldering_Heat_Gun_INI+0xe0>)
 8005368:	4a35      	ldr	r2, [pc, #212]	; (8005440 <Soldering_Heat_Gun_INI+0xe4>)
 800536a:	601a      	str	r2, [r3, #0]
	Soldering_Heat_Gun.PID.KI=Soldering_Heat_Gun_PID_KI;
 800536c:	4b33      	ldr	r3, [pc, #204]	; (800543c <Soldering_Heat_Gun_INI+0xe0>)
 800536e:	4a35      	ldr	r2, [pc, #212]	; (8005444 <Soldering_Heat_Gun_INI+0xe8>)
 8005370:	605a      	str	r2, [r3, #4]
	Soldering_Heat_Gun.PID.KD=Soldering_Heat_Gun_PID_KD;
 8005372:	4b32      	ldr	r3, [pc, #200]	; (800543c <Soldering_Heat_Gun_INI+0xe0>)
 8005374:	4a34      	ldr	r2, [pc, #208]	; (8005448 <Soldering_Heat_Gun_INI+0xec>)
 8005376:	609a      	str	r2, [r3, #8]
	Soldering_Heat_Gun.PID.dt=0.1;
 8005378:	4b30      	ldr	r3, [pc, #192]	; (800543c <Soldering_Heat_Gun_INI+0xe0>)
 800537a:	4a34      	ldr	r2, [pc, #208]	; (800544c <Soldering_Heat_Gun_INI+0xf0>)
 800537c:	60da      	str	r2, [r3, #12]


	Soldering_Heat_Gun.Filter.Filter_Mode=Three_Samples;
 800537e:	4b2f      	ldr	r3, [pc, #188]	; (800543c <Soldering_Heat_Gun_INI+0xe0>)
 8005380:	2201      	movs	r2, #1
 8005382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Soldering_Heat_Gun.Filter.k_min=0.03;
 8005386:	4b2d      	ldr	r3, [pc, #180]	; (800543c <Soldering_Heat_Gun_INI+0xe0>)
 8005388:	4a31      	ldr	r2, [pc, #196]	; (8005450 <Soldering_Heat_Gun_INI+0xf4>)
 800538a:	629a      	str	r2, [r3, #40]	; 0x28
	Soldering_Heat_Gun.Filter.k_max=0.8;
 800538c:	4b2b      	ldr	r3, [pc, #172]	; (800543c <Soldering_Heat_Gun_INI+0xe0>)
 800538e:	4a31      	ldr	r2, [pc, #196]	; (8005454 <Soldering_Heat_Gun_INI+0xf8>)
 8005390:	62da      	str	r2, [r3, #44]	; 0x2c
	Soldering_Heat_Gun.Filter.Val_Delata=60;
 8005392:	4b2a      	ldr	r3, [pc, #168]	; (800543c <Soldering_Heat_Gun_INI+0xe0>)
 8005394:	4a30      	ldr	r2, [pc, #192]	; (8005458 <Soldering_Heat_Gun_INI+0xfc>)
 8005396:	635a      	str	r2, [r3, #52]	; 0x34
	Soldering_Heat_Gun.Filter.mass=&ADC_Data[1];
 8005398:	4b28      	ldr	r3, [pc, #160]	; (800543c <Soldering_Heat_Gun_INI+0xe0>)
 800539a:	4a30      	ldr	r2, [pc, #192]	; (800545c <Soldering_Heat_Gun_INI+0x100>)
 800539c:	641a      	str	r2, [r3, #64]	; 0x40


	Soldering_Heat_Gun.MODE=MANUAL;
 800539e:	4b27      	ldr	r3, [pc, #156]	; (800543c <Soldering_Heat_Gun_INI+0xe0>)
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

	Soldering_Heat_Gun.OFF_PIN=GPIO_PIN_15;
 80053a6:	4b25      	ldr	r3, [pc, #148]	; (800543c <Soldering_Heat_Gun_INI+0xe0>)
 80053a8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80053ac:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	Soldering_Heat_Gun.OFF_GPIO=GPIOC;
 80053b0:	4b22      	ldr	r3, [pc, #136]	; (800543c <Soldering_Heat_Gun_INI+0xe0>)
 80053b2:	4a2b      	ldr	r2, [pc, #172]	; (8005460 <Soldering_Heat_Gun_INI+0x104>)
 80053b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	Soldering_Heat_Gun.MANUAL_PIN=GPIO_PIN_9;
 80053b8:	4b20      	ldr	r3, [pc, #128]	; (800543c <Soldering_Heat_Gun_INI+0xe0>)
 80053ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053be:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	Soldering_Heat_Gun.MANUAL_GPIO=GPIOB;
 80053c2:	4b1e      	ldr	r3, [pc, #120]	; (800543c <Soldering_Heat_Gun_INI+0xe0>)
 80053c4:	4a27      	ldr	r2, [pc, #156]	; (8005464 <Soldering_Heat_Gun_INI+0x108>)
 80053c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	Soldering_Heat_Gun.PAC = PAC;
 80053ca:	4b27      	ldr	r3, [pc, #156]	; (8005468 <Soldering_Heat_Gun_INI+0x10c>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a1b      	ldr	r2, [pc, #108]	; (800543c <Soldering_Heat_Gun_INI+0xe0>)
 80053d0:	6793      	str	r3, [r2, #120]	; 0x78

	struct PAC_Devices_Control_Init element_ini;

	element_ini.Channel_GPIO = GPIOB;
 80053d2:	4b24      	ldr	r3, [pc, #144]	; (8005464 <Soldering_Heat_Gun_INI+0x108>)
 80053d4:	613b      	str	r3, [r7, #16]
	element_ini.Channel_PIN = GPIO_PIN_1;
 80053d6:	2302      	movs	r3, #2
 80053d8:	81bb      	strh	r3, [r7, #12]
	element_ini.TIM_CHANNEL = TIM_CHANNEL_4;
 80053da:	230c      	movs	r3, #12
 80053dc:	617b      	str	r3, [r7, #20]

	Soldering_Heat_Gun.PAC_Control = PAC_Devise_Control_Create(PAC, &element_ini);
 80053de:	4b22      	ldr	r3, [pc, #136]	; (8005468 <Soldering_Heat_Gun_INI+0x10c>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f107 020c 	add.w	r2, r7, #12
 80053e6:	4611      	mov	r1, r2
 80053e8:	4618      	mov	r0, r3
 80053ea:	f7fc fb7b 	bl	8001ae4 <PAC_Devise_Control_Create>
 80053ee:	4603      	mov	r3, r0
 80053f0:	4a12      	ldr	r2, [pc, #72]	; (800543c <Soldering_Heat_Gun_INI+0xe0>)
 80053f2:	6753      	str	r3, [r2, #116]	; 0x74


	Soldering_Heat_Gun.Temperature_Converting.Coeff=Soldering_Heat_Gun_Temperature_Converting_Coeff;
 80053f4:	4b11      	ldr	r3, [pc, #68]	; (800543c <Soldering_Heat_Gun_INI+0xe0>)
 80053f6:	4a1d      	ldr	r2, [pc, #116]	; (800546c <Soldering_Heat_Gun_INI+0x110>)
 80053f8:	659a      	str	r2, [r3, #88]	; 0x58

	if(Flash_Read_Status!=HAL_OK){									//if Data was read incorrect from flash reinitialize all user parameters
 80053fa:	79fb      	ldrb	r3, [r7, #7]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00f      	beq.n	8005420 <Soldering_Heat_Gun_INI+0xc4>
		Soldering_Heat_Gun.Temperature_Presets_C.Preset1=100;
 8005400:	4b0e      	ldr	r3, [pc, #56]	; (800543c <Soldering_Heat_Gun_INI+0xe0>)
 8005402:	2264      	movs	r2, #100	; 0x64
 8005404:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		Soldering_Heat_Gun.Temperature_Presets_C.Preset2=200;
 8005408:	4b0c      	ldr	r3, [pc, #48]	; (800543c <Soldering_Heat_Gun_INI+0xe0>)
 800540a:	22c8      	movs	r2, #200	; 0xc8
 800540c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
		Soldering_Heat_Gun.Temperature_Coolling.C=50;
 8005410:	4b0a      	ldr	r3, [pc, #40]	; (800543c <Soldering_Heat_Gun_INI+0xe0>)
 8005412:	2232      	movs	r2, #50	; 0x32
 8005414:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
		Soldering_Heat_Gun.Flash_Key=Soldering_Heat_Gun_Struct_Key;
 8005418:	4b08      	ldr	r3, [pc, #32]	; (800543c <Soldering_Heat_Gun_INI+0xe0>)
 800541a:	4a15      	ldr	r2, [pc, #84]	; (8005470 <Soldering_Heat_Gun_INI+0x114>)
 800541c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	}

	Soldering_Heat_Gun_Flash_Read_Manual_Temperature(&Soldering_Heat_Gun); //read Last manual temperature
 8005420:	4806      	ldr	r0, [pc, #24]	; (800543c <Soldering_Heat_Gun_INI+0xe0>)
 8005422:	f7fd fe4d 	bl	80030c0 <Soldering_Heat_Gun_Flash_Read_Manual_Temperature>

	Soldering_Heat_Gun_ini(&Soldering_Heat_Gun);
 8005426:	4805      	ldr	r0, [pc, #20]	; (800543c <Soldering_Heat_Gun_INI+0xe0>)
 8005428:	f7fd fc4f 	bl	8002cca <Soldering_Heat_Gun_ini>

	Soldering_Heat_Gun_OFF(&Soldering_Heat_Gun);
 800542c:	4803      	ldr	r0, [pc, #12]	; (800543c <Soldering_Heat_Gun_INI+0xe0>)
 800542e:	f7fd fc93 	bl	8002d58 <Soldering_Heat_Gun_OFF>


}
 8005432:	bf00      	nop
 8005434:	3718      	adds	r7, #24
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	2000060c 	.word	0x2000060c
 8005440:	3e4ccccd 	.word	0x3e4ccccd
 8005444:	3c23d70a 	.word	0x3c23d70a
 8005448:	3ecccccd 	.word	0x3ecccccd
 800544c:	3dcccccd 	.word	0x3dcccccd
 8005450:	3cf5c28f 	.word	0x3cf5c28f
 8005454:	3f4ccccd 	.word	0x3f4ccccd
 8005458:	42700000 	.word	0x42700000
 800545c:	20000736 	.word	0x20000736
 8005460:	40011000 	.word	0x40011000
 8005464:	40010c00 	.word	0x40010c00
 8005468:	20000730 	.word	0x20000730
 800546c:	41066666 	.word	0x41066666
 8005470:	0801f804 	.word	0x0801f804

08005474 <Soldering_Separator_INI>:
//----------------------------------------------------------------------------
void Soldering_Separator_INI(uint8_t Flash_Read_Status){
 8005474:	b580      	push	{r7, lr}
 8005476:	b086      	sub	sp, #24
 8005478:	af00      	add	r7, sp, #0
 800547a:	4603      	mov	r3, r0
 800547c:	71fb      	strb	r3, [r7, #7]
	Soldering_Separator.PID.KP=Soldering_Separator_PID_KP;
 800547e:	4b2a      	ldr	r3, [pc, #168]	; (8005528 <Soldering_Separator_INI+0xb4>)
 8005480:	4a2a      	ldr	r2, [pc, #168]	; (800552c <Soldering_Separator_INI+0xb8>)
 8005482:	601a      	str	r2, [r3, #0]
	Soldering_Separator.PID.KI=Soldering_Separator_PID_KI;
 8005484:	4b28      	ldr	r3, [pc, #160]	; (8005528 <Soldering_Separator_INI+0xb4>)
 8005486:	4a2a      	ldr	r2, [pc, #168]	; (8005530 <Soldering_Separator_INI+0xbc>)
 8005488:	605a      	str	r2, [r3, #4]
	Soldering_Separator.PID.KD=Soldering_Separator_PID_KD;
 800548a:	4b27      	ldr	r3, [pc, #156]	; (8005528 <Soldering_Separator_INI+0xb4>)
 800548c:	4a29      	ldr	r2, [pc, #164]	; (8005534 <Soldering_Separator_INI+0xc0>)
 800548e:	609a      	str	r2, [r3, #8]
	Soldering_Separator.PID.dt=0.1;
 8005490:	4b25      	ldr	r3, [pc, #148]	; (8005528 <Soldering_Separator_INI+0xb4>)
 8005492:	4a29      	ldr	r2, [pc, #164]	; (8005538 <Soldering_Separator_INI+0xc4>)
 8005494:	60da      	str	r2, [r3, #12]


	Soldering_Separator.Filter.Filter_Mode=Three_Samples;
 8005496:	4b24      	ldr	r3, [pc, #144]	; (8005528 <Soldering_Separator_INI+0xb4>)
 8005498:	2201      	movs	r2, #1
 800549a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Soldering_Separator.Filter.k_min=0.1;
 800549e:	4b22      	ldr	r3, [pc, #136]	; (8005528 <Soldering_Separator_INI+0xb4>)
 80054a0:	4a25      	ldr	r2, [pc, #148]	; (8005538 <Soldering_Separator_INI+0xc4>)
 80054a2:	629a      	str	r2, [r3, #40]	; 0x28
	Soldering_Separator.Filter.k_max=0.3;
 80054a4:	4b20      	ldr	r3, [pc, #128]	; (8005528 <Soldering_Separator_INI+0xb4>)
 80054a6:	4a25      	ldr	r2, [pc, #148]	; (800553c <Soldering_Separator_INI+0xc8>)
 80054a8:	62da      	str	r2, [r3, #44]	; 0x2c
	Soldering_Separator.Filter.Val_Delata=60;
 80054aa:	4b1f      	ldr	r3, [pc, #124]	; (8005528 <Soldering_Separator_INI+0xb4>)
 80054ac:	4a24      	ldr	r2, [pc, #144]	; (8005540 <Soldering_Separator_INI+0xcc>)
 80054ae:	635a      	str	r2, [r3, #52]	; 0x34
	Soldering_Separator.Filter.mass=&ADC_Data[13];
 80054b0:	4b1d      	ldr	r3, [pc, #116]	; (8005528 <Soldering_Separator_INI+0xb4>)
 80054b2:	4a24      	ldr	r2, [pc, #144]	; (8005544 <Soldering_Separator_INI+0xd0>)
 80054b4:	641a      	str	r2, [r3, #64]	; 0x40


	Soldering_Separator.MODE=MANUAL;
 80054b6:	4b1c      	ldr	r3, [pc, #112]	; (8005528 <Soldering_Separator_INI+0xb4>)
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

	Soldering_Separator.PAC = PAC;
 80054be:	4b22      	ldr	r3, [pc, #136]	; (8005548 <Soldering_Separator_INI+0xd4>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a19      	ldr	r2, [pc, #100]	; (8005528 <Soldering_Separator_INI+0xb4>)
 80054c4:	6793      	str	r3, [r2, #120]	; 0x78

	struct PAC_Devices_Control_Init element_ini;

	element_ini.Channel_GPIO = GPIOA;
 80054c6:	4b21      	ldr	r3, [pc, #132]	; (800554c <Soldering_Separator_INI+0xd8>)
 80054c8:	613b      	str	r3, [r7, #16]
	element_ini.Channel_PIN = GPIO_PIN_7;
 80054ca:	2380      	movs	r3, #128	; 0x80
 80054cc:	81bb      	strh	r3, [r7, #12]
	element_ini.TIM_CHANNEL = TIM_CHANNEL_2;
 80054ce:	2304      	movs	r3, #4
 80054d0:	617b      	str	r3, [r7, #20]

	Soldering_Separator.PAC_Control = PAC_Devise_Control_Create(PAC, &element_ini);
 80054d2:	4b1d      	ldr	r3, [pc, #116]	; (8005548 <Soldering_Separator_INI+0xd4>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f107 020c 	add.w	r2, r7, #12
 80054da:	4611      	mov	r1, r2
 80054dc:	4618      	mov	r0, r3
 80054de:	f7fc fb01 	bl	8001ae4 <PAC_Devise_Control_Create>
 80054e2:	4603      	mov	r3, r0
 80054e4:	4a10      	ldr	r2, [pc, #64]	; (8005528 <Soldering_Separator_INI+0xb4>)
 80054e6:	6753      	str	r3, [r2, #116]	; 0x74

	Soldering_Separator.Temperature_Converting.Coeff=Soldering_Separator_Temperature_Converting_Coeff;
 80054e8:	4b0f      	ldr	r3, [pc, #60]	; (8005528 <Soldering_Separator_INI+0xb4>)
 80054ea:	4a19      	ldr	r2, [pc, #100]	; (8005550 <Soldering_Separator_INI+0xdc>)
 80054ec:	659a      	str	r2, [r3, #88]	; 0x58

	if(Flash_Read_Status!=HAL_OK){									//if Data was read incorrect from flash reinitialize all user parameters
 80054ee:	79fb      	ldrb	r3, [r7, #7]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d00b      	beq.n	800550c <Soldering_Separator_INI+0x98>
		Soldering_Separator.Temperature_Presets_C.Preset1=150;
 80054f4:	4b0c      	ldr	r3, [pc, #48]	; (8005528 <Soldering_Separator_INI+0xb4>)
 80054f6:	2296      	movs	r2, #150	; 0x96
 80054f8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		Soldering_Separator.Temperature_Presets_C.Preset2=200;
 80054fc:	4b0a      	ldr	r3, [pc, #40]	; (8005528 <Soldering_Separator_INI+0xb4>)
 80054fe:	22c8      	movs	r2, #200	; 0xc8
 8005500:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
		Soldering_Separator.Flash_Key=Soldering_Separator_Struct_Key;
 8005504:	4b08      	ldr	r3, [pc, #32]	; (8005528 <Soldering_Separator_INI+0xb4>)
 8005506:	4a13      	ldr	r2, [pc, #76]	; (8005554 <Soldering_Separator_INI+0xe0>)
 8005508:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	}

	Soldering_Separator_Flash_Read_Manual_Temperature(&Soldering_Separator);	//read Last manual temperature
 800550c:	4806      	ldr	r0, [pc, #24]	; (8005528 <Soldering_Separator_INI+0xb4>)
 800550e:	f7fd ff79 	bl	8003404 <Soldering_Separator_Flash_Read_Manual_Temperature>

	Soldering_Separator_ini(&Soldering_Separator);
 8005512:	4805      	ldr	r0, [pc, #20]	; (8005528 <Soldering_Separator_INI+0xb4>)
 8005514:	f7fd fdf3 	bl	80030fe <Soldering_Separator_ini>

	Soldering_Separator_OFF(&Soldering_Separator);
 8005518:	4803      	ldr	r0, [pc, #12]	; (8005528 <Soldering_Separator_INI+0xb4>)
 800551a:	f7fd fe23 	bl	8003164 <Soldering_Separator_OFF>
}
 800551e:	bf00      	nop
 8005520:	3718      	adds	r7, #24
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	200006a8 	.word	0x200006a8
 800552c:	3e19999a 	.word	0x3e19999a
 8005530:	3a03126f 	.word	0x3a03126f
 8005534:	3a83126f 	.word	0x3a83126f
 8005538:	3dcccccd 	.word	0x3dcccccd
 800553c:	3e99999a 	.word	0x3e99999a
 8005540:	42700000 	.word	0x42700000
 8005544:	2000074e 	.word	0x2000074e
 8005548:	20000730 	.word	0x20000730
 800554c:	40010800 	.word	0x40010800
 8005550:	404ccccd 	.word	0x404ccccd
 8005554:	1801f804 	.word	0x1801f804

08005558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800555e:	f000 ff33 	bl	80063c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005562:	f000 f871 	bl	8005648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005566:	f000 fb25 	bl	8005bb4 <MX_GPIO_Init>
  MX_DMA_Init();
 800556a:	f000 fafd 	bl	8005b68 <MX_DMA_Init>
  MX_ADC1_Init();
 800556e:	f000 f8bb 	bl	80056e8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8005572:	f000 f9b5 	bl	80058e0 <MX_I2C1_Init>
  MX_TIM2_Init();
 8005576:	f000 fa33 	bl	80059e0 <MX_TIM2_Init>
  MX_TIM1_Init();
 800557a:	f000 f9df 	bl	800593c <MX_TIM1_Init>
  MX_TIM4_Init();
 800557e:	f000 faa5 	bl	8005acc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  //---------------------------------------------------------------------------------
  uint8_t Flash_Read_Status;

  Flash_Read_Status = Soldering_Station_Read_Struct(&Soldering_Iron, &Soldering_Heat_Gun, &Soldering_Separator);
 8005582:	4a27      	ldr	r2, [pc, #156]	; (8005620 <main+0xc8>)
 8005584:	4927      	ldr	r1, [pc, #156]	; (8005624 <main+0xcc>)
 8005586:	4828      	ldr	r0, [pc, #160]	; (8005628 <main+0xd0>)
 8005588:	f7fd ff6e 	bl	8003468 <Soldering_Station_Read_Struct>
 800558c:	4603      	mov	r3, r0
 800558e:	71fb      	strb	r3, [r7, #7]


  BUTTON_INI();
 8005590:	f7ff fbbc 	bl	8004d0c <BUTTON_INI>
  Encoder_INI();
 8005594:	f7ff fc46 	bl	8004e24 <Encoder_INI>
  MENU_INI();
 8005598:	f7ff fcaa 	bl	8004ef0 <MENU_INI>
  OLED_INI();
 800559c:	f7ff fe0c 	bl	80051b8 <OLED_INI>
  PAC_INI();
 80055a0:	f7ff feb8 	bl	8005314 <PAC_INI>
  Soldering_Iron_INI(Flash_Read_Status);
 80055a4:	79fb      	ldrb	r3, [r7, #7]
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7ff fe18 	bl	80051dc <Soldering_Iron_INI>
  Soldering_Heat_Gun_INI(Flash_Read_Status);
 80055ac:	79fb      	ldrb	r3, [r7, #7]
 80055ae:	4618      	mov	r0, r3
 80055b0:	f7ff fed4 	bl	800535c <Soldering_Heat_Gun_INI>
  Soldering_Separator_INI(Flash_Read_Status);
 80055b4:	79fb      	ldrb	r3, [r7, #7]
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7ff ff5c 	bl	8005474 <Soldering_Separator_INI>

  if(Flash_Read_Status!=HAL_OK)							//if Struct was read incorrect
 80055bc:	79fb      	ldrb	r3, [r7, #7]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d004      	beq.n	80055cc <main+0x74>
	  Soldering_Station_Write_Struct(&Soldering_Iron, &Soldering_Heat_Gun, &Soldering_Separator);	//Rewrite all structures
 80055c2:	4a17      	ldr	r2, [pc, #92]	; (8005620 <main+0xc8>)
 80055c4:	4917      	ldr	r1, [pc, #92]	; (8005624 <main+0xcc>)
 80055c6:	4818      	ldr	r0, [pc, #96]	; (8005628 <main+0xd0>)
 80055c8:	f7fd ff80 	bl	80034cc <Soldering_Station_Write_Struct>

  //---------------------------------------------------------------------------------TIM
	__HAL_TIM_CLEAR_FLAG(&htim1, TIM_SR_UIF);
 80055cc:	4b17      	ldr	r3, [pc, #92]	; (800562c <main+0xd4>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f06f 0201 	mvn.w	r2, #1
 80055d4:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&htim1);
 80055d6:	4815      	ldr	r0, [pc, #84]	; (800562c <main+0xd4>)
 80055d8:	f003 ff26 	bl	8009428 <HAL_TIM_Base_Start_IT>
	__HAL_TIM_CLEAR_FLAG(&htim2, TIM_SR_UIF);
 80055dc:	4b14      	ldr	r3, [pc, #80]	; (8005630 <main+0xd8>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f06f 0201 	mvn.w	r2, #1
 80055e4:	611a      	str	r2, [r3, #16]
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80055e6:	210c      	movs	r1, #12
 80055e8:	4811      	ldr	r0, [pc, #68]	; (8005630 <main+0xd8>)
 80055ea:	f004 f825 	bl	8009638 <HAL_TIM_PWM_Start>


	__HAL_TIM_CLEAR_FLAG(&htim4, TIM_SR_UIF);
 80055ee:	4b11      	ldr	r3, [pc, #68]	; (8005634 <main+0xdc>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f06f 0201 	mvn.w	r2, #1
 80055f6:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&htim4);
 80055f8:	480e      	ldr	r0, [pc, #56]	; (8005634 <main+0xdc>)
 80055fa:	f003 ff15 	bl	8009428 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  Face_UI_it(&Encoder_P1, &Encoder_P2, &Button_Vector);
 80055fe:	4a0e      	ldr	r2, [pc, #56]	; (8005638 <main+0xe0>)
 8005600:	490e      	ldr	r1, [pc, #56]	; (800563c <main+0xe4>)
 8005602:	480f      	ldr	r0, [pc, #60]	; (8005640 <main+0xe8>)
 8005604:	f7fe fde2 	bl	80041cc <Face_UI_it>
	  UI_Menu_it(&Menu_List_Vector, &Encoder_P2, &Button_Vector);
 8005608:	4a0b      	ldr	r2, [pc, #44]	; (8005638 <main+0xe0>)
 800560a:	490c      	ldr	r1, [pc, #48]	; (800563c <main+0xe4>)
 800560c:	480d      	ldr	r0, [pc, #52]	; (8005644 <main+0xec>)
 800560e:	f7ff f9c3 	bl	8004998 <UI_Menu_it>
	  Soldering_Station_Write_Struct(&Soldering_Iron, &Soldering_Heat_Gun, &Soldering_Separator);	//Write all struct in flash after changing in UI_Menu
 8005612:	4a03      	ldr	r2, [pc, #12]	; (8005620 <main+0xc8>)
 8005614:	4903      	ldr	r1, [pc, #12]	; (8005624 <main+0xcc>)
 8005616:	4804      	ldr	r0, [pc, #16]	; (8005628 <main+0xd0>)
 8005618:	f7fd ff58 	bl	80034cc <Soldering_Station_Write_Struct>
	  Face_UI_it(&Encoder_P1, &Encoder_P2, &Button_Vector);
 800561c:	e7ef      	b.n	80055fe <main+0xa6>
 800561e:	bf00      	nop
 8005620:	200006a8 	.word	0x200006a8
 8005624:	2000060c 	.word	0x2000060c
 8005628:	20000560 	.word	0x20000560
 800562c:	20000380 	.word	0x20000380
 8005630:	200003c8 	.word	0x200003c8
 8005634:	20000410 	.word	0x20000410
 8005638:	2000050c 	.word	0x2000050c
 800563c:	200004a4 	.word	0x200004a4
 8005640:	200004d8 	.word	0x200004d8
 8005644:	20000550 	.word	0x20000550

08005648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b094      	sub	sp, #80	; 0x50
 800564c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800564e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005652:	2228      	movs	r2, #40	; 0x28
 8005654:	2100      	movs	r1, #0
 8005656:	4618      	mov	r0, r3
 8005658:	f005 fd0e 	bl	800b078 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800565c:	f107 0314 	add.w	r3, r7, #20
 8005660:	2200      	movs	r2, #0
 8005662:	601a      	str	r2, [r3, #0]
 8005664:	605a      	str	r2, [r3, #4]
 8005666:	609a      	str	r2, [r3, #8]
 8005668:	60da      	str	r2, [r3, #12]
 800566a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800566c:	1d3b      	adds	r3, r7, #4
 800566e:	2200      	movs	r2, #0
 8005670:	601a      	str	r2, [r3, #0]
 8005672:	605a      	str	r2, [r3, #4]
 8005674:	609a      	str	r2, [r3, #8]
 8005676:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005678:	2301      	movs	r3, #1
 800567a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800567c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005680:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8005682:	2300      	movs	r3, #0
 8005684:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005686:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800568a:	4618      	mov	r0, r3
 800568c:	f003 f958 	bl	8008940 <HAL_RCC_OscConfig>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d001      	beq.n	800569a <SystemClock_Config+0x52>
  {
    Error_Handler();
 8005696:	f000 fbbf 	bl	8005e18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800569a:	230f      	movs	r3, #15
 800569c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800569e:	2301      	movs	r3, #1
 80056a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80056a2:	2300      	movs	r3, #0
 80056a4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80056a6:	2300      	movs	r3, #0
 80056a8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80056aa:	2300      	movs	r3, #0
 80056ac:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80056ae:	f107 0314 	add.w	r3, r7, #20
 80056b2:	2100      	movs	r1, #0
 80056b4:	4618      	mov	r0, r3
 80056b6:	f003 fbc5 	bl	8008e44 <HAL_RCC_ClockConfig>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d001      	beq.n	80056c4 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80056c0:	f000 fbaa 	bl	8005e18 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80056c4:	2302      	movs	r3, #2
 80056c6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80056c8:	2300      	movs	r3, #0
 80056ca:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80056cc:	1d3b      	adds	r3, r7, #4
 80056ce:	4618      	mov	r0, r3
 80056d0:	f003 fd50 	bl	8009174 <HAL_RCCEx_PeriphCLKConfig>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d001      	beq.n	80056de <SystemClock_Config+0x96>
  {
    Error_Handler();
 80056da:	f000 fb9d 	bl	8005e18 <Error_Handler>
  }
}
 80056de:	bf00      	nop
 80056e0:	3750      	adds	r7, #80	; 0x50
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
	...

080056e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80056ee:	1d3b      	adds	r3, r7, #4
 80056f0:	2200      	movs	r2, #0
 80056f2:	601a      	str	r2, [r3, #0]
 80056f4:	605a      	str	r2, [r3, #4]
 80056f6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80056f8:	4b77      	ldr	r3, [pc, #476]	; (80058d8 <MX_ADC1_Init+0x1f0>)
 80056fa:	4a78      	ldr	r2, [pc, #480]	; (80058dc <MX_ADC1_Init+0x1f4>)
 80056fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80056fe:	4b76      	ldr	r3, [pc, #472]	; (80058d8 <MX_ADC1_Init+0x1f0>)
 8005700:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005704:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8005706:	4b74      	ldr	r3, [pc, #464]	; (80058d8 <MX_ADC1_Init+0x1f0>)
 8005708:	2200      	movs	r2, #0
 800570a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800570c:	4b72      	ldr	r3, [pc, #456]	; (80058d8 <MX_ADC1_Init+0x1f0>)
 800570e:	2200      	movs	r2, #0
 8005710:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005712:	4b71      	ldr	r3, [pc, #452]	; (80058d8 <MX_ADC1_Init+0x1f0>)
 8005714:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8005718:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800571a:	4b6f      	ldr	r3, [pc, #444]	; (80058d8 <MX_ADC1_Init+0x1f0>)
 800571c:	2200      	movs	r2, #0
 800571e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 16;
 8005720:	4b6d      	ldr	r3, [pc, #436]	; (80058d8 <MX_ADC1_Init+0x1f0>)
 8005722:	2210      	movs	r2, #16
 8005724:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005726:	486c      	ldr	r0, [pc, #432]	; (80058d8 <MX_ADC1_Init+0x1f0>)
 8005728:	f000 feb0 	bl	800648c <HAL_ADC_Init>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d001      	beq.n	8005736 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8005732:	f000 fb71 	bl	8005e18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8005736:	2300      	movs	r3, #0
 8005738:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800573a:	2301      	movs	r3, #1
 800573c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800573e:	2305      	movs	r3, #5
 8005740:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005742:	1d3b      	adds	r3, r7, #4
 8005744:	4619      	mov	r1, r3
 8005746:	4864      	ldr	r0, [pc, #400]	; (80058d8 <MX_ADC1_Init+0x1f0>)
 8005748:	f001 f934 	bl	80069b4 <HAL_ADC_ConfigChannel>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d001      	beq.n	8005756 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8005752:	f000 fb61 	bl	8005e18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8005756:	2301      	movs	r3, #1
 8005758:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800575a:	2302      	movs	r3, #2
 800575c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800575e:	1d3b      	adds	r3, r7, #4
 8005760:	4619      	mov	r1, r3
 8005762:	485d      	ldr	r0, [pc, #372]	; (80058d8 <MX_ADC1_Init+0x1f0>)
 8005764:	f001 f926 	bl	80069b4 <HAL_ADC_ConfigChannel>
 8005768:	4603      	mov	r3, r0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d001      	beq.n	8005772 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800576e:	f000 fb53 	bl	8005e18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8005772:	2303      	movs	r3, #3
 8005774:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005776:	1d3b      	adds	r3, r7, #4
 8005778:	4619      	mov	r1, r3
 800577a:	4857      	ldr	r0, [pc, #348]	; (80058d8 <MX_ADC1_Init+0x1f0>)
 800577c:	f001 f91a 	bl	80069b4 <HAL_ADC_ConfigChannel>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d001      	beq.n	800578a <MX_ADC1_Init+0xa2>
  {
    Error_Handler();
 8005786:	f000 fb47 	bl	8005e18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800578a:	2304      	movs	r3, #4
 800578c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800578e:	1d3b      	adds	r3, r7, #4
 8005790:	4619      	mov	r1, r3
 8005792:	4851      	ldr	r0, [pc, #324]	; (80058d8 <MX_ADC1_Init+0x1f0>)
 8005794:	f001 f90e 	bl	80069b4 <HAL_ADC_ConfigChannel>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d001      	beq.n	80057a2 <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 800579e:	f000 fb3b 	bl	8005e18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80057a2:	2305      	movs	r3, #5
 80057a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80057a6:	2305      	movs	r3, #5
 80057a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80057aa:	1d3b      	adds	r3, r7, #4
 80057ac:	4619      	mov	r1, r3
 80057ae:	484a      	ldr	r0, [pc, #296]	; (80058d8 <MX_ADC1_Init+0x1f0>)
 80057b0:	f001 f900 	bl	80069b4 <HAL_ADC_ConfigChannel>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d001      	beq.n	80057be <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 80057ba:	f000 fb2d 	bl	8005e18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80057be:	2306      	movs	r3, #6
 80057c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80057c2:	1d3b      	adds	r3, r7, #4
 80057c4:	4619      	mov	r1, r3
 80057c6:	4844      	ldr	r0, [pc, #272]	; (80058d8 <MX_ADC1_Init+0x1f0>)
 80057c8:	f001 f8f4 	bl	80069b4 <HAL_ADC_ConfigChannel>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d001      	beq.n	80057d6 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 80057d2:	f000 fb21 	bl	8005e18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80057d6:	2307      	movs	r3, #7
 80057d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80057da:	1d3b      	adds	r3, r7, #4
 80057dc:	4619      	mov	r1, r3
 80057de:	483e      	ldr	r0, [pc, #248]	; (80058d8 <MX_ADC1_Init+0x1f0>)
 80057e0:	f001 f8e8 	bl	80069b4 <HAL_ADC_ConfigChannel>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d001      	beq.n	80057ee <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 80057ea:	f000 fb15 	bl	8005e18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80057ee:	2308      	movs	r3, #8
 80057f0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80057f2:	1d3b      	adds	r3, r7, #4
 80057f4:	4619      	mov	r1, r3
 80057f6:	4838      	ldr	r0, [pc, #224]	; (80058d8 <MX_ADC1_Init+0x1f0>)
 80057f8:	f001 f8dc 	bl	80069b4 <HAL_ADC_ConfigChannel>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d001      	beq.n	8005806 <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 8005802:	f000 fb09 	bl	8005e18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8005806:	2309      	movs	r3, #9
 8005808:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800580a:	1d3b      	adds	r3, r7, #4
 800580c:	4619      	mov	r1, r3
 800580e:	4832      	ldr	r0, [pc, #200]	; (80058d8 <MX_ADC1_Init+0x1f0>)
 8005810:	f001 f8d0 	bl	80069b4 <HAL_ADC_ConfigChannel>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d001      	beq.n	800581e <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 800581a:	f000 fafd 	bl	8005e18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800581e:	230a      	movs	r3, #10
 8005820:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005822:	1d3b      	adds	r3, r7, #4
 8005824:	4619      	mov	r1, r3
 8005826:	482c      	ldr	r0, [pc, #176]	; (80058d8 <MX_ADC1_Init+0x1f0>)
 8005828:	f001 f8c4 	bl	80069b4 <HAL_ADC_ConfigChannel>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d001      	beq.n	8005836 <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 8005832:	f000 faf1 	bl	8005e18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8005836:	230b      	movs	r3, #11
 8005838:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800583a:	1d3b      	adds	r3, r7, #4
 800583c:	4619      	mov	r1, r3
 800583e:	4826      	ldr	r0, [pc, #152]	; (80058d8 <MX_ADC1_Init+0x1f0>)
 8005840:	f001 f8b8 	bl	80069b4 <HAL_ADC_ConfigChannel>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d001      	beq.n	800584e <MX_ADC1_Init+0x166>
  {
    Error_Handler();
 800584a:	f000 fae5 	bl	8005e18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_12;
 800584e:	230c      	movs	r3, #12
 8005850:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005852:	1d3b      	adds	r3, r7, #4
 8005854:	4619      	mov	r1, r3
 8005856:	4820      	ldr	r0, [pc, #128]	; (80058d8 <MX_ADC1_Init+0x1f0>)
 8005858:	f001 f8ac 	bl	80069b4 <HAL_ADC_ConfigChannel>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d001      	beq.n	8005866 <MX_ADC1_Init+0x17e>
  {
    Error_Handler();
 8005862:	f000 fad9 	bl	8005e18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8005866:	230d      	movs	r3, #13
 8005868:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800586a:	1d3b      	adds	r3, r7, #4
 800586c:	4619      	mov	r1, r3
 800586e:	481a      	ldr	r0, [pc, #104]	; (80058d8 <MX_ADC1_Init+0x1f0>)
 8005870:	f001 f8a0 	bl	80069b4 <HAL_ADC_ConfigChannel>
 8005874:	4603      	mov	r3, r0
 8005876:	2b00      	cmp	r3, #0
 8005878:	d001      	beq.n	800587e <MX_ADC1_Init+0x196>
  {
    Error_Handler();
 800587a:	f000 facd 	bl	8005e18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800587e:	2308      	movs	r3, #8
 8005880:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 8005882:	230e      	movs	r3, #14
 8005884:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8005886:	2307      	movs	r3, #7
 8005888:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800588a:	1d3b      	adds	r3, r7, #4
 800588c:	4619      	mov	r1, r3
 800588e:	4812      	ldr	r0, [pc, #72]	; (80058d8 <MX_ADC1_Init+0x1f0>)
 8005890:	f001 f890 	bl	80069b4 <HAL_ADC_ConfigChannel>
 8005894:	4603      	mov	r3, r0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d001      	beq.n	800589e <MX_ADC1_Init+0x1b6>
  {
    Error_Handler();
 800589a:	f000 fabd 	bl	8005e18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_15;
 800589e:	230f      	movs	r3, #15
 80058a0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80058a2:	1d3b      	adds	r3, r7, #4
 80058a4:	4619      	mov	r1, r3
 80058a6:	480c      	ldr	r0, [pc, #48]	; (80058d8 <MX_ADC1_Init+0x1f0>)
 80058a8:	f001 f884 	bl	80069b4 <HAL_ADC_ConfigChannel>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d001      	beq.n	80058b6 <MX_ADC1_Init+0x1ce>
  {
    Error_Handler();
 80058b2:	f000 fab1 	bl	8005e18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_16;
 80058b6:	2310      	movs	r3, #16
 80058b8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80058ba:	1d3b      	adds	r3, r7, #4
 80058bc:	4619      	mov	r1, r3
 80058be:	4806      	ldr	r0, [pc, #24]	; (80058d8 <MX_ADC1_Init+0x1f0>)
 80058c0:	f001 f878 	bl	80069b4 <HAL_ADC_ConfigChannel>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d001      	beq.n	80058ce <MX_ADC1_Init+0x1e6>
  {
    Error_Handler();
 80058ca:	f000 faa5 	bl	8005e18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80058ce:	bf00      	nop
 80058d0:	3710      	adds	r7, #16
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	200002b8 	.word	0x200002b8
 80058dc:	40012400 	.word	0x40012400

080058e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80058e4:	4b12      	ldr	r3, [pc, #72]	; (8005930 <MX_I2C1_Init+0x50>)
 80058e6:	4a13      	ldr	r2, [pc, #76]	; (8005934 <MX_I2C1_Init+0x54>)
 80058e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80058ea:	4b11      	ldr	r3, [pc, #68]	; (8005930 <MX_I2C1_Init+0x50>)
 80058ec:	4a12      	ldr	r2, [pc, #72]	; (8005938 <MX_I2C1_Init+0x58>)
 80058ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80058f0:	4b0f      	ldr	r3, [pc, #60]	; (8005930 <MX_I2C1_Init+0x50>)
 80058f2:	2200      	movs	r2, #0
 80058f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80058f6:	4b0e      	ldr	r3, [pc, #56]	; (8005930 <MX_I2C1_Init+0x50>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80058fc:	4b0c      	ldr	r3, [pc, #48]	; (8005930 <MX_I2C1_Init+0x50>)
 80058fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005902:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005904:	4b0a      	ldr	r3, [pc, #40]	; (8005930 <MX_I2C1_Init+0x50>)
 8005906:	2200      	movs	r2, #0
 8005908:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800590a:	4b09      	ldr	r3, [pc, #36]	; (8005930 <MX_I2C1_Init+0x50>)
 800590c:	2200      	movs	r2, #0
 800590e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005910:	4b07      	ldr	r3, [pc, #28]	; (8005930 <MX_I2C1_Init+0x50>)
 8005912:	2200      	movs	r2, #0
 8005914:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005916:	4b06      	ldr	r3, [pc, #24]	; (8005930 <MX_I2C1_Init+0x50>)
 8005918:	2200      	movs	r2, #0
 800591a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800591c:	4804      	ldr	r0, [pc, #16]	; (8005930 <MX_I2C1_Init+0x50>)
 800591e:	f002 fa97 	bl	8007e50 <HAL_I2C_Init>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d001      	beq.n	800592c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005928:	f000 fa76 	bl	8005e18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800592c:	bf00      	nop
 800592e:	bd80      	pop	{r7, pc}
 8005930:	2000032c 	.word	0x2000032c
 8005934:	40005400 	.word	0x40005400
 8005938:	00061a80 	.word	0x00061a80

0800593c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b086      	sub	sp, #24
 8005940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005942:	f107 0308 	add.w	r3, r7, #8
 8005946:	2200      	movs	r2, #0
 8005948:	601a      	str	r2, [r3, #0]
 800594a:	605a      	str	r2, [r3, #4]
 800594c:	609a      	str	r2, [r3, #8]
 800594e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005950:	463b      	mov	r3, r7
 8005952:	2200      	movs	r2, #0
 8005954:	601a      	str	r2, [r3, #0]
 8005956:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005958:	4b1f      	ldr	r3, [pc, #124]	; (80059d8 <MX_TIM1_Init+0x9c>)
 800595a:	4a20      	ldr	r2, [pc, #128]	; (80059dc <MX_TIM1_Init+0xa0>)
 800595c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 799;
 800595e:	4b1e      	ldr	r3, [pc, #120]	; (80059d8 <MX_TIM1_Init+0x9c>)
 8005960:	f240 321f 	movw	r2, #799	; 0x31f
 8005964:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005966:	4b1c      	ldr	r3, [pc, #112]	; (80059d8 <MX_TIM1_Init+0x9c>)
 8005968:	2200      	movs	r2, #0
 800596a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 499;
 800596c:	4b1a      	ldr	r3, [pc, #104]	; (80059d8 <MX_TIM1_Init+0x9c>)
 800596e:	f240 12f3 	movw	r2, #499	; 0x1f3
 8005972:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005974:	4b18      	ldr	r3, [pc, #96]	; (80059d8 <MX_TIM1_Init+0x9c>)
 8005976:	2200      	movs	r2, #0
 8005978:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800597a:	4b17      	ldr	r3, [pc, #92]	; (80059d8 <MX_TIM1_Init+0x9c>)
 800597c:	2200      	movs	r2, #0
 800597e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005980:	4b15      	ldr	r3, [pc, #84]	; (80059d8 <MX_TIM1_Init+0x9c>)
 8005982:	2200      	movs	r2, #0
 8005984:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005986:	4814      	ldr	r0, [pc, #80]	; (80059d8 <MX_TIM1_Init+0x9c>)
 8005988:	f003 fcaa 	bl	80092e0 <HAL_TIM_Base_Init>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d001      	beq.n	8005996 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8005992:	f000 fa41 	bl	8005e18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005996:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800599a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800599c:	f107 0308 	add.w	r3, r7, #8
 80059a0:	4619      	mov	r1, r3
 80059a2:	480d      	ldr	r0, [pc, #52]	; (80059d8 <MX_TIM1_Init+0x9c>)
 80059a4:	f004 fbe8 	bl	800a178 <HAL_TIM_ConfigClockSource>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d001      	beq.n	80059b2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80059ae:	f000 fa33 	bl	8005e18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80059b2:	2300      	movs	r3, #0
 80059b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80059b6:	2300      	movs	r3, #0
 80059b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80059ba:	463b      	mov	r3, r7
 80059bc:	4619      	mov	r1, r3
 80059be:	4806      	ldr	r0, [pc, #24]	; (80059d8 <MX_TIM1_Init+0x9c>)
 80059c0:	f005 fa2e 	bl	800ae20 <HAL_TIMEx_MasterConfigSynchronization>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d001      	beq.n	80059ce <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80059ca:	f000 fa25 	bl	8005e18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80059ce:	bf00      	nop
 80059d0:	3718      	adds	r7, #24
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	20000380 	.word	0x20000380
 80059dc:	40012c00 	.word	0x40012c00

080059e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b08e      	sub	sp, #56	; 0x38
 80059e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80059e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80059ea:	2200      	movs	r2, #0
 80059ec:	601a      	str	r2, [r3, #0]
 80059ee:	605a      	str	r2, [r3, #4]
 80059f0:	609a      	str	r2, [r3, #8]
 80059f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80059f4:	f107 0320 	add.w	r3, r7, #32
 80059f8:	2200      	movs	r2, #0
 80059fa:	601a      	str	r2, [r3, #0]
 80059fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80059fe:	1d3b      	adds	r3, r7, #4
 8005a00:	2200      	movs	r2, #0
 8005a02:	601a      	str	r2, [r3, #0]
 8005a04:	605a      	str	r2, [r3, #4]
 8005a06:	609a      	str	r2, [r3, #8]
 8005a08:	60da      	str	r2, [r3, #12]
 8005a0a:	611a      	str	r2, [r3, #16]
 8005a0c:	615a      	str	r2, [r3, #20]
 8005a0e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005a10:	4b2d      	ldr	r3, [pc, #180]	; (8005ac8 <MX_TIM2_Init+0xe8>)
 8005a12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005a16:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005a18:	4b2b      	ldr	r3, [pc, #172]	; (8005ac8 <MX_TIM2_Init+0xe8>)
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a1e:	4b2a      	ldr	r3, [pc, #168]	; (8005ac8 <MX_TIM2_Init+0xe8>)
 8005a20:	2200      	movs	r2, #0
 8005a22:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 399;
 8005a24:	4b28      	ldr	r3, [pc, #160]	; (8005ac8 <MX_TIM2_Init+0xe8>)
 8005a26:	f240 128f 	movw	r2, #399	; 0x18f
 8005a2a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a2c:	4b26      	ldr	r3, [pc, #152]	; (8005ac8 <MX_TIM2_Init+0xe8>)
 8005a2e:	2200      	movs	r2, #0
 8005a30:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a32:	4b25      	ldr	r3, [pc, #148]	; (8005ac8 <MX_TIM2_Init+0xe8>)
 8005a34:	2200      	movs	r2, #0
 8005a36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005a38:	4823      	ldr	r0, [pc, #140]	; (8005ac8 <MX_TIM2_Init+0xe8>)
 8005a3a:	f003 fc51 	bl	80092e0 <HAL_TIM_Base_Init>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d001      	beq.n	8005a48 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8005a44:	f000 f9e8 	bl	8005e18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005a48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a4c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005a4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a52:	4619      	mov	r1, r3
 8005a54:	481c      	ldr	r0, [pc, #112]	; (8005ac8 <MX_TIM2_Init+0xe8>)
 8005a56:	f004 fb8f 	bl	800a178 <HAL_TIM_ConfigClockSource>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d001      	beq.n	8005a64 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8005a60:	f000 f9da 	bl	8005e18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005a64:	4818      	ldr	r0, [pc, #96]	; (8005ac8 <MX_TIM2_Init+0xe8>)
 8005a66:	f003 fd31 	bl	80094cc <HAL_TIM_PWM_Init>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d001      	beq.n	8005a74 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8005a70:	f000 f9d2 	bl	8005e18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a74:	2300      	movs	r3, #0
 8005a76:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005a7c:	f107 0320 	add.w	r3, r7, #32
 8005a80:	4619      	mov	r1, r3
 8005a82:	4811      	ldr	r0, [pc, #68]	; (8005ac8 <MX_TIM2_Init+0xe8>)
 8005a84:	f005 f9cc 	bl	800ae20 <HAL_TIMEx_MasterConfigSynchronization>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d001      	beq.n	8005a92 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8005a8e:	f000 f9c3 	bl	8005e18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005a92:	2360      	movs	r3, #96	; 0x60
 8005a94:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005a96:	2300      	movs	r3, #0
 8005a98:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005aa2:	1d3b      	adds	r3, r7, #4
 8005aa4:	220c      	movs	r2, #12
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	4807      	ldr	r0, [pc, #28]	; (8005ac8 <MX_TIM2_Init+0xe8>)
 8005aaa:	f004 faa7 	bl	8009ffc <HAL_TIM_PWM_ConfigChannel>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d001      	beq.n	8005ab8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8005ab4:	f000 f9b0 	bl	8005e18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8005ab8:	4803      	ldr	r0, [pc, #12]	; (8005ac8 <MX_TIM2_Init+0xe8>)
 8005aba:	f000 fb1f 	bl	80060fc <HAL_TIM_MspPostInit>

}
 8005abe:	bf00      	nop
 8005ac0:	3738      	adds	r7, #56	; 0x38
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	200003c8 	.word	0x200003c8

08005acc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b086      	sub	sp, #24
 8005ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005ad2:	f107 0308 	add.w	r3, r7, #8
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	601a      	str	r2, [r3, #0]
 8005ada:	605a      	str	r2, [r3, #4]
 8005adc:	609a      	str	r2, [r3, #8]
 8005ade:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005ae0:	463b      	mov	r3, r7
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	601a      	str	r2, [r3, #0]
 8005ae6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005ae8:	4b1d      	ldr	r3, [pc, #116]	; (8005b60 <MX_TIM4_Init+0x94>)
 8005aea:	4a1e      	ldr	r2, [pc, #120]	; (8005b64 <MX_TIM4_Init+0x98>)
 8005aec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 799;
 8005aee:	4b1c      	ldr	r3, [pc, #112]	; (8005b60 <MX_TIM4_Init+0x94>)
 8005af0:	f240 321f 	movw	r2, #799	; 0x31f
 8005af4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005af6:	4b1a      	ldr	r3, [pc, #104]	; (8005b60 <MX_TIM4_Init+0x94>)
 8005af8:	2200      	movs	r2, #0
 8005afa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 499;
 8005afc:	4b18      	ldr	r3, [pc, #96]	; (8005b60 <MX_TIM4_Init+0x94>)
 8005afe:	f240 12f3 	movw	r2, #499	; 0x1f3
 8005b02:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005b04:	4b16      	ldr	r3, [pc, #88]	; (8005b60 <MX_TIM4_Init+0x94>)
 8005b06:	2200      	movs	r2, #0
 8005b08:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005b0a:	4b15      	ldr	r3, [pc, #84]	; (8005b60 <MX_TIM4_Init+0x94>)
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005b10:	4813      	ldr	r0, [pc, #76]	; (8005b60 <MX_TIM4_Init+0x94>)
 8005b12:	f003 fbe5 	bl	80092e0 <HAL_TIM_Base_Init>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d001      	beq.n	8005b20 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8005b1c:	f000 f97c 	bl	8005e18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005b20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b24:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005b26:	f107 0308 	add.w	r3, r7, #8
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	480c      	ldr	r0, [pc, #48]	; (8005b60 <MX_TIM4_Init+0x94>)
 8005b2e:	f004 fb23 	bl	800a178 <HAL_TIM_ConfigClockSource>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d001      	beq.n	8005b3c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8005b38:	f000 f96e 	bl	8005e18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b40:	2300      	movs	r3, #0
 8005b42:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005b44:	463b      	mov	r3, r7
 8005b46:	4619      	mov	r1, r3
 8005b48:	4805      	ldr	r0, [pc, #20]	; (8005b60 <MX_TIM4_Init+0x94>)
 8005b4a:	f005 f969 	bl	800ae20 <HAL_TIMEx_MasterConfigSynchronization>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d001      	beq.n	8005b58 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8005b54:	f000 f960 	bl	8005e18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8005b58:	bf00      	nop
 8005b5a:	3718      	adds	r7, #24
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	20000410 	.word	0x20000410
 8005b64:	40000800 	.word	0x40000800

08005b68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005b6e:	4b10      	ldr	r3, [pc, #64]	; (8005bb0 <MX_DMA_Init+0x48>)
 8005b70:	695b      	ldr	r3, [r3, #20]
 8005b72:	4a0f      	ldr	r2, [pc, #60]	; (8005bb0 <MX_DMA_Init+0x48>)
 8005b74:	f043 0301 	orr.w	r3, r3, #1
 8005b78:	6153      	str	r3, [r2, #20]
 8005b7a:	4b0d      	ldr	r3, [pc, #52]	; (8005bb0 <MX_DMA_Init+0x48>)
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	f003 0301 	and.w	r3, r3, #1
 8005b82:	607b      	str	r3, [r7, #4]
 8005b84:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8005b86:	2200      	movs	r2, #0
 8005b88:	2100      	movs	r1, #0
 8005b8a:	200b      	movs	r0, #11
 8005b8c:	f001 fa0f 	bl	8006fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8005b90:	200b      	movs	r0, #11
 8005b92:	f001 fa28 	bl	8006fe6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8005b96:	2200      	movs	r2, #0
 8005b98:	2100      	movs	r1, #0
 8005b9a:	2010      	movs	r0, #16
 8005b9c:	f001 fa07 	bl	8006fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8005ba0:	2010      	movs	r0, #16
 8005ba2:	f001 fa20 	bl	8006fe6 <HAL_NVIC_EnableIRQ>

}
 8005ba6:	bf00      	nop
 8005ba8:	3708      	adds	r7, #8
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	40021000 	.word	0x40021000

08005bb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b088      	sub	sp, #32
 8005bb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bba:	f107 0310 	add.w	r3, r7, #16
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	601a      	str	r2, [r3, #0]
 8005bc2:	605a      	str	r2, [r3, #4]
 8005bc4:	609a      	str	r2, [r3, #8]
 8005bc6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005bc8:	4b8c      	ldr	r3, [pc, #560]	; (8005dfc <MX_GPIO_Init+0x248>)
 8005bca:	699b      	ldr	r3, [r3, #24]
 8005bcc:	4a8b      	ldr	r2, [pc, #556]	; (8005dfc <MX_GPIO_Init+0x248>)
 8005bce:	f043 0310 	orr.w	r3, r3, #16
 8005bd2:	6193      	str	r3, [r2, #24]
 8005bd4:	4b89      	ldr	r3, [pc, #548]	; (8005dfc <MX_GPIO_Init+0x248>)
 8005bd6:	699b      	ldr	r3, [r3, #24]
 8005bd8:	f003 0310 	and.w	r3, r3, #16
 8005bdc:	60fb      	str	r3, [r7, #12]
 8005bde:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005be0:	4b86      	ldr	r3, [pc, #536]	; (8005dfc <MX_GPIO_Init+0x248>)
 8005be2:	699b      	ldr	r3, [r3, #24]
 8005be4:	4a85      	ldr	r2, [pc, #532]	; (8005dfc <MX_GPIO_Init+0x248>)
 8005be6:	f043 0320 	orr.w	r3, r3, #32
 8005bea:	6193      	str	r3, [r2, #24]
 8005bec:	4b83      	ldr	r3, [pc, #524]	; (8005dfc <MX_GPIO_Init+0x248>)
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	f003 0320 	and.w	r3, r3, #32
 8005bf4:	60bb      	str	r3, [r7, #8]
 8005bf6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005bf8:	4b80      	ldr	r3, [pc, #512]	; (8005dfc <MX_GPIO_Init+0x248>)
 8005bfa:	699b      	ldr	r3, [r3, #24]
 8005bfc:	4a7f      	ldr	r2, [pc, #508]	; (8005dfc <MX_GPIO_Init+0x248>)
 8005bfe:	f043 0304 	orr.w	r3, r3, #4
 8005c02:	6193      	str	r3, [r2, #24]
 8005c04:	4b7d      	ldr	r3, [pc, #500]	; (8005dfc <MX_GPIO_Init+0x248>)
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	f003 0304 	and.w	r3, r3, #4
 8005c0c:	607b      	str	r3, [r7, #4]
 8005c0e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c10:	4b7a      	ldr	r3, [pc, #488]	; (8005dfc <MX_GPIO_Init+0x248>)
 8005c12:	699b      	ldr	r3, [r3, #24]
 8005c14:	4a79      	ldr	r2, [pc, #484]	; (8005dfc <MX_GPIO_Init+0x248>)
 8005c16:	f043 0308 	orr.w	r3, r3, #8
 8005c1a:	6193      	str	r3, [r2, #24]
 8005c1c:	4b77      	ldr	r3, [pc, #476]	; (8005dfc <MX_GPIO_Init+0x248>)
 8005c1e:	699b      	ldr	r3, [r3, #24]
 8005c20:	f003 0308 	and.w	r3, r3, #8
 8005c24:	603b      	str	r3, [r7, #0]
 8005c26:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005c2e:	4874      	ldr	r0, [pc, #464]	; (8005e00 <MX_GPIO_Init+0x24c>)
 8005c30:	f002 f8dd 	bl	8007dee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_9, GPIO_PIN_RESET);
 8005c34:	2200      	movs	r2, #0
 8005c36:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005c3a:	4872      	ldr	r0, [pc, #456]	; (8005e04 <MX_GPIO_Init+0x250>)
 8005c3c:	f002 f8d7 	bl	8007dee <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8005c40:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8005c44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005c46:	2300      	movs	r3, #0
 8005c48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005c4e:	f107 0310 	add.w	r3, r7, #16
 8005c52:	4619      	mov	r1, r3
 8005c54:	486a      	ldr	r0, [pc, #424]	; (8005e00 <MX_GPIO_Init+0x24c>)
 8005c56:	f001 ff2f 	bl	8007ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005c5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c60:	2301      	movs	r3, #1
 8005c62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c64:	2300      	movs	r3, #0
 8005c66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c68:	2302      	movs	r3, #2
 8005c6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005c6c:	f107 0310 	add.w	r3, r7, #16
 8005c70:	4619      	mov	r1, r3
 8005c72:	4863      	ldr	r0, [pc, #396]	; (8005e00 <MX_GPIO_Init+0x24c>)
 8005c74:	f001 ff20 	bl	8007ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005c78:	2302      	movs	r3, #2
 8005c7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c80:	f107 0310 	add.w	r3, r7, #16
 8005c84:	4619      	mov	r1, r3
 8005c86:	4860      	ldr	r0, [pc, #384]	; (8005e08 <MX_GPIO_Init+0x254>)
 8005c88:	f001 ff16 	bl	8007ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005c8c:	2304      	movs	r3, #4
 8005c8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8005c90:	4b5e      	ldr	r3, [pc, #376]	; (8005e0c <MX_GPIO_Init+0x258>)
 8005c92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c94:	2300      	movs	r3, #0
 8005c96:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c98:	f107 0310 	add.w	r3, r7, #16
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	485a      	ldr	r0, [pc, #360]	; (8005e08 <MX_GPIO_Init+0x254>)
 8005ca0:	f001 ff0a 	bl	8007ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA8 PA9 PA10
                           PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8005ca4:	f641 7310 	movw	r3, #7952	; 0x1f10
 8005ca8:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005caa:	2300      	movs	r3, #0
 8005cac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cb2:	f107 0310 	add.w	r3, r7, #16
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	4853      	ldr	r0, [pc, #332]	; (8005e08 <MX_GPIO_Init+0x254>)
 8005cba:	f001 fefd 	bl	8007ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8005cbe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005cc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ccc:	2302      	movs	r3, #2
 8005cce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005cd0:	f107 0310 	add.w	r3, r7, #16
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	484b      	ldr	r0, [pc, #300]	; (8005e04 <MX_GPIO_Init+0x250>)
 8005cd8:	f001 feee 	bl	8007ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005cdc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005ce0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005ce2:	4b4b      	ldr	r3, [pc, #300]	; (8005e10 <MX_GPIO_Init+0x25c>)
 8005ce4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005cea:	f107 0310 	add.w	r3, r7, #16
 8005cee:	4619      	mov	r1, r3
 8005cf0:	4844      	ldr	r0, [pc, #272]	; (8005e04 <MX_GPIO_Init+0x250>)
 8005cf2:	f001 fee1 	bl	8007ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005cf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cfa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005cfc:	4b45      	ldr	r3, [pc, #276]	; (8005e14 <MX_GPIO_Init+0x260>)
 8005cfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d00:	2300      	movs	r3, #0
 8005d02:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d04:	f107 0310 	add.w	r3, r7, #16
 8005d08:	4619      	mov	r1, r3
 8005d0a:	483e      	ldr	r0, [pc, #248]	; (8005e04 <MX_GPIO_Init+0x250>)
 8005d0c:	f001 fed4 	bl	8007ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB15 PB4 PB5
                           PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5
 8005d10:	f24a 1330 	movw	r3, #41264	; 0xa130
 8005d14:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005d16:	2300      	movs	r3, #0
 8005d18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d1e:	f107 0310 	add.w	r3, r7, #16
 8005d22:	4619      	mov	r1, r3
 8005d24:	4837      	ldr	r0, [pc, #220]	; (8005e04 <MX_GPIO_Init+0x250>)
 8005d26:	f001 fec7 	bl	8007ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_3;
 8005d2a:	f244 0308 	movw	r3, #16392	; 0x4008
 8005d2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8005d30:	4b36      	ldr	r3, [pc, #216]	; (8005e0c <MX_GPIO_Init+0x258>)
 8005d32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d34:	2300      	movs	r3, #0
 8005d36:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d38:	f107 0310 	add.w	r3, r7, #16
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	4831      	ldr	r0, [pc, #196]	; (8005e04 <MX_GPIO_Init+0x250>)
 8005d40:	f001 feba 	bl	8007ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005d44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005d4a:	4b32      	ldr	r3, [pc, #200]	; (8005e14 <MX_GPIO_Init+0x260>)
 8005d4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d52:	f107 0310 	add.w	r3, r7, #16
 8005d56:	4619      	mov	r1, r3
 8005d58:	482b      	ldr	r0, [pc, #172]	; (8005e08 <MX_GPIO_Init+0x254>)
 8005d5a:	f001 fead 	bl	8007ab8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 3, 0);
 8005d5e:	2200      	movs	r2, #0
 8005d60:	2103      	movs	r1, #3
 8005d62:	2008      	movs	r0, #8
 8005d64:	f001 f923 	bl	8006fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8005d68:	2008      	movs	r0, #8
 8005d6a:	f001 f93c 	bl	8006fe6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 3, 0);
 8005d6e:	2200      	movs	r2, #0
 8005d70:	2103      	movs	r1, #3
 8005d72:	2009      	movs	r0, #9
 8005d74:	f001 f91b 	bl	8006fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8005d78:	2009      	movs	r0, #9
 8005d7a:	f001 f934 	bl	8006fe6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8005d7e:	2200      	movs	r2, #0
 8005d80:	2100      	movs	r1, #0
 8005d82:	2028      	movs	r0, #40	; 0x28
 8005d84:	f001 f913 	bl	8006fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005d88:	2028      	movs	r0, #40	; 0x28
 8005d8a:	f001 f92c 	bl	8006fe6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005d8e:	2340      	movs	r3, #64	; 0x40
 8005d90:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005d92:	2300      	movs	r3, #0
 8005d94:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d96:	2300      	movs	r3, #0
 8005d98:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d9a:	f107 0310 	add.w	r3, r7, #16
 8005d9e:	4619      	mov	r1, r3
 8005da0:	4819      	ldr	r0, [pc, #100]	; (8005e08 <MX_GPIO_Init+0x254>)
 8005da2:	f001 fe89 	bl	8007ab8 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005da6:	2380      	movs	r3, #128	; 0x80
 8005da8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005daa:	2301      	movs	r3, #1
 8005dac:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dae:	2300      	movs	r3, #0
 8005db0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005db2:	2302      	movs	r3, #2
 8005db4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005db6:	f107 0310 	add.w	r3, r7, #16
 8005dba:	4619      	mov	r1, r3
 8005dbc:	4812      	ldr	r0, [pc, #72]	; (8005e08 <MX_GPIO_Init+0x254>)
 8005dbe:	f001 fe7b 	bl	8007ab8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	2180      	movs	r1, #128	; 0x80
 8005dc6:	4810      	ldr	r0, [pc, #64]	; (8005e08 <MX_GPIO_Init+0x254>)
 8005dc8:	f002 f811 	bl	8007dee <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005dcc:	2302      	movs	r3, #2
 8005dce:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005dd8:	2302      	movs	r3, #2
 8005dda:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ddc:	f107 0310 	add.w	r3, r7, #16
 8005de0:	4619      	mov	r1, r3
 8005de2:	4808      	ldr	r0, [pc, #32]	; (8005e04 <MX_GPIO_Init+0x250>)
 8005de4:	f001 fe68 	bl	8007ab8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8005de8:	2200      	movs	r2, #0
 8005dea:	2102      	movs	r1, #2
 8005dec:	4805      	ldr	r0, [pc, #20]	; (8005e04 <MX_GPIO_Init+0x250>)
 8005dee:	f001 fffe 	bl	8007dee <HAL_GPIO_WritePin>
/* USER CODE END MX_GPIO_Init_2 */
}
 8005df2:	bf00      	nop
 8005df4:	3720      	adds	r7, #32
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	40021000 	.word	0x40021000
 8005e00:	40011000 	.word	0x40011000
 8005e04:	40010c00 	.word	0x40010c00
 8005e08:	40010800 	.word	0x40010800
 8005e0c:	10310000 	.word	0x10310000
 8005e10:	10110000 	.word	0x10110000
 8005e14:	10210000 	.word	0x10210000

08005e18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005e1c:	b672      	cpsid	i
}
 8005e1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005e20:	e7fe      	b.n	8005e20 <Error_Handler+0x8>
	...

08005e24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005e2a:	4b1d      	ldr	r3, [pc, #116]	; (8005ea0 <HAL_MspInit+0x7c>)
 8005e2c:	699b      	ldr	r3, [r3, #24]
 8005e2e:	4a1c      	ldr	r2, [pc, #112]	; (8005ea0 <HAL_MspInit+0x7c>)
 8005e30:	f043 0301 	orr.w	r3, r3, #1
 8005e34:	6193      	str	r3, [r2, #24]
 8005e36:	4b1a      	ldr	r3, [pc, #104]	; (8005ea0 <HAL_MspInit+0x7c>)
 8005e38:	699b      	ldr	r3, [r3, #24]
 8005e3a:	f003 0301 	and.w	r3, r3, #1
 8005e3e:	60bb      	str	r3, [r7, #8]
 8005e40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e42:	4b17      	ldr	r3, [pc, #92]	; (8005ea0 <HAL_MspInit+0x7c>)
 8005e44:	69db      	ldr	r3, [r3, #28]
 8005e46:	4a16      	ldr	r2, [pc, #88]	; (8005ea0 <HAL_MspInit+0x7c>)
 8005e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e4c:	61d3      	str	r3, [r2, #28]
 8005e4e:	4b14      	ldr	r3, [pc, #80]	; (8005ea0 <HAL_MspInit+0x7c>)
 8005e50:	69db      	ldr	r3, [r3, #28]
 8005e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e56:	607b      	str	r3, [r7, #4]
 8005e58:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	2100      	movs	r1, #0
 8005e5e:	2004      	movs	r0, #4
 8005e60:	f001 f8a5 	bl	8006fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8005e64:	2004      	movs	r0, #4
 8005e66:	f001 f8be 	bl	8006fe6 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	2100      	movs	r1, #0
 8005e6e:	2005      	movs	r0, #5
 8005e70:	f001 f89d 	bl	8006fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8005e74:	2005      	movs	r0, #5
 8005e76:	f001 f8b6 	bl	8006fe6 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005e7a:	4b0a      	ldr	r3, [pc, #40]	; (8005ea4 <HAL_MspInit+0x80>)
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	60fb      	str	r3, [r7, #12]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005e86:	60fb      	str	r3, [r7, #12]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005e8e:	60fb      	str	r3, [r7, #12]
 8005e90:	4a04      	ldr	r2, [pc, #16]	; (8005ea4 <HAL_MspInit+0x80>)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005e96:	bf00      	nop
 8005e98:	3710      	adds	r7, #16
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	40021000 	.word	0x40021000
 8005ea4:	40010000 	.word	0x40010000

08005ea8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b08a      	sub	sp, #40	; 0x28
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005eb0:	f107 0318 	add.w	r3, r7, #24
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	601a      	str	r2, [r3, #0]
 8005eb8:	605a      	str	r2, [r3, #4]
 8005eba:	609a      	str	r2, [r3, #8]
 8005ebc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a38      	ldr	r2, [pc, #224]	; (8005fa4 <HAL_ADC_MspInit+0xfc>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d168      	bne.n	8005f9a <HAL_ADC_MspInit+0xf2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005ec8:	4b37      	ldr	r3, [pc, #220]	; (8005fa8 <HAL_ADC_MspInit+0x100>)
 8005eca:	699b      	ldr	r3, [r3, #24]
 8005ecc:	4a36      	ldr	r2, [pc, #216]	; (8005fa8 <HAL_ADC_MspInit+0x100>)
 8005ece:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005ed2:	6193      	str	r3, [r2, #24]
 8005ed4:	4b34      	ldr	r3, [pc, #208]	; (8005fa8 <HAL_ADC_MspInit+0x100>)
 8005ed6:	699b      	ldr	r3, [r3, #24]
 8005ed8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005edc:	617b      	str	r3, [r7, #20]
 8005ede:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ee0:	4b31      	ldr	r3, [pc, #196]	; (8005fa8 <HAL_ADC_MspInit+0x100>)
 8005ee2:	699b      	ldr	r3, [r3, #24]
 8005ee4:	4a30      	ldr	r2, [pc, #192]	; (8005fa8 <HAL_ADC_MspInit+0x100>)
 8005ee6:	f043 0304 	orr.w	r3, r3, #4
 8005eea:	6193      	str	r3, [r2, #24]
 8005eec:	4b2e      	ldr	r3, [pc, #184]	; (8005fa8 <HAL_ADC_MspInit+0x100>)
 8005eee:	699b      	ldr	r3, [r3, #24]
 8005ef0:	f003 0304 	and.w	r3, r3, #4
 8005ef4:	613b      	str	r3, [r7, #16]
 8005ef6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ef8:	4b2b      	ldr	r3, [pc, #172]	; (8005fa8 <HAL_ADC_MspInit+0x100>)
 8005efa:	699b      	ldr	r3, [r3, #24]
 8005efc:	4a2a      	ldr	r2, [pc, #168]	; (8005fa8 <HAL_ADC_MspInit+0x100>)
 8005efe:	f043 0308 	orr.w	r3, r3, #8
 8005f02:	6193      	str	r3, [r2, #24]
 8005f04:	4b28      	ldr	r3, [pc, #160]	; (8005fa8 <HAL_ADC_MspInit+0x100>)
 8005f06:	699b      	ldr	r3, [r3, #24]
 8005f08:	f003 0308 	and.w	r3, r3, #8
 8005f0c:	60fb      	str	r3, [r7, #12]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA5     ------> ADC1_IN5
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 8005f10:	2323      	movs	r3, #35	; 0x23
 8005f12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005f14:	2303      	movs	r3, #3
 8005f16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f18:	f107 0318 	add.w	r3, r7, #24
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	4823      	ldr	r0, [pc, #140]	; (8005fac <HAL_ADC_MspInit+0x104>)
 8005f20:	f001 fdca 	bl	8007ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005f24:	2301      	movs	r3, #1
 8005f26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f2c:	f107 0318 	add.w	r3, r7, #24
 8005f30:	4619      	mov	r1, r3
 8005f32:	481f      	ldr	r0, [pc, #124]	; (8005fb0 <HAL_ADC_MspInit+0x108>)
 8005f34:	f001 fdc0 	bl	8007ab8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8005f38:	4b1e      	ldr	r3, [pc, #120]	; (8005fb4 <HAL_ADC_MspInit+0x10c>)
 8005f3a:	4a1f      	ldr	r2, [pc, #124]	; (8005fb8 <HAL_ADC_MspInit+0x110>)
 8005f3c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005f3e:	4b1d      	ldr	r3, [pc, #116]	; (8005fb4 <HAL_ADC_MspInit+0x10c>)
 8005f40:	2200      	movs	r2, #0
 8005f42:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005f44:	4b1b      	ldr	r3, [pc, #108]	; (8005fb4 <HAL_ADC_MspInit+0x10c>)
 8005f46:	2200      	movs	r2, #0
 8005f48:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005f4a:	4b1a      	ldr	r3, [pc, #104]	; (8005fb4 <HAL_ADC_MspInit+0x10c>)
 8005f4c:	2280      	movs	r2, #128	; 0x80
 8005f4e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005f50:	4b18      	ldr	r3, [pc, #96]	; (8005fb4 <HAL_ADC_MspInit+0x10c>)
 8005f52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f56:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005f58:	4b16      	ldr	r3, [pc, #88]	; (8005fb4 <HAL_ADC_MspInit+0x10c>)
 8005f5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005f5e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8005f60:	4b14      	ldr	r3, [pc, #80]	; (8005fb4 <HAL_ADC_MspInit+0x10c>)
 8005f62:	2200      	movs	r2, #0
 8005f64:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005f66:	4b13      	ldr	r3, [pc, #76]	; (8005fb4 <HAL_ADC_MspInit+0x10c>)
 8005f68:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8005f6c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005f6e:	4811      	ldr	r0, [pc, #68]	; (8005fb4 <HAL_ADC_MspInit+0x10c>)
 8005f70:	f001 f862 	bl	8007038 <HAL_DMA_Init>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d001      	beq.n	8005f7e <HAL_ADC_MspInit+0xd6>
    {
      Error_Handler();
 8005f7a:	f7ff ff4d 	bl	8005e18 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4a0c      	ldr	r2, [pc, #48]	; (8005fb4 <HAL_ADC_MspInit+0x10c>)
 8005f82:	621a      	str	r2, [r3, #32]
 8005f84:	4a0b      	ldr	r2, [pc, #44]	; (8005fb4 <HAL_ADC_MspInit+0x10c>)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	2100      	movs	r1, #0
 8005f8e:	2012      	movs	r0, #18
 8005f90:	f001 f80d 	bl	8006fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8005f94:	2012      	movs	r0, #18
 8005f96:	f001 f826 	bl	8006fe6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005f9a:	bf00      	nop
 8005f9c:	3728      	adds	r7, #40	; 0x28
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	40012400 	.word	0x40012400
 8005fa8:	40021000 	.word	0x40021000
 8005fac:	40010800 	.word	0x40010800
 8005fb0:	40010c00 	.word	0x40010c00
 8005fb4:	200002e8 	.word	0x200002e8
 8005fb8:	40020008 	.word	0x40020008

08005fbc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b088      	sub	sp, #32
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fc4:	f107 0310 	add.w	r3, r7, #16
 8005fc8:	2200      	movs	r2, #0
 8005fca:	601a      	str	r2, [r3, #0]
 8005fcc:	605a      	str	r2, [r3, #4]
 8005fce:	609a      	str	r2, [r3, #8]
 8005fd0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a15      	ldr	r2, [pc, #84]	; (800602c <HAL_I2C_MspInit+0x70>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d123      	bne.n	8006024 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005fdc:	4b14      	ldr	r3, [pc, #80]	; (8006030 <HAL_I2C_MspInit+0x74>)
 8005fde:	699b      	ldr	r3, [r3, #24]
 8005fe0:	4a13      	ldr	r2, [pc, #76]	; (8006030 <HAL_I2C_MspInit+0x74>)
 8005fe2:	f043 0308 	orr.w	r3, r3, #8
 8005fe6:	6193      	str	r3, [r2, #24]
 8005fe8:	4b11      	ldr	r3, [pc, #68]	; (8006030 <HAL_I2C_MspInit+0x74>)
 8005fea:	699b      	ldr	r3, [r3, #24]
 8005fec:	f003 0308 	and.w	r3, r3, #8
 8005ff0:	60fb      	str	r3, [r7, #12]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005ff4:	23c0      	movs	r3, #192	; 0xc0
 8005ff6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005ff8:	2312      	movs	r3, #18
 8005ffa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005ffc:	2303      	movs	r3, #3
 8005ffe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006000:	f107 0310 	add.w	r3, r7, #16
 8006004:	4619      	mov	r1, r3
 8006006:	480b      	ldr	r0, [pc, #44]	; (8006034 <HAL_I2C_MspInit+0x78>)
 8006008:	f001 fd56 	bl	8007ab8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800600c:	4b08      	ldr	r3, [pc, #32]	; (8006030 <HAL_I2C_MspInit+0x74>)
 800600e:	69db      	ldr	r3, [r3, #28]
 8006010:	4a07      	ldr	r2, [pc, #28]	; (8006030 <HAL_I2C_MspInit+0x74>)
 8006012:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006016:	61d3      	str	r3, [r2, #28]
 8006018:	4b05      	ldr	r3, [pc, #20]	; (8006030 <HAL_I2C_MspInit+0x74>)
 800601a:	69db      	ldr	r3, [r3, #28]
 800601c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006020:	60bb      	str	r3, [r7, #8]
 8006022:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006024:	bf00      	nop
 8006026:	3720      	adds	r7, #32
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}
 800602c:	40005400 	.word	0x40005400
 8006030:	40021000 	.word	0x40021000
 8006034:	40010c00 	.word	0x40010c00

08006038 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b086      	sub	sp, #24
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a29      	ldr	r2, [pc, #164]	; (80060ec <HAL_TIM_Base_MspInit+0xb4>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d114      	bne.n	8006074 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800604a:	4b29      	ldr	r3, [pc, #164]	; (80060f0 <HAL_TIM_Base_MspInit+0xb8>)
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	4a28      	ldr	r2, [pc, #160]	; (80060f0 <HAL_TIM_Base_MspInit+0xb8>)
 8006050:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006054:	6193      	str	r3, [r2, #24]
 8006056:	4b26      	ldr	r3, [pc, #152]	; (80060f0 <HAL_TIM_Base_MspInit+0xb8>)
 8006058:	699b      	ldr	r3, [r3, #24]
 800605a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800605e:	617b      	str	r3, [r7, #20]
 8006060:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8006062:	2200      	movs	r2, #0
 8006064:	2100      	movs	r1, #0
 8006066:	2019      	movs	r0, #25
 8006068:	f000 ffa1 	bl	8006fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800606c:	2019      	movs	r0, #25
 800606e:	f000 ffba 	bl	8006fe6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8006072:	e037      	b.n	80060e4 <HAL_TIM_Base_MspInit+0xac>
  else if(htim_base->Instance==TIM2)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800607c:	d114      	bne.n	80060a8 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800607e:	4b1c      	ldr	r3, [pc, #112]	; (80060f0 <HAL_TIM_Base_MspInit+0xb8>)
 8006080:	69db      	ldr	r3, [r3, #28]
 8006082:	4a1b      	ldr	r2, [pc, #108]	; (80060f0 <HAL_TIM_Base_MspInit+0xb8>)
 8006084:	f043 0301 	orr.w	r3, r3, #1
 8006088:	61d3      	str	r3, [r2, #28]
 800608a:	4b19      	ldr	r3, [pc, #100]	; (80060f0 <HAL_TIM_Base_MspInit+0xb8>)
 800608c:	69db      	ldr	r3, [r3, #28]
 800608e:	f003 0301 	and.w	r3, r3, #1
 8006092:	613b      	str	r3, [r7, #16]
 8006094:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8006096:	2200      	movs	r2, #0
 8006098:	2103      	movs	r1, #3
 800609a:	201c      	movs	r0, #28
 800609c:	f000 ff87 	bl	8006fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80060a0:	201c      	movs	r0, #28
 80060a2:	f000 ffa0 	bl	8006fe6 <HAL_NVIC_EnableIRQ>
}
 80060a6:	e01d      	b.n	80060e4 <HAL_TIM_Base_MspInit+0xac>
  else if(htim_base->Instance==TIM3)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a11      	ldr	r2, [pc, #68]	; (80060f4 <HAL_TIM_Base_MspInit+0xbc>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d018      	beq.n	80060e4 <HAL_TIM_Base_MspInit+0xac>
  else if(htim_base->Instance==TIM4)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a10      	ldr	r2, [pc, #64]	; (80060f8 <HAL_TIM_Base_MspInit+0xc0>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d113      	bne.n	80060e4 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80060bc:	4b0c      	ldr	r3, [pc, #48]	; (80060f0 <HAL_TIM_Base_MspInit+0xb8>)
 80060be:	69db      	ldr	r3, [r3, #28]
 80060c0:	4a0b      	ldr	r2, [pc, #44]	; (80060f0 <HAL_TIM_Base_MspInit+0xb8>)
 80060c2:	f043 0304 	orr.w	r3, r3, #4
 80060c6:	61d3      	str	r3, [r2, #28]
 80060c8:	4b09      	ldr	r3, [pc, #36]	; (80060f0 <HAL_TIM_Base_MspInit+0xb8>)
 80060ca:	69db      	ldr	r3, [r3, #28]
 80060cc:	f003 0304 	and.w	r3, r3, #4
 80060d0:	60fb      	str	r3, [r7, #12]
 80060d2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 80060d4:	2200      	movs	r2, #0
 80060d6:	2101      	movs	r1, #1
 80060d8:	201e      	movs	r0, #30
 80060da:	f000 ff68 	bl	8006fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80060de:	201e      	movs	r0, #30
 80060e0:	f000 ff81 	bl	8006fe6 <HAL_NVIC_EnableIRQ>
}
 80060e4:	bf00      	nop
 80060e6:	3718      	adds	r7, #24
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	40012c00 	.word	0x40012c00
 80060f0:	40021000 	.word	0x40021000
 80060f4:	40000400 	.word	0x40000400
 80060f8:	40000800 	.word	0x40000800

080060fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b088      	sub	sp, #32
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006104:	f107 0310 	add.w	r3, r7, #16
 8006108:	2200      	movs	r2, #0
 800610a:	601a      	str	r2, [r3, #0]
 800610c:	605a      	str	r2, [r3, #4]
 800610e:	609a      	str	r2, [r3, #8]
 8006110:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800611a:	d117      	bne.n	800614c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800611c:	4b0d      	ldr	r3, [pc, #52]	; (8006154 <HAL_TIM_MspPostInit+0x58>)
 800611e:	699b      	ldr	r3, [r3, #24]
 8006120:	4a0c      	ldr	r2, [pc, #48]	; (8006154 <HAL_TIM_MspPostInit+0x58>)
 8006122:	f043 0304 	orr.w	r3, r3, #4
 8006126:	6193      	str	r3, [r2, #24]
 8006128:	4b0a      	ldr	r3, [pc, #40]	; (8006154 <HAL_TIM_MspPostInit+0x58>)
 800612a:	699b      	ldr	r3, [r3, #24]
 800612c:	f003 0304 	and.w	r3, r3, #4
 8006130:	60fb      	str	r3, [r7, #12]
 8006132:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006134:	2308      	movs	r3, #8
 8006136:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006138:	2302      	movs	r3, #2
 800613a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800613c:	2303      	movs	r3, #3
 800613e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006140:	f107 0310 	add.w	r3, r7, #16
 8006144:	4619      	mov	r1, r3
 8006146:	4804      	ldr	r0, [pc, #16]	; (8006158 <HAL_TIM_MspPostInit+0x5c>)
 8006148:	f001 fcb6 	bl	8007ab8 <HAL_GPIO_Init>
  else if(htim->Instance==TIM3)
  {

  }

}
 800614c:	bf00      	nop
 800614e:	3720      	adds	r7, #32
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}
 8006154:	40021000 	.word	0x40021000
 8006158:	40010800 	.word	0x40010800

0800615c <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a19      	ldr	r2, [pc, #100]	; (80061d0 <HAL_TIM_Base_MspDeInit+0x74>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d109      	bne.n	8006182 <HAL_TIM_Base_MspDeInit+0x26>
  {
  /* USER CODE BEGIN TIM1_MspDeInit 0 */

  /* USER CODE END TIM1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM1_CLK_DISABLE();
 800616e:	4b19      	ldr	r3, [pc, #100]	; (80061d4 <HAL_TIM_Base_MspDeInit+0x78>)
 8006170:	699b      	ldr	r3, [r3, #24]
 8006172:	4a18      	ldr	r2, [pc, #96]	; (80061d4 <HAL_TIM_Base_MspDeInit+0x78>)
 8006174:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006178:	6193      	str	r3, [r2, #24]

    /* TIM1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(TIM1_UP_IRQn);
 800617a:	2019      	movs	r0, #25
 800617c:	f000 ff41 	bl	8007002 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN TIM4_MspDeInit 1 */

  /* USER CODE END TIM4_MspDeInit 1 */
  }

}
 8006180:	e021      	b.n	80061c6 <HAL_TIM_Base_MspDeInit+0x6a>
  else if(htim_base->Instance==TIM2)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800618a:	d109      	bne.n	80061a0 <HAL_TIM_Base_MspDeInit+0x44>
    __HAL_RCC_TIM2_CLK_DISABLE();
 800618c:	4b11      	ldr	r3, [pc, #68]	; (80061d4 <HAL_TIM_Base_MspDeInit+0x78>)
 800618e:	69db      	ldr	r3, [r3, #28]
 8006190:	4a10      	ldr	r2, [pc, #64]	; (80061d4 <HAL_TIM_Base_MspDeInit+0x78>)
 8006192:	f023 0301 	bic.w	r3, r3, #1
 8006196:	61d3      	str	r3, [r2, #28]
    HAL_NVIC_DisableIRQ(TIM2_IRQn);
 8006198:	201c      	movs	r0, #28
 800619a:	f000 ff32 	bl	8007002 <HAL_NVIC_DisableIRQ>
}
 800619e:	e012      	b.n	80061c6 <HAL_TIM_Base_MspDeInit+0x6a>
  else if(htim_base->Instance==TIM3)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a0c      	ldr	r2, [pc, #48]	; (80061d8 <HAL_TIM_Base_MspDeInit+0x7c>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d00d      	beq.n	80061c6 <HAL_TIM_Base_MspDeInit+0x6a>
  else if(htim_base->Instance==TIM4)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a0b      	ldr	r2, [pc, #44]	; (80061dc <HAL_TIM_Base_MspDeInit+0x80>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d108      	bne.n	80061c6 <HAL_TIM_Base_MspDeInit+0x6a>
    __HAL_RCC_TIM4_CLK_DISABLE();
 80061b4:	4b07      	ldr	r3, [pc, #28]	; (80061d4 <HAL_TIM_Base_MspDeInit+0x78>)
 80061b6:	69db      	ldr	r3, [r3, #28]
 80061b8:	4a06      	ldr	r2, [pc, #24]	; (80061d4 <HAL_TIM_Base_MspDeInit+0x78>)
 80061ba:	f023 0304 	bic.w	r3, r3, #4
 80061be:	61d3      	str	r3, [r2, #28]
    HAL_NVIC_DisableIRQ(TIM4_IRQn);
 80061c0:	201e      	movs	r0, #30
 80061c2:	f000 ff1e 	bl	8007002 <HAL_NVIC_DisableIRQ>
}
 80061c6:	bf00      	nop
 80061c8:	3708      	adds	r7, #8
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	40012c00 	.word	0x40012c00
 80061d4:	40021000 	.word	0x40021000
 80061d8:	40000400 	.word	0x40000400
 80061dc:	40000800 	.word	0x40000800

080061e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80061e0:	b480      	push	{r7}
 80061e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80061e4:	e7fe      	b.n	80061e4 <NMI_Handler+0x4>

080061e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80061e6:	b480      	push	{r7}
 80061e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80061ea:	e7fe      	b.n	80061ea <HardFault_Handler+0x4>

080061ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80061ec:	b480      	push	{r7}
 80061ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80061f0:	e7fe      	b.n	80061f0 <MemManage_Handler+0x4>

080061f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80061f2:	b480      	push	{r7}
 80061f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80061f6:	e7fe      	b.n	80061f6 <BusFault_Handler+0x4>

080061f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80061f8:	b480      	push	{r7}
 80061fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80061fc:	e7fe      	b.n	80061fc <UsageFault_Handler+0x4>

080061fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80061fe:	b480      	push	{r7}
 8006200:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006202:	bf00      	nop
 8006204:	46bd      	mov	sp, r7
 8006206:	bc80      	pop	{r7}
 8006208:	4770      	bx	lr

0800620a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800620a:	b480      	push	{r7}
 800620c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800620e:	bf00      	nop
 8006210:	46bd      	mov	sp, r7
 8006212:	bc80      	pop	{r7}
 8006214:	4770      	bx	lr

08006216 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006216:	b480      	push	{r7}
 8006218:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800621a:	bf00      	nop
 800621c:	46bd      	mov	sp, r7
 800621e:	bc80      	pop	{r7}
 8006220:	4770      	bx	lr

08006222 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006222:	b580      	push	{r7, lr}
 8006224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006226:	f000 f915 	bl	8006454 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800622a:	bf00      	nop
 800622c:	bd80      	pop	{r7, pc}

0800622e <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 800622e:	b580      	push	{r7, lr}
 8006230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8006232:	f001 f9bb 	bl	80075ac <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8006236:	bf00      	nop
 8006238:	bd80      	pop	{r7, pc}

0800623a <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800623a:	b480      	push	{r7}
 800623c:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800623e:	bf00      	nop
 8006240:	46bd      	mov	sp, r7
 8006242:	bc80      	pop	{r7}
 8006244:	4770      	bx	lr

08006246 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8006246:	b580      	push	{r7, lr}
 8006248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800624a:	2004      	movs	r0, #4
 800624c:	f001 fde8 	bl	8007e20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8006250:	bf00      	nop
 8006252:	bd80      	pop	{r7, pc}

08006254 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8006258:	2008      	movs	r0, #8
 800625a:	f001 fde1 	bl	8007e20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800625e:	bf00      	nop
 8006260:	bd80      	pop	{r7, pc}
	...

08006264 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006268:	4802      	ldr	r0, [pc, #8]	; (8006274 <DMA1_Channel1_IRQHandler+0x10>)
 800626a:	f000 fffb 	bl	8007264 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800626e:	bf00      	nop
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	200002e8 	.word	0x200002e8

08006278 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 800627c:	4802      	ldr	r0, [pc, #8]	; (8006288 <DMA1_Channel6_IRQHandler+0x10>)
 800627e:	f000 fff1 	bl	8007264 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8006282:	bf00      	nop
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	20000458 	.word	0x20000458

0800628c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8006290:	4802      	ldr	r0, [pc, #8]	; (800629c <ADC1_2_IRQHandler+0x10>)
 8006292:	f000 fab1 	bl	80067f8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8006296:	bf00      	nop
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	200002b8 	.word	0x200002b8

080062a0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80062a4:	4802      	ldr	r0, [pc, #8]	; (80062b0 <TIM1_UP_IRQHandler+0x10>)
 80062a6:	f003 fd0d 	bl	8009cc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80062aa:	bf00      	nop
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	20000380 	.word	0x20000380

080062b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80062b8:	4802      	ldr	r0, [pc, #8]	; (80062c4 <TIM2_IRQHandler+0x10>)
 80062ba:	f003 fd03 	bl	8009cc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80062be:	bf00      	nop
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	200003c8 	.word	0x200003c8

080062c8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80062cc:	4802      	ldr	r0, [pc, #8]	; (80062d8 <TIM4_IRQHandler+0x10>)
 80062ce:	f003 fcf9 	bl	8009cc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80062d2:	bf00      	nop
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	20000410 	.word	0x20000410

080062dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80062e0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80062e4:	f001 fd9c 	bl	8007e20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80062e8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80062ec:	f001 fd98 	bl	8007e20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80062f0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80062f4:	f001 fd94 	bl	8007e20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80062f8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80062fc:	f001 fd90 	bl	8007e20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006300:	bf00      	nop
 8006302:	bd80      	pop	{r7, pc}

08006304 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b086      	sub	sp, #24
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800630c:	4a14      	ldr	r2, [pc, #80]	; (8006360 <_sbrk+0x5c>)
 800630e:	4b15      	ldr	r3, [pc, #84]	; (8006364 <_sbrk+0x60>)
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
   if (NULL == __sbrk_heap_end)
 8006318:	4b13      	ldr	r3, [pc, #76]	; (8006368 <_sbrk+0x64>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d102      	bne.n	8006326 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006320:	4b11      	ldr	r3, [pc, #68]	; (8006368 <_sbrk+0x64>)
 8006322:	4a12      	ldr	r2, [pc, #72]	; (800636c <_sbrk+0x68>)
 8006324:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006326:	4b10      	ldr	r3, [pc, #64]	; (8006368 <_sbrk+0x64>)
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4413      	add	r3, r2
 800632e:	693a      	ldr	r2, [r7, #16]
 8006330:	429a      	cmp	r2, r3
 8006332:	d207      	bcs.n	8006344 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006334:	f004 feb8 	bl	800b0a8 <__errno>
 8006338:	4603      	mov	r3, r0
 800633a:	220c      	movs	r2, #12
 800633c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800633e:	f04f 33ff 	mov.w	r3, #4294967295
 8006342:	e009      	b.n	8006358 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006344:	4b08      	ldr	r3, [pc, #32]	; (8006368 <_sbrk+0x64>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800634a:	4b07      	ldr	r3, [pc, #28]	; (8006368 <_sbrk+0x64>)
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4413      	add	r3, r2
 8006352:	4a05      	ldr	r2, [pc, #20]	; (8006368 <_sbrk+0x64>)
 8006354:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006356:	68fb      	ldr	r3, [r7, #12]
}
 8006358:	4618      	mov	r0, r3
 800635a:	3718      	adds	r7, #24
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}
 8006360:	20005000 	.word	0x20005000
 8006364:	00000400 	.word	0x00000400
 8006368:	20000758 	.word	0x20000758
 800636c:	200008c8 	.word	0x200008c8

08006370 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006370:	b480      	push	{r7}
 8006372:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006374:	bf00      	nop
 8006376:	46bd      	mov	sp, r7
 8006378:	bc80      	pop	{r7}
 800637a:	4770      	bx	lr

0800637c <Reset_Handler>:
 800637c:	f7ff fff8 	bl	8006370 <SystemInit>
 8006380:	480b      	ldr	r0, [pc, #44]	; (80063b0 <LoopFillZerobss+0xe>)
 8006382:	490c      	ldr	r1, [pc, #48]	; (80063b4 <LoopFillZerobss+0x12>)
 8006384:	4a0c      	ldr	r2, [pc, #48]	; (80063b8 <LoopFillZerobss+0x16>)
 8006386:	2300      	movs	r3, #0
 8006388:	e002      	b.n	8006390 <LoopCopyDataInit>

0800638a <CopyDataInit>:
 800638a:	58d4      	ldr	r4, [r2, r3]
 800638c:	50c4      	str	r4, [r0, r3]
 800638e:	3304      	adds	r3, #4

08006390 <LoopCopyDataInit>:
 8006390:	18c4      	adds	r4, r0, r3
 8006392:	428c      	cmp	r4, r1
 8006394:	d3f9      	bcc.n	800638a <CopyDataInit>
 8006396:	4a09      	ldr	r2, [pc, #36]	; (80063bc <LoopFillZerobss+0x1a>)
 8006398:	4c09      	ldr	r4, [pc, #36]	; (80063c0 <LoopFillZerobss+0x1e>)
 800639a:	2300      	movs	r3, #0
 800639c:	e001      	b.n	80063a2 <LoopFillZerobss>

0800639e <FillZerobss>:
 800639e:	6013      	str	r3, [r2, #0]
 80063a0:	3204      	adds	r2, #4

080063a2 <LoopFillZerobss>:
 80063a2:	42a2      	cmp	r2, r4
 80063a4:	d3fb      	bcc.n	800639e <FillZerobss>
 80063a6:	f004 fe85 	bl	800b0b4 <__libc_init_array>
 80063aa:	f7ff f8d5 	bl	8005558 <main>
 80063ae:	4770      	bx	lr
 80063b0:	20000000 	.word	0x20000000
 80063b4:	20000298 	.word	0x20000298
 80063b8:	0800b31c 	.word	0x0800b31c
 80063bc:	20000298 	.word	0x20000298
 80063c0:	200008c8 	.word	0x200008c8

080063c4 <CAN1_RX1_IRQHandler>:
 80063c4:	e7fe      	b.n	80063c4 <CAN1_RX1_IRQHandler>
	...

080063c8 <HAL_Init>:
 80063c8:	b580      	push	{r7, lr}
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	4b08      	ldr	r3, [pc, #32]	; (80063f0 <HAL_Init+0x28>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a07      	ldr	r2, [pc, #28]	; (80063f0 <HAL_Init+0x28>)
 80063d2:	f043 0310 	orr.w	r3, r3, #16
 80063d6:	6013      	str	r3, [r2, #0]
 80063d8:	2003      	movs	r0, #3
 80063da:	f000 fddd 	bl	8006f98 <HAL_NVIC_SetPriorityGrouping>
 80063de:	200f      	movs	r0, #15
 80063e0:	f000 f808 	bl	80063f4 <HAL_InitTick>
 80063e4:	f7ff fd1e 	bl	8005e24 <HAL_MspInit>
 80063e8:	2300      	movs	r3, #0
 80063ea:	4618      	mov	r0, r3
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	40022000 	.word	0x40022000

080063f4 <HAL_InitTick>:
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b082      	sub	sp, #8
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	4b12      	ldr	r3, [pc, #72]	; (8006448 <HAL_InitTick+0x54>)
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	4b12      	ldr	r3, [pc, #72]	; (800644c <HAL_InitTick+0x58>)
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	4619      	mov	r1, r3
 8006406:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800640a:	fbb3 f3f1 	udiv	r3, r3, r1
 800640e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006412:	4618      	mov	r0, r3
 8006414:	f000 fe03 	bl	800701e <HAL_SYSTICK_Config>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d001      	beq.n	8006422 <HAL_InitTick+0x2e>
 800641e:	2301      	movs	r3, #1
 8006420:	e00e      	b.n	8006440 <HAL_InitTick+0x4c>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2b0f      	cmp	r3, #15
 8006426:	d80a      	bhi.n	800643e <HAL_InitTick+0x4a>
 8006428:	2200      	movs	r2, #0
 800642a:	6879      	ldr	r1, [r7, #4]
 800642c:	f04f 30ff 	mov.w	r0, #4294967295
 8006430:	f000 fdbd 	bl	8006fae <HAL_NVIC_SetPriority>
 8006434:	4a06      	ldr	r2, [pc, #24]	; (8006450 <HAL_InitTick+0x5c>)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6013      	str	r3, [r2, #0]
 800643a:	2300      	movs	r3, #0
 800643c:	e000      	b.n	8006440 <HAL_InitTick+0x4c>
 800643e:	2301      	movs	r3, #1
 8006440:	4618      	mov	r0, r3
 8006442:	3708      	adds	r7, #8
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}
 8006448:	2000023c 	.word	0x2000023c
 800644c:	20000244 	.word	0x20000244
 8006450:	20000240 	.word	0x20000240

08006454 <HAL_IncTick>:
 8006454:	b480      	push	{r7}
 8006456:	af00      	add	r7, sp, #0
 8006458:	4b05      	ldr	r3, [pc, #20]	; (8006470 <HAL_IncTick+0x1c>)
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	461a      	mov	r2, r3
 800645e:	4b05      	ldr	r3, [pc, #20]	; (8006474 <HAL_IncTick+0x20>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4413      	add	r3, r2
 8006464:	4a03      	ldr	r2, [pc, #12]	; (8006474 <HAL_IncTick+0x20>)
 8006466:	6013      	str	r3, [r2, #0]
 8006468:	bf00      	nop
 800646a:	46bd      	mov	sp, r7
 800646c:	bc80      	pop	{r7}
 800646e:	4770      	bx	lr
 8006470:	20000244 	.word	0x20000244
 8006474:	2000075c 	.word	0x2000075c

08006478 <HAL_GetTick>:
 8006478:	b480      	push	{r7}
 800647a:	af00      	add	r7, sp, #0
 800647c:	4b02      	ldr	r3, [pc, #8]	; (8006488 <HAL_GetTick+0x10>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4618      	mov	r0, r3
 8006482:	46bd      	mov	sp, r7
 8006484:	bc80      	pop	{r7}
 8006486:	4770      	bx	lr
 8006488:	2000075c 	.word	0x2000075c

0800648c <HAL_ADC_Init>:
 800648c:	b580      	push	{r7, lr}
 800648e:	b086      	sub	sp, #24
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	2300      	movs	r3, #0
 8006496:	75fb      	strb	r3, [r7, #23]
 8006498:	2300      	movs	r3, #0
 800649a:	613b      	str	r3, [r7, #16]
 800649c:	2300      	movs	r3, #0
 800649e:	60bb      	str	r3, [r7, #8]
 80064a0:	2300      	movs	r3, #0
 80064a2:	60fb      	str	r3, [r7, #12]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d101      	bne.n	80064ae <HAL_ADC_Init+0x22>
 80064aa:	2301      	movs	r3, #1
 80064ac:	e0be      	b.n	800662c <HAL_ADC_Init+0x1a0>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d109      	bne.n	80064d0 <HAL_ADC_Init+0x44>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f7ff fcec 	bl	8005ea8 <HAL_ADC_MspInit>
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 fbc1 	bl	8006c58 <ADC_ConversionStop_Disable>
 80064d6:	4603      	mov	r3, r0
 80064d8:	75fb      	strb	r3, [r7, #23]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064de:	f003 0310 	and.w	r3, r3, #16
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	f040 8099 	bne.w	800661a <HAL_ADC_Init+0x18e>
 80064e8:	7dfb      	ldrb	r3, [r7, #23]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	f040 8095 	bne.w	800661a <HAL_ADC_Init+0x18e>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80064f8:	f023 0302 	bic.w	r3, r3, #2
 80064fc:	f043 0202 	orr.w	r2, r3, #2
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	629a      	str	r2, [r3, #40]	; 0x28
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	685a      	ldr	r2, [r3, #4]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	69db      	ldr	r3, [r3, #28]
 800650c:	431a      	orrs	r2, r3
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	7b1b      	ldrb	r3, [r3, #12]
 8006512:	005b      	lsls	r3, r3, #1
 8006514:	4313      	orrs	r3, r2
 8006516:	68ba      	ldr	r2, [r7, #8]
 8006518:	4313      	orrs	r3, r2
 800651a:	60bb      	str	r3, [r7, #8]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006524:	d003      	beq.n	800652e <HAL_ADC_Init+0xa2>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	2b01      	cmp	r3, #1
 800652c:	d102      	bne.n	8006534 <HAL_ADC_Init+0xa8>
 800652e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006532:	e000      	b.n	8006536 <HAL_ADC_Init+0xaa>
 8006534:	2300      	movs	r3, #0
 8006536:	693a      	ldr	r2, [r7, #16]
 8006538:	4313      	orrs	r3, r2
 800653a:	613b      	str	r3, [r7, #16]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	7d1b      	ldrb	r3, [r3, #20]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d119      	bne.n	8006578 <HAL_ADC_Init+0xec>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	7b1b      	ldrb	r3, [r3, #12]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d109      	bne.n	8006560 <HAL_ADC_Init+0xd4>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	699b      	ldr	r3, [r3, #24]
 8006550:	3b01      	subs	r3, #1
 8006552:	035a      	lsls	r2, r3, #13
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	4313      	orrs	r3, r2
 8006558:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800655c:	613b      	str	r3, [r7, #16]
 800655e:	e00b      	b.n	8006578 <HAL_ADC_Init+0xec>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006564:	f043 0220 	orr.w	r2, r3, #32
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	629a      	str	r2, [r3, #40]	; 0x28
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006570:	f043 0201 	orr.w	r2, r3, #1
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	62da      	str	r2, [r3, #44]	; 0x2c
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	693a      	ldr	r2, [r7, #16]
 8006588:	430a      	orrs	r2, r1
 800658a:	605a      	str	r2, [r3, #4]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	689a      	ldr	r2, [r3, #8]
 8006592:	4b28      	ldr	r3, [pc, #160]	; (8006634 <HAL_ADC_Init+0x1a8>)
 8006594:	4013      	ands	r3, r2
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	6812      	ldr	r2, [r2, #0]
 800659a:	68b9      	ldr	r1, [r7, #8]
 800659c:	430b      	orrs	r3, r1
 800659e:	6093      	str	r3, [r2, #8]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065a8:	d003      	beq.n	80065b2 <HAL_ADC_Init+0x126>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d104      	bne.n	80065bc <HAL_ADC_Init+0x130>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	3b01      	subs	r3, #1
 80065b8:	051b      	lsls	r3, r3, #20
 80065ba:	60fb      	str	r3, [r7, #12]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	68fa      	ldr	r2, [r7, #12]
 80065cc:	430a      	orrs	r2, r1
 80065ce:	62da      	str	r2, [r3, #44]	; 0x2c
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	689a      	ldr	r2, [r3, #8]
 80065d6:	4b18      	ldr	r3, [pc, #96]	; (8006638 <HAL_ADC_Init+0x1ac>)
 80065d8:	4013      	ands	r3, r2
 80065da:	68ba      	ldr	r2, [r7, #8]
 80065dc:	429a      	cmp	r2, r3
 80065de:	d10b      	bne.n	80065f8 <HAL_ADC_Init+0x16c>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ea:	f023 0303 	bic.w	r3, r3, #3
 80065ee:	f043 0201 	orr.w	r2, r3, #1
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	629a      	str	r2, [r3, #40]	; 0x28
 80065f6:	e018      	b.n	800662a <HAL_ADC_Init+0x19e>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065fc:	f023 0312 	bic.w	r3, r3, #18
 8006600:	f043 0210 	orr.w	r2, r3, #16
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	629a      	str	r2, [r3, #40]	; 0x28
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800660c:	f043 0201 	orr.w	r2, r3, #1
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	62da      	str	r2, [r3, #44]	; 0x2c
 8006614:	2301      	movs	r3, #1
 8006616:	75fb      	strb	r3, [r7, #23]
 8006618:	e007      	b.n	800662a <HAL_ADC_Init+0x19e>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800661e:	f043 0210 	orr.w	r2, r3, #16
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	629a      	str	r2, [r3, #40]	; 0x28
 8006626:	2301      	movs	r3, #1
 8006628:	75fb      	strb	r3, [r7, #23]
 800662a:	7dfb      	ldrb	r3, [r7, #23]
 800662c:	4618      	mov	r0, r3
 800662e:	3718      	adds	r7, #24
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}
 8006634:	ffe1f7fd 	.word	0xffe1f7fd
 8006638:	ff1f0efe 	.word	0xff1f0efe

0800663c <HAL_ADC_Start_DMA>:
 800663c:	b580      	push	{r7, lr}
 800663e:	b086      	sub	sp, #24
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	607a      	str	r2, [r7, #4]
 8006648:	2300      	movs	r3, #0
 800664a:	75fb      	strb	r3, [r7, #23]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a64      	ldr	r2, [pc, #400]	; (80067e4 <HAL_ADC_Start_DMA+0x1a8>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d004      	beq.n	8006660 <HAL_ADC_Start_DMA+0x24>
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a63      	ldr	r2, [pc, #396]	; (80067e8 <HAL_ADC_Start_DMA+0x1ac>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d106      	bne.n	800666e <HAL_ADC_Start_DMA+0x32>
 8006660:	4b60      	ldr	r3, [pc, #384]	; (80067e4 <HAL_ADC_Start_DMA+0x1a8>)
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8006668:	2b00      	cmp	r3, #0
 800666a:	f040 80b3 	bne.w	80067d4 <HAL_ADC_Start_DMA+0x198>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006674:	2b01      	cmp	r3, #1
 8006676:	d101      	bne.n	800667c <HAL_ADC_Start_DMA+0x40>
 8006678:	2302      	movs	r3, #2
 800667a:	e0ae      	b.n	80067da <HAL_ADC_Start_DMA+0x19e>
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006684:	68f8      	ldr	r0, [r7, #12]
 8006686:	f000 fa8d 	bl	8006ba4 <ADC_Enable>
 800668a:	4603      	mov	r3, r0
 800668c:	75fb      	strb	r3, [r7, #23]
 800668e:	7dfb      	ldrb	r3, [r7, #23]
 8006690:	2b00      	cmp	r3, #0
 8006692:	f040 809a 	bne.w	80067ca <HAL_ADC_Start_DMA+0x18e>
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800669a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800669e:	f023 0301 	bic.w	r3, r3, #1
 80066a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	629a      	str	r2, [r3, #40]	; 0x28
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a4e      	ldr	r2, [pc, #312]	; (80067e8 <HAL_ADC_Start_DMA+0x1ac>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d105      	bne.n	80066c0 <HAL_ADC_Start_DMA+0x84>
 80066b4:	4b4b      	ldr	r3, [pc, #300]	; (80067e4 <HAL_ADC_Start_DMA+0x1a8>)
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d115      	bne.n	80066ec <HAL_ADC_Start_DMA+0xb0>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	629a      	str	r2, [r3, #40]	; 0x28
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d026      	beq.n	8006728 <HAL_ADC_Start_DMA+0xec>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066de:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80066e2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	629a      	str	r2, [r3, #40]	; 0x28
 80066ea:	e01d      	b.n	8006728 <HAL_ADC_Start_DMA+0xec>
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	629a      	str	r2, [r3, #40]	; 0x28
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a39      	ldr	r2, [pc, #228]	; (80067e4 <HAL_ADC_Start_DMA+0x1a8>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d004      	beq.n	800670c <HAL_ADC_Start_DMA+0xd0>
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a38      	ldr	r2, [pc, #224]	; (80067e8 <HAL_ADC_Start_DMA+0x1ac>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d10d      	bne.n	8006728 <HAL_ADC_Start_DMA+0xec>
 800670c:	4b35      	ldr	r3, [pc, #212]	; (80067e4 <HAL_ADC_Start_DMA+0x1a8>)
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006714:	2b00      	cmp	r3, #0
 8006716:	d007      	beq.n	8006728 <HAL_ADC_Start_DMA+0xec>
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800671c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006720:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	629a      	str	r2, [r3, #40]	; 0x28
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800672c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006730:	2b00      	cmp	r3, #0
 8006732:	d006      	beq.n	8006742 <HAL_ADC_Start_DMA+0x106>
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006738:	f023 0206 	bic.w	r2, r3, #6
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	62da      	str	r2, [r3, #44]	; 0x2c
 8006740:	e002      	b.n	8006748 <HAL_ADC_Start_DMA+0x10c>
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2200      	movs	r2, #0
 8006746:	62da      	str	r2, [r3, #44]	; 0x2c
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2200      	movs	r2, #0
 800674c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6a1b      	ldr	r3, [r3, #32]
 8006754:	4a25      	ldr	r2, [pc, #148]	; (80067ec <HAL_ADC_Start_DMA+0x1b0>)
 8006756:	629a      	str	r2, [r3, #40]	; 0x28
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6a1b      	ldr	r3, [r3, #32]
 800675c:	4a24      	ldr	r2, [pc, #144]	; (80067f0 <HAL_ADC_Start_DMA+0x1b4>)
 800675e:	62da      	str	r2, [r3, #44]	; 0x2c
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6a1b      	ldr	r3, [r3, #32]
 8006764:	4a23      	ldr	r2, [pc, #140]	; (80067f4 <HAL_ADC_Start_DMA+0x1b8>)
 8006766:	631a      	str	r2, [r3, #48]	; 0x30
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f06f 0202 	mvn.w	r2, #2
 8006770:	601a      	str	r2, [r3, #0]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	689a      	ldr	r2, [r3, #8]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006780:	609a      	str	r2, [r3, #8]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6a18      	ldr	r0, [r3, #32]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	334c      	adds	r3, #76	; 0x4c
 800678c:	4619      	mov	r1, r3
 800678e:	68ba      	ldr	r2, [r7, #8]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f000 fd07 	bl	80071a4 <HAL_DMA_Start_IT>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80067a0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80067a4:	d108      	bne.n	80067b8 <HAL_ADC_Start_DMA+0x17c>
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	689a      	ldr	r2, [r3, #8]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80067b4:	609a      	str	r2, [r3, #8]
 80067b6:	e00f      	b.n	80067d8 <HAL_ADC_Start_DMA+0x19c>
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	689a      	ldr	r2, [r3, #8]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80067c6:	609a      	str	r2, [r3, #8]
 80067c8:	e006      	b.n	80067d8 <HAL_ADC_Start_DMA+0x19c>
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80067d2:	e001      	b.n	80067d8 <HAL_ADC_Start_DMA+0x19c>
 80067d4:	2301      	movs	r3, #1
 80067d6:	75fb      	strb	r3, [r7, #23]
 80067d8:	7dfb      	ldrb	r3, [r7, #23]
 80067da:	4618      	mov	r0, r3
 80067dc:	3718      	adds	r7, #24
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	40012400 	.word	0x40012400
 80067e8:	40012800 	.word	0x40012800
 80067ec:	08006cdb 	.word	0x08006cdb
 80067f0:	08006d57 	.word	0x08006d57
 80067f4:	08006d73 	.word	0x08006d73

080067f8 <HAL_ADC_IRQHandler>:
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	f003 0320 	and.w	r3, r3, #32
 800680a:	2b20      	cmp	r3, #32
 800680c:	d140      	bne.n	8006890 <HAL_ADC_IRQHandler+0x98>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 0302 	and.w	r3, r3, #2
 8006818:	2b02      	cmp	r3, #2
 800681a:	d139      	bne.n	8006890 <HAL_ADC_IRQHandler+0x98>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006820:	f003 0310 	and.w	r3, r3, #16
 8006824:	2b00      	cmp	r3, #0
 8006826:	d105      	bne.n	8006834 <HAL_ADC_IRQHandler+0x3c>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800682c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	629a      	str	r2, [r3, #40]	; 0x28
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800683e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8006842:	d11d      	bne.n	8006880 <HAL_ADC_IRQHandler+0x88>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	7b1b      	ldrb	r3, [r3, #12]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d119      	bne.n	8006880 <HAL_ADC_IRQHandler+0x88>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	685a      	ldr	r2, [r3, #4]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f022 0220 	bic.w	r2, r2, #32
 800685a:	605a      	str	r2, [r3, #4]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006860:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	629a      	str	r2, [r3, #40]	; 0x28
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800686c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006870:	2b00      	cmp	r3, #0
 8006872:	d105      	bne.n	8006880 <HAL_ADC_IRQHandler+0x88>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006878:	f043 0201 	orr.w	r2, r3, #1
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	629a      	str	r2, [r3, #40]	; 0x28
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f7fe f9b5 	bl	8004bf0 <HAL_ADC_ConvCpltCallback>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f06f 0212 	mvn.w	r2, #18
 800688e:	601a      	str	r2, [r3, #0]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800689a:	2b80      	cmp	r3, #128	; 0x80
 800689c:	d14f      	bne.n	800693e <HAL_ADC_IRQHandler+0x146>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 0304 	and.w	r3, r3, #4
 80068a8:	2b04      	cmp	r3, #4
 80068aa:	d148      	bne.n	800693e <HAL_ADC_IRQHandler+0x146>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068b0:	f003 0310 	and.w	r3, r3, #16
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d105      	bne.n	80068c4 <HAL_ADC_IRQHandler+0xcc>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068bc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	629a      	str	r2, [r3, #40]	; 0x28
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80068ce:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80068d2:	d012      	beq.n	80068fa <HAL_ADC_IRQHandler+0x102>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d125      	bne.n	800692e <HAL_ADC_IRQHandler+0x136>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80068ec:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80068f0:	d11d      	bne.n	800692e <HAL_ADC_IRQHandler+0x136>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	7b1b      	ldrb	r3, [r3, #12]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d119      	bne.n	800692e <HAL_ADC_IRQHandler+0x136>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	685a      	ldr	r2, [r3, #4]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006908:	605a      	str	r2, [r3, #4]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800690e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	629a      	str	r2, [r3, #40]	; 0x28
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800691a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800691e:	2b00      	cmp	r3, #0
 8006920:	d105      	bne.n	800692e <HAL_ADC_IRQHandler+0x136>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006926:	f043 0201 	orr.w	r2, r3, #1
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	629a      	str	r2, [r3, #40]	; 0x28
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 fa39 	bl	8006da6 <HAL_ADCEx_InjectedConvCpltCallback>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f06f 020c 	mvn.w	r2, #12
 800693c:	601a      	str	r2, [r3, #0]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006948:	2b40      	cmp	r3, #64	; 0x40
 800694a:	d114      	bne.n	8006976 <HAL_ADC_IRQHandler+0x17e>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 0301 	and.w	r3, r3, #1
 8006956:	2b01      	cmp	r3, #1
 8006958:	d10d      	bne.n	8006976 <HAL_ADC_IRQHandler+0x17e>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800695e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	629a      	str	r2, [r3, #40]	; 0x28
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f812 	bl	8006990 <HAL_ADC_LevelOutOfWindowCallback>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f06f 0201 	mvn.w	r2, #1
 8006974:	601a      	str	r2, [r3, #0]
 8006976:	bf00      	nop
 8006978:	3708      	adds	r7, #8
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}

0800697e <HAL_ADC_ConvHalfCpltCallback>:
 800697e:	b480      	push	{r7}
 8006980:	b083      	sub	sp, #12
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
 8006986:	bf00      	nop
 8006988:	370c      	adds	r7, #12
 800698a:	46bd      	mov	sp, r7
 800698c:	bc80      	pop	{r7}
 800698e:	4770      	bx	lr

08006990 <HAL_ADC_LevelOutOfWindowCallback>:
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	bf00      	nop
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	bc80      	pop	{r7}
 80069a0:	4770      	bx	lr

080069a2 <HAL_ADC_ErrorCallback>:
 80069a2:	b480      	push	{r7}
 80069a4:	b083      	sub	sp, #12
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	6078      	str	r0, [r7, #4]
 80069aa:	bf00      	nop
 80069ac:	370c      	adds	r7, #12
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bc80      	pop	{r7}
 80069b2:	4770      	bx	lr

080069b4 <HAL_ADC_ConfigChannel>:
 80069b4:	b480      	push	{r7}
 80069b6:	b085      	sub	sp, #20
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
 80069be:	2300      	movs	r3, #0
 80069c0:	73fb      	strb	r3, [r7, #15]
 80069c2:	2300      	movs	r3, #0
 80069c4:	60bb      	str	r3, [r7, #8]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d101      	bne.n	80069d4 <HAL_ADC_ConfigChannel+0x20>
 80069d0:	2302      	movs	r3, #2
 80069d2:	e0dc      	b.n	8006b8e <HAL_ADC_ConfigChannel+0x1da>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	2b06      	cmp	r3, #6
 80069e2:	d81c      	bhi.n	8006a1e <HAL_ADC_ConfigChannel+0x6a>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	685a      	ldr	r2, [r3, #4]
 80069ee:	4613      	mov	r3, r2
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	4413      	add	r3, r2
 80069f4:	3b05      	subs	r3, #5
 80069f6:	221f      	movs	r2, #31
 80069f8:	fa02 f303 	lsl.w	r3, r2, r3
 80069fc:	43db      	mvns	r3, r3
 80069fe:	4019      	ands	r1, r3
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	6818      	ldr	r0, [r3, #0]
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	685a      	ldr	r2, [r3, #4]
 8006a08:	4613      	mov	r3, r2
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	4413      	add	r3, r2
 8006a0e:	3b05      	subs	r3, #5
 8006a10:	fa00 f203 	lsl.w	r2, r0, r3
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	430a      	orrs	r2, r1
 8006a1a:	635a      	str	r2, [r3, #52]	; 0x34
 8006a1c:	e03c      	b.n	8006a98 <HAL_ADC_ConfigChannel+0xe4>
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	2b0c      	cmp	r3, #12
 8006a24:	d81c      	bhi.n	8006a60 <HAL_ADC_ConfigChannel+0xac>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	685a      	ldr	r2, [r3, #4]
 8006a30:	4613      	mov	r3, r2
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	4413      	add	r3, r2
 8006a36:	3b23      	subs	r3, #35	; 0x23
 8006a38:	221f      	movs	r2, #31
 8006a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a3e:	43db      	mvns	r3, r3
 8006a40:	4019      	ands	r1, r3
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	6818      	ldr	r0, [r3, #0]
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	685a      	ldr	r2, [r3, #4]
 8006a4a:	4613      	mov	r3, r2
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	4413      	add	r3, r2
 8006a50:	3b23      	subs	r3, #35	; 0x23
 8006a52:	fa00 f203 	lsl.w	r2, r0, r3
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	430a      	orrs	r2, r1
 8006a5c:	631a      	str	r2, [r3, #48]	; 0x30
 8006a5e:	e01b      	b.n	8006a98 <HAL_ADC_ConfigChannel+0xe4>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	685a      	ldr	r2, [r3, #4]
 8006a6a:	4613      	mov	r3, r2
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	4413      	add	r3, r2
 8006a70:	3b41      	subs	r3, #65	; 0x41
 8006a72:	221f      	movs	r2, #31
 8006a74:	fa02 f303 	lsl.w	r3, r2, r3
 8006a78:	43db      	mvns	r3, r3
 8006a7a:	4019      	ands	r1, r3
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	6818      	ldr	r0, [r3, #0]
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	685a      	ldr	r2, [r3, #4]
 8006a84:	4613      	mov	r3, r2
 8006a86:	009b      	lsls	r3, r3, #2
 8006a88:	4413      	add	r3, r2
 8006a8a:	3b41      	subs	r3, #65	; 0x41
 8006a8c:	fa00 f203 	lsl.w	r2, r0, r3
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	430a      	orrs	r2, r1
 8006a96:	62da      	str	r2, [r3, #44]	; 0x2c
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2b09      	cmp	r3, #9
 8006a9e:	d91c      	bls.n	8006ada <HAL_ADC_ConfigChannel+0x126>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68d9      	ldr	r1, [r3, #12]
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	4613      	mov	r3, r2
 8006aac:	005b      	lsls	r3, r3, #1
 8006aae:	4413      	add	r3, r2
 8006ab0:	3b1e      	subs	r3, #30
 8006ab2:	2207      	movs	r2, #7
 8006ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab8:	43db      	mvns	r3, r3
 8006aba:	4019      	ands	r1, r3
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	6898      	ldr	r0, [r3, #8]
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	4613      	mov	r3, r2
 8006ac6:	005b      	lsls	r3, r3, #1
 8006ac8:	4413      	add	r3, r2
 8006aca:	3b1e      	subs	r3, #30
 8006acc:	fa00 f203 	lsl.w	r2, r0, r3
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	430a      	orrs	r2, r1
 8006ad6:	60da      	str	r2, [r3, #12]
 8006ad8:	e019      	b.n	8006b0e <HAL_ADC_ConfigChannel+0x15a>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	6919      	ldr	r1, [r3, #16]
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	005b      	lsls	r3, r3, #1
 8006ae8:	4413      	add	r3, r2
 8006aea:	2207      	movs	r2, #7
 8006aec:	fa02 f303 	lsl.w	r3, r2, r3
 8006af0:	43db      	mvns	r3, r3
 8006af2:	4019      	ands	r1, r3
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	6898      	ldr	r0, [r3, #8]
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	4613      	mov	r3, r2
 8006afe:	005b      	lsls	r3, r3, #1
 8006b00:	4413      	add	r3, r2
 8006b02:	fa00 f203 	lsl.w	r2, r0, r3
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	430a      	orrs	r2, r1
 8006b0c:	611a      	str	r2, [r3, #16]
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2b10      	cmp	r3, #16
 8006b14:	d003      	beq.n	8006b1e <HAL_ADC_ConfigChannel+0x16a>
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2b11      	cmp	r3, #17
 8006b1c:	d132      	bne.n	8006b84 <HAL_ADC_ConfigChannel+0x1d0>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a1d      	ldr	r2, [pc, #116]	; (8006b98 <HAL_ADC_ConfigChannel+0x1e4>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d125      	bne.n	8006b74 <HAL_ADC_ConfigChannel+0x1c0>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d126      	bne.n	8006b84 <HAL_ADC_ConfigChannel+0x1d0>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	689a      	ldr	r2, [r3, #8]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006b44:	609a      	str	r2, [r3, #8]
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2b10      	cmp	r3, #16
 8006b4c:	d11a      	bne.n	8006b84 <HAL_ADC_ConfigChannel+0x1d0>
 8006b4e:	4b13      	ldr	r3, [pc, #76]	; (8006b9c <HAL_ADC_ConfigChannel+0x1e8>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a13      	ldr	r2, [pc, #76]	; (8006ba0 <HAL_ADC_ConfigChannel+0x1ec>)
 8006b54:	fba2 2303 	umull	r2, r3, r2, r3
 8006b58:	0c9a      	lsrs	r2, r3, #18
 8006b5a:	4613      	mov	r3, r2
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	4413      	add	r3, r2
 8006b60:	005b      	lsls	r3, r3, #1
 8006b62:	60bb      	str	r3, [r7, #8]
 8006b64:	e002      	b.n	8006b6c <HAL_ADC_ConfigChannel+0x1b8>
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	60bb      	str	r3, [r7, #8]
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1f9      	bne.n	8006b66 <HAL_ADC_ConfigChannel+0x1b2>
 8006b72:	e007      	b.n	8006b84 <HAL_ADC_ConfigChannel+0x1d0>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b78:	f043 0220 	orr.w	r2, r3, #32
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	629a      	str	r2, [r3, #40]	; 0x28
 8006b80:	2301      	movs	r3, #1
 8006b82:	73fb      	strb	r3, [r7, #15]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006b8c:	7bfb      	ldrb	r3, [r7, #15]
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3714      	adds	r7, #20
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bc80      	pop	{r7}
 8006b96:	4770      	bx	lr
 8006b98:	40012400 	.word	0x40012400
 8006b9c:	2000023c 	.word	0x2000023c
 8006ba0:	431bde83 	.word	0x431bde83

08006ba4 <ADC_Enable>:
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	2300      	movs	r3, #0
 8006bae:	60fb      	str	r3, [r7, #12]
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	60bb      	str	r3, [r7, #8]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	f003 0301 	and.w	r3, r3, #1
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d040      	beq.n	8006c44 <ADC_Enable+0xa0>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	689a      	ldr	r2, [r3, #8]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f042 0201 	orr.w	r2, r2, #1
 8006bd0:	609a      	str	r2, [r3, #8]
 8006bd2:	4b1f      	ldr	r3, [pc, #124]	; (8006c50 <ADC_Enable+0xac>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a1f      	ldr	r2, [pc, #124]	; (8006c54 <ADC_Enable+0xb0>)
 8006bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8006bdc:	0c9b      	lsrs	r3, r3, #18
 8006bde:	60bb      	str	r3, [r7, #8]
 8006be0:	e002      	b.n	8006be8 <ADC_Enable+0x44>
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	3b01      	subs	r3, #1
 8006be6:	60bb      	str	r3, [r7, #8]
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d1f9      	bne.n	8006be2 <ADC_Enable+0x3e>
 8006bee:	f7ff fc43 	bl	8006478 <HAL_GetTick>
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	e01f      	b.n	8006c36 <ADC_Enable+0x92>
 8006bf6:	f7ff fc3f 	bl	8006478 <HAL_GetTick>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	1ad3      	subs	r3, r2, r3
 8006c00:	2b02      	cmp	r3, #2
 8006c02:	d918      	bls.n	8006c36 <ADC_Enable+0x92>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	f003 0301 	and.w	r3, r3, #1
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d011      	beq.n	8006c36 <ADC_Enable+0x92>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c16:	f043 0210 	orr.w	r2, r3, #16
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	629a      	str	r2, [r3, #40]	; 0x28
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c22:	f043 0201 	orr.w	r2, r3, #1
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	62da      	str	r2, [r3, #44]	; 0x2c
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006c32:	2301      	movs	r3, #1
 8006c34:	e007      	b.n	8006c46 <ADC_Enable+0xa2>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	f003 0301 	and.w	r3, r3, #1
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d1d8      	bne.n	8006bf6 <ADC_Enable+0x52>
 8006c44:	2300      	movs	r3, #0
 8006c46:	4618      	mov	r0, r3
 8006c48:	3710      	adds	r7, #16
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	bf00      	nop
 8006c50:	2000023c 	.word	0x2000023c
 8006c54:	431bde83 	.word	0x431bde83

08006c58 <ADC_ConversionStop_Disable>:
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	2300      	movs	r3, #0
 8006c62:	60fb      	str	r3, [r7, #12]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	f003 0301 	and.w	r3, r3, #1
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d12e      	bne.n	8006cd0 <ADC_ConversionStop_Disable+0x78>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	689a      	ldr	r2, [r3, #8]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f022 0201 	bic.w	r2, r2, #1
 8006c80:	609a      	str	r2, [r3, #8]
 8006c82:	f7ff fbf9 	bl	8006478 <HAL_GetTick>
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	e01b      	b.n	8006cc2 <ADC_ConversionStop_Disable+0x6a>
 8006c8a:	f7ff fbf5 	bl	8006478 <HAL_GetTick>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	1ad3      	subs	r3, r2, r3
 8006c94:	2b02      	cmp	r3, #2
 8006c96:	d914      	bls.n	8006cc2 <ADC_ConversionStop_Disable+0x6a>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	f003 0301 	and.w	r3, r3, #1
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d10d      	bne.n	8006cc2 <ADC_ConversionStop_Disable+0x6a>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006caa:	f043 0210 	orr.w	r2, r3, #16
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	629a      	str	r2, [r3, #40]	; 0x28
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb6:	f043 0201 	orr.w	r2, r3, #1
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	62da      	str	r2, [r3, #44]	; 0x2c
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e007      	b.n	8006cd2 <ADC_ConversionStop_Disable+0x7a>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	f003 0301 	and.w	r3, r3, #1
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d0dc      	beq.n	8006c8a <ADC_ConversionStop_Disable+0x32>
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3710      	adds	r7, #16
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}

08006cda <ADC_DMAConvCplt>:
 8006cda:	b580      	push	{r7, lr}
 8006cdc:	b084      	sub	sp, #16
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce6:	60fb      	str	r3, [r7, #12]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d127      	bne.n	8006d44 <ADC_DMAConvCplt+0x6a>
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	629a      	str	r2, [r3, #40]	; 0x28
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8006d0a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8006d0e:	d115      	bne.n	8006d3c <ADC_DMAConvCplt+0x62>
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	7b1b      	ldrb	r3, [r3, #12]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d111      	bne.n	8006d3c <ADC_DMAConvCplt+0x62>
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d1c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	629a      	str	r2, [r3, #40]	; 0x28
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d105      	bne.n	8006d3c <ADC_DMAConvCplt+0x62>
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d34:	f043 0201 	orr.w	r2, r3, #1
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	629a      	str	r2, [r3, #40]	; 0x28
 8006d3c:	68f8      	ldr	r0, [r7, #12]
 8006d3e:	f7fd ff57 	bl	8004bf0 <HAL_ADC_ConvCpltCallback>
 8006d42:	e004      	b.n	8006d4e <ADC_DMAConvCplt+0x74>
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6a1b      	ldr	r3, [r3, #32]
 8006d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	4798      	blx	r3
 8006d4e:	bf00      	nop
 8006d50:	3710      	adds	r7, #16
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}

08006d56 <ADC_DMAHalfConvCplt>:
 8006d56:	b580      	push	{r7, lr}
 8006d58:	b084      	sub	sp, #16
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d62:	60fb      	str	r3, [r7, #12]
 8006d64:	68f8      	ldr	r0, [r7, #12]
 8006d66:	f7ff fe0a 	bl	800697e <HAL_ADC_ConvHalfCpltCallback>
 8006d6a:	bf00      	nop
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <ADC_DMAError>:
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b084      	sub	sp, #16
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7e:	60fb      	str	r3, [r7, #12]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d84:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	629a      	str	r2, [r3, #40]	; 0x28
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d90:	f043 0204 	orr.w	r2, r3, #4
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	62da      	str	r2, [r3, #44]	; 0x2c
 8006d98:	68f8      	ldr	r0, [r7, #12]
 8006d9a:	f7ff fe02 	bl	80069a2 <HAL_ADC_ErrorCallback>
 8006d9e:	bf00      	nop
 8006da0:	3710      	adds	r7, #16
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}

08006da6 <HAL_ADCEx_InjectedConvCpltCallback>:
 8006da6:	b480      	push	{r7}
 8006da8:	b083      	sub	sp, #12
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
 8006dae:	bf00      	nop
 8006db0:	370c      	adds	r7, #12
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bc80      	pop	{r7}
 8006db6:	4770      	bx	lr

08006db8 <__NVIC_SetPriorityGrouping>:
 8006db8:	b480      	push	{r7}
 8006dba:	b085      	sub	sp, #20
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f003 0307 	and.w	r3, r3, #7
 8006dc6:	60fb      	str	r3, [r7, #12]
 8006dc8:	4b0c      	ldr	r3, [pc, #48]	; (8006dfc <__NVIC_SetPriorityGrouping+0x44>)
 8006dca:	68db      	ldr	r3, [r3, #12]
 8006dcc:	60bb      	str	r3, [r7, #8]
 8006dce:	68ba      	ldr	r2, [r7, #8]
 8006dd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006dd4:	4013      	ands	r3, r2
 8006dd6:	60bb      	str	r3, [r7, #8]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	021a      	lsls	r2, r3, #8
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006de8:	60bb      	str	r3, [r7, #8]
 8006dea:	4a04      	ldr	r2, [pc, #16]	; (8006dfc <__NVIC_SetPriorityGrouping+0x44>)
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	60d3      	str	r3, [r2, #12]
 8006df0:	bf00      	nop
 8006df2:	3714      	adds	r7, #20
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bc80      	pop	{r7}
 8006df8:	4770      	bx	lr
 8006dfa:	bf00      	nop
 8006dfc:	e000ed00 	.word	0xe000ed00

08006e00 <__NVIC_GetPriorityGrouping>:
 8006e00:	b480      	push	{r7}
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	4b04      	ldr	r3, [pc, #16]	; (8006e18 <__NVIC_GetPriorityGrouping+0x18>)
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	0a1b      	lsrs	r3, r3, #8
 8006e0a:	f003 0307 	and.w	r3, r3, #7
 8006e0e:	4618      	mov	r0, r3
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bc80      	pop	{r7}
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop
 8006e18:	e000ed00 	.word	0xe000ed00

08006e1c <__NVIC_EnableIRQ>:
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	4603      	mov	r3, r0
 8006e24:	71fb      	strb	r3, [r7, #7]
 8006e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	db0b      	blt.n	8006e46 <__NVIC_EnableIRQ+0x2a>
 8006e2e:	79fb      	ldrb	r3, [r7, #7]
 8006e30:	f003 021f 	and.w	r2, r3, #31
 8006e34:	4906      	ldr	r1, [pc, #24]	; (8006e50 <__NVIC_EnableIRQ+0x34>)
 8006e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e3a:	095b      	lsrs	r3, r3, #5
 8006e3c:	2001      	movs	r0, #1
 8006e3e:	fa00 f202 	lsl.w	r2, r0, r2
 8006e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006e46:	bf00      	nop
 8006e48:	370c      	adds	r7, #12
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bc80      	pop	{r7}
 8006e4e:	4770      	bx	lr
 8006e50:	e000e100 	.word	0xe000e100

08006e54 <__NVIC_DisableIRQ>:
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	71fb      	strb	r3, [r7, #7]
 8006e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	db12      	blt.n	8006e8c <__NVIC_DisableIRQ+0x38>
 8006e66:	79fb      	ldrb	r3, [r7, #7]
 8006e68:	f003 021f 	and.w	r2, r3, #31
 8006e6c:	490a      	ldr	r1, [pc, #40]	; (8006e98 <__NVIC_DisableIRQ+0x44>)
 8006e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e72:	095b      	lsrs	r3, r3, #5
 8006e74:	2001      	movs	r0, #1
 8006e76:	fa00 f202 	lsl.w	r2, r0, r2
 8006e7a:	3320      	adds	r3, #32
 8006e7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006e80:	f3bf 8f4f 	dsb	sy
 8006e84:	bf00      	nop
 8006e86:	f3bf 8f6f 	isb	sy
 8006e8a:	bf00      	nop
 8006e8c:	bf00      	nop
 8006e8e:	370c      	adds	r7, #12
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bc80      	pop	{r7}
 8006e94:	4770      	bx	lr
 8006e96:	bf00      	nop
 8006e98:	e000e100 	.word	0xe000e100

08006e9c <__NVIC_SetPriority>:
 8006e9c:	b480      	push	{r7}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	6039      	str	r1, [r7, #0]
 8006ea6:	71fb      	strb	r3, [r7, #7]
 8006ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	db0a      	blt.n	8006ec6 <__NVIC_SetPriority+0x2a>
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	b2da      	uxtb	r2, r3
 8006eb4:	490c      	ldr	r1, [pc, #48]	; (8006ee8 <__NVIC_SetPriority+0x4c>)
 8006eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006eba:	0112      	lsls	r2, r2, #4
 8006ebc:	b2d2      	uxtb	r2, r2
 8006ebe:	440b      	add	r3, r1
 8006ec0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8006ec4:	e00a      	b.n	8006edc <__NVIC_SetPriority+0x40>
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	b2da      	uxtb	r2, r3
 8006eca:	4908      	ldr	r1, [pc, #32]	; (8006eec <__NVIC_SetPriority+0x50>)
 8006ecc:	79fb      	ldrb	r3, [r7, #7]
 8006ece:	f003 030f 	and.w	r3, r3, #15
 8006ed2:	3b04      	subs	r3, #4
 8006ed4:	0112      	lsls	r2, r2, #4
 8006ed6:	b2d2      	uxtb	r2, r2
 8006ed8:	440b      	add	r3, r1
 8006eda:	761a      	strb	r2, [r3, #24]
 8006edc:	bf00      	nop
 8006ede:	370c      	adds	r7, #12
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bc80      	pop	{r7}
 8006ee4:	4770      	bx	lr
 8006ee6:	bf00      	nop
 8006ee8:	e000e100 	.word	0xe000e100
 8006eec:	e000ed00 	.word	0xe000ed00

08006ef0 <NVIC_EncodePriority>:
 8006ef0:	b480      	push	{r7}
 8006ef2:	b089      	sub	sp, #36	; 0x24
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	60b9      	str	r1, [r7, #8]
 8006efa:	607a      	str	r2, [r7, #4]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f003 0307 	and.w	r3, r3, #7
 8006f02:	61fb      	str	r3, [r7, #28]
 8006f04:	69fb      	ldr	r3, [r7, #28]
 8006f06:	f1c3 0307 	rsb	r3, r3, #7
 8006f0a:	2b04      	cmp	r3, #4
 8006f0c:	bf28      	it	cs
 8006f0e:	2304      	movcs	r3, #4
 8006f10:	61bb      	str	r3, [r7, #24]
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	3304      	adds	r3, #4
 8006f16:	2b06      	cmp	r3, #6
 8006f18:	d902      	bls.n	8006f20 <NVIC_EncodePriority+0x30>
 8006f1a:	69fb      	ldr	r3, [r7, #28]
 8006f1c:	3b03      	subs	r3, #3
 8006f1e:	e000      	b.n	8006f22 <NVIC_EncodePriority+0x32>
 8006f20:	2300      	movs	r3, #0
 8006f22:	617b      	str	r3, [r7, #20]
 8006f24:	f04f 32ff 	mov.w	r2, #4294967295
 8006f28:	69bb      	ldr	r3, [r7, #24]
 8006f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f2e:	43da      	mvns	r2, r3
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	401a      	ands	r2, r3
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	409a      	lsls	r2, r3
 8006f38:	f04f 31ff 	mov.w	r1, #4294967295
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8006f42:	43d9      	mvns	r1, r3
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	400b      	ands	r3, r1
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3724      	adds	r7, #36	; 0x24
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bc80      	pop	{r7}
 8006f52:	4770      	bx	lr

08006f54 <SysTick_Config>:
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b082      	sub	sp, #8
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	3b01      	subs	r3, #1
 8006f60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006f64:	d301      	bcc.n	8006f6a <SysTick_Config+0x16>
 8006f66:	2301      	movs	r3, #1
 8006f68:	e00f      	b.n	8006f8a <SysTick_Config+0x36>
 8006f6a:	4a0a      	ldr	r2, [pc, #40]	; (8006f94 <SysTick_Config+0x40>)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	3b01      	subs	r3, #1
 8006f70:	6053      	str	r3, [r2, #4]
 8006f72:	210f      	movs	r1, #15
 8006f74:	f04f 30ff 	mov.w	r0, #4294967295
 8006f78:	f7ff ff90 	bl	8006e9c <__NVIC_SetPriority>
 8006f7c:	4b05      	ldr	r3, [pc, #20]	; (8006f94 <SysTick_Config+0x40>)
 8006f7e:	2200      	movs	r2, #0
 8006f80:	609a      	str	r2, [r3, #8]
 8006f82:	4b04      	ldr	r3, [pc, #16]	; (8006f94 <SysTick_Config+0x40>)
 8006f84:	2207      	movs	r2, #7
 8006f86:	601a      	str	r2, [r3, #0]
 8006f88:	2300      	movs	r3, #0
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3708      	adds	r7, #8
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	bf00      	nop
 8006f94:	e000e010 	.word	0xe000e010

08006f98 <HAL_NVIC_SetPriorityGrouping>:
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b082      	sub	sp, #8
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f7ff ff09 	bl	8006db8 <__NVIC_SetPriorityGrouping>
 8006fa6:	bf00      	nop
 8006fa8:	3708      	adds	r7, #8
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}

08006fae <HAL_NVIC_SetPriority>:
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	b086      	sub	sp, #24
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	60b9      	str	r1, [r7, #8]
 8006fb8:	607a      	str	r2, [r7, #4]
 8006fba:	73fb      	strb	r3, [r7, #15]
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	617b      	str	r3, [r7, #20]
 8006fc0:	f7ff ff1e 	bl	8006e00 <__NVIC_GetPriorityGrouping>
 8006fc4:	6178      	str	r0, [r7, #20]
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	68b9      	ldr	r1, [r7, #8]
 8006fca:	6978      	ldr	r0, [r7, #20]
 8006fcc:	f7ff ff90 	bl	8006ef0 <NVIC_EncodePriority>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006fd6:	4611      	mov	r1, r2
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f7ff ff5f 	bl	8006e9c <__NVIC_SetPriority>
 8006fde:	bf00      	nop
 8006fe0:	3718      	adds	r7, #24
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}

08006fe6 <HAL_NVIC_EnableIRQ>:
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b082      	sub	sp, #8
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	4603      	mov	r3, r0
 8006fee:	71fb      	strb	r3, [r7, #7]
 8006ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f7ff ff11 	bl	8006e1c <__NVIC_EnableIRQ>
 8006ffa:	bf00      	nop
 8006ffc:	3708      	adds	r7, #8
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}

08007002 <HAL_NVIC_DisableIRQ>:
 8007002:	b580      	push	{r7, lr}
 8007004:	b082      	sub	sp, #8
 8007006:	af00      	add	r7, sp, #0
 8007008:	4603      	mov	r3, r0
 800700a:	71fb      	strb	r3, [r7, #7]
 800700c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007010:	4618      	mov	r0, r3
 8007012:	f7ff ff1f 	bl	8006e54 <__NVIC_DisableIRQ>
 8007016:	bf00      	nop
 8007018:	3708      	adds	r7, #8
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}

0800701e <HAL_SYSTICK_Config>:
 800701e:	b580      	push	{r7, lr}
 8007020:	b082      	sub	sp, #8
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f7ff ff94 	bl	8006f54 <SysTick_Config>
 800702c:	4603      	mov	r3, r0
 800702e:	4618      	mov	r0, r3
 8007030:	3708      	adds	r7, #8
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
	...

08007038 <HAL_DMA_Init>:
 8007038:	b480      	push	{r7}
 800703a:	b085      	sub	sp, #20
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	2300      	movs	r3, #0
 8007042:	60fb      	str	r3, [r7, #12]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d101      	bne.n	800704e <HAL_DMA_Init+0x16>
 800704a:	2301      	movs	r3, #1
 800704c:	e043      	b.n	80070d6 <HAL_DMA_Init+0x9e>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	461a      	mov	r2, r3
 8007054:	4b22      	ldr	r3, [pc, #136]	; (80070e0 <HAL_DMA_Init+0xa8>)
 8007056:	4413      	add	r3, r2
 8007058:	4a22      	ldr	r2, [pc, #136]	; (80070e4 <HAL_DMA_Init+0xac>)
 800705a:	fba2 2303 	umull	r2, r3, r2, r3
 800705e:	091b      	lsrs	r3, r3, #4
 8007060:	009a      	lsls	r2, r3, #2
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	641a      	str	r2, [r3, #64]	; 0x40
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	4a1f      	ldr	r2, [pc, #124]	; (80070e8 <HAL_DMA_Init+0xb0>)
 800706a:	63da      	str	r2, [r3, #60]	; 0x3c
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2202      	movs	r2, #2
 8007070:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	60fb      	str	r3, [r7, #12]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8007082:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8007086:	60fb      	str	r3, [r7, #12]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	685a      	ldr	r2, [r3, #4]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	431a      	orrs	r2, r3
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	431a      	orrs	r2, r3
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	691b      	ldr	r3, [r3, #16]
 800709c:	431a      	orrs	r2, r3
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	695b      	ldr	r3, [r3, #20]
 80070a2:	431a      	orrs	r2, r3
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	699b      	ldr	r3, [r3, #24]
 80070a8:	431a      	orrs	r2, r3
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	69db      	ldr	r3, [r3, #28]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	68fa      	ldr	r2, [r7, #12]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	60fb      	str	r3, [r7, #12]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	68fa      	ldr	r2, [r7, #12]
 80070bc:	601a      	str	r2, [r3, #0]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	639a      	str	r2, [r3, #56]	; 0x38
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	f883 2020 	strb.w	r2, [r3, #32]
 80070d4:	2300      	movs	r3, #0
 80070d6:	4618      	mov	r0, r3
 80070d8:	3714      	adds	r7, #20
 80070da:	46bd      	mov	sp, r7
 80070dc:	bc80      	pop	{r7}
 80070de:	4770      	bx	lr
 80070e0:	bffdfff8 	.word	0xbffdfff8
 80070e4:	cccccccd 	.word	0xcccccccd
 80070e8:	40020000 	.word	0x40020000

080070ec <HAL_DMA_DeInit>:
 80070ec:	b480      	push	{r7}
 80070ee:	b083      	sub	sp, #12
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d101      	bne.n	80070fe <HAL_DMA_DeInit+0x12>
 80070fa:	2301      	movs	r3, #1
 80070fc:	e046      	b.n	800718c <HAL_DMA_DeInit+0xa0>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f022 0201 	bic.w	r2, r2, #1
 800710c:	601a      	str	r2, [r3, #0]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	2200      	movs	r2, #0
 8007114:	601a      	str	r2, [r3, #0]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	2200      	movs	r2, #0
 800711c:	605a      	str	r2, [r3, #4]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	2200      	movs	r2, #0
 8007124:	609a      	str	r2, [r3, #8]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	2200      	movs	r2, #0
 800712c:	60da      	str	r2, [r3, #12]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	461a      	mov	r2, r3
 8007134:	4b18      	ldr	r3, [pc, #96]	; (8007198 <HAL_DMA_DeInit+0xac>)
 8007136:	4413      	add	r3, r2
 8007138:	4a18      	ldr	r2, [pc, #96]	; (800719c <HAL_DMA_DeInit+0xb0>)
 800713a:	fba2 2303 	umull	r2, r3, r2, r3
 800713e:	091b      	lsrs	r3, r3, #4
 8007140:	009a      	lsls	r2, r3, #2
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	641a      	str	r2, [r3, #64]	; 0x40
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4a15      	ldr	r2, [pc, #84]	; (80071a0 <HAL_DMA_DeInit+0xb4>)
 800714a:	63da      	str	r2, [r3, #60]	; 0x3c
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007154:	2101      	movs	r1, #1
 8007156:	fa01 f202 	lsl.w	r2, r1, r2
 800715a:	605a      	str	r2, [r3, #4]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2200      	movs	r2, #0
 8007160:	629a      	str	r2, [r3, #40]	; 0x28
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	62da      	str	r2, [r3, #44]	; 0x2c
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	631a      	str	r2, [r3, #48]	; 0x30
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	635a      	str	r2, [r3, #52]	; 0x34
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	639a      	str	r2, [r3, #56]	; 0x38
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	f883 2020 	strb.w	r2, [r3, #32]
 800718a:	2300      	movs	r3, #0
 800718c:	4618      	mov	r0, r3
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	bc80      	pop	{r7}
 8007194:	4770      	bx	lr
 8007196:	bf00      	nop
 8007198:	bffdfff8 	.word	0xbffdfff8
 800719c:	cccccccd 	.word	0xcccccccd
 80071a0:	40020000 	.word	0x40020000

080071a4 <HAL_DMA_Start_IT>:
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b086      	sub	sp, #24
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	60b9      	str	r1, [r7, #8]
 80071ae:	607a      	str	r2, [r7, #4]
 80071b0:	603b      	str	r3, [r7, #0]
 80071b2:	2300      	movs	r3, #0
 80071b4:	75fb      	strb	r3, [r7, #23]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d101      	bne.n	80071c4 <HAL_DMA_Start_IT+0x20>
 80071c0:	2302      	movs	r3, #2
 80071c2:	e04a      	b.n	800725a <HAL_DMA_Start_IT+0xb6>
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 2020 	strb.w	r2, [r3, #32]
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d13a      	bne.n	800724c <HAL_DMA_Start_IT+0xa8>
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2202      	movs	r2, #2
 80071da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2200      	movs	r2, #0
 80071e2:	639a      	str	r2, [r3, #56]	; 0x38
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f022 0201 	bic.w	r2, r2, #1
 80071f2:	601a      	str	r2, [r3, #0]
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	68b9      	ldr	r1, [r7, #8]
 80071fa:	68f8      	ldr	r0, [r7, #12]
 80071fc:	f000 f938 	bl	8007470 <DMA_SetConfig>
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007204:	2b00      	cmp	r3, #0
 8007206:	d008      	beq.n	800721a <HAL_DMA_Start_IT+0x76>
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f042 020e 	orr.w	r2, r2, #14
 8007216:	601a      	str	r2, [r3, #0]
 8007218:	e00f      	b.n	800723a <HAL_DMA_Start_IT+0x96>
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f022 0204 	bic.w	r2, r2, #4
 8007228:	601a      	str	r2, [r3, #0]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f042 020a 	orr.w	r2, r2, #10
 8007238:	601a      	str	r2, [r3, #0]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f042 0201 	orr.w	r2, r2, #1
 8007248:	601a      	str	r2, [r3, #0]
 800724a:	e005      	b.n	8007258 <HAL_DMA_Start_IT+0xb4>
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2200      	movs	r2, #0
 8007250:	f883 2020 	strb.w	r2, [r3, #32]
 8007254:	2302      	movs	r3, #2
 8007256:	75fb      	strb	r3, [r7, #23]
 8007258:	7dfb      	ldrb	r3, [r7, #23]
 800725a:	4618      	mov	r0, r3
 800725c:	3718      	adds	r7, #24
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
	...

08007264 <HAL_DMA_IRQHandler>:
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	60fb      	str	r3, [r7, #12]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	60bb      	str	r3, [r7, #8]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007280:	2204      	movs	r2, #4
 8007282:	409a      	lsls	r2, r3
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	4013      	ands	r3, r2
 8007288:	2b00      	cmp	r3, #0
 800728a:	d04f      	beq.n	800732c <HAL_DMA_IRQHandler+0xc8>
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	f003 0304 	and.w	r3, r3, #4
 8007292:	2b00      	cmp	r3, #0
 8007294:	d04a      	beq.n	800732c <HAL_DMA_IRQHandler+0xc8>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f003 0320 	and.w	r3, r3, #32
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d107      	bne.n	80072b4 <HAL_DMA_IRQHandler+0x50>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f022 0204 	bic.w	r2, r2, #4
 80072b2:	601a      	str	r2, [r3, #0]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a66      	ldr	r2, [pc, #408]	; (8007454 <HAL_DMA_IRQHandler+0x1f0>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d029      	beq.n	8007312 <HAL_DMA_IRQHandler+0xae>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a65      	ldr	r2, [pc, #404]	; (8007458 <HAL_DMA_IRQHandler+0x1f4>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d022      	beq.n	800730e <HAL_DMA_IRQHandler+0xaa>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a63      	ldr	r2, [pc, #396]	; (800745c <HAL_DMA_IRQHandler+0x1f8>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d01a      	beq.n	8007308 <HAL_DMA_IRQHandler+0xa4>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a62      	ldr	r2, [pc, #392]	; (8007460 <HAL_DMA_IRQHandler+0x1fc>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d012      	beq.n	8007302 <HAL_DMA_IRQHandler+0x9e>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a60      	ldr	r2, [pc, #384]	; (8007464 <HAL_DMA_IRQHandler+0x200>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d00a      	beq.n	80072fc <HAL_DMA_IRQHandler+0x98>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a5f      	ldr	r2, [pc, #380]	; (8007468 <HAL_DMA_IRQHandler+0x204>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d102      	bne.n	80072f6 <HAL_DMA_IRQHandler+0x92>
 80072f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80072f4:	e00e      	b.n	8007314 <HAL_DMA_IRQHandler+0xb0>
 80072f6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80072fa:	e00b      	b.n	8007314 <HAL_DMA_IRQHandler+0xb0>
 80072fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007300:	e008      	b.n	8007314 <HAL_DMA_IRQHandler+0xb0>
 8007302:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007306:	e005      	b.n	8007314 <HAL_DMA_IRQHandler+0xb0>
 8007308:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800730c:	e002      	b.n	8007314 <HAL_DMA_IRQHandler+0xb0>
 800730e:	2340      	movs	r3, #64	; 0x40
 8007310:	e000      	b.n	8007314 <HAL_DMA_IRQHandler+0xb0>
 8007312:	2304      	movs	r3, #4
 8007314:	4a55      	ldr	r2, [pc, #340]	; (800746c <HAL_DMA_IRQHandler+0x208>)
 8007316:	6053      	str	r3, [r2, #4]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800731c:	2b00      	cmp	r3, #0
 800731e:	f000 8094 	beq.w	800744a <HAL_DMA_IRQHandler+0x1e6>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	4798      	blx	r3
 800732a:	e08e      	b.n	800744a <HAL_DMA_IRQHandler+0x1e6>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007330:	2202      	movs	r2, #2
 8007332:	409a      	lsls	r2, r3
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	4013      	ands	r3, r2
 8007338:	2b00      	cmp	r3, #0
 800733a:	d056      	beq.n	80073ea <HAL_DMA_IRQHandler+0x186>
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	f003 0302 	and.w	r3, r3, #2
 8007342:	2b00      	cmp	r3, #0
 8007344:	d051      	beq.n	80073ea <HAL_DMA_IRQHandler+0x186>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f003 0320 	and.w	r3, r3, #32
 8007350:	2b00      	cmp	r3, #0
 8007352:	d10b      	bne.n	800736c <HAL_DMA_IRQHandler+0x108>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f022 020a 	bic.w	r2, r2, #10
 8007362:	601a      	str	r2, [r3, #0]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a38      	ldr	r2, [pc, #224]	; (8007454 <HAL_DMA_IRQHandler+0x1f0>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d029      	beq.n	80073ca <HAL_DMA_IRQHandler+0x166>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a37      	ldr	r2, [pc, #220]	; (8007458 <HAL_DMA_IRQHandler+0x1f4>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d022      	beq.n	80073c6 <HAL_DMA_IRQHandler+0x162>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a35      	ldr	r2, [pc, #212]	; (800745c <HAL_DMA_IRQHandler+0x1f8>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d01a      	beq.n	80073c0 <HAL_DMA_IRQHandler+0x15c>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a34      	ldr	r2, [pc, #208]	; (8007460 <HAL_DMA_IRQHandler+0x1fc>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d012      	beq.n	80073ba <HAL_DMA_IRQHandler+0x156>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a32      	ldr	r2, [pc, #200]	; (8007464 <HAL_DMA_IRQHandler+0x200>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d00a      	beq.n	80073b4 <HAL_DMA_IRQHandler+0x150>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a31      	ldr	r2, [pc, #196]	; (8007468 <HAL_DMA_IRQHandler+0x204>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d102      	bne.n	80073ae <HAL_DMA_IRQHandler+0x14a>
 80073a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80073ac:	e00e      	b.n	80073cc <HAL_DMA_IRQHandler+0x168>
 80073ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80073b2:	e00b      	b.n	80073cc <HAL_DMA_IRQHandler+0x168>
 80073b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80073b8:	e008      	b.n	80073cc <HAL_DMA_IRQHandler+0x168>
 80073ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80073be:	e005      	b.n	80073cc <HAL_DMA_IRQHandler+0x168>
 80073c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073c4:	e002      	b.n	80073cc <HAL_DMA_IRQHandler+0x168>
 80073c6:	2320      	movs	r3, #32
 80073c8:	e000      	b.n	80073cc <HAL_DMA_IRQHandler+0x168>
 80073ca:	2302      	movs	r3, #2
 80073cc:	4a27      	ldr	r2, [pc, #156]	; (800746c <HAL_DMA_IRQHandler+0x208>)
 80073ce:	6053      	str	r3, [r2, #4]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f883 2020 	strb.w	r2, [r3, #32]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d034      	beq.n	800744a <HAL_DMA_IRQHandler+0x1e6>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	4798      	blx	r3
 80073e8:	e02f      	b.n	800744a <HAL_DMA_IRQHandler+0x1e6>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ee:	2208      	movs	r2, #8
 80073f0:	409a      	lsls	r2, r3
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	4013      	ands	r3, r2
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d028      	beq.n	800744c <HAL_DMA_IRQHandler+0x1e8>
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	f003 0308 	and.w	r3, r3, #8
 8007400:	2b00      	cmp	r3, #0
 8007402:	d023      	beq.n	800744c <HAL_DMA_IRQHandler+0x1e8>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f022 020e 	bic.w	r2, r2, #14
 8007412:	601a      	str	r2, [r3, #0]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800741c:	2101      	movs	r1, #1
 800741e:	fa01 f202 	lsl.w	r2, r1, r2
 8007422:	605a      	str	r2, [r3, #4]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2201      	movs	r2, #1
 8007428:	639a      	str	r2, [r3, #56]	; 0x38
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2201      	movs	r2, #1
 800742e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	f883 2020 	strb.w	r2, [r3, #32]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800743e:	2b00      	cmp	r3, #0
 8007440:	d004      	beq.n	800744c <HAL_DMA_IRQHandler+0x1e8>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	4798      	blx	r3
 800744a:	bf00      	nop
 800744c:	bf00      	nop
 800744e:	3710      	adds	r7, #16
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}
 8007454:	40020008 	.word	0x40020008
 8007458:	4002001c 	.word	0x4002001c
 800745c:	40020030 	.word	0x40020030
 8007460:	40020044 	.word	0x40020044
 8007464:	40020058 	.word	0x40020058
 8007468:	4002006c 	.word	0x4002006c
 800746c:	40020000 	.word	0x40020000

08007470 <DMA_SetConfig>:
 8007470:	b480      	push	{r7}
 8007472:	b085      	sub	sp, #20
 8007474:	af00      	add	r7, sp, #0
 8007476:	60f8      	str	r0, [r7, #12]
 8007478:	60b9      	str	r1, [r7, #8]
 800747a:	607a      	str	r2, [r7, #4]
 800747c:	603b      	str	r3, [r7, #0]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007486:	2101      	movs	r1, #1
 8007488:	fa01 f202 	lsl.w	r2, r1, r2
 800748c:	605a      	str	r2, [r3, #4]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	683a      	ldr	r2, [r7, #0]
 8007494:	605a      	str	r2, [r3, #4]
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	2b10      	cmp	r3, #16
 800749c:	d108      	bne.n	80074b0 <DMA_SetConfig+0x40>
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	609a      	str	r2, [r3, #8]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	68ba      	ldr	r2, [r7, #8]
 80074ac:	60da      	str	r2, [r3, #12]
 80074ae:	e007      	b.n	80074c0 <DMA_SetConfig+0x50>
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	68ba      	ldr	r2, [r7, #8]
 80074b6:	609a      	str	r2, [r3, #8]
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	60da      	str	r2, [r3, #12]
 80074c0:	bf00      	nop
 80074c2:	3714      	adds	r7, #20
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bc80      	pop	{r7}
 80074c8:	4770      	bx	lr
	...

080074cc <HAL_FLASH_Program>:
 80074cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074ce:	b087      	sub	sp, #28
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	60f8      	str	r0, [r7, #12]
 80074d4:	60b9      	str	r1, [r7, #8]
 80074d6:	e9c7 2300 	strd	r2, r3, [r7]
 80074da:	2301      	movs	r3, #1
 80074dc:	75fb      	strb	r3, [r7, #23]
 80074de:	2300      	movs	r3, #0
 80074e0:	75bb      	strb	r3, [r7, #22]
 80074e2:	2300      	movs	r3, #0
 80074e4:	757b      	strb	r3, [r7, #21]
 80074e6:	4b2f      	ldr	r3, [pc, #188]	; (80075a4 <HAL_FLASH_Program+0xd8>)
 80074e8:	7e1b      	ldrb	r3, [r3, #24]
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d101      	bne.n	80074f2 <HAL_FLASH_Program+0x26>
 80074ee:	2302      	movs	r3, #2
 80074f0:	e054      	b.n	800759c <HAL_FLASH_Program+0xd0>
 80074f2:	4b2c      	ldr	r3, [pc, #176]	; (80075a4 <HAL_FLASH_Program+0xd8>)
 80074f4:	2201      	movs	r2, #1
 80074f6:	761a      	strb	r2, [r3, #24]
 80074f8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80074fc:	f000 f99e 	bl	800783c <FLASH_WaitForLastOperation>
 8007500:	4603      	mov	r3, r0
 8007502:	75fb      	strb	r3, [r7, #23]
 8007504:	7dfb      	ldrb	r3, [r7, #23]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d144      	bne.n	8007594 <HAL_FLASH_Program+0xc8>
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2b01      	cmp	r3, #1
 800750e:	d102      	bne.n	8007516 <HAL_FLASH_Program+0x4a>
 8007510:	2301      	movs	r3, #1
 8007512:	757b      	strb	r3, [r7, #21]
 8007514:	e007      	b.n	8007526 <HAL_FLASH_Program+0x5a>
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2b02      	cmp	r3, #2
 800751a:	d102      	bne.n	8007522 <HAL_FLASH_Program+0x56>
 800751c:	2302      	movs	r3, #2
 800751e:	757b      	strb	r3, [r7, #21]
 8007520:	e001      	b.n	8007526 <HAL_FLASH_Program+0x5a>
 8007522:	2304      	movs	r3, #4
 8007524:	757b      	strb	r3, [r7, #21]
 8007526:	2300      	movs	r3, #0
 8007528:	75bb      	strb	r3, [r7, #22]
 800752a:	e02d      	b.n	8007588 <HAL_FLASH_Program+0xbc>
 800752c:	7dbb      	ldrb	r3, [r7, #22]
 800752e:	005a      	lsls	r2, r3, #1
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	eb02 0c03 	add.w	ip, r2, r3
 8007536:	7dbb      	ldrb	r3, [r7, #22]
 8007538:	0119      	lsls	r1, r3, #4
 800753a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800753e:	f1c1 0620 	rsb	r6, r1, #32
 8007542:	f1a1 0020 	sub.w	r0, r1, #32
 8007546:	fa22 f401 	lsr.w	r4, r2, r1
 800754a:	fa03 f606 	lsl.w	r6, r3, r6
 800754e:	4334      	orrs	r4, r6
 8007550:	fa23 f000 	lsr.w	r0, r3, r0
 8007554:	4304      	orrs	r4, r0
 8007556:	fa23 f501 	lsr.w	r5, r3, r1
 800755a:	b2a3      	uxth	r3, r4
 800755c:	4619      	mov	r1, r3
 800755e:	4660      	mov	r0, ip
 8007560:	f000 f950 	bl	8007804 <FLASH_Program_HalfWord>
 8007564:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007568:	f000 f968 	bl	800783c <FLASH_WaitForLastOperation>
 800756c:	4603      	mov	r3, r0
 800756e:	75fb      	strb	r3, [r7, #23]
 8007570:	4b0d      	ldr	r3, [pc, #52]	; (80075a8 <HAL_FLASH_Program+0xdc>)
 8007572:	691b      	ldr	r3, [r3, #16]
 8007574:	4a0c      	ldr	r2, [pc, #48]	; (80075a8 <HAL_FLASH_Program+0xdc>)
 8007576:	f023 0301 	bic.w	r3, r3, #1
 800757a:	6113      	str	r3, [r2, #16]
 800757c:	7dfb      	ldrb	r3, [r7, #23]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d107      	bne.n	8007592 <HAL_FLASH_Program+0xc6>
 8007582:	7dbb      	ldrb	r3, [r7, #22]
 8007584:	3301      	adds	r3, #1
 8007586:	75bb      	strb	r3, [r7, #22]
 8007588:	7dba      	ldrb	r2, [r7, #22]
 800758a:	7d7b      	ldrb	r3, [r7, #21]
 800758c:	429a      	cmp	r2, r3
 800758e:	d3cd      	bcc.n	800752c <HAL_FLASH_Program+0x60>
 8007590:	e000      	b.n	8007594 <HAL_FLASH_Program+0xc8>
 8007592:	bf00      	nop
 8007594:	4b03      	ldr	r3, [pc, #12]	; (80075a4 <HAL_FLASH_Program+0xd8>)
 8007596:	2200      	movs	r2, #0
 8007598:	761a      	strb	r2, [r3, #24]
 800759a:	7dfb      	ldrb	r3, [r7, #23]
 800759c:	4618      	mov	r0, r3
 800759e:	371c      	adds	r7, #28
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075a4:	20000760 	.word	0x20000760
 80075a8:	40022000 	.word	0x40022000

080075ac <HAL_FLASH_IRQHandler>:
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	2300      	movs	r3, #0
 80075b4:	607b      	str	r3, [r7, #4]
 80075b6:	4b6d      	ldr	r3, [pc, #436]	; (800776c <HAL_FLASH_IRQHandler+0x1c0>)
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	f003 0310 	and.w	r3, r3, #16
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d105      	bne.n	80075ce <HAL_FLASH_IRQHandler+0x22>
 80075c2:	4b6a      	ldr	r3, [pc, #424]	; (800776c <HAL_FLASH_IRQHandler+0x1c0>)
 80075c4:	68db      	ldr	r3, [r3, #12]
 80075c6:	f003 0304 	and.w	r3, r3, #4
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d00e      	beq.n	80075ec <HAL_FLASH_IRQHandler+0x40>
 80075ce:	4b68      	ldr	r3, [pc, #416]	; (8007770 <HAL_FLASH_IRQHandler+0x1c4>)
 80075d0:	689b      	ldr	r3, [r3, #8]
 80075d2:	607b      	str	r3, [r7, #4]
 80075d4:	4b66      	ldr	r3, [pc, #408]	; (8007770 <HAL_FLASH_IRQHandler+0x1c4>)
 80075d6:	f04f 32ff 	mov.w	r2, #4294967295
 80075da:	609a      	str	r2, [r3, #8]
 80075dc:	f000 f974 	bl	80078c8 <FLASH_SetErrorCode>
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 f8d0 	bl	8007786 <HAL_FLASH_OperationErrorCallback>
 80075e6:	4b62      	ldr	r3, [pc, #392]	; (8007770 <HAL_FLASH_IRQHandler+0x1c4>)
 80075e8:	2200      	movs	r2, #0
 80075ea:	701a      	strb	r2, [r3, #0]
 80075ec:	4b5f      	ldr	r3, [pc, #380]	; (800776c <HAL_FLASH_IRQHandler+0x1c0>)
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	f003 0320 	and.w	r3, r3, #32
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	f000 80a0 	beq.w	800773a <HAL_FLASH_IRQHandler+0x18e>
 80075fa:	4b5c      	ldr	r3, [pc, #368]	; (800776c <HAL_FLASH_IRQHandler+0x1c0>)
 80075fc:	2220      	movs	r2, #32
 80075fe:	60da      	str	r2, [r3, #12]
 8007600:	4b5b      	ldr	r3, [pc, #364]	; (8007770 <HAL_FLASH_IRQHandler+0x1c4>)
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	b2db      	uxtb	r3, r3
 8007606:	2b00      	cmp	r3, #0
 8007608:	f000 8097 	beq.w	800773a <HAL_FLASH_IRQHandler+0x18e>
 800760c:	4b58      	ldr	r3, [pc, #352]	; (8007770 <HAL_FLASH_IRQHandler+0x1c4>)
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	b2db      	uxtb	r3, r3
 8007612:	2b01      	cmp	r3, #1
 8007614:	d12d      	bne.n	8007672 <HAL_FLASH_IRQHandler+0xc6>
 8007616:	4b56      	ldr	r3, [pc, #344]	; (8007770 <HAL_FLASH_IRQHandler+0x1c4>)
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	3b01      	subs	r3, #1
 800761c:	4a54      	ldr	r2, [pc, #336]	; (8007770 <HAL_FLASH_IRQHandler+0x1c4>)
 800761e:	6053      	str	r3, [r2, #4]
 8007620:	4b53      	ldr	r3, [pc, #332]	; (8007770 <HAL_FLASH_IRQHandler+0x1c4>)
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d017      	beq.n	8007658 <HAL_FLASH_IRQHandler+0xac>
 8007628:	4b51      	ldr	r3, [pc, #324]	; (8007770 <HAL_FLASH_IRQHandler+0x1c4>)
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	607b      	str	r3, [r7, #4]
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 f8a0 	bl	8007774 <HAL_FLASH_EndOfOperationCallback>
 8007634:	4b4e      	ldr	r3, [pc, #312]	; (8007770 <HAL_FLASH_IRQHandler+0x1c4>)
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800763c:	607b      	str	r3, [r7, #4]
 800763e:	4a4c      	ldr	r2, [pc, #304]	; (8007770 <HAL_FLASH_IRQHandler+0x1c4>)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6093      	str	r3, [r2, #8]
 8007644:	4b49      	ldr	r3, [pc, #292]	; (800776c <HAL_FLASH_IRQHandler+0x1c0>)
 8007646:	691b      	ldr	r3, [r3, #16]
 8007648:	4a48      	ldr	r2, [pc, #288]	; (800776c <HAL_FLASH_IRQHandler+0x1c0>)
 800764a:	f023 0302 	bic.w	r3, r3, #2
 800764e:	6113      	str	r3, [r2, #16]
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 fa11 	bl	8007a78 <FLASH_PageErase>
 8007656:	e070      	b.n	800773a <HAL_FLASH_IRQHandler+0x18e>
 8007658:	f04f 33ff 	mov.w	r3, #4294967295
 800765c:	607b      	str	r3, [r7, #4]
 800765e:	4a44      	ldr	r2, [pc, #272]	; (8007770 <HAL_FLASH_IRQHandler+0x1c4>)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6093      	str	r3, [r2, #8]
 8007664:	4b42      	ldr	r3, [pc, #264]	; (8007770 <HAL_FLASH_IRQHandler+0x1c4>)
 8007666:	2200      	movs	r2, #0
 8007668:	701a      	strb	r2, [r3, #0]
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 f882 	bl	8007774 <HAL_FLASH_EndOfOperationCallback>
 8007670:	e063      	b.n	800773a <HAL_FLASH_IRQHandler+0x18e>
 8007672:	4b3f      	ldr	r3, [pc, #252]	; (8007770 <HAL_FLASH_IRQHandler+0x1c4>)
 8007674:	781b      	ldrb	r3, [r3, #0]
 8007676:	b2db      	uxtb	r3, r3
 8007678:	2b02      	cmp	r3, #2
 800767a:	d10c      	bne.n	8007696 <HAL_FLASH_IRQHandler+0xea>
 800767c:	4b3b      	ldr	r3, [pc, #236]	; (800776c <HAL_FLASH_IRQHandler+0x1c0>)
 800767e:	691b      	ldr	r3, [r3, #16]
 8007680:	4a3a      	ldr	r2, [pc, #232]	; (800776c <HAL_FLASH_IRQHandler+0x1c0>)
 8007682:	f023 0304 	bic.w	r3, r3, #4
 8007686:	6113      	str	r3, [r2, #16]
 8007688:	2000      	movs	r0, #0
 800768a:	f000 f873 	bl	8007774 <HAL_FLASH_EndOfOperationCallback>
 800768e:	4b38      	ldr	r3, [pc, #224]	; (8007770 <HAL_FLASH_IRQHandler+0x1c4>)
 8007690:	2200      	movs	r2, #0
 8007692:	701a      	strb	r2, [r3, #0]
 8007694:	e051      	b.n	800773a <HAL_FLASH_IRQHandler+0x18e>
 8007696:	4b36      	ldr	r3, [pc, #216]	; (8007770 <HAL_FLASH_IRQHandler+0x1c4>)
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	3b01      	subs	r3, #1
 800769c:	4a34      	ldr	r2, [pc, #208]	; (8007770 <HAL_FLASH_IRQHandler+0x1c4>)
 800769e:	6053      	str	r3, [r2, #4]
 80076a0:	4b33      	ldr	r3, [pc, #204]	; (8007770 <HAL_FLASH_IRQHandler+0x1c4>)
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d024      	beq.n	80076f2 <HAL_FLASH_IRQHandler+0x146>
 80076a8:	4b31      	ldr	r3, [pc, #196]	; (8007770 <HAL_FLASH_IRQHandler+0x1c4>)
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	3302      	adds	r3, #2
 80076ae:	4a30      	ldr	r2, [pc, #192]	; (8007770 <HAL_FLASH_IRQHandler+0x1c4>)
 80076b0:	6093      	str	r3, [r2, #8]
 80076b2:	4b2f      	ldr	r3, [pc, #188]	; (8007770 <HAL_FLASH_IRQHandler+0x1c4>)
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	607b      	str	r3, [r7, #4]
 80076b8:	4b2d      	ldr	r3, [pc, #180]	; (8007770 <HAL_FLASH_IRQHandler+0x1c4>)
 80076ba:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80076be:	f04f 0200 	mov.w	r2, #0
 80076c2:	f04f 0300 	mov.w	r3, #0
 80076c6:	0c02      	lsrs	r2, r0, #16
 80076c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80076cc:	0c0b      	lsrs	r3, r1, #16
 80076ce:	4928      	ldr	r1, [pc, #160]	; (8007770 <HAL_FLASH_IRQHandler+0x1c4>)
 80076d0:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80076d4:	4b25      	ldr	r3, [pc, #148]	; (800776c <HAL_FLASH_IRQHandler+0x1c0>)
 80076d6:	691b      	ldr	r3, [r3, #16]
 80076d8:	4a24      	ldr	r2, [pc, #144]	; (800776c <HAL_FLASH_IRQHandler+0x1c0>)
 80076da:	f023 0301 	bic.w	r3, r3, #1
 80076de:	6113      	str	r3, [r2, #16]
 80076e0:	4b23      	ldr	r3, [pc, #140]	; (8007770 <HAL_FLASH_IRQHandler+0x1c4>)
 80076e2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80076e6:	b293      	uxth	r3, r2
 80076e8:	4619      	mov	r1, r3
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 f88a 	bl	8007804 <FLASH_Program_HalfWord>
 80076f0:	e023      	b.n	800773a <HAL_FLASH_IRQHandler+0x18e>
 80076f2:	4b1f      	ldr	r3, [pc, #124]	; (8007770 <HAL_FLASH_IRQHandler+0x1c4>)
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	2b03      	cmp	r3, #3
 80076fa:	d105      	bne.n	8007708 <HAL_FLASH_IRQHandler+0x15c>
 80076fc:	4b1c      	ldr	r3, [pc, #112]	; (8007770 <HAL_FLASH_IRQHandler+0x1c4>)
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	4618      	mov	r0, r3
 8007702:	f000 f837 	bl	8007774 <HAL_FLASH_EndOfOperationCallback>
 8007706:	e011      	b.n	800772c <HAL_FLASH_IRQHandler+0x180>
 8007708:	4b19      	ldr	r3, [pc, #100]	; (8007770 <HAL_FLASH_IRQHandler+0x1c4>)
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	b2db      	uxtb	r3, r3
 800770e:	2b04      	cmp	r3, #4
 8007710:	d106      	bne.n	8007720 <HAL_FLASH_IRQHandler+0x174>
 8007712:	4b17      	ldr	r3, [pc, #92]	; (8007770 <HAL_FLASH_IRQHandler+0x1c4>)
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	3b02      	subs	r3, #2
 8007718:	4618      	mov	r0, r3
 800771a:	f000 f82b 	bl	8007774 <HAL_FLASH_EndOfOperationCallback>
 800771e:	e005      	b.n	800772c <HAL_FLASH_IRQHandler+0x180>
 8007720:	4b13      	ldr	r3, [pc, #76]	; (8007770 <HAL_FLASH_IRQHandler+0x1c4>)
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	3b06      	subs	r3, #6
 8007726:	4618      	mov	r0, r3
 8007728:	f000 f824 	bl	8007774 <HAL_FLASH_EndOfOperationCallback>
 800772c:	4b10      	ldr	r3, [pc, #64]	; (8007770 <HAL_FLASH_IRQHandler+0x1c4>)
 800772e:	f04f 32ff 	mov.w	r2, #4294967295
 8007732:	609a      	str	r2, [r3, #8]
 8007734:	4b0e      	ldr	r3, [pc, #56]	; (8007770 <HAL_FLASH_IRQHandler+0x1c4>)
 8007736:	2200      	movs	r2, #0
 8007738:	701a      	strb	r2, [r3, #0]
 800773a:	4b0d      	ldr	r3, [pc, #52]	; (8007770 <HAL_FLASH_IRQHandler+0x1c4>)
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	b2db      	uxtb	r3, r3
 8007740:	2b00      	cmp	r3, #0
 8007742:	d10e      	bne.n	8007762 <HAL_FLASH_IRQHandler+0x1b6>
 8007744:	4b09      	ldr	r3, [pc, #36]	; (800776c <HAL_FLASH_IRQHandler+0x1c0>)
 8007746:	691b      	ldr	r3, [r3, #16]
 8007748:	4a08      	ldr	r2, [pc, #32]	; (800776c <HAL_FLASH_IRQHandler+0x1c0>)
 800774a:	f023 0307 	bic.w	r3, r3, #7
 800774e:	6113      	str	r3, [r2, #16]
 8007750:	4b06      	ldr	r3, [pc, #24]	; (800776c <HAL_FLASH_IRQHandler+0x1c0>)
 8007752:	691b      	ldr	r3, [r3, #16]
 8007754:	4a05      	ldr	r2, [pc, #20]	; (800776c <HAL_FLASH_IRQHandler+0x1c0>)
 8007756:	f423 53a0 	bic.w	r3, r3, #5120	; 0x1400
 800775a:	6113      	str	r3, [r2, #16]
 800775c:	4b04      	ldr	r3, [pc, #16]	; (8007770 <HAL_FLASH_IRQHandler+0x1c4>)
 800775e:	2200      	movs	r2, #0
 8007760:	761a      	strb	r2, [r3, #24]
 8007762:	bf00      	nop
 8007764:	3708      	adds	r7, #8
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop
 800776c:	40022000 	.word	0x40022000
 8007770:	20000760 	.word	0x20000760

08007774 <HAL_FLASH_EndOfOperationCallback>:
 8007774:	b480      	push	{r7}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	bf00      	nop
 800777e:	370c      	adds	r7, #12
 8007780:	46bd      	mov	sp, r7
 8007782:	bc80      	pop	{r7}
 8007784:	4770      	bx	lr

08007786 <HAL_FLASH_OperationErrorCallback>:
 8007786:	b480      	push	{r7}
 8007788:	b083      	sub	sp, #12
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
 800778e:	bf00      	nop
 8007790:	370c      	adds	r7, #12
 8007792:	46bd      	mov	sp, r7
 8007794:	bc80      	pop	{r7}
 8007796:	4770      	bx	lr

08007798 <HAL_FLASH_Unlock>:
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
 800779e:	2300      	movs	r3, #0
 80077a0:	71fb      	strb	r3, [r7, #7]
 80077a2:	4b0d      	ldr	r3, [pc, #52]	; (80077d8 <HAL_FLASH_Unlock+0x40>)
 80077a4:	691b      	ldr	r3, [r3, #16]
 80077a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d00d      	beq.n	80077ca <HAL_FLASH_Unlock+0x32>
 80077ae:	4b0a      	ldr	r3, [pc, #40]	; (80077d8 <HAL_FLASH_Unlock+0x40>)
 80077b0:	4a0a      	ldr	r2, [pc, #40]	; (80077dc <HAL_FLASH_Unlock+0x44>)
 80077b2:	605a      	str	r2, [r3, #4]
 80077b4:	4b08      	ldr	r3, [pc, #32]	; (80077d8 <HAL_FLASH_Unlock+0x40>)
 80077b6:	4a0a      	ldr	r2, [pc, #40]	; (80077e0 <HAL_FLASH_Unlock+0x48>)
 80077b8:	605a      	str	r2, [r3, #4]
 80077ba:	4b07      	ldr	r3, [pc, #28]	; (80077d8 <HAL_FLASH_Unlock+0x40>)
 80077bc:	691b      	ldr	r3, [r3, #16]
 80077be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d001      	beq.n	80077ca <HAL_FLASH_Unlock+0x32>
 80077c6:	2301      	movs	r3, #1
 80077c8:	71fb      	strb	r3, [r7, #7]
 80077ca:	79fb      	ldrb	r3, [r7, #7]
 80077cc:	4618      	mov	r0, r3
 80077ce:	370c      	adds	r7, #12
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bc80      	pop	{r7}
 80077d4:	4770      	bx	lr
 80077d6:	bf00      	nop
 80077d8:	40022000 	.word	0x40022000
 80077dc:	45670123 	.word	0x45670123
 80077e0:	cdef89ab 	.word	0xcdef89ab

080077e4 <HAL_FLASH_Lock>:
 80077e4:	b480      	push	{r7}
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	4b05      	ldr	r3, [pc, #20]	; (8007800 <HAL_FLASH_Lock+0x1c>)
 80077ea:	691b      	ldr	r3, [r3, #16]
 80077ec:	4a04      	ldr	r2, [pc, #16]	; (8007800 <HAL_FLASH_Lock+0x1c>)
 80077ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077f2:	6113      	str	r3, [r2, #16]
 80077f4:	2300      	movs	r3, #0
 80077f6:	4618      	mov	r0, r3
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bc80      	pop	{r7}
 80077fc:	4770      	bx	lr
 80077fe:	bf00      	nop
 8007800:	40022000 	.word	0x40022000

08007804 <FLASH_Program_HalfWord>:
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	460b      	mov	r3, r1
 800780e:	807b      	strh	r3, [r7, #2]
 8007810:	4b08      	ldr	r3, [pc, #32]	; (8007834 <FLASH_Program_HalfWord+0x30>)
 8007812:	2200      	movs	r2, #0
 8007814:	61da      	str	r2, [r3, #28]
 8007816:	4b08      	ldr	r3, [pc, #32]	; (8007838 <FLASH_Program_HalfWord+0x34>)
 8007818:	691b      	ldr	r3, [r3, #16]
 800781a:	4a07      	ldr	r2, [pc, #28]	; (8007838 <FLASH_Program_HalfWord+0x34>)
 800781c:	f043 0301 	orr.w	r3, r3, #1
 8007820:	6113      	str	r3, [r2, #16]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	887a      	ldrh	r2, [r7, #2]
 8007826:	801a      	strh	r2, [r3, #0]
 8007828:	bf00      	nop
 800782a:	370c      	adds	r7, #12
 800782c:	46bd      	mov	sp, r7
 800782e:	bc80      	pop	{r7}
 8007830:	4770      	bx	lr
 8007832:	bf00      	nop
 8007834:	20000760 	.word	0x20000760
 8007838:	40022000 	.word	0x40022000

0800783c <FLASH_WaitForLastOperation>:
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	f7fe fe18 	bl	8006478 <HAL_GetTick>
 8007848:	60f8      	str	r0, [r7, #12]
 800784a:	e010      	b.n	800786e <FLASH_WaitForLastOperation+0x32>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007852:	d00c      	beq.n	800786e <FLASH_WaitForLastOperation+0x32>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d007      	beq.n	800786a <FLASH_WaitForLastOperation+0x2e>
 800785a:	f7fe fe0d 	bl	8006478 <HAL_GetTick>
 800785e:	4602      	mov	r2, r0
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	1ad3      	subs	r3, r2, r3
 8007864:	687a      	ldr	r2, [r7, #4]
 8007866:	429a      	cmp	r2, r3
 8007868:	d201      	bcs.n	800786e <FLASH_WaitForLastOperation+0x32>
 800786a:	2303      	movs	r3, #3
 800786c:	e025      	b.n	80078ba <FLASH_WaitForLastOperation+0x7e>
 800786e:	4b15      	ldr	r3, [pc, #84]	; (80078c4 <FLASH_WaitForLastOperation+0x88>)
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	f003 0301 	and.w	r3, r3, #1
 8007876:	2b00      	cmp	r3, #0
 8007878:	d1e8      	bne.n	800784c <FLASH_WaitForLastOperation+0x10>
 800787a:	4b12      	ldr	r3, [pc, #72]	; (80078c4 <FLASH_WaitForLastOperation+0x88>)
 800787c:	68db      	ldr	r3, [r3, #12]
 800787e:	f003 0320 	and.w	r3, r3, #32
 8007882:	2b00      	cmp	r3, #0
 8007884:	d002      	beq.n	800788c <FLASH_WaitForLastOperation+0x50>
 8007886:	4b0f      	ldr	r3, [pc, #60]	; (80078c4 <FLASH_WaitForLastOperation+0x88>)
 8007888:	2220      	movs	r2, #32
 800788a:	60da      	str	r2, [r3, #12]
 800788c:	4b0d      	ldr	r3, [pc, #52]	; (80078c4 <FLASH_WaitForLastOperation+0x88>)
 800788e:	68db      	ldr	r3, [r3, #12]
 8007890:	f003 0310 	and.w	r3, r3, #16
 8007894:	2b00      	cmp	r3, #0
 8007896:	d10b      	bne.n	80078b0 <FLASH_WaitForLastOperation+0x74>
 8007898:	4b0a      	ldr	r3, [pc, #40]	; (80078c4 <FLASH_WaitForLastOperation+0x88>)
 800789a:	69db      	ldr	r3, [r3, #28]
 800789c:	f003 0301 	and.w	r3, r3, #1
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d105      	bne.n	80078b0 <FLASH_WaitForLastOperation+0x74>
 80078a4:	4b07      	ldr	r3, [pc, #28]	; (80078c4 <FLASH_WaitForLastOperation+0x88>)
 80078a6:	68db      	ldr	r3, [r3, #12]
 80078a8:	f003 0304 	and.w	r3, r3, #4
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d003      	beq.n	80078b8 <FLASH_WaitForLastOperation+0x7c>
 80078b0:	f000 f80a 	bl	80078c8 <FLASH_SetErrorCode>
 80078b4:	2301      	movs	r3, #1
 80078b6:	e000      	b.n	80078ba <FLASH_WaitForLastOperation+0x7e>
 80078b8:	2300      	movs	r3, #0
 80078ba:	4618      	mov	r0, r3
 80078bc:	3710      	adds	r7, #16
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
 80078c2:	bf00      	nop
 80078c4:	40022000 	.word	0x40022000

080078c8 <FLASH_SetErrorCode>:
 80078c8:	b480      	push	{r7}
 80078ca:	b083      	sub	sp, #12
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	2300      	movs	r3, #0
 80078d0:	607b      	str	r3, [r7, #4]
 80078d2:	4b23      	ldr	r3, [pc, #140]	; (8007960 <FLASH_SetErrorCode+0x98>)
 80078d4:	68db      	ldr	r3, [r3, #12]
 80078d6:	f003 0310 	and.w	r3, r3, #16
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d009      	beq.n	80078f2 <FLASH_SetErrorCode+0x2a>
 80078de:	4b21      	ldr	r3, [pc, #132]	; (8007964 <FLASH_SetErrorCode+0x9c>)
 80078e0:	69db      	ldr	r3, [r3, #28]
 80078e2:	f043 0302 	orr.w	r3, r3, #2
 80078e6:	4a1f      	ldr	r2, [pc, #124]	; (8007964 <FLASH_SetErrorCode+0x9c>)
 80078e8:	61d3      	str	r3, [r2, #28]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f043 0310 	orr.w	r3, r3, #16
 80078f0:	607b      	str	r3, [r7, #4]
 80078f2:	4b1b      	ldr	r3, [pc, #108]	; (8007960 <FLASH_SetErrorCode+0x98>)
 80078f4:	68db      	ldr	r3, [r3, #12]
 80078f6:	f003 0304 	and.w	r3, r3, #4
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d009      	beq.n	8007912 <FLASH_SetErrorCode+0x4a>
 80078fe:	4b19      	ldr	r3, [pc, #100]	; (8007964 <FLASH_SetErrorCode+0x9c>)
 8007900:	69db      	ldr	r3, [r3, #28]
 8007902:	f043 0301 	orr.w	r3, r3, #1
 8007906:	4a17      	ldr	r2, [pc, #92]	; (8007964 <FLASH_SetErrorCode+0x9c>)
 8007908:	61d3      	str	r3, [r2, #28]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f043 0304 	orr.w	r3, r3, #4
 8007910:	607b      	str	r3, [r7, #4]
 8007912:	4b13      	ldr	r3, [pc, #76]	; (8007960 <FLASH_SetErrorCode+0x98>)
 8007914:	69db      	ldr	r3, [r3, #28]
 8007916:	f003 0301 	and.w	r3, r3, #1
 800791a:	2b00      	cmp	r3, #0
 800791c:	d00b      	beq.n	8007936 <FLASH_SetErrorCode+0x6e>
 800791e:	4b11      	ldr	r3, [pc, #68]	; (8007964 <FLASH_SetErrorCode+0x9c>)
 8007920:	69db      	ldr	r3, [r3, #28]
 8007922:	f043 0304 	orr.w	r3, r3, #4
 8007926:	4a0f      	ldr	r2, [pc, #60]	; (8007964 <FLASH_SetErrorCode+0x9c>)
 8007928:	61d3      	str	r3, [r2, #28]
 800792a:	4b0d      	ldr	r3, [pc, #52]	; (8007960 <FLASH_SetErrorCode+0x98>)
 800792c:	69db      	ldr	r3, [r3, #28]
 800792e:	4a0c      	ldr	r2, [pc, #48]	; (8007960 <FLASH_SetErrorCode+0x98>)
 8007930:	f023 0301 	bic.w	r3, r3, #1
 8007934:	61d3      	str	r3, [r2, #28]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f240 1201 	movw	r2, #257	; 0x101
 800793c:	4293      	cmp	r3, r2
 800793e:	d106      	bne.n	800794e <FLASH_SetErrorCode+0x86>
 8007940:	4b07      	ldr	r3, [pc, #28]	; (8007960 <FLASH_SetErrorCode+0x98>)
 8007942:	69db      	ldr	r3, [r3, #28]
 8007944:	4a06      	ldr	r2, [pc, #24]	; (8007960 <FLASH_SetErrorCode+0x98>)
 8007946:	f023 0301 	bic.w	r3, r3, #1
 800794a:	61d3      	str	r3, [r2, #28]
 800794c:	e002      	b.n	8007954 <FLASH_SetErrorCode+0x8c>
 800794e:	4a04      	ldr	r2, [pc, #16]	; (8007960 <FLASH_SetErrorCode+0x98>)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	60d3      	str	r3, [r2, #12]
 8007954:	bf00      	nop
 8007956:	370c      	adds	r7, #12
 8007958:	46bd      	mov	sp, r7
 800795a:	bc80      	pop	{r7}
 800795c:	4770      	bx	lr
 800795e:	bf00      	nop
 8007960:	40022000 	.word	0x40022000
 8007964:	20000760 	.word	0x20000760

08007968 <HAL_FLASHEx_Erase>:
 8007968:	b580      	push	{r7, lr}
 800796a:	b084      	sub	sp, #16
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
 8007972:	2301      	movs	r3, #1
 8007974:	73fb      	strb	r3, [r7, #15]
 8007976:	2300      	movs	r3, #0
 8007978:	60bb      	str	r3, [r7, #8]
 800797a:	4b2f      	ldr	r3, [pc, #188]	; (8007a38 <HAL_FLASHEx_Erase+0xd0>)
 800797c:	7e1b      	ldrb	r3, [r3, #24]
 800797e:	2b01      	cmp	r3, #1
 8007980:	d101      	bne.n	8007986 <HAL_FLASHEx_Erase+0x1e>
 8007982:	2302      	movs	r3, #2
 8007984:	e053      	b.n	8007a2e <HAL_FLASHEx_Erase+0xc6>
 8007986:	4b2c      	ldr	r3, [pc, #176]	; (8007a38 <HAL_FLASHEx_Erase+0xd0>)
 8007988:	2201      	movs	r2, #1
 800798a:	761a      	strb	r2, [r3, #24]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	2b02      	cmp	r3, #2
 8007992:	d116      	bne.n	80079c2 <HAL_FLASHEx_Erase+0x5a>
 8007994:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007998:	f7ff ff50 	bl	800783c <FLASH_WaitForLastOperation>
 800799c:	4603      	mov	r3, r0
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d141      	bne.n	8007a26 <HAL_FLASHEx_Erase+0xbe>
 80079a2:	2001      	movs	r0, #1
 80079a4:	f000 f84c 	bl	8007a40 <FLASH_MassErase>
 80079a8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80079ac:	f7ff ff46 	bl	800783c <FLASH_WaitForLastOperation>
 80079b0:	4603      	mov	r3, r0
 80079b2:	73fb      	strb	r3, [r7, #15]
 80079b4:	4b21      	ldr	r3, [pc, #132]	; (8007a3c <HAL_FLASHEx_Erase+0xd4>)
 80079b6:	691b      	ldr	r3, [r3, #16]
 80079b8:	4a20      	ldr	r2, [pc, #128]	; (8007a3c <HAL_FLASHEx_Erase+0xd4>)
 80079ba:	f023 0304 	bic.w	r3, r3, #4
 80079be:	6113      	str	r3, [r2, #16]
 80079c0:	e031      	b.n	8007a26 <HAL_FLASHEx_Erase+0xbe>
 80079c2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80079c6:	f7ff ff39 	bl	800783c <FLASH_WaitForLastOperation>
 80079ca:	4603      	mov	r3, r0
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d12a      	bne.n	8007a26 <HAL_FLASHEx_Erase+0xbe>
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	f04f 32ff 	mov.w	r2, #4294967295
 80079d6:	601a      	str	r2, [r3, #0]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	60bb      	str	r3, [r7, #8]
 80079de:	e019      	b.n	8007a14 <HAL_FLASHEx_Erase+0xac>
 80079e0:	68b8      	ldr	r0, [r7, #8]
 80079e2:	f000 f849 	bl	8007a78 <FLASH_PageErase>
 80079e6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80079ea:	f7ff ff27 	bl	800783c <FLASH_WaitForLastOperation>
 80079ee:	4603      	mov	r3, r0
 80079f0:	73fb      	strb	r3, [r7, #15]
 80079f2:	4b12      	ldr	r3, [pc, #72]	; (8007a3c <HAL_FLASHEx_Erase+0xd4>)
 80079f4:	691b      	ldr	r3, [r3, #16]
 80079f6:	4a11      	ldr	r2, [pc, #68]	; (8007a3c <HAL_FLASHEx_Erase+0xd4>)
 80079f8:	f023 0302 	bic.w	r3, r3, #2
 80079fc:	6113      	str	r3, [r2, #16]
 80079fe:	7bfb      	ldrb	r3, [r7, #15]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d003      	beq.n	8007a0c <HAL_FLASHEx_Erase+0xa4>
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	68ba      	ldr	r2, [r7, #8]
 8007a08:	601a      	str	r2, [r3, #0]
 8007a0a:	e00c      	b.n	8007a26 <HAL_FLASHEx_Erase+0xbe>
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a12:	60bb      	str	r3, [r7, #8]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	68db      	ldr	r3, [r3, #12]
 8007a18:	029a      	lsls	r2, r3, #10
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	4413      	add	r3, r2
 8007a20:	68ba      	ldr	r2, [r7, #8]
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d3dc      	bcc.n	80079e0 <HAL_FLASHEx_Erase+0x78>
 8007a26:	4b04      	ldr	r3, [pc, #16]	; (8007a38 <HAL_FLASHEx_Erase+0xd0>)
 8007a28:	2200      	movs	r2, #0
 8007a2a:	761a      	strb	r2, [r3, #24]
 8007a2c:	7bfb      	ldrb	r3, [r7, #15]
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3710      	adds	r7, #16
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	20000760 	.word	0x20000760
 8007a3c:	40022000 	.word	0x40022000

08007a40 <FLASH_MassErase>:
 8007a40:	b480      	push	{r7}
 8007a42:	b083      	sub	sp, #12
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	4b09      	ldr	r3, [pc, #36]	; (8007a70 <FLASH_MassErase+0x30>)
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	61da      	str	r2, [r3, #28]
 8007a4e:	4b09      	ldr	r3, [pc, #36]	; (8007a74 <FLASH_MassErase+0x34>)
 8007a50:	691b      	ldr	r3, [r3, #16]
 8007a52:	4a08      	ldr	r2, [pc, #32]	; (8007a74 <FLASH_MassErase+0x34>)
 8007a54:	f043 0304 	orr.w	r3, r3, #4
 8007a58:	6113      	str	r3, [r2, #16]
 8007a5a:	4b06      	ldr	r3, [pc, #24]	; (8007a74 <FLASH_MassErase+0x34>)
 8007a5c:	691b      	ldr	r3, [r3, #16]
 8007a5e:	4a05      	ldr	r2, [pc, #20]	; (8007a74 <FLASH_MassErase+0x34>)
 8007a60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a64:	6113      	str	r3, [r2, #16]
 8007a66:	bf00      	nop
 8007a68:	370c      	adds	r7, #12
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bc80      	pop	{r7}
 8007a6e:	4770      	bx	lr
 8007a70:	20000760 	.word	0x20000760
 8007a74:	40022000 	.word	0x40022000

08007a78 <FLASH_PageErase>:
 8007a78:	b480      	push	{r7}
 8007a7a:	b083      	sub	sp, #12
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	4b0b      	ldr	r3, [pc, #44]	; (8007ab0 <FLASH_PageErase+0x38>)
 8007a82:	2200      	movs	r2, #0
 8007a84:	61da      	str	r2, [r3, #28]
 8007a86:	4b0b      	ldr	r3, [pc, #44]	; (8007ab4 <FLASH_PageErase+0x3c>)
 8007a88:	691b      	ldr	r3, [r3, #16]
 8007a8a:	4a0a      	ldr	r2, [pc, #40]	; (8007ab4 <FLASH_PageErase+0x3c>)
 8007a8c:	f043 0302 	orr.w	r3, r3, #2
 8007a90:	6113      	str	r3, [r2, #16]
 8007a92:	4a08      	ldr	r2, [pc, #32]	; (8007ab4 <FLASH_PageErase+0x3c>)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6153      	str	r3, [r2, #20]
 8007a98:	4b06      	ldr	r3, [pc, #24]	; (8007ab4 <FLASH_PageErase+0x3c>)
 8007a9a:	691b      	ldr	r3, [r3, #16]
 8007a9c:	4a05      	ldr	r2, [pc, #20]	; (8007ab4 <FLASH_PageErase+0x3c>)
 8007a9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007aa2:	6113      	str	r3, [r2, #16]
 8007aa4:	bf00      	nop
 8007aa6:	370c      	adds	r7, #12
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bc80      	pop	{r7}
 8007aac:	4770      	bx	lr
 8007aae:	bf00      	nop
 8007ab0:	20000760 	.word	0x20000760
 8007ab4:	40022000 	.word	0x40022000

08007ab8 <HAL_GPIO_Init>:
 8007ab8:	b480      	push	{r7}
 8007aba:	b08b      	sub	sp, #44	; 0x2c
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	623b      	str	r3, [r7, #32]
 8007aca:	e169      	b.n	8007da0 <HAL_GPIO_Init+0x2e8>
 8007acc:	2201      	movs	r2, #1
 8007ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ad4:	61fb      	str	r3, [r7, #28]
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	69fa      	ldr	r2, [r7, #28]
 8007adc:	4013      	ands	r3, r2
 8007ade:	61bb      	str	r3, [r7, #24]
 8007ae0:	69ba      	ldr	r2, [r7, #24]
 8007ae2:	69fb      	ldr	r3, [r7, #28]
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	f040 8158 	bne.w	8007d9a <HAL_GPIO_Init+0x2e2>
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	4a9a      	ldr	r2, [pc, #616]	; (8007d58 <HAL_GPIO_Init+0x2a0>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d05e      	beq.n	8007bb2 <HAL_GPIO_Init+0xfa>
 8007af4:	4a98      	ldr	r2, [pc, #608]	; (8007d58 <HAL_GPIO_Init+0x2a0>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d875      	bhi.n	8007be6 <HAL_GPIO_Init+0x12e>
 8007afa:	4a98      	ldr	r2, [pc, #608]	; (8007d5c <HAL_GPIO_Init+0x2a4>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d058      	beq.n	8007bb2 <HAL_GPIO_Init+0xfa>
 8007b00:	4a96      	ldr	r2, [pc, #600]	; (8007d5c <HAL_GPIO_Init+0x2a4>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d86f      	bhi.n	8007be6 <HAL_GPIO_Init+0x12e>
 8007b06:	4a96      	ldr	r2, [pc, #600]	; (8007d60 <HAL_GPIO_Init+0x2a8>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d052      	beq.n	8007bb2 <HAL_GPIO_Init+0xfa>
 8007b0c:	4a94      	ldr	r2, [pc, #592]	; (8007d60 <HAL_GPIO_Init+0x2a8>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d869      	bhi.n	8007be6 <HAL_GPIO_Init+0x12e>
 8007b12:	4a94      	ldr	r2, [pc, #592]	; (8007d64 <HAL_GPIO_Init+0x2ac>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d04c      	beq.n	8007bb2 <HAL_GPIO_Init+0xfa>
 8007b18:	4a92      	ldr	r2, [pc, #584]	; (8007d64 <HAL_GPIO_Init+0x2ac>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d863      	bhi.n	8007be6 <HAL_GPIO_Init+0x12e>
 8007b1e:	4a92      	ldr	r2, [pc, #584]	; (8007d68 <HAL_GPIO_Init+0x2b0>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d046      	beq.n	8007bb2 <HAL_GPIO_Init+0xfa>
 8007b24:	4a90      	ldr	r2, [pc, #576]	; (8007d68 <HAL_GPIO_Init+0x2b0>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d85d      	bhi.n	8007be6 <HAL_GPIO_Init+0x12e>
 8007b2a:	2b12      	cmp	r3, #18
 8007b2c:	d82a      	bhi.n	8007b84 <HAL_GPIO_Init+0xcc>
 8007b2e:	2b12      	cmp	r3, #18
 8007b30:	d859      	bhi.n	8007be6 <HAL_GPIO_Init+0x12e>
 8007b32:	a201      	add	r2, pc, #4	; (adr r2, 8007b38 <HAL_GPIO_Init+0x80>)
 8007b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b38:	08007bb3 	.word	0x08007bb3
 8007b3c:	08007b8d 	.word	0x08007b8d
 8007b40:	08007b9f 	.word	0x08007b9f
 8007b44:	08007be1 	.word	0x08007be1
 8007b48:	08007be7 	.word	0x08007be7
 8007b4c:	08007be7 	.word	0x08007be7
 8007b50:	08007be7 	.word	0x08007be7
 8007b54:	08007be7 	.word	0x08007be7
 8007b58:	08007be7 	.word	0x08007be7
 8007b5c:	08007be7 	.word	0x08007be7
 8007b60:	08007be7 	.word	0x08007be7
 8007b64:	08007be7 	.word	0x08007be7
 8007b68:	08007be7 	.word	0x08007be7
 8007b6c:	08007be7 	.word	0x08007be7
 8007b70:	08007be7 	.word	0x08007be7
 8007b74:	08007be7 	.word	0x08007be7
 8007b78:	08007be7 	.word	0x08007be7
 8007b7c:	08007b95 	.word	0x08007b95
 8007b80:	08007ba9 	.word	0x08007ba9
 8007b84:	4a79      	ldr	r2, [pc, #484]	; (8007d6c <HAL_GPIO_Init+0x2b4>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d013      	beq.n	8007bb2 <HAL_GPIO_Init+0xfa>
 8007b8a:	e02c      	b.n	8007be6 <HAL_GPIO_Init+0x12e>
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	68db      	ldr	r3, [r3, #12]
 8007b90:	623b      	str	r3, [r7, #32]
 8007b92:	e029      	b.n	8007be8 <HAL_GPIO_Init+0x130>
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	3304      	adds	r3, #4
 8007b9a:	623b      	str	r3, [r7, #32]
 8007b9c:	e024      	b.n	8007be8 <HAL_GPIO_Init+0x130>
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	3308      	adds	r3, #8
 8007ba4:	623b      	str	r3, [r7, #32]
 8007ba6:	e01f      	b.n	8007be8 <HAL_GPIO_Init+0x130>
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	68db      	ldr	r3, [r3, #12]
 8007bac:	330c      	adds	r3, #12
 8007bae:	623b      	str	r3, [r7, #32]
 8007bb0:	e01a      	b.n	8007be8 <HAL_GPIO_Init+0x130>
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d102      	bne.n	8007bc0 <HAL_GPIO_Init+0x108>
 8007bba:	2304      	movs	r3, #4
 8007bbc:	623b      	str	r3, [r7, #32]
 8007bbe:	e013      	b.n	8007be8 <HAL_GPIO_Init+0x130>
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d105      	bne.n	8007bd4 <HAL_GPIO_Init+0x11c>
 8007bc8:	2308      	movs	r3, #8
 8007bca:	623b      	str	r3, [r7, #32]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	69fa      	ldr	r2, [r7, #28]
 8007bd0:	611a      	str	r2, [r3, #16]
 8007bd2:	e009      	b.n	8007be8 <HAL_GPIO_Init+0x130>
 8007bd4:	2308      	movs	r3, #8
 8007bd6:	623b      	str	r3, [r7, #32]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	69fa      	ldr	r2, [r7, #28]
 8007bdc:	615a      	str	r2, [r3, #20]
 8007bde:	e003      	b.n	8007be8 <HAL_GPIO_Init+0x130>
 8007be0:	2300      	movs	r3, #0
 8007be2:	623b      	str	r3, [r7, #32]
 8007be4:	e000      	b.n	8007be8 <HAL_GPIO_Init+0x130>
 8007be6:	bf00      	nop
 8007be8:	69bb      	ldr	r3, [r7, #24]
 8007bea:	2bff      	cmp	r3, #255	; 0xff
 8007bec:	d801      	bhi.n	8007bf2 <HAL_GPIO_Init+0x13a>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	e001      	b.n	8007bf6 <HAL_GPIO_Init+0x13e>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	3304      	adds	r3, #4
 8007bf6:	617b      	str	r3, [r7, #20]
 8007bf8:	69bb      	ldr	r3, [r7, #24]
 8007bfa:	2bff      	cmp	r3, #255	; 0xff
 8007bfc:	d802      	bhi.n	8007c04 <HAL_GPIO_Init+0x14c>
 8007bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	e002      	b.n	8007c0a <HAL_GPIO_Init+0x152>
 8007c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c06:	3b08      	subs	r3, #8
 8007c08:	009b      	lsls	r3, r3, #2
 8007c0a:	613b      	str	r3, [r7, #16]
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	210f      	movs	r1, #15
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	fa01 f303 	lsl.w	r3, r1, r3
 8007c18:	43db      	mvns	r3, r3
 8007c1a:	401a      	ands	r2, r3
 8007c1c:	6a39      	ldr	r1, [r7, #32]
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	fa01 f303 	lsl.w	r3, r1, r3
 8007c24:	431a      	orrs	r2, r3
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	601a      	str	r2, [r3, #0]
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	f000 80b1 	beq.w	8007d9a <HAL_GPIO_Init+0x2e2>
 8007c38:	4b4d      	ldr	r3, [pc, #308]	; (8007d70 <HAL_GPIO_Init+0x2b8>)
 8007c3a:	699b      	ldr	r3, [r3, #24]
 8007c3c:	4a4c      	ldr	r2, [pc, #304]	; (8007d70 <HAL_GPIO_Init+0x2b8>)
 8007c3e:	f043 0301 	orr.w	r3, r3, #1
 8007c42:	6193      	str	r3, [r2, #24]
 8007c44:	4b4a      	ldr	r3, [pc, #296]	; (8007d70 <HAL_GPIO_Init+0x2b8>)
 8007c46:	699b      	ldr	r3, [r3, #24]
 8007c48:	f003 0301 	and.w	r3, r3, #1
 8007c4c:	60bb      	str	r3, [r7, #8]
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	4a48      	ldr	r2, [pc, #288]	; (8007d74 <HAL_GPIO_Init+0x2bc>)
 8007c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c54:	089b      	lsrs	r3, r3, #2
 8007c56:	3302      	adds	r3, #2
 8007c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c5c:	60fb      	str	r3, [r7, #12]
 8007c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c60:	f003 0303 	and.w	r3, r3, #3
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	220f      	movs	r2, #15
 8007c68:	fa02 f303 	lsl.w	r3, r2, r3
 8007c6c:	43db      	mvns	r3, r3
 8007c6e:	68fa      	ldr	r2, [r7, #12]
 8007c70:	4013      	ands	r3, r2
 8007c72:	60fb      	str	r3, [r7, #12]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	4a40      	ldr	r2, [pc, #256]	; (8007d78 <HAL_GPIO_Init+0x2c0>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d013      	beq.n	8007ca4 <HAL_GPIO_Init+0x1ec>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	4a3f      	ldr	r2, [pc, #252]	; (8007d7c <HAL_GPIO_Init+0x2c4>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d00d      	beq.n	8007ca0 <HAL_GPIO_Init+0x1e8>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	4a3e      	ldr	r2, [pc, #248]	; (8007d80 <HAL_GPIO_Init+0x2c8>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d007      	beq.n	8007c9c <HAL_GPIO_Init+0x1e4>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	4a3d      	ldr	r2, [pc, #244]	; (8007d84 <HAL_GPIO_Init+0x2cc>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d101      	bne.n	8007c98 <HAL_GPIO_Init+0x1e0>
 8007c94:	2303      	movs	r3, #3
 8007c96:	e006      	b.n	8007ca6 <HAL_GPIO_Init+0x1ee>
 8007c98:	2304      	movs	r3, #4
 8007c9a:	e004      	b.n	8007ca6 <HAL_GPIO_Init+0x1ee>
 8007c9c:	2302      	movs	r3, #2
 8007c9e:	e002      	b.n	8007ca6 <HAL_GPIO_Init+0x1ee>
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	e000      	b.n	8007ca6 <HAL_GPIO_Init+0x1ee>
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ca8:	f002 0203 	and.w	r2, r2, #3
 8007cac:	0092      	lsls	r2, r2, #2
 8007cae:	4093      	lsls	r3, r2
 8007cb0:	68fa      	ldr	r2, [r7, #12]
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	60fb      	str	r3, [r7, #12]
 8007cb6:	492f      	ldr	r1, [pc, #188]	; (8007d74 <HAL_GPIO_Init+0x2bc>)
 8007cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cba:	089b      	lsrs	r3, r3, #2
 8007cbc:	3302      	adds	r3, #2
 8007cbe:	68fa      	ldr	r2, [r7, #12]
 8007cc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d006      	beq.n	8007cde <HAL_GPIO_Init+0x226>
 8007cd0:	4b2d      	ldr	r3, [pc, #180]	; (8007d88 <HAL_GPIO_Init+0x2d0>)
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	492c      	ldr	r1, [pc, #176]	; (8007d88 <HAL_GPIO_Init+0x2d0>)
 8007cd6:	69bb      	ldr	r3, [r7, #24]
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	600b      	str	r3, [r1, #0]
 8007cdc:	e006      	b.n	8007cec <HAL_GPIO_Init+0x234>
 8007cde:	4b2a      	ldr	r3, [pc, #168]	; (8007d88 <HAL_GPIO_Init+0x2d0>)
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	69bb      	ldr	r3, [r7, #24]
 8007ce4:	43db      	mvns	r3, r3
 8007ce6:	4928      	ldr	r1, [pc, #160]	; (8007d88 <HAL_GPIO_Init+0x2d0>)
 8007ce8:	4013      	ands	r3, r2
 8007cea:	600b      	str	r3, [r1, #0]
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d006      	beq.n	8007d06 <HAL_GPIO_Init+0x24e>
 8007cf8:	4b23      	ldr	r3, [pc, #140]	; (8007d88 <HAL_GPIO_Init+0x2d0>)
 8007cfa:	685a      	ldr	r2, [r3, #4]
 8007cfc:	4922      	ldr	r1, [pc, #136]	; (8007d88 <HAL_GPIO_Init+0x2d0>)
 8007cfe:	69bb      	ldr	r3, [r7, #24]
 8007d00:	4313      	orrs	r3, r2
 8007d02:	604b      	str	r3, [r1, #4]
 8007d04:	e006      	b.n	8007d14 <HAL_GPIO_Init+0x25c>
 8007d06:	4b20      	ldr	r3, [pc, #128]	; (8007d88 <HAL_GPIO_Init+0x2d0>)
 8007d08:	685a      	ldr	r2, [r3, #4]
 8007d0a:	69bb      	ldr	r3, [r7, #24]
 8007d0c:	43db      	mvns	r3, r3
 8007d0e:	491e      	ldr	r1, [pc, #120]	; (8007d88 <HAL_GPIO_Init+0x2d0>)
 8007d10:	4013      	ands	r3, r2
 8007d12:	604b      	str	r3, [r1, #4]
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d006      	beq.n	8007d2e <HAL_GPIO_Init+0x276>
 8007d20:	4b19      	ldr	r3, [pc, #100]	; (8007d88 <HAL_GPIO_Init+0x2d0>)
 8007d22:	689a      	ldr	r2, [r3, #8]
 8007d24:	4918      	ldr	r1, [pc, #96]	; (8007d88 <HAL_GPIO_Init+0x2d0>)
 8007d26:	69bb      	ldr	r3, [r7, #24]
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	608b      	str	r3, [r1, #8]
 8007d2c:	e006      	b.n	8007d3c <HAL_GPIO_Init+0x284>
 8007d2e:	4b16      	ldr	r3, [pc, #88]	; (8007d88 <HAL_GPIO_Init+0x2d0>)
 8007d30:	689a      	ldr	r2, [r3, #8]
 8007d32:	69bb      	ldr	r3, [r7, #24]
 8007d34:	43db      	mvns	r3, r3
 8007d36:	4914      	ldr	r1, [pc, #80]	; (8007d88 <HAL_GPIO_Init+0x2d0>)
 8007d38:	4013      	ands	r3, r2
 8007d3a:	608b      	str	r3, [r1, #8]
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d021      	beq.n	8007d8c <HAL_GPIO_Init+0x2d4>
 8007d48:	4b0f      	ldr	r3, [pc, #60]	; (8007d88 <HAL_GPIO_Init+0x2d0>)
 8007d4a:	68da      	ldr	r2, [r3, #12]
 8007d4c:	490e      	ldr	r1, [pc, #56]	; (8007d88 <HAL_GPIO_Init+0x2d0>)
 8007d4e:	69bb      	ldr	r3, [r7, #24]
 8007d50:	4313      	orrs	r3, r2
 8007d52:	60cb      	str	r3, [r1, #12]
 8007d54:	e021      	b.n	8007d9a <HAL_GPIO_Init+0x2e2>
 8007d56:	bf00      	nop
 8007d58:	10320000 	.word	0x10320000
 8007d5c:	10310000 	.word	0x10310000
 8007d60:	10220000 	.word	0x10220000
 8007d64:	10210000 	.word	0x10210000
 8007d68:	10120000 	.word	0x10120000
 8007d6c:	10110000 	.word	0x10110000
 8007d70:	40021000 	.word	0x40021000
 8007d74:	40010000 	.word	0x40010000
 8007d78:	40010800 	.word	0x40010800
 8007d7c:	40010c00 	.word	0x40010c00
 8007d80:	40011000 	.word	0x40011000
 8007d84:	40011400 	.word	0x40011400
 8007d88:	40010400 	.word	0x40010400
 8007d8c:	4b0b      	ldr	r3, [pc, #44]	; (8007dbc <HAL_GPIO_Init+0x304>)
 8007d8e:	68da      	ldr	r2, [r3, #12]
 8007d90:	69bb      	ldr	r3, [r7, #24]
 8007d92:	43db      	mvns	r3, r3
 8007d94:	4909      	ldr	r1, [pc, #36]	; (8007dbc <HAL_GPIO_Init+0x304>)
 8007d96:	4013      	ands	r3, r2
 8007d98:	60cb      	str	r3, [r1, #12]
 8007d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	627b      	str	r3, [r7, #36]	; 0x24
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da6:	fa22 f303 	lsr.w	r3, r2, r3
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	f47f ae8e 	bne.w	8007acc <HAL_GPIO_Init+0x14>
 8007db0:	bf00      	nop
 8007db2:	bf00      	nop
 8007db4:	372c      	adds	r7, #44	; 0x2c
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bc80      	pop	{r7}
 8007dba:	4770      	bx	lr
 8007dbc:	40010400 	.word	0x40010400

08007dc0 <HAL_GPIO_ReadPin>:
 8007dc0:	b480      	push	{r7}
 8007dc2:	b085      	sub	sp, #20
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	460b      	mov	r3, r1
 8007dca:	807b      	strh	r3, [r7, #2]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	689a      	ldr	r2, [r3, #8]
 8007dd0:	887b      	ldrh	r3, [r7, #2]
 8007dd2:	4013      	ands	r3, r2
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d002      	beq.n	8007dde <HAL_GPIO_ReadPin+0x1e>
 8007dd8:	2301      	movs	r3, #1
 8007dda:	73fb      	strb	r3, [r7, #15]
 8007ddc:	e001      	b.n	8007de2 <HAL_GPIO_ReadPin+0x22>
 8007dde:	2300      	movs	r3, #0
 8007de0:	73fb      	strb	r3, [r7, #15]
 8007de2:	7bfb      	ldrb	r3, [r7, #15]
 8007de4:	4618      	mov	r0, r3
 8007de6:	3714      	adds	r7, #20
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bc80      	pop	{r7}
 8007dec:	4770      	bx	lr

08007dee <HAL_GPIO_WritePin>:
 8007dee:	b480      	push	{r7}
 8007df0:	b083      	sub	sp, #12
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6078      	str	r0, [r7, #4]
 8007df6:	460b      	mov	r3, r1
 8007df8:	807b      	strh	r3, [r7, #2]
 8007dfa:	4613      	mov	r3, r2
 8007dfc:	707b      	strb	r3, [r7, #1]
 8007dfe:	787b      	ldrb	r3, [r7, #1]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d003      	beq.n	8007e0c <HAL_GPIO_WritePin+0x1e>
 8007e04:	887a      	ldrh	r2, [r7, #2]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	611a      	str	r2, [r3, #16]
 8007e0a:	e003      	b.n	8007e14 <HAL_GPIO_WritePin+0x26>
 8007e0c:	887b      	ldrh	r3, [r7, #2]
 8007e0e:	041a      	lsls	r2, r3, #16
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	611a      	str	r2, [r3, #16]
 8007e14:	bf00      	nop
 8007e16:	370c      	adds	r7, #12
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bc80      	pop	{r7}
 8007e1c:	4770      	bx	lr
	...

08007e20 <HAL_GPIO_EXTI_IRQHandler>:
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b082      	sub	sp, #8
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	4603      	mov	r3, r0
 8007e28:	80fb      	strh	r3, [r7, #6]
 8007e2a:	4b08      	ldr	r3, [pc, #32]	; (8007e4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007e2c:	695a      	ldr	r2, [r3, #20]
 8007e2e:	88fb      	ldrh	r3, [r7, #6]
 8007e30:	4013      	ands	r3, r2
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d006      	beq.n	8007e44 <HAL_GPIO_EXTI_IRQHandler+0x24>
 8007e36:	4a05      	ldr	r2, [pc, #20]	; (8007e4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007e38:	88fb      	ldrh	r3, [r7, #6]
 8007e3a:	6153      	str	r3, [r2, #20]
 8007e3c:	88fb      	ldrh	r3, [r7, #6]
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f7fc feee 	bl	8004c20 <HAL_GPIO_EXTI_Callback>
 8007e44:	bf00      	nop
 8007e46:	3708      	adds	r7, #8
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	40010400 	.word	0x40010400

08007e50 <HAL_I2C_Init>:
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d101      	bne.n	8007e62 <HAL_I2C_Init+0x12>
 8007e5e:	2301      	movs	r3, #1
 8007e60:	e12b      	b.n	80080ba <HAL_I2C_Init+0x26a>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d106      	bne.n	8007e7c <HAL_I2C_Init+0x2c>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f7fe f8a0 	bl	8005fbc <HAL_I2C_MspInit>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2224      	movs	r2, #36	; 0x24
 8007e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f022 0201 	bic.w	r2, r2, #1
 8007e92:	601a      	str	r2, [r3, #0]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007ea2:	601a      	str	r2, [r3, #0]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007eb2:	601a      	str	r2, [r3, #0]
 8007eb4:	f001 f918 	bl	80090e8 <HAL_RCC_GetPCLK1Freq>
 8007eb8:	60f8      	str	r0, [r7, #12]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	4a81      	ldr	r2, [pc, #516]	; (80080c4 <HAL_I2C_Init+0x274>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d807      	bhi.n	8007ed4 <HAL_I2C_Init+0x84>
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	4a80      	ldr	r2, [pc, #512]	; (80080c8 <HAL_I2C_Init+0x278>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	bf94      	ite	ls
 8007ecc:	2301      	movls	r3, #1
 8007ece:	2300      	movhi	r3, #0
 8007ed0:	b2db      	uxtb	r3, r3
 8007ed2:	e006      	b.n	8007ee2 <HAL_I2C_Init+0x92>
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	4a7d      	ldr	r2, [pc, #500]	; (80080cc <HAL_I2C_Init+0x27c>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	bf94      	ite	ls
 8007edc:	2301      	movls	r3, #1
 8007ede:	2300      	movhi	r3, #0
 8007ee0:	b2db      	uxtb	r3, r3
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d001      	beq.n	8007eea <HAL_I2C_Init+0x9a>
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e0e7      	b.n	80080ba <HAL_I2C_Init+0x26a>
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	4a78      	ldr	r2, [pc, #480]	; (80080d0 <HAL_I2C_Init+0x280>)
 8007eee:	fba2 2303 	umull	r2, r3, r2, r3
 8007ef2:	0c9b      	lsrs	r3, r3, #18
 8007ef4:	60bb      	str	r3, [r7, #8]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	68ba      	ldr	r2, [r7, #8]
 8007f06:	430a      	orrs	r2, r1
 8007f08:	605a      	str	r2, [r3, #4]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	6a1b      	ldr	r3, [r3, #32]
 8007f10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	4a6a      	ldr	r2, [pc, #424]	; (80080c4 <HAL_I2C_Init+0x274>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d802      	bhi.n	8007f24 <HAL_I2C_Init+0xd4>
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	3301      	adds	r3, #1
 8007f22:	e009      	b.n	8007f38 <HAL_I2C_Init+0xe8>
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007f2a:	fb02 f303 	mul.w	r3, r2, r3
 8007f2e:	4a69      	ldr	r2, [pc, #420]	; (80080d4 <HAL_I2C_Init+0x284>)
 8007f30:	fba2 2303 	umull	r2, r3, r2, r3
 8007f34:	099b      	lsrs	r3, r3, #6
 8007f36:	3301      	adds	r3, #1
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	6812      	ldr	r2, [r2, #0]
 8007f3c:	430b      	orrs	r3, r1
 8007f3e:	6213      	str	r3, [r2, #32]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	69db      	ldr	r3, [r3, #28]
 8007f46:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007f4a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	495c      	ldr	r1, [pc, #368]	; (80080c4 <HAL_I2C_Init+0x274>)
 8007f54:	428b      	cmp	r3, r1
 8007f56:	d819      	bhi.n	8007f8c <HAL_I2C_Init+0x13c>
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	1e59      	subs	r1, r3, #1
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	005b      	lsls	r3, r3, #1
 8007f62:	fbb1 f3f3 	udiv	r3, r1, r3
 8007f66:	1c59      	adds	r1, r3, #1
 8007f68:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007f6c:	400b      	ands	r3, r1
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d00a      	beq.n	8007f88 <HAL_I2C_Init+0x138>
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	1e59      	subs	r1, r3, #1
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	005b      	lsls	r3, r3, #1
 8007f7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8007f80:	3301      	adds	r3, #1
 8007f82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f86:	e051      	b.n	800802c <HAL_I2C_Init+0x1dc>
 8007f88:	2304      	movs	r3, #4
 8007f8a:	e04f      	b.n	800802c <HAL_I2C_Init+0x1dc>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	689b      	ldr	r3, [r3, #8]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d111      	bne.n	8007fb8 <HAL_I2C_Init+0x168>
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	1e58      	subs	r0, r3, #1
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6859      	ldr	r1, [r3, #4]
 8007f9c:	460b      	mov	r3, r1
 8007f9e:	005b      	lsls	r3, r3, #1
 8007fa0:	440b      	add	r3, r1
 8007fa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	bf0c      	ite	eq
 8007fb0:	2301      	moveq	r3, #1
 8007fb2:	2300      	movne	r3, #0
 8007fb4:	b2db      	uxtb	r3, r3
 8007fb6:	e012      	b.n	8007fde <HAL_I2C_Init+0x18e>
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	1e58      	subs	r0, r3, #1
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6859      	ldr	r1, [r3, #4]
 8007fc0:	460b      	mov	r3, r1
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	440b      	add	r3, r1
 8007fc6:	0099      	lsls	r1, r3, #2
 8007fc8:	440b      	add	r3, r1
 8007fca:	fbb0 f3f3 	udiv	r3, r0, r3
 8007fce:	3301      	adds	r3, #1
 8007fd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	bf0c      	ite	eq
 8007fd8:	2301      	moveq	r3, #1
 8007fda:	2300      	movne	r3, #0
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d001      	beq.n	8007fe6 <HAL_I2C_Init+0x196>
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e022      	b.n	800802c <HAL_I2C_Init+0x1dc>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d10e      	bne.n	800800c <HAL_I2C_Init+0x1bc>
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	1e58      	subs	r0, r3, #1
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6859      	ldr	r1, [r3, #4]
 8007ff6:	460b      	mov	r3, r1
 8007ff8:	005b      	lsls	r3, r3, #1
 8007ffa:	440b      	add	r3, r1
 8007ffc:	fbb0 f3f3 	udiv	r3, r0, r3
 8008000:	3301      	adds	r3, #1
 8008002:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008006:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800800a:	e00f      	b.n	800802c <HAL_I2C_Init+0x1dc>
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	1e58      	subs	r0, r3, #1
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6859      	ldr	r1, [r3, #4]
 8008014:	460b      	mov	r3, r1
 8008016:	009b      	lsls	r3, r3, #2
 8008018:	440b      	add	r3, r1
 800801a:	0099      	lsls	r1, r3, #2
 800801c:	440b      	add	r3, r1
 800801e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008022:	3301      	adds	r3, #1
 8008024:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008028:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800802c:	6879      	ldr	r1, [r7, #4]
 800802e:	6809      	ldr	r1, [r1, #0]
 8008030:	4313      	orrs	r3, r2
 8008032:	61cb      	str	r3, [r1, #28]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	69da      	ldr	r2, [r3, #28]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6a1b      	ldr	r3, [r3, #32]
 8008046:	431a      	orrs	r2, r3
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	430a      	orrs	r2, r1
 800804e:	601a      	str	r2, [r3, #0]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800805a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	6911      	ldr	r1, [r2, #16]
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	68d2      	ldr	r2, [r2, #12]
 8008066:	4311      	orrs	r1, r2
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	6812      	ldr	r2, [r2, #0]
 800806c:	430b      	orrs	r3, r1
 800806e:	6093      	str	r3, [r2, #8]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	68db      	ldr	r3, [r3, #12]
 8008076:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	695a      	ldr	r2, [r3, #20]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	699b      	ldr	r3, [r3, #24]
 8008082:	431a      	orrs	r2, r3
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	430a      	orrs	r2, r1
 800808a:	60da      	str	r2, [r3, #12]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	681a      	ldr	r2, [r3, #0]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f042 0201 	orr.w	r2, r2, #1
 800809a:	601a      	str	r2, [r3, #0]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2200      	movs	r2, #0
 80080a0:	641a      	str	r2, [r3, #64]	; 0x40
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2220      	movs	r2, #32
 80080a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2200      	movs	r2, #0
 80080ae:	631a      	str	r2, [r3, #48]	; 0x30
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2200      	movs	r2, #0
 80080b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80080b8:	2300      	movs	r3, #0
 80080ba:	4618      	mov	r0, r3
 80080bc:	3710      	adds	r7, #16
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
 80080c2:	bf00      	nop
 80080c4:	000186a0 	.word	0x000186a0
 80080c8:	001e847f 	.word	0x001e847f
 80080cc:	003d08ff 	.word	0x003d08ff
 80080d0:	431bde83 	.word	0x431bde83
 80080d4:	10624dd3 	.word	0x10624dd3

080080d8 <HAL_I2C_Master_Transmit>:
 80080d8:	b580      	push	{r7, lr}
 80080da:	b088      	sub	sp, #32
 80080dc:	af02      	add	r7, sp, #8
 80080de:	60f8      	str	r0, [r7, #12]
 80080e0:	607a      	str	r2, [r7, #4]
 80080e2:	461a      	mov	r2, r3
 80080e4:	460b      	mov	r3, r1
 80080e6:	817b      	strh	r3, [r7, #10]
 80080e8:	4613      	mov	r3, r2
 80080ea:	813b      	strh	r3, [r7, #8]
 80080ec:	f7fe f9c4 	bl	8006478 <HAL_GetTick>
 80080f0:	6178      	str	r0, [r7, #20]
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080f8:	b2db      	uxtb	r3, r3
 80080fa:	2b20      	cmp	r3, #32
 80080fc:	f040 80e0 	bne.w	80082c0 <HAL_I2C_Master_Transmit+0x1e8>
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	9300      	str	r3, [sp, #0]
 8008104:	2319      	movs	r3, #25
 8008106:	2201      	movs	r2, #1
 8008108:	4970      	ldr	r1, [pc, #448]	; (80082cc <HAL_I2C_Master_Transmit+0x1f4>)
 800810a:	68f8      	ldr	r0, [r7, #12]
 800810c:	f000 fa92 	bl	8008634 <I2C_WaitOnFlagUntilTimeout>
 8008110:	4603      	mov	r3, r0
 8008112:	2b00      	cmp	r3, #0
 8008114:	d001      	beq.n	800811a <HAL_I2C_Master_Transmit+0x42>
 8008116:	2302      	movs	r3, #2
 8008118:	e0d3      	b.n	80082c2 <HAL_I2C_Master_Transmit+0x1ea>
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008120:	2b01      	cmp	r3, #1
 8008122:	d101      	bne.n	8008128 <HAL_I2C_Master_Transmit+0x50>
 8008124:	2302      	movs	r3, #2
 8008126:	e0cc      	b.n	80082c2 <HAL_I2C_Master_Transmit+0x1ea>
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2201      	movs	r2, #1
 800812c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f003 0301 	and.w	r3, r3, #1
 800813a:	2b01      	cmp	r3, #1
 800813c:	d007      	beq.n	800814e <HAL_I2C_Master_Transmit+0x76>
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	681a      	ldr	r2, [r3, #0]
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f042 0201 	orr.w	r2, r2, #1
 800814c:	601a      	str	r2, [r3, #0]
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800815c:	601a      	str	r2, [r3, #0]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2221      	movs	r2, #33	; 0x21
 8008162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2210      	movs	r2, #16
 800816a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2200      	movs	r2, #0
 8008172:	641a      	str	r2, [r3, #64]	; 0x40
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	625a      	str	r2, [r3, #36]	; 0x24
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	893a      	ldrh	r2, [r7, #8]
 800817e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008184:	b29a      	uxth	r2, r3
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	851a      	strh	r2, [r3, #40]	; 0x28
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	4a50      	ldr	r2, [pc, #320]	; (80082d0 <HAL_I2C_Master_Transmit+0x1f8>)
 800818e:	62da      	str	r2, [r3, #44]	; 0x2c
 8008190:	8979      	ldrh	r1, [r7, #10]
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	6a3a      	ldr	r2, [r7, #32]
 8008196:	68f8      	ldr	r0, [r7, #12]
 8008198:	f000 f9ca 	bl	8008530 <I2C_MasterRequestWrite>
 800819c:	4603      	mov	r3, r0
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d001      	beq.n	80081a6 <HAL_I2C_Master_Transmit+0xce>
 80081a2:	2301      	movs	r3, #1
 80081a4:	e08d      	b.n	80082c2 <HAL_I2C_Master_Transmit+0x1ea>
 80081a6:	2300      	movs	r3, #0
 80081a8:	613b      	str	r3, [r7, #16]
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	695b      	ldr	r3, [r3, #20]
 80081b0:	613b      	str	r3, [r7, #16]
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	699b      	ldr	r3, [r3, #24]
 80081b8:	613b      	str	r3, [r7, #16]
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	e066      	b.n	800828c <HAL_I2C_Master_Transmit+0x1b4>
 80081be:	697a      	ldr	r2, [r7, #20]
 80081c0:	6a39      	ldr	r1, [r7, #32]
 80081c2:	68f8      	ldr	r0, [r7, #12]
 80081c4:	f000 fb0c 	bl	80087e0 <I2C_WaitOnTXEFlagUntilTimeout>
 80081c8:	4603      	mov	r3, r0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d00d      	beq.n	80081ea <HAL_I2C_Master_Transmit+0x112>
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d2:	2b04      	cmp	r3, #4
 80081d4:	d107      	bne.n	80081e6 <HAL_I2C_Master_Transmit+0x10e>
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081e4:	601a      	str	r2, [r3, #0]
 80081e6:	2301      	movs	r3, #1
 80081e8:	e06b      	b.n	80082c2 <HAL_I2C_Master_Transmit+0x1ea>
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ee:	781a      	ldrb	r2, [r3, #0]
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	611a      	str	r2, [r3, #16]
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fa:	1c5a      	adds	r2, r3, #1
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	625a      	str	r2, [r3, #36]	; 0x24
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008204:	b29b      	uxth	r3, r3
 8008206:	3b01      	subs	r3, #1
 8008208:	b29a      	uxth	r2, r3
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008212:	3b01      	subs	r3, #1
 8008214:	b29a      	uxth	r2, r3
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	851a      	strh	r2, [r3, #40]	; 0x28
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	695b      	ldr	r3, [r3, #20]
 8008220:	f003 0304 	and.w	r3, r3, #4
 8008224:	2b04      	cmp	r3, #4
 8008226:	d11b      	bne.n	8008260 <HAL_I2C_Master_Transmit+0x188>
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800822c:	2b00      	cmp	r3, #0
 800822e:	d017      	beq.n	8008260 <HAL_I2C_Master_Transmit+0x188>
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008234:	781a      	ldrb	r2, [r3, #0]
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	611a      	str	r2, [r3, #16]
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008240:	1c5a      	adds	r2, r3, #1
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	625a      	str	r2, [r3, #36]	; 0x24
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800824a:	b29b      	uxth	r3, r3
 800824c:	3b01      	subs	r3, #1
 800824e:	b29a      	uxth	r2, r3
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008258:	3b01      	subs	r3, #1
 800825a:	b29a      	uxth	r2, r3
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	851a      	strh	r2, [r3, #40]	; 0x28
 8008260:	697a      	ldr	r2, [r7, #20]
 8008262:	6a39      	ldr	r1, [r7, #32]
 8008264:	68f8      	ldr	r0, [r7, #12]
 8008266:	f000 fafc 	bl	8008862 <I2C_WaitOnBTFFlagUntilTimeout>
 800826a:	4603      	mov	r3, r0
 800826c:	2b00      	cmp	r3, #0
 800826e:	d00d      	beq.n	800828c <HAL_I2C_Master_Transmit+0x1b4>
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008274:	2b04      	cmp	r3, #4
 8008276:	d107      	bne.n	8008288 <HAL_I2C_Master_Transmit+0x1b0>
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008286:	601a      	str	r2, [r3, #0]
 8008288:	2301      	movs	r3, #1
 800828a:	e01a      	b.n	80082c2 <HAL_I2C_Master_Transmit+0x1ea>
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008290:	2b00      	cmp	r3, #0
 8008292:	d194      	bne.n	80081be <HAL_I2C_Master_Transmit+0xe6>
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	681a      	ldr	r2, [r3, #0]
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082a2:	601a      	str	r2, [r3, #0]
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2220      	movs	r2, #32
 80082a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2200      	movs	r2, #0
 80082b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2200      	movs	r2, #0
 80082b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80082bc:	2300      	movs	r3, #0
 80082be:	e000      	b.n	80082c2 <HAL_I2C_Master_Transmit+0x1ea>
 80082c0:	2302      	movs	r3, #2
 80082c2:	4618      	mov	r0, r3
 80082c4:	3718      	adds	r7, #24
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
 80082ca:	bf00      	nop
 80082cc:	00100002 	.word	0x00100002
 80082d0:	ffff0000 	.word	0xffff0000

080082d4 <HAL_I2C_IsDeviceReady>:
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b08a      	sub	sp, #40	; 0x28
 80082d8:	af02      	add	r7, sp, #8
 80082da:	60f8      	str	r0, [r7, #12]
 80082dc:	607a      	str	r2, [r7, #4]
 80082de:	603b      	str	r3, [r7, #0]
 80082e0:	460b      	mov	r3, r1
 80082e2:	817b      	strh	r3, [r7, #10]
 80082e4:	f7fe f8c8 	bl	8006478 <HAL_GetTick>
 80082e8:	61f8      	str	r0, [r7, #28]
 80082ea:	2301      	movs	r3, #1
 80082ec:	61bb      	str	r3, [r7, #24]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082f4:	b2db      	uxtb	r3, r3
 80082f6:	2b20      	cmp	r3, #32
 80082f8:	f040 8111 	bne.w	800851e <HAL_I2C_IsDeviceReady+0x24a>
 80082fc:	69fb      	ldr	r3, [r7, #28]
 80082fe:	9300      	str	r3, [sp, #0]
 8008300:	2319      	movs	r3, #25
 8008302:	2201      	movs	r2, #1
 8008304:	4988      	ldr	r1, [pc, #544]	; (8008528 <HAL_I2C_IsDeviceReady+0x254>)
 8008306:	68f8      	ldr	r0, [r7, #12]
 8008308:	f000 f994 	bl	8008634 <I2C_WaitOnFlagUntilTimeout>
 800830c:	4603      	mov	r3, r0
 800830e:	2b00      	cmp	r3, #0
 8008310:	d001      	beq.n	8008316 <HAL_I2C_IsDeviceReady+0x42>
 8008312:	2302      	movs	r3, #2
 8008314:	e104      	b.n	8008520 <HAL_I2C_IsDeviceReady+0x24c>
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800831c:	2b01      	cmp	r3, #1
 800831e:	d101      	bne.n	8008324 <HAL_I2C_IsDeviceReady+0x50>
 8008320:	2302      	movs	r3, #2
 8008322:	e0fd      	b.n	8008520 <HAL_I2C_IsDeviceReady+0x24c>
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2201      	movs	r2, #1
 8008328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f003 0301 	and.w	r3, r3, #1
 8008336:	2b01      	cmp	r3, #1
 8008338:	d007      	beq.n	800834a <HAL_I2C_IsDeviceReady+0x76>
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f042 0201 	orr.w	r2, r2, #1
 8008348:	601a      	str	r2, [r3, #0]
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	681a      	ldr	r2, [r3, #0]
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008358:	601a      	str	r2, [r3, #0]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2224      	movs	r2, #36	; 0x24
 800835e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2200      	movs	r2, #0
 8008366:	641a      	str	r2, [r3, #64]	; 0x40
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	4a70      	ldr	r2, [pc, #448]	; (800852c <HAL_I2C_IsDeviceReady+0x258>)
 800836c:	62da      	str	r2, [r3, #44]	; 0x2c
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	681a      	ldr	r2, [r3, #0]
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800837c:	601a      	str	r2, [r3, #0]
 800837e:	69fb      	ldr	r3, [r7, #28]
 8008380:	9300      	str	r3, [sp, #0]
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	2200      	movs	r2, #0
 8008386:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800838a:	68f8      	ldr	r0, [r7, #12]
 800838c:	f000 f952 	bl	8008634 <I2C_WaitOnFlagUntilTimeout>
 8008390:	4603      	mov	r3, r0
 8008392:	2b00      	cmp	r3, #0
 8008394:	d00d      	beq.n	80083b2 <HAL_I2C_IsDeviceReady+0xde>
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083a4:	d103      	bne.n	80083ae <HAL_I2C_IsDeviceReady+0xda>
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083ac:	641a      	str	r2, [r3, #64]	; 0x40
 80083ae:	2303      	movs	r3, #3
 80083b0:	e0b6      	b.n	8008520 <HAL_I2C_IsDeviceReady+0x24c>
 80083b2:	897b      	ldrh	r3, [r7, #10]
 80083b4:	b2db      	uxtb	r3, r3
 80083b6:	461a      	mov	r2, r3
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80083c0:	611a      	str	r2, [r3, #16]
 80083c2:	f7fe f859 	bl	8006478 <HAL_GetTick>
 80083c6:	61f8      	str	r0, [r7, #28]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	695b      	ldr	r3, [r3, #20]
 80083ce:	f003 0302 	and.w	r3, r3, #2
 80083d2:	2b02      	cmp	r3, #2
 80083d4:	bf0c      	ite	eq
 80083d6:	2301      	moveq	r3, #1
 80083d8:	2300      	movne	r3, #0
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	75fb      	strb	r3, [r7, #23]
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	695b      	ldr	r3, [r3, #20]
 80083e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083ec:	bf0c      	ite	eq
 80083ee:	2301      	moveq	r3, #1
 80083f0:	2300      	movne	r3, #0
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	75bb      	strb	r3, [r7, #22]
 80083f6:	e025      	b.n	8008444 <HAL_I2C_IsDeviceReady+0x170>
 80083f8:	f7fe f83e 	bl	8006478 <HAL_GetTick>
 80083fc:	4602      	mov	r2, r0
 80083fe:	69fb      	ldr	r3, [r7, #28]
 8008400:	1ad3      	subs	r3, r2, r3
 8008402:	683a      	ldr	r2, [r7, #0]
 8008404:	429a      	cmp	r2, r3
 8008406:	d302      	bcc.n	800840e <HAL_I2C_IsDeviceReady+0x13a>
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d103      	bne.n	8008416 <HAL_I2C_IsDeviceReady+0x142>
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	22a0      	movs	r2, #160	; 0xa0
 8008412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	695b      	ldr	r3, [r3, #20]
 800841c:	f003 0302 	and.w	r3, r3, #2
 8008420:	2b02      	cmp	r3, #2
 8008422:	bf0c      	ite	eq
 8008424:	2301      	moveq	r3, #1
 8008426:	2300      	movne	r3, #0
 8008428:	b2db      	uxtb	r3, r3
 800842a:	75fb      	strb	r3, [r7, #23]
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	695b      	ldr	r3, [r3, #20]
 8008432:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008436:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800843a:	bf0c      	ite	eq
 800843c:	2301      	moveq	r3, #1
 800843e:	2300      	movne	r3, #0
 8008440:	b2db      	uxtb	r3, r3
 8008442:	75bb      	strb	r3, [r7, #22]
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800844a:	b2db      	uxtb	r3, r3
 800844c:	2ba0      	cmp	r3, #160	; 0xa0
 800844e:	d005      	beq.n	800845c <HAL_I2C_IsDeviceReady+0x188>
 8008450:	7dfb      	ldrb	r3, [r7, #23]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d102      	bne.n	800845c <HAL_I2C_IsDeviceReady+0x188>
 8008456:	7dbb      	ldrb	r3, [r7, #22]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d0cd      	beq.n	80083f8 <HAL_I2C_IsDeviceReady+0x124>
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2220      	movs	r2, #32
 8008460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	695b      	ldr	r3, [r3, #20]
 800846a:	f003 0302 	and.w	r3, r3, #2
 800846e:	2b02      	cmp	r3, #2
 8008470:	d129      	bne.n	80084c6 <HAL_I2C_IsDeviceReady+0x1f2>
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	681a      	ldr	r2, [r3, #0]
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008480:	601a      	str	r2, [r3, #0]
 8008482:	2300      	movs	r3, #0
 8008484:	613b      	str	r3, [r7, #16]
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	695b      	ldr	r3, [r3, #20]
 800848c:	613b      	str	r3, [r7, #16]
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	699b      	ldr	r3, [r3, #24]
 8008494:	613b      	str	r3, [r7, #16]
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	69fb      	ldr	r3, [r7, #28]
 800849a:	9300      	str	r3, [sp, #0]
 800849c:	2319      	movs	r3, #25
 800849e:	2201      	movs	r2, #1
 80084a0:	4921      	ldr	r1, [pc, #132]	; (8008528 <HAL_I2C_IsDeviceReady+0x254>)
 80084a2:	68f8      	ldr	r0, [r7, #12]
 80084a4:	f000 f8c6 	bl	8008634 <I2C_WaitOnFlagUntilTimeout>
 80084a8:	4603      	mov	r3, r0
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d001      	beq.n	80084b2 <HAL_I2C_IsDeviceReady+0x1de>
 80084ae:	2301      	movs	r3, #1
 80084b0:	e036      	b.n	8008520 <HAL_I2C_IsDeviceReady+0x24c>
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2220      	movs	r2, #32
 80084b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2200      	movs	r2, #0
 80084be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80084c2:	2300      	movs	r3, #0
 80084c4:	e02c      	b.n	8008520 <HAL_I2C_IsDeviceReady+0x24c>
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	681a      	ldr	r2, [r3, #0]
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084d4:	601a      	str	r2, [r3, #0]
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80084de:	615a      	str	r2, [r3, #20]
 80084e0:	69fb      	ldr	r3, [r7, #28]
 80084e2:	9300      	str	r3, [sp, #0]
 80084e4:	2319      	movs	r3, #25
 80084e6:	2201      	movs	r2, #1
 80084e8:	490f      	ldr	r1, [pc, #60]	; (8008528 <HAL_I2C_IsDeviceReady+0x254>)
 80084ea:	68f8      	ldr	r0, [r7, #12]
 80084ec:	f000 f8a2 	bl	8008634 <I2C_WaitOnFlagUntilTimeout>
 80084f0:	4603      	mov	r3, r0
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d001      	beq.n	80084fa <HAL_I2C_IsDeviceReady+0x226>
 80084f6:	2301      	movs	r3, #1
 80084f8:	e012      	b.n	8008520 <HAL_I2C_IsDeviceReady+0x24c>
 80084fa:	69bb      	ldr	r3, [r7, #24]
 80084fc:	3301      	adds	r3, #1
 80084fe:	61bb      	str	r3, [r7, #24]
 8008500:	69ba      	ldr	r2, [r7, #24]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	429a      	cmp	r2, r3
 8008506:	f4ff af32 	bcc.w	800836e <HAL_I2C_IsDeviceReady+0x9a>
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2220      	movs	r2, #32
 800850e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	2200      	movs	r2, #0
 8008516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800851a:	2301      	movs	r3, #1
 800851c:	e000      	b.n	8008520 <HAL_I2C_IsDeviceReady+0x24c>
 800851e:	2302      	movs	r3, #2
 8008520:	4618      	mov	r0, r3
 8008522:	3720      	adds	r7, #32
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}
 8008528:	00100002 	.word	0x00100002
 800852c:	ffff0000 	.word	0xffff0000

08008530 <I2C_MasterRequestWrite>:
 8008530:	b580      	push	{r7, lr}
 8008532:	b088      	sub	sp, #32
 8008534:	af02      	add	r7, sp, #8
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	607a      	str	r2, [r7, #4]
 800853a:	603b      	str	r3, [r7, #0]
 800853c:	460b      	mov	r3, r1
 800853e:	817b      	strh	r3, [r7, #10]
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008544:	617b      	str	r3, [r7, #20]
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	2b08      	cmp	r3, #8
 800854a:	d006      	beq.n	800855a <I2C_MasterRequestWrite+0x2a>
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	2b01      	cmp	r3, #1
 8008550:	d003      	beq.n	800855a <I2C_MasterRequestWrite+0x2a>
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008558:	d108      	bne.n	800856c <I2C_MasterRequestWrite+0x3c>
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	681a      	ldr	r2, [r3, #0]
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008568:	601a      	str	r2, [r3, #0]
 800856a:	e00b      	b.n	8008584 <I2C_MasterRequestWrite+0x54>
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008570:	2b12      	cmp	r3, #18
 8008572:	d107      	bne.n	8008584 <I2C_MasterRequestWrite+0x54>
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	681a      	ldr	r2, [r3, #0]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008582:	601a      	str	r2, [r3, #0]
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	9300      	str	r3, [sp, #0]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2200      	movs	r2, #0
 800858c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008590:	68f8      	ldr	r0, [r7, #12]
 8008592:	f000 f84f 	bl	8008634 <I2C_WaitOnFlagUntilTimeout>
 8008596:	4603      	mov	r3, r0
 8008598:	2b00      	cmp	r3, #0
 800859a:	d00d      	beq.n	80085b8 <I2C_MasterRequestWrite+0x88>
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085aa:	d103      	bne.n	80085b4 <I2C_MasterRequestWrite+0x84>
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085b2:	641a      	str	r2, [r3, #64]	; 0x40
 80085b4:	2303      	movs	r3, #3
 80085b6:	e035      	b.n	8008624 <I2C_MasterRequestWrite+0xf4>
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	691b      	ldr	r3, [r3, #16]
 80085bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80085c0:	d108      	bne.n	80085d4 <I2C_MasterRequestWrite+0xa4>
 80085c2:	897b      	ldrh	r3, [r7, #10]
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	461a      	mov	r2, r3
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80085d0:	611a      	str	r2, [r3, #16]
 80085d2:	e01b      	b.n	800860c <I2C_MasterRequestWrite+0xdc>
 80085d4:	897b      	ldrh	r3, [r7, #10]
 80085d6:	11db      	asrs	r3, r3, #7
 80085d8:	b2db      	uxtb	r3, r3
 80085da:	f003 0306 	and.w	r3, r3, #6
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	f063 030f 	orn	r3, r3, #15
 80085e4:	b2da      	uxtb	r2, r3
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	611a      	str	r2, [r3, #16]
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	687a      	ldr	r2, [r7, #4]
 80085f0:	490e      	ldr	r1, [pc, #56]	; (800862c <I2C_MasterRequestWrite+0xfc>)
 80085f2:	68f8      	ldr	r0, [r7, #12]
 80085f4:	f000 f875 	bl	80086e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80085f8:	4603      	mov	r3, r0
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d001      	beq.n	8008602 <I2C_MasterRequestWrite+0xd2>
 80085fe:	2301      	movs	r3, #1
 8008600:	e010      	b.n	8008624 <I2C_MasterRequestWrite+0xf4>
 8008602:	897b      	ldrh	r3, [r7, #10]
 8008604:	b2da      	uxtb	r2, r3
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	611a      	str	r2, [r3, #16]
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	4907      	ldr	r1, [pc, #28]	; (8008630 <I2C_MasterRequestWrite+0x100>)
 8008612:	68f8      	ldr	r0, [r7, #12]
 8008614:	f000 f865 	bl	80086e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008618:	4603      	mov	r3, r0
 800861a:	2b00      	cmp	r3, #0
 800861c:	d001      	beq.n	8008622 <I2C_MasterRequestWrite+0xf2>
 800861e:	2301      	movs	r3, #1
 8008620:	e000      	b.n	8008624 <I2C_MasterRequestWrite+0xf4>
 8008622:	2300      	movs	r3, #0
 8008624:	4618      	mov	r0, r3
 8008626:	3718      	adds	r7, #24
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}
 800862c:	00010008 	.word	0x00010008
 8008630:	00010002 	.word	0x00010002

08008634 <I2C_WaitOnFlagUntilTimeout>:
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	60f8      	str	r0, [r7, #12]
 800863c:	60b9      	str	r1, [r7, #8]
 800863e:	603b      	str	r3, [r7, #0]
 8008640:	4613      	mov	r3, r2
 8008642:	71fb      	strb	r3, [r7, #7]
 8008644:	e025      	b.n	8008692 <I2C_WaitOnFlagUntilTimeout+0x5e>
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800864c:	d021      	beq.n	8008692 <I2C_WaitOnFlagUntilTimeout+0x5e>
 800864e:	f7fd ff13 	bl	8006478 <HAL_GetTick>
 8008652:	4602      	mov	r2, r0
 8008654:	69bb      	ldr	r3, [r7, #24]
 8008656:	1ad3      	subs	r3, r2, r3
 8008658:	683a      	ldr	r2, [r7, #0]
 800865a:	429a      	cmp	r2, r3
 800865c:	d302      	bcc.n	8008664 <I2C_WaitOnFlagUntilTimeout+0x30>
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d116      	bne.n	8008692 <I2C_WaitOnFlagUntilTimeout+0x5e>
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2200      	movs	r2, #0
 8008668:	631a      	str	r2, [r3, #48]	; 0x30
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2220      	movs	r2, #32
 800866e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2200      	movs	r2, #0
 8008676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800867e:	f043 0220 	orr.w	r2, r3, #32
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	641a      	str	r2, [r3, #64]	; 0x40
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2200      	movs	r2, #0
 800868a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800868e:	2301      	movs	r3, #1
 8008690:	e023      	b.n	80086da <I2C_WaitOnFlagUntilTimeout+0xa6>
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	0c1b      	lsrs	r3, r3, #16
 8008696:	b2db      	uxtb	r3, r3
 8008698:	2b01      	cmp	r3, #1
 800869a:	d10d      	bne.n	80086b8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	695b      	ldr	r3, [r3, #20]
 80086a2:	43da      	mvns	r2, r3
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	4013      	ands	r3, r2
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	bf0c      	ite	eq
 80086ae:	2301      	moveq	r3, #1
 80086b0:	2300      	movne	r3, #0
 80086b2:	b2db      	uxtb	r3, r3
 80086b4:	461a      	mov	r2, r3
 80086b6:	e00c      	b.n	80086d2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	699b      	ldr	r3, [r3, #24]
 80086be:	43da      	mvns	r2, r3
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	4013      	ands	r3, r2
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	bf0c      	ite	eq
 80086ca:	2301      	moveq	r3, #1
 80086cc:	2300      	movne	r3, #0
 80086ce:	b2db      	uxtb	r3, r3
 80086d0:	461a      	mov	r2, r3
 80086d2:	79fb      	ldrb	r3, [r7, #7]
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d0b6      	beq.n	8008646 <I2C_WaitOnFlagUntilTimeout+0x12>
 80086d8:	2300      	movs	r3, #0
 80086da:	4618      	mov	r0, r3
 80086dc:	3710      	adds	r7, #16
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}

080086e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 80086e2:	b580      	push	{r7, lr}
 80086e4:	b084      	sub	sp, #16
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	60f8      	str	r0, [r7, #12]
 80086ea:	60b9      	str	r1, [r7, #8]
 80086ec:	607a      	str	r2, [r7, #4]
 80086ee:	603b      	str	r3, [r7, #0]
 80086f0:	e051      	b.n	8008796 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	695b      	ldr	r3, [r3, #20]
 80086f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008700:	d123      	bne.n	800874a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	681a      	ldr	r2, [r3, #0]
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008710:	601a      	str	r2, [r3, #0]
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800871a:	615a      	str	r2, [r3, #20]
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2200      	movs	r2, #0
 8008720:	631a      	str	r2, [r3, #48]	; 0x30
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2220      	movs	r2, #32
 8008726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2200      	movs	r2, #0
 800872e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008736:	f043 0204 	orr.w	r2, r3, #4
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	641a      	str	r2, [r3, #64]	; 0x40
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2200      	movs	r2, #0
 8008742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008746:	2301      	movs	r3, #1
 8008748:	e046      	b.n	80087d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008750:	d021      	beq.n	8008796 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8008752:	f7fd fe91 	bl	8006478 <HAL_GetTick>
 8008756:	4602      	mov	r2, r0
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	1ad3      	subs	r3, r2, r3
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	429a      	cmp	r2, r3
 8008760:	d302      	bcc.n	8008768 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d116      	bne.n	8008796 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2200      	movs	r2, #0
 800876c:	631a      	str	r2, [r3, #48]	; 0x30
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2220      	movs	r2, #32
 8008772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2200      	movs	r2, #0
 800877a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008782:	f043 0220 	orr.w	r2, r3, #32
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	641a      	str	r2, [r3, #64]	; 0x40
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2200      	movs	r2, #0
 800878e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008792:	2301      	movs	r3, #1
 8008794:	e020      	b.n	80087d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	0c1b      	lsrs	r3, r3, #16
 800879a:	b2db      	uxtb	r3, r3
 800879c:	2b01      	cmp	r3, #1
 800879e:	d10c      	bne.n	80087ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	695b      	ldr	r3, [r3, #20]
 80087a6:	43da      	mvns	r2, r3
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	4013      	ands	r3, r2
 80087ac:	b29b      	uxth	r3, r3
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	bf14      	ite	ne
 80087b2:	2301      	movne	r3, #1
 80087b4:	2300      	moveq	r3, #0
 80087b6:	b2db      	uxtb	r3, r3
 80087b8:	e00b      	b.n	80087d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	699b      	ldr	r3, [r3, #24]
 80087c0:	43da      	mvns	r2, r3
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	4013      	ands	r3, r2
 80087c6:	b29b      	uxth	r3, r3
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	bf14      	ite	ne
 80087cc:	2301      	movne	r3, #1
 80087ce:	2300      	moveq	r3, #0
 80087d0:	b2db      	uxtb	r3, r3
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d18d      	bne.n	80086f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 80087d6:	2300      	movs	r3, #0
 80087d8:	4618      	mov	r0, r3
 80087da:	3710      	adds	r7, #16
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <I2C_WaitOnTXEFlagUntilTimeout>:
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	60f8      	str	r0, [r7, #12]
 80087e8:	60b9      	str	r1, [r7, #8]
 80087ea:	607a      	str	r2, [r7, #4]
 80087ec:	e02d      	b.n	800884a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 80087ee:	68f8      	ldr	r0, [r7, #12]
 80087f0:	f000 f878 	bl	80088e4 <I2C_IsAcknowledgeFailed>
 80087f4:	4603      	mov	r3, r0
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d001      	beq.n	80087fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
 80087fa:	2301      	movs	r3, #1
 80087fc:	e02d      	b.n	800885a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008804:	d021      	beq.n	800884a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 8008806:	f7fd fe37 	bl	8006478 <HAL_GetTick>
 800880a:	4602      	mov	r2, r0
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	1ad3      	subs	r3, r2, r3
 8008810:	68ba      	ldr	r2, [r7, #8]
 8008812:	429a      	cmp	r2, r3
 8008814:	d302      	bcc.n	800881c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d116      	bne.n	800884a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2200      	movs	r2, #0
 8008820:	631a      	str	r2, [r3, #48]	; 0x30
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2220      	movs	r2, #32
 8008826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2200      	movs	r2, #0
 800882e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008836:	f043 0220 	orr.w	r2, r3, #32
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	641a      	str	r2, [r3, #64]	; 0x40
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2200      	movs	r2, #0
 8008842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008846:	2301      	movs	r3, #1
 8008848:	e007      	b.n	800885a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	695b      	ldr	r3, [r3, #20]
 8008850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008854:	2b80      	cmp	r3, #128	; 0x80
 8008856:	d1ca      	bne.n	80087ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
 8008858:	2300      	movs	r3, #0
 800885a:	4618      	mov	r0, r3
 800885c:	3710      	adds	r7, #16
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}

08008862 <I2C_WaitOnBTFFlagUntilTimeout>:
 8008862:	b580      	push	{r7, lr}
 8008864:	b084      	sub	sp, #16
 8008866:	af00      	add	r7, sp, #0
 8008868:	60f8      	str	r0, [r7, #12]
 800886a:	60b9      	str	r1, [r7, #8]
 800886c:	607a      	str	r2, [r7, #4]
 800886e:	e02d      	b.n	80088cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8008870:	68f8      	ldr	r0, [r7, #12]
 8008872:	f000 f837 	bl	80088e4 <I2C_IsAcknowledgeFailed>
 8008876:	4603      	mov	r3, r0
 8008878:	2b00      	cmp	r3, #0
 800887a:	d001      	beq.n	8008880 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
 800887c:	2301      	movs	r3, #1
 800887e:	e02d      	b.n	80088dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008886:	d021      	beq.n	80088cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8008888:	f7fd fdf6 	bl	8006478 <HAL_GetTick>
 800888c:	4602      	mov	r2, r0
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	1ad3      	subs	r3, r2, r3
 8008892:	68ba      	ldr	r2, [r7, #8]
 8008894:	429a      	cmp	r2, r3
 8008896:	d302      	bcc.n	800889e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d116      	bne.n	80088cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2200      	movs	r2, #0
 80088a2:	631a      	str	r2, [r3, #48]	; 0x30
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2220      	movs	r2, #32
 80088a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2200      	movs	r2, #0
 80088b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088b8:	f043 0220 	orr.w	r2, r3, #32
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	641a      	str	r2, [r3, #64]	; 0x40
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	2200      	movs	r2, #0
 80088c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80088c8:	2301      	movs	r3, #1
 80088ca:	e007      	b.n	80088dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	695b      	ldr	r3, [r3, #20]
 80088d2:	f003 0304 	and.w	r3, r3, #4
 80088d6:	2b04      	cmp	r3, #4
 80088d8:	d1ca      	bne.n	8008870 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
 80088da:	2300      	movs	r3, #0
 80088dc:	4618      	mov	r0, r3
 80088de:	3710      	adds	r7, #16
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <I2C_IsAcknowledgeFailed>:
 80088e4:	b480      	push	{r7}
 80088e6:	b083      	sub	sp, #12
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	695b      	ldr	r3, [r3, #20]
 80088f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088fa:	d11b      	bne.n	8008934 <I2C_IsAcknowledgeFailed+0x50>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008904:	615a      	str	r2, [r3, #20]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2200      	movs	r2, #0
 800890a:	631a      	str	r2, [r3, #48]	; 0x30
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2220      	movs	r2, #32
 8008910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2200      	movs	r2, #0
 8008918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008920:	f043 0204 	orr.w	r2, r3, #4
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	641a      	str	r2, [r3, #64]	; 0x40
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2200      	movs	r2, #0
 800892c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008930:	2301      	movs	r3, #1
 8008932:	e000      	b.n	8008936 <I2C_IsAcknowledgeFailed+0x52>
 8008934:	2300      	movs	r3, #0
 8008936:	4618      	mov	r0, r3
 8008938:	370c      	adds	r7, #12
 800893a:	46bd      	mov	sp, r7
 800893c:	bc80      	pop	{r7}
 800893e:	4770      	bx	lr

08008940 <HAL_RCC_OscConfig>:
 8008940:	b580      	push	{r7, lr}
 8008942:	b086      	sub	sp, #24
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d101      	bne.n	8008952 <HAL_RCC_OscConfig+0x12>
 800894e:	2301      	movs	r3, #1
 8008950:	e272      	b.n	8008e38 <HAL_RCC_OscConfig+0x4f8>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f003 0301 	and.w	r3, r3, #1
 800895a:	2b00      	cmp	r3, #0
 800895c:	f000 8087 	beq.w	8008a6e <HAL_RCC_OscConfig+0x12e>
 8008960:	4b92      	ldr	r3, [pc, #584]	; (8008bac <HAL_RCC_OscConfig+0x26c>)
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	f003 030c 	and.w	r3, r3, #12
 8008968:	2b04      	cmp	r3, #4
 800896a:	d00c      	beq.n	8008986 <HAL_RCC_OscConfig+0x46>
 800896c:	4b8f      	ldr	r3, [pc, #572]	; (8008bac <HAL_RCC_OscConfig+0x26c>)
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	f003 030c 	and.w	r3, r3, #12
 8008974:	2b08      	cmp	r3, #8
 8008976:	d112      	bne.n	800899e <HAL_RCC_OscConfig+0x5e>
 8008978:	4b8c      	ldr	r3, [pc, #560]	; (8008bac <HAL_RCC_OscConfig+0x26c>)
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008984:	d10b      	bne.n	800899e <HAL_RCC_OscConfig+0x5e>
 8008986:	4b89      	ldr	r3, [pc, #548]	; (8008bac <HAL_RCC_OscConfig+0x26c>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800898e:	2b00      	cmp	r3, #0
 8008990:	d06c      	beq.n	8008a6c <HAL_RCC_OscConfig+0x12c>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d168      	bne.n	8008a6c <HAL_RCC_OscConfig+0x12c>
 800899a:	2301      	movs	r3, #1
 800899c:	e24c      	b.n	8008e38 <HAL_RCC_OscConfig+0x4f8>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089a6:	d106      	bne.n	80089b6 <HAL_RCC_OscConfig+0x76>
 80089a8:	4b80      	ldr	r3, [pc, #512]	; (8008bac <HAL_RCC_OscConfig+0x26c>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a7f      	ldr	r2, [pc, #508]	; (8008bac <HAL_RCC_OscConfig+0x26c>)
 80089ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089b2:	6013      	str	r3, [r2, #0]
 80089b4:	e02e      	b.n	8008a14 <HAL_RCC_OscConfig+0xd4>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d10c      	bne.n	80089d8 <HAL_RCC_OscConfig+0x98>
 80089be:	4b7b      	ldr	r3, [pc, #492]	; (8008bac <HAL_RCC_OscConfig+0x26c>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a7a      	ldr	r2, [pc, #488]	; (8008bac <HAL_RCC_OscConfig+0x26c>)
 80089c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80089c8:	6013      	str	r3, [r2, #0]
 80089ca:	4b78      	ldr	r3, [pc, #480]	; (8008bac <HAL_RCC_OscConfig+0x26c>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a77      	ldr	r2, [pc, #476]	; (8008bac <HAL_RCC_OscConfig+0x26c>)
 80089d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80089d4:	6013      	str	r3, [r2, #0]
 80089d6:	e01d      	b.n	8008a14 <HAL_RCC_OscConfig+0xd4>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80089e0:	d10c      	bne.n	80089fc <HAL_RCC_OscConfig+0xbc>
 80089e2:	4b72      	ldr	r3, [pc, #456]	; (8008bac <HAL_RCC_OscConfig+0x26c>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4a71      	ldr	r2, [pc, #452]	; (8008bac <HAL_RCC_OscConfig+0x26c>)
 80089e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80089ec:	6013      	str	r3, [r2, #0]
 80089ee:	4b6f      	ldr	r3, [pc, #444]	; (8008bac <HAL_RCC_OscConfig+0x26c>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4a6e      	ldr	r2, [pc, #440]	; (8008bac <HAL_RCC_OscConfig+0x26c>)
 80089f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089f8:	6013      	str	r3, [r2, #0]
 80089fa:	e00b      	b.n	8008a14 <HAL_RCC_OscConfig+0xd4>
 80089fc:	4b6b      	ldr	r3, [pc, #428]	; (8008bac <HAL_RCC_OscConfig+0x26c>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a6a      	ldr	r2, [pc, #424]	; (8008bac <HAL_RCC_OscConfig+0x26c>)
 8008a02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a06:	6013      	str	r3, [r2, #0]
 8008a08:	4b68      	ldr	r3, [pc, #416]	; (8008bac <HAL_RCC_OscConfig+0x26c>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a67      	ldr	r2, [pc, #412]	; (8008bac <HAL_RCC_OscConfig+0x26c>)
 8008a0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008a12:	6013      	str	r3, [r2, #0]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d013      	beq.n	8008a44 <HAL_RCC_OscConfig+0x104>
 8008a1c:	f7fd fd2c 	bl	8006478 <HAL_GetTick>
 8008a20:	6138      	str	r0, [r7, #16]
 8008a22:	e008      	b.n	8008a36 <HAL_RCC_OscConfig+0xf6>
 8008a24:	f7fd fd28 	bl	8006478 <HAL_GetTick>
 8008a28:	4602      	mov	r2, r0
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	1ad3      	subs	r3, r2, r3
 8008a2e:	2b64      	cmp	r3, #100	; 0x64
 8008a30:	d901      	bls.n	8008a36 <HAL_RCC_OscConfig+0xf6>
 8008a32:	2303      	movs	r3, #3
 8008a34:	e200      	b.n	8008e38 <HAL_RCC_OscConfig+0x4f8>
 8008a36:	4b5d      	ldr	r3, [pc, #372]	; (8008bac <HAL_RCC_OscConfig+0x26c>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d0f0      	beq.n	8008a24 <HAL_RCC_OscConfig+0xe4>
 8008a42:	e014      	b.n	8008a6e <HAL_RCC_OscConfig+0x12e>
 8008a44:	f7fd fd18 	bl	8006478 <HAL_GetTick>
 8008a48:	6138      	str	r0, [r7, #16]
 8008a4a:	e008      	b.n	8008a5e <HAL_RCC_OscConfig+0x11e>
 8008a4c:	f7fd fd14 	bl	8006478 <HAL_GetTick>
 8008a50:	4602      	mov	r2, r0
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	1ad3      	subs	r3, r2, r3
 8008a56:	2b64      	cmp	r3, #100	; 0x64
 8008a58:	d901      	bls.n	8008a5e <HAL_RCC_OscConfig+0x11e>
 8008a5a:	2303      	movs	r3, #3
 8008a5c:	e1ec      	b.n	8008e38 <HAL_RCC_OscConfig+0x4f8>
 8008a5e:	4b53      	ldr	r3, [pc, #332]	; (8008bac <HAL_RCC_OscConfig+0x26c>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d1f0      	bne.n	8008a4c <HAL_RCC_OscConfig+0x10c>
 8008a6a:	e000      	b.n	8008a6e <HAL_RCC_OscConfig+0x12e>
 8008a6c:	bf00      	nop
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f003 0302 	and.w	r3, r3, #2
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d063      	beq.n	8008b42 <HAL_RCC_OscConfig+0x202>
 8008a7a:	4b4c      	ldr	r3, [pc, #304]	; (8008bac <HAL_RCC_OscConfig+0x26c>)
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	f003 030c 	and.w	r3, r3, #12
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d00b      	beq.n	8008a9e <HAL_RCC_OscConfig+0x15e>
 8008a86:	4b49      	ldr	r3, [pc, #292]	; (8008bac <HAL_RCC_OscConfig+0x26c>)
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	f003 030c 	and.w	r3, r3, #12
 8008a8e:	2b08      	cmp	r3, #8
 8008a90:	d11c      	bne.n	8008acc <HAL_RCC_OscConfig+0x18c>
 8008a92:	4b46      	ldr	r3, [pc, #280]	; (8008bac <HAL_RCC_OscConfig+0x26c>)
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d116      	bne.n	8008acc <HAL_RCC_OscConfig+0x18c>
 8008a9e:	4b43      	ldr	r3, [pc, #268]	; (8008bac <HAL_RCC_OscConfig+0x26c>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f003 0302 	and.w	r3, r3, #2
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d005      	beq.n	8008ab6 <HAL_RCC_OscConfig+0x176>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	691b      	ldr	r3, [r3, #16]
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	d001      	beq.n	8008ab6 <HAL_RCC_OscConfig+0x176>
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	e1c0      	b.n	8008e38 <HAL_RCC_OscConfig+0x4f8>
 8008ab6:	4b3d      	ldr	r3, [pc, #244]	; (8008bac <HAL_RCC_OscConfig+0x26c>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	695b      	ldr	r3, [r3, #20]
 8008ac2:	00db      	lsls	r3, r3, #3
 8008ac4:	4939      	ldr	r1, [pc, #228]	; (8008bac <HAL_RCC_OscConfig+0x26c>)
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	600b      	str	r3, [r1, #0]
 8008aca:	e03a      	b.n	8008b42 <HAL_RCC_OscConfig+0x202>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	691b      	ldr	r3, [r3, #16]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d020      	beq.n	8008b16 <HAL_RCC_OscConfig+0x1d6>
 8008ad4:	4b36      	ldr	r3, [pc, #216]	; (8008bb0 <HAL_RCC_OscConfig+0x270>)
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	601a      	str	r2, [r3, #0]
 8008ada:	f7fd fccd 	bl	8006478 <HAL_GetTick>
 8008ade:	6138      	str	r0, [r7, #16]
 8008ae0:	e008      	b.n	8008af4 <HAL_RCC_OscConfig+0x1b4>
 8008ae2:	f7fd fcc9 	bl	8006478 <HAL_GetTick>
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	1ad3      	subs	r3, r2, r3
 8008aec:	2b02      	cmp	r3, #2
 8008aee:	d901      	bls.n	8008af4 <HAL_RCC_OscConfig+0x1b4>
 8008af0:	2303      	movs	r3, #3
 8008af2:	e1a1      	b.n	8008e38 <HAL_RCC_OscConfig+0x4f8>
 8008af4:	4b2d      	ldr	r3, [pc, #180]	; (8008bac <HAL_RCC_OscConfig+0x26c>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f003 0302 	and.w	r3, r3, #2
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d0f0      	beq.n	8008ae2 <HAL_RCC_OscConfig+0x1a2>
 8008b00:	4b2a      	ldr	r3, [pc, #168]	; (8008bac <HAL_RCC_OscConfig+0x26c>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	695b      	ldr	r3, [r3, #20]
 8008b0c:	00db      	lsls	r3, r3, #3
 8008b0e:	4927      	ldr	r1, [pc, #156]	; (8008bac <HAL_RCC_OscConfig+0x26c>)
 8008b10:	4313      	orrs	r3, r2
 8008b12:	600b      	str	r3, [r1, #0]
 8008b14:	e015      	b.n	8008b42 <HAL_RCC_OscConfig+0x202>
 8008b16:	4b26      	ldr	r3, [pc, #152]	; (8008bb0 <HAL_RCC_OscConfig+0x270>)
 8008b18:	2200      	movs	r2, #0
 8008b1a:	601a      	str	r2, [r3, #0]
 8008b1c:	f7fd fcac 	bl	8006478 <HAL_GetTick>
 8008b20:	6138      	str	r0, [r7, #16]
 8008b22:	e008      	b.n	8008b36 <HAL_RCC_OscConfig+0x1f6>
 8008b24:	f7fd fca8 	bl	8006478 <HAL_GetTick>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	1ad3      	subs	r3, r2, r3
 8008b2e:	2b02      	cmp	r3, #2
 8008b30:	d901      	bls.n	8008b36 <HAL_RCC_OscConfig+0x1f6>
 8008b32:	2303      	movs	r3, #3
 8008b34:	e180      	b.n	8008e38 <HAL_RCC_OscConfig+0x4f8>
 8008b36:	4b1d      	ldr	r3, [pc, #116]	; (8008bac <HAL_RCC_OscConfig+0x26c>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f003 0302 	and.w	r3, r3, #2
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d1f0      	bne.n	8008b24 <HAL_RCC_OscConfig+0x1e4>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f003 0308 	and.w	r3, r3, #8
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d03a      	beq.n	8008bc4 <HAL_RCC_OscConfig+0x284>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	699b      	ldr	r3, [r3, #24]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d019      	beq.n	8008b8a <HAL_RCC_OscConfig+0x24a>
 8008b56:	4b17      	ldr	r3, [pc, #92]	; (8008bb4 <HAL_RCC_OscConfig+0x274>)
 8008b58:	2201      	movs	r2, #1
 8008b5a:	601a      	str	r2, [r3, #0]
 8008b5c:	f7fd fc8c 	bl	8006478 <HAL_GetTick>
 8008b60:	6138      	str	r0, [r7, #16]
 8008b62:	e008      	b.n	8008b76 <HAL_RCC_OscConfig+0x236>
 8008b64:	f7fd fc88 	bl	8006478 <HAL_GetTick>
 8008b68:	4602      	mov	r2, r0
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	1ad3      	subs	r3, r2, r3
 8008b6e:	2b02      	cmp	r3, #2
 8008b70:	d901      	bls.n	8008b76 <HAL_RCC_OscConfig+0x236>
 8008b72:	2303      	movs	r3, #3
 8008b74:	e160      	b.n	8008e38 <HAL_RCC_OscConfig+0x4f8>
 8008b76:	4b0d      	ldr	r3, [pc, #52]	; (8008bac <HAL_RCC_OscConfig+0x26c>)
 8008b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b7a:	f003 0302 	and.w	r3, r3, #2
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d0f0      	beq.n	8008b64 <HAL_RCC_OscConfig+0x224>
 8008b82:	2001      	movs	r0, #1
 8008b84:	f000 fad8 	bl	8009138 <RCC_Delay>
 8008b88:	e01c      	b.n	8008bc4 <HAL_RCC_OscConfig+0x284>
 8008b8a:	4b0a      	ldr	r3, [pc, #40]	; (8008bb4 <HAL_RCC_OscConfig+0x274>)
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	601a      	str	r2, [r3, #0]
 8008b90:	f7fd fc72 	bl	8006478 <HAL_GetTick>
 8008b94:	6138      	str	r0, [r7, #16]
 8008b96:	e00f      	b.n	8008bb8 <HAL_RCC_OscConfig+0x278>
 8008b98:	f7fd fc6e 	bl	8006478 <HAL_GetTick>
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	1ad3      	subs	r3, r2, r3
 8008ba2:	2b02      	cmp	r3, #2
 8008ba4:	d908      	bls.n	8008bb8 <HAL_RCC_OscConfig+0x278>
 8008ba6:	2303      	movs	r3, #3
 8008ba8:	e146      	b.n	8008e38 <HAL_RCC_OscConfig+0x4f8>
 8008baa:	bf00      	nop
 8008bac:	40021000 	.word	0x40021000
 8008bb0:	42420000 	.word	0x42420000
 8008bb4:	42420480 	.word	0x42420480
 8008bb8:	4b92      	ldr	r3, [pc, #584]	; (8008e04 <HAL_RCC_OscConfig+0x4c4>)
 8008bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bbc:	f003 0302 	and.w	r3, r3, #2
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d1e9      	bne.n	8008b98 <HAL_RCC_OscConfig+0x258>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f003 0304 	and.w	r3, r3, #4
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	f000 80a6 	beq.w	8008d1e <HAL_RCC_OscConfig+0x3de>
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	75fb      	strb	r3, [r7, #23]
 8008bd6:	4b8b      	ldr	r3, [pc, #556]	; (8008e04 <HAL_RCC_OscConfig+0x4c4>)
 8008bd8:	69db      	ldr	r3, [r3, #28]
 8008bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d10d      	bne.n	8008bfe <HAL_RCC_OscConfig+0x2be>
 8008be2:	4b88      	ldr	r3, [pc, #544]	; (8008e04 <HAL_RCC_OscConfig+0x4c4>)
 8008be4:	69db      	ldr	r3, [r3, #28]
 8008be6:	4a87      	ldr	r2, [pc, #540]	; (8008e04 <HAL_RCC_OscConfig+0x4c4>)
 8008be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bec:	61d3      	str	r3, [r2, #28]
 8008bee:	4b85      	ldr	r3, [pc, #532]	; (8008e04 <HAL_RCC_OscConfig+0x4c4>)
 8008bf0:	69db      	ldr	r3, [r3, #28]
 8008bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008bf6:	60bb      	str	r3, [r7, #8]
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	75fb      	strb	r3, [r7, #23]
 8008bfe:	4b82      	ldr	r3, [pc, #520]	; (8008e08 <HAL_RCC_OscConfig+0x4c8>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d118      	bne.n	8008c3c <HAL_RCC_OscConfig+0x2fc>
 8008c0a:	4b7f      	ldr	r3, [pc, #508]	; (8008e08 <HAL_RCC_OscConfig+0x4c8>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4a7e      	ldr	r2, [pc, #504]	; (8008e08 <HAL_RCC_OscConfig+0x4c8>)
 8008c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c14:	6013      	str	r3, [r2, #0]
 8008c16:	f7fd fc2f 	bl	8006478 <HAL_GetTick>
 8008c1a:	6138      	str	r0, [r7, #16]
 8008c1c:	e008      	b.n	8008c30 <HAL_RCC_OscConfig+0x2f0>
 8008c1e:	f7fd fc2b 	bl	8006478 <HAL_GetTick>
 8008c22:	4602      	mov	r2, r0
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	1ad3      	subs	r3, r2, r3
 8008c28:	2b64      	cmp	r3, #100	; 0x64
 8008c2a:	d901      	bls.n	8008c30 <HAL_RCC_OscConfig+0x2f0>
 8008c2c:	2303      	movs	r3, #3
 8008c2e:	e103      	b.n	8008e38 <HAL_RCC_OscConfig+0x4f8>
 8008c30:	4b75      	ldr	r3, [pc, #468]	; (8008e08 <HAL_RCC_OscConfig+0x4c8>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d0f0      	beq.n	8008c1e <HAL_RCC_OscConfig+0x2de>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	68db      	ldr	r3, [r3, #12]
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d106      	bne.n	8008c52 <HAL_RCC_OscConfig+0x312>
 8008c44:	4b6f      	ldr	r3, [pc, #444]	; (8008e04 <HAL_RCC_OscConfig+0x4c4>)
 8008c46:	6a1b      	ldr	r3, [r3, #32]
 8008c48:	4a6e      	ldr	r2, [pc, #440]	; (8008e04 <HAL_RCC_OscConfig+0x4c4>)
 8008c4a:	f043 0301 	orr.w	r3, r3, #1
 8008c4e:	6213      	str	r3, [r2, #32]
 8008c50:	e02d      	b.n	8008cae <HAL_RCC_OscConfig+0x36e>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	68db      	ldr	r3, [r3, #12]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d10c      	bne.n	8008c74 <HAL_RCC_OscConfig+0x334>
 8008c5a:	4b6a      	ldr	r3, [pc, #424]	; (8008e04 <HAL_RCC_OscConfig+0x4c4>)
 8008c5c:	6a1b      	ldr	r3, [r3, #32]
 8008c5e:	4a69      	ldr	r2, [pc, #420]	; (8008e04 <HAL_RCC_OscConfig+0x4c4>)
 8008c60:	f023 0301 	bic.w	r3, r3, #1
 8008c64:	6213      	str	r3, [r2, #32]
 8008c66:	4b67      	ldr	r3, [pc, #412]	; (8008e04 <HAL_RCC_OscConfig+0x4c4>)
 8008c68:	6a1b      	ldr	r3, [r3, #32]
 8008c6a:	4a66      	ldr	r2, [pc, #408]	; (8008e04 <HAL_RCC_OscConfig+0x4c4>)
 8008c6c:	f023 0304 	bic.w	r3, r3, #4
 8008c70:	6213      	str	r3, [r2, #32]
 8008c72:	e01c      	b.n	8008cae <HAL_RCC_OscConfig+0x36e>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	68db      	ldr	r3, [r3, #12]
 8008c78:	2b05      	cmp	r3, #5
 8008c7a:	d10c      	bne.n	8008c96 <HAL_RCC_OscConfig+0x356>
 8008c7c:	4b61      	ldr	r3, [pc, #388]	; (8008e04 <HAL_RCC_OscConfig+0x4c4>)
 8008c7e:	6a1b      	ldr	r3, [r3, #32]
 8008c80:	4a60      	ldr	r2, [pc, #384]	; (8008e04 <HAL_RCC_OscConfig+0x4c4>)
 8008c82:	f043 0304 	orr.w	r3, r3, #4
 8008c86:	6213      	str	r3, [r2, #32]
 8008c88:	4b5e      	ldr	r3, [pc, #376]	; (8008e04 <HAL_RCC_OscConfig+0x4c4>)
 8008c8a:	6a1b      	ldr	r3, [r3, #32]
 8008c8c:	4a5d      	ldr	r2, [pc, #372]	; (8008e04 <HAL_RCC_OscConfig+0x4c4>)
 8008c8e:	f043 0301 	orr.w	r3, r3, #1
 8008c92:	6213      	str	r3, [r2, #32]
 8008c94:	e00b      	b.n	8008cae <HAL_RCC_OscConfig+0x36e>
 8008c96:	4b5b      	ldr	r3, [pc, #364]	; (8008e04 <HAL_RCC_OscConfig+0x4c4>)
 8008c98:	6a1b      	ldr	r3, [r3, #32]
 8008c9a:	4a5a      	ldr	r2, [pc, #360]	; (8008e04 <HAL_RCC_OscConfig+0x4c4>)
 8008c9c:	f023 0301 	bic.w	r3, r3, #1
 8008ca0:	6213      	str	r3, [r2, #32]
 8008ca2:	4b58      	ldr	r3, [pc, #352]	; (8008e04 <HAL_RCC_OscConfig+0x4c4>)
 8008ca4:	6a1b      	ldr	r3, [r3, #32]
 8008ca6:	4a57      	ldr	r2, [pc, #348]	; (8008e04 <HAL_RCC_OscConfig+0x4c4>)
 8008ca8:	f023 0304 	bic.w	r3, r3, #4
 8008cac:	6213      	str	r3, [r2, #32]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	68db      	ldr	r3, [r3, #12]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d015      	beq.n	8008ce2 <HAL_RCC_OscConfig+0x3a2>
 8008cb6:	f7fd fbdf 	bl	8006478 <HAL_GetTick>
 8008cba:	6138      	str	r0, [r7, #16]
 8008cbc:	e00a      	b.n	8008cd4 <HAL_RCC_OscConfig+0x394>
 8008cbe:	f7fd fbdb 	bl	8006478 <HAL_GetTick>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	1ad3      	subs	r3, r2, r3
 8008cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d901      	bls.n	8008cd4 <HAL_RCC_OscConfig+0x394>
 8008cd0:	2303      	movs	r3, #3
 8008cd2:	e0b1      	b.n	8008e38 <HAL_RCC_OscConfig+0x4f8>
 8008cd4:	4b4b      	ldr	r3, [pc, #300]	; (8008e04 <HAL_RCC_OscConfig+0x4c4>)
 8008cd6:	6a1b      	ldr	r3, [r3, #32]
 8008cd8:	f003 0302 	and.w	r3, r3, #2
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d0ee      	beq.n	8008cbe <HAL_RCC_OscConfig+0x37e>
 8008ce0:	e014      	b.n	8008d0c <HAL_RCC_OscConfig+0x3cc>
 8008ce2:	f7fd fbc9 	bl	8006478 <HAL_GetTick>
 8008ce6:	6138      	str	r0, [r7, #16]
 8008ce8:	e00a      	b.n	8008d00 <HAL_RCC_OscConfig+0x3c0>
 8008cea:	f7fd fbc5 	bl	8006478 <HAL_GetTick>
 8008cee:	4602      	mov	r2, r0
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	1ad3      	subs	r3, r2, r3
 8008cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d901      	bls.n	8008d00 <HAL_RCC_OscConfig+0x3c0>
 8008cfc:	2303      	movs	r3, #3
 8008cfe:	e09b      	b.n	8008e38 <HAL_RCC_OscConfig+0x4f8>
 8008d00:	4b40      	ldr	r3, [pc, #256]	; (8008e04 <HAL_RCC_OscConfig+0x4c4>)
 8008d02:	6a1b      	ldr	r3, [r3, #32]
 8008d04:	f003 0302 	and.w	r3, r3, #2
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d1ee      	bne.n	8008cea <HAL_RCC_OscConfig+0x3aa>
 8008d0c:	7dfb      	ldrb	r3, [r7, #23]
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	d105      	bne.n	8008d1e <HAL_RCC_OscConfig+0x3de>
 8008d12:	4b3c      	ldr	r3, [pc, #240]	; (8008e04 <HAL_RCC_OscConfig+0x4c4>)
 8008d14:	69db      	ldr	r3, [r3, #28]
 8008d16:	4a3b      	ldr	r2, [pc, #236]	; (8008e04 <HAL_RCC_OscConfig+0x4c4>)
 8008d18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d1c:	61d3      	str	r3, [r2, #28]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	69db      	ldr	r3, [r3, #28]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	f000 8087 	beq.w	8008e36 <HAL_RCC_OscConfig+0x4f6>
 8008d28:	4b36      	ldr	r3, [pc, #216]	; (8008e04 <HAL_RCC_OscConfig+0x4c4>)
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	f003 030c 	and.w	r3, r3, #12
 8008d30:	2b08      	cmp	r3, #8
 8008d32:	d061      	beq.n	8008df8 <HAL_RCC_OscConfig+0x4b8>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	69db      	ldr	r3, [r3, #28]
 8008d38:	2b02      	cmp	r3, #2
 8008d3a:	d146      	bne.n	8008dca <HAL_RCC_OscConfig+0x48a>
 8008d3c:	4b33      	ldr	r3, [pc, #204]	; (8008e0c <HAL_RCC_OscConfig+0x4cc>)
 8008d3e:	2200      	movs	r2, #0
 8008d40:	601a      	str	r2, [r3, #0]
 8008d42:	f7fd fb99 	bl	8006478 <HAL_GetTick>
 8008d46:	6138      	str	r0, [r7, #16]
 8008d48:	e008      	b.n	8008d5c <HAL_RCC_OscConfig+0x41c>
 8008d4a:	f7fd fb95 	bl	8006478 <HAL_GetTick>
 8008d4e:	4602      	mov	r2, r0
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	1ad3      	subs	r3, r2, r3
 8008d54:	2b02      	cmp	r3, #2
 8008d56:	d901      	bls.n	8008d5c <HAL_RCC_OscConfig+0x41c>
 8008d58:	2303      	movs	r3, #3
 8008d5a:	e06d      	b.n	8008e38 <HAL_RCC_OscConfig+0x4f8>
 8008d5c:	4b29      	ldr	r3, [pc, #164]	; (8008e04 <HAL_RCC_OscConfig+0x4c4>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d1f0      	bne.n	8008d4a <HAL_RCC_OscConfig+0x40a>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6a1b      	ldr	r3, [r3, #32]
 8008d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d70:	d108      	bne.n	8008d84 <HAL_RCC_OscConfig+0x444>
 8008d72:	4b24      	ldr	r3, [pc, #144]	; (8008e04 <HAL_RCC_OscConfig+0x4c4>)
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	689b      	ldr	r3, [r3, #8]
 8008d7e:	4921      	ldr	r1, [pc, #132]	; (8008e04 <HAL_RCC_OscConfig+0x4c4>)
 8008d80:	4313      	orrs	r3, r2
 8008d82:	604b      	str	r3, [r1, #4]
 8008d84:	4b1f      	ldr	r3, [pc, #124]	; (8008e04 <HAL_RCC_OscConfig+0x4c4>)
 8008d86:	685b      	ldr	r3, [r3, #4]
 8008d88:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6a19      	ldr	r1, [r3, #32]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d94:	430b      	orrs	r3, r1
 8008d96:	491b      	ldr	r1, [pc, #108]	; (8008e04 <HAL_RCC_OscConfig+0x4c4>)
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	604b      	str	r3, [r1, #4]
 8008d9c:	4b1b      	ldr	r3, [pc, #108]	; (8008e0c <HAL_RCC_OscConfig+0x4cc>)
 8008d9e:	2201      	movs	r2, #1
 8008da0:	601a      	str	r2, [r3, #0]
 8008da2:	f7fd fb69 	bl	8006478 <HAL_GetTick>
 8008da6:	6138      	str	r0, [r7, #16]
 8008da8:	e008      	b.n	8008dbc <HAL_RCC_OscConfig+0x47c>
 8008daa:	f7fd fb65 	bl	8006478 <HAL_GetTick>
 8008dae:	4602      	mov	r2, r0
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	1ad3      	subs	r3, r2, r3
 8008db4:	2b02      	cmp	r3, #2
 8008db6:	d901      	bls.n	8008dbc <HAL_RCC_OscConfig+0x47c>
 8008db8:	2303      	movs	r3, #3
 8008dba:	e03d      	b.n	8008e38 <HAL_RCC_OscConfig+0x4f8>
 8008dbc:	4b11      	ldr	r3, [pc, #68]	; (8008e04 <HAL_RCC_OscConfig+0x4c4>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d0f0      	beq.n	8008daa <HAL_RCC_OscConfig+0x46a>
 8008dc8:	e035      	b.n	8008e36 <HAL_RCC_OscConfig+0x4f6>
 8008dca:	4b10      	ldr	r3, [pc, #64]	; (8008e0c <HAL_RCC_OscConfig+0x4cc>)
 8008dcc:	2200      	movs	r2, #0
 8008dce:	601a      	str	r2, [r3, #0]
 8008dd0:	f7fd fb52 	bl	8006478 <HAL_GetTick>
 8008dd4:	6138      	str	r0, [r7, #16]
 8008dd6:	e008      	b.n	8008dea <HAL_RCC_OscConfig+0x4aa>
 8008dd8:	f7fd fb4e 	bl	8006478 <HAL_GetTick>
 8008ddc:	4602      	mov	r2, r0
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	1ad3      	subs	r3, r2, r3
 8008de2:	2b02      	cmp	r3, #2
 8008de4:	d901      	bls.n	8008dea <HAL_RCC_OscConfig+0x4aa>
 8008de6:	2303      	movs	r3, #3
 8008de8:	e026      	b.n	8008e38 <HAL_RCC_OscConfig+0x4f8>
 8008dea:	4b06      	ldr	r3, [pc, #24]	; (8008e04 <HAL_RCC_OscConfig+0x4c4>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d1f0      	bne.n	8008dd8 <HAL_RCC_OscConfig+0x498>
 8008df6:	e01e      	b.n	8008e36 <HAL_RCC_OscConfig+0x4f6>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	69db      	ldr	r3, [r3, #28]
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	d107      	bne.n	8008e10 <HAL_RCC_OscConfig+0x4d0>
 8008e00:	2301      	movs	r3, #1
 8008e02:	e019      	b.n	8008e38 <HAL_RCC_OscConfig+0x4f8>
 8008e04:	40021000 	.word	0x40021000
 8008e08:	40007000 	.word	0x40007000
 8008e0c:	42420060 	.word	0x42420060
 8008e10:	4b0b      	ldr	r3, [pc, #44]	; (8008e40 <HAL_RCC_OscConfig+0x500>)
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	60fb      	str	r3, [r7, #12]
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6a1b      	ldr	r3, [r3, #32]
 8008e20:	429a      	cmp	r2, r3
 8008e22:	d106      	bne.n	8008e32 <HAL_RCC_OscConfig+0x4f2>
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	d001      	beq.n	8008e36 <HAL_RCC_OscConfig+0x4f6>
 8008e32:	2301      	movs	r3, #1
 8008e34:	e000      	b.n	8008e38 <HAL_RCC_OscConfig+0x4f8>
 8008e36:	2300      	movs	r3, #0
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3718      	adds	r7, #24
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}
 8008e40:	40021000 	.word	0x40021000

08008e44 <HAL_RCC_ClockConfig>:
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b084      	sub	sp, #16
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	6039      	str	r1, [r7, #0]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d101      	bne.n	8008e58 <HAL_RCC_ClockConfig+0x14>
 8008e54:	2301      	movs	r3, #1
 8008e56:	e0d0      	b.n	8008ffa <HAL_RCC_ClockConfig+0x1b6>
 8008e58:	4b6a      	ldr	r3, [pc, #424]	; (8009004 <HAL_RCC_ClockConfig+0x1c0>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f003 0307 	and.w	r3, r3, #7
 8008e60:	683a      	ldr	r2, [r7, #0]
 8008e62:	429a      	cmp	r2, r3
 8008e64:	d910      	bls.n	8008e88 <HAL_RCC_ClockConfig+0x44>
 8008e66:	4b67      	ldr	r3, [pc, #412]	; (8009004 <HAL_RCC_ClockConfig+0x1c0>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f023 0207 	bic.w	r2, r3, #7
 8008e6e:	4965      	ldr	r1, [pc, #404]	; (8009004 <HAL_RCC_ClockConfig+0x1c0>)
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	4313      	orrs	r3, r2
 8008e74:	600b      	str	r3, [r1, #0]
 8008e76:	4b63      	ldr	r3, [pc, #396]	; (8009004 <HAL_RCC_ClockConfig+0x1c0>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f003 0307 	and.w	r3, r3, #7
 8008e7e:	683a      	ldr	r2, [r7, #0]
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d001      	beq.n	8008e88 <HAL_RCC_ClockConfig+0x44>
 8008e84:	2301      	movs	r3, #1
 8008e86:	e0b8      	b.n	8008ffa <HAL_RCC_ClockConfig+0x1b6>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f003 0302 	and.w	r3, r3, #2
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d020      	beq.n	8008ed6 <HAL_RCC_ClockConfig+0x92>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f003 0304 	and.w	r3, r3, #4
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d005      	beq.n	8008eac <HAL_RCC_ClockConfig+0x68>
 8008ea0:	4b59      	ldr	r3, [pc, #356]	; (8009008 <HAL_RCC_ClockConfig+0x1c4>)
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	4a58      	ldr	r2, [pc, #352]	; (8009008 <HAL_RCC_ClockConfig+0x1c4>)
 8008ea6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008eaa:	6053      	str	r3, [r2, #4]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f003 0308 	and.w	r3, r3, #8
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d005      	beq.n	8008ec4 <HAL_RCC_ClockConfig+0x80>
 8008eb8:	4b53      	ldr	r3, [pc, #332]	; (8009008 <HAL_RCC_ClockConfig+0x1c4>)
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	4a52      	ldr	r2, [pc, #328]	; (8009008 <HAL_RCC_ClockConfig+0x1c4>)
 8008ebe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8008ec2:	6053      	str	r3, [r2, #4]
 8008ec4:	4b50      	ldr	r3, [pc, #320]	; (8009008 <HAL_RCC_ClockConfig+0x1c4>)
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	689b      	ldr	r3, [r3, #8]
 8008ed0:	494d      	ldr	r1, [pc, #308]	; (8009008 <HAL_RCC_ClockConfig+0x1c4>)
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	604b      	str	r3, [r1, #4]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f003 0301 	and.w	r3, r3, #1
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d040      	beq.n	8008f64 <HAL_RCC_ClockConfig+0x120>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	2b01      	cmp	r3, #1
 8008ee8:	d107      	bne.n	8008efa <HAL_RCC_ClockConfig+0xb6>
 8008eea:	4b47      	ldr	r3, [pc, #284]	; (8009008 <HAL_RCC_ClockConfig+0x1c4>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d115      	bne.n	8008f22 <HAL_RCC_ClockConfig+0xde>
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	e07f      	b.n	8008ffa <HAL_RCC_ClockConfig+0x1b6>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	2b02      	cmp	r3, #2
 8008f00:	d107      	bne.n	8008f12 <HAL_RCC_ClockConfig+0xce>
 8008f02:	4b41      	ldr	r3, [pc, #260]	; (8009008 <HAL_RCC_ClockConfig+0x1c4>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d109      	bne.n	8008f22 <HAL_RCC_ClockConfig+0xde>
 8008f0e:	2301      	movs	r3, #1
 8008f10:	e073      	b.n	8008ffa <HAL_RCC_ClockConfig+0x1b6>
 8008f12:	4b3d      	ldr	r3, [pc, #244]	; (8009008 <HAL_RCC_ClockConfig+0x1c4>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f003 0302 	and.w	r3, r3, #2
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d101      	bne.n	8008f22 <HAL_RCC_ClockConfig+0xde>
 8008f1e:	2301      	movs	r3, #1
 8008f20:	e06b      	b.n	8008ffa <HAL_RCC_ClockConfig+0x1b6>
 8008f22:	4b39      	ldr	r3, [pc, #228]	; (8009008 <HAL_RCC_ClockConfig+0x1c4>)
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	f023 0203 	bic.w	r2, r3, #3
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	4936      	ldr	r1, [pc, #216]	; (8009008 <HAL_RCC_ClockConfig+0x1c4>)
 8008f30:	4313      	orrs	r3, r2
 8008f32:	604b      	str	r3, [r1, #4]
 8008f34:	f7fd faa0 	bl	8006478 <HAL_GetTick>
 8008f38:	60f8      	str	r0, [r7, #12]
 8008f3a:	e00a      	b.n	8008f52 <HAL_RCC_ClockConfig+0x10e>
 8008f3c:	f7fd fa9c 	bl	8006478 <HAL_GetTick>
 8008f40:	4602      	mov	r2, r0
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	1ad3      	subs	r3, r2, r3
 8008f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d901      	bls.n	8008f52 <HAL_RCC_ClockConfig+0x10e>
 8008f4e:	2303      	movs	r3, #3
 8008f50:	e053      	b.n	8008ffa <HAL_RCC_ClockConfig+0x1b6>
 8008f52:	4b2d      	ldr	r3, [pc, #180]	; (8009008 <HAL_RCC_ClockConfig+0x1c4>)
 8008f54:	685b      	ldr	r3, [r3, #4]
 8008f56:	f003 020c 	and.w	r2, r3, #12
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	009b      	lsls	r3, r3, #2
 8008f60:	429a      	cmp	r2, r3
 8008f62:	d1eb      	bne.n	8008f3c <HAL_RCC_ClockConfig+0xf8>
 8008f64:	4b27      	ldr	r3, [pc, #156]	; (8009004 <HAL_RCC_ClockConfig+0x1c0>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f003 0307 	and.w	r3, r3, #7
 8008f6c:	683a      	ldr	r2, [r7, #0]
 8008f6e:	429a      	cmp	r2, r3
 8008f70:	d210      	bcs.n	8008f94 <HAL_RCC_ClockConfig+0x150>
 8008f72:	4b24      	ldr	r3, [pc, #144]	; (8009004 <HAL_RCC_ClockConfig+0x1c0>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f023 0207 	bic.w	r2, r3, #7
 8008f7a:	4922      	ldr	r1, [pc, #136]	; (8009004 <HAL_RCC_ClockConfig+0x1c0>)
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	600b      	str	r3, [r1, #0]
 8008f82:	4b20      	ldr	r3, [pc, #128]	; (8009004 <HAL_RCC_ClockConfig+0x1c0>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f003 0307 	and.w	r3, r3, #7
 8008f8a:	683a      	ldr	r2, [r7, #0]
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	d001      	beq.n	8008f94 <HAL_RCC_ClockConfig+0x150>
 8008f90:	2301      	movs	r3, #1
 8008f92:	e032      	b.n	8008ffa <HAL_RCC_ClockConfig+0x1b6>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f003 0304 	and.w	r3, r3, #4
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d008      	beq.n	8008fb2 <HAL_RCC_ClockConfig+0x16e>
 8008fa0:	4b19      	ldr	r3, [pc, #100]	; (8009008 <HAL_RCC_ClockConfig+0x1c4>)
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	68db      	ldr	r3, [r3, #12]
 8008fac:	4916      	ldr	r1, [pc, #88]	; (8009008 <HAL_RCC_ClockConfig+0x1c4>)
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	604b      	str	r3, [r1, #4]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f003 0308 	and.w	r3, r3, #8
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d009      	beq.n	8008fd2 <HAL_RCC_ClockConfig+0x18e>
 8008fbe:	4b12      	ldr	r3, [pc, #72]	; (8009008 <HAL_RCC_ClockConfig+0x1c4>)
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	691b      	ldr	r3, [r3, #16]
 8008fca:	00db      	lsls	r3, r3, #3
 8008fcc:	490e      	ldr	r1, [pc, #56]	; (8009008 <HAL_RCC_ClockConfig+0x1c4>)
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	604b      	str	r3, [r1, #4]
 8008fd2:	f000 f821 	bl	8009018 <HAL_RCC_GetSysClockFreq>
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	4b0b      	ldr	r3, [pc, #44]	; (8009008 <HAL_RCC_ClockConfig+0x1c4>)
 8008fda:	685b      	ldr	r3, [r3, #4]
 8008fdc:	091b      	lsrs	r3, r3, #4
 8008fde:	f003 030f 	and.w	r3, r3, #15
 8008fe2:	490a      	ldr	r1, [pc, #40]	; (800900c <HAL_RCC_ClockConfig+0x1c8>)
 8008fe4:	5ccb      	ldrb	r3, [r1, r3]
 8008fe6:	fa22 f303 	lsr.w	r3, r2, r3
 8008fea:	4a09      	ldr	r2, [pc, #36]	; (8009010 <HAL_RCC_ClockConfig+0x1cc>)
 8008fec:	6013      	str	r3, [r2, #0]
 8008fee:	4b09      	ldr	r3, [pc, #36]	; (8009014 <HAL_RCC_ClockConfig+0x1d0>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f7fd f9fe 	bl	80063f4 <HAL_InitTick>
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3710      	adds	r7, #16
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
 8009002:	bf00      	nop
 8009004:	40022000 	.word	0x40022000
 8009008:	40021000 	.word	0x40021000
 800900c:	0800b2fc 	.word	0x0800b2fc
 8009010:	2000023c 	.word	0x2000023c
 8009014:	20000240 	.word	0x20000240

08009018 <HAL_RCC_GetSysClockFreq>:
 8009018:	b490      	push	{r4, r7}
 800901a:	b08a      	sub	sp, #40	; 0x28
 800901c:	af00      	add	r7, sp, #0
 800901e:	4b29      	ldr	r3, [pc, #164]	; (80090c4 <HAL_RCC_GetSysClockFreq+0xac>)
 8009020:	1d3c      	adds	r4, r7, #4
 8009022:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009024:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8009028:	f240 2301 	movw	r3, #513	; 0x201
 800902c:	803b      	strh	r3, [r7, #0]
 800902e:	2300      	movs	r3, #0
 8009030:	61fb      	str	r3, [r7, #28]
 8009032:	2300      	movs	r3, #0
 8009034:	61bb      	str	r3, [r7, #24]
 8009036:	2300      	movs	r3, #0
 8009038:	627b      	str	r3, [r7, #36]	; 0x24
 800903a:	2300      	movs	r3, #0
 800903c:	617b      	str	r3, [r7, #20]
 800903e:	2300      	movs	r3, #0
 8009040:	623b      	str	r3, [r7, #32]
 8009042:	4b21      	ldr	r3, [pc, #132]	; (80090c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	61fb      	str	r3, [r7, #28]
 8009048:	69fb      	ldr	r3, [r7, #28]
 800904a:	f003 030c 	and.w	r3, r3, #12
 800904e:	2b04      	cmp	r3, #4
 8009050:	d002      	beq.n	8009058 <HAL_RCC_GetSysClockFreq+0x40>
 8009052:	2b08      	cmp	r3, #8
 8009054:	d003      	beq.n	800905e <HAL_RCC_GetSysClockFreq+0x46>
 8009056:	e02b      	b.n	80090b0 <HAL_RCC_GetSysClockFreq+0x98>
 8009058:	4b1c      	ldr	r3, [pc, #112]	; (80090cc <HAL_RCC_GetSysClockFreq+0xb4>)
 800905a:	623b      	str	r3, [r7, #32]
 800905c:	e02b      	b.n	80090b6 <HAL_RCC_GetSysClockFreq+0x9e>
 800905e:	69fb      	ldr	r3, [r7, #28]
 8009060:	0c9b      	lsrs	r3, r3, #18
 8009062:	f003 030f 	and.w	r3, r3, #15
 8009066:	3328      	adds	r3, #40	; 0x28
 8009068:	443b      	add	r3, r7
 800906a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800906e:	617b      	str	r3, [r7, #20]
 8009070:	69fb      	ldr	r3, [r7, #28]
 8009072:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009076:	2b00      	cmp	r3, #0
 8009078:	d012      	beq.n	80090a0 <HAL_RCC_GetSysClockFreq+0x88>
 800907a:	4b13      	ldr	r3, [pc, #76]	; (80090c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	0c5b      	lsrs	r3, r3, #17
 8009080:	f003 0301 	and.w	r3, r3, #1
 8009084:	3328      	adds	r3, #40	; 0x28
 8009086:	443b      	add	r3, r7
 8009088:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800908c:	61bb      	str	r3, [r7, #24]
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	4a0e      	ldr	r2, [pc, #56]	; (80090cc <HAL_RCC_GetSysClockFreq+0xb4>)
 8009092:	fb03 f202 	mul.w	r2, r3, r2
 8009096:	69bb      	ldr	r3, [r7, #24]
 8009098:	fbb2 f3f3 	udiv	r3, r2, r3
 800909c:	627b      	str	r3, [r7, #36]	; 0x24
 800909e:	e004      	b.n	80090aa <HAL_RCC_GetSysClockFreq+0x92>
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	4a0b      	ldr	r2, [pc, #44]	; (80090d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80090a4:	fb02 f303 	mul.w	r3, r2, r3
 80090a8:	627b      	str	r3, [r7, #36]	; 0x24
 80090aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ac:	623b      	str	r3, [r7, #32]
 80090ae:	e002      	b.n	80090b6 <HAL_RCC_GetSysClockFreq+0x9e>
 80090b0:	4b06      	ldr	r3, [pc, #24]	; (80090cc <HAL_RCC_GetSysClockFreq+0xb4>)
 80090b2:	623b      	str	r3, [r7, #32]
 80090b4:	bf00      	nop
 80090b6:	6a3b      	ldr	r3, [r7, #32]
 80090b8:	4618      	mov	r0, r3
 80090ba:	3728      	adds	r7, #40	; 0x28
 80090bc:	46bd      	mov	sp, r7
 80090be:	bc90      	pop	{r4, r7}
 80090c0:	4770      	bx	lr
 80090c2:	bf00      	nop
 80090c4:	0800b2ec 	.word	0x0800b2ec
 80090c8:	40021000 	.word	0x40021000
 80090cc:	007a1200 	.word	0x007a1200
 80090d0:	003d0900 	.word	0x003d0900

080090d4 <HAL_RCC_GetHCLKFreq>:
 80090d4:	b480      	push	{r7}
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	4b02      	ldr	r3, [pc, #8]	; (80090e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4618      	mov	r0, r3
 80090de:	46bd      	mov	sp, r7
 80090e0:	bc80      	pop	{r7}
 80090e2:	4770      	bx	lr
 80090e4:	2000023c 	.word	0x2000023c

080090e8 <HAL_RCC_GetPCLK1Freq>:
 80090e8:	b580      	push	{r7, lr}
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	f7ff fff2 	bl	80090d4 <HAL_RCC_GetHCLKFreq>
 80090f0:	4602      	mov	r2, r0
 80090f2:	4b05      	ldr	r3, [pc, #20]	; (8009108 <HAL_RCC_GetPCLK1Freq+0x20>)
 80090f4:	685b      	ldr	r3, [r3, #4]
 80090f6:	0a1b      	lsrs	r3, r3, #8
 80090f8:	f003 0307 	and.w	r3, r3, #7
 80090fc:	4903      	ldr	r1, [pc, #12]	; (800910c <HAL_RCC_GetPCLK1Freq+0x24>)
 80090fe:	5ccb      	ldrb	r3, [r1, r3]
 8009100:	fa22 f303 	lsr.w	r3, r2, r3
 8009104:	4618      	mov	r0, r3
 8009106:	bd80      	pop	{r7, pc}
 8009108:	40021000 	.word	0x40021000
 800910c:	0800b30c 	.word	0x0800b30c

08009110 <HAL_RCC_GetPCLK2Freq>:
 8009110:	b580      	push	{r7, lr}
 8009112:	af00      	add	r7, sp, #0
 8009114:	f7ff ffde 	bl	80090d4 <HAL_RCC_GetHCLKFreq>
 8009118:	4602      	mov	r2, r0
 800911a:	4b05      	ldr	r3, [pc, #20]	; (8009130 <HAL_RCC_GetPCLK2Freq+0x20>)
 800911c:	685b      	ldr	r3, [r3, #4]
 800911e:	0adb      	lsrs	r3, r3, #11
 8009120:	f003 0307 	and.w	r3, r3, #7
 8009124:	4903      	ldr	r1, [pc, #12]	; (8009134 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009126:	5ccb      	ldrb	r3, [r1, r3]
 8009128:	fa22 f303 	lsr.w	r3, r2, r3
 800912c:	4618      	mov	r0, r3
 800912e:	bd80      	pop	{r7, pc}
 8009130:	40021000 	.word	0x40021000
 8009134:	0800b30c 	.word	0x0800b30c

08009138 <RCC_Delay>:
 8009138:	b480      	push	{r7}
 800913a:	b085      	sub	sp, #20
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
 8009140:	4b0a      	ldr	r3, [pc, #40]	; (800916c <RCC_Delay+0x34>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4a0a      	ldr	r2, [pc, #40]	; (8009170 <RCC_Delay+0x38>)
 8009146:	fba2 2303 	umull	r2, r3, r2, r3
 800914a:	0a5b      	lsrs	r3, r3, #9
 800914c:	687a      	ldr	r2, [r7, #4]
 800914e:	fb02 f303 	mul.w	r3, r2, r3
 8009152:	60fb      	str	r3, [r7, #12]
 8009154:	bf00      	nop
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	1e5a      	subs	r2, r3, #1
 800915a:	60fa      	str	r2, [r7, #12]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d1f9      	bne.n	8009154 <RCC_Delay+0x1c>
 8009160:	bf00      	nop
 8009162:	bf00      	nop
 8009164:	3714      	adds	r7, #20
 8009166:	46bd      	mov	sp, r7
 8009168:	bc80      	pop	{r7}
 800916a:	4770      	bx	lr
 800916c:	2000023c 	.word	0x2000023c
 8009170:	10624dd3 	.word	0x10624dd3

08009174 <HAL_RCCEx_PeriphCLKConfig>:
 8009174:	b580      	push	{r7, lr}
 8009176:	b086      	sub	sp, #24
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	2300      	movs	r3, #0
 800917e:	613b      	str	r3, [r7, #16]
 8009180:	2300      	movs	r3, #0
 8009182:	60fb      	str	r3, [r7, #12]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f003 0301 	and.w	r3, r3, #1
 800918c:	2b00      	cmp	r3, #0
 800918e:	d07d      	beq.n	800928c <HAL_RCCEx_PeriphCLKConfig+0x118>
 8009190:	2300      	movs	r3, #0
 8009192:	75fb      	strb	r3, [r7, #23]
 8009194:	4b4f      	ldr	r3, [pc, #316]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009196:	69db      	ldr	r3, [r3, #28]
 8009198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800919c:	2b00      	cmp	r3, #0
 800919e:	d10d      	bne.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0x48>
 80091a0:	4b4c      	ldr	r3, [pc, #304]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80091a2:	69db      	ldr	r3, [r3, #28]
 80091a4:	4a4b      	ldr	r2, [pc, #300]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80091a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091aa:	61d3      	str	r3, [r2, #28]
 80091ac:	4b49      	ldr	r3, [pc, #292]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80091ae:	69db      	ldr	r3, [r3, #28]
 80091b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091b4:	60bb      	str	r3, [r7, #8]
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	2301      	movs	r3, #1
 80091ba:	75fb      	strb	r3, [r7, #23]
 80091bc:	4b46      	ldr	r3, [pc, #280]	; (80092d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d118      	bne.n	80091fa <HAL_RCCEx_PeriphCLKConfig+0x86>
 80091c8:	4b43      	ldr	r3, [pc, #268]	; (80092d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a42      	ldr	r2, [pc, #264]	; (80092d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80091ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091d2:	6013      	str	r3, [r2, #0]
 80091d4:	f7fd f950 	bl	8006478 <HAL_GetTick>
 80091d8:	6138      	str	r0, [r7, #16]
 80091da:	e008      	b.n	80091ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80091dc:	f7fd f94c 	bl	8006478 <HAL_GetTick>
 80091e0:	4602      	mov	r2, r0
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	1ad3      	subs	r3, r2, r3
 80091e6:	2b64      	cmp	r3, #100	; 0x64
 80091e8:	d901      	bls.n	80091ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80091ea:	2303      	movs	r3, #3
 80091ec:	e06d      	b.n	80092ca <HAL_RCCEx_PeriphCLKConfig+0x156>
 80091ee:	4b3a      	ldr	r3, [pc, #232]	; (80092d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d0f0      	beq.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0x68>
 80091fa:	4b36      	ldr	r3, [pc, #216]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80091fc:	6a1b      	ldr	r3, [r3, #32]
 80091fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009202:	60fb      	str	r3, [r7, #12]
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d02e      	beq.n	8009268 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009212:	68fa      	ldr	r2, [r7, #12]
 8009214:	429a      	cmp	r2, r3
 8009216:	d027      	beq.n	8009268 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8009218:	4b2e      	ldr	r3, [pc, #184]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800921a:	6a1b      	ldr	r3, [r3, #32]
 800921c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009220:	60fb      	str	r3, [r7, #12]
 8009222:	4b2e      	ldr	r3, [pc, #184]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8009224:	2201      	movs	r2, #1
 8009226:	601a      	str	r2, [r3, #0]
 8009228:	4b2c      	ldr	r3, [pc, #176]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800922a:	2200      	movs	r2, #0
 800922c:	601a      	str	r2, [r3, #0]
 800922e:	4a29      	ldr	r2, [pc, #164]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	6213      	str	r3, [r2, #32]
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	f003 0301 	and.w	r3, r3, #1
 800923a:	2b00      	cmp	r3, #0
 800923c:	d014      	beq.n	8009268 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800923e:	f7fd f91b 	bl	8006478 <HAL_GetTick>
 8009242:	6138      	str	r0, [r7, #16]
 8009244:	e00a      	b.n	800925c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8009246:	f7fd f917 	bl	8006478 <HAL_GetTick>
 800924a:	4602      	mov	r2, r0
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	1ad3      	subs	r3, r2, r3
 8009250:	f241 3288 	movw	r2, #5000	; 0x1388
 8009254:	4293      	cmp	r3, r2
 8009256:	d901      	bls.n	800925c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8009258:	2303      	movs	r3, #3
 800925a:	e036      	b.n	80092ca <HAL_RCCEx_PeriphCLKConfig+0x156>
 800925c:	4b1d      	ldr	r3, [pc, #116]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800925e:	6a1b      	ldr	r3, [r3, #32]
 8009260:	f003 0302 	and.w	r3, r3, #2
 8009264:	2b00      	cmp	r3, #0
 8009266:	d0ee      	beq.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0xd2>
 8009268:	4b1a      	ldr	r3, [pc, #104]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800926a:	6a1b      	ldr	r3, [r3, #32]
 800926c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	685b      	ldr	r3, [r3, #4]
 8009274:	4917      	ldr	r1, [pc, #92]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009276:	4313      	orrs	r3, r2
 8009278:	620b      	str	r3, [r1, #32]
 800927a:	7dfb      	ldrb	r3, [r7, #23]
 800927c:	2b01      	cmp	r3, #1
 800927e:	d105      	bne.n	800928c <HAL_RCCEx_PeriphCLKConfig+0x118>
 8009280:	4b14      	ldr	r3, [pc, #80]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009282:	69db      	ldr	r3, [r3, #28]
 8009284:	4a13      	ldr	r2, [pc, #76]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009286:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800928a:	61d3      	str	r3, [r2, #28]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f003 0302 	and.w	r3, r3, #2
 8009294:	2b00      	cmp	r3, #0
 8009296:	d008      	beq.n	80092aa <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009298:	4b0e      	ldr	r3, [pc, #56]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	689b      	ldr	r3, [r3, #8]
 80092a4:	490b      	ldr	r1, [pc, #44]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80092a6:	4313      	orrs	r3, r2
 80092a8:	604b      	str	r3, [r1, #4]
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f003 0310 	and.w	r3, r3, #16
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d008      	beq.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80092b6:	4b07      	ldr	r3, [pc, #28]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80092b8:	685b      	ldr	r3, [r3, #4]
 80092ba:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	68db      	ldr	r3, [r3, #12]
 80092c2:	4904      	ldr	r1, [pc, #16]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80092c4:	4313      	orrs	r3, r2
 80092c6:	604b      	str	r3, [r1, #4]
 80092c8:	2300      	movs	r3, #0
 80092ca:	4618      	mov	r0, r3
 80092cc:	3718      	adds	r7, #24
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
 80092d2:	bf00      	nop
 80092d4:	40021000 	.word	0x40021000
 80092d8:	40007000 	.word	0x40007000
 80092dc:	42420440 	.word	0x42420440

080092e0 <HAL_TIM_Base_Init>:
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b082      	sub	sp, #8
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d101      	bne.n	80092f2 <HAL_TIM_Base_Init+0x12>
 80092ee:	2301      	movs	r3, #1
 80092f0:	e041      	b.n	8009376 <HAL_TIM_Base_Init+0x96>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092f8:	b2db      	uxtb	r3, r3
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d106      	bne.n	800930c <HAL_TIM_Base_Init+0x2c>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2200      	movs	r2, #0
 8009302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f7fc fe96 	bl	8006038 <HAL_TIM_Base_MspInit>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2202      	movs	r2, #2
 8009310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681a      	ldr	r2, [r3, #0]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	3304      	adds	r3, #4
 800931c:	4619      	mov	r1, r3
 800931e:	4610      	mov	r0, r2
 8009320:	f001 f93e 	bl	800a5a0 <TIM_Base_SetConfig>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2201      	movs	r2, #1
 8009328:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2201      	movs	r2, #1
 8009330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2201      	movs	r2, #1
 8009338:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2201      	movs	r2, #1
 8009340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2201      	movs	r2, #1
 8009348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2201      	movs	r2, #1
 8009350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2201      	movs	r2, #1
 8009358:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2201      	movs	r2, #1
 8009360:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2201      	movs	r2, #1
 8009368:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2201      	movs	r2, #1
 8009370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009374:	2300      	movs	r3, #0
 8009376:	4618      	mov	r0, r3
 8009378:	3708      	adds	r7, #8
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}

0800937e <HAL_TIM_Base_DeInit>:
 800937e:	b580      	push	{r7, lr}
 8009380:	b082      	sub	sp, #8
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2202      	movs	r2, #2
 800938a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	6a1a      	ldr	r2, [r3, #32]
 8009394:	f241 1311 	movw	r3, #4369	; 0x1111
 8009398:	4013      	ands	r3, r2
 800939a:	2b00      	cmp	r3, #0
 800939c:	d10f      	bne.n	80093be <HAL_TIM_Base_DeInit+0x40>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	6a1a      	ldr	r2, [r3, #32]
 80093a4:	f240 4344 	movw	r3, #1092	; 0x444
 80093a8:	4013      	ands	r3, r2
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d107      	bne.n	80093be <HAL_TIM_Base_DeInit+0x40>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	681a      	ldr	r2, [r3, #0]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f022 0201 	bic.w	r2, r2, #1
 80093bc:	601a      	str	r2, [r3, #0]
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f7fc fecc 	bl	800615c <HAL_TIM_Base_MspDeInit>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2200      	movs	r2, #0
 80093c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2200      	movs	r2, #0
 80093d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2200      	movs	r2, #0
 80093d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2200      	movs	r2, #0
 80093e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2200      	movs	r2, #0
 80093e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2200      	movs	r2, #0
 80093f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2200      	movs	r2, #0
 80093f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2200      	movs	r2, #0
 8009400:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2200      	movs	r2, #0
 8009408:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2200      	movs	r2, #0
 8009410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2200      	movs	r2, #0
 8009418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800941c:	2300      	movs	r3, #0
 800941e:	4618      	mov	r0, r3
 8009420:	3708      	adds	r7, #8
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
	...

08009428 <HAL_TIM_Base_Start_IT>:
 8009428:	b480      	push	{r7}
 800942a:	b085      	sub	sp, #20
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009436:	b2db      	uxtb	r3, r3
 8009438:	2b01      	cmp	r3, #1
 800943a:	d001      	beq.n	8009440 <HAL_TIM_Base_Start_IT+0x18>
 800943c:	2301      	movs	r3, #1
 800943e:	e03a      	b.n	80094b6 <HAL_TIM_Base_Start_IT+0x8e>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2202      	movs	r2, #2
 8009444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	68da      	ldr	r2, [r3, #12]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f042 0201 	orr.w	r2, r2, #1
 8009456:	60da      	str	r2, [r3, #12]
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	4a18      	ldr	r2, [pc, #96]	; (80094c0 <HAL_TIM_Base_Start_IT+0x98>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d00e      	beq.n	8009480 <HAL_TIM_Base_Start_IT+0x58>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800946a:	d009      	beq.n	8009480 <HAL_TIM_Base_Start_IT+0x58>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4a14      	ldr	r2, [pc, #80]	; (80094c4 <HAL_TIM_Base_Start_IT+0x9c>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d004      	beq.n	8009480 <HAL_TIM_Base_Start_IT+0x58>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	4a13      	ldr	r2, [pc, #76]	; (80094c8 <HAL_TIM_Base_Start_IT+0xa0>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d111      	bne.n	80094a4 <HAL_TIM_Base_Start_IT+0x7c>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	689b      	ldr	r3, [r3, #8]
 8009486:	f003 0307 	and.w	r3, r3, #7
 800948a:	60fb      	str	r3, [r7, #12]
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	2b06      	cmp	r3, #6
 8009490:	d010      	beq.n	80094b4 <HAL_TIM_Base_Start_IT+0x8c>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	681a      	ldr	r2, [r3, #0]
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f042 0201 	orr.w	r2, r2, #1
 80094a0:	601a      	str	r2, [r3, #0]
 80094a2:	e007      	b.n	80094b4 <HAL_TIM_Base_Start_IT+0x8c>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	681a      	ldr	r2, [r3, #0]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f042 0201 	orr.w	r2, r2, #1
 80094b2:	601a      	str	r2, [r3, #0]
 80094b4:	2300      	movs	r3, #0
 80094b6:	4618      	mov	r0, r3
 80094b8:	3714      	adds	r7, #20
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bc80      	pop	{r7}
 80094be:	4770      	bx	lr
 80094c0:	40012c00 	.word	0x40012c00
 80094c4:	40000400 	.word	0x40000400
 80094c8:	40000800 	.word	0x40000800

080094cc <HAL_TIM_PWM_Init>:
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b082      	sub	sp, #8
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d101      	bne.n	80094de <HAL_TIM_PWM_Init+0x12>
 80094da:	2301      	movs	r3, #1
 80094dc:	e041      	b.n	8009562 <HAL_TIM_PWM_Init+0x96>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094e4:	b2db      	uxtb	r3, r3
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d106      	bne.n	80094f8 <HAL_TIM_PWM_Init+0x2c>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2200      	movs	r2, #0
 80094ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f000 f88d 	bl	8009612 <HAL_TIM_PWM_MspInit>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2202      	movs	r2, #2
 80094fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681a      	ldr	r2, [r3, #0]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	3304      	adds	r3, #4
 8009508:	4619      	mov	r1, r3
 800950a:	4610      	mov	r0, r2
 800950c:	f001 f848 	bl	800a5a0 <TIM_Base_SetConfig>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2201      	movs	r2, #1
 8009514:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2201      	movs	r2, #1
 800951c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2201      	movs	r2, #1
 8009524:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2201      	movs	r2, #1
 800952c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2201      	movs	r2, #1
 8009534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2201      	movs	r2, #1
 800953c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2201      	movs	r2, #1
 8009544:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2201      	movs	r2, #1
 800954c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2201      	movs	r2, #1
 8009554:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2201      	movs	r2, #1
 800955c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009560:	2300      	movs	r3, #0
 8009562:	4618      	mov	r0, r3
 8009564:	3708      	adds	r7, #8
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}

0800956a <HAL_TIM_PWM_DeInit>:
 800956a:	b580      	push	{r7, lr}
 800956c:	b082      	sub	sp, #8
 800956e:	af00      	add	r7, sp, #0
 8009570:	6078      	str	r0, [r7, #4]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2202      	movs	r2, #2
 8009576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	6a1a      	ldr	r2, [r3, #32]
 8009580:	f241 1311 	movw	r3, #4369	; 0x1111
 8009584:	4013      	ands	r3, r2
 8009586:	2b00      	cmp	r3, #0
 8009588:	d10f      	bne.n	80095aa <HAL_TIM_PWM_DeInit+0x40>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	6a1a      	ldr	r2, [r3, #32]
 8009590:	f240 4344 	movw	r3, #1092	; 0x444
 8009594:	4013      	ands	r3, r2
 8009596:	2b00      	cmp	r3, #0
 8009598:	d107      	bne.n	80095aa <HAL_TIM_PWM_DeInit+0x40>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	681a      	ldr	r2, [r3, #0]
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f022 0201 	bic.w	r2, r2, #1
 80095a8:	601a      	str	r2, [r3, #0]
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f000 f83a 	bl	8009624 <HAL_TIM_PWM_MspDeInit>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2200      	movs	r2, #0
 80095b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2200      	movs	r2, #0
 80095bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2200      	movs	r2, #0
 80095c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2200      	movs	r2, #0
 80095cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2200      	movs	r2, #0
 80095d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2200      	movs	r2, #0
 80095dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2200      	movs	r2, #0
 80095e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2200      	movs	r2, #0
 80095ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2200      	movs	r2, #0
 80095f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2200      	movs	r2, #0
 80095fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2200      	movs	r2, #0
 8009604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009608:	2300      	movs	r3, #0
 800960a:	4618      	mov	r0, r3
 800960c:	3708      	adds	r7, #8
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}

08009612 <HAL_TIM_PWM_MspInit>:
 8009612:	b480      	push	{r7}
 8009614:	b083      	sub	sp, #12
 8009616:	af00      	add	r7, sp, #0
 8009618:	6078      	str	r0, [r7, #4]
 800961a:	bf00      	nop
 800961c:	370c      	adds	r7, #12
 800961e:	46bd      	mov	sp, r7
 8009620:	bc80      	pop	{r7}
 8009622:	4770      	bx	lr

08009624 <HAL_TIM_PWM_MspDeInit>:
 8009624:	b480      	push	{r7}
 8009626:	b083      	sub	sp, #12
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
 800962c:	bf00      	nop
 800962e:	370c      	adds	r7, #12
 8009630:	46bd      	mov	sp, r7
 8009632:	bc80      	pop	{r7}
 8009634:	4770      	bx	lr
	...

08009638 <HAL_TIM_PWM_Start>:
 8009638:	b580      	push	{r7, lr}
 800963a:	b084      	sub	sp, #16
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	6039      	str	r1, [r7, #0]
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d109      	bne.n	800965c <HAL_TIM_PWM_Start+0x24>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800964e:	b2db      	uxtb	r3, r3
 8009650:	2b01      	cmp	r3, #1
 8009652:	bf14      	ite	ne
 8009654:	2301      	movne	r3, #1
 8009656:	2300      	moveq	r3, #0
 8009658:	b2db      	uxtb	r3, r3
 800965a:	e022      	b.n	80096a2 <HAL_TIM_PWM_Start+0x6a>
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	2b04      	cmp	r3, #4
 8009660:	d109      	bne.n	8009676 <HAL_TIM_PWM_Start+0x3e>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009668:	b2db      	uxtb	r3, r3
 800966a:	2b01      	cmp	r3, #1
 800966c:	bf14      	ite	ne
 800966e:	2301      	movne	r3, #1
 8009670:	2300      	moveq	r3, #0
 8009672:	b2db      	uxtb	r3, r3
 8009674:	e015      	b.n	80096a2 <HAL_TIM_PWM_Start+0x6a>
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	2b08      	cmp	r3, #8
 800967a:	d109      	bne.n	8009690 <HAL_TIM_PWM_Start+0x58>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009682:	b2db      	uxtb	r3, r3
 8009684:	2b01      	cmp	r3, #1
 8009686:	bf14      	ite	ne
 8009688:	2301      	movne	r3, #1
 800968a:	2300      	moveq	r3, #0
 800968c:	b2db      	uxtb	r3, r3
 800968e:	e008      	b.n	80096a2 <HAL_TIM_PWM_Start+0x6a>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009696:	b2db      	uxtb	r3, r3
 8009698:	2b01      	cmp	r3, #1
 800969a:	bf14      	ite	ne
 800969c:	2301      	movne	r3, #1
 800969e:	2300      	moveq	r3, #0
 80096a0:	b2db      	uxtb	r3, r3
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d001      	beq.n	80096aa <HAL_TIM_PWM_Start+0x72>
 80096a6:	2301      	movs	r3, #1
 80096a8:	e05e      	b.n	8009768 <HAL_TIM_PWM_Start+0x130>
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d104      	bne.n	80096ba <HAL_TIM_PWM_Start+0x82>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2202      	movs	r2, #2
 80096b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80096b8:	e013      	b.n	80096e2 <HAL_TIM_PWM_Start+0xaa>
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	2b04      	cmp	r3, #4
 80096be:	d104      	bne.n	80096ca <HAL_TIM_PWM_Start+0x92>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2202      	movs	r2, #2
 80096c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80096c8:	e00b      	b.n	80096e2 <HAL_TIM_PWM_Start+0xaa>
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	2b08      	cmp	r3, #8
 80096ce:	d104      	bne.n	80096da <HAL_TIM_PWM_Start+0xa2>
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2202      	movs	r2, #2
 80096d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80096d8:	e003      	b.n	80096e2 <HAL_TIM_PWM_Start+0xaa>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2202      	movs	r2, #2
 80096de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	2201      	movs	r2, #1
 80096e8:	6839      	ldr	r1, [r7, #0]
 80096ea:	4618      	mov	r0, r3
 80096ec:	f001 fb73 	bl	800add6 <TIM_CCxChannelCmd>
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4a1e      	ldr	r2, [pc, #120]	; (8009770 <HAL_TIM_PWM_Start+0x138>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d107      	bne.n	800970a <HAL_TIM_PWM_Start+0xd2>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009708:	645a      	str	r2, [r3, #68]	; 0x44
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	4a18      	ldr	r2, [pc, #96]	; (8009770 <HAL_TIM_PWM_Start+0x138>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d00e      	beq.n	8009732 <HAL_TIM_PWM_Start+0xfa>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800971c:	d009      	beq.n	8009732 <HAL_TIM_PWM_Start+0xfa>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	4a14      	ldr	r2, [pc, #80]	; (8009774 <HAL_TIM_PWM_Start+0x13c>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d004      	beq.n	8009732 <HAL_TIM_PWM_Start+0xfa>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	4a12      	ldr	r2, [pc, #72]	; (8009778 <HAL_TIM_PWM_Start+0x140>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d111      	bne.n	8009756 <HAL_TIM_PWM_Start+0x11e>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	689b      	ldr	r3, [r3, #8]
 8009738:	f003 0307 	and.w	r3, r3, #7
 800973c:	60fb      	str	r3, [r7, #12]
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2b06      	cmp	r3, #6
 8009742:	d010      	beq.n	8009766 <HAL_TIM_PWM_Start+0x12e>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	681a      	ldr	r2, [r3, #0]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f042 0201 	orr.w	r2, r2, #1
 8009752:	601a      	str	r2, [r3, #0]
 8009754:	e007      	b.n	8009766 <HAL_TIM_PWM_Start+0x12e>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	681a      	ldr	r2, [r3, #0]
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f042 0201 	orr.w	r2, r2, #1
 8009764:	601a      	str	r2, [r3, #0]
 8009766:	2300      	movs	r3, #0
 8009768:	4618      	mov	r0, r3
 800976a:	3710      	adds	r7, #16
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}
 8009770:	40012c00 	.word	0x40012c00
 8009774:	40000400 	.word	0x40000400
 8009778:	40000800 	.word	0x40000800

0800977c <HAL_TIM_PWM_Stop>:
 800977c:	b580      	push	{r7, lr}
 800977e:	b082      	sub	sp, #8
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	6039      	str	r1, [r7, #0]
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	2200      	movs	r2, #0
 800978c:	6839      	ldr	r1, [r7, #0]
 800978e:	4618      	mov	r0, r3
 8009790:	f001 fb21 	bl	800add6 <TIM_CCxChannelCmd>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4a29      	ldr	r2, [pc, #164]	; (8009840 <HAL_TIM_PWM_Stop+0xc4>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d117      	bne.n	80097ce <HAL_TIM_PWM_Stop+0x52>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	6a1a      	ldr	r2, [r3, #32]
 80097a4:	f241 1311 	movw	r3, #4369	; 0x1111
 80097a8:	4013      	ands	r3, r2
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d10f      	bne.n	80097ce <HAL_TIM_PWM_Stop+0x52>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	6a1a      	ldr	r2, [r3, #32]
 80097b4:	f240 4344 	movw	r3, #1092	; 0x444
 80097b8:	4013      	ands	r3, r2
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d107      	bne.n	80097ce <HAL_TIM_PWM_Stop+0x52>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80097cc:	645a      	str	r2, [r3, #68]	; 0x44
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	6a1a      	ldr	r2, [r3, #32]
 80097d4:	f241 1311 	movw	r3, #4369	; 0x1111
 80097d8:	4013      	ands	r3, r2
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d10f      	bne.n	80097fe <HAL_TIM_PWM_Stop+0x82>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	6a1a      	ldr	r2, [r3, #32]
 80097e4:	f240 4344 	movw	r3, #1092	; 0x444
 80097e8:	4013      	ands	r3, r2
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d107      	bne.n	80097fe <HAL_TIM_PWM_Stop+0x82>
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	681a      	ldr	r2, [r3, #0]
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f022 0201 	bic.w	r2, r2, #1
 80097fc:	601a      	str	r2, [r3, #0]
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d104      	bne.n	800980e <HAL_TIM_PWM_Stop+0x92>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2201      	movs	r2, #1
 8009808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800980c:	e013      	b.n	8009836 <HAL_TIM_PWM_Stop+0xba>
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	2b04      	cmp	r3, #4
 8009812:	d104      	bne.n	800981e <HAL_TIM_PWM_Stop+0xa2>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2201      	movs	r2, #1
 8009818:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800981c:	e00b      	b.n	8009836 <HAL_TIM_PWM_Stop+0xba>
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	2b08      	cmp	r3, #8
 8009822:	d104      	bne.n	800982e <HAL_TIM_PWM_Stop+0xb2>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2201      	movs	r2, #1
 8009828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800982c:	e003      	b.n	8009836 <HAL_TIM_PWM_Stop+0xba>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2201      	movs	r2, #1
 8009832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009836:	2300      	movs	r3, #0
 8009838:	4618      	mov	r0, r3
 800983a:	3708      	adds	r7, #8
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}
 8009840:	40012c00 	.word	0x40012c00

08009844 <HAL_TIM_IC_Init>:
 8009844:	b580      	push	{r7, lr}
 8009846:	b082      	sub	sp, #8
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d101      	bne.n	8009856 <HAL_TIM_IC_Init+0x12>
 8009852:	2301      	movs	r3, #1
 8009854:	e041      	b.n	80098da <HAL_TIM_IC_Init+0x96>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800985c:	b2db      	uxtb	r3, r3
 800985e:	2b00      	cmp	r3, #0
 8009860:	d106      	bne.n	8009870 <HAL_TIM_IC_Init+0x2c>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2200      	movs	r2, #0
 8009866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f000 f88d 	bl	800998a <HAL_TIM_IC_MspInit>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2202      	movs	r2, #2
 8009874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681a      	ldr	r2, [r3, #0]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	3304      	adds	r3, #4
 8009880:	4619      	mov	r1, r3
 8009882:	4610      	mov	r0, r2
 8009884:	f000 fe8c 	bl	800a5a0 <TIM_Base_SetConfig>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2201      	movs	r2, #1
 800988c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2201      	movs	r2, #1
 8009894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2201      	movs	r2, #1
 800989c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2201      	movs	r2, #1
 80098a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2201      	movs	r2, #1
 80098ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2201      	movs	r2, #1
 80098b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2201      	movs	r2, #1
 80098bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2201      	movs	r2, #1
 80098c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2201      	movs	r2, #1
 80098cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2201      	movs	r2, #1
 80098d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80098d8:	2300      	movs	r3, #0
 80098da:	4618      	mov	r0, r3
 80098dc:	3708      	adds	r7, #8
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}

080098e2 <HAL_TIM_IC_DeInit>:
 80098e2:	b580      	push	{r7, lr}
 80098e4:	b082      	sub	sp, #8
 80098e6:	af00      	add	r7, sp, #0
 80098e8:	6078      	str	r0, [r7, #4]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2202      	movs	r2, #2
 80098ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	6a1a      	ldr	r2, [r3, #32]
 80098f8:	f241 1311 	movw	r3, #4369	; 0x1111
 80098fc:	4013      	ands	r3, r2
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d10f      	bne.n	8009922 <HAL_TIM_IC_DeInit+0x40>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	6a1a      	ldr	r2, [r3, #32]
 8009908:	f240 4344 	movw	r3, #1092	; 0x444
 800990c:	4013      	ands	r3, r2
 800990e:	2b00      	cmp	r3, #0
 8009910:	d107      	bne.n	8009922 <HAL_TIM_IC_DeInit+0x40>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	681a      	ldr	r2, [r3, #0]
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f022 0201 	bic.w	r2, r2, #1
 8009920:	601a      	str	r2, [r3, #0]
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f000 f83a 	bl	800999c <HAL_TIM_IC_MspDeInit>
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2200      	movs	r2, #0
 800992c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2200      	movs	r2, #0
 8009934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2200      	movs	r2, #0
 800993c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2200      	movs	r2, #0
 8009944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2200      	movs	r2, #0
 800994c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2200      	movs	r2, #0
 8009954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2200      	movs	r2, #0
 800995c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2200      	movs	r2, #0
 8009964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2200      	movs	r2, #0
 800996c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2200      	movs	r2, #0
 8009974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2200      	movs	r2, #0
 800997c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009980:	2300      	movs	r3, #0
 8009982:	4618      	mov	r0, r3
 8009984:	3708      	adds	r7, #8
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}

0800998a <HAL_TIM_IC_MspInit>:
 800998a:	b480      	push	{r7}
 800998c:	b083      	sub	sp, #12
 800998e:	af00      	add	r7, sp, #0
 8009990:	6078      	str	r0, [r7, #4]
 8009992:	bf00      	nop
 8009994:	370c      	adds	r7, #12
 8009996:	46bd      	mov	sp, r7
 8009998:	bc80      	pop	{r7}
 800999a:	4770      	bx	lr

0800999c <HAL_TIM_IC_MspDeInit>:
 800999c:	b480      	push	{r7}
 800999e:	b083      	sub	sp, #12
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	bf00      	nop
 80099a6:	370c      	adds	r7, #12
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bc80      	pop	{r7}
 80099ac:	4770      	bx	lr
	...

080099b0 <HAL_TIM_IC_Start_DMA>:
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b086      	sub	sp, #24
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	60f8      	str	r0, [r7, #12]
 80099b8:	60b9      	str	r1, [r7, #8]
 80099ba:	607a      	str	r2, [r7, #4]
 80099bc:	807b      	strh	r3, [r7, #2]
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d104      	bne.n	80099ce <HAL_TIM_IC_Start_DMA+0x1e>
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	e013      	b.n	80099f6 <HAL_TIM_IC_Start_DMA+0x46>
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	2b04      	cmp	r3, #4
 80099d2:	d104      	bne.n	80099de <HAL_TIM_IC_Start_DMA+0x2e>
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80099da:	b2db      	uxtb	r3, r3
 80099dc:	e00b      	b.n	80099f6 <HAL_TIM_IC_Start_DMA+0x46>
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	2b08      	cmp	r3, #8
 80099e2:	d104      	bne.n	80099ee <HAL_TIM_IC_Start_DMA+0x3e>
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80099ea:	b2db      	uxtb	r3, r3
 80099ec:	e003      	b.n	80099f6 <HAL_TIM_IC_Start_DMA+0x46>
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80099f4:	b2db      	uxtb	r3, r3
 80099f6:	75fb      	strb	r3, [r7, #23]
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d104      	bne.n	8009a08 <HAL_TIM_IC_Start_DMA+0x58>
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009a04:	b2db      	uxtb	r3, r3
 8009a06:	e013      	b.n	8009a30 <HAL_TIM_IC_Start_DMA+0x80>
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	2b04      	cmp	r3, #4
 8009a0c:	d104      	bne.n	8009a18 <HAL_TIM_IC_Start_DMA+0x68>
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009a14:	b2db      	uxtb	r3, r3
 8009a16:	e00b      	b.n	8009a30 <HAL_TIM_IC_Start_DMA+0x80>
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	2b08      	cmp	r3, #8
 8009a1c:	d104      	bne.n	8009a28 <HAL_TIM_IC_Start_DMA+0x78>
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009a24:	b2db      	uxtb	r3, r3
 8009a26:	e003      	b.n	8009a30 <HAL_TIM_IC_Start_DMA+0x80>
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a2e:	b2db      	uxtb	r3, r3
 8009a30:	75bb      	strb	r3, [r7, #22]
 8009a32:	7dfb      	ldrb	r3, [r7, #23]
 8009a34:	2b02      	cmp	r3, #2
 8009a36:	d002      	beq.n	8009a3e <HAL_TIM_IC_Start_DMA+0x8e>
 8009a38:	7dbb      	ldrb	r3, [r7, #22]
 8009a3a:	2b02      	cmp	r3, #2
 8009a3c:	d101      	bne.n	8009a42 <HAL_TIM_IC_Start_DMA+0x92>
 8009a3e:	2302      	movs	r3, #2
 8009a40:	e130      	b.n	8009ca4 <HAL_TIM_IC_Start_DMA+0x2f4>
 8009a42:	7dfb      	ldrb	r3, [r7, #23]
 8009a44:	2b01      	cmp	r3, #1
 8009a46:	d143      	bne.n	8009ad0 <HAL_TIM_IC_Start_DMA+0x120>
 8009a48:	7dbb      	ldrb	r3, [r7, #22]
 8009a4a:	2b01      	cmp	r3, #1
 8009a4c:	d140      	bne.n	8009ad0 <HAL_TIM_IC_Start_DMA+0x120>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d104      	bne.n	8009a5e <HAL_TIM_IC_Start_DMA+0xae>
 8009a54:	887b      	ldrh	r3, [r7, #2]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d001      	beq.n	8009a5e <HAL_TIM_IC_Start_DMA+0xae>
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	e122      	b.n	8009ca4 <HAL_TIM_IC_Start_DMA+0x2f4>
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d104      	bne.n	8009a6e <HAL_TIM_IC_Start_DMA+0xbe>
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	2202      	movs	r2, #2
 8009a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a6c:	e013      	b.n	8009a96 <HAL_TIM_IC_Start_DMA+0xe6>
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	2b04      	cmp	r3, #4
 8009a72:	d104      	bne.n	8009a7e <HAL_TIM_IC_Start_DMA+0xce>
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	2202      	movs	r2, #2
 8009a78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009a7c:	e00b      	b.n	8009a96 <HAL_TIM_IC_Start_DMA+0xe6>
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	2b08      	cmp	r3, #8
 8009a82:	d104      	bne.n	8009a8e <HAL_TIM_IC_Start_DMA+0xde>
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2202      	movs	r2, #2
 8009a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009a8c:	e003      	b.n	8009a96 <HAL_TIM_IC_Start_DMA+0xe6>
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	2202      	movs	r2, #2
 8009a92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d104      	bne.n	8009aa6 <HAL_TIM_IC_Start_DMA+0xf6>
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	2202      	movs	r2, #2
 8009aa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009aa4:	e016      	b.n	8009ad4 <HAL_TIM_IC_Start_DMA+0x124>
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	2b04      	cmp	r3, #4
 8009aaa:	d104      	bne.n	8009ab6 <HAL_TIM_IC_Start_DMA+0x106>
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	2202      	movs	r2, #2
 8009ab0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009ab4:	e00e      	b.n	8009ad4 <HAL_TIM_IC_Start_DMA+0x124>
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	2b08      	cmp	r3, #8
 8009aba:	d104      	bne.n	8009ac6 <HAL_TIM_IC_Start_DMA+0x116>
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	2202      	movs	r2, #2
 8009ac0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ac4:	e006      	b.n	8009ad4 <HAL_TIM_IC_Start_DMA+0x124>
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	2202      	movs	r2, #2
 8009aca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ace:	e001      	b.n	8009ad4 <HAL_TIM_IC_Start_DMA+0x124>
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	e0e7      	b.n	8009ca4 <HAL_TIM_IC_Start_DMA+0x2f4>
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	2201      	movs	r2, #1
 8009ada:	68b9      	ldr	r1, [r7, #8]
 8009adc:	4618      	mov	r0, r3
 8009ade:	f001 f97a 	bl	800add6 <TIM_CCxChannelCmd>
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4a71      	ldr	r2, [pc, #452]	; (8009cac <HAL_TIM_IC_Start_DMA+0x2fc>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d00e      	beq.n	8009b0a <HAL_TIM_IC_Start_DMA+0x15a>
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009af4:	d009      	beq.n	8009b0a <HAL_TIM_IC_Start_DMA+0x15a>
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4a6d      	ldr	r2, [pc, #436]	; (8009cb0 <HAL_TIM_IC_Start_DMA+0x300>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d004      	beq.n	8009b0a <HAL_TIM_IC_Start_DMA+0x15a>
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4a6b      	ldr	r2, [pc, #428]	; (8009cb4 <HAL_TIM_IC_Start_DMA+0x304>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d111      	bne.n	8009b2e <HAL_TIM_IC_Start_DMA+0x17e>
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	689b      	ldr	r3, [r3, #8]
 8009b10:	f003 0307 	and.w	r3, r3, #7
 8009b14:	613b      	str	r3, [r7, #16]
 8009b16:	693b      	ldr	r3, [r7, #16]
 8009b18:	2b06      	cmp	r3, #6
 8009b1a:	d010      	beq.n	8009b3e <HAL_TIM_IC_Start_DMA+0x18e>
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	681a      	ldr	r2, [r3, #0]
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f042 0201 	orr.w	r2, r2, #1
 8009b2a:	601a      	str	r2, [r3, #0]
 8009b2c:	e007      	b.n	8009b3e <HAL_TIM_IC_Start_DMA+0x18e>
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	681a      	ldr	r2, [r3, #0]
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f042 0201 	orr.w	r2, r2, #1
 8009b3c:	601a      	str	r2, [r3, #0]
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	2b0c      	cmp	r3, #12
 8009b42:	f200 80ad 	bhi.w	8009ca0 <HAL_TIM_IC_Start_DMA+0x2f0>
 8009b46:	a201      	add	r2, pc, #4	; (adr r2, 8009b4c <HAL_TIM_IC_Start_DMA+0x19c>)
 8009b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b4c:	08009b81 	.word	0x08009b81
 8009b50:	08009ca1 	.word	0x08009ca1
 8009b54:	08009ca1 	.word	0x08009ca1
 8009b58:	08009ca1 	.word	0x08009ca1
 8009b5c:	08009bc9 	.word	0x08009bc9
 8009b60:	08009ca1 	.word	0x08009ca1
 8009b64:	08009ca1 	.word	0x08009ca1
 8009b68:	08009ca1 	.word	0x08009ca1
 8009b6c:	08009c11 	.word	0x08009c11
 8009b70:	08009ca1 	.word	0x08009ca1
 8009b74:	08009ca1 	.word	0x08009ca1
 8009b78:	08009ca1 	.word	0x08009ca1
 8009b7c:	08009c59 	.word	0x08009c59
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b84:	4a4c      	ldr	r2, [pc, #304]	; (8009cb8 <HAL_TIM_IC_Start_DMA+0x308>)
 8009b86:	629a      	str	r2, [r3, #40]	; 0x28
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b8c:	4a4b      	ldr	r2, [pc, #300]	; (8009cbc <HAL_TIM_IC_Start_DMA+0x30c>)
 8009b8e:	62da      	str	r2, [r3, #44]	; 0x2c
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b94:	4a4a      	ldr	r2, [pc, #296]	; (8009cc0 <HAL_TIM_IC_Start_DMA+0x310>)
 8009b96:	631a      	str	r2, [r3, #48]	; 0x30
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	3334      	adds	r3, #52	; 0x34
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	687a      	ldr	r2, [r7, #4]
 8009ba6:	887b      	ldrh	r3, [r7, #2]
 8009ba8:	f7fd fafc 	bl	80071a4 <HAL_DMA_Start_IT>
 8009bac:	4603      	mov	r3, r0
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d001      	beq.n	8009bb6 <HAL_TIM_IC_Start_DMA+0x206>
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	e076      	b.n	8009ca4 <HAL_TIM_IC_Start_DMA+0x2f4>
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	68da      	ldr	r2, [r3, #12]
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009bc4:	60da      	str	r2, [r3, #12]
 8009bc6:	e06c      	b.n	8009ca2 <HAL_TIM_IC_Start_DMA+0x2f2>
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bcc:	4a3a      	ldr	r2, [pc, #232]	; (8009cb8 <HAL_TIM_IC_Start_DMA+0x308>)
 8009bce:	629a      	str	r2, [r3, #40]	; 0x28
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bd4:	4a39      	ldr	r2, [pc, #228]	; (8009cbc <HAL_TIM_IC_Start_DMA+0x30c>)
 8009bd6:	62da      	str	r2, [r3, #44]	; 0x2c
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bdc:	4a38      	ldr	r2, [pc, #224]	; (8009cc0 <HAL_TIM_IC_Start_DMA+0x310>)
 8009bde:	631a      	str	r2, [r3, #48]	; 0x30
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	3338      	adds	r3, #56	; 0x38
 8009bea:	4619      	mov	r1, r3
 8009bec:	687a      	ldr	r2, [r7, #4]
 8009bee:	887b      	ldrh	r3, [r7, #2]
 8009bf0:	f7fd fad8 	bl	80071a4 <HAL_DMA_Start_IT>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d001      	beq.n	8009bfe <HAL_TIM_IC_Start_DMA+0x24e>
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	e052      	b.n	8009ca4 <HAL_TIM_IC_Start_DMA+0x2f4>
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	68da      	ldr	r2, [r3, #12]
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009c0c:	60da      	str	r2, [r3, #12]
 8009c0e:	e048      	b.n	8009ca2 <HAL_TIM_IC_Start_DMA+0x2f2>
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c14:	4a28      	ldr	r2, [pc, #160]	; (8009cb8 <HAL_TIM_IC_Start_DMA+0x308>)
 8009c16:	629a      	str	r2, [r3, #40]	; 0x28
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c1c:	4a27      	ldr	r2, [pc, #156]	; (8009cbc <HAL_TIM_IC_Start_DMA+0x30c>)
 8009c1e:	62da      	str	r2, [r3, #44]	; 0x2c
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c24:	4a26      	ldr	r2, [pc, #152]	; (8009cc0 <HAL_TIM_IC_Start_DMA+0x310>)
 8009c26:	631a      	str	r2, [r3, #48]	; 0x30
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	333c      	adds	r3, #60	; 0x3c
 8009c32:	4619      	mov	r1, r3
 8009c34:	687a      	ldr	r2, [r7, #4]
 8009c36:	887b      	ldrh	r3, [r7, #2]
 8009c38:	f7fd fab4 	bl	80071a4 <HAL_DMA_Start_IT>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d001      	beq.n	8009c46 <HAL_TIM_IC_Start_DMA+0x296>
 8009c42:	2301      	movs	r3, #1
 8009c44:	e02e      	b.n	8009ca4 <HAL_TIM_IC_Start_DMA+0x2f4>
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	68da      	ldr	r2, [r3, #12]
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c54:	60da      	str	r2, [r3, #12]
 8009c56:	e024      	b.n	8009ca2 <HAL_TIM_IC_Start_DMA+0x2f2>
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c5c:	4a16      	ldr	r2, [pc, #88]	; (8009cb8 <HAL_TIM_IC_Start_DMA+0x308>)
 8009c5e:	629a      	str	r2, [r3, #40]	; 0x28
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c64:	4a15      	ldr	r2, [pc, #84]	; (8009cbc <HAL_TIM_IC_Start_DMA+0x30c>)
 8009c66:	62da      	str	r2, [r3, #44]	; 0x2c
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c6c:	4a14      	ldr	r2, [pc, #80]	; (8009cc0 <HAL_TIM_IC_Start_DMA+0x310>)
 8009c6e:	631a      	str	r2, [r3, #48]	; 0x30
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	3340      	adds	r3, #64	; 0x40
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	687a      	ldr	r2, [r7, #4]
 8009c7e:	887b      	ldrh	r3, [r7, #2]
 8009c80:	f7fd fa90 	bl	80071a4 <HAL_DMA_Start_IT>
 8009c84:	4603      	mov	r3, r0
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d001      	beq.n	8009c8e <HAL_TIM_IC_Start_DMA+0x2de>
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	e00a      	b.n	8009ca4 <HAL_TIM_IC_Start_DMA+0x2f4>
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	68da      	ldr	r2, [r3, #12]
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009c9c:	60da      	str	r2, [r3, #12]
 8009c9e:	e000      	b.n	8009ca2 <HAL_TIM_IC_Start_DMA+0x2f2>
 8009ca0:	bf00      	nop
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3718      	adds	r7, #24
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}
 8009cac:	40012c00 	.word	0x40012c00
 8009cb0:	40000400 	.word	0x40000400
 8009cb4:	40000800 	.word	0x40000800
 8009cb8:	0800a471 	.word	0x0800a471
 8009cbc:	0800a539 	.word	0x0800a539
 8009cc0:	0800a3df 	.word	0x0800a3df

08009cc4 <HAL_TIM_IRQHandler>:
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b082      	sub	sp, #8
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	691b      	ldr	r3, [r3, #16]
 8009cd2:	f003 0302 	and.w	r3, r3, #2
 8009cd6:	2b02      	cmp	r3, #2
 8009cd8:	d122      	bne.n	8009d20 <HAL_TIM_IRQHandler+0x5c>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	68db      	ldr	r3, [r3, #12]
 8009ce0:	f003 0302 	and.w	r3, r3, #2
 8009ce4:	2b02      	cmp	r3, #2
 8009ce6:	d11b      	bne.n	8009d20 <HAL_TIM_IRQHandler+0x5c>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f06f 0202 	mvn.w	r2, #2
 8009cf0:	611a      	str	r2, [r3, #16]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2201      	movs	r2, #1
 8009cf6:	771a      	strb	r2, [r3, #28]
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	699b      	ldr	r3, [r3, #24]
 8009cfe:	f003 0303 	and.w	r3, r3, #3
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d003      	beq.n	8009d0e <HAL_TIM_IRQHandler+0x4a>
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f7fa ff62 	bl	8004bd0 <HAL_TIM_IC_CaptureCallback>
 8009d0c:	e005      	b.n	8009d1a <HAL_TIM_IRQHandler+0x56>
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f000 fb38 	bl	800a384 <HAL_TIM_OC_DelayElapsedCallback>
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f000 fb47 	bl	800a3a8 <HAL_TIM_PWM_PulseFinishedCallback>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	771a      	strb	r2, [r3, #28]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	691b      	ldr	r3, [r3, #16]
 8009d26:	f003 0304 	and.w	r3, r3, #4
 8009d2a:	2b04      	cmp	r3, #4
 8009d2c:	d122      	bne.n	8009d74 <HAL_TIM_IRQHandler+0xb0>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	68db      	ldr	r3, [r3, #12]
 8009d34:	f003 0304 	and.w	r3, r3, #4
 8009d38:	2b04      	cmp	r3, #4
 8009d3a:	d11b      	bne.n	8009d74 <HAL_TIM_IRQHandler+0xb0>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f06f 0204 	mvn.w	r2, #4
 8009d44:	611a      	str	r2, [r3, #16]
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2202      	movs	r2, #2
 8009d4a:	771a      	strb	r2, [r3, #28]
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	699b      	ldr	r3, [r3, #24]
 8009d52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d003      	beq.n	8009d62 <HAL_TIM_IRQHandler+0x9e>
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f7fa ff38 	bl	8004bd0 <HAL_TIM_IC_CaptureCallback>
 8009d60:	e005      	b.n	8009d6e <HAL_TIM_IRQHandler+0xaa>
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f000 fb0e 	bl	800a384 <HAL_TIM_OC_DelayElapsedCallback>
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f000 fb1d 	bl	800a3a8 <HAL_TIM_PWM_PulseFinishedCallback>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2200      	movs	r2, #0
 8009d72:	771a      	strb	r2, [r3, #28]
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	691b      	ldr	r3, [r3, #16]
 8009d7a:	f003 0308 	and.w	r3, r3, #8
 8009d7e:	2b08      	cmp	r3, #8
 8009d80:	d122      	bne.n	8009dc8 <HAL_TIM_IRQHandler+0x104>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	68db      	ldr	r3, [r3, #12]
 8009d88:	f003 0308 	and.w	r3, r3, #8
 8009d8c:	2b08      	cmp	r3, #8
 8009d8e:	d11b      	bne.n	8009dc8 <HAL_TIM_IRQHandler+0x104>
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f06f 0208 	mvn.w	r2, #8
 8009d98:	611a      	str	r2, [r3, #16]
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2204      	movs	r2, #4
 8009d9e:	771a      	strb	r2, [r3, #28]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	69db      	ldr	r3, [r3, #28]
 8009da6:	f003 0303 	and.w	r3, r3, #3
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d003      	beq.n	8009db6 <HAL_TIM_IRQHandler+0xf2>
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f7fa ff0e 	bl	8004bd0 <HAL_TIM_IC_CaptureCallback>
 8009db4:	e005      	b.n	8009dc2 <HAL_TIM_IRQHandler+0xfe>
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f000 fae4 	bl	800a384 <HAL_TIM_OC_DelayElapsedCallback>
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f000 faf3 	bl	800a3a8 <HAL_TIM_PWM_PulseFinishedCallback>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	771a      	strb	r2, [r3, #28]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	691b      	ldr	r3, [r3, #16]
 8009dce:	f003 0310 	and.w	r3, r3, #16
 8009dd2:	2b10      	cmp	r3, #16
 8009dd4:	d122      	bne.n	8009e1c <HAL_TIM_IRQHandler+0x158>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	68db      	ldr	r3, [r3, #12]
 8009ddc:	f003 0310 	and.w	r3, r3, #16
 8009de0:	2b10      	cmp	r3, #16
 8009de2:	d11b      	bne.n	8009e1c <HAL_TIM_IRQHandler+0x158>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f06f 0210 	mvn.w	r2, #16
 8009dec:	611a      	str	r2, [r3, #16]
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2208      	movs	r2, #8
 8009df2:	771a      	strb	r2, [r3, #28]
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	69db      	ldr	r3, [r3, #28]
 8009dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d003      	beq.n	8009e0a <HAL_TIM_IRQHandler+0x146>
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f7fa fee4 	bl	8004bd0 <HAL_TIM_IC_CaptureCallback>
 8009e08:	e005      	b.n	8009e16 <HAL_TIM_IRQHandler+0x152>
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f000 faba 	bl	800a384 <HAL_TIM_OC_DelayElapsedCallback>
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f000 fac9 	bl	800a3a8 <HAL_TIM_PWM_PulseFinishedCallback>
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	771a      	strb	r2, [r3, #28]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	691b      	ldr	r3, [r3, #16]
 8009e22:	f003 0301 	and.w	r3, r3, #1
 8009e26:	2b01      	cmp	r3, #1
 8009e28:	d10e      	bne.n	8009e48 <HAL_TIM_IRQHandler+0x184>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	68db      	ldr	r3, [r3, #12]
 8009e30:	f003 0301 	and.w	r3, r3, #1
 8009e34:	2b01      	cmp	r3, #1
 8009e36:	d107      	bne.n	8009e48 <HAL_TIM_IRQHandler+0x184>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f06f 0201 	mvn.w	r2, #1
 8009e40:	611a      	str	r2, [r3, #16]
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f7fa ff0a 	bl	8004c5c <HAL_TIM_PeriodElapsedCallback>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	691b      	ldr	r3, [r3, #16]
 8009e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e52:	2b80      	cmp	r3, #128	; 0x80
 8009e54:	d10e      	bne.n	8009e74 <HAL_TIM_IRQHandler+0x1b0>
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	68db      	ldr	r3, [r3, #12]
 8009e5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e60:	2b80      	cmp	r3, #128	; 0x80
 8009e62:	d107      	bne.n	8009e74 <HAL_TIM_IRQHandler+0x1b0>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009e6c:	611a      	str	r2, [r3, #16]
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f001 f83d 	bl	800aeee <HAL_TIMEx_BreakCallback>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	691b      	ldr	r3, [r3, #16]
 8009e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e7e:	2b40      	cmp	r3, #64	; 0x40
 8009e80:	d10e      	bne.n	8009ea0 <HAL_TIM_IRQHandler+0x1dc>
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	68db      	ldr	r3, [r3, #12]
 8009e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e8c:	2b40      	cmp	r3, #64	; 0x40
 8009e8e:	d107      	bne.n	8009ea0 <HAL_TIM_IRQHandler+0x1dc>
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009e98:	611a      	str	r2, [r3, #16]
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f000 fa8d 	bl	800a3ba <HAL_TIM_TriggerCallback>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	691b      	ldr	r3, [r3, #16]
 8009ea6:	f003 0320 	and.w	r3, r3, #32
 8009eaa:	2b20      	cmp	r3, #32
 8009eac:	d10e      	bne.n	8009ecc <HAL_TIM_IRQHandler+0x208>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	68db      	ldr	r3, [r3, #12]
 8009eb4:	f003 0320 	and.w	r3, r3, #32
 8009eb8:	2b20      	cmp	r3, #32
 8009eba:	d107      	bne.n	8009ecc <HAL_TIM_IRQHandler+0x208>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f06f 0220 	mvn.w	r2, #32
 8009ec4:	611a      	str	r2, [r3, #16]
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f001 f808 	bl	800aedc <HAL_TIMEx_CommutCallback>
 8009ecc:	bf00      	nop
 8009ece:	3708      	adds	r7, #8
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}

08009ed4 <HAL_TIM_IC_ConfigChannel>:
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b084      	sub	sp, #16
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	60f8      	str	r0, [r7, #12]
 8009edc:	60b9      	str	r1, [r7, #8]
 8009ede:	607a      	str	r2, [r7, #4]
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ee6:	2b01      	cmp	r3, #1
 8009ee8:	d101      	bne.n	8009eee <HAL_TIM_IC_ConfigChannel+0x1a>
 8009eea:	2302      	movs	r3, #2
 8009eec:	e082      	b.n	8009ff4 <HAL_TIM_IC_ConfigChannel+0x120>
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	2201      	movs	r2, #1
 8009ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d11b      	bne.n	8009f34 <HAL_TIM_IC_ConfigChannel+0x60>
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	6818      	ldr	r0, [r3, #0]
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	6819      	ldr	r1, [r3, #0]
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	685a      	ldr	r2, [r3, #4]
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	68db      	ldr	r3, [r3, #12]
 8009f0c:	f000 fdc0 	bl	800aa90 <TIM_TI1_SetConfig>
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	699a      	ldr	r2, [r3, #24]
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f022 020c 	bic.w	r2, r2, #12
 8009f1e:	619a      	str	r2, [r3, #24]
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	6999      	ldr	r1, [r3, #24]
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	689a      	ldr	r2, [r3, #8]
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	430a      	orrs	r2, r1
 8009f30:	619a      	str	r2, [r3, #24]
 8009f32:	e05a      	b.n	8009fea <HAL_TIM_IC_ConfigChannel+0x116>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2b04      	cmp	r3, #4
 8009f38:	d11c      	bne.n	8009f74 <HAL_TIM_IC_ConfigChannel+0xa0>
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	6818      	ldr	r0, [r3, #0]
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	6819      	ldr	r1, [r3, #0]
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	685a      	ldr	r2, [r3, #4]
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	68db      	ldr	r3, [r3, #12]
 8009f4a:	f000 fe29 	bl	800aba0 <TIM_TI2_SetConfig>
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	699a      	ldr	r2, [r3, #24]
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009f5c:	619a      	str	r2, [r3, #24]
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	6999      	ldr	r1, [r3, #24]
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	689b      	ldr	r3, [r3, #8]
 8009f68:	021a      	lsls	r2, r3, #8
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	430a      	orrs	r2, r1
 8009f70:	619a      	str	r2, [r3, #24]
 8009f72:	e03a      	b.n	8009fea <HAL_TIM_IC_ConfigChannel+0x116>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2b08      	cmp	r3, #8
 8009f78:	d11b      	bne.n	8009fb2 <HAL_TIM_IC_ConfigChannel+0xde>
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	6818      	ldr	r0, [r3, #0]
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	6819      	ldr	r1, [r3, #0]
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	685a      	ldr	r2, [r3, #4]
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	68db      	ldr	r3, [r3, #12]
 8009f8a:	f000 fe74 	bl	800ac76 <TIM_TI3_SetConfig>
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	69da      	ldr	r2, [r3, #28]
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f022 020c 	bic.w	r2, r2, #12
 8009f9c:	61da      	str	r2, [r3, #28]
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	69d9      	ldr	r1, [r3, #28]
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	689a      	ldr	r2, [r3, #8]
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	430a      	orrs	r2, r1
 8009fae:	61da      	str	r2, [r3, #28]
 8009fb0:	e01b      	b.n	8009fea <HAL_TIM_IC_ConfigChannel+0x116>
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	6818      	ldr	r0, [r3, #0]
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	6819      	ldr	r1, [r3, #0]
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	685a      	ldr	r2, [r3, #4]
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	68db      	ldr	r3, [r3, #12]
 8009fc2:	f000 fe93 	bl	800acec <TIM_TI4_SetConfig>
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	69da      	ldr	r2, [r3, #28]
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009fd4:	61da      	str	r2, [r3, #28]
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	69d9      	ldr	r1, [r3, #28]
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	689b      	ldr	r3, [r3, #8]
 8009fe0:	021a      	lsls	r2, r3, #8
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	430a      	orrs	r2, r1
 8009fe8:	61da      	str	r2, [r3, #28]
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	2200      	movs	r2, #0
 8009fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3710      	adds	r7, #16
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}

08009ffc <HAL_TIM_PWM_ConfigChannel>:
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b084      	sub	sp, #16
 800a000:	af00      	add	r7, sp, #0
 800a002:	60f8      	str	r0, [r7, #12]
 800a004:	60b9      	str	r1, [r7, #8]
 800a006:	607a      	str	r2, [r7, #4]
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a00e:	2b01      	cmp	r3, #1
 800a010:	d101      	bne.n	800a016 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a012:	2302      	movs	r3, #2
 800a014:	e0ac      	b.n	800a170 <HAL_TIM_PWM_ConfigChannel+0x174>
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	2201      	movs	r2, #1
 800a01a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2b0c      	cmp	r3, #12
 800a022:	f200 809f 	bhi.w	800a164 <HAL_TIM_PWM_ConfigChannel+0x168>
 800a026:	a201      	add	r2, pc, #4	; (adr r2, 800a02c <HAL_TIM_PWM_ConfigChannel+0x30>)
 800a028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a02c:	0800a061 	.word	0x0800a061
 800a030:	0800a165 	.word	0x0800a165
 800a034:	0800a165 	.word	0x0800a165
 800a038:	0800a165 	.word	0x0800a165
 800a03c:	0800a0a1 	.word	0x0800a0a1
 800a040:	0800a165 	.word	0x0800a165
 800a044:	0800a165 	.word	0x0800a165
 800a048:	0800a165 	.word	0x0800a165
 800a04c:	0800a0e3 	.word	0x0800a0e3
 800a050:	0800a165 	.word	0x0800a165
 800a054:	0800a165 	.word	0x0800a165
 800a058:	0800a165 	.word	0x0800a165
 800a05c:	0800a123 	.word	0x0800a123
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	68b9      	ldr	r1, [r7, #8]
 800a066:	4618      	mov	r0, r3
 800a068:	f000 fafc 	bl	800a664 <TIM_OC1_SetConfig>
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	699a      	ldr	r2, [r3, #24]
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f042 0208 	orr.w	r2, r2, #8
 800a07a:	619a      	str	r2, [r3, #24]
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	699a      	ldr	r2, [r3, #24]
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f022 0204 	bic.w	r2, r2, #4
 800a08a:	619a      	str	r2, [r3, #24]
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	6999      	ldr	r1, [r3, #24]
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	691a      	ldr	r2, [r3, #16]
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	430a      	orrs	r2, r1
 800a09c:	619a      	str	r2, [r3, #24]
 800a09e:	e062      	b.n	800a166 <HAL_TIM_PWM_ConfigChannel+0x16a>
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	68b9      	ldr	r1, [r7, #8]
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f000 fb42 	bl	800a730 <TIM_OC2_SetConfig>
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	699a      	ldr	r2, [r3, #24]
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a0ba:	619a      	str	r2, [r3, #24]
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	699a      	ldr	r2, [r3, #24]
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a0ca:	619a      	str	r2, [r3, #24]
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	6999      	ldr	r1, [r3, #24]
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	691b      	ldr	r3, [r3, #16]
 800a0d6:	021a      	lsls	r2, r3, #8
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	430a      	orrs	r2, r1
 800a0de:	619a      	str	r2, [r3, #24]
 800a0e0:	e041      	b.n	800a166 <HAL_TIM_PWM_ConfigChannel+0x16a>
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	68b9      	ldr	r1, [r7, #8]
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	f000 fb8b 	bl	800a804 <TIM_OC3_SetConfig>
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	69da      	ldr	r2, [r3, #28]
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f042 0208 	orr.w	r2, r2, #8
 800a0fc:	61da      	str	r2, [r3, #28]
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	69da      	ldr	r2, [r3, #28]
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f022 0204 	bic.w	r2, r2, #4
 800a10c:	61da      	str	r2, [r3, #28]
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	69d9      	ldr	r1, [r3, #28]
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	691a      	ldr	r2, [r3, #16]
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	430a      	orrs	r2, r1
 800a11e:	61da      	str	r2, [r3, #28]
 800a120:	e021      	b.n	800a166 <HAL_TIM_PWM_ConfigChannel+0x16a>
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	68b9      	ldr	r1, [r7, #8]
 800a128:	4618      	mov	r0, r3
 800a12a:	f000 fbd5 	bl	800a8d8 <TIM_OC4_SetConfig>
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	69da      	ldr	r2, [r3, #28]
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a13c:	61da      	str	r2, [r3, #28]
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	69da      	ldr	r2, [r3, #28]
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a14c:	61da      	str	r2, [r3, #28]
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	69d9      	ldr	r1, [r3, #28]
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	691b      	ldr	r3, [r3, #16]
 800a158:	021a      	lsls	r2, r3, #8
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	430a      	orrs	r2, r1
 800a160:	61da      	str	r2, [r3, #28]
 800a162:	e000      	b.n	800a166 <HAL_TIM_PWM_ConfigChannel+0x16a>
 800a164:	bf00      	nop
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	2200      	movs	r2, #0
 800a16a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a16e:	2300      	movs	r3, #0
 800a170:	4618      	mov	r0, r3
 800a172:	3710      	adds	r7, #16
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}

0800a178 <HAL_TIM_ConfigClockSource>:
 800a178:	b580      	push	{r7, lr}
 800a17a:	b084      	sub	sp, #16
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
 800a180:	6039      	str	r1, [r7, #0]
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a188:	2b01      	cmp	r3, #1
 800a18a:	d101      	bne.n	800a190 <HAL_TIM_ConfigClockSource+0x18>
 800a18c:	2302      	movs	r3, #2
 800a18e:	e0b3      	b.n	800a2f8 <HAL_TIM_ConfigClockSource+0x180>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2201      	movs	r2, #1
 800a194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2202      	movs	r2, #2
 800a19c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	689b      	ldr	r3, [r3, #8]
 800a1a6:	60fb      	str	r3, [r7, #12]
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a1ae:	60fb      	str	r3, [r7, #12]
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a1b6:	60fb      	str	r3, [r7, #12]
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	68fa      	ldr	r2, [r7, #12]
 800a1be:	609a      	str	r2, [r3, #8]
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a1c8:	d03e      	beq.n	800a248 <HAL_TIM_ConfigClockSource+0xd0>
 800a1ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a1ce:	f200 8087 	bhi.w	800a2e0 <HAL_TIM_ConfigClockSource+0x168>
 800a1d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1d6:	f000 8085 	beq.w	800a2e4 <HAL_TIM_ConfigClockSource+0x16c>
 800a1da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1de:	d87f      	bhi.n	800a2e0 <HAL_TIM_ConfigClockSource+0x168>
 800a1e0:	2b70      	cmp	r3, #112	; 0x70
 800a1e2:	d01a      	beq.n	800a21a <HAL_TIM_ConfigClockSource+0xa2>
 800a1e4:	2b70      	cmp	r3, #112	; 0x70
 800a1e6:	d87b      	bhi.n	800a2e0 <HAL_TIM_ConfigClockSource+0x168>
 800a1e8:	2b60      	cmp	r3, #96	; 0x60
 800a1ea:	d050      	beq.n	800a28e <HAL_TIM_ConfigClockSource+0x116>
 800a1ec:	2b60      	cmp	r3, #96	; 0x60
 800a1ee:	d877      	bhi.n	800a2e0 <HAL_TIM_ConfigClockSource+0x168>
 800a1f0:	2b50      	cmp	r3, #80	; 0x50
 800a1f2:	d03c      	beq.n	800a26e <HAL_TIM_ConfigClockSource+0xf6>
 800a1f4:	2b50      	cmp	r3, #80	; 0x50
 800a1f6:	d873      	bhi.n	800a2e0 <HAL_TIM_ConfigClockSource+0x168>
 800a1f8:	2b40      	cmp	r3, #64	; 0x40
 800a1fa:	d058      	beq.n	800a2ae <HAL_TIM_ConfigClockSource+0x136>
 800a1fc:	2b40      	cmp	r3, #64	; 0x40
 800a1fe:	d86f      	bhi.n	800a2e0 <HAL_TIM_ConfigClockSource+0x168>
 800a200:	2b30      	cmp	r3, #48	; 0x30
 800a202:	d064      	beq.n	800a2ce <HAL_TIM_ConfigClockSource+0x156>
 800a204:	2b30      	cmp	r3, #48	; 0x30
 800a206:	d86b      	bhi.n	800a2e0 <HAL_TIM_ConfigClockSource+0x168>
 800a208:	2b20      	cmp	r3, #32
 800a20a:	d060      	beq.n	800a2ce <HAL_TIM_ConfigClockSource+0x156>
 800a20c:	2b20      	cmp	r3, #32
 800a20e:	d867      	bhi.n	800a2e0 <HAL_TIM_ConfigClockSource+0x168>
 800a210:	2b00      	cmp	r3, #0
 800a212:	d05c      	beq.n	800a2ce <HAL_TIM_ConfigClockSource+0x156>
 800a214:	2b10      	cmp	r3, #16
 800a216:	d05a      	beq.n	800a2ce <HAL_TIM_ConfigClockSource+0x156>
 800a218:	e062      	b.n	800a2e0 <HAL_TIM_ConfigClockSource+0x168>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6818      	ldr	r0, [r3, #0]
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	6899      	ldr	r1, [r3, #8]
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	685a      	ldr	r2, [r3, #4]
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	68db      	ldr	r3, [r3, #12]
 800a22a:	f000 fdb5 	bl	800ad98 <TIM_ETR_SetConfig>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	689b      	ldr	r3, [r3, #8]
 800a234:	60fb      	str	r3, [r7, #12]
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a23c:	60fb      	str	r3, [r7, #12]
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	68fa      	ldr	r2, [r7, #12]
 800a244:	609a      	str	r2, [r3, #8]
 800a246:	e04e      	b.n	800a2e6 <HAL_TIM_ConfigClockSource+0x16e>
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6818      	ldr	r0, [r3, #0]
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	6899      	ldr	r1, [r3, #8]
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	685a      	ldr	r2, [r3, #4]
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	68db      	ldr	r3, [r3, #12]
 800a258:	f000 fd9e 	bl	800ad98 <TIM_ETR_SetConfig>
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	689a      	ldr	r2, [r3, #8]
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a26a:	609a      	str	r2, [r3, #8]
 800a26c:	e03b      	b.n	800a2e6 <HAL_TIM_ConfigClockSource+0x16e>
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6818      	ldr	r0, [r3, #0]
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	6859      	ldr	r1, [r3, #4]
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	68db      	ldr	r3, [r3, #12]
 800a27a:	461a      	mov	r2, r3
 800a27c:	f000 fc62 	bl	800ab44 <TIM_TI1_ConfigInputStage>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	2150      	movs	r1, #80	; 0x50
 800a286:	4618      	mov	r0, r3
 800a288:	f000 fd6c 	bl	800ad64 <TIM_ITRx_SetConfig>
 800a28c:	e02b      	b.n	800a2e6 <HAL_TIM_ConfigClockSource+0x16e>
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6818      	ldr	r0, [r3, #0]
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	6859      	ldr	r1, [r3, #4]
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	68db      	ldr	r3, [r3, #12]
 800a29a:	461a      	mov	r2, r3
 800a29c:	f000 fcbc 	bl	800ac18 <TIM_TI2_ConfigInputStage>
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	2160      	movs	r1, #96	; 0x60
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f000 fd5c 	bl	800ad64 <TIM_ITRx_SetConfig>
 800a2ac:	e01b      	b.n	800a2e6 <HAL_TIM_ConfigClockSource+0x16e>
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6818      	ldr	r0, [r3, #0]
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	6859      	ldr	r1, [r3, #4]
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	68db      	ldr	r3, [r3, #12]
 800a2ba:	461a      	mov	r2, r3
 800a2bc:	f000 fc42 	bl	800ab44 <TIM_TI1_ConfigInputStage>
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	2140      	movs	r1, #64	; 0x40
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f000 fd4c 	bl	800ad64 <TIM_ITRx_SetConfig>
 800a2cc:	e00b      	b.n	800a2e6 <HAL_TIM_ConfigClockSource+0x16e>
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681a      	ldr	r2, [r3, #0]
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	4619      	mov	r1, r3
 800a2d8:	4610      	mov	r0, r2
 800a2da:	f000 fd43 	bl	800ad64 <TIM_ITRx_SetConfig>
 800a2de:	e002      	b.n	800a2e6 <HAL_TIM_ConfigClockSource+0x16e>
 800a2e0:	bf00      	nop
 800a2e2:	e000      	b.n	800a2e6 <HAL_TIM_ConfigClockSource+0x16e>
 800a2e4:	bf00      	nop
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2201      	movs	r2, #1
 800a2ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3710      	adds	r7, #16
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}

0800a300 <HAL_TIM_SlaveConfigSynchro>:
 800a300:	b580      	push	{r7, lr}
 800a302:	b082      	sub	sp, #8
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
 800a308:	6039      	str	r1, [r7, #0]
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a310:	2b01      	cmp	r3, #1
 800a312:	d101      	bne.n	800a318 <HAL_TIM_SlaveConfigSynchro+0x18>
 800a314:	2302      	movs	r3, #2
 800a316:	e031      	b.n	800a37c <HAL_TIM_SlaveConfigSynchro+0x7c>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2201      	movs	r2, #1
 800a31c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2202      	movs	r2, #2
 800a324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a328:	6839      	ldr	r1, [r7, #0]
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f000 fb22 	bl	800a974 <TIM_SlaveTimer_SetConfig>
 800a330:	4603      	mov	r3, r0
 800a332:	2b00      	cmp	r3, #0
 800a334:	d009      	beq.n	800a34a <HAL_TIM_SlaveConfigSynchro+0x4a>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2201      	movs	r2, #1
 800a33a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2200      	movs	r2, #0
 800a342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a346:	2301      	movs	r3, #1
 800a348:	e018      	b.n	800a37c <HAL_TIM_SlaveConfigSynchro+0x7c>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	68da      	ldr	r2, [r3, #12]
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a358:	60da      	str	r2, [r3, #12]
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	68da      	ldr	r2, [r3, #12]
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a368:	60da      	str	r2, [r3, #12]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2201      	movs	r2, #1
 800a36e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2200      	movs	r2, #0
 800a376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a37a:	2300      	movs	r3, #0
 800a37c:	4618      	mov	r0, r3
 800a37e:	3708      	adds	r7, #8
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}

0800a384 <HAL_TIM_OC_DelayElapsedCallback>:
 800a384:	b480      	push	{r7}
 800a386:	b083      	sub	sp, #12
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
 800a38c:	bf00      	nop
 800a38e:	370c      	adds	r7, #12
 800a390:	46bd      	mov	sp, r7
 800a392:	bc80      	pop	{r7}
 800a394:	4770      	bx	lr

0800a396 <HAL_TIM_IC_CaptureHalfCpltCallback>:
 800a396:	b480      	push	{r7}
 800a398:	b083      	sub	sp, #12
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	6078      	str	r0, [r7, #4]
 800a39e:	bf00      	nop
 800a3a0:	370c      	adds	r7, #12
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bc80      	pop	{r7}
 800a3a6:	4770      	bx	lr

0800a3a8 <HAL_TIM_PWM_PulseFinishedCallback>:
 800a3a8:	b480      	push	{r7}
 800a3aa:	b083      	sub	sp, #12
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	bf00      	nop
 800a3b2:	370c      	adds	r7, #12
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bc80      	pop	{r7}
 800a3b8:	4770      	bx	lr

0800a3ba <HAL_TIM_TriggerCallback>:
 800a3ba:	b480      	push	{r7}
 800a3bc:	b083      	sub	sp, #12
 800a3be:	af00      	add	r7, sp, #0
 800a3c0:	6078      	str	r0, [r7, #4]
 800a3c2:	bf00      	nop
 800a3c4:	370c      	adds	r7, #12
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bc80      	pop	{r7}
 800a3ca:	4770      	bx	lr

0800a3cc <HAL_TIM_ErrorCallback>:
 800a3cc:	b480      	push	{r7}
 800a3ce:	b083      	sub	sp, #12
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
 800a3d4:	bf00      	nop
 800a3d6:	370c      	adds	r7, #12
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bc80      	pop	{r7}
 800a3dc:	4770      	bx	lr

0800a3de <TIM_DMAError>:
 800a3de:	b580      	push	{r7, lr}
 800a3e0:	b084      	sub	sp, #16
 800a3e2:	af00      	add	r7, sp, #0
 800a3e4:	6078      	str	r0, [r7, #4]
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ea:	60fb      	str	r3, [r7, #12]
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f0:	687a      	ldr	r2, [r7, #4]
 800a3f2:	429a      	cmp	r2, r3
 800a3f4:	d107      	bne.n	800a406 <TIM_DMAError+0x28>
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	771a      	strb	r2, [r3, #28]
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	2201      	movs	r2, #1
 800a400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a404:	e02a      	b.n	800a45c <TIM_DMAError+0x7e>
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a40a:	687a      	ldr	r2, [r7, #4]
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d107      	bne.n	800a420 <TIM_DMAError+0x42>
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	2202      	movs	r2, #2
 800a414:	771a      	strb	r2, [r3, #28]
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2201      	movs	r2, #1
 800a41a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a41e:	e01d      	b.n	800a45c <TIM_DMAError+0x7e>
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a424:	687a      	ldr	r2, [r7, #4]
 800a426:	429a      	cmp	r2, r3
 800a428:	d107      	bne.n	800a43a <TIM_DMAError+0x5c>
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	2204      	movs	r2, #4
 800a42e:	771a      	strb	r2, [r3, #28]
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	2201      	movs	r2, #1
 800a434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a438:	e010      	b.n	800a45c <TIM_DMAError+0x7e>
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a43e:	687a      	ldr	r2, [r7, #4]
 800a440:	429a      	cmp	r2, r3
 800a442:	d107      	bne.n	800a454 <TIM_DMAError+0x76>
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	2208      	movs	r2, #8
 800a448:	771a      	strb	r2, [r3, #28]
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	2201      	movs	r2, #1
 800a44e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a452:	e003      	b.n	800a45c <TIM_DMAError+0x7e>
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	2201      	movs	r2, #1
 800a458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a45c:	68f8      	ldr	r0, [r7, #12]
 800a45e:	f7ff ffb5 	bl	800a3cc <HAL_TIM_ErrorCallback>
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2200      	movs	r2, #0
 800a466:	771a      	strb	r2, [r3, #28]
 800a468:	bf00      	nop
 800a46a:	3710      	adds	r7, #16
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}

0800a470 <TIM_DMACaptureCplt>:
 800a470:	b580      	push	{r7, lr}
 800a472:	b084      	sub	sp, #16
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a47c:	60fb      	str	r3, [r7, #12]
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a482:	687a      	ldr	r2, [r7, #4]
 800a484:	429a      	cmp	r2, r3
 800a486:	d10f      	bne.n	800a4a8 <TIM_DMACaptureCplt+0x38>
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	2201      	movs	r2, #1
 800a48c:	771a      	strb	r2, [r3, #28]
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	699b      	ldr	r3, [r3, #24]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d146      	bne.n	800a524 <TIM_DMACaptureCplt+0xb4>
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	2201      	movs	r2, #1
 800a49a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	2201      	movs	r2, #1
 800a4a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a4a6:	e03d      	b.n	800a524 <TIM_DMACaptureCplt+0xb4>
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4ac:	687a      	ldr	r2, [r7, #4]
 800a4ae:	429a      	cmp	r2, r3
 800a4b0:	d10f      	bne.n	800a4d2 <TIM_DMACaptureCplt+0x62>
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	2202      	movs	r2, #2
 800a4b6:	771a      	strb	r2, [r3, #28]
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	699b      	ldr	r3, [r3, #24]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d131      	bne.n	800a524 <TIM_DMACaptureCplt+0xb4>
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	2201      	movs	r2, #1
 800a4c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2201      	movs	r2, #1
 800a4cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a4d0:	e028      	b.n	800a524 <TIM_DMACaptureCplt+0xb4>
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4d6:	687a      	ldr	r2, [r7, #4]
 800a4d8:	429a      	cmp	r2, r3
 800a4da:	d10f      	bne.n	800a4fc <TIM_DMACaptureCplt+0x8c>
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	2204      	movs	r2, #4
 800a4e0:	771a      	strb	r2, [r3, #28]
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	699b      	ldr	r3, [r3, #24]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d11c      	bne.n	800a524 <TIM_DMACaptureCplt+0xb4>
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	2201      	movs	r2, #1
 800a4ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	2201      	movs	r2, #1
 800a4f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a4fa:	e013      	b.n	800a524 <TIM_DMACaptureCplt+0xb4>
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a500:	687a      	ldr	r2, [r7, #4]
 800a502:	429a      	cmp	r2, r3
 800a504:	d10e      	bne.n	800a524 <TIM_DMACaptureCplt+0xb4>
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	2208      	movs	r2, #8
 800a50a:	771a      	strb	r2, [r3, #28]
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	699b      	ldr	r3, [r3, #24]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d107      	bne.n	800a524 <TIM_DMACaptureCplt+0xb4>
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	2201      	movs	r2, #1
 800a518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	2201      	movs	r2, #1
 800a520:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a524:	68f8      	ldr	r0, [r7, #12]
 800a526:	f7fa fb53 	bl	8004bd0 <HAL_TIM_IC_CaptureCallback>
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	2200      	movs	r2, #0
 800a52e:	771a      	strb	r2, [r3, #28]
 800a530:	bf00      	nop
 800a532:	3710      	adds	r7, #16
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}

0800a538 <TIM_DMACaptureHalfCplt>:
 800a538:	b580      	push	{r7, lr}
 800a53a:	b084      	sub	sp, #16
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a544:	60fb      	str	r3, [r7, #12]
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a54a:	687a      	ldr	r2, [r7, #4]
 800a54c:	429a      	cmp	r2, r3
 800a54e:	d103      	bne.n	800a558 <TIM_DMACaptureHalfCplt+0x20>
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	2201      	movs	r2, #1
 800a554:	771a      	strb	r2, [r3, #28]
 800a556:	e019      	b.n	800a58c <TIM_DMACaptureHalfCplt+0x54>
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a55c:	687a      	ldr	r2, [r7, #4]
 800a55e:	429a      	cmp	r2, r3
 800a560:	d103      	bne.n	800a56a <TIM_DMACaptureHalfCplt+0x32>
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	2202      	movs	r2, #2
 800a566:	771a      	strb	r2, [r3, #28]
 800a568:	e010      	b.n	800a58c <TIM_DMACaptureHalfCplt+0x54>
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a56e:	687a      	ldr	r2, [r7, #4]
 800a570:	429a      	cmp	r2, r3
 800a572:	d103      	bne.n	800a57c <TIM_DMACaptureHalfCplt+0x44>
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	2204      	movs	r2, #4
 800a578:	771a      	strb	r2, [r3, #28]
 800a57a:	e007      	b.n	800a58c <TIM_DMACaptureHalfCplt+0x54>
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a580:	687a      	ldr	r2, [r7, #4]
 800a582:	429a      	cmp	r2, r3
 800a584:	d102      	bne.n	800a58c <TIM_DMACaptureHalfCplt+0x54>
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	2208      	movs	r2, #8
 800a58a:	771a      	strb	r2, [r3, #28]
 800a58c:	68f8      	ldr	r0, [r7, #12]
 800a58e:	f7ff ff02 	bl	800a396 <HAL_TIM_IC_CaptureHalfCpltCallback>
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	2200      	movs	r2, #0
 800a596:	771a      	strb	r2, [r3, #28]
 800a598:	bf00      	nop
 800a59a:	3710      	adds	r7, #16
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}

0800a5a0 <TIM_Base_SetConfig>:
 800a5a0:	b480      	push	{r7}
 800a5a2:	b085      	sub	sp, #20
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
 800a5a8:	6039      	str	r1, [r7, #0]
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	60fb      	str	r3, [r7, #12]
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	4a29      	ldr	r2, [pc, #164]	; (800a658 <TIM_Base_SetConfig+0xb8>)
 800a5b4:	4293      	cmp	r3, r2
 800a5b6:	d00b      	beq.n	800a5d0 <TIM_Base_SetConfig+0x30>
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5be:	d007      	beq.n	800a5d0 <TIM_Base_SetConfig+0x30>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	4a26      	ldr	r2, [pc, #152]	; (800a65c <TIM_Base_SetConfig+0xbc>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d003      	beq.n	800a5d0 <TIM_Base_SetConfig+0x30>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	4a25      	ldr	r2, [pc, #148]	; (800a660 <TIM_Base_SetConfig+0xc0>)
 800a5cc:	4293      	cmp	r3, r2
 800a5ce:	d108      	bne.n	800a5e2 <TIM_Base_SetConfig+0x42>
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5d6:	60fb      	str	r3, [r7, #12]
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	685b      	ldr	r3, [r3, #4]
 800a5dc:	68fa      	ldr	r2, [r7, #12]
 800a5de:	4313      	orrs	r3, r2
 800a5e0:	60fb      	str	r3, [r7, #12]
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	4a1c      	ldr	r2, [pc, #112]	; (800a658 <TIM_Base_SetConfig+0xb8>)
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	d00b      	beq.n	800a602 <TIM_Base_SetConfig+0x62>
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5f0:	d007      	beq.n	800a602 <TIM_Base_SetConfig+0x62>
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	4a19      	ldr	r2, [pc, #100]	; (800a65c <TIM_Base_SetConfig+0xbc>)
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	d003      	beq.n	800a602 <TIM_Base_SetConfig+0x62>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	4a18      	ldr	r2, [pc, #96]	; (800a660 <TIM_Base_SetConfig+0xc0>)
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d108      	bne.n	800a614 <TIM_Base_SetConfig+0x74>
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a608:	60fb      	str	r3, [r7, #12]
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	68db      	ldr	r3, [r3, #12]
 800a60e:	68fa      	ldr	r2, [r7, #12]
 800a610:	4313      	orrs	r3, r2
 800a612:	60fb      	str	r3, [r7, #12]
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	695b      	ldr	r3, [r3, #20]
 800a61e:	4313      	orrs	r3, r2
 800a620:	60fb      	str	r3, [r7, #12]
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	68fa      	ldr	r2, [r7, #12]
 800a626:	601a      	str	r2, [r3, #0]
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	689a      	ldr	r2, [r3, #8]
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	62da      	str	r2, [r3, #44]	; 0x2c
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	681a      	ldr	r2, [r3, #0]
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	629a      	str	r2, [r3, #40]	; 0x28
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	4a07      	ldr	r2, [pc, #28]	; (800a658 <TIM_Base_SetConfig+0xb8>)
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d103      	bne.n	800a648 <TIM_Base_SetConfig+0xa8>
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	691a      	ldr	r2, [r3, #16]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	631a      	str	r2, [r3, #48]	; 0x30
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2201      	movs	r2, #1
 800a64c:	615a      	str	r2, [r3, #20]
 800a64e:	bf00      	nop
 800a650:	3714      	adds	r7, #20
 800a652:	46bd      	mov	sp, r7
 800a654:	bc80      	pop	{r7}
 800a656:	4770      	bx	lr
 800a658:	40012c00 	.word	0x40012c00
 800a65c:	40000400 	.word	0x40000400
 800a660:	40000800 	.word	0x40000800

0800a664 <TIM_OC1_SetConfig>:
 800a664:	b480      	push	{r7}
 800a666:	b087      	sub	sp, #28
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
 800a66c:	6039      	str	r1, [r7, #0]
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6a1b      	ldr	r3, [r3, #32]
 800a672:	f023 0201 	bic.w	r2, r3, #1
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	621a      	str	r2, [r3, #32]
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6a1b      	ldr	r3, [r3, #32]
 800a67e:	617b      	str	r3, [r7, #20]
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	685b      	ldr	r3, [r3, #4]
 800a684:	613b      	str	r3, [r7, #16]
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	699b      	ldr	r3, [r3, #24]
 800a68a:	60fb      	str	r3, [r7, #12]
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a692:	60fb      	str	r3, [r7, #12]
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	f023 0303 	bic.w	r3, r3, #3
 800a69a:	60fb      	str	r3, [r7, #12]
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	68fa      	ldr	r2, [r7, #12]
 800a6a2:	4313      	orrs	r3, r2
 800a6a4:	60fb      	str	r3, [r7, #12]
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	f023 0302 	bic.w	r3, r3, #2
 800a6ac:	617b      	str	r3, [r7, #20]
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	689b      	ldr	r3, [r3, #8]
 800a6b2:	697a      	ldr	r2, [r7, #20]
 800a6b4:	4313      	orrs	r3, r2
 800a6b6:	617b      	str	r3, [r7, #20]
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	4a1c      	ldr	r2, [pc, #112]	; (800a72c <TIM_OC1_SetConfig+0xc8>)
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d10c      	bne.n	800a6da <TIM_OC1_SetConfig+0x76>
 800a6c0:	697b      	ldr	r3, [r7, #20]
 800a6c2:	f023 0308 	bic.w	r3, r3, #8
 800a6c6:	617b      	str	r3, [r7, #20]
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	68db      	ldr	r3, [r3, #12]
 800a6cc:	697a      	ldr	r2, [r7, #20]
 800a6ce:	4313      	orrs	r3, r2
 800a6d0:	617b      	str	r3, [r7, #20]
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	f023 0304 	bic.w	r3, r3, #4
 800a6d8:	617b      	str	r3, [r7, #20]
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	4a13      	ldr	r2, [pc, #76]	; (800a72c <TIM_OC1_SetConfig+0xc8>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d111      	bne.n	800a706 <TIM_OC1_SetConfig+0xa2>
 800a6e2:	693b      	ldr	r3, [r7, #16]
 800a6e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a6e8:	613b      	str	r3, [r7, #16]
 800a6ea:	693b      	ldr	r3, [r7, #16]
 800a6ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a6f0:	613b      	str	r3, [r7, #16]
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	695b      	ldr	r3, [r3, #20]
 800a6f6:	693a      	ldr	r2, [r7, #16]
 800a6f8:	4313      	orrs	r3, r2
 800a6fa:	613b      	str	r3, [r7, #16]
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	699b      	ldr	r3, [r3, #24]
 800a700:	693a      	ldr	r2, [r7, #16]
 800a702:	4313      	orrs	r3, r2
 800a704:	613b      	str	r3, [r7, #16]
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	693a      	ldr	r2, [r7, #16]
 800a70a:	605a      	str	r2, [r3, #4]
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	68fa      	ldr	r2, [r7, #12]
 800a710:	619a      	str	r2, [r3, #24]
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	685a      	ldr	r2, [r3, #4]
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	635a      	str	r2, [r3, #52]	; 0x34
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	697a      	ldr	r2, [r7, #20]
 800a71e:	621a      	str	r2, [r3, #32]
 800a720:	bf00      	nop
 800a722:	371c      	adds	r7, #28
 800a724:	46bd      	mov	sp, r7
 800a726:	bc80      	pop	{r7}
 800a728:	4770      	bx	lr
 800a72a:	bf00      	nop
 800a72c:	40012c00 	.word	0x40012c00

0800a730 <TIM_OC2_SetConfig>:
 800a730:	b480      	push	{r7}
 800a732:	b087      	sub	sp, #28
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
 800a738:	6039      	str	r1, [r7, #0]
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6a1b      	ldr	r3, [r3, #32]
 800a73e:	f023 0210 	bic.w	r2, r3, #16
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	621a      	str	r2, [r3, #32]
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6a1b      	ldr	r3, [r3, #32]
 800a74a:	617b      	str	r3, [r7, #20]
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	685b      	ldr	r3, [r3, #4]
 800a750:	613b      	str	r3, [r7, #16]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	699b      	ldr	r3, [r3, #24]
 800a756:	60fb      	str	r3, [r7, #12]
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a75e:	60fb      	str	r3, [r7, #12]
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a766:	60fb      	str	r3, [r7, #12]
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	021b      	lsls	r3, r3, #8
 800a76e:	68fa      	ldr	r2, [r7, #12]
 800a770:	4313      	orrs	r3, r2
 800a772:	60fb      	str	r3, [r7, #12]
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	f023 0320 	bic.w	r3, r3, #32
 800a77a:	617b      	str	r3, [r7, #20]
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	689b      	ldr	r3, [r3, #8]
 800a780:	011b      	lsls	r3, r3, #4
 800a782:	697a      	ldr	r2, [r7, #20]
 800a784:	4313      	orrs	r3, r2
 800a786:	617b      	str	r3, [r7, #20]
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	4a1d      	ldr	r2, [pc, #116]	; (800a800 <TIM_OC2_SetConfig+0xd0>)
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d10d      	bne.n	800a7ac <TIM_OC2_SetConfig+0x7c>
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a796:	617b      	str	r3, [r7, #20]
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	68db      	ldr	r3, [r3, #12]
 800a79c:	011b      	lsls	r3, r3, #4
 800a79e:	697a      	ldr	r2, [r7, #20]
 800a7a0:	4313      	orrs	r3, r2
 800a7a2:	617b      	str	r3, [r7, #20]
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7aa:	617b      	str	r3, [r7, #20]
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	4a14      	ldr	r2, [pc, #80]	; (800a800 <TIM_OC2_SetConfig+0xd0>)
 800a7b0:	4293      	cmp	r3, r2
 800a7b2:	d113      	bne.n	800a7dc <TIM_OC2_SetConfig+0xac>
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a7ba:	613b      	str	r3, [r7, #16]
 800a7bc:	693b      	ldr	r3, [r7, #16]
 800a7be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a7c2:	613b      	str	r3, [r7, #16]
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	695b      	ldr	r3, [r3, #20]
 800a7c8:	009b      	lsls	r3, r3, #2
 800a7ca:	693a      	ldr	r2, [r7, #16]
 800a7cc:	4313      	orrs	r3, r2
 800a7ce:	613b      	str	r3, [r7, #16]
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	699b      	ldr	r3, [r3, #24]
 800a7d4:	009b      	lsls	r3, r3, #2
 800a7d6:	693a      	ldr	r2, [r7, #16]
 800a7d8:	4313      	orrs	r3, r2
 800a7da:	613b      	str	r3, [r7, #16]
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	693a      	ldr	r2, [r7, #16]
 800a7e0:	605a      	str	r2, [r3, #4]
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	68fa      	ldr	r2, [r7, #12]
 800a7e6:	619a      	str	r2, [r3, #24]
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	685a      	ldr	r2, [r3, #4]
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	639a      	str	r2, [r3, #56]	; 0x38
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	697a      	ldr	r2, [r7, #20]
 800a7f4:	621a      	str	r2, [r3, #32]
 800a7f6:	bf00      	nop
 800a7f8:	371c      	adds	r7, #28
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bc80      	pop	{r7}
 800a7fe:	4770      	bx	lr
 800a800:	40012c00 	.word	0x40012c00

0800a804 <TIM_OC3_SetConfig>:
 800a804:	b480      	push	{r7}
 800a806:	b087      	sub	sp, #28
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	6039      	str	r1, [r7, #0]
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6a1b      	ldr	r3, [r3, #32]
 800a812:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	621a      	str	r2, [r3, #32]
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6a1b      	ldr	r3, [r3, #32]
 800a81e:	617b      	str	r3, [r7, #20]
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	685b      	ldr	r3, [r3, #4]
 800a824:	613b      	str	r3, [r7, #16]
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	69db      	ldr	r3, [r3, #28]
 800a82a:	60fb      	str	r3, [r7, #12]
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a832:	60fb      	str	r3, [r7, #12]
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	f023 0303 	bic.w	r3, r3, #3
 800a83a:	60fb      	str	r3, [r7, #12]
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	68fa      	ldr	r2, [r7, #12]
 800a842:	4313      	orrs	r3, r2
 800a844:	60fb      	str	r3, [r7, #12]
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a84c:	617b      	str	r3, [r7, #20]
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	689b      	ldr	r3, [r3, #8]
 800a852:	021b      	lsls	r3, r3, #8
 800a854:	697a      	ldr	r2, [r7, #20]
 800a856:	4313      	orrs	r3, r2
 800a858:	617b      	str	r3, [r7, #20]
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	4a1d      	ldr	r2, [pc, #116]	; (800a8d4 <TIM_OC3_SetConfig+0xd0>)
 800a85e:	4293      	cmp	r3, r2
 800a860:	d10d      	bne.n	800a87e <TIM_OC3_SetConfig+0x7a>
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a868:	617b      	str	r3, [r7, #20]
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	68db      	ldr	r3, [r3, #12]
 800a86e:	021b      	lsls	r3, r3, #8
 800a870:	697a      	ldr	r2, [r7, #20]
 800a872:	4313      	orrs	r3, r2
 800a874:	617b      	str	r3, [r7, #20]
 800a876:	697b      	ldr	r3, [r7, #20]
 800a878:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a87c:	617b      	str	r3, [r7, #20]
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	4a14      	ldr	r2, [pc, #80]	; (800a8d4 <TIM_OC3_SetConfig+0xd0>)
 800a882:	4293      	cmp	r3, r2
 800a884:	d113      	bne.n	800a8ae <TIM_OC3_SetConfig+0xaa>
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a88c:	613b      	str	r3, [r7, #16]
 800a88e:	693b      	ldr	r3, [r7, #16]
 800a890:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a894:	613b      	str	r3, [r7, #16]
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	695b      	ldr	r3, [r3, #20]
 800a89a:	011b      	lsls	r3, r3, #4
 800a89c:	693a      	ldr	r2, [r7, #16]
 800a89e:	4313      	orrs	r3, r2
 800a8a0:	613b      	str	r3, [r7, #16]
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	699b      	ldr	r3, [r3, #24]
 800a8a6:	011b      	lsls	r3, r3, #4
 800a8a8:	693a      	ldr	r2, [r7, #16]
 800a8aa:	4313      	orrs	r3, r2
 800a8ac:	613b      	str	r3, [r7, #16]
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	693a      	ldr	r2, [r7, #16]
 800a8b2:	605a      	str	r2, [r3, #4]
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	68fa      	ldr	r2, [r7, #12]
 800a8b8:	61da      	str	r2, [r3, #28]
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	685a      	ldr	r2, [r3, #4]
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	63da      	str	r2, [r3, #60]	; 0x3c
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	697a      	ldr	r2, [r7, #20]
 800a8c6:	621a      	str	r2, [r3, #32]
 800a8c8:	bf00      	nop
 800a8ca:	371c      	adds	r7, #28
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bc80      	pop	{r7}
 800a8d0:	4770      	bx	lr
 800a8d2:	bf00      	nop
 800a8d4:	40012c00 	.word	0x40012c00

0800a8d8 <TIM_OC4_SetConfig>:
 800a8d8:	b480      	push	{r7}
 800a8da:	b087      	sub	sp, #28
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	6039      	str	r1, [r7, #0]
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6a1b      	ldr	r3, [r3, #32]
 800a8e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	621a      	str	r2, [r3, #32]
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6a1b      	ldr	r3, [r3, #32]
 800a8f2:	613b      	str	r3, [r7, #16]
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	685b      	ldr	r3, [r3, #4]
 800a8f8:	617b      	str	r3, [r7, #20]
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	69db      	ldr	r3, [r3, #28]
 800a8fe:	60fb      	str	r3, [r7, #12]
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a906:	60fb      	str	r3, [r7, #12]
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a90e:	60fb      	str	r3, [r7, #12]
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	021b      	lsls	r3, r3, #8
 800a916:	68fa      	ldr	r2, [r7, #12]
 800a918:	4313      	orrs	r3, r2
 800a91a:	60fb      	str	r3, [r7, #12]
 800a91c:	693b      	ldr	r3, [r7, #16]
 800a91e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a922:	613b      	str	r3, [r7, #16]
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	689b      	ldr	r3, [r3, #8]
 800a928:	031b      	lsls	r3, r3, #12
 800a92a:	693a      	ldr	r2, [r7, #16]
 800a92c:	4313      	orrs	r3, r2
 800a92e:	613b      	str	r3, [r7, #16]
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	4a0f      	ldr	r2, [pc, #60]	; (800a970 <TIM_OC4_SetConfig+0x98>)
 800a934:	4293      	cmp	r3, r2
 800a936:	d109      	bne.n	800a94c <TIM_OC4_SetConfig+0x74>
 800a938:	697b      	ldr	r3, [r7, #20]
 800a93a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a93e:	617b      	str	r3, [r7, #20]
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	695b      	ldr	r3, [r3, #20]
 800a944:	019b      	lsls	r3, r3, #6
 800a946:	697a      	ldr	r2, [r7, #20]
 800a948:	4313      	orrs	r3, r2
 800a94a:	617b      	str	r3, [r7, #20]
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	697a      	ldr	r2, [r7, #20]
 800a950:	605a      	str	r2, [r3, #4]
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	68fa      	ldr	r2, [r7, #12]
 800a956:	61da      	str	r2, [r3, #28]
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	685a      	ldr	r2, [r3, #4]
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	641a      	str	r2, [r3, #64]	; 0x40
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	693a      	ldr	r2, [r7, #16]
 800a964:	621a      	str	r2, [r3, #32]
 800a966:	bf00      	nop
 800a968:	371c      	adds	r7, #28
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bc80      	pop	{r7}
 800a96e:	4770      	bx	lr
 800a970:	40012c00 	.word	0x40012c00

0800a974 <TIM_SlaveTimer_SetConfig>:
 800a974:	b580      	push	{r7, lr}
 800a976:	b086      	sub	sp, #24
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
 800a97c:	6039      	str	r1, [r7, #0]
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	689b      	ldr	r3, [r3, #8]
 800a984:	617b      	str	r3, [r7, #20]
 800a986:	697b      	ldr	r3, [r7, #20]
 800a988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a98c:	617b      	str	r3, [r7, #20]
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	685b      	ldr	r3, [r3, #4]
 800a992:	697a      	ldr	r2, [r7, #20]
 800a994:	4313      	orrs	r3, r2
 800a996:	617b      	str	r3, [r7, #20]
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	f023 0307 	bic.w	r3, r3, #7
 800a99e:	617b      	str	r3, [r7, #20]
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	697a      	ldr	r2, [r7, #20]
 800a9a6:	4313      	orrs	r3, r2
 800a9a8:	617b      	str	r3, [r7, #20]
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	697a      	ldr	r2, [r7, #20]
 800a9b0:	609a      	str	r2, [r3, #8]
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	685b      	ldr	r3, [r3, #4]
 800a9b6:	2b70      	cmp	r3, #112	; 0x70
 800a9b8:	d01a      	beq.n	800a9f0 <TIM_SlaveTimer_SetConfig+0x7c>
 800a9ba:	2b70      	cmp	r3, #112	; 0x70
 800a9bc:	d860      	bhi.n	800aa80 <TIM_SlaveTimer_SetConfig+0x10c>
 800a9be:	2b60      	cmp	r3, #96	; 0x60
 800a9c0:	d054      	beq.n	800aa6c <TIM_SlaveTimer_SetConfig+0xf8>
 800a9c2:	2b60      	cmp	r3, #96	; 0x60
 800a9c4:	d85c      	bhi.n	800aa80 <TIM_SlaveTimer_SetConfig+0x10c>
 800a9c6:	2b50      	cmp	r3, #80	; 0x50
 800a9c8:	d046      	beq.n	800aa58 <TIM_SlaveTimer_SetConfig+0xe4>
 800a9ca:	2b50      	cmp	r3, #80	; 0x50
 800a9cc:	d858      	bhi.n	800aa80 <TIM_SlaveTimer_SetConfig+0x10c>
 800a9ce:	2b40      	cmp	r3, #64	; 0x40
 800a9d0:	d019      	beq.n	800aa06 <TIM_SlaveTimer_SetConfig+0x92>
 800a9d2:	2b40      	cmp	r3, #64	; 0x40
 800a9d4:	d854      	bhi.n	800aa80 <TIM_SlaveTimer_SetConfig+0x10c>
 800a9d6:	2b30      	cmp	r3, #48	; 0x30
 800a9d8:	d054      	beq.n	800aa84 <TIM_SlaveTimer_SetConfig+0x110>
 800a9da:	2b30      	cmp	r3, #48	; 0x30
 800a9dc:	d850      	bhi.n	800aa80 <TIM_SlaveTimer_SetConfig+0x10c>
 800a9de:	2b20      	cmp	r3, #32
 800a9e0:	d050      	beq.n	800aa84 <TIM_SlaveTimer_SetConfig+0x110>
 800a9e2:	2b20      	cmp	r3, #32
 800a9e4:	d84c      	bhi.n	800aa80 <TIM_SlaveTimer_SetConfig+0x10c>
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d04c      	beq.n	800aa84 <TIM_SlaveTimer_SetConfig+0x110>
 800a9ea:	2b10      	cmp	r3, #16
 800a9ec:	d04a      	beq.n	800aa84 <TIM_SlaveTimer_SetConfig+0x110>
 800a9ee:	e047      	b.n	800aa80 <TIM_SlaveTimer_SetConfig+0x10c>
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6818      	ldr	r0, [r3, #0]
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	68d9      	ldr	r1, [r3, #12]
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	689a      	ldr	r2, [r3, #8]
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	691b      	ldr	r3, [r3, #16]
 800aa00:	f000 f9ca 	bl	800ad98 <TIM_ETR_SetConfig>
 800aa04:	e03f      	b.n	800aa86 <TIM_SlaveTimer_SetConfig+0x112>
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	2b05      	cmp	r3, #5
 800aa0c:	d101      	bne.n	800aa12 <TIM_SlaveTimer_SetConfig+0x9e>
 800aa0e:	2301      	movs	r3, #1
 800aa10:	e03a      	b.n	800aa88 <TIM_SlaveTimer_SetConfig+0x114>
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	6a1b      	ldr	r3, [r3, #32]
 800aa18:	613b      	str	r3, [r7, #16]
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	6a1a      	ldr	r2, [r3, #32]
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	f022 0201 	bic.w	r2, r2, #1
 800aa28:	621a      	str	r2, [r3, #32]
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	699b      	ldr	r3, [r3, #24]
 800aa30:	60fb      	str	r3, [r7, #12]
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aa38:	60fb      	str	r3, [r7, #12]
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	691b      	ldr	r3, [r3, #16]
 800aa3e:	011b      	lsls	r3, r3, #4
 800aa40:	68fa      	ldr	r2, [r7, #12]
 800aa42:	4313      	orrs	r3, r2
 800aa44:	60fb      	str	r3, [r7, #12]
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	68fa      	ldr	r2, [r7, #12]
 800aa4c:	619a      	str	r2, [r3, #24]
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	693a      	ldr	r2, [r7, #16]
 800aa54:	621a      	str	r2, [r3, #32]
 800aa56:	e016      	b.n	800aa86 <TIM_SlaveTimer_SetConfig+0x112>
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6818      	ldr	r0, [r3, #0]
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	6899      	ldr	r1, [r3, #8]
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	691b      	ldr	r3, [r3, #16]
 800aa64:	461a      	mov	r2, r3
 800aa66:	f000 f86d 	bl	800ab44 <TIM_TI1_ConfigInputStage>
 800aa6a:	e00c      	b.n	800aa86 <TIM_SlaveTimer_SetConfig+0x112>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	6818      	ldr	r0, [r3, #0]
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	6899      	ldr	r1, [r3, #8]
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	691b      	ldr	r3, [r3, #16]
 800aa78:	461a      	mov	r2, r3
 800aa7a:	f000 f8cd 	bl	800ac18 <TIM_TI2_ConfigInputStage>
 800aa7e:	e002      	b.n	800aa86 <TIM_SlaveTimer_SetConfig+0x112>
 800aa80:	bf00      	nop
 800aa82:	e000      	b.n	800aa86 <TIM_SlaveTimer_SetConfig+0x112>
 800aa84:	bf00      	nop
 800aa86:	2300      	movs	r3, #0
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3718      	adds	r7, #24
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}

0800aa90 <TIM_TI1_SetConfig>:
 800aa90:	b480      	push	{r7}
 800aa92:	b087      	sub	sp, #28
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	60f8      	str	r0, [r7, #12]
 800aa98:	60b9      	str	r1, [r7, #8]
 800aa9a:	607a      	str	r2, [r7, #4]
 800aa9c:	603b      	str	r3, [r7, #0]
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	6a1b      	ldr	r3, [r3, #32]
 800aaa2:	f023 0201 	bic.w	r2, r3, #1
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	621a      	str	r2, [r3, #32]
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	699b      	ldr	r3, [r3, #24]
 800aaae:	617b      	str	r3, [r7, #20]
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	6a1b      	ldr	r3, [r3, #32]
 800aab4:	613b      	str	r3, [r7, #16]
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	4a1f      	ldr	r2, [pc, #124]	; (800ab38 <TIM_TI1_SetConfig+0xa8>)
 800aaba:	4293      	cmp	r3, r2
 800aabc:	d00b      	beq.n	800aad6 <TIM_TI1_SetConfig+0x46>
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aac4:	d007      	beq.n	800aad6 <TIM_TI1_SetConfig+0x46>
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	4a1c      	ldr	r2, [pc, #112]	; (800ab3c <TIM_TI1_SetConfig+0xac>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d003      	beq.n	800aad6 <TIM_TI1_SetConfig+0x46>
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	4a1b      	ldr	r2, [pc, #108]	; (800ab40 <TIM_TI1_SetConfig+0xb0>)
 800aad2:	4293      	cmp	r3, r2
 800aad4:	d101      	bne.n	800aada <TIM_TI1_SetConfig+0x4a>
 800aad6:	2301      	movs	r3, #1
 800aad8:	e000      	b.n	800aadc <TIM_TI1_SetConfig+0x4c>
 800aada:	2300      	movs	r3, #0
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d008      	beq.n	800aaf2 <TIM_TI1_SetConfig+0x62>
 800aae0:	697b      	ldr	r3, [r7, #20]
 800aae2:	f023 0303 	bic.w	r3, r3, #3
 800aae6:	617b      	str	r3, [r7, #20]
 800aae8:	697a      	ldr	r2, [r7, #20]
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	4313      	orrs	r3, r2
 800aaee:	617b      	str	r3, [r7, #20]
 800aaf0:	e003      	b.n	800aafa <TIM_TI1_SetConfig+0x6a>
 800aaf2:	697b      	ldr	r3, [r7, #20]
 800aaf4:	f043 0301 	orr.w	r3, r3, #1
 800aaf8:	617b      	str	r3, [r7, #20]
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ab00:	617b      	str	r3, [r7, #20]
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	011b      	lsls	r3, r3, #4
 800ab06:	b2db      	uxtb	r3, r3
 800ab08:	697a      	ldr	r2, [r7, #20]
 800ab0a:	4313      	orrs	r3, r2
 800ab0c:	617b      	str	r3, [r7, #20]
 800ab0e:	693b      	ldr	r3, [r7, #16]
 800ab10:	f023 030a 	bic.w	r3, r3, #10
 800ab14:	613b      	str	r3, [r7, #16]
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	f003 030a 	and.w	r3, r3, #10
 800ab1c:	693a      	ldr	r2, [r7, #16]
 800ab1e:	4313      	orrs	r3, r2
 800ab20:	613b      	str	r3, [r7, #16]
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	697a      	ldr	r2, [r7, #20]
 800ab26:	619a      	str	r2, [r3, #24]
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	693a      	ldr	r2, [r7, #16]
 800ab2c:	621a      	str	r2, [r3, #32]
 800ab2e:	bf00      	nop
 800ab30:	371c      	adds	r7, #28
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bc80      	pop	{r7}
 800ab36:	4770      	bx	lr
 800ab38:	40012c00 	.word	0x40012c00
 800ab3c:	40000400 	.word	0x40000400
 800ab40:	40000800 	.word	0x40000800

0800ab44 <TIM_TI1_ConfigInputStage>:
 800ab44:	b480      	push	{r7}
 800ab46:	b087      	sub	sp, #28
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	60f8      	str	r0, [r7, #12]
 800ab4c:	60b9      	str	r1, [r7, #8]
 800ab4e:	607a      	str	r2, [r7, #4]
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	6a1b      	ldr	r3, [r3, #32]
 800ab54:	617b      	str	r3, [r7, #20]
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	6a1b      	ldr	r3, [r3, #32]
 800ab5a:	f023 0201 	bic.w	r2, r3, #1
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	621a      	str	r2, [r3, #32]
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	699b      	ldr	r3, [r3, #24]
 800ab66:	613b      	str	r3, [r7, #16]
 800ab68:	693b      	ldr	r3, [r7, #16]
 800ab6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ab6e:	613b      	str	r3, [r7, #16]
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	011b      	lsls	r3, r3, #4
 800ab74:	693a      	ldr	r2, [r7, #16]
 800ab76:	4313      	orrs	r3, r2
 800ab78:	613b      	str	r3, [r7, #16]
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	f023 030a 	bic.w	r3, r3, #10
 800ab80:	617b      	str	r3, [r7, #20]
 800ab82:	697a      	ldr	r2, [r7, #20]
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	4313      	orrs	r3, r2
 800ab88:	617b      	str	r3, [r7, #20]
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	693a      	ldr	r2, [r7, #16]
 800ab8e:	619a      	str	r2, [r3, #24]
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	697a      	ldr	r2, [r7, #20]
 800ab94:	621a      	str	r2, [r3, #32]
 800ab96:	bf00      	nop
 800ab98:	371c      	adds	r7, #28
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bc80      	pop	{r7}
 800ab9e:	4770      	bx	lr

0800aba0 <TIM_TI2_SetConfig>:
 800aba0:	b480      	push	{r7}
 800aba2:	b087      	sub	sp, #28
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	60f8      	str	r0, [r7, #12]
 800aba8:	60b9      	str	r1, [r7, #8]
 800abaa:	607a      	str	r2, [r7, #4]
 800abac:	603b      	str	r3, [r7, #0]
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	6a1b      	ldr	r3, [r3, #32]
 800abb2:	f023 0210 	bic.w	r2, r3, #16
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	621a      	str	r2, [r3, #32]
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	699b      	ldr	r3, [r3, #24]
 800abbe:	617b      	str	r3, [r7, #20]
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	6a1b      	ldr	r3, [r3, #32]
 800abc4:	613b      	str	r3, [r7, #16]
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800abcc:	617b      	str	r3, [r7, #20]
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	021b      	lsls	r3, r3, #8
 800abd2:	697a      	ldr	r2, [r7, #20]
 800abd4:	4313      	orrs	r3, r2
 800abd6:	617b      	str	r3, [r7, #20]
 800abd8:	697b      	ldr	r3, [r7, #20]
 800abda:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800abde:	617b      	str	r3, [r7, #20]
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	031b      	lsls	r3, r3, #12
 800abe4:	b29b      	uxth	r3, r3
 800abe6:	697a      	ldr	r2, [r7, #20]
 800abe8:	4313      	orrs	r3, r2
 800abea:	617b      	str	r3, [r7, #20]
 800abec:	693b      	ldr	r3, [r7, #16]
 800abee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800abf2:	613b      	str	r3, [r7, #16]
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	011b      	lsls	r3, r3, #4
 800abf8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800abfc:	693a      	ldr	r2, [r7, #16]
 800abfe:	4313      	orrs	r3, r2
 800ac00:	613b      	str	r3, [r7, #16]
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	697a      	ldr	r2, [r7, #20]
 800ac06:	619a      	str	r2, [r3, #24]
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	693a      	ldr	r2, [r7, #16]
 800ac0c:	621a      	str	r2, [r3, #32]
 800ac0e:	bf00      	nop
 800ac10:	371c      	adds	r7, #28
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bc80      	pop	{r7}
 800ac16:	4770      	bx	lr

0800ac18 <TIM_TI2_ConfigInputStage>:
 800ac18:	b480      	push	{r7}
 800ac1a:	b087      	sub	sp, #28
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	60f8      	str	r0, [r7, #12]
 800ac20:	60b9      	str	r1, [r7, #8]
 800ac22:	607a      	str	r2, [r7, #4]
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	6a1b      	ldr	r3, [r3, #32]
 800ac28:	f023 0210 	bic.w	r2, r3, #16
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	621a      	str	r2, [r3, #32]
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	699b      	ldr	r3, [r3, #24]
 800ac34:	617b      	str	r3, [r7, #20]
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	6a1b      	ldr	r3, [r3, #32]
 800ac3a:	613b      	str	r3, [r7, #16]
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ac42:	617b      	str	r3, [r7, #20]
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	031b      	lsls	r3, r3, #12
 800ac48:	697a      	ldr	r2, [r7, #20]
 800ac4a:	4313      	orrs	r3, r2
 800ac4c:	617b      	str	r3, [r7, #20]
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ac54:	613b      	str	r3, [r7, #16]
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	011b      	lsls	r3, r3, #4
 800ac5a:	693a      	ldr	r2, [r7, #16]
 800ac5c:	4313      	orrs	r3, r2
 800ac5e:	613b      	str	r3, [r7, #16]
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	697a      	ldr	r2, [r7, #20]
 800ac64:	619a      	str	r2, [r3, #24]
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	693a      	ldr	r2, [r7, #16]
 800ac6a:	621a      	str	r2, [r3, #32]
 800ac6c:	bf00      	nop
 800ac6e:	371c      	adds	r7, #28
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bc80      	pop	{r7}
 800ac74:	4770      	bx	lr

0800ac76 <TIM_TI3_SetConfig>:
 800ac76:	b480      	push	{r7}
 800ac78:	b087      	sub	sp, #28
 800ac7a:	af00      	add	r7, sp, #0
 800ac7c:	60f8      	str	r0, [r7, #12]
 800ac7e:	60b9      	str	r1, [r7, #8]
 800ac80:	607a      	str	r2, [r7, #4]
 800ac82:	603b      	str	r3, [r7, #0]
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	6a1b      	ldr	r3, [r3, #32]
 800ac88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	621a      	str	r2, [r3, #32]
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	69db      	ldr	r3, [r3, #28]
 800ac94:	617b      	str	r3, [r7, #20]
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	6a1b      	ldr	r3, [r3, #32]
 800ac9a:	613b      	str	r3, [r7, #16]
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	f023 0303 	bic.w	r3, r3, #3
 800aca2:	617b      	str	r3, [r7, #20]
 800aca4:	697a      	ldr	r2, [r7, #20]
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	4313      	orrs	r3, r2
 800acaa:	617b      	str	r3, [r7, #20]
 800acac:	697b      	ldr	r3, [r7, #20]
 800acae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800acb2:	617b      	str	r3, [r7, #20]
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	011b      	lsls	r3, r3, #4
 800acb8:	b2db      	uxtb	r3, r3
 800acba:	697a      	ldr	r2, [r7, #20]
 800acbc:	4313      	orrs	r3, r2
 800acbe:	617b      	str	r3, [r7, #20]
 800acc0:	693b      	ldr	r3, [r7, #16]
 800acc2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800acc6:	613b      	str	r3, [r7, #16]
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	021b      	lsls	r3, r3, #8
 800accc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800acd0:	693a      	ldr	r2, [r7, #16]
 800acd2:	4313      	orrs	r3, r2
 800acd4:	613b      	str	r3, [r7, #16]
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	697a      	ldr	r2, [r7, #20]
 800acda:	61da      	str	r2, [r3, #28]
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	693a      	ldr	r2, [r7, #16]
 800ace0:	621a      	str	r2, [r3, #32]
 800ace2:	bf00      	nop
 800ace4:	371c      	adds	r7, #28
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bc80      	pop	{r7}
 800acea:	4770      	bx	lr

0800acec <TIM_TI4_SetConfig>:
 800acec:	b480      	push	{r7}
 800acee:	b087      	sub	sp, #28
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	60f8      	str	r0, [r7, #12]
 800acf4:	60b9      	str	r1, [r7, #8]
 800acf6:	607a      	str	r2, [r7, #4]
 800acf8:	603b      	str	r3, [r7, #0]
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	6a1b      	ldr	r3, [r3, #32]
 800acfe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	621a      	str	r2, [r3, #32]
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	69db      	ldr	r3, [r3, #28]
 800ad0a:	617b      	str	r3, [r7, #20]
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	6a1b      	ldr	r3, [r3, #32]
 800ad10:	613b      	str	r3, [r7, #16]
 800ad12:	697b      	ldr	r3, [r7, #20]
 800ad14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad18:	617b      	str	r3, [r7, #20]
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	021b      	lsls	r3, r3, #8
 800ad1e:	697a      	ldr	r2, [r7, #20]
 800ad20:	4313      	orrs	r3, r2
 800ad22:	617b      	str	r3, [r7, #20]
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ad2a:	617b      	str	r3, [r7, #20]
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	031b      	lsls	r3, r3, #12
 800ad30:	b29b      	uxth	r3, r3
 800ad32:	697a      	ldr	r2, [r7, #20]
 800ad34:	4313      	orrs	r3, r2
 800ad36:	617b      	str	r3, [r7, #20]
 800ad38:	693b      	ldr	r3, [r7, #16]
 800ad3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ad3e:	613b      	str	r3, [r7, #16]
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	031b      	lsls	r3, r3, #12
 800ad44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ad48:	693a      	ldr	r2, [r7, #16]
 800ad4a:	4313      	orrs	r3, r2
 800ad4c:	613b      	str	r3, [r7, #16]
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	697a      	ldr	r2, [r7, #20]
 800ad52:	61da      	str	r2, [r3, #28]
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	693a      	ldr	r2, [r7, #16]
 800ad58:	621a      	str	r2, [r3, #32]
 800ad5a:	bf00      	nop
 800ad5c:	371c      	adds	r7, #28
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bc80      	pop	{r7}
 800ad62:	4770      	bx	lr

0800ad64 <TIM_ITRx_SetConfig>:
 800ad64:	b480      	push	{r7}
 800ad66:	b085      	sub	sp, #20
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
 800ad6c:	6039      	str	r1, [r7, #0]
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	689b      	ldr	r3, [r3, #8]
 800ad72:	60fb      	str	r3, [r7, #12]
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad7a:	60fb      	str	r3, [r7, #12]
 800ad7c:	683a      	ldr	r2, [r7, #0]
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	4313      	orrs	r3, r2
 800ad82:	f043 0307 	orr.w	r3, r3, #7
 800ad86:	60fb      	str	r3, [r7, #12]
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	68fa      	ldr	r2, [r7, #12]
 800ad8c:	609a      	str	r2, [r3, #8]
 800ad8e:	bf00      	nop
 800ad90:	3714      	adds	r7, #20
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bc80      	pop	{r7}
 800ad96:	4770      	bx	lr

0800ad98 <TIM_ETR_SetConfig>:
 800ad98:	b480      	push	{r7}
 800ad9a:	b087      	sub	sp, #28
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	60f8      	str	r0, [r7, #12]
 800ada0:	60b9      	str	r1, [r7, #8]
 800ada2:	607a      	str	r2, [r7, #4]
 800ada4:	603b      	str	r3, [r7, #0]
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	689b      	ldr	r3, [r3, #8]
 800adaa:	617b      	str	r3, [r7, #20]
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800adb2:	617b      	str	r3, [r7, #20]
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	021a      	lsls	r2, r3, #8
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	431a      	orrs	r2, r3
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	4313      	orrs	r3, r2
 800adc0:	697a      	ldr	r2, [r7, #20]
 800adc2:	4313      	orrs	r3, r2
 800adc4:	617b      	str	r3, [r7, #20]
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	697a      	ldr	r2, [r7, #20]
 800adca:	609a      	str	r2, [r3, #8]
 800adcc:	bf00      	nop
 800adce:	371c      	adds	r7, #28
 800add0:	46bd      	mov	sp, r7
 800add2:	bc80      	pop	{r7}
 800add4:	4770      	bx	lr

0800add6 <TIM_CCxChannelCmd>:
 800add6:	b480      	push	{r7}
 800add8:	b087      	sub	sp, #28
 800adda:	af00      	add	r7, sp, #0
 800addc:	60f8      	str	r0, [r7, #12]
 800adde:	60b9      	str	r1, [r7, #8]
 800ade0:	607a      	str	r2, [r7, #4]
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	f003 031f 	and.w	r3, r3, #31
 800ade8:	2201      	movs	r2, #1
 800adea:	fa02 f303 	lsl.w	r3, r2, r3
 800adee:	617b      	str	r3, [r7, #20]
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	6a1a      	ldr	r2, [r3, #32]
 800adf4:	697b      	ldr	r3, [r7, #20]
 800adf6:	43db      	mvns	r3, r3
 800adf8:	401a      	ands	r2, r3
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	621a      	str	r2, [r3, #32]
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	6a1a      	ldr	r2, [r3, #32]
 800ae02:	68bb      	ldr	r3, [r7, #8]
 800ae04:	f003 031f 	and.w	r3, r3, #31
 800ae08:	6879      	ldr	r1, [r7, #4]
 800ae0a:	fa01 f303 	lsl.w	r3, r1, r3
 800ae0e:	431a      	orrs	r2, r3
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	621a      	str	r2, [r3, #32]
 800ae14:	bf00      	nop
 800ae16:	371c      	adds	r7, #28
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bc80      	pop	{r7}
 800ae1c:	4770      	bx	lr
	...

0800ae20 <HAL_TIMEx_MasterConfigSynchronization>:
 800ae20:	b480      	push	{r7}
 800ae22:	b085      	sub	sp, #20
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
 800ae28:	6039      	str	r1, [r7, #0]
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae30:	2b01      	cmp	r3, #1
 800ae32:	d101      	bne.n	800ae38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ae34:	2302      	movs	r3, #2
 800ae36:	e046      	b.n	800aec6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2201      	movs	r2, #1
 800ae3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2202      	movs	r2, #2
 800ae44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	685b      	ldr	r3, [r3, #4]
 800ae4e:	60fb      	str	r3, [r7, #12]
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	689b      	ldr	r3, [r3, #8]
 800ae56:	60bb      	str	r3, [r7, #8]
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae5e:	60fb      	str	r3, [r7, #12]
 800ae60:	683b      	ldr	r3, [r7, #0]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	68fa      	ldr	r2, [r7, #12]
 800ae66:	4313      	orrs	r3, r2
 800ae68:	60fb      	str	r3, [r7, #12]
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	68fa      	ldr	r2, [r7, #12]
 800ae70:	605a      	str	r2, [r3, #4]
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	4a16      	ldr	r2, [pc, #88]	; (800aed0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800ae78:	4293      	cmp	r3, r2
 800ae7a:	d00e      	beq.n	800ae9a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae84:	d009      	beq.n	800ae9a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	4a12      	ldr	r2, [pc, #72]	; (800aed4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	d004      	beq.n	800ae9a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	4a10      	ldr	r2, [pc, #64]	; (800aed8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800ae96:	4293      	cmp	r3, r2
 800ae98:	d10c      	bne.n	800aeb4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aea0:	60bb      	str	r3, [r7, #8]
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	685b      	ldr	r3, [r3, #4]
 800aea6:	68ba      	ldr	r2, [r7, #8]
 800aea8:	4313      	orrs	r3, r2
 800aeaa:	60bb      	str	r3, [r7, #8]
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	68ba      	ldr	r2, [r7, #8]
 800aeb2:	609a      	str	r2, [r3, #8]
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2201      	movs	r2, #1
 800aeb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2200      	movs	r2, #0
 800aec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800aec4:	2300      	movs	r3, #0
 800aec6:	4618      	mov	r0, r3
 800aec8:	3714      	adds	r7, #20
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bc80      	pop	{r7}
 800aece:	4770      	bx	lr
 800aed0:	40012c00 	.word	0x40012c00
 800aed4:	40000400 	.word	0x40000400
 800aed8:	40000800 	.word	0x40000800

0800aedc <HAL_TIMEx_CommutCallback>:
 800aedc:	b480      	push	{r7}
 800aede:	b083      	sub	sp, #12
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
 800aee4:	bf00      	nop
 800aee6:	370c      	adds	r7, #12
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bc80      	pop	{r7}
 800aeec:	4770      	bx	lr

0800aeee <HAL_TIMEx_BreakCallback>:
 800aeee:	b480      	push	{r7}
 800aef0:	b083      	sub	sp, #12
 800aef2:	af00      	add	r7, sp, #0
 800aef4:	6078      	str	r0, [r7, #4]
 800aef6:	bf00      	nop
 800aef8:	370c      	adds	r7, #12
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bc80      	pop	{r7}
 800aefe:	4770      	bx	lr

0800af00 <malloc>:
 800af00:	4b02      	ldr	r3, [pc, #8]	; (800af0c <malloc+0xc>)
 800af02:	4601      	mov	r1, r0
 800af04:	6818      	ldr	r0, [r3, #0]
 800af06:	f000 b82b 	b.w	800af60 <_malloc_r>
 800af0a:	bf00      	nop
 800af0c:	20000294 	.word	0x20000294

0800af10 <free>:
 800af10:	4b02      	ldr	r3, [pc, #8]	; (800af1c <free+0xc>)
 800af12:	4601      	mov	r1, r0
 800af14:	6818      	ldr	r0, [r3, #0]
 800af16:	f000 b909 	b.w	800b12c <_free_r>
 800af1a:	bf00      	nop
 800af1c:	20000294 	.word	0x20000294

0800af20 <sbrk_aligned>:
 800af20:	b570      	push	{r4, r5, r6, lr}
 800af22:	4e0e      	ldr	r6, [pc, #56]	; (800af5c <sbrk_aligned+0x3c>)
 800af24:	460c      	mov	r4, r1
 800af26:	6831      	ldr	r1, [r6, #0]
 800af28:	4605      	mov	r5, r0
 800af2a:	b911      	cbnz	r1, 800af32 <sbrk_aligned+0x12>
 800af2c:	f000 f8ac 	bl	800b088 <_sbrk_r>
 800af30:	6030      	str	r0, [r6, #0]
 800af32:	4621      	mov	r1, r4
 800af34:	4628      	mov	r0, r5
 800af36:	f000 f8a7 	bl	800b088 <_sbrk_r>
 800af3a:	1c43      	adds	r3, r0, #1
 800af3c:	d00a      	beq.n	800af54 <sbrk_aligned+0x34>
 800af3e:	1cc4      	adds	r4, r0, #3
 800af40:	f024 0403 	bic.w	r4, r4, #3
 800af44:	42a0      	cmp	r0, r4
 800af46:	d007      	beq.n	800af58 <sbrk_aligned+0x38>
 800af48:	1a21      	subs	r1, r4, r0
 800af4a:	4628      	mov	r0, r5
 800af4c:	f000 f89c 	bl	800b088 <_sbrk_r>
 800af50:	3001      	adds	r0, #1
 800af52:	d101      	bne.n	800af58 <sbrk_aligned+0x38>
 800af54:	f04f 34ff 	mov.w	r4, #4294967295
 800af58:	4620      	mov	r0, r4
 800af5a:	bd70      	pop	{r4, r5, r6, pc}
 800af5c:	20000784 	.word	0x20000784

0800af60 <_malloc_r>:
 800af60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af64:	1ccd      	adds	r5, r1, #3
 800af66:	f025 0503 	bic.w	r5, r5, #3
 800af6a:	3508      	adds	r5, #8
 800af6c:	2d0c      	cmp	r5, #12
 800af6e:	bf38      	it	cc
 800af70:	250c      	movcc	r5, #12
 800af72:	2d00      	cmp	r5, #0
 800af74:	4607      	mov	r7, r0
 800af76:	db01      	blt.n	800af7c <_malloc_r+0x1c>
 800af78:	42a9      	cmp	r1, r5
 800af7a:	d905      	bls.n	800af88 <_malloc_r+0x28>
 800af7c:	230c      	movs	r3, #12
 800af7e:	2600      	movs	r6, #0
 800af80:	603b      	str	r3, [r7, #0]
 800af82:	4630      	mov	r0, r6
 800af84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af88:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b05c <_malloc_r+0xfc>
 800af8c:	f000 f868 	bl	800b060 <__malloc_lock>
 800af90:	f8d8 3000 	ldr.w	r3, [r8]
 800af94:	461c      	mov	r4, r3
 800af96:	bb5c      	cbnz	r4, 800aff0 <_malloc_r+0x90>
 800af98:	4629      	mov	r1, r5
 800af9a:	4638      	mov	r0, r7
 800af9c:	f7ff ffc0 	bl	800af20 <sbrk_aligned>
 800afa0:	1c43      	adds	r3, r0, #1
 800afa2:	4604      	mov	r4, r0
 800afa4:	d155      	bne.n	800b052 <_malloc_r+0xf2>
 800afa6:	f8d8 4000 	ldr.w	r4, [r8]
 800afaa:	4626      	mov	r6, r4
 800afac:	2e00      	cmp	r6, #0
 800afae:	d145      	bne.n	800b03c <_malloc_r+0xdc>
 800afb0:	2c00      	cmp	r4, #0
 800afb2:	d048      	beq.n	800b046 <_malloc_r+0xe6>
 800afb4:	6823      	ldr	r3, [r4, #0]
 800afb6:	4631      	mov	r1, r6
 800afb8:	4638      	mov	r0, r7
 800afba:	eb04 0903 	add.w	r9, r4, r3
 800afbe:	f000 f863 	bl	800b088 <_sbrk_r>
 800afc2:	4581      	cmp	r9, r0
 800afc4:	d13f      	bne.n	800b046 <_malloc_r+0xe6>
 800afc6:	6821      	ldr	r1, [r4, #0]
 800afc8:	4638      	mov	r0, r7
 800afca:	1a6d      	subs	r5, r5, r1
 800afcc:	4629      	mov	r1, r5
 800afce:	f7ff ffa7 	bl	800af20 <sbrk_aligned>
 800afd2:	3001      	adds	r0, #1
 800afd4:	d037      	beq.n	800b046 <_malloc_r+0xe6>
 800afd6:	6823      	ldr	r3, [r4, #0]
 800afd8:	442b      	add	r3, r5
 800afda:	6023      	str	r3, [r4, #0]
 800afdc:	f8d8 3000 	ldr.w	r3, [r8]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d038      	beq.n	800b056 <_malloc_r+0xf6>
 800afe4:	685a      	ldr	r2, [r3, #4]
 800afe6:	42a2      	cmp	r2, r4
 800afe8:	d12b      	bne.n	800b042 <_malloc_r+0xe2>
 800afea:	2200      	movs	r2, #0
 800afec:	605a      	str	r2, [r3, #4]
 800afee:	e00f      	b.n	800b010 <_malloc_r+0xb0>
 800aff0:	6822      	ldr	r2, [r4, #0]
 800aff2:	1b52      	subs	r2, r2, r5
 800aff4:	d41f      	bmi.n	800b036 <_malloc_r+0xd6>
 800aff6:	2a0b      	cmp	r2, #11
 800aff8:	d917      	bls.n	800b02a <_malloc_r+0xca>
 800affa:	1961      	adds	r1, r4, r5
 800affc:	42a3      	cmp	r3, r4
 800affe:	6025      	str	r5, [r4, #0]
 800b000:	bf18      	it	ne
 800b002:	6059      	strne	r1, [r3, #4]
 800b004:	6863      	ldr	r3, [r4, #4]
 800b006:	bf08      	it	eq
 800b008:	f8c8 1000 	streq.w	r1, [r8]
 800b00c:	5162      	str	r2, [r4, r5]
 800b00e:	604b      	str	r3, [r1, #4]
 800b010:	4638      	mov	r0, r7
 800b012:	f104 060b 	add.w	r6, r4, #11
 800b016:	f000 f829 	bl	800b06c <__malloc_unlock>
 800b01a:	f026 0607 	bic.w	r6, r6, #7
 800b01e:	1d23      	adds	r3, r4, #4
 800b020:	1af2      	subs	r2, r6, r3
 800b022:	d0ae      	beq.n	800af82 <_malloc_r+0x22>
 800b024:	1b9b      	subs	r3, r3, r6
 800b026:	50a3      	str	r3, [r4, r2]
 800b028:	e7ab      	b.n	800af82 <_malloc_r+0x22>
 800b02a:	42a3      	cmp	r3, r4
 800b02c:	6862      	ldr	r2, [r4, #4]
 800b02e:	d1dd      	bne.n	800afec <_malloc_r+0x8c>
 800b030:	f8c8 2000 	str.w	r2, [r8]
 800b034:	e7ec      	b.n	800b010 <_malloc_r+0xb0>
 800b036:	4623      	mov	r3, r4
 800b038:	6864      	ldr	r4, [r4, #4]
 800b03a:	e7ac      	b.n	800af96 <_malloc_r+0x36>
 800b03c:	4634      	mov	r4, r6
 800b03e:	6876      	ldr	r6, [r6, #4]
 800b040:	e7b4      	b.n	800afac <_malloc_r+0x4c>
 800b042:	4613      	mov	r3, r2
 800b044:	e7cc      	b.n	800afe0 <_malloc_r+0x80>
 800b046:	230c      	movs	r3, #12
 800b048:	4638      	mov	r0, r7
 800b04a:	603b      	str	r3, [r7, #0]
 800b04c:	f000 f80e 	bl	800b06c <__malloc_unlock>
 800b050:	e797      	b.n	800af82 <_malloc_r+0x22>
 800b052:	6025      	str	r5, [r4, #0]
 800b054:	e7dc      	b.n	800b010 <_malloc_r+0xb0>
 800b056:	605b      	str	r3, [r3, #4]
 800b058:	deff      	udf	#255	; 0xff
 800b05a:	bf00      	nop
 800b05c:	20000780 	.word	0x20000780

0800b060 <__malloc_lock>:
 800b060:	4801      	ldr	r0, [pc, #4]	; (800b068 <__malloc_lock+0x8>)
 800b062:	f000 b84b 	b.w	800b0fc <__retarget_lock_acquire_recursive>
 800b066:	bf00      	nop
 800b068:	200008c4 	.word	0x200008c4

0800b06c <__malloc_unlock>:
 800b06c:	4801      	ldr	r0, [pc, #4]	; (800b074 <__malloc_unlock+0x8>)
 800b06e:	f000 b846 	b.w	800b0fe <__retarget_lock_release_recursive>
 800b072:	bf00      	nop
 800b074:	200008c4 	.word	0x200008c4

0800b078 <memset>:
 800b078:	4603      	mov	r3, r0
 800b07a:	4402      	add	r2, r0
 800b07c:	4293      	cmp	r3, r2
 800b07e:	d100      	bne.n	800b082 <memset+0xa>
 800b080:	4770      	bx	lr
 800b082:	f803 1b01 	strb.w	r1, [r3], #1
 800b086:	e7f9      	b.n	800b07c <memset+0x4>

0800b088 <_sbrk_r>:
 800b088:	b538      	push	{r3, r4, r5, lr}
 800b08a:	2300      	movs	r3, #0
 800b08c:	4d05      	ldr	r5, [pc, #20]	; (800b0a4 <_sbrk_r+0x1c>)
 800b08e:	4604      	mov	r4, r0
 800b090:	4608      	mov	r0, r1
 800b092:	602b      	str	r3, [r5, #0]
 800b094:	f7fb f936 	bl	8006304 <_sbrk>
 800b098:	1c43      	adds	r3, r0, #1
 800b09a:	d102      	bne.n	800b0a2 <_sbrk_r+0x1a>
 800b09c:	682b      	ldr	r3, [r5, #0]
 800b09e:	b103      	cbz	r3, 800b0a2 <_sbrk_r+0x1a>
 800b0a0:	6023      	str	r3, [r4, #0]
 800b0a2:	bd38      	pop	{r3, r4, r5, pc}
 800b0a4:	200008c0 	.word	0x200008c0

0800b0a8 <__errno>:
 800b0a8:	4b01      	ldr	r3, [pc, #4]	; (800b0b0 <__errno+0x8>)
 800b0aa:	6818      	ldr	r0, [r3, #0]
 800b0ac:	4770      	bx	lr
 800b0ae:	bf00      	nop
 800b0b0:	20000294 	.word	0x20000294

0800b0b4 <__libc_init_array>:
 800b0b4:	b570      	push	{r4, r5, r6, lr}
 800b0b6:	2600      	movs	r6, #0
 800b0b8:	4d0c      	ldr	r5, [pc, #48]	; (800b0ec <__libc_init_array+0x38>)
 800b0ba:	4c0d      	ldr	r4, [pc, #52]	; (800b0f0 <__libc_init_array+0x3c>)
 800b0bc:	1b64      	subs	r4, r4, r5
 800b0be:	10a4      	asrs	r4, r4, #2
 800b0c0:	42a6      	cmp	r6, r4
 800b0c2:	d109      	bne.n	800b0d8 <__libc_init_array+0x24>
 800b0c4:	f000 f87a 	bl	800b1bc <_init>
 800b0c8:	2600      	movs	r6, #0
 800b0ca:	4d0a      	ldr	r5, [pc, #40]	; (800b0f4 <__libc_init_array+0x40>)
 800b0cc:	4c0a      	ldr	r4, [pc, #40]	; (800b0f8 <__libc_init_array+0x44>)
 800b0ce:	1b64      	subs	r4, r4, r5
 800b0d0:	10a4      	asrs	r4, r4, #2
 800b0d2:	42a6      	cmp	r6, r4
 800b0d4:	d105      	bne.n	800b0e2 <__libc_init_array+0x2e>
 800b0d6:	bd70      	pop	{r4, r5, r6, pc}
 800b0d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0dc:	4798      	blx	r3
 800b0de:	3601      	adds	r6, #1
 800b0e0:	e7ee      	b.n	800b0c0 <__libc_init_array+0xc>
 800b0e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0e6:	4798      	blx	r3
 800b0e8:	3601      	adds	r6, #1
 800b0ea:	e7f2      	b.n	800b0d2 <__libc_init_array+0x1e>
 800b0ec:	0800b314 	.word	0x0800b314
 800b0f0:	0800b314 	.word	0x0800b314
 800b0f4:	0800b314 	.word	0x0800b314
 800b0f8:	0800b318 	.word	0x0800b318

0800b0fc <__retarget_lock_acquire_recursive>:
 800b0fc:	4770      	bx	lr

0800b0fe <__retarget_lock_release_recursive>:
 800b0fe:	4770      	bx	lr

0800b100 <strcpy>:
 800b100:	4603      	mov	r3, r0
 800b102:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b106:	f803 2b01 	strb.w	r2, [r3], #1
 800b10a:	2a00      	cmp	r2, #0
 800b10c:	d1f9      	bne.n	800b102 <strcpy+0x2>
 800b10e:	4770      	bx	lr

0800b110 <memcpy>:
 800b110:	440a      	add	r2, r1
 800b112:	4291      	cmp	r1, r2
 800b114:	f100 33ff 	add.w	r3, r0, #4294967295
 800b118:	d100      	bne.n	800b11c <memcpy+0xc>
 800b11a:	4770      	bx	lr
 800b11c:	b510      	push	{r4, lr}
 800b11e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b122:	4291      	cmp	r1, r2
 800b124:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b128:	d1f9      	bne.n	800b11e <memcpy+0xe>
 800b12a:	bd10      	pop	{r4, pc}

0800b12c <_free_r>:
 800b12c:	b538      	push	{r3, r4, r5, lr}
 800b12e:	4605      	mov	r5, r0
 800b130:	2900      	cmp	r1, #0
 800b132:	d040      	beq.n	800b1b6 <_free_r+0x8a>
 800b134:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b138:	1f0c      	subs	r4, r1, #4
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	bfb8      	it	lt
 800b13e:	18e4      	addlt	r4, r4, r3
 800b140:	f7ff ff8e 	bl	800b060 <__malloc_lock>
 800b144:	4a1c      	ldr	r2, [pc, #112]	; (800b1b8 <_free_r+0x8c>)
 800b146:	6813      	ldr	r3, [r2, #0]
 800b148:	b933      	cbnz	r3, 800b158 <_free_r+0x2c>
 800b14a:	6063      	str	r3, [r4, #4]
 800b14c:	6014      	str	r4, [r2, #0]
 800b14e:	4628      	mov	r0, r5
 800b150:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b154:	f7ff bf8a 	b.w	800b06c <__malloc_unlock>
 800b158:	42a3      	cmp	r3, r4
 800b15a:	d908      	bls.n	800b16e <_free_r+0x42>
 800b15c:	6820      	ldr	r0, [r4, #0]
 800b15e:	1821      	adds	r1, r4, r0
 800b160:	428b      	cmp	r3, r1
 800b162:	bf01      	itttt	eq
 800b164:	6819      	ldreq	r1, [r3, #0]
 800b166:	685b      	ldreq	r3, [r3, #4]
 800b168:	1809      	addeq	r1, r1, r0
 800b16a:	6021      	streq	r1, [r4, #0]
 800b16c:	e7ed      	b.n	800b14a <_free_r+0x1e>
 800b16e:	461a      	mov	r2, r3
 800b170:	685b      	ldr	r3, [r3, #4]
 800b172:	b10b      	cbz	r3, 800b178 <_free_r+0x4c>
 800b174:	42a3      	cmp	r3, r4
 800b176:	d9fa      	bls.n	800b16e <_free_r+0x42>
 800b178:	6811      	ldr	r1, [r2, #0]
 800b17a:	1850      	adds	r0, r2, r1
 800b17c:	42a0      	cmp	r0, r4
 800b17e:	d10b      	bne.n	800b198 <_free_r+0x6c>
 800b180:	6820      	ldr	r0, [r4, #0]
 800b182:	4401      	add	r1, r0
 800b184:	1850      	adds	r0, r2, r1
 800b186:	4283      	cmp	r3, r0
 800b188:	6011      	str	r1, [r2, #0]
 800b18a:	d1e0      	bne.n	800b14e <_free_r+0x22>
 800b18c:	6818      	ldr	r0, [r3, #0]
 800b18e:	685b      	ldr	r3, [r3, #4]
 800b190:	4408      	add	r0, r1
 800b192:	6010      	str	r0, [r2, #0]
 800b194:	6053      	str	r3, [r2, #4]
 800b196:	e7da      	b.n	800b14e <_free_r+0x22>
 800b198:	d902      	bls.n	800b1a0 <_free_r+0x74>
 800b19a:	230c      	movs	r3, #12
 800b19c:	602b      	str	r3, [r5, #0]
 800b19e:	e7d6      	b.n	800b14e <_free_r+0x22>
 800b1a0:	6820      	ldr	r0, [r4, #0]
 800b1a2:	1821      	adds	r1, r4, r0
 800b1a4:	428b      	cmp	r3, r1
 800b1a6:	bf01      	itttt	eq
 800b1a8:	6819      	ldreq	r1, [r3, #0]
 800b1aa:	685b      	ldreq	r3, [r3, #4]
 800b1ac:	1809      	addeq	r1, r1, r0
 800b1ae:	6021      	streq	r1, [r4, #0]
 800b1b0:	6063      	str	r3, [r4, #4]
 800b1b2:	6054      	str	r4, [r2, #4]
 800b1b4:	e7cb      	b.n	800b14e <_free_r+0x22>
 800b1b6:	bd38      	pop	{r3, r4, r5, pc}
 800b1b8:	20000780 	.word	0x20000780

0800b1bc <_init>:
 800b1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1be:	bf00      	nop
 800b1c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1c2:	bc08      	pop	{r3}
 800b1c4:	469e      	mov	lr, r3
 800b1c6:	4770      	bx	lr

0800b1c8 <_fini>:
 800b1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ca:	bf00      	nop
 800b1cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1ce:	bc08      	pop	{r3}
 800b1d0:	469e      	mov	lr, r3
 800b1d2:	4770      	bx	lr
