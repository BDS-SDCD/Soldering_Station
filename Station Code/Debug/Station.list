
Station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009704  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08009810  08009810  00019810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009950  08009950  00020298  2**0
                  CONTENTS
  4 .ARM          00000000  08009950  08009950  00020298  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009950  08009950  00020298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009950  08009950  00019950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009954  08009954  00019954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000298  20000000  08009958  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000648  20000298  08009bf0  00020298  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200008e0  08009bf0  000208e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020298  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202c1  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015d66  00000000  00000000  00020304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b22  00000000  00000000  0003606a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001680  00000000  00000000  00039b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000115f  00000000  00000000  0003b210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a9a6  00000000  00000000  0003c36f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001af1e  00000000  00000000  00056d15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092279  00000000  00000000  00071c33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006264  00000000  00000000  00103eac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0010a110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000298 	.word	0x20000298
 8000128:	00000000 	.word	0x00000000
 800012c:	080097f8 	.word	0x080097f8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000029c 	.word	0x2000029c
 8000148:	080097f8 	.word	0x080097f8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	; 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	3a01      	subs	r2, #1
 8000216:	bf28      	it	cs
 8000218:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800021c:	d2ed      	bcs.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ca:	2afd      	cmp	r2, #253	; 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	; 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	; 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	; 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <__gesf2>:
 8000618:	f04f 3cff 	mov.w	ip, #4294967295
 800061c:	e006      	b.n	800062c <__cmpsf2+0x4>
 800061e:	bf00      	nop

08000620 <__lesf2>:
 8000620:	f04f 0c01 	mov.w	ip, #1
 8000624:	e002      	b.n	800062c <__cmpsf2+0x4>
 8000626:	bf00      	nop

08000628 <__cmpsf2>:
 8000628:	f04f 0c01 	mov.w	ip, #1
 800062c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000630:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000634:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000638:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800063c:	bf18      	it	ne
 800063e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000642:	d011      	beq.n	8000668 <__cmpsf2+0x40>
 8000644:	b001      	add	sp, #4
 8000646:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800064a:	bf18      	it	ne
 800064c:	ea90 0f01 	teqne	r0, r1
 8000650:	bf58      	it	pl
 8000652:	ebb2 0003 	subspl.w	r0, r2, r3
 8000656:	bf88      	it	hi
 8000658:	17c8      	asrhi	r0, r1, #31
 800065a:	bf38      	it	cc
 800065c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000660:	bf18      	it	ne
 8000662:	f040 0001 	orrne.w	r0, r0, #1
 8000666:	4770      	bx	lr
 8000668:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800066c:	d102      	bne.n	8000674 <__cmpsf2+0x4c>
 800066e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000672:	d105      	bne.n	8000680 <__cmpsf2+0x58>
 8000674:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000678:	d1e4      	bne.n	8000644 <__cmpsf2+0x1c>
 800067a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800067e:	d0e1      	beq.n	8000644 <__cmpsf2+0x1c>
 8000680:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <__aeabi_cfrcmple>:
 8000688:	4684      	mov	ip, r0
 800068a:	4608      	mov	r0, r1
 800068c:	4661      	mov	r1, ip
 800068e:	e7ff      	b.n	8000690 <__aeabi_cfcmpeq>

08000690 <__aeabi_cfcmpeq>:
 8000690:	b50f      	push	{r0, r1, r2, r3, lr}
 8000692:	f7ff ffc9 	bl	8000628 <__cmpsf2>
 8000696:	2800      	cmp	r0, #0
 8000698:	bf48      	it	mi
 800069a:	f110 0f00 	cmnmi.w	r0, #0
 800069e:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006a0 <__aeabi_fcmpeq>:
 80006a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a4:	f7ff fff4 	bl	8000690 <__aeabi_cfcmpeq>
 80006a8:	bf0c      	ite	eq
 80006aa:	2001      	moveq	r0, #1
 80006ac:	2000      	movne	r0, #0
 80006ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b2:	bf00      	nop

080006b4 <__aeabi_fcmplt>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff ffea 	bl	8000690 <__aeabi_cfcmpeq>
 80006bc:	bf34      	ite	cc
 80006be:	2001      	movcc	r0, #1
 80006c0:	2000      	movcs	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_fcmple>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffe0 	bl	8000690 <__aeabi_cfcmpeq>
 80006d0:	bf94      	ite	ls
 80006d2:	2001      	movls	r0, #1
 80006d4:	2000      	movhi	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_fcmpge>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffd2 	bl	8000688 <__aeabi_cfrcmple>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_fcmpgt>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffc8 	bl	8000688 <__aeabi_cfrcmple>
 80006f8:	bf34      	ite	cc
 80006fa:	2001      	movcc	r0, #1
 80006fc:	2000      	movcs	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_f2iz>:
 8000704:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000708:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800070c:	d30f      	bcc.n	800072e <__aeabi_f2iz+0x2a>
 800070e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000712:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000716:	d90d      	bls.n	8000734 <__aeabi_f2iz+0x30>
 8000718:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800071c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000720:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000724:	fa23 f002 	lsr.w	r0, r3, r2
 8000728:	bf18      	it	ne
 800072a:	4240      	negne	r0, r0
 800072c:	4770      	bx	lr
 800072e:	f04f 0000 	mov.w	r0, #0
 8000732:	4770      	bx	lr
 8000734:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000738:	d101      	bne.n	800073e <__aeabi_f2iz+0x3a>
 800073a:	0242      	lsls	r2, r0, #9
 800073c:	d105      	bne.n	800074a <__aeabi_f2iz+0x46>
 800073e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000742:	bf08      	it	eq
 8000744:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000748:	4770      	bx	lr
 800074a:	f04f 0000 	mov.w	r0, #0
 800074e:	4770      	bx	lr

08000750 <__aeabi_f2uiz>:
 8000750:	0042      	lsls	r2, r0, #1
 8000752:	d20e      	bcs.n	8000772 <__aeabi_f2uiz+0x22>
 8000754:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000758:	d30b      	bcc.n	8000772 <__aeabi_f2uiz+0x22>
 800075a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800075e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000762:	d409      	bmi.n	8000778 <__aeabi_f2uiz+0x28>
 8000764:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000768:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800076c:	fa23 f002 	lsr.w	r0, r3, r2
 8000770:	4770      	bx	lr
 8000772:	f04f 0000 	mov.w	r0, #0
 8000776:	4770      	bx	lr
 8000778:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800077c:	d101      	bne.n	8000782 <__aeabi_f2uiz+0x32>
 800077e:	0242      	lsls	r2, r0, #9
 8000780:	d102      	bne.n	8000788 <__aeabi_f2uiz+0x38>
 8000782:	f04f 30ff 	mov.w	r0, #4294967295
 8000786:	4770      	bx	lr
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop

08000790 <Encoder_Handler>:
 *
 *  Created on: Jul 30, 2024
 *      Author: I
 */
//---------------------------------------------------------------------------------
void Encoder_Handler(struct Encoder *self){
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
	/**
	 * This function describes method of interacting with Encoder based on buffer
	 */
	if(self->Rotary_Switch.event){
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	7f5b      	ldrb	r3, [r3, #29]
 800079c:	f003 0302 	and.w	r3, r3, #2
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d029      	beq.n	80007fa <Encoder_Handler+0x6a>
		if(self->Rotary_Switch.Rotary_Switch_Direcion==Direct)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	7f9b      	ldrb	r3, [r3, #30]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d112      	bne.n	80007d4 <Encoder_Handler+0x44>
			if(self->Rotary_Switch.State){
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	7f5b      	ldrb	r3, [r3, #29]
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d005      	beq.n	80007c8 <Encoder_Handler+0x38>
				self->Encoder_Rotary_Switch_Buffer++;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007c0:	1c5a      	adds	r2, r3, #1
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	62da      	str	r2, [r3, #44]	; 0x2c
		}else{
			self->Encoder_Button_State=Encoder_Button_long;
		}
		self->Button.Button_Event=0;
	}
}
 80007c6:	e031      	b.n	800082c <Encoder_Handler+0x9c>
				self->Encoder_Rotary_Switch_Buffer--;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007cc:	1e5a      	subs	r2, r3, #1
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80007d2:	e02b      	b.n	800082c <Encoder_Handler+0x9c>
			if(self->Rotary_Switch.State){
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	7f5b      	ldrb	r3, [r3, #29]
 80007d8:	f003 0301 	and.w	r3, r3, #1
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d005      	beq.n	80007ee <Encoder_Handler+0x5e>
				self->Encoder_Rotary_Switch_Buffer--;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007e6:	1e5a      	subs	r2, r3, #1
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80007ec:	e01e      	b.n	800082c <Encoder_Handler+0x9c>
				self->Encoder_Rotary_Switch_Buffer++;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007f2:	1c5a      	adds	r2, r3, #1
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80007f8:	e018      	b.n	800082c <Encoder_Handler+0x9c>
	}else if(self->Button.Button_Event){
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	7a9b      	ldrb	r3, [r3, #10]
 80007fe:	f003 0302 	and.w	r3, r3, #2
 8000802:	b2db      	uxtb	r3, r3
 8000804:	2b00      	cmp	r3, #0
 8000806:	d011      	beq.n	800082c <Encoder_Handler+0x9c>
		if(self->Button.State==1){
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	7adb      	ldrb	r3, [r3, #11]
 800080c:	2b01      	cmp	r3, #1
 800080e:	d104      	bne.n	800081a <Encoder_Handler+0x8a>
			self->Encoder_Button_State=Encoder_Button_Short;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2202      	movs	r2, #2
 8000814:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8000818:	e003      	b.n	8000822 <Encoder_Handler+0x92>
			self->Encoder_Button_State=Encoder_Button_long;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	2203      	movs	r2, #3
 800081e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		self->Button.Button_Event=0;
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	7a93      	ldrb	r3, [r2, #10]
 8000826:	f36f 0341 	bfc	r3, #1, #1
 800082a:	7293      	strb	r3, [r2, #10]
}
 800082c:	bf00      	nop
 800082e:	370c      	adds	r7, #12
 8000830:	46bd      	mov	sp, r7
 8000832:	bc80      	pop	{r7}
 8000834:	4770      	bx	lr

08000836 <Button_Handler>:
//---------------------------------------------------------------------------------
void Button_Handler(struct Button* self){
 8000836:	b480      	push	{r7}
 8000838:	b083      	sub	sp, #12
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
	self->Button_Event=1;
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	7993      	ldrb	r3, [r2, #6]
 8000842:	f043 0302 	orr.w	r3, r3, #2
 8000846:	7193      	strb	r3, [r2, #6]
}
 8000848:	bf00      	nop
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	bc80      	pop	{r7}
 8000850:	4770      	bx	lr

08000852 <Rotary_Switch_Handler>:
//---------------------------------------------------------------------------------
void Rotary_Switch_Handler(struct Rotary_Switch *self){
 8000852:	b580      	push	{r7, lr}
 8000854:	b082      	sub	sp, #8
 8000856:	af00      	add	r7, sp, #0
 8000858:	6078      	str	r0, [r7, #4]
	/**
	 * Set event equal 1 and run Encoder_Handler
	 */
	self->event=1;
 800085a:	687a      	ldr	r2, [r7, #4]
 800085c:	7853      	ldrb	r3, [r2, #1]
 800085e:	f043 0302 	orr.w	r3, r3, #2
 8000862:	7053      	strb	r3, [r2, #1]
	Encoder_Handler(self->base);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	68db      	ldr	r3, [r3, #12]
 8000868:	4618      	mov	r0, r3
 800086a:	f7ff ff91 	bl	8000790 <Encoder_Handler>
	self->event=0;
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	7853      	ldrb	r3, [r2, #1]
 8000872:	f36f 0341 	bfc	r3, #1, #1
 8000876:	7053      	strb	r3, [r2, #1]
}
 8000878:	bf00      	nop
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}

08000880 <Rotary_Switch_EXTI>:
//---------------------------------------------------------------------------------
void Rotary_Switch_EXTI(struct Rotary_Switch *self, uint16_t* EXTI_PIN){
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	6039      	str	r1, [r7, #0]
	/**
	 * Check if current EXTI are cursed by current Rotary_Switch EXTI_PIN
	 */
	if(self->EXTI_PIN==*EXTI_PIN){
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	889a      	ldrh	r2, [r3, #4]
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	881b      	ldrh	r3, [r3, #0]
 8000892:	429a      	cmp	r2, r3
 8000894:	d113      	bne.n	80008be <Rotary_Switch_EXTI+0x3e>
		self->State=HAL_GPIO_ReadPin(self->GPIO,self->PIN);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	689a      	ldr	r2, [r3, #8]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	88db      	ldrh	r3, [r3, #6]
 800089e:	4619      	mov	r1, r3
 80008a0:	4610      	mov	r0, r2
 80008a2:	f006 fc0d 	bl	80070c0 <HAL_GPIO_ReadPin>
 80008a6:	4603      	mov	r3, r0
 80008a8:	f003 0301 	and.w	r3, r3, #1
 80008ac:	b2d9      	uxtb	r1, r3
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	7853      	ldrb	r3, [r2, #1]
 80008b2:	f361 0300 	bfi	r3, r1, #0, #1
 80008b6:	7053      	strb	r3, [r2, #1]
		Rotary_Switch_Handler(self);
 80008b8:	6878      	ldr	r0, [r7, #4]
 80008ba:	f7ff ffca 	bl	8000852 <Rotary_Switch_Handler>
	}
}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <Button_EXTI>:
//---------------------------------------------------------------------------------
void Button_EXTI(struct Button* self, uint16_t *EXTI_PIN){
 80008c6:	b480      	push	{r7}
 80008c8:	b083      	sub	sp, #12
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
 80008ce:	6039      	str	r1, [r7, #0]
	/*
	 * Check if current EXTI are cursed by current BUTTON EXTI_PIN
	 * All buttons with same EXTI_PIN gets EXTI_Event
	 */
	if(self->EXTI_PIN==*EXTI_PIN){
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	891a      	ldrh	r2, [r3, #8]
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	881b      	ldrh	r3, [r3, #0]
 80008d8:	429a      	cmp	r2, r3
 80008da:	d107      	bne.n	80008ec <Button_EXTI+0x26>
		self->EXTI_Event=1;
 80008dc:	687a      	ldr	r2, [r7, #4]
 80008de:	7993      	ldrb	r3, [r2, #6]
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	7193      	strb	r3, [r2, #6]
		self->count=0;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2200      	movs	r2, #0
 80008ea:	711a      	strb	r2, [r3, #4]
	}
}
 80008ec:	bf00      	nop
 80008ee:	370c      	adds	r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bc80      	pop	{r7}
 80008f4:	4770      	bx	lr

080008f6 <Encoder_EXTI>:
//---------------------------------------------------------------------------------
void Encoder_EXTI(struct Encoder *self, uint16_t *EXTI_PIN){
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b082      	sub	sp, #8
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	6078      	str	r0, [r7, #4]
 80008fe:	6039      	str	r1, [r7, #0]
	/**
	 *Check if current EXTI are cursed by current Encoder's parts
	 */
	Rotary_Switch_EXTI(&(self->Rotary_Switch),  EXTI_PIN);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	331c      	adds	r3, #28
 8000904:	6839      	ldr	r1, [r7, #0]
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff ffba 	bl	8000880 <Rotary_Switch_EXTI>
	Button_EXTI(&(self->Button), EXTI_PIN);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	3304      	adds	r3, #4
 8000910:	6839      	ldr	r1, [r7, #0]
 8000912:	4618      	mov	r0, r3
 8000914:	f7ff ffd7 	bl	80008c6 <Button_EXTI>
}
 8000918:	bf00      	nop
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}

08000920 <Button_MODE_it>:
//---------------------------------------------------------------------------------
void Button_MODE_it(struct Button* self){
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
	/**
	 * Function that describes every button's work mode algorithm
	 */
	switch (self->MODE){
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	7c1b      	ldrb	r3, [r3, #16]
 800092c:	2b02      	cmp	r3, #2
 800092e:	d05c      	beq.n	80009ea <Button_MODE_it+0xca>
 8000930:	2b02      	cmp	r3, #2
 8000932:	f300 80ac 	bgt.w	8000a8e <Button_MODE_it+0x16e>
 8000936:	2b00      	cmp	r3, #0
 8000938:	d002      	beq.n	8000940 <Button_MODE_it+0x20>
 800093a:	2b01      	cmp	r3, #1
 800093c:	d029      	beq.n	8000992 <Button_MODE_it+0x72>
			}
			self->Previos_Stable_State=self->Stable_State;			//Rewrite prew stable state

		break;
	}
}
 800093e:	e0a6      	b.n	8000a8e <Button_MODE_it+0x16e>
			self->Stable_State=self->PIN_State;			//Write stable state
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	785b      	ldrb	r3, [r3, #1]
 8000944:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000948:	b2d9      	uxtb	r1, r3
 800094a:	687a      	ldr	r2, [r7, #4]
 800094c:	7853      	ldrb	r3, [r2, #1]
 800094e:	f361 0382 	bfi	r3, r1, #2, #1
 8000952:	7053      	strb	r3, [r2, #1]
			if(self->Stable_State!=self->Previos_Stable_State){
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	785b      	ldrb	r3, [r3, #1]
 8000958:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800095c:	b2da      	uxtb	r2, r3
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	785b      	ldrb	r3, [r3, #1]
 8000962:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000966:	b2db      	uxtb	r3, r3
 8000968:	429a      	cmp	r2, r3
 800096a:	d00c      	beq.n	8000986 <Button_MODE_it+0x66>
				Button_Handler(self);						//Run button handler
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f7ff ff62 	bl	8000836 <Button_Handler>
				self->Previos_Stable_State=self->Stable_State;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	785b      	ldrb	r3, [r3, #1]
 8000976:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800097a:	b2d9      	uxtb	r1, r3
 800097c:	687a      	ldr	r2, [r7, #4]
 800097e:	7853      	ldrb	r3, [r2, #1]
 8000980:	f361 03c3 	bfi	r3, r1, #3, #1
 8000984:	7053      	strb	r3, [r2, #1]
			self->EXTI_Event=0;							//Reset EXTI event to didn't check the button without EXTI interrupt
 8000986:	687a      	ldr	r2, [r7, #4]
 8000988:	7993      	ldrb	r3, [r2, #6]
 800098a:	f36f 0300 	bfc	r3, #0, #1
 800098e:	7193      	strb	r3, [r2, #6]
		break;
 8000990:	e07d      	b.n	8000a8e <Button_MODE_it+0x16e>
			self->Stable_State=self->PIN_State;			//Write stable state
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	785b      	ldrb	r3, [r3, #1]
 8000996:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800099a:	b2d9      	uxtb	r1, r3
 800099c:	687a      	ldr	r2, [r7, #4]
 800099e:	7853      	ldrb	r3, [r2, #1]
 80009a0:	f361 0382 	bfi	r3, r1, #2, #1
 80009a4:	7053      	strb	r3, [r2, #1]
			if(self->Stable_State!=self->Previos_Stable_State){
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	785b      	ldrb	r3, [r3, #1]
 80009aa:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80009ae:	b2da      	uxtb	r2, r3
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	785b      	ldrb	r3, [r3, #1]
 80009b4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	429a      	cmp	r2, r3
 80009bc:	d00a      	beq.n	80009d4 <Button_MODE_it+0xb4>
				self->State=self->PIN_State;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	785b      	ldrb	r3, [r3, #1]
 80009c2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	461a      	mov	r2, r3
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	71da      	strb	r2, [r3, #7]
				Button_Handler(self);					//Run button handler
 80009ce:	6878      	ldr	r0, [r7, #4]
 80009d0:	f7ff ff31 	bl	8000836 <Button_Handler>
			self->Previos_Stable_State=self->Stable_State;	//Rewrite prew stable state
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	785b      	ldrb	r3, [r3, #1]
 80009d8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80009dc:	b2d9      	uxtb	r1, r3
 80009de:	687a      	ldr	r2, [r7, #4]
 80009e0:	7853      	ldrb	r3, [r2, #1]
 80009e2:	f361 03c3 	bfi	r3, r1, #3, #1
 80009e6:	7053      	strb	r3, [r2, #1]
		break;
 80009e8:	e051      	b.n	8000a8e <Button_MODE_it+0x16e>
			self->Stable_State=self->PIN_State;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	785b      	ldrb	r3, [r3, #1]
 80009ee:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80009f2:	b2d9      	uxtb	r1, r3
 80009f4:	687a      	ldr	r2, [r7, #4]
 80009f6:	7853      	ldrb	r3, [r2, #1]
 80009f8:	f361 0382 	bfi	r3, r1, #2, #1
 80009fc:	7053      	strb	r3, [r2, #1]
			if(self->Stable_State==GPIO_PIN_RESET){					//
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	785b      	ldrb	r3, [r3, #1]
 8000a02:	f003 0304 	and.w	r3, r3, #4
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d106      	bne.n	8000a1a <Button_MODE_it+0xfa>
				self->Presed_counter++;								//Counting how many iterations button was pressed
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	789b      	ldrb	r3, [r3, #2]
 8000a10:	3301      	adds	r3, #1
 8000a12:	b2da      	uxtb	r2, r3
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	709a      	strb	r2, [r3, #2]
 8000a18:	e02e      	b.n	8000a78 <Button_MODE_it+0x158>
			else if(self->Previos_Stable_State==GPIO_PIN_RESET){	//If stable state was changed (rising edge)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	785b      	ldrb	r3, [r3, #1]
 8000a1e:	f003 0308 	and.w	r3, r3, #8
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d11f      	bne.n	8000a68 <Button_MODE_it+0x148>
				if(self->Presed_counter<self->Presed_counter_max)	//and button was pressed less than Presed_counter_max
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	789a      	ldrb	r2, [r3, #2]
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	78db      	ldrb	r3, [r3, #3]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	d203      	bcs.n	8000a3c <Button_MODE_it+0x11c>
					self->State=1;									//State equal 1(short press)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2201      	movs	r2, #1
 8000a38:	71da      	strb	r2, [r3, #7]
 8000a3a:	e002      	b.n	8000a42 <Button_MODE_it+0x122>
					self->State=2;									//State equal 1(Long press)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2202      	movs	r2, #2
 8000a40:	71da      	strb	r2, [r3, #7]
				self->Presed_counter=0;								//Reset pressed iteration counter
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2200      	movs	r2, #0
 8000a46:	709a      	strb	r2, [r3, #2]
				self->EXTI_Event=0;									//Reset EXTI event
 8000a48:	687a      	ldr	r2, [r7, #4]
 8000a4a:	7993      	ldrb	r3, [r2, #6]
 8000a4c:	f36f 0300 	bfc	r3, #0, #1
 8000a50:	7193      	strb	r3, [r2, #6]
				self->Button_Event=1;								//Set button event
 8000a52:	687a      	ldr	r2, [r7, #4]
 8000a54:	7993      	ldrb	r3, [r2, #6]
 8000a56:	f043 0302 	orr.w	r3, r3, #2
 8000a5a:	7193      	strb	r3, [r2, #6]
				Encoder_Handler(self->base);						//run Encoder_Handler
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	695b      	ldr	r3, [r3, #20]
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff fe95 	bl	8000790 <Encoder_Handler>
 8000a66:	e007      	b.n	8000a78 <Button_MODE_it+0x158>
				self->EXTI_Event=0;									//Reset EXTI event
 8000a68:	687a      	ldr	r2, [r7, #4]
 8000a6a:	7993      	ldrb	r3, [r2, #6]
 8000a6c:	f36f 0300 	bfc	r3, #0, #1
 8000a70:	7193      	strb	r3, [r2, #6]
				self->Presed_counter=0;								//Reset pressed iteration counter
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2200      	movs	r2, #0
 8000a76:	709a      	strb	r2, [r3, #2]
			self->Previos_Stable_State=self->Stable_State;			//Rewrite prew stable state
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	785b      	ldrb	r3, [r3, #1]
 8000a7c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000a80:	b2d9      	uxtb	r1, r3
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	7853      	ldrb	r3, [r2, #1]
 8000a86:	f361 03c3 	bfi	r3, r1, #3, #1
 8000a8a:	7053      	strb	r3, [r2, #1]
		break;
 8000a8c:	bf00      	nop
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <Button_it>:
//---------------------------------------------------------------------------------
void Button_it(struct Button* self){
 8000a96:	b590      	push	{r4, r7, lr}
 8000a98:	b083      	sub	sp, #12
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
	/**
	 * This function realize "Contact bounce" filter and run main logic function
	 */
	if(self->EXTI_Event==1){												//Check pins state every time when EXTI's interrupt goes
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	799b      	ldrb	r3, [r3, #6]
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d038      	beq.n	8000b1e <Button_it+0x88>
		if(self->count==1){													//Contact bounce filter
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	791b      	ldrb	r3, [r3, #4]
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d111      	bne.n	8000ad8 <Button_it+0x42>
			self->PIN_State=HAL_GPIO_ReadPin(self->GPIO,self->PIN);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	68da      	ldr	r2, [r3, #12]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	895b      	ldrh	r3, [r3, #10]
 8000abc:	4619      	mov	r1, r3
 8000abe:	4610      	mov	r0, r2
 8000ac0:	f006 fafe 	bl	80070c0 <HAL_GPIO_ReadPin>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	b2d9      	uxtb	r1, r3
 8000acc:	687a      	ldr	r2, [r7, #4]
 8000ace:	7853      	ldrb	r3, [r2, #1]
 8000ad0:	f361 0300 	bfi	r3, r1, #0, #1
 8000ad4:	7053      	strb	r3, [r2, #1]
 8000ad6:	e01c      	b.n	8000b12 <Button_it+0x7c>
		}
		else if(self->count==self->count_max){
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	791a      	ldrb	r2, [r3, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	795b      	ldrb	r3, [r3, #5]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d116      	bne.n	8000b12 <Button_it+0x7c>
			if(self->PIN_State==HAL_GPIO_ReadPin(self->GPIO,self->PIN)){
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	785b      	ldrb	r3, [r3, #1]
 8000ae8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	461c      	mov	r4, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	68da      	ldr	r2, [r3, #12]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	895b      	ldrh	r3, [r3, #10]
 8000af8:	4619      	mov	r1, r3
 8000afa:	4610      	mov	r0, r2
 8000afc:	f006 fae0 	bl	80070c0 <HAL_GPIO_ReadPin>
 8000b00:	4603      	mov	r3, r0
 8000b02:	429c      	cmp	r4, r3
 8000b04:	d102      	bne.n	8000b0c <Button_it+0x76>
				Button_MODE_it(self);
 8000b06:	6878      	ldr	r0, [r7, #4]
 8000b08:	f7ff ff0a 	bl	8000920 <Button_MODE_it>
			}
			self->count=0;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2200      	movs	r2, #0
 8000b10:	711a      	strb	r2, [r3, #4]
		}
		self->count++;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	791b      	ldrb	r3, [r3, #4]
 8000b16:	3301      	adds	r3, #1
 8000b18:	b2da      	uxtb	r2, r3
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	711a      	strb	r2, [r3, #4]
	}
}
 8000b1e:	bf00      	nop
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd90      	pop	{r4, r7, pc}

08000b26 <Encoder_it>:
//---------------------------------------------------------------------------------
void Encoder_it(struct Encoder *self){
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b082      	sub	sp, #8
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
	/*
	 * Encoder iteration
	 */
	Button_it(&self->Button);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	3304      	adds	r3, #4
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff ffaf 	bl	8000a96 <Button_it>
}
 8000b38:	bf00      	nop
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <Button_ini>:
//---------------------------------------------------------------------------------
void Button_ini(struct Button* self){
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	/**
	 *Base button's parameters initialization
	 */
	self->count=0;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	711a      	strb	r2, [r3, #4]
	self->Presed_counter=0;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2200      	movs	r2, #0
 8000b52:	709a      	strb	r2, [r3, #2]
	self->Previos_Stable_State=1;
 8000b54:	687a      	ldr	r2, [r7, #4]
 8000b56:	7853      	ldrb	r3, [r2, #1]
 8000b58:	f043 0308 	orr.w	r3, r3, #8
 8000b5c:	7053      	strb	r3, [r2, #1]
	self->Button_Event=0;
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	7993      	ldrb	r3, [r2, #6]
 8000b62:	f36f 0341 	bfc	r3, #1, #1
 8000b66:	7193      	strb	r3, [r2, #6]
	if(self->MODE==Button_Mode_Regular_Without_EXTI)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	7c1b      	ldrb	r3, [r3, #16]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d105      	bne.n	8000b7c <Button_ini+0x3c>
		self->EXTI_Event=1;								//for button without interrupts EXTI_Event always equal 1
 8000b70:	687a      	ldr	r2, [r7, #4]
 8000b72:	7993      	ldrb	r3, [r2, #6]
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	7193      	strb	r3, [r2, #6]
	else
		self->EXTI_Event=0;
}
 8000b7a:	e004      	b.n	8000b86 <Button_ini+0x46>
		self->EXTI_Event=0;
 8000b7c:	687a      	ldr	r2, [r7, #4]
 8000b7e:	7993      	ldrb	r3, [r2, #6]
 8000b80:	f36f 0300 	bfc	r3, #0, #1
 8000b84:	7193      	strb	r3, [r2, #6]
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr

08000b90 <Button_Vector_Create>:
//---------------------------------------------------------------------------------
void Button_Vector_Create(struct Button_Vector *Vector, struct Button *Button){
 8000b90:	b5b0      	push	{r4, r5, r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	6039      	str	r1, [r7, #0]
	/**
	 * Create a new element of Button_Vector which contain Button struct
	 */
	Button_ini(Button);
 8000b9a:	6838      	ldr	r0, [r7, #0]
 8000b9c:	f7ff ffd0 	bl	8000b40 <Button_ini>
	struct Button *Bpr= malloc(sizeof(struct Button));
 8000ba0:	2018      	movs	r0, #24
 8000ba2:	f008 fccb 	bl	800953c <malloc>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	613b      	str	r3, [r7, #16]
	*Bpr= *Button;
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	4614      	mov	r4, r2
 8000bb0:	461d      	mov	r5, r3
 8000bb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000bba:	e884 0003 	stmia.w	r4, {r0, r1}
	if(Vector->Button==NULL)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d103      	bne.n	8000bce <Button_Vector_Create+0x3e>
		Vector->Button=Bpr;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	693a      	ldr	r2, [r7, #16]
 8000bca:	605a      	str	r2, [r3, #4]
		}
		Vpr->Button=Bpr;
		NOW->next=Vpr;
		NOW->next->next=NULL;
	}
}
 8000bcc:	e018      	b.n	8000c00 <Button_Vector_Create+0x70>
		struct Button_Vector *Vpr= malloc(sizeof(struct Button_Vector));
 8000bce:	2008      	movs	r0, #8
 8000bd0:	f008 fcb4 	bl	800953c <malloc>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	60fb      	str	r3, [r7, #12]
		struct Button_Vector *NOW=Vector;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	617b      	str	r3, [r7, #20]
		while(NOW->next!=NULL){
 8000bdc:	e002      	b.n	8000be4 <Button_Vector_Create+0x54>
			NOW=NOW->next;
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	617b      	str	r3, [r7, #20]
		while(NOW->next!=NULL){
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d1f8      	bne.n	8000bde <Button_Vector_Create+0x4e>
		Vpr->Button=Bpr;
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	605a      	str	r2, [r3, #4]
		NOW->next=Vpr;
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	68fa      	ldr	r2, [r7, #12]
 8000bf6:	601a      	str	r2, [r3, #0]
		NOW->next->next=NULL;
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
}
 8000c00:	bf00      	nop
 8000c02:	3718      	adds	r7, #24
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bdb0      	pop	{r4, r5, r7, pc}

08000c08 <Button_Vector_EXTI>:
//---------------------------------------------------------------------------------
void Button_Vector_EXTI(struct Button_Vector *self, uint16_t* GPIO){
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	6039      	str	r1, [r7, #0]
	/**
	 * Run Button EXTI for all Button into Button_Vector
	 * First Parameter must be head of vector
	 */
	struct Button_Vector *NOW=self;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	60fb      	str	r3, [r7, #12]
	do{
		Button_EXTI(NOW->Button,GPIO);
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	6839      	ldr	r1, [r7, #0]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff fe52 	bl	80008c6 <Button_EXTI>
		NOW=NOW->next;
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	60fb      	str	r3, [r7, #12]
	}while(NOW!=NULL);
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d1f3      	bne.n	8000c16 <Button_Vector_EXTI+0xe>
}
 8000c2e:	bf00      	nop
 8000c30:	bf00      	nop
 8000c32:	3710      	adds	r7, #16
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <Button_Vector_it>:
//---------------------------------------------------------------------------------
void Button_Vector_it(struct Button_Vector *self){
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
	/**
	 * Run Button_it for all Button into Button_Vector
	 */
	struct Button_Vector *NOW=self;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	60fb      	str	r3, [r7, #12]
	do{
		Button_it(NOW->Button);
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff ff24 	bl	8000a96 <Button_it>
		NOW=NOW->next;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	60fb      	str	r3, [r7, #12]
	} while(NOW!=NULL);
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d1f4      	bne.n	8000c44 <Button_Vector_it+0xc>
}
 8000c5a:	bf00      	nop
 8000c5c:	bf00      	nop
 8000c5e:	3710      	adds	r7, #16
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <Button_Get_Pin_State>:
//---------------------------------------------------------------------------------
GPIO_PinState Button_Get_Pin_State(struct Button* self){
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
	/*
	 * Return Button stable state and reset Button_Event
	 */
	self->Button_Event=0;
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	7993      	ldrb	r3, [r2, #6]
 8000c70:	f36f 0341 	bfc	r3, #1, #1
 8000c74:	7193      	strb	r3, [r2, #6]
	return self->Stable_State;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	785b      	ldrb	r3, [r3, #1]
 8000c7a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000c7e:	b2db      	uxtb	r3, r3
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bc80      	pop	{r7}
 8000c88:	4770      	bx	lr

08000c8a <Button_Get_Event_State>:
//---------------------------------------------------------------------------------
uint8_t  Button_Get_Event_State(struct Button* self){
 8000c8a:	b480      	push	{r7}
 8000c8c:	b083      	sub	sp, #12
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
	/*
	 * Return Button event
	 */
	return self->Button_Event;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	799b      	ldrb	r3, [r3, #6]
 8000c96:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000c9a:	b2db      	uxtb	r3, r3
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bc80      	pop	{r7}
 8000ca4:	4770      	bx	lr

08000ca6 <Encoder_Reset_Rotary_Switch_Buffer>:
//---------------------------------------------------------------------------------
void Encoder_Reset_Rotary_Switch_Buffer(struct Encoder *self){
 8000ca6:	b480      	push	{r7}
 8000ca8:	b083      	sub	sp, #12
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
	/**
	 * Reset Encoder_Rotary switch buffer
	 */
	self->Encoder_Rotary_Switch_Buffer=0;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bc80      	pop	{r7}
 8000cbc:	4770      	bx	lr

08000cbe <Encoder_Get_Rotary_Switch_Buffer>:
//---------------------------------------------------------------------------------
int Encoder_Get_Rotary_Switch_Buffer(struct Encoder *self){
 8000cbe:	b480      	push	{r7}
 8000cc0:	b083      	sub	sp, #12
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
	/**
	 * Return how many times Rotary_Switch has switch it's position
	 * Return value can have negative value
	 */
	return  self->Encoder_Rotary_Switch_Buffer;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr

08000cd4 <Encoder_Reset_Button_State>:
//---------------------------------------------------------------------------------
void Encoder_Reset_Button_State(struct Encoder *self){
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
	self->Encoder_Button_State=Encoder_Button_NotPressed;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 8000ce4:	bf00      	nop
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bc80      	pop	{r7}
 8000cec:	4770      	bx	lr

08000cee <Encoder_Get_Button_State>:
//---------------------------------------------------------------------------------
enum Encoder_Button_State Encoder_Get_Button_State(struct Encoder *self){
 8000cee:	b480      	push	{r7}
 8000cf0:	b083      	sub	sp, #12
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
	return self->Encoder_Button_State;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bc80      	pop	{r7}
 8000d04:	4770      	bx	lr

08000d06 <Encoder_ini>:
//---------------------------------------------------------------------------------
void Rotary_Switch_ini(struct Rotary_Switch *self){

}
//---------------------------------------------------------------------------------
void Encoder_ini(struct Encoder *self){
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b082      	sub	sp, #8
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
	/**
	 * Base Encoder's parameters initialization
	 */
	Button_ini(&(self->Button));
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	3304      	adds	r3, #4
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff ff14 	bl	8000b40 <Button_ini>
	self->Button.base=self;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	619a      	str	r2, [r3, #24]
	self->Rotary_Switch.base=self;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	687a      	ldr	r2, [r7, #4]
 8000d22:	629a      	str	r2, [r3, #40]	; 0x28
	self->Button.ID=self->ID;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	781a      	ldrb	r2, [r3, #0]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	711a      	strb	r2, [r3, #4]
	self->Rotary_Switch.ID=self->ID;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	781a      	ldrb	r2, [r3, #0]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	771a      	strb	r2, [r3, #28]
	self->Encoder_Button_State=Encoder_Button_NotPressed;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2200      	movs	r2, #0
 8000d38:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	self->Encoder_Rotary_Switch_Buffer=0;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <Filter_Mediana_3>:
#include"Filter.h"
//--------------------------------------------------------------------------------- Middle Average Filter
uint16_t Filter_Mediana_3(uint16_t a,uint16_t b, uint16_t c){
 8000d4a:	b480      	push	{r7}
 8000d4c:	b083      	sub	sp, #12
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	4603      	mov	r3, r0
 8000d52:	80fb      	strh	r3, [r7, #6]
 8000d54:	460b      	mov	r3, r1
 8000d56:	80bb      	strh	r3, [r7, #4]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	807b      	strh	r3, [r7, #2]
	/**
	 * Median filter for 3 samples
	 */
	if(a<=b){
 8000d5c:	88fa      	ldrh	r2, [r7, #6]
 8000d5e:	88bb      	ldrh	r3, [r7, #4]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d80d      	bhi.n	8000d80 <Filter_Mediana_3+0x36>
		if(a<=c){
 8000d64:	88fa      	ldrh	r2, [r7, #6]
 8000d66:	887b      	ldrh	r3, [r7, #2]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d807      	bhi.n	8000d7c <Filter_Mediana_3+0x32>
			if(b<=c)
 8000d6c:	88ba      	ldrh	r2, [r7, #4]
 8000d6e:	887b      	ldrh	r3, [r7, #2]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d801      	bhi.n	8000d78 <Filter_Mediana_3+0x2e>
				return b;
 8000d74:	88bb      	ldrh	r3, [r7, #4]
 8000d76:	e010      	b.n	8000d9a <Filter_Mediana_3+0x50>
			else
				return c;
 8000d78:	887b      	ldrh	r3, [r7, #2]
 8000d7a:	e00e      	b.n	8000d9a <Filter_Mediana_3+0x50>
		}
		else
			return a;
 8000d7c:	88fb      	ldrh	r3, [r7, #6]
 8000d7e:	e00c      	b.n	8000d9a <Filter_Mediana_3+0x50>
	}
	else
	{
		if(a<=c){
 8000d80:	88fa      	ldrh	r2, [r7, #6]
 8000d82:	887b      	ldrh	r3, [r7, #2]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d801      	bhi.n	8000d8c <Filter_Mediana_3+0x42>
			return c;
 8000d88:	887b      	ldrh	r3, [r7, #2]
 8000d8a:	e006      	b.n	8000d9a <Filter_Mediana_3+0x50>
		}
		else
			if(b<=c)
 8000d8c:	88ba      	ldrh	r2, [r7, #4]
 8000d8e:	887b      	ldrh	r3, [r7, #2]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d801      	bhi.n	8000d98 <Filter_Mediana_3+0x4e>
				return c;
 8000d94:	887b      	ldrh	r3, [r7, #2]
 8000d96:	e000      	b.n	8000d9a <Filter_Mediana_3+0x50>
			else
				return b;
 8000d98:	88bb      	ldrh	r3, [r7, #4]
	}
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr

08000da4 <Filter_Mediana_9>:
//---------------------------------------------------------------------------------
uint16_t Filter_Mediana_9 (uint16_t *mas){
 8000da4:	b5b0      	push	{r4, r5, r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
	/**
	 * Median filter for 9 samples
	 */
	return	Filter_Mediana_3(
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	8818      	ldrh	r0, [r3, #0]
			Filter_Mediana_3(*mas,*(mas+1), *(mas+2)),
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3302      	adds	r3, #2
	return	Filter_Mediana_3(
 8000db4:	8819      	ldrh	r1, [r3, #0]
			Filter_Mediana_3(*mas,*(mas+1), *(mas+2)),
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	3304      	adds	r3, #4
	return	Filter_Mediana_3(
 8000dba:	881b      	ldrh	r3, [r3, #0]
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	f7ff ffc4 	bl	8000d4a <Filter_Mediana_3>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	461c      	mov	r4, r3
			Filter_Mediana_3(*(mas+3),*(mas+4), *(mas+5)),
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	3306      	adds	r3, #6
	return	Filter_Mediana_3(
 8000dca:	8818      	ldrh	r0, [r3, #0]
			Filter_Mediana_3(*(mas+3),*(mas+4), *(mas+5)),
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3308      	adds	r3, #8
	return	Filter_Mediana_3(
 8000dd0:	8819      	ldrh	r1, [r3, #0]
			Filter_Mediana_3(*(mas+3),*(mas+4), *(mas+5)),
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	330a      	adds	r3, #10
	return	Filter_Mediana_3(
 8000dd6:	881b      	ldrh	r3, [r3, #0]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	f7ff ffb6 	bl	8000d4a <Filter_Mediana_3>
 8000dde:	4603      	mov	r3, r0
 8000de0:	461d      	mov	r5, r3
			Filter_Mediana_3(*(mas+6),*(mas+7), *(mas+8)));
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	330c      	adds	r3, #12
	return	Filter_Mediana_3(
 8000de6:	8818      	ldrh	r0, [r3, #0]
			Filter_Mediana_3(*(mas+6),*(mas+7), *(mas+8)));
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	330e      	adds	r3, #14
	return	Filter_Mediana_3(
 8000dec:	8819      	ldrh	r1, [r3, #0]
			Filter_Mediana_3(*(mas+6),*(mas+7), *(mas+8)));
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	3310      	adds	r3, #16
	return	Filter_Mediana_3(
 8000df2:	881b      	ldrh	r3, [r3, #0]
 8000df4:	461a      	mov	r2, r3
 8000df6:	f7ff ffa8 	bl	8000d4a <Filter_Mediana_3>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4629      	mov	r1, r5
 8000e00:	4620      	mov	r0, r4
 8000e02:	f7ff ffa2 	bl	8000d4a <Filter_Mediana_3>
 8000e06:	4603      	mov	r3, r0
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bdb0      	pop	{r4, r5, r7, pc}

08000e10 <Filter_ini>:
//---------------------------------------------------------------------------------
void Filter_ini(struct Filter * self){
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
	/**
	 * Reset buffer
	 */
	self->Filter_Buffer=0;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f04f 0200 	mov.w	r2, #0
 8000e1e:	60da      	str	r2, [r3, #12]
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bc80      	pop	{r7}
 8000e28:	4770      	bx	lr

08000e2a <Filter_Exp_Mov_Average>:
//--------------------------------------------------------------------------------- Exponential Moving Average Filter with adaptive koef
uint16_t Filter_Exp_Mov_Average(struct Filter* self){
 8000e2a:	b590      	push	{r4, r7, lr}
 8000e2c:	b083      	sub	sp, #12
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
		if(abs((int)self->Val_Now - self->Filter_Buffer)>self->Val_Delata)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	695b      	ldr	r3, [r3, #20]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff fc64 	bl	8000704 <__aeabi_f2iz>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff fa46 	bl	80002d0 <__aeabi_i2f>
 8000e44:	4602      	mov	r2, r0
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	68db      	ldr	r3, [r3, #12]
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4610      	mov	r0, r2
 8000e4e:	f7ff f989 	bl	8000164 <__aeabi_fsub>
 8000e52:	4603      	mov	r3, r0
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff fc55 	bl	8000704 <__aeabi_f2iz>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	bfb8      	it	lt
 8000e60:	425b      	neglt	r3, r3
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fa34 	bl	80002d0 <__aeabi_i2f>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	691b      	ldr	r3, [r3, #16]
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4610      	mov	r0, r2
 8000e72:	f7ff fc3d 	bl	80006f0 <__aeabi_fcmpgt>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d004      	beq.n	8000e86 <Filter_Exp_Mov_Average+0x5c>
			self->k=self->k_max;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	689a      	ldr	r2, [r3, #8]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	e003      	b.n	8000e8e <Filter_Exp_Mov_Average+0x64>
		else
			self->k=self->k_min;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	685a      	ldr	r2, [r3, #4]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	601a      	str	r2, [r3, #0]

	  self->Filter_Buffer += (self->Val_Now - self->Filter_Buffer) * self->k;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	68dc      	ldr	r4, [r3, #12]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	695a      	ldr	r2, [r3, #20]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	68db      	ldr	r3, [r3, #12]
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	f7ff f961 	bl	8000164 <__aeabi_fsub>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4610      	mov	r0, r2
 8000eae:	f7ff fa63 	bl	8000378 <__aeabi_fmul>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4620      	mov	r0, r4
 8000eb8:	f7ff f956 	bl	8000168 <__addsf3>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	60da      	str	r2, [r3, #12]
	  return (uint16_t)self->Filter_Buffer;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff fc41 	bl	8000750 <__aeabi_f2uiz>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	b29b      	uxth	r3, r3
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd90      	pop	{r4, r7, pc}

08000eda <Filter_Combined>:
//---------------------------------------------------------------------------------
uint16_t Filter_Combined(struct Filter* self){
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b082      	sub	sp, #8
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
	/**
	 * 	Exponential Moving Average Filter with adaptive koef combined with Median filter
	 * 	Return result of Filter
	 */
	if(self->Filter_Mode==Three_Samples){
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	7e1b      	ldrb	r3, [r3, #24]
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d114      	bne.n	8000f14 <Filter_Combined+0x3a>
		self->Val_Now=Filter_Mediana_3(*(self->mass),*((self->mass)+1), *((self->mass)+2));
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	69db      	ldr	r3, [r3, #28]
 8000eee:	8818      	ldrh	r0, [r3, #0]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	69db      	ldr	r3, [r3, #28]
 8000ef4:	3302      	adds	r3, #2
 8000ef6:	8819      	ldrh	r1, [r3, #0]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	69db      	ldr	r3, [r3, #28]
 8000efc:	3304      	adds	r3, #4
 8000efe:	881b      	ldrh	r3, [r3, #0]
 8000f00:	461a      	mov	r2, r3
 8000f02:	f7ff ff22 	bl	8000d4a <Filter_Mediana_3>
 8000f06:	4603      	mov	r3, r0
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff f9dd 	bl	80002c8 <__aeabi_ui2f>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	615a      	str	r2, [r3, #20]
	}
	if(self->Filter_Mode==Nine_Samples){
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	7e1b      	ldrb	r3, [r3, #24]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d10b      	bne.n	8000f34 <Filter_Combined+0x5a>
		self->Val_Now=Filter_Mediana_9(self->mass);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	69db      	ldr	r3, [r3, #28]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff ff3f 	bl	8000da4 <Filter_Mediana_9>
 8000f26:	4603      	mov	r3, r0
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff f9cd 	bl	80002c8 <__aeabi_ui2f>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	615a      	str	r2, [r3, #20]
	}
	return Filter_Exp_Mov_Average(self);
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f7ff ff78 	bl	8000e2a <Filter_Exp_Mov_Average>
 8000f3a:	4603      	mov	r3, r0
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <Flash_Erase>:
 *  Created on: Nov 11, 2024
 *      Author: I
 */
#include "Flash_Custom.h"
//---------------------------------------------------------------------------------
uint8_t Flash_Erase (uint32_t addr, uint16_t size){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b088      	sub	sp, #32
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	807b      	strh	r3, [r7, #2]
	  * addr  Base address.
	  * size  Size all data for recording into page.
	  * return HAL_StatusTypeDef HAL_OK or HAL_ERROR .
	  */
		FLASH_EraseInitTypeDef FlashErase;
		uint32_t sectorError = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	60fb      	str	r3, [r7, #12]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f54:	b672      	cpsid	i
}
 8000f56:	bf00      	nop

		__disable_irq();
		HAL_FLASH_Unlock();
 8000f58:	f005 fd9e 	bl	8006a98 <HAL_FLASH_Unlock>

		FlashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	613b      	str	r3, [r7, #16]
		FlashErase.PageAddress = addr;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	61bb      	str	r3, [r7, #24]
		FlashErase.NbPages = size / 1024 + 1;
 8000f64:	887b      	ldrh	r3, [r7, #2]
 8000f66:	0a9b      	lsrs	r3, r3, #10
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	61fb      	str	r3, [r7, #28]

		if (HAL_FLASHEx_Erase(&FlashErase, &sectorError) != HAL_OK)
 8000f6e:	f107 020c 	add.w	r2, r7, #12
 8000f72:	f107 0310 	add.w	r3, r7, #16
 8000f76:	4611      	mov	r1, r2
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f005 fe75 	bl	8006c68 <HAL_FLASHEx_Erase>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d005      	beq.n	8000f90 <Flash_Erase+0x4c>
		{
			HAL_FLASH_Lock();
 8000f84:	f005 fdae 	bl	8006ae4 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8000f88:	b662      	cpsie	i
}
 8000f8a:	bf00      	nop
	        __enable_irq();
			return HAL_ERROR;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e004      	b.n	8000f9a <Flash_Erase+0x56>
		}
		HAL_FLASH_Lock();
 8000f90:	f005 fda8 	bl	8006ae4 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8000f94:	b662      	cpsie	i
}
 8000f96:	bf00      	nop
		__enable_irq();
		return HAL_OK;
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3720      	adds	r7, #32
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <Flash_Write>:

//---------------------------------------------------------------------------------
uint32_t Flash_Write (uint32_t addr, void *data_ptr, uint16_t size){
 8000fa2:	b5b0      	push	{r4, r5, r7, lr}
 8000fa4:	b086      	sub	sp, #24
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	60f8      	str	r0, [r7, #12]
 8000faa:	60b9      	str	r1, [r7, #8]
 8000fac:	4613      	mov	r3, r2
 8000fae:	80fb      	strh	r3, [r7, #6]
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb0:	b672      	cpsid	i
}
 8000fb2:	bf00      	nop
	  * return HAL_StatusTypeDef HAL_OK or HAL_ERROR .
	  */

	HAL_StatusTypeDef status;
	__disable_irq();
	HAL_FLASH_Unlock();
 8000fb4:	f005 fd70 	bl	8006a98 <HAL_FLASH_Unlock>

	for (uint8_t i = 0; i < size/2; i++)
 8000fb8:	2300      	movs	r3, #0
 8000fba:	75bb      	strb	r3, [r7, #22]
 8000fbc:	e019      	b.n	8000ff2 <Flash_Write+0x50>
	{
		status += HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr, ((uint16_t *)data_ptr)[i]);
 8000fbe:	7dbb      	ldrb	r3, [r7, #22]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	68ba      	ldr	r2, [r7, #8]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	881b      	ldrh	r3, [r3, #0]
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	2200      	movs	r2, #0
 8000fcc:	461c      	mov	r4, r3
 8000fce:	4615      	mov	r5, r2
 8000fd0:	4622      	mov	r2, r4
 8000fd2:	462b      	mov	r3, r5
 8000fd4:	68f9      	ldr	r1, [r7, #12]
 8000fd6:	2001      	movs	r0, #1
 8000fd8:	f005 fbf8 	bl	80067cc <HAL_FLASH_Program>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	461a      	mov	r2, r3
 8000fe0:	7dfb      	ldrb	r3, [r7, #23]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	75fb      	strb	r3, [r7, #23]
		addr+=2;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	3302      	adds	r3, #2
 8000fea:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < size/2; i++)
 8000fec:	7dbb      	ldrb	r3, [r7, #22]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	75bb      	strb	r3, [r7, #22]
 8000ff2:	7dbb      	ldrb	r3, [r7, #22]
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	88fb      	ldrh	r3, [r7, #6]
 8000ff8:	085b      	lsrs	r3, r3, #1
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d3de      	bcc.n	8000fbe <Flash_Write+0x1c>
	}
	HAL_FLASH_Lock();
 8001000:	f005 fd70 	bl	8006ae4 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8001004:	b662      	cpsie	i
}
 8001006:	bf00      	nop
	__enable_irq();

	if(status != HAL_OK)
 8001008:	7dfb      	ldrb	r3, [r7, #23]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <Flash_Write+0x70>
		return status;
 800100e:	7dfb      	ldrb	r3, [r7, #23]
 8001010:	e000      	b.n	8001014 <Flash_Write+0x72>
	else
		return addr;
 8001012:	68fb      	ldr	r3, [r7, #12]
}
 8001014:	4618      	mov	r0, r3
 8001016:	3718      	adds	r7, #24
 8001018:	46bd      	mov	sp, r7
 800101a:	bdb0      	pop	{r4, r5, r7, pc}

0800101c <Flash_Read>:
//---------------------------------------------------------------------------------
void Flash_Read (uint32_t addr, void *data_ptr, uint16_t size){
 800101c:	b480      	push	{r7}
 800101e:	b087      	sub	sp, #28
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	4613      	mov	r3, r2
 8001028:	80fb      	strh	r3, [r7, #6]
	 * Read data from flash into data_ptr
	 * addr  Base address.
	 * size  Size all data for recording into page.
	 *
	 */
	for (int i = 0; i < size; i++)
 800102a:	2300      	movs	r3, #0
 800102c:	617b      	str	r3, [r7, #20]
 800102e:	e00c      	b.n	800104a <Flash_Read+0x2e>
	{
		((uint8_t *)data_ptr)[i] = *(__IO uint32_t*)addr;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	6819      	ldr	r1, [r3, #0]
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	68ba      	ldr	r2, [r7, #8]
 8001038:	4413      	add	r3, r2
 800103a:	b2ca      	uxtb	r2, r1
 800103c:	701a      	strb	r2, [r3, #0]
		addr++;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	3301      	adds	r3, #1
 8001042:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < size; i++)
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	3301      	adds	r3, #1
 8001048:	617b      	str	r3, [r7, #20]
 800104a:	88fb      	ldrh	r3, [r7, #6]
 800104c:	697a      	ldr	r2, [r7, #20]
 800104e:	429a      	cmp	r2, r3
 8001050:	dbee      	blt.n	8001030 <Flash_Read+0x14>
	}
}
 8001052:	bf00      	nop
 8001054:	bf00      	nop
 8001056:	371c      	adds	r7, #28
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr

0800105e <OLED_Send_Command>:
		0x00, 0x00, 0x82, 0x7C, 0x10, 0x00,   // }
		0x00, 0x00, 0x06, 0x09, 0x09, 0x06    // ~ (Degrees)
};

//----------------------------------------------------------------------------
void OLED_Send_Command(struct OLED * self,uint8_t Command){
 800105e:	b580      	push	{r7, lr}
 8001060:	b086      	sub	sp, #24
 8001062:	af02      	add	r7, sp, #8
 8001064:	6078      	str	r0, [r7, #4]
 8001066:	460b      	mov	r3, r1
 8001068:	70fb      	strb	r3, [r7, #3]
	/**
	 * Send command to the OLED display
	 */
	uint8_t Local_Bufer[1]={0};
 800106a:	2300      	movs	r3, #0
 800106c:	733b      	strb	r3, [r7, #12]
	Local_Bufer[0]=OLED_Command_Buffer;
 800106e:	2380      	movs	r3, #128	; 0x80
 8001070:	733b      	strb	r3, [r7, #12]
	Local_Bufer[1]=Command;
 8001072:	78fb      	ldrb	r3, [r7, #3]
 8001074:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(self->hi2c,self->Adress,(uint8_t *)&Local_Bufer,(uint16_t)2,1000);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6818      	ldr	r0, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	8899      	ldrh	r1, [r3, #4]
 800107e:	f107 020c 	add.w	r2, r7, #12
 8001082:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001086:	9300      	str	r3, [sp, #0]
 8001088:	2302      	movs	r3, #2
 800108a:	f006 f9a5 	bl	80073d8 <HAL_I2C_Master_Transmit>
}
 800108e:	bf00      	nop
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <OLED_Search_Adress>:
//----------------------------------------------------------------------------
void OLED_Search_Adress(struct OLED * self){
 8001096:	b580      	push	{r7, lr}
 8001098:	b084      	sub	sp, #16
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
	/**
	 *	Searching address for current OLED
	 */
	for(int i=0;i<256;i++){
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	e012      	b.n	80010ca <OLED_Search_Adress+0x34>
			if(HAL_I2C_IsDeviceReady((self->hi2c),i,10,2)==HAL_OK){
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6818      	ldr	r0, [r3, #0]
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	b299      	uxth	r1, r3
 80010ac:	2302      	movs	r3, #2
 80010ae:	220a      	movs	r2, #10
 80010b0:	f006 fa90 	bl	80075d4 <HAL_I2C_IsDeviceReady>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d104      	bne.n	80010c4 <OLED_Search_Adress+0x2e>
				self->Adress=i;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	b29a      	uxth	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	809a      	strh	r2, [r3, #4]
				break;
 80010c2:	e006      	b.n	80010d2 <OLED_Search_Adress+0x3c>
	for(int i=0;i<256;i++){
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	3301      	adds	r3, #1
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	2bff      	cmp	r3, #255	; 0xff
 80010ce:	dde9      	ble.n	80010a4 <OLED_Search_Adress+0xe>
			}
		}
}
 80010d0:	bf00      	nop
 80010d2:	bf00      	nop
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <OLED_ini>:
//----------------------------------------------------------------------------

void OLED_ini(struct OLED * self){
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
	/**
	 * Command initialization of OLED display
	 */
	OLED_Send_Command(self,0xAF);		//Display on/off
 80010e2:	21af      	movs	r1, #175	; 0xaf
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff ffba 	bl	800105e <OLED_Send_Command>

	OLED_Send_Command(self,0xA6);		//Normal/inverse color mode
 80010ea:	21a6      	movs	r1, #166	; 0xa6
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff ffb6 	bl	800105e <OLED_Send_Command>

	OLED_Send_Command(self,0x20);		//Set page address mode
 80010f2:	2120      	movs	r1, #32
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff ffb2 	bl	800105e <OLED_Send_Command>
	OLED_Send_Command(self,0x0);
 80010fa:	2100      	movs	r1, #0
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f7ff ffae 	bl	800105e <OLED_Send_Command>

	OLED_Send_Command(self,0x8d);		//Pump Charge
 8001102:	218d      	movs	r1, #141	; 0x8d
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f7ff ffaa 	bl	800105e <OLED_Send_Command>

	OLED_Send_Command(self,0xA4);		//Entire display on (output flows/ignore ram)
 800110a:	21a4      	movs	r1, #164	; 0xa4
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff ffa6 	bl	800105e <OLED_Send_Command>

	OLED_Send_Command(self,0xA0);		//Segment re-map
 8001112:	21a0      	movs	r1, #160	; 0xa0
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f7ff ffa2 	bl	800105e <OLED_Send_Command>

	OLED_Send_Command(self,0xC7);		//Com output right direction/inverse direction
 800111a:	21c7      	movs	r1, #199	; 0xc7
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff ff9e 	bl	800105e <OLED_Send_Command>

	OLED_Clear_Display(self);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f000 f876 	bl	8001214 <OLED_Clear_Display>

	OLED_Send_Command(self,0x21);    	//Set COM remap value(Set Column Address)
 8001128:	2121      	movs	r1, #33	; 0x21
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff ff97 	bl	800105e <OLED_Send_Command>
	OLED_Send_Command(self,0x1);			//1
 8001130:	2101      	movs	r1, #1
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f7ff ff93 	bl	800105e <OLED_Send_Command>
	OLED_Send_Command(self,0x7E);		//126
 8001138:	217e      	movs	r1, #126	; 0x7e
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff ff8f 	bl	800105e <OLED_Send_Command>

	OLED_Send_Command(self,0x22);		//Set Page Address
 8001140:	2122      	movs	r1, #34	; 0x22
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f7ff ff8b 	bl	800105e <OLED_Send_Command>
	OLED_Send_Command(self,0x0);
 8001148:	2100      	movs	r1, #0
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f7ff ff87 	bl	800105e <OLED_Send_Command>
	OLED_Send_Command(self,0x7);
 8001150:	2107      	movs	r1, #7
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff ff83 	bl	800105e <OLED_Send_Command>

}
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <OLED_Set_Cursor>:
//----------------------------------------------------------------------------
void OLED_Set_Cursor(struct OLED * self,uint16_t x,uint8_t y){
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	807b      	strh	r3, [r7, #2]
 800116c:	4613      	mov	r3, r2
 800116e:	707b      	strb	r3, [r7, #1]
	/**
	 * Sets position on display from what will be display
	 */
	OLED_Send_Command(self,0xB0|y);
 8001170:	787b      	ldrb	r3, [r7, #1]
 8001172:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8001176:	b2db      	uxtb	r3, r3
 8001178:	4619      	mov	r1, r3
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f7ff ff6f 	bl	800105e <OLED_Send_Command>
	OLED_Send_Command(self,x & 0x0F);
 8001180:	887b      	ldrh	r3, [r7, #2]
 8001182:	b2db      	uxtb	r3, r3
 8001184:	f003 030f 	and.w	r3, r3, #15
 8001188:	b2db      	uxtb	r3, r3
 800118a:	4619      	mov	r1, r3
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f7ff ff66 	bl	800105e <OLED_Send_Command>
	OLED_Send_Command(self,((x>>4) & 0x0F)+0x10);
 8001192:	887b      	ldrh	r3, [r7, #2]
 8001194:	091b      	lsrs	r3, r3, #4
 8001196:	b29b      	uxth	r3, r3
 8001198:	b2db      	uxtb	r3, r3
 800119a:	f003 030f 	and.w	r3, r3, #15
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	3310      	adds	r3, #16
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	4619      	mov	r1, r3
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f7ff ff59 	bl	800105e <OLED_Send_Command>
}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <OLED_Set_Char_Cursor>:
//----------------------------------------------------------------------------
void OLED_Set_Char_Cursor(struct OLED * self, uint16_t x,uint8_t y){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	460b      	mov	r3, r1
 80011be:	807b      	strh	r3, [r7, #2]
 80011c0:	4613      	mov	r3, r2
 80011c2:	707b      	strb	r3, [r7, #1]
	/**
	 * Sets position on display from what will be display based on ASII symbols size
	 */
	x*=6;
 80011c4:	887b      	ldrh	r3, [r7, #2]
 80011c6:	461a      	mov	r2, r3
 80011c8:	0052      	lsls	r2, r2, #1
 80011ca:	4413      	add	r3, r2
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	807b      	strh	r3, [r7, #2]
	OLED_Send_Command(self,0xB0|y);
 80011d0:	787b      	ldrb	r3, [r7, #1]
 80011d2:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	4619      	mov	r1, r3
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f7ff ff3f 	bl	800105e <OLED_Send_Command>
	OLED_Send_Command(self,x & 0x0F);
 80011e0:	887b      	ldrh	r3, [r7, #2]
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	f003 030f 	and.w	r3, r3, #15
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	4619      	mov	r1, r3
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7ff ff36 	bl	800105e <OLED_Send_Command>
	OLED_Send_Command(self,((x>>4) & 0x0F)+0x10);
 80011f2:	887b      	ldrh	r3, [r7, #2]
 80011f4:	091b      	lsrs	r3, r3, #4
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	f003 030f 	and.w	r3, r3, #15
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	3310      	adds	r3, #16
 8001202:	b2db      	uxtb	r3, r3
 8001204:	4619      	mov	r1, r3
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff ff29 	bl	800105e <OLED_Send_Command>
}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <OLED_Clear_Display>:
//----------------------------------------------------------------------------
void OLED_Clear_Display(struct OLED * self){
 8001214:	b580      	push	{r7, lr}
 8001216:	b0a6      	sub	sp, #152	; 0x98
 8001218:	af02      	add	r7, sp, #8
 800121a:	6078      	str	r0, [r7, #4]
	/**
	 * Clear OLED display
	 */
	uint8_t Local_Bufer[129]={0};
 800121c:	2300      	movs	r3, #0
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	f107 0310 	add.w	r3, r7, #16
 8001224:	227d      	movs	r2, #125	; 0x7d
 8001226:	2100      	movs	r1, #0
 8001228:	4618      	mov	r0, r3
 800122a:	f008 fa43 	bl	80096b4 <memset>
	Local_Bufer[0]=OLED_Data_Buffer;
 800122e:	2340      	movs	r3, #64	; 0x40
 8001230:	733b      	strb	r3, [r7, #12]
	for(uint8_t j=0;j<8;j++){
 8001232:	2300      	movs	r3, #0
 8001234:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8001238:	e017      	b.n	800126a <OLED_Clear_Display+0x56>
		OLED_Set_Cursor(self,0,j);
 800123a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800123e:	461a      	mov	r2, r3
 8001240:	2100      	movs	r1, #0
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f7ff ff8c 	bl	8001160 <OLED_Set_Cursor>
		HAL_I2C_Master_Transmit(self->hi2c,self->Adress,(uint8_t *)&Local_Bufer,(uint16_t)129,1000);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6818      	ldr	r0, [r3, #0]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	8899      	ldrh	r1, [r3, #4]
 8001250:	f107 020c 	add.w	r2, r7, #12
 8001254:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	2381      	movs	r3, #129	; 0x81
 800125c:	f006 f8bc 	bl	80073d8 <HAL_I2C_Master_Transmit>
	for(uint8_t j=0;j<8;j++){
 8001260:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001264:	3301      	adds	r3, #1
 8001266:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800126a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800126e:	2b07      	cmp	r3, #7
 8001270:	d9e3      	bls.n	800123a <OLED_Clear_Display+0x26>
		}
}
 8001272:	bf00      	nop
 8001274:	bf00      	nop
 8001276:	3790      	adds	r7, #144	; 0x90
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <OLED_Send_Char>:
//----------------------------------------------------------------------------
void OLED_Send_Char(struct OLED * self, uint8_t data){
 800127c:	b580      	push	{r7, lr}
 800127e:	b088      	sub	sp, #32
 8001280:	af02      	add	r7, sp, #8
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	460b      	mov	r3, r1
 8001286:	70fb      	strb	r3, [r7, #3]
	/**
	 * Drawing char on a OLED display
	 */
	uint8_t Local_Bufer[7]={0};
 8001288:	2300      	movs	r3, #0
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	f107 030c 	add.w	r3, r7, #12
 8001290:	2100      	movs	r1, #0
 8001292:	460a      	mov	r2, r1
 8001294:	801a      	strh	r2, [r3, #0]
 8001296:	460a      	mov	r2, r1
 8001298:	709a      	strb	r2, [r3, #2]
	Local_Bufer[0]=OLED_Data_Buffer;
 800129a:	2340      	movs	r3, #64	; 0x40
 800129c:	723b      	strb	r3, [r7, #8]
	int sp=(data-(int)' ')*6;
 800129e:	78fb      	ldrb	r3, [r7, #3]
 80012a0:	f1a3 0220 	sub.w	r2, r3, #32
 80012a4:	4613      	mov	r3, r2
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	4413      	add	r3, r2
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	613b      	str	r3, [r7, #16]
	for(int j=1;j<7;j++)
 80012ae:	2301      	movs	r3, #1
 80012b0:	617b      	str	r3, [r7, #20]
 80012b2:	e00e      	b.n	80012d2 <OLED_Send_Char+0x56>
		Local_Bufer[j]=CharMass[sp+j-1];
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	4413      	add	r3, r2
 80012ba:	3b01      	subs	r3, #1
 80012bc:	4a0e      	ldr	r2, [pc, #56]	; (80012f8 <OLED_Send_Char+0x7c>)
 80012be:	5cd1      	ldrb	r1, [r2, r3]
 80012c0:	f107 0208 	add.w	r2, r7, #8
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	4413      	add	r3, r2
 80012c8:	460a      	mov	r2, r1
 80012ca:	701a      	strb	r2, [r3, #0]
	for(int j=1;j<7;j++)
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	3301      	adds	r3, #1
 80012d0:	617b      	str	r3, [r7, #20]
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	2b06      	cmp	r3, #6
 80012d6:	dded      	ble.n	80012b4 <OLED_Send_Char+0x38>

	HAL_I2C_Master_Transmit(self->hi2c,self->Adress,(uint8_t *)&Local_Bufer,(uint16_t)7,1000);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6818      	ldr	r0, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	8899      	ldrh	r1, [r3, #4]
 80012e0:	f107 0208 	add.w	r2, r7, #8
 80012e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e8:	9300      	str	r3, [sp, #0]
 80012ea:	2307      	movs	r3, #7
 80012ec:	f006 f874 	bl	80073d8 <HAL_I2C_Master_Transmit>

}
 80012f0:	bf00      	nop
 80012f2:	3718      	adds	r7, #24
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20000000 	.word	0x20000000

080012fc <OLED_Clear_Line>:
	 */
	OLED_Set_Char_Cursor(self,x, y);
	OLED_Send_Char(self,' ');
}
//----------------------------------------------------------------------------
void OLED_Clear_Line (struct OLED * self, uint8_t y){
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b0a4      	sub	sp, #144	; 0x90
 8001300:	af02      	add	r7, sp, #8
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	460b      	mov	r3, r1
 8001306:	70fb      	strb	r3, [r7, #3]
	/**
	 * Clear line on OLED display
	 */
	uint8_t Local_Bufer[127]={0};
 8001308:	2300      	movs	r3, #0
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	f107 030c 	add.w	r3, r7, #12
 8001310:	227b      	movs	r2, #123	; 0x7b
 8001312:	2100      	movs	r1, #0
 8001314:	4618      	mov	r0, r3
 8001316:	f008 f9cd 	bl	80096b4 <memset>
	Local_Bufer[0]=OLED_Data_Buffer;
 800131a:	2340      	movs	r3, #64	; 0x40
 800131c:	723b      	strb	r3, [r7, #8]
	OLED_Set_Cursor(self,0,y);
 800131e:	78fb      	ldrb	r3, [r7, #3]
 8001320:	461a      	mov	r2, r3
 8001322:	2100      	movs	r1, #0
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff ff1b 	bl	8001160 <OLED_Set_Cursor>
	HAL_I2C_Master_Transmit(self->hi2c,self->Adress,(uint8_t *)&Local_Bufer,(uint16_t)127,1000);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6818      	ldr	r0, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	8899      	ldrh	r1, [r3, #4]
 8001332:	f107 0208 	add.w	r2, r7, #8
 8001336:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	237f      	movs	r3, #127	; 0x7f
 800133e:	f006 f84b 	bl	80073d8 <HAL_I2C_Master_Transmit>
}
 8001342:	bf00      	nop
 8001344:	3788      	adds	r7, #136	; 0x88
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
	...

0800134c <OLED_Send_String>:
//----------------------------------------------------------------------------
void OLED_Send_String(struct OLED * self,char* str, enum Display_Write_MODE Display_Write_MODE){
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	; 0x28
 8001350:	af02      	add	r7, sp, #8
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	4613      	mov	r3, r2
 8001358:	71fb      	strb	r3, [r7, #7]
	/**
	 * Drawing string on a OLED display
	 */
	uint8_t *Local_Buffer=malloc(sizeof(uint8_t)*strlen(str)*6+1);	//Create a local buffer for str*6(because every symbol has size 6) +1 for data address
 800135a:	68b8      	ldr	r0, [r7, #8]
 800135c:	f7fe fef6 	bl	800014c <strlen>
 8001360:	4602      	mov	r2, r0
 8001362:	4613      	mov	r3, r2
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	4413      	add	r3, r2
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	3301      	adds	r3, #1
 800136c:	4618      	mov	r0, r3
 800136e:	f008 f8e5 	bl	800953c <malloc>
 8001372:	4603      	mov	r3, r0
 8001374:	617b      	str	r3, [r7, #20]
	Local_Buffer[0]=OLED_Data_Buffer;							//Set buffer address as first transfered data
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	2240      	movs	r2, #64	; 0x40
 800137a:	701a      	strb	r2, [r3, #0]

	int i=0,													//i sift string symbol every iteration
 800137c:	2300      	movs	r3, #0
 800137e:	61fb      	str	r3, [r7, #28]
		sp;														//Contain the first column of symbol
	uint8_t j;
	uint16_t counter=0;											//Count quantity of symbols
 8001380:	2300      	movs	r3, #0
 8001382:	833b      	strh	r3, [r7, #24]
	while(str[i]!='\0'){										//Loop while str not end
 8001384:	e04f      	b.n	8001426 <OLED_Send_String+0xda>
		if(str[i]=='\r'||str[i]=='\n'){							//filter all another special symbols
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	68ba      	ldr	r2, [r7, #8]
 800138a:	4413      	add	r3, r2
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b0d      	cmp	r3, #13
 8001390:	d005      	beq.n	800139e <OLED_Send_String+0x52>
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	68ba      	ldr	r2, [r7, #8]
 8001396:	4413      	add	r3, r2
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b0a      	cmp	r3, #10
 800139c:	d103      	bne.n	80013a6 <OLED_Send_String+0x5a>
			i++;
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	3301      	adds	r3, #1
 80013a2:	61fb      	str	r3, [r7, #28]
			continue;
 80013a4:	e03f      	b.n	8001426 <OLED_Send_String+0xda>
		}
		sp=(str[i]-(int)' ')*6;									//Computing the first column of symbol
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	68ba      	ldr	r2, [r7, #8]
 80013aa:	4413      	add	r3, r2
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	f1a3 0220 	sub.w	r2, r3, #32
 80013b2:	4613      	mov	r3, r2
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	4413      	add	r3, r2
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	613b      	str	r3, [r7, #16]
		for(j=0;j<6;j++){										//Write 6 column of symbol based on Display_Write_MODE
 80013bc:	2300      	movs	r3, #0
 80013be:	76fb      	strb	r3, [r7, #27]
 80013c0:	e028      	b.n	8001414 <OLED_Send_String+0xc8>
			if(Display_Write_MODE==Direct_Display_MODE)
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d110      	bne.n	80013ea <OLED_Send_String+0x9e>
				Local_Buffer[(j+counter*6)+1]=CharMass[sp+j];
 80013c8:	7efa      	ldrb	r2, [r7, #27]
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	18d1      	adds	r1, r2, r3
 80013ce:	7ef8      	ldrb	r0, [r7, #27]
 80013d0:	8b3a      	ldrh	r2, [r7, #24]
 80013d2:	4613      	mov	r3, r2
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	4413      	add	r3, r2
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	4403      	add	r3, r0
 80013dc:	3301      	adds	r3, #1
 80013de:	697a      	ldr	r2, [r7, #20]
 80013e0:	4413      	add	r3, r2
 80013e2:	4a20      	ldr	r2, [pc, #128]	; (8001464 <OLED_Send_String+0x118>)
 80013e4:	5c52      	ldrb	r2, [r2, r1]
 80013e6:	701a      	strb	r2, [r3, #0]
 80013e8:	e011      	b.n	800140e <OLED_Send_String+0xc2>
			else
				Local_Buffer[(j+counter*6)+1]=~CharMass[sp+j];
 80013ea:	7efa      	ldrb	r2, [r7, #27]
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	4413      	add	r3, r2
 80013f0:	4a1c      	ldr	r2, [pc, #112]	; (8001464 <OLED_Send_String+0x118>)
 80013f2:	5cd1      	ldrb	r1, [r2, r3]
 80013f4:	7ef8      	ldrb	r0, [r7, #27]
 80013f6:	8b3a      	ldrh	r2, [r7, #24]
 80013f8:	4613      	mov	r3, r2
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	4413      	add	r3, r2
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	4403      	add	r3, r0
 8001402:	3301      	adds	r3, #1
 8001404:	697a      	ldr	r2, [r7, #20]
 8001406:	4413      	add	r3, r2
 8001408:	43ca      	mvns	r2, r1
 800140a:	b2d2      	uxtb	r2, r2
 800140c:	701a      	strb	r2, [r3, #0]
		for(j=0;j<6;j++){										//Write 6 column of symbol based on Display_Write_MODE
 800140e:	7efb      	ldrb	r3, [r7, #27]
 8001410:	3301      	adds	r3, #1
 8001412:	76fb      	strb	r3, [r7, #27]
 8001414:	7efb      	ldrb	r3, [r7, #27]
 8001416:	2b05      	cmp	r3, #5
 8001418:	d9d3      	bls.n	80013c2 <OLED_Send_String+0x76>
		}
		i++;
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	3301      	adds	r3, #1
 800141e:	61fb      	str	r3, [r7, #28]
		counter++;
 8001420:	8b3b      	ldrh	r3, [r7, #24]
 8001422:	3301      	adds	r3, #1
 8001424:	833b      	strh	r3, [r7, #24]
	while(str[i]!='\0'){										//Loop while str not end
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	68ba      	ldr	r2, [r7, #8]
 800142a:	4413      	add	r3, r2
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1a9      	bne.n	8001386 <OLED_Send_String+0x3a>
	}
	HAL_I2C_Master_Transmit(self->hi2c,self->Adress,Local_Buffer,(uint16_t)(counter*6)+1,1000);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	6818      	ldr	r0, [r3, #0]
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	8899      	ldrh	r1, [r3, #4]
 800143a:	8b3b      	ldrh	r3, [r7, #24]
 800143c:	461a      	mov	r2, r3
 800143e:	0052      	lsls	r2, r2, #1
 8001440:	4413      	add	r3, r2
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	b29b      	uxth	r3, r3
 8001446:	3301      	adds	r3, #1
 8001448:	b29b      	uxth	r3, r3
 800144a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800144e:	9200      	str	r2, [sp, #0]
 8001450:	697a      	ldr	r2, [r7, #20]
 8001452:	f005 ffc1 	bl	80073d8 <HAL_I2C_Master_Transmit>
	free(Local_Buffer);
 8001456:	6978      	ldr	r0, [r7, #20]
 8001458:	f008 f878 	bl	800954c <free>
}
 800145c:	bf00      	nop
 800145e:	3720      	adds	r7, #32
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20000000 	.word	0x20000000

08001468 <PAC_Control_Vector_Create>:
 *      Author: I
 */
#include "PAC.h"

//---------------------------------------------------------------------------------
struct PAC_Control_Vector *PAC_Control_Vector_Create(struct PAC *self, struct PAC_Control_Vector *element){
 8001468:	b590      	push	{r4, r7, lr}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	6039      	str	r1, [r7, #0]
	/**
	 * Create new PAC_Control_Unit to PAC_Control_Vector into PAC
	 * return pointer to new PAC_Control_Unit
	 */
	struct PAC_Control_Vector *NEW_Element= malloc(sizeof(struct PAC_Control_Vector));	//allocate memory for a new element
 8001472:	2010      	movs	r0, #16
 8001474:	f008 f862 	bl	800953c <malloc>
 8001478:	4603      	mov	r3, r0
 800147a:	60bb      	str	r3, [r7, #8]
	*NEW_Element=*element;																//copy data to a new element
 800147c:	68ba      	ldr	r2, [r7, #8]
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	4614      	mov	r4, r2
 8001482:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001484:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	NEW_Element->next=NULL;
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
	if(self->PAC_Control_Vector_Head==NULL){											//Check. is this a first element
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	691b      	ldr	r3, [r3, #16]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d103      	bne.n	800149e <PAC_Control_Vector_Create+0x36>
		self->PAC_Control_Vector_Head=NEW_Element;										// New element is head
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	68ba      	ldr	r2, [r7, #8]
 800149a:	611a      	str	r2, [r3, #16]
 800149c:	e00d      	b.n	80014ba <PAC_Control_Vector_Create+0x52>
	}else{																				// else skip to last element
		struct PAC_Control_Vector *now=self->PAC_Control_Vector_Head;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	691b      	ldr	r3, [r3, #16]
 80014a2:	60fb      	str	r3, [r7, #12]
		while(now->next!=NULL){
 80014a4:	e002      	b.n	80014ac <PAC_Control_Vector_Create+0x44>
			now=now->next;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	60fb      	str	r3, [r7, #12]
		while(now->next!=NULL){
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d1f8      	bne.n	80014a6 <PAC_Control_Vector_Create+0x3e>
		}
		now->next=NEW_Element;															//next last element is new element
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	68ba      	ldr	r2, [r7, #8]
 80014b8:	601a      	str	r2, [r3, #0]
	}
	return NEW_Element;																	//return pointer for a new element
 80014ba:	68bb      	ldr	r3, [r7, #8]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3714      	adds	r7, #20
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd90      	pop	{r4, r7, pc}

080014c4 <PAC_Control_Vector_PIN_Reset>:
//---------------------------------------------------------------------------------
void PAC_Control_Vector_PIN_Reset(struct PAC_Control_Vector *self){
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	/**
	 * Reset all GPIO Pins of all PAC_Control_Units
	 */
	while(self!=NULL){
 80014cc:	e00a      	b.n	80014e4 <PAC_Control_Vector_PIN_Reset+0x20>
		HAL_GPIO_WritePin(self->GPIO, self->PIN, GPIO_PIN_RESET);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6898      	ldr	r0, [r3, #8]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	889b      	ldrh	r3, [r3, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	4619      	mov	r1, r3
 80014da:	f005 fe08 	bl	80070ee <HAL_GPIO_WritePin>
		self=self->next;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	607b      	str	r3, [r7, #4]
	while(self!=NULL){
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d1f1      	bne.n	80014ce <PAC_Control_Vector_PIN_Reset+0xa>
	}
}
 80014ea:	bf00      	nop
 80014ec:	bf00      	nop
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <PAC_Controll_Callback>:
//---------------------------------------------------------------------------------
void PAC_Controll_Callback(struct PAC *self){
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
	/**
	 * Set and reset PIN's state for all PAC_Control_Unit in tight time
	 */
	struct PAC_Control_Vector *now=self->PAC_Control_Vector_Head;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	691b      	ldr	r3, [r3, #16]
 8001500:	60fb      	str	r3, [r7, #12]
	do{
		if(now->State==PAC_Control_ON){													//if Current PAC_Control_Unit is turned ON
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	7b9b      	ldrb	r3, [r3, #14]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d121      	bne.n	800154e <PAC_Controll_Callback+0x5a>
			if(self->ZCD.TIM_Counter==(self->ZCD.MAX_TIM_Counter-now->Control_Value)){	// Check if current tim counter equal to Control_Value
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	889b      	ldrh	r3, [r3, #4]
 800150e:	461a      	mov	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	88db      	ldrh	r3, [r3, #6]
 8001514:	4619      	mov	r1, r3
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	899b      	ldrh	r3, [r3, #12]
 800151a:	1acb      	subs	r3, r1, r3
 800151c:	429a      	cmp	r2, r3
 800151e:	d108      	bne.n	8001532 <PAC_Controll_Callback+0x3e>
				HAL_GPIO_WritePin(now->GPIO, now->PIN, GPIO_PIN_SET);					//if true set PAC_Control_Unit GPIO's PIN state
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	6898      	ldr	r0, [r3, #8]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	889b      	ldrh	r3, [r3, #4]
 8001528:	2201      	movs	r2, #1
 800152a:	4619      	mov	r1, r3
 800152c:	f005 fddf 	bl	80070ee <HAL_GPIO_WritePin>
 8001530:	e00d      	b.n	800154e <PAC_Controll_Callback+0x5a>
			}else if(self->ZCD.TIM_Counter>=self->ZCD.MAX_TIM_Counter){					//if TIM_Counter more than MAX_TIM_Counter (max control value)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	889a      	ldrh	r2, [r3, #4]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	88db      	ldrh	r3, [r3, #6]
 800153a:	429a      	cmp	r2, r3
 800153c:	d307      	bcc.n	800154e <PAC_Controll_Callback+0x5a>
				HAL_GPIO_WritePin(now->GPIO, now->PIN, GPIO_PIN_RESET);					//Reset PAC_Control_Unit GPIO's PIN state
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	6898      	ldr	r0, [r3, #8]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	889b      	ldrh	r3, [r3, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	4619      	mov	r1, r3
 800154a:	f005 fdd0 	bl	80070ee <HAL_GPIO_WritePin>
			}
		}
		now=now->next;																	//go to next PAC_Control_Unit
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	60fb      	str	r3, [r7, #12]
	}while(now!=NULL);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1d3      	bne.n	8001502 <PAC_Controll_Callback+0xe>
}
 800155a:	bf00      	nop
 800155c:	bf00      	nop
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <ZCD_Falling_Adge_Callback>:
//---------------------------------------------------------------------------------
void ZCD_Falling_Adge_Callback(struct PAC *self){
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
	/**
	 * Count frequency and reset TIM counter which contain Control Counter
	 */
	if(self->ZCD.State==ZCD_STATE_SETUP){
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	785b      	ldrb	r3, [r3, #1]
 8001570:	2b02      	cmp	r3, #2
 8001572:	d105      	bne.n	8001580 <ZCD_Falling_Adge_Callback+0x1c>
		self->ZCD.Frequency_Counter++;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	78db      	ldrb	r3, [r3, #3]
 8001578:	3301      	adds	r3, #1
 800157a:	b2da      	uxtb	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	70da      	strb	r2, [r3, #3]
	}
	self->ZCD.TIM_Counter=0;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	809a      	strh	r2, [r3, #4]
}
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	bc80      	pop	{r7}
 800158e:	4770      	bx	lr

08001590 <ZCD_Rising_Adge_Callback>:
//---------------------------------------------------------------------------------
void ZCD_Rising_Adge_Callback(struct PAC *self){
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
	/**
	 * Check ZCD State and set max control value after setup ends
	 */
	if(self->ZCD.State==ZCD_STATE_SETUP){							//if setup
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	785b      	ldrb	r3, [r3, #1]
 800159c:	2b02      	cmp	r3, #2
 800159e:	d10f      	bne.n	80015c0 <ZCD_Rising_Adge_Callback+0x30>
		if(self->ZCD.Frequency!=0){									//and frequency count!=0
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	789b      	ldrb	r3, [r3, #2]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d00b      	beq.n	80015c0 <ZCD_Rising_Adge_Callback+0x30>
			self->ZCD.MAX_TIM_Counter=self->ZCD.TIM_Counter-3;		//Set max control value which can be set ass control value in PAC_Control_Unit
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	889b      	ldrh	r3, [r3, #4]
 80015ac:	3b03      	subs	r3, #3
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	80da      	strh	r2, [r3, #6]
			PAC_ON_Callback(self);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f002 fd2f 	bl	8004018 <PAC_ON_Callback>
			self->ZCD.State=ZCD_STATE_ON;							//set turn ON state
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2201      	movs	r2, #1
 80015be:	705a      	strb	r2, [r3, #1]
		}
	}
	PAC_Control_Vector_PIN_Reset(self->PAC_Control_Vector_Head);	//Reset all GPIO Pins of all PAC_Control_Units
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	691b      	ldr	r3, [r3, #16]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff ff7d 	bl	80014c4 <PAC_Control_Vector_PIN_Reset>
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <ZCD_ini>:
//---------------------------------------------------------------------------------
void ZCD_ini(struct ZCD *self){
 80015d2:	b480      	push	{r7}
 80015d4:	b083      	sub	sp, #12
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
	/**
	 * Inicialistaion Reset all value
	 */
	self->Pin_State_Now=0;
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	7813      	ldrb	r3, [r2, #0]
 80015de:	f36f 0300 	bfc	r3, #0, #1
 80015e2:	7013      	strb	r3, [r2, #0]
	self->Pin_State_Prew=0;
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	7813      	ldrb	r3, [r2, #0]
 80015e8:	f36f 0341 	bfc	r3, #1, #1
 80015ec:	7013      	strb	r3, [r2, #0]
	self->Frequency=0;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	709a      	strb	r2, [r3, #2]
	self->MAX_TIM_Counter=0;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	80da      	strh	r2, [r3, #6]
	self->TIM_Counter=0;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	809a      	strh	r2, [r3, #4]
}
 8001600:	bf00      	nop
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	bc80      	pop	{r7}
 8001608:	4770      	bx	lr

0800160a <ZCD_OFF>:
//---------------------------------------------------------------------------------
void ZCD_OFF(struct ZCD *self){
 800160a:	b480      	push	{r7}
 800160c:	b083      	sub	sp, #12
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
	/**
	 * Turn OFF ZCD
	 */
	self->State=ZCD_STATE_OFF;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	705a      	strb	r2, [r3, #1]
	self->Frequency=0;				//Reset frequency count
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	709a      	strb	r2, [r3, #2]
}
 800161e:	bf00      	nop
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr

08001628 <ZCD_ON>:
//---------------------------------------------------------------------------------
void ZCD_ON(struct ZCD *self){
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
	/**
	 * Turn ON ZCD
	 */
	self->State=ZCD_STATE_SETUP;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2202      	movs	r2, #2
 8001634:	705a      	strb	r2, [r3, #1]
}
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr

08001640 <PAC_ON>:
//---------------------------------------------------------------------------------
void PAC_ON(struct PAC *self){
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
	/**
	 * Turn ON PAC
	 */
	if(self->ZCD.State==ZCD_STATE_OFF){
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	785b      	ldrb	r3, [r3, #1]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d107      	bne.n	8001660 <PAC_ON+0x20>
		ZCD_ini(&self->ZCD);			//Resets ZCD
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff ffbd 	bl	80015d2 <ZCD_ini>
		ZCD_ON(&self->ZCD);				//Turn ON ZCD
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff ffe4 	bl	8001628 <ZCD_ON>
	}
}
 8001660:	bf00      	nop
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <PAC_OFF>:
//---------------------------------------------------------------------------------
void PAC_OFF(struct PAC *self){
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
	/**
	 * ZCD Turns OFF if all PAC_Control_Units are turned OFF
	 */
	struct PAC_Control_Vector *now;
	uint8_t State=0;
 8001670:	2300      	movs	r3, #0
 8001672:	72fb      	strb	r3, [r7, #11]
	now=self->PAC_Control_Vector_Head;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	691b      	ldr	r3, [r3, #16]
 8001678:	60fb      	str	r3, [r7, #12]

	while(now!=NULL){
 800167a:	e013      	b.n	80016a4 <PAC_OFF+0x3c>
		State|=now->State;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	7b9a      	ldrb	r2, [r3, #14]
 8001680:	7afb      	ldrb	r3, [r7, #11]
 8001682:	4313      	orrs	r3, r2
 8001684:	72fb      	strb	r3, [r7, #11]
		if(now->State==PAC_Control_OFF)
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	7b9b      	ldrb	r3, [r3, #14]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d107      	bne.n	800169e <PAC_OFF+0x36>
			HAL_GPIO_WritePin(now->GPIO, now->PIN, GPIO_PIN_RESET);		//Resets GPIO pin of current PAC_Control_Unit
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6898      	ldr	r0, [r3, #8]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	889b      	ldrh	r3, [r3, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	4619      	mov	r1, r3
 800169a:	f005 fd28 	bl	80070ee <HAL_GPIO_WritePin>
		now=now->next;													//Go to next unit
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	60fb      	str	r3, [r7, #12]
	while(now!=NULL){
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1e8      	bne.n	800167c <PAC_OFF+0x14>
	}
	if(State==PAC_Control_OFF){											//Check State
 80016aa:	7afb      	ldrb	r3, [r7, #11]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d103      	bne.n	80016b8 <PAC_OFF+0x50>
		ZCD_OFF(&self->ZCD);											//If all PAC_Control_Units are turned OFF, turn OFF ZCD
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff ffa9 	bl	800160a <ZCD_OFF>
	}

}
 80016b8:	bf00      	nop
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <PAC_EXTI>:
//---------------------------------------------------------------------------------
uint8_t PAC_EXTI(struct PAC *self,uint16_t *GPIO){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
	/**
	 * PACs GPIOs PIN interrupt
	 * return 1 if current interrupt was created by ZCDs interrupt GPIOs PIN
	 * return 0 if current interrupt was not created by ZCDs interrupt GPIOs PIN
	 */
	if(self->ZCD.State!=ZCD_STATE_OFF){								//check if ZCD state is ON OR Setup
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	785b      	ldrb	r3, [r3, #1]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d03c      	beq.n	800174c <PAC_EXTI+0x8c>
		if(*GPIO==self->ZCD.EXTI_PIN){								//Was current interrupt created by ZCD's interrupt GPIO's PIN
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	881a      	ldrh	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	891b      	ldrh	r3, [r3, #8]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d136      	bne.n	800174c <PAC_EXTI+0x8c>
			self->ZCD.Pin_State_Now=HAL_GPIO_ReadPin(self->ZCD.GPIO,self->ZCD.EXTI_PIN);		//set current pin state
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	68da      	ldr	r2, [r3, #12]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	891b      	ldrh	r3, [r3, #8]
 80016e6:	4619      	mov	r1, r3
 80016e8:	4610      	mov	r0, r2
 80016ea:	f005 fce9 	bl	80070c0 <HAL_GPIO_ReadPin>
 80016ee:	4603      	mov	r3, r0
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	b2d9      	uxtb	r1, r3
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	7813      	ldrb	r3, [r2, #0]
 80016fa:	f361 0300 	bfi	r3, r1, #0, #1
 80016fe:	7013      	strb	r3, [r2, #0]
			if(self->ZCD.Pin_State_Now!=self->ZCD.Pin_State_Prew){	//if pin state was Changed
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001708:	b2da      	uxtb	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001712:	b2db      	uxtb	r3, r3
 8001714:	429a      	cmp	r2, r3
 8001716:	d00d      	beq.n	8001734 <PAC_EXTI+0x74>
				if(self->ZCD.Pin_State_Now==GPIO_PIN_RESET){		//Falling edge
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	f003 0301 	and.w	r3, r3, #1
 8001720:	b2db      	uxtb	r3, r3
 8001722:	2b00      	cmp	r3, #0
 8001724:	d103      	bne.n	800172e <PAC_EXTI+0x6e>
					ZCD_Falling_Adge_Callback(self);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7ff ff1c 	bl	8001564 <ZCD_Falling_Adge_Callback>
 800172c:	e002      	b.n	8001734 <PAC_EXTI+0x74>
				}
				else{												//Rising edge
					ZCD_Rising_Adge_Callback(self);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f7ff ff2e 	bl	8001590 <ZCD_Rising_Adge_Callback>
				}
			}
			self->ZCD.Pin_State_Prew=self->ZCD.Pin_State_Now;		// Set current state to prew state
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800173c:	b2d9      	uxtb	r1, r3
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	7813      	ldrb	r3, [r2, #0]
 8001742:	f361 0341 	bfi	r3, r1, #1, #1
 8001746:	7013      	strb	r3, [r2, #0]
			return 1;												//return 1
 8001748:	2301      	movs	r3, #1
 800174a:	e000      	b.n	800174e <PAC_EXTI+0x8e>
		}
	}
	return 0;														//return 0
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
	...

08001758 <PAC_it>:
//---------------------------------------------------------------------------------
void PAC_it(struct PAC *self){
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	 * and after call
	 * this function must called for a 10000 times in one second
	 *
	 */
	static uint16_t count=0;
	if(self->ZCD.State!=ZCD_STATE_OFF){
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	785b      	ldrb	r3, [r3, #1]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d023      	beq.n	80017b0 <PAC_it+0x58>
		if(self->ZCD.State==ZCD_STATE_SETUP){
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	785b      	ldrb	r3, [r3, #1]
 800176c:	2b02      	cmp	r3, #2
 800176e:	d116      	bne.n	800179e <PAC_it+0x46>
			if(count++==9999){										//counting for 1 second
 8001770:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <PAC_it+0x60>)
 8001772:	881b      	ldrh	r3, [r3, #0]
 8001774:	1c5a      	adds	r2, r3, #1
 8001776:	b291      	uxth	r1, r2
 8001778:	4a0f      	ldr	r2, [pc, #60]	; (80017b8 <PAC_it+0x60>)
 800177a:	8011      	strh	r1, [r2, #0]
 800177c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001780:	4293      	cmp	r3, r2
 8001782:	d10f      	bne.n	80017a4 <PAC_it+0x4c>
				self->ZCD.Frequency=self->ZCD.Frequency_Counter/2;	//computing frequency	(ZCD.Frequency_Counter count every time when zero crossing 2 times for one sin period)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	78db      	ldrb	r3, [r3, #3]
 8001788:	085b      	lsrs	r3, r3, #1
 800178a:	b2da      	uxtb	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	709a      	strb	r2, [r3, #2]
				self->ZCD.Frequency_Counter=0;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	70da      	strb	r2, [r3, #3]
				count=0;
 8001796:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <PAC_it+0x60>)
 8001798:	2200      	movs	r2, #0
 800179a:	801a      	strh	r2, [r3, #0]
 800179c:	e002      	b.n	80017a4 <PAC_it+0x4c>
			}
		}else{														//ZCD_STATE is ON when frequency end MAX_TIM_Counter are computed
			PAC_Controll_Callback(self);							//Call Control Function
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7ff fea8 	bl	80014f4 <PAC_Controll_Callback>
		}
		self->ZCD.TIM_Counter++;	//Counting how many TIM's interrupts are goes thru one period before Falling edge and Rising edge
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	889b      	ldrh	r3, [r3, #4]
 80017a8:	3301      	adds	r3, #1
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	809a      	strh	r2, [r3, #4]
									//in ZCD_Rising_Adge_Callback value from this counter will be written into MAX_TIM_Counter (MAX control value for PAC_Control_Unit);
	}
}
 80017b0:	bf00      	nop
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	200002b4 	.word	0x200002b4

080017bc <PAC_Set_Control_Value>:
//---------------------------------------------------------------------------------
void PAC_Set_Control_Value(uint16_t value, struct PAC_Control_Vector *self){
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	6039      	str	r1, [r7, #0]
 80017c6:	80fb      	strh	r3, [r7, #6]
	/**
	 * Set control value for current PAC_Control_Unit
	 */
	self->Control_Value=value;
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	88fa      	ldrh	r2, [r7, #6]
 80017cc:	819a      	strh	r2, [r3, #12]
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc80      	pop	{r7}
 80017d6:	4770      	bx	lr

080017d8 <PAC_Get_State>:
//---------------------------------------------------------------------------------
enum ZCD_State PAC_Get_State(struct PAC *self){
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	return self->ZCD.State;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	785b      	ldrb	r3, [r3, #1]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bc80      	pop	{r7}
 80017ec:	4770      	bx	lr

080017ee <PAC_Get_Frequency>:
//---------------------------------------------------------------------------------
uint8_t PAC_Get_Frequency(struct PAC *self){
 80017ee:	b480      	push	{r7}
 80017f0:	b083      	sub	sp, #12
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
	return self->ZCD.Frequency;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	789b      	ldrb	r3, [r3, #2]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr

08001804 <PAC_Get_Max_Control_Value>:
//---------------------------------------------------------------------------------
uint16_t PAC_Get_Max_Control_Value(struct PAC *self){
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
	/**
	 * MAX control value for PAC_Control_Unit
	 */
	return self->ZCD.MAX_TIM_Counter;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	88db      	ldrh	r3, [r3, #6]
}
 8001810:	4618      	mov	r0, r3
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	bc80      	pop	{r7}
 8001818:	4770      	bx	lr

0800181a <PAC_ini>:
//---------------------------------------------------------------------------------
void PAC_ini(struct PAC *self){
 800181a:	b580      	push	{r7, lr}
 800181c:	b082      	sub	sp, #8
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
	ZCD_ini(&self->ZCD);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff fed4 	bl	80015d2 <ZCD_ini>
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <PID_ini>:
#include "PID.h"
//---------------------------------------------------------------------------------
void PID_ini(struct PID* self){
 8001832:	b480      	push	{r7}
 8001834:	b083      	sub	sp, #12
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
	/**
	 * Reset I nad P buffers
	 */
	self->D_Prev=0;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f04f 0200 	mov.w	r2, #0
 8001840:	619a      	str	r2, [r3, #24]
	self->I=0;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f04f 0200 	mov.w	r2, #0
 8001848:	615a      	str	r2, [r3, #20]
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr

08001854 <PID_it>:
//---------------------------------------------------------------------------------
uint32_t PID_it(struct PID* self){
 8001854:	b590      	push	{r4, r7, lr}
 8001856:	b087      	sub	sp, #28
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
	 * if res control value <0 return 0;
	 * if res control MAX_Control value >0 return MAX_Control;
	 */
	float P,D,Res;

	P=self->Point-self->Point_Now;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	69da      	ldr	r2, [r3, #28]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a1b      	ldr	r3, [r3, #32]
 8001864:	4619      	mov	r1, r3
 8001866:	4610      	mov	r0, r2
 8001868:	f7fe fc7c 	bl	8000164 <__aeabi_fsub>
 800186c:	4603      	mov	r3, r0
 800186e:	617b      	str	r3, [r7, #20]
	self->I=self->I+P*self->dt;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	695c      	ldr	r4, [r3, #20]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	6979      	ldr	r1, [r7, #20]
 800187a:	4618      	mov	r0, r3
 800187c:	f7fe fd7c 	bl	8000378 <__aeabi_fmul>
 8001880:	4603      	mov	r3, r0
 8001882:	4619      	mov	r1, r3
 8001884:	4620      	mov	r0, r4
 8001886:	f7fe fc6f 	bl	8000168 <__addsf3>
 800188a:	4603      	mov	r3, r0
 800188c:	461a      	mov	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	615a      	str	r2, [r3, #20]
	D=(P-self->D_Prev)/self->dt;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	699b      	ldr	r3, [r3, #24]
 8001896:	4619      	mov	r1, r3
 8001898:	6978      	ldr	r0, [r7, #20]
 800189a:	f7fe fc63 	bl	8000164 <__aeabi_fsub>
 800189e:	4603      	mov	r3, r0
 80018a0:	461a      	mov	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	4619      	mov	r1, r3
 80018a8:	4610      	mov	r0, r2
 80018aa:	f7fe fe19 	bl	80004e0 <__aeabi_fdiv>
 80018ae:	4603      	mov	r3, r0
 80018b0:	613b      	str	r3, [r7, #16]
	self->D_Prev=P;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	697a      	ldr	r2, [r7, #20]
 80018b6:	619a      	str	r2, [r3, #24]
	Res=((P*self->KP)+(self->I*self->KI)+(D*self->KD));
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6979      	ldr	r1, [r7, #20]
 80018be:	4618      	mov	r0, r3
 80018c0:	f7fe fd5a 	bl	8000378 <__aeabi_fmul>
 80018c4:	4603      	mov	r3, r0
 80018c6:	461c      	mov	r4, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	695a      	ldr	r2, [r3, #20]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	4619      	mov	r1, r3
 80018d2:	4610      	mov	r0, r2
 80018d4:	f7fe fd50 	bl	8000378 <__aeabi_fmul>
 80018d8:	4603      	mov	r3, r0
 80018da:	4619      	mov	r1, r3
 80018dc:	4620      	mov	r0, r4
 80018de:	f7fe fc43 	bl	8000168 <__addsf3>
 80018e2:	4603      	mov	r3, r0
 80018e4:	461c      	mov	r4, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	6939      	ldr	r1, [r7, #16]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7fe fd43 	bl	8000378 <__aeabi_fmul>
 80018f2:	4603      	mov	r3, r0
 80018f4:	4619      	mov	r1, r3
 80018f6:	4620      	mov	r0, r4
 80018f8:	f7fe fc36 	bl	8000168 <__addsf3>
 80018fc:	4603      	mov	r3, r0
 80018fe:	60fb      	str	r3, [r7, #12]
	if(self->Point_Now-self->Point>100){
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6a1a      	ldr	r2, [r3, #32]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	69db      	ldr	r3, [r3, #28]
 8001908:	4619      	mov	r1, r3
 800190a:	4610      	mov	r0, r2
 800190c:	f7fe fc2a 	bl	8000164 <__aeabi_fsub>
 8001910:	4603      	mov	r3, r0
 8001912:	4916      	ldr	r1, [pc, #88]	; (800196c <PID_it+0x118>)
 8001914:	4618      	mov	r0, r3
 8001916:	f7fe feeb 	bl	80006f0 <__aeabi_fcmpgt>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d002      	beq.n	8001926 <PID_it+0xd2>
		PID_ini(self);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f7ff ff86 	bl	8001832 <PID_ini>
	}

	if(Res<0){
 8001926:	f04f 0100 	mov.w	r1, #0
 800192a:	68f8      	ldr	r0, [r7, #12]
 800192c:	f7fe fec2 	bl	80006b4 <__aeabi_fcmplt>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <PID_it+0xe6>
		return 0;
 8001936:	2300      	movs	r3, #0
 8001938:	e013      	b.n	8001962 <PID_it+0x10e>
	}
	if (Res<=self->MAX_Control)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	8a1b      	ldrh	r3, [r3, #16]
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe fcc6 	bl	80002d0 <__aeabi_i2f>
 8001944:	4603      	mov	r3, r0
 8001946:	4619      	mov	r1, r3
 8001948:	68f8      	ldr	r0, [r7, #12]
 800194a:	f7fe febd 	bl	80006c8 <__aeabi_fcmple>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d004      	beq.n	800195e <PID_it+0x10a>
		return Res;
 8001954:	68f8      	ldr	r0, [r7, #12]
 8001956:	f7fe fefb 	bl	8000750 <__aeabi_f2uiz>
 800195a:	4603      	mov	r3, r0
 800195c:	e001      	b.n	8001962 <PID_it+0x10e>
	else
		return self->MAX_Control;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	8a1b      	ldrh	r3, [r3, #16]
}
 8001962:	4618      	mov	r0, r3
 8001964:	371c      	adds	r7, #28
 8001966:	46bd      	mov	sp, r7
 8001968:	bd90      	pop	{r4, r7, pc}
 800196a:	bf00      	nop
 800196c:	42c80000 	.word	0x42c80000

08001970 <PID_Set_Point>:
//---------------------------------------------------------------------------------
void PID_Set_Point(struct PID* self,int Point){
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
	/**
	 * Set point for what system will be going
	 */
	self->Point=Point;
 800197a:	6838      	ldr	r0, [r7, #0]
 800197c:	f7fe fca8 	bl	80002d0 <__aeabi_i2f>
 8001980:	4602      	mov	r2, r0
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	61da      	str	r2, [r3, #28]
}
 8001986:	bf00      	nop
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <PID_Set_Curent_Point>:
//---------------------------------------------------------------------------------
void PID_Set_Curent_Point(struct PID* self,int Point){
 800198e:	b580      	push	{r7, lr}
 8001990:	b082      	sub	sp, #8
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
 8001996:	6039      	str	r1, [r7, #0]
	/*
	 * Set current point
	 */
	self->Point_Now=Point;
 8001998:	6838      	ldr	r0, [r7, #0]
 800199a:	f7fe fc99 	bl	80002d0 <__aeabi_i2f>
 800199e:	4602      	mov	r2, r0
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	621a      	str	r2, [r3, #32]
}
 80019a4:	bf00      	nop
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <PID_Set_MAX_Control>:
//---------------------------------------------------------------------------------
void PID_Set_MAX_Control(uint16_t MAX_Control_Value, struct PID* self){
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	6039      	str	r1, [r7, #0]
 80019b6:	80fb      	strh	r3, [r7, #6]
	/*
	 * Set max value witch can PID_it return as result
	 */
	self->MAX_Control=MAX_Control_Value;
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	88fa      	ldrh	r2, [r7, #6]
 80019bc:	821a      	strh	r2, [r3, #16]
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr

080019c8 <Set_Temperature>:
#include "Soldering_Station.h"
//---------------------------------------------------------------------------------
uint16_t Set_Temperature(struct Temperature_Presets *Temperature_Presets_C, struct Temperature_Converting *Temperature_Converting, enum MODE *MODE){
 80019c8:	b590      	push	{r4, r7, lr}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
	 * Set temperature in ADC Levels which occur to the MODE
	 * Temperature_Presets_C;
	 * MODE - MANUAL PRESSET1 PRESSET2 SLEEP
	 * return Temperature in ADC levels
	 */
	switch(*MODE){						//Set temperature in celsius which occur to the MODE
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b03      	cmp	r3, #3
 80019da:	d81f      	bhi.n	8001a1c <Set_Temperature+0x54>
 80019dc:	a201      	add	r2, pc, #4	; (adr r2, 80019e4 <Set_Temperature+0x1c>)
 80019de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e2:	bf00      	nop
 80019e4:	080019f5 	.word	0x080019f5
 80019e8:	080019ff 	.word	0x080019ff
 80019ec:	08001a09 	.word	0x08001a09
 80019f0:	08001a13 	.word	0x08001a13
			case MANUAL:
				Temperature_Converting->Temperature_Set_C=Temperature_Presets_C->Manual;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	881a      	ldrh	r2, [r3, #0]
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	80da      	strh	r2, [r3, #6]
				break;
 80019fc:	e00e      	b.n	8001a1c <Set_Temperature+0x54>
			case PRESET1:
				Temperature_Converting->Temperature_Set_C=Temperature_Presets_C->Preset1;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	885a      	ldrh	r2, [r3, #2]
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	80da      	strh	r2, [r3, #6]
				break;
 8001a06:	e009      	b.n	8001a1c <Set_Temperature+0x54>
			case PRESET2:
				Temperature_Converting->Temperature_Set_C=Temperature_Presets_C->Preset2;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	889a      	ldrh	r2, [r3, #4]
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	80da      	strh	r2, [r3, #6]
				break;
 8001a10:	e004      	b.n	8001a1c <Set_Temperature+0x54>
			case SLEEP:
				Temperature_Converting->Temperature_Set_C=Temperature_Presets_C->Sleep;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	88da      	ldrh	r2, [r3, #6]
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	80da      	strh	r2, [r3, #6]
				break;
 8001a1a:	bf00      	nop
		}

	Temperature_Converting->Temperature_Set_ADC=(uint16_t)(Temperature_Converting->Temperature_Set_C*Temperature_Converting->Coeff+Temperature_Converting->Coeff/2);	//Converting Celsius to ADC Levels
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	88db      	ldrh	r3, [r3, #6]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7fe fc55 	bl	80002d0 <__aeabi_i2f>
 8001a26:	4602      	mov	r2, r0
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4610      	mov	r0, r2
 8001a30:	f7fe fca2 	bl	8000378 <__aeabi_fmul>
 8001a34:	4603      	mov	r3, r0
 8001a36:	461c      	mov	r4, r3
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7fe fd4d 	bl	80004e0 <__aeabi_fdiv>
 8001a46:	4603      	mov	r3, r0
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4620      	mov	r0, r4
 8001a4c:	f7fe fb8c 	bl	8000168 <__addsf3>
 8001a50:	4603      	mov	r3, r0
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7fe fe7c 	bl	8000750 <__aeabi_f2uiz>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	809a      	strh	r2, [r3, #4]

	if(Temperature_Converting->Temperature_Set_ADC>=MAX_ADC_Value){		// If result more than MAX_ADC_Value
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	889b      	ldrh	r3, [r3, #4]
 8001a64:	f640 62d7 	movw	r2, #3799	; 0xed7
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d90c      	bls.n	8001a86 <Set_Temperature+0xbe>
		Temperature_Converting->Temperature_Set_ADC=MAX_ADC_Value;		// Set MAX_ADC_Value as result
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	f640 62d8 	movw	r2, #3800	; 0xed8
 8001a72:	809a      	strh	r2, [r3, #4]
		if(*MODE==MANUAL)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d108      	bne.n	8001a8e <Set_Temperature+0xc6>
			Temperature_Presets_C->Manual=Temperature_Presets_C->Prew_Set_Temperature_Manual;	//Return Manual Preset to Prew_Manual_Preset
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	891a      	ldrh	r2, [r3, #8]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	801a      	strh	r2, [r3, #0]
 8001a84:	e003      	b.n	8001a8e <Set_Temperature+0xc6>
	}
	else
		Temperature_Presets_C->Prew_Set_Temperature_Manual=Temperature_Presets_C->Manual;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	881a      	ldrh	r2, [r3, #0]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	811a      	strh	r2, [r3, #8]

	return Temperature_Converting->Temperature_Set_ADC;
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	889b      	ldrh	r3, [r3, #4]
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3714      	adds	r7, #20
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd90      	pop	{r4, r7, pc}
 8001a9a:	bf00      	nop

08001a9c <Temperatur_Correction>:
//---------------------------------------------------------------------------------
uint16_t Temperatur_Correction(uint16_t Filtred_ADC_Value, struct Temperature_Converting *Temperature_Converting, struct Temperature_Corection *Temperature_Corection_ADC, enum MODE *MODE){
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60b9      	str	r1, [r7, #8]
 8001aa4:	607a      	str	r2, [r7, #4]
 8001aa6:	603b      	str	r3, [r7, #0]
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	81fb      	strh	r3, [r7, #14]
	/**
	 * Correcting Current ADC Temperature which occur to the MODE and convert Current_Temperature_ADC to Celsius
	 * Return Current_Temperature in ADC levels
	 * Temperature correction work with ADC Level Presets
	 */
	switch(*MODE){
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b03      	cmp	r3, #3
 8001ab2:	d845      	bhi.n	8001b40 <Temperatur_Correction+0xa4>
 8001ab4:	a201      	add	r2, pc, #4	; (adr r2, 8001abc <Temperatur_Correction+0x20>)
 8001ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aba:	bf00      	nop
 8001abc:	08001acd 	.word	0x08001acd
 8001ac0:	08001af1 	.word	0x08001af1
 8001ac4:	08001b15 	.word	0x08001b15
 8001ac8:	08001b39 	.word	0x08001b39
				case MANUAL:
					if(Filtred_ADC_Value>Temperature_Corection_ADC->Manual)		// if current value in ADC levels more than Temperature_Corection_ADC
 8001acc:	89fa      	ldrh	r2, [r7, #14]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	dd08      	ble.n	8001ae8 <Temperatur_Correction+0x4c>
						Temperature_Converting->Current_Temperature_ADC=Filtred_ADC_Value-Temperature_Corection_ADC->Manual;	//Set corrected Current Temperature in ADC Levels
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	89fa      	ldrh	r2, [r7, #14]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	801a      	strh	r2, [r3, #0]
					else
						Temperature_Converting->Current_Temperature_ADC=0;	//Set Current Temperature in ADC Levels to 0;
					break;
 8001ae6:	e02b      	b.n	8001b40 <Temperatur_Correction+0xa4>
						Temperature_Converting->Current_Temperature_ADC=0;	//Set Current Temperature in ADC Levels to 0;
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	2200      	movs	r2, #0
 8001aec:	801a      	strh	r2, [r3, #0]
					break;
 8001aee:	e027      	b.n	8001b40 <Temperatur_Correction+0xa4>
				case PRESET1:
					if(Filtred_ADC_Value>Temperature_Corection_ADC->Preset1)
 8001af0:	89fa      	ldrh	r2, [r7, #14]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	dd08      	ble.n	8001b0c <Temperatur_Correction+0x70>
						Temperature_Converting->Current_Temperature_ADC=Filtred_ADC_Value-Temperature_Corection_ADC->Preset1;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	89fa      	ldrh	r2, [r7, #14]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	801a      	strh	r2, [r3, #0]
					else
						Temperature_Converting->Current_Temperature_ADC=0;
					break;
 8001b0a:	e019      	b.n	8001b40 <Temperatur_Correction+0xa4>
						Temperature_Converting->Current_Temperature_ADC=0;
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	801a      	strh	r2, [r3, #0]
					break;
 8001b12:	e015      	b.n	8001b40 <Temperatur_Correction+0xa4>
				case PRESET2:
					if(Filtred_ADC_Value>Temperature_Corection_ADC->Preset2)
 8001b14:	89fa      	ldrh	r2, [r7, #14]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	dd08      	ble.n	8001b30 <Temperatur_Correction+0x94>
						Temperature_Converting->Current_Temperature_ADC=Filtred_ADC_Value-Temperature_Corection_ADC->Preset2;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	89fa      	ldrh	r2, [r7, #14]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	801a      	strh	r2, [r3, #0]
					else
						Temperature_Converting->Current_Temperature_ADC=0;
					break;
 8001b2e:	e007      	b.n	8001b40 <Temperatur_Correction+0xa4>
						Temperature_Converting->Current_Temperature_ADC=0;
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	2200      	movs	r2, #0
 8001b34:	801a      	strh	r2, [r3, #0]
					break;
 8001b36:	e003      	b.n	8001b40 <Temperatur_Correction+0xa4>
				case SLEEP:
					Temperature_Converting->Current_Temperature_ADC=Filtred_ADC_Value;
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	89fa      	ldrh	r2, [r7, #14]
 8001b3c:	801a      	strh	r2, [r3, #0]
					break;
 8001b3e:	bf00      	nop
		}

	return Temperature_Converting->Current_Temperature_ADC;
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	881b      	ldrh	r3, [r3, #0]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bc80      	pop	{r7}
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop

08001b50 <Temperature_Presets_Corection_Converting>:
//---------------------------------------------------------------------------------
void Temperature_Presets_Corection_Converting(struct Temperature_Corection *Temperature_Corection_C, struct Temperature_Corection *Temperature_Corection_ADC, struct Temperature_Converting *Temperature_Converting){
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
	/**
	 * Converting Temperature_Presets_Corection from Celsius to ADC Levels
	 */
	Temperature_Corection_ADC->Manual=Temperature_Corection_C->Manual*Temperature_Converting->Coeff;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7fe fbb5 	bl	80002d0 <__aeabi_i2f>
 8001b66:	4602      	mov	r2, r0
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4610      	mov	r0, r2
 8001b70:	f7fe fc02 	bl	8000378 <__aeabi_fmul>
 8001b74:	4603      	mov	r3, r0
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7fe fdc4 	bl	8000704 <__aeabi_f2iz>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	601a      	str	r2, [r3, #0]
	Temperature_Corection_ADC->Preset1=Temperature_Corection_C->Preset1*Temperature_Converting->Coeff;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7fe fba2 	bl	80002d0 <__aeabi_i2f>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	4619      	mov	r1, r3
 8001b94:	4610      	mov	r0, r2
 8001b96:	f7fe fbef 	bl	8000378 <__aeabi_fmul>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7fe fdb1 	bl	8000704 <__aeabi_f2iz>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	605a      	str	r2, [r3, #4]
	Temperature_Corection_ADC->Preset2=Temperature_Corection_C->Preset2*Temperature_Converting->Coeff;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7fe fb8f 	bl	80002d0 <__aeabi_i2f>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4610      	mov	r0, r2
 8001bbc:	f7fe fbdc 	bl	8000378 <__aeabi_fmul>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7fe fd9e 	bl	8000704 <__aeabi_f2iz>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	609a      	str	r2, [r3, #8]
}
 8001bce:	bf00      	nop
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <Get_Temperature_Set_C>:
//---------------------------------------------------------------------------------
uint16_t Get_Temperature_Set_C(struct Temperature_Converting *self){
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
	/**
	 * Return Set temperature in Celsius
	 */
	return self->Temperature_Set_C;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	88db      	ldrh	r3, [r3, #6]
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr

08001bec <Get_Current_Temperature_C>:
//---------------------------------------------------------------------------------
uint16_t Get_Current_Temperature_C(struct Temperature_Converting *Temperature_Converting){
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
	/**
	 * Convert and return Current temperature in Celsius
	 */
	Temperature_Converting->Current_Temperature_C=(uint16_t)Temperature_Converting->Current_Temperature_ADC/Temperature_Converting->Coeff; //Converting Current_Temperature_ADC to Celsius
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	881b      	ldrh	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7fe fb69 	bl	80002d0 <__aeabi_i2f>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	4619      	mov	r1, r3
 8001c06:	4610      	mov	r0, r2
 8001c08:	f7fe fc6a 	bl	80004e0 <__aeabi_fdiv>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7fe fd9e 	bl	8000750 <__aeabi_f2uiz>
 8001c14:	4603      	mov	r3, r0
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	805a      	strh	r2, [r3, #2]
	return Temperature_Converting->Current_Temperature_C;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	885b      	ldrh	r3, [r3, #2]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <Get_Manual_Preset_Temperature_C>:
//---------------------------------------------------------------------------------
uint16_t Get_Manual_Preset_Temperature_C(struct Temperature_Presets *self){
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
	return self->Manual;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	881b      	ldrh	r3, [r3, #0]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr

08001c3e <Set_Manual_Preset_Temperature_C>:
//---------------------------------------------------------------------------------
void Set_Manual_Preset_Temperature_C(uint16_t value, struct Temperature_Presets *self){
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	4603      	mov	r3, r0
 8001c46:	6039      	str	r1, [r7, #0]
 8001c48:	80fb      	strh	r3, [r7, #6]
	self->Manual=value;
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	88fa      	ldrh	r2, [r7, #6]
 8001c4e:	801a      	strh	r2, [r3, #0]
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bc80      	pop	{r7}
 8001c58:	4770      	bx	lr

08001c5a <Solder_Iron_it>:
void Solder_Iron_Set_MODE_Temperature(struct Soldering_Iron *self, enum MODE MODE);
void Solder_Iron_Flash_Reset_Rewrite_Timer(struct Soldering_Iron *self);
uint32_t Write_Manual_Temperature(struct Temperature_Presets *self, uint32_t Flash_Key, uint8_t Flash_Page);
uint8_t Flash_Read_Manual_Temperature(struct Temperature_Presets *self, uint32_t Flash_Key, uint8_t Flash_Page);
//---------------------------------------------------------------------------------
void Solder_Iron_it(struct Soldering_Iron *self){
 8001c5a:	b590      	push	{r4, r7, lr}
 8001c5c:	b083      	sub	sp, #12
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
	/**
	 * PID and Filter iteration for Soldering_Iron
	 */
	Vibration_Sensor_it(self);				// We can read state of Vibration Sensor only when PWM is stopped
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f9e7 	bl	8002036 <Vibration_Sensor_it>
	Button_it(&self->Full_Power_Button); 	// We can read state of button only when PWM is stopped
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	337c      	adds	r3, #124	; 0x7c
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7fe ff12 	bl	8000a96 <Button_it>
	if(self->State==1){
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d127      	bne.n	8001ccc <Solder_Iron_it+0x72>
	  HAL_TIM_PWM_Start(self->PWM_htim, TIM_CHANNEL_4);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c82:	210c      	movs	r1, #12
 8001c84:	4618      	mov	r0, r3
 8001c86:	f006 fd91 	bl	80087ac <HAL_TIM_PWM_Start>
	  PID_Set_Curent_Point(&self->PID,(int)(Temperatur_Correction(Filter_Combined(&self->Filter), &self->Temperature_Converting, &self->Temperature_Corection_ADC, &self->MODE)));
 8001c8a:	687c      	ldr	r4, [r7, #4]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3324      	adds	r3, #36	; 0x24
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff f922 	bl	8000eda <Filter_Combined>
 8001c96:	4603      	mov	r3, r0
 8001c98:	4618      	mov	r0, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	3344      	adds	r3, #68	; 0x44
 8001caa:	f7ff fef7 	bl	8001a9c <Temperatur_Correction>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4620      	mov	r0, r4
 8001cb4:	f7ff fe6b 	bl	800198e <PID_Set_Curent_Point>
	  self->PWM_htim->Instance->CCR4=PID_it(&self->PID);	//PID it
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cc0:	681c      	ldr	r4, [r3, #0]
 8001cc2:	4610      	mov	r0, r2
 8001cc4:	f7ff fdc6 	bl	8001854 <PID_it>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	6423      	str	r3, [r4, #64]	; 0x40
	}
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd90      	pop	{r4, r7, pc}

08001cd4 <Solder_Iron_Sleep_Time_Resset>:
//---------------------------------------------------------------------------------
void Solder_Iron_Sleep_Time_Resset(struct Soldering_Iron *self){
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
	/**
	 * Reset sleep mode timer and if last mode was Sleep Set previous mode;
	 */
	if(self->MODE==SLEEP)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ce2:	2b03      	cmp	r3, #3
 8001ce4:	d105      	bne.n	8001cf2 <Solder_Iron_Sleep_Time_Resset+0x1e>
		self->MODE=self->PREW_MODE;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	self->Timer=0;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr

08001d04 <Solder_Iron_tim_it>:
//---------------------------------------------------------------------------------
void Solder_Iron_tim_it(struct Soldering_Iron *self){
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
	/**
	 * Solder_Iron_tim_it Main purples ones a second create Button event for full power button and sleep Mode management
	 */
	static uint8_t TIM_prescaler=0;

	if(TIM_prescaler++==10){
 8001d0c:	4b1e      	ldr	r3, [pc, #120]	; (8001d88 <Solder_Iron_tim_it+0x84>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	1c5a      	adds	r2, r3, #1
 8001d12:	b2d1      	uxtb	r1, r2
 8001d14:	4a1c      	ldr	r2, [pc, #112]	; (8001d88 <Solder_Iron_tim_it+0x84>)
 8001d16:	7011      	strb	r1, [r2, #0]
 8001d18:	2b0a      	cmp	r3, #10
 8001d1a:	d131      	bne.n	8001d80 <Solder_Iron_tim_it+0x7c>
		if(self->State){
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d029      	beq.n	8001d7a <Solder_Iron_tim_it+0x76>
			if(self->Timer++==self->Sleep_time){						//if Time more than Sleep time value set sleep mode
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8001d2c:	1c5a      	adds	r2, r3, #1
 8001d2e:	b291      	uxth	r1, r2
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	f8a2 109a 	strh.w	r1, [r2, #154]	; 0x9a
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	f892 209c 	ldrb.w	r2, [r2, #156]	; 0x9c
 8001d3c:	b292      	uxth	r2, r2
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d10a      	bne.n	8001d58 <Solder_Iron_tim_it+0x54>
				self->PREW_MODE=self->MODE;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
				Solder_Iron_Set_MODE_Temperature(self, SLEEP);			//Set Sleep Mode Temperature preset
 8001d4e:	2103      	movs	r1, #3
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f000 f861 	bl	8001e18 <Solder_Iron_Set_MODE_Temperature>
 8001d56:	e010      	b.n	8001d7a <Solder_Iron_tim_it+0x76>
			}else if(self->Timer==self->Disable_time+self->Sleep_time)	//if time more than Disable_time+Sleep_time Turn OFF Soldering_Iron
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8001d5e:	461a      	mov	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8001d66:	4619      	mov	r1, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8001d6e:	440b      	add	r3, r1
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d102      	bne.n	8001d7a <Solder_Iron_tim_it+0x76>
				Solder_Iron_OFF(self);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f000 f83d 	bl	8001df4 <Solder_Iron_OFF>
		}
		TIM_prescaler=0;
 8001d7a:	4b03      	ldr	r3, [pc, #12]	; (8001d88 <Solder_Iron_tim_it+0x84>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	701a      	strb	r2, [r3, #0]
	}
}
 8001d80:	bf00      	nop
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	200002b6 	.word	0x200002b6

08001d8c <Solder_Iron_ini>:
//---------------------------------------------------------------------------------
void Solder_Iron_ini(struct Soldering_Iron *self){
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
	/**
	 * Basic initialization of all part for starting all processes
	 */
	PID_ini(&self->PID);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff fd4b 	bl	8001832 <PID_ini>
	Filter_ini(&self->Filter);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3324      	adds	r3, #36	; 0x24
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff f835 	bl	8000e10 <Filter_ini>
	Button_ini(&self->Full_Power_Button);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	337c      	adds	r3, #124	; 0x7c
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7fe fec8 	bl	8000b40 <Button_ini>
	Flash_Rewrite_Timer_ini(&self->Flash_Rewrite_Timer);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	33a2      	adds	r3, #162	; 0xa2
 8001db4:	4618      	mov	r0, r3
 8001db6:	f000 febd 	bl	8002b34 <Flash_Rewrite_Timer_ini>
	Solder_Iron_Set_Manual_Temperature(self);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f883 	bl	8001ec6 <Solder_Iron_Set_Manual_Temperature>
}
 8001dc0:	bf00      	nop
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <Solder_Iron_ON>:

//---------------------------------------------------------------------------------
void Solder_Iron_ON(struct Soldering_Iron *self){
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
	Solder_Iron_Sleep_Time_Resset(self);  					//Reset Sleep_timer
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f7ff ff7f 	bl	8001cd4 <Solder_Iron_Sleep_Time_Resset>
	Solder_Iron_Set_MODE_Temperature(self,self->MODE);		//Set Temperature
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ddc:	4619      	mov	r1, r3
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f81a 	bl	8001e18 <Solder_Iron_Set_MODE_Temperature>
	self->State=Soldering_Iron_ON;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
}
 8001dec:	bf00      	nop
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <Solder_Iron_OFF>:
//---------------------------------------------------------------------------------
void Solder_Iron_OFF(struct Soldering_Iron *self){
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
	self->State=Soldering_Iron_OFF;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	Solder_Iron_Sleep_Time_Resset(self); 	//Reset Sleep_timer
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f7ff ff65 	bl	8001cd4 <Solder_Iron_Sleep_Time_Resset>
	Solder_Iron_ini(self);					//Reset All Spldering Iron parameters
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7ff ffbe 	bl	8001d8c <Solder_Iron_ini>
}
 8001e10:	bf00      	nop
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <Solder_Iron_Set_MODE_Temperature>:
//---------------------------------------------------------------------------------
void Solder_Iron_Set_MODE_Temperature(struct Soldering_Iron *self, enum MODE MODE){
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	460b      	mov	r3, r1
 8001e22:	70fb      	strb	r3, [r7, #3]
	/**
	 * Solder_Iron_Set_Temperature based on MODE and Full_Power_Button
	 * Set Point for PID
	 */
	self->MODE=MODE;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	78fa      	ldrb	r2, [r7, #3]
 8001e28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	uint16_t Set_Temperature_ADC_Piont;

	if(self->Full_Power_State==1){
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d11d      	bne.n	8001e72 <Solder_Iron_Set_MODE_Temperature+0x5a>
		Set_Temperature_ADC_Piont=self->Temperature_Converting.Temperature_Set_ADC=MAX_ADC_Value;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f640 62d8 	movw	r2, #3800	; 0xed8
 8001e3c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001e46:	81fb      	strh	r3, [r7, #14]
		self->Temperature_Converting.Temperature_Set_C=(uint16_t)(Set_Temperature_ADC_Piont/self->Temperature_Converting.Coeff);
 8001e48:	89fb      	ldrh	r3, [r7, #14]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7fe fa40 	bl	80002d0 <__aeabi_i2f>
 8001e50:	4602      	mov	r2, r0
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e56:	4619      	mov	r1, r3
 8001e58:	4610      	mov	r0, r2
 8001e5a:	f7fe fb41 	bl	80004e0 <__aeabi_fdiv>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7fe fc75 	bl	8000750 <__aeabi_f2uiz>
 8001e66:	4603      	mov	r3, r0
 8001e68:	b29a      	uxth	r2, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 8001e70:	e00a      	b.n	8001e88 <Solder_Iron_Set_MODE_Temperature+0x70>
	}
	else
		Set_Temperature(&self->Temperature_Presets_C, &self->Temperature_Converting, &self->MODE);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f103 0046 	add.w	r0, r3, #70	; 0x46
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	3344      	adds	r3, #68	; 0x44
 8001e82:	461a      	mov	r2, r3
 8001e84:	f7ff fda0 	bl	80019c8 <Set_Temperature>

	PID_Set_Point(&self->PID, self->Temperature_Converting.Temperature_Set_ADC);		//Set Point for PID
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001e90:	4619      	mov	r1, r3
 8001e92:	4610      	mov	r0, r2
 8001e94:	f7ff fd6c 	bl	8001970 <PID_Set_Point>
}
 8001e98:	bf00      	nop
 8001e9a:	3710      	adds	r7, #16
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <Solder_Iron_Temperature_Presets_Corection_Converting>:
//---------------------------------------------------------------------------------
void Solder_Iron_Temperature_Presets_Corection_Converting(struct Soldering_Iron *self){
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
	/**
	 * Converting Solder_Iron_Temperature_Presets_Corection from Celsius to ADC Levels
	 */
	Temperature_Presets_Corection_Converting(&self->Temperature_Corection_C, &self->Temperature_Corection_ADC, &self->Temperature_Converting);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f103 0168 	add.w	r1, r3, #104	; 0x68
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3350      	adds	r3, #80	; 0x50
 8001eb8:	461a      	mov	r2, r3
 8001eba:	f7ff fe49 	bl	8001b50 <Temperature_Presets_Corection_Converting>
}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <Solder_Iron_Set_Manual_Temperature>:
//---------------------------------------------------------------------------------
void Solder_Iron_Set_Manual_Temperature(struct Soldering_Iron *self){
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b082      	sub	sp, #8
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
	/**
	 * Set manual temperature for Solder_Iron and set Manual MODE
	 */
	if(self->Temperature_Presets_C.Prew_Set_Temperature_Manual!=self->Temperature_Presets_C.Manual){	//if curent set temperature != Prew_Manual set temperature
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d009      	beq.n	8001ef2 <Solder_Iron_Set_Manual_Temperature+0x2c>
		Solder_Iron_Set_MODE_Temperature(self, MANUAL);	//Set temperature PID point
 8001ede:	2100      	movs	r1, #0
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f7ff ff99 	bl	8001e18 <Solder_Iron_Set_MODE_Temperature>
		Solder_Iron_Sleep_Time_Resset(self);			//Reset sleep timer
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7ff fef4 	bl	8001cd4 <Solder_Iron_Sleep_Time_Resset>
		Solder_Iron_Flash_Reset_Rewrite_Timer(self);	//
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 f913 	bl	8002118 <Solder_Iron_Flash_Reset_Rewrite_Timer>
	}
}
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <Solder_Iron_Set_Preset1_Temperature>:
//---------------------------------------------------------------------------------
void Solder_Iron_Set_Preset1_Temperature(struct Soldering_Iron *self){
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b082      	sub	sp, #8
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
	/**
	 * Set Preset1 temperature for Solder_Iron and set Preset1 MODE
	 */
	 Solder_Iron_Set_MODE_Temperature(self, PRESET1);	//Set temperature PID point
 8001f02:	2101      	movs	r1, #1
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f7ff ff87 	bl	8001e18 <Solder_Iron_Set_MODE_Temperature>
	 Solder_Iron_Sleep_Time_Resset(self);				//Reset sleep timer
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f7ff fee2 	bl	8001cd4 <Solder_Iron_Sleep_Time_Resset>
}
 8001f10:	bf00      	nop
 8001f12:	3708      	adds	r7, #8
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <Solder_Iron_Set_Preset2_Temperature>:
//---------------------------------------------------------------------------------
void Solder_Iron_Set_Preset2_Temperature(struct Soldering_Iron *self){
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
	/**
	 * Set Preset2 temperature for Solder_Iron and set Preset2 MODE
	 */
	 Solder_Iron_Set_MODE_Temperature(self, PRESET2);	//Set temperature PID point
 8001f20:	2102      	movs	r1, #2
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7ff ff78 	bl	8001e18 <Solder_Iron_Set_MODE_Temperature>
	 Solder_Iron_Sleep_Time_Resset(self);				//Reset sleep timer
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f7ff fed3 	bl	8001cd4 <Solder_Iron_Sleep_Time_Resset>
}
 8001f2e:	bf00      	nop
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <Solder_Iron_Set_Manual_Preset_Temperature_C>:
//---------------------------------------------------------------------------------
void Solder_Iron_Set_Manual_Preset_Temperature_C(uint16_t value, struct Soldering_Iron *self){
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b082      	sub	sp, #8
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	6039      	str	r1, [r7, #0]
 8001f40:	80fb      	strh	r3, [r7, #6]
	/**
	 * Set Manual_Preset_Temperature temperature for Solder_Iron in Celsius
	 */
	Set_Manual_Preset_Temperature_C(value, &self->Temperature_Presets_C);
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	f103 0246 	add.w	r2, r3, #70	; 0x46
 8001f48:	88fb      	ldrh	r3, [r7, #6]
 8001f4a:	4611      	mov	r1, r2
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff fe76 	bl	8001c3e <Set_Manual_Preset_Temperature_C>
}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <Solder_Iron_Full_Power_ON>:
//---------------------------------------------------------------------------------
void Solder_Iron_Full_Power_ON(struct Soldering_Iron *self){
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b082      	sub	sp, #8
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
	/**
	 * Turn ON Full_Power
	 */
	self->Full_Power_State=Full_Power_ON;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2201      	movs	r2, #1
 8001f66:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	Solder_Iron_Set_MODE_Temperature(self, self->MODE);	//Set temperature PID point
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f70:	4619      	mov	r1, r3
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7ff ff50 	bl	8001e18 <Solder_Iron_Set_MODE_Temperature>
	Solder_Iron_Sleep_Time_Resset(self);				//Reset sleep timer
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f7ff feab 	bl	8001cd4 <Solder_Iron_Sleep_Time_Resset>
}
 8001f7e:	bf00      	nop
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <Solder_Iron_Full_Power_OFF>:
//---------------------------------------------------------------------------------
void Solder_Iron_Full_Power_OFF(struct Soldering_Iron *self){
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b082      	sub	sp, #8
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
	/**
	 * Turn OFF Full_Power
	 */
	self->Full_Power_State=Full_Power_OFF;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	Solder_Iron_Set_MODE_Temperature(self, self->MODE);	//Set temperature PID point
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff ff3a 	bl	8001e18 <Solder_Iron_Set_MODE_Temperature>
	Solder_Iron_Sleep_Time_Resset(self);				//Reset sleep timer
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f7ff fe95 	bl	8001cd4 <Solder_Iron_Sleep_Time_Resset>
}
 8001faa:	bf00      	nop
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <Solder_Iron_Get_Full_Power_State>:
//---------------------------------------------------------------------------------
enum Full_Power_State Solder_Iron_Get_Full_Power_State(struct Soldering_Iron *self){
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
	/**
	 * Return Full_Powr_State	(Full_Power_ON,Full_Power_OFF)
	 */
	return self->Full_Power_State;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bc80      	pop	{r7}
 8001fc8:	4770      	bx	lr

08001fca <Solder_Iron_Get_State>:
//---------------------------------------------------------------------------------
enum Soldering_Iron_State Solder_Iron_Get_State(struct Soldering_Iron *self){
 8001fca:	b480      	push	{r7}
 8001fcc:	b083      	sub	sp, #12
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
	/**
	 * Return Solder_Iron_State (Soldering_Iron_ON Soldering_Iron_OFF)
	 */
	return self->State;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bc80      	pop	{r7}
 8001fe0:	4770      	bx	lr

08001fe2 <Soldering_Iron_Get_Manual_Preset_Temperature_C>:
//---------------------------------------------------------------------------------
uint16_t Soldering_Iron_Get_Manual_Preset_Temperature_C(struct Soldering_Iron *self){
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b082      	sub	sp, #8
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
	/*
	 * Return manual preset preset temperature in celsius
	 */
	return Get_Manual_Preset_Temperature_C(&self->Temperature_Presets_C);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	3346      	adds	r3, #70	; 0x46
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff fe1a 	bl	8001c28 <Get_Manual_Preset_Temperature_C>
 8001ff4:	4603      	mov	r3, r0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <Soldering_Iron_Get_Temperature_Set_C>:
//---------------------------------------------------------------------------------
uint16_t Soldering_Iron_Get_Temperature_Set_C(struct Soldering_Iron *self){
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b082      	sub	sp, #8
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
	/*
	 * Return Current Set temperature in celsius
	 */
	return Get_Temperature_Set_C(&self->Temperature_Converting);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	3350      	adds	r3, #80	; 0x50
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff fde3 	bl	8001bd6 <Get_Temperature_Set_C>
 8002010:	4603      	mov	r3, r0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <Soldering_Iron_Get_Current_Temperature_C>:
//---------------------------------------------------------------------------------
uint16_t Soldering_Iron_Get_Current_Temperature_C(struct Soldering_Iron *self){
 800201a:	b580      	push	{r7, lr}
 800201c:	b082      	sub	sp, #8
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
	/*
	 * Return Current temperature in celsius
	 */
	return Get_Current_Temperature_C(&self->Temperature_Converting);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3350      	adds	r3, #80	; 0x50
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff fde0 	bl	8001bec <Get_Current_Temperature_C>
 800202c:	4603      	mov	r3, r0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <Vibration_Sensor_it>:
//---------------------------------------------------------------------------------
void Vibration_Sensor_it(struct Soldering_Iron *self){
 8002036:	b580      	push	{r7, lr}
 8002038:	b082      	sub	sp, #8
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
	/**
	 * Vibration sensor have not any check
	 * Main function reset Sleep timer when rising / falling edge
	 */
	self->VS.State=HAL_GPIO_ReadPin(self->VS.GPIO,self->VS.EXTI_PIN);						//Read Pin State
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8002048:	4619      	mov	r1, r3
 800204a:	4610      	mov	r0, r2
 800204c:	f005 f838 	bl	80070c0 <HAL_GPIO_ReadPin>
 8002050:	4603      	mov	r3, r0
 8002052:	461a      	mov	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
		if(self->VS.State!=self->VS.Prew_State){											//IF ReadState!=Prew_Stae
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f893 207a 	ldrb.w	r2, [r3, #122]	; 0x7a
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8002066:	429a      	cmp	r2, r3
 8002068:	d009      	beq.n	800207e <Vibration_Sensor_it+0x48>
			Solder_Iron_Sleep_Time_Resset(self);											//Sleep Timer Reset and current MODE(sleep) set previous mode(Manual/Preset1/Preset2)
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7ff fe32 	bl	8001cd4 <Solder_Iron_Sleep_Time_Resset>
			Solder_Iron_Set_MODE_Temperature(self,self->MODE);								//Set previous mode temperature before sleep mode temperature;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002076:	4619      	mov	r1, r3
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f7ff fecd 	bl	8001e18 <Solder_Iron_Set_MODE_Temperature>
		}
		self->VS.Prew_State=self->VS.State;													//Prew State = Read State
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f893 207a 	ldrb.w	r2, [r3, #122]	; 0x7a
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <Solder_Iron_Flash_Write_Struct>:
//---------------------------------------------------------------------------------------------------------------------------------// Solder_Iron Flash
uint32_t Solder_Iron_Flash_Write_Struct(struct Soldering_Iron *self,uint32_t addr){
 8002092:	b580      	push	{r7, lr}
 8002094:	b082      	sub	sp, #8
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
 800209a:	6039      	str	r1, [r7, #0]
	/**
	 * Using to write main structure Soldering_Iron into Flash Memory for an address
	 * return address of the end of writing
	 */
	return Flash_Write (addr, self, sizeof(*self));
 800209c:	22ac      	movs	r2, #172	; 0xac
 800209e:	6879      	ldr	r1, [r7, #4]
 80020a0:	6838      	ldr	r0, [r7, #0]
 80020a2:	f7fe ff7e 	bl	8000fa2 <Flash_Write>
 80020a6:	4603      	mov	r3, r0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <Solder_Iron_Flash_Read_Struct>:
//---------------------------------------------------------------------------------
HAL_StatusTypeDef Solder_Iron_Flash_Read_Struct(struct Soldering_Iron *self,uint32_t addr){
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b0ae      	sub	sp, #184	; 0xb8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
	 * Using to read main structure Soldering_Iron from Flash Memory for an address
	 * return HAL_OK is read  struct was successful  and HAL_ERROR if not
	 * If reading is correct function write all data into a structure
	 */
	struct Soldering_Iron Read_Struct;
	Flash_Read (addr, &Read_Struct, sizeof(*self));			//Read struct into copy
 80020ba:	f107 030c 	add.w	r3, r7, #12
 80020be:	22ac      	movs	r2, #172	; 0xac
 80020c0:	4619      	mov	r1, r3
 80020c2:	6838      	ldr	r0, [r7, #0]
 80020c4:	f7fe ffaa 	bl	800101c <Flash_Read>
	if(Read_Struct.Flash_Key==Soldering_Iron_Struct_Key){	//Check if wrote data is a struct
 80020c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80020cc:	4a08      	ldr	r2, [pc, #32]	; (80020f0 <Solder_Iron_Flash_Read_Struct+0x40>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d109      	bne.n	80020e6 <Solder_Iron_Flash_Read_Struct+0x36>
		*self=Read_Struct;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f107 030c 	add.w	r3, r7, #12
 80020da:	22ac      	movs	r2, #172	; 0xac
 80020dc:	4619      	mov	r1, r3
 80020de:	f007 fb35 	bl	800974c <memcpy>
		return HAL_OK;
 80020e2:	2300      	movs	r3, #0
 80020e4:	e000      	b.n	80020e8 <Solder_Iron_Flash_Read_Struct+0x38>
	}else
		return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	37b8      	adds	r7, #184	; 0xb8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	0801f802 	.word	0x0801f802

080020f4 <Solder_Iron_Flash_Read_Manual_Temperature>:
//---------------------------------------------------------------------------------
HAL_StatusTypeDef Solder_Iron_Flash_Read_Manual_Temperature(struct Soldering_Iron *self){
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
	/**
	 * Using to read structure Temperature_Presets from Flash Memory for an Page
	 * return HAL_OK or HAL_ERROR
	 */
	return Flash_Read_Manual_Temperature(&self->Temperature_Presets_C, Soldering_Iron_Manual_Temperature_Flash_Key, Soldering_Iron_Manual_Temperature_Flash_Page);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3346      	adds	r3, #70	; 0x46
 8002100:	227d      	movs	r2, #125	; 0x7d
 8002102:	4904      	ldr	r1, [pc, #16]	; (8002114 <Solder_Iron_Flash_Read_Manual_Temperature+0x20>)
 8002104:	4618      	mov	r0, r3
 8002106:	f000 fc8a 	bl	8002a1e <Flash_Read_Manual_Temperature>
 800210a:	4603      	mov	r3, r0
}
 800210c:	4618      	mov	r0, r3
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	0801f806 	.word	0x0801f806

08002118 <Solder_Iron_Flash_Reset_Rewrite_Timer>:
//---------------------------------------------------------------------------------
void Solder_Iron_Flash_Reset_Rewrite_Timer(struct Soldering_Iron *self){
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
	/**
	 * This function reset rewrite timer.
	 */
	Flash_Reset_Rewrite_Timer(&self->Flash_Rewrite_Timer);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	33a2      	adds	r3, #162	; 0xa2
 8002124:	4618      	mov	r0, r3
 8002126:	f000 fca7 	bl	8002a78 <Flash_Reset_Rewrite_Timer>
}
 800212a:	bf00      	nop
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <Soldering_Heat_Gun_ini>:
//-----------------------------------------------------------------------------------------------------------------------------------// Heat gun
void Soldering_Heat_Gun_Flash_Reset_Rewrite_Timer(struct Soldering_Heat_Gun *self);
void Soldering_Heat_Gun_Temperature_Coolling_Converting(struct Soldering_Heat_Gun *self);
//---------------------------------------------------------------------------------
void Soldering_Heat_Gun_ini(struct Soldering_Heat_Gun *self){
 8002132:	b580      	push	{r7, lr}
 8002134:	b082      	sub	sp, #8
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
	/**
	 * Basic initialization of all part for starting all processes
	 */
	PID_ini(&self->PID);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff fb78 	bl	8001832 <PID_ini>
	Filter_ini(&self->Filter);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	3324      	adds	r3, #36	; 0x24
 8002146:	4618      	mov	r0, r3
 8002148:	f7fe fe62 	bl	8000e10 <Filter_ini>
	Flash_Rewrite_Timer_ini(&self->Flash_Rewrite_Timer);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3392      	adds	r3, #146	; 0x92
 8002150:	4618      	mov	r0, r3
 8002152:	f000 fcef 	bl	8002b34 <Flash_Rewrite_Timer_ini>
	Soldering_Heat_Gun_Set_Manual_Temperature(self);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 f8c0 	bl	80022dc <Soldering_Heat_Gun_Set_Manual_Temperature>
}
 800215c:	bf00      	nop
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <Soldering_Heat_Gun_ON>:
//---------------------------------------------------------------------------------
void Soldering_Heat_Gun_ON(struct Soldering_Heat_Gun *self){
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
	/**
	 * Turn ON Heat Gun
	 */
	PAC_ON(self->PAC);							//Turn ON Phase Angle Control
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff fa65 	bl	8001640 <PAC_ON>
	self->PAC_Control->State=PAC_Control_ON;	//Turn ON Control value for Phase Angle Control
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800217a:	2201      	movs	r2, #1
 800217c:	739a      	strb	r2, [r3, #14]
	PID_ini(&self->PID);						//Reset PID
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff fb56 	bl	8001832 <PID_ini>
	Filter_ini(&self->Filter);					//Reset Filter
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	3324      	adds	r3, #36	; 0x24
 800218a:	4618      	mov	r0, r3
 800218c:	f7fe fe40 	bl	8000e10 <Filter_ini>

	HAL_GPIO_WritePin(self->OFF_GPIO, self->OFF_PIN, GPIO_PIN_RESET);		//Set manual mode to FAN rotating speed controll
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800219c:	2200      	movs	r2, #0
 800219e:	4619      	mov	r1, r3
 80021a0:	f004 ffa5 	bl	80070ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(self->MANUAL_GPIO, self->MANUAL_PIN, GPIO_PIN_SET);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80021b0:	2201      	movs	r2, #1
 80021b2:	4619      	mov	r1, r3
 80021b4:	f004 ff9b 	bl	80070ee <HAL_GPIO_WritePin>

	self->State=Heat_Gun_ON;					//Set turn ON State
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
}
 80021c0:	bf00      	nop
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <Soldering_Heat_Gun_OFF>:
//---------------------------------------------------------------------------------
void Soldering_Heat_Gun_OFF(struct Soldering_Heat_Gun *self){
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
	/**
	 * Turn OFF Heat Gun
	 */
	Soldering_Heat_Gun_Temperature_Coolling_Converting(self);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f000 f857 	bl	8002284 <Soldering_Heat_Gun_Temperature_Coolling_Converting>
	self->State=Heat_Gun_COOLING;					//Set COOLING State. It needs to cool heat gun to Temperature_Coolling. After set Turn OFF state
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2202      	movs	r2, #2
 80021da:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	self->PAC_Control->State=PAC_Control_OFF;		//Turn OFF Control value for Phase Angle Control
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021e2:	2200      	movs	r2, #0
 80021e4:	739a      	strb	r2, [r3, #14]
	PAC_OFF(self->PAC);								// Turn OFF Phase Angle Control
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff fa3c 	bl	8001668 <PAC_OFF>
	HAL_GPIO_WritePin(self->PAC_Control->GPIO, self->PAC_Control->PIN, GPIO_PIN_RESET); //Turn ON Full Speed FAN rotation
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021f4:	6898      	ldr	r0, [r3, #8]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021fa:	889b      	ldrh	r3, [r3, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	4619      	mov	r1, r3
 8002200:	f004 ff75 	bl	80070ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(self->MANUAL_GPIO, self->MANUAL_PIN, GPIO_PIN_RESET);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8002210:	2200      	movs	r2, #0
 8002212:	4619      	mov	r1, r3
 8002214:	f004 ff6b 	bl	80070ee <HAL_GPIO_WritePin>
}
 8002218:	bf00      	nop
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <Soldering_Heat_Gun_Set_MODE_Temperature>:
//---------------------------------------------------------------------------------
void Soldering_Heat_Gun_Set_MODE_Temperature(struct Soldering_Heat_Gun *self,enum MODE MODE){
 8002220:	b590      	push	{r4, r7, lr}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	460b      	mov	r3, r1
 800222a:	70fb      	strb	r3, [r7, #3]
	/**
	 * Heat_Gun set temperature for PID based on mode
	 * Needs set mode struct.mode(MANUAL/PRESET1..) Before use
	 */
	self->MODE=MODE;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	78fa      	ldrb	r2, [r7, #3]
 8002230:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	PID_Set_Point(&self->PID, Set_Temperature(&self->Temperature_Presets_C, &self->Temperature_Converting, &self->MODE));
 8002234:	687c      	ldr	r4, [r7, #4]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f103 0046 	add.w	r0, r3, #70	; 0x46
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	3344      	adds	r3, #68	; 0x44
 8002246:	461a      	mov	r2, r3
 8002248:	f7ff fbbe 	bl	80019c8 <Set_Temperature>
 800224c:	4603      	mov	r3, r0
 800224e:	4619      	mov	r1, r3
 8002250:	4620      	mov	r0, r4
 8002252:	f7ff fb8d 	bl	8001970 <PID_Set_Point>
}
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	bd90      	pop	{r4, r7, pc}

0800225e <Soldering_Heat_Gun_Temperature_Presets_Corection_Converting>:
//---------------------------------------------------------------------------------
void Soldering_Heat_Gun_Temperature_Presets_Corection_Converting(struct Soldering_Heat_Gun *self){
 800225e:	b580      	push	{r7, lr}
 8002260:	b082      	sub	sp, #8
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
	/**
	 * Converting Soldering_Heat_Gun_Temperature_Presets_Corection from Celsius to ADC Levels
	 */
	Temperature_Presets_Corection_Converting(&self->Temperature_Corection_C, &self->Temperature_Corection_ADC, &self->Temperature_Converting);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f103 0168 	add.w	r1, r3, #104	; 0x68
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	3350      	adds	r3, #80	; 0x50
 8002276:	461a      	mov	r2, r3
 8002278:	f7ff fc6a 	bl	8001b50 <Temperature_Presets_Corection_Converting>
}
 800227c:	bf00      	nop
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <Soldering_Heat_Gun_Temperature_Coolling_Converting>:
//---------------------------------------------------------------------------------
void Soldering_Heat_Gun_Temperature_Coolling_Converting(struct Soldering_Heat_Gun *self){
 8002284:	b590      	push	{r4, r7, lr}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
	self->Temperature_Coolling.ADC=(uint16_t)(self->Temperature_Coolling.C*self->Temperature_Converting.Coeff+self->Temperature_Converting.Coeff/2);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f8b3 308e 	ldrh.w	r3, [r3, #142]	; 0x8e
 8002292:	4618      	mov	r0, r3
 8002294:	f7fe f81c 	bl	80002d0 <__aeabi_i2f>
 8002298:	4602      	mov	r2, r0
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800229e:	4619      	mov	r1, r3
 80022a0:	4610      	mov	r0, r2
 80022a2:	f7fe f869 	bl	8000378 <__aeabi_fmul>
 80022a6:	4603      	mov	r3, r0
 80022a8:	461c      	mov	r4, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ae:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7fe f914 	bl	80004e0 <__aeabi_fdiv>
 80022b8:	4603      	mov	r3, r0
 80022ba:	4619      	mov	r1, r3
 80022bc:	4620      	mov	r0, r4
 80022be:	f7fd ff53 	bl	8000168 <__addsf3>
 80022c2:	4603      	mov	r3, r0
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7fe fa43 	bl	8000750 <__aeabi_f2uiz>
 80022ca:	4603      	mov	r3, r0
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd90      	pop	{r4, r7, pc}

080022dc <Soldering_Heat_Gun_Set_Manual_Temperature>:
//---------------------------------------------------------------------------------
void Soldering_Heat_Gun_Set_Manual_Temperature(struct Soldering_Heat_Gun *self){
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
	/**
	 * Set manual temperature for Soldering_Heat_Gun and set Manual MODE
	 */
	if(self->Temperature_Presets_C.Prew_Set_Temperature_Manual!=self->Temperature_Presets_C.Manual){
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d006      	beq.n	8002302 <Soldering_Heat_Gun_Set_Manual_Temperature+0x26>
		Soldering_Heat_Gun_Set_MODE_Temperature(self, MANUAL);	//Set temperature PID point
 80022f4:	2100      	movs	r1, #0
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f7ff ff92 	bl	8002220 <Soldering_Heat_Gun_Set_MODE_Temperature>
		Soldering_Heat_Gun_Flash_Reset_Rewrite_Timer(self);		//Reset rewrite timer
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f000 f933 	bl	8002568 <Soldering_Heat_Gun_Flash_Reset_Rewrite_Timer>
	}
}
 8002302:	bf00      	nop
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <Soldering_Heat_Gun_Set_Preset1_Temperature>:
//---------------------------------------------------------------------------------
void Soldering_Heat_Gun_Set_Preset1_Temperature(struct Soldering_Heat_Gun *self){
 800230a:	b580      	push	{r7, lr}
 800230c:	b082      	sub	sp, #8
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
	/**
	 * Set Preset1 temperature for Soldering_Heat_Gun and set Preset1 MODE
	 */
	Soldering_Heat_Gun_Set_MODE_Temperature(self, PRESET1);
 8002312:	2101      	movs	r1, #1
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f7ff ff83 	bl	8002220 <Soldering_Heat_Gun_Set_MODE_Temperature>
}
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <Soldering_Heat_Gun_Set_Preset2_Temperature>:
//---------------------------------------------------------------------------------
void Soldering_Heat_Gun_Set_Preset2_Temperature(struct Soldering_Heat_Gun *self){
 8002322:	b580      	push	{r7, lr}
 8002324:	b082      	sub	sp, #8
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
	/**
	 * Set Preset2 temperature for Soldering_Heat_Gun and set Preset2 MODE
	 */
	Soldering_Heat_Gun_Set_MODE_Temperature(self, PRESET2);
 800232a:	2102      	movs	r1, #2
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f7ff ff77 	bl	8002220 <Soldering_Heat_Gun_Set_MODE_Temperature>
}
 8002332:	bf00      	nop
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <Soldering_Heat_Gun_Set_Manual_Preset_Temperature_C>:
//---------------------------------------------------------------------------------
void Soldering_Heat_Gun_Set_Manual_Preset_Temperature_C(uint16_t value, struct Soldering_Heat_Gun *self){
 800233a:	b580      	push	{r7, lr}
 800233c:	b082      	sub	sp, #8
 800233e:	af00      	add	r7, sp, #0
 8002340:	4603      	mov	r3, r0
 8002342:	6039      	str	r1, [r7, #0]
 8002344:	80fb      	strh	r3, [r7, #6]
	/**
	 * Set manual temperature for Soldering_Heat_Gun in Celsius
	 */
	Set_Manual_Preset_Temperature_C(value, &self->Temperature_Presets_C);
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	f103 0246 	add.w	r2, r3, #70	; 0x46
 800234c:	88fb      	ldrh	r3, [r7, #6]
 800234e:	4611      	mov	r1, r2
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff fc74 	bl	8001c3e <Set_Manual_Preset_Temperature_C>
}
 8002356:	bf00      	nop
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <Soldering_Heat_Gun_Set_PID_MAX_Control_Value>:
//---------------------------------------------------------------------------------
void Soldering_Heat_Gun_Set_PID_MAX_Control_Value(uint16_t MAX_Control_Value, struct Soldering_Heat_Gun *self){
 800235e:	b580      	push	{r7, lr}
 8002360:	b082      	sub	sp, #8
 8002362:	af00      	add	r7, sp, #0
 8002364:	4603      	mov	r3, r0
 8002366:	6039      	str	r1, [r7, #0]
 8002368:	80fb      	strh	r3, [r7, #6]
	/**
	 * Set PID's max control value
	 */
	PID_Set_MAX_Control(MAX_Control_Value, &self->PID);
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	88fb      	ldrh	r3, [r7, #6]
 800236e:	4611      	mov	r1, r2
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff fb1b 	bl	80019ac <PID_Set_MAX_Control>
}
 8002376:	bf00      	nop
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <Soldering_Heat_Gun_Get_State>:
//---------------------------------------------------------------------------------
enum Soldering_Heat_Gun_State Soldering_Heat_Gun_Get_State(struct Soldering_Heat_Gun *self){
 800237e:	b480      	push	{r7}
 8002380:	b083      	sub	sp, #12
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
	/**
	 * Return Soldering_Heat_Gun_State (Heat_Gun_OFF Heat_Gun_ON Heat_Gun_COOLING)
	 */
	return self->State;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
}
 800238c:	4618      	mov	r0, r3
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	bc80      	pop	{r7}
 8002394:	4770      	bx	lr

08002396 <Soldering_Heat_Gun_Get_Manual_Preset_Temperature_C>:
//---------------------------------------------------------------------------------
uint16_t Soldering_Heat_Gun_Get_Manual_Preset_Temperature_C(struct Soldering_Heat_Gun *self){
 8002396:	b580      	push	{r7, lr}
 8002398:	b082      	sub	sp, #8
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
	/*
	 * Return manual preset preset temperature in celsius
	 */
	return Get_Manual_Preset_Temperature_C(&self->Temperature_Presets_C);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	3346      	adds	r3, #70	; 0x46
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff fc40 	bl	8001c28 <Get_Manual_Preset_Temperature_C>
 80023a8:	4603      	mov	r3, r0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <Soldering_Heat_Gun_Get_Temperature_Set_C>:
//---------------------------------------------------------------------------------
uint16_t Soldering_Heat_Gun_Get_Temperature_Set_C(struct Soldering_Heat_Gun *self){
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b082      	sub	sp, #8
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
	/*
	 * Return Current set temperature  preset temperature in celsius
	 */
	return Get_Temperature_Set_C(&self->Temperature_Converting);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	3350      	adds	r3, #80	; 0x50
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff fc09 	bl	8001bd6 <Get_Temperature_Set_C>
 80023c4:	4603      	mov	r3, r0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <Soldering_Heat_Gun_Get_Current_Temperature_C>:
//---------------------------------------------------------------------------------
uint16_t Soldering_Heat_Gun_Get_Current_Temperature_C(struct Soldering_Heat_Gun *self){
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b082      	sub	sp, #8
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
	/*
	 * Return Current temperature temperature in celsius
	 */
	return Get_Current_Temperature_C(&self->Temperature_Converting);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	3350      	adds	r3, #80	; 0x50
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff fc06 	bl	8001bec <Get_Current_Temperature_C>
 80023e0:	4603      	mov	r3, r0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <Soldering_Heat_Gun_Get_PAC_Controll_State>:
//---------------------------------------------------------------------------------
enum PAC_Control_State Soldering_Heat_Gun_Get_PAC_Controll_State(struct Soldering_Heat_Gun *self){
 80023ea:	b480      	push	{r7}
 80023ec:	b083      	sub	sp, #12
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
	/**
	 * return  Soldering_Heat_Gun_Get_PAC_Controll_State(PAC_Control_OFF PAC_Control_ON)
	 */
	return self->PAC_Control->State;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023f6:	7b9b      	ldrb	r3, [r3, #14]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bc80      	pop	{r7}
 8002400:	4770      	bx	lr

08002402 <Soldering_Heat_Gun_Get_PAC_Controll_Value>:
//---------------------------------------------------------------------------------
uint16_t Soldering_Heat_Gun_Get_PAC_Controll_Value(struct Soldering_Heat_Gun *self){
 8002402:	b480      	push	{r7}
 8002404:	b083      	sub	sp, #12
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
	/**
	 * return Soldering_Heat_Gun PAC's control value
	 */
	return self->PAC_Control->Control_Value;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800240e:	899b      	ldrh	r3, [r3, #12]
}
 8002410:	4618      	mov	r0, r3
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	bc80      	pop	{r7}
 8002418:	4770      	bx	lr

0800241a <Soldering_Heat_Gun_it>:
//---------------------------------------------------------------------------------
void Soldering_Heat_Gun_it(struct Soldering_Heat_Gun *self){
 800241a:	b590      	push	{r4, r7, lr}
 800241c:	b083      	sub	sp, #12
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
	/**
	 * Main function PID and Filter iteration for Soldering_Heat_Gun
	 * Secondary Cooling Heat GUN
	 */
	if(self->State==Heat_Gun_ON&&PAC_Get_State(self->PAC)==ZCD_STATE_ON){									//if Heat GUN turn ON && ZCD ON
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8002428:	2b01      	cmp	r3, #1
 800242a:	d12b      	bne.n	8002484 <Soldering_Heat_Gun_it+0x6a>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff f9d1 	bl	80017d8 <PAC_Get_State>
 8002436:	4603      	mov	r3, r0
 8002438:	2b01      	cmp	r3, #1
 800243a:	d123      	bne.n	8002484 <Soldering_Heat_Gun_it+0x6a>
		PID_Set_Curent_Point(&self->PID,(int)Temperatur_Correction(Filter_Combined(&self->Filter), &self->Temperature_Converting, &self->Temperature_Corection_ADC, &self->MODE));
 800243c:	687c      	ldr	r4, [r7, #4]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	3324      	adds	r3, #36	; 0x24
 8002442:	4618      	mov	r0, r3
 8002444:	f7fe fd49 	bl	8000eda <Filter_Combined>
 8002448:	4603      	mov	r3, r0
 800244a:	4618      	mov	r0, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3344      	adds	r3, #68	; 0x44
 800245c:	f7ff fb1e 	bl	8001a9c <Temperatur_Correction>
 8002460:	4603      	mov	r3, r0
 8002462:	4619      	mov	r1, r3
 8002464:	4620      	mov	r0, r4
 8002466:	f7ff fa92 	bl	800198e <PID_Set_Curent_Point>
																										//Filter and set current Temperature and Heat_Gun PID IT
		PAC_Set_Control_Value((uint16_t)PID_it(&self->PID), self->PAC_Control);							//Set PAC control value
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff f9f1 	bl	8001854 <PID_it>
 8002472:	4603      	mov	r3, r0
 8002474:	b29a      	uxth	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800247a:	4619      	mov	r1, r3
 800247c:	4610      	mov	r0, r2
 800247e:	f7ff f99d 	bl	80017bc <PAC_Set_Control_Value>
		if(Temperatur_Correction(Filter_Combined(&self->Filter), &self->Temperature_Converting, &self->Temperature_Corection_C, &self->MODE)<=self->Temperature_Coolling.ADC){	//and set current Temperature											//if the current temperature is less than  Temperature_Coolling
			self->State=Heat_Gun_OFF;																	//Turn off heat gun
			HAL_GPIO_WritePin(self->OFF_GPIO, self->OFF_PIN, GPIO_PIN_SET);								// Turn OF FAN rotating
		}
	}
}
 8002482:	e02a      	b.n	80024da <Soldering_Heat_Gun_it+0xc0>
	}else if(self->State==Heat_Gun_COOLING){															//if Heat GUN Cooling
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800248a:	2b02      	cmp	r3, #2
 800248c:	d125      	bne.n	80024da <Soldering_Heat_Gun_it+0xc0>
		if(Temperatur_Correction(Filter_Combined(&self->Filter), &self->Temperature_Converting, &self->Temperature_Corection_C, &self->MODE)<=self->Temperature_Coolling.ADC){	//and set current Temperature											//if the current temperature is less than  Temperature_Coolling
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	3324      	adds	r3, #36	; 0x24
 8002492:	4618      	mov	r0, r3
 8002494:	f7fe fd21 	bl	8000eda <Filter_Combined>
 8002498:	4603      	mov	r3, r0
 800249a:	4618      	mov	r0, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f103 0150 	add.w	r1, r3, #80	; 0x50
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f103 025c 	add.w	r2, r3, #92	; 0x5c
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3344      	adds	r3, #68	; 0x44
 80024ac:	f7ff faf6 	bl	8001a9c <Temperatur_Correction>
 80024b0:	4603      	mov	r3, r0
 80024b2:	461a      	mov	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d80d      	bhi.n	80024da <Soldering_Heat_Gun_it+0xc0>
			self->State=Heat_Gun_OFF;																	//Turn off heat gun
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
			HAL_GPIO_WritePin(self->OFF_GPIO, self->OFF_PIN, GPIO_PIN_SET);								// Turn OF FAN rotating
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80024d2:	2201      	movs	r2, #1
 80024d4:	4619      	mov	r1, r3
 80024d6:	f004 fe0a 	bl	80070ee <HAL_GPIO_WritePin>
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd90      	pop	{r4, r7, pc}

080024e2 <Soldering_Heat_Gun_Flash_Write_Struct>:
//---------------------------------------------------------------------------------------------------------------------------------// Heat_Gun Flash
uint32_t Soldering_Heat_Gun_Flash_Write_Struct(struct Soldering_Heat_Gun *self,uint32_t addr){
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b082      	sub	sp, #8
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
 80024ea:	6039      	str	r1, [r7, #0]
	/**
	 * Using to write main structure Soldering_Heat_Gun into Flash Memory for an address
	 * return address of the end of writing
	 */
	return Flash_Write (addr, self, sizeof(*self));
 80024ec:	229c      	movs	r2, #156	; 0x9c
 80024ee:	6879      	ldr	r1, [r7, #4]
 80024f0:	6838      	ldr	r0, [r7, #0]
 80024f2:	f7fe fd56 	bl	8000fa2 <Flash_Write>
 80024f6:	4603      	mov	r3, r0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3708      	adds	r7, #8
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <Soldering_Heat_Gun_Flash_Read_Struct>:
//---------------------------------------------------------------------------------
uint8_t Soldering_Heat_Gun_Flash_Read_Struct(struct Soldering_Heat_Gun *self,uint32_t addr){
 8002500:	b580      	push	{r7, lr}
 8002502:	b0aa      	sub	sp, #168	; 0xa8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
	 * Using to read main structure Soldering_Heat_Gun from Flash Memory for an address
	 * return HAL_OK is read  struct was successful  and HAL_ERROR if not
	 * If reading is correct function write all data into a structure
	 */
	struct Soldering_Heat_Gun Read_Struct;
	Flash_Read (addr, &Read_Struct, sizeof(*self));						//Read struct into copy
 800250a:	f107 030c 	add.w	r3, r7, #12
 800250e:	229c      	movs	r2, #156	; 0x9c
 8002510:	4619      	mov	r1, r3
 8002512:	6838      	ldr	r0, [r7, #0]
 8002514:	f7fe fd82 	bl	800101c <Flash_Read>
	if(Read_Struct.Flash_Key==Soldering_Heat_Gun_Struct_Key){			//Check if wrote data is a struct
 8002518:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800251c:	4a08      	ldr	r2, [pc, #32]	; (8002540 <Soldering_Heat_Gun_Flash_Read_Struct+0x40>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d109      	bne.n	8002536 <Soldering_Heat_Gun_Flash_Read_Struct+0x36>
		*self=Read_Struct;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4618      	mov	r0, r3
 8002526:	f107 030c 	add.w	r3, r7, #12
 800252a:	229c      	movs	r2, #156	; 0x9c
 800252c:	4619      	mov	r1, r3
 800252e:	f007 f90d 	bl	800974c <memcpy>
		return HAL_OK;
 8002532:	2300      	movs	r3, #0
 8002534:	e000      	b.n	8002538 <Soldering_Heat_Gun_Flash_Read_Struct+0x38>
	}else
		return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
}
 8002538:	4618      	mov	r0, r3
 800253a:	37a8      	adds	r7, #168	; 0xa8
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	0801f804 	.word	0x0801f804

08002544 <Soldering_Heat_Gun_Flash_Read_Manual_Temperature>:
//---------------------------------------------------------------------------------
HAL_StatusTypeDef Soldering_Heat_Gun_Flash_Read_Manual_Temperature(struct Soldering_Heat_Gun *self){
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
	/**
	 * Using to read structure Temperature_Presets from Flash Memory for an Page
	 * return HAL_OK or HAL_ERROR
	 */
	return Flash_Read_Manual_Temperature(&self->Temperature_Presets_C, Soldering_Heat_Gun_Manual_Temperature_Flash_Key, Soldering_Heat_Gun_Manual_Temperature_Flash_Page);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	3346      	adds	r3, #70	; 0x46
 8002550:	227c      	movs	r2, #124	; 0x7c
 8002552:	4904      	ldr	r1, [pc, #16]	; (8002564 <Soldering_Heat_Gun_Flash_Read_Manual_Temperature+0x20>)
 8002554:	4618      	mov	r0, r3
 8002556:	f000 fa62 	bl	8002a1e <Flash_Read_Manual_Temperature>
 800255a:	4603      	mov	r3, r0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	0801f808 	.word	0x0801f808

08002568 <Soldering_Heat_Gun_Flash_Reset_Rewrite_Timer>:
//---------------------------------------------------------------------------------
void Soldering_Heat_Gun_Flash_Reset_Rewrite_Timer(struct Soldering_Heat_Gun *self){
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
	/**
	 * This function reset rewrite timer.
	 */
	Flash_Reset_Rewrite_Timer(&self->Flash_Rewrite_Timer);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3392      	adds	r3, #146	; 0x92
 8002574:	4618      	mov	r0, r3
 8002576:	f000 fa7f 	bl	8002a78 <Flash_Reset_Rewrite_Timer>
}
 800257a:	bf00      	nop
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <Soldering_Separator_ini>:
//---------------------------------------------------------------------------------------------------------------------------------//Soldering_Separator
void Soldering_Separator_Flash_Reset_Rewrite_Timer(struct Soldering_Separator *self);
//---------------------------------------------------------------------------------
void Soldering_Separator_ini(struct Soldering_Separator *self){
 8002582:	b580      	push	{r7, lr}
 8002584:	b082      	sub	sp, #8
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
	/**
	 * Basic initialization of all part for starting all processes
	 */
	PID_ini(&self->PID);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff f950 	bl	8001832 <PID_ini>
	Filter_ini(&self->Filter);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	3324      	adds	r3, #36	; 0x24
 8002596:	4618      	mov	r0, r3
 8002598:	f7fe fc3a 	bl	8000e10 <Filter_ini>
	Flash_Rewrite_Timer_ini(&self->Flash_Rewrite_Timer);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	337e      	adds	r3, #126	; 0x7e
 80025a0:	4618      	mov	r0, r3
 80025a2:	f000 fac7 	bl	8002b34 <Flash_Rewrite_Timer_ini>
	 Soldering_Separator_Set_Manual_Temperature(self);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f869 	bl	800267e <Soldering_Separator_Set_Manual_Temperature>
}
 80025ac:	bf00      	nop
 80025ae:	3708      	adds	r7, #8
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <Soldering_Separator_ON>:
//---------------------------------------------------------------------------------
void Soldering_Separator_ON(struct Soldering_Separator *self){
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
	/**
	 * Turn ON Soldering_Separator
	 */
	PAC_ON(self->PAC);								//Turn ON Phase Angle Control
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff f83d 	bl	8001640 <PAC_ON>
	self->PAC_Control->State=PAC_Control_ON;		//Turn ON Control value for Phase Angle Control
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025ca:	2201      	movs	r2, #1
 80025cc:	739a      	strb	r2, [r3, #14]
	PID_ini(&self->PID);							//Reset PID
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff f92e 	bl	8001832 <PID_ini>
	Filter_ini(&self->Filter);						//Reset Filter
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	3324      	adds	r3, #36	; 0x24
 80025da:	4618      	mov	r0, r3
 80025dc:	f7fe fc18 	bl	8000e10 <Filter_ini>
	self->State=Separator_ON;						//Set Turn ON State
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
}
 80025e8:	bf00      	nop
 80025ea:	3708      	adds	r7, #8
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <Soldering_Separator_OFF>:
//---------------------------------------------------------------------------------
void Soldering_Separator_OFF(struct Soldering_Separator *self){
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
	/**
	 * Turn OFF Soldering Separator
	 */
	self->PAC_Control->State=PAC_Control_OFF; 		//Turn OFF Control value for Phase Angle Control
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025fc:	2200      	movs	r2, #0
 80025fe:	739a      	strb	r2, [r3, #14]
	PAC_OFF(self->PAC);								// Turn OFF Phase Angle Control
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff f82f 	bl	8001668 <PAC_OFF>
	self->State=Separator_OFF;						// Set Soldering_Separator Turn OFF State
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
}
 8002612:	bf00      	nop
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <Soldering_Separator_Set_MODE_Temperature>:
//---------------------------------------------------------------------------------
void Soldering_Separator_Set_MODE_Temperature(struct Soldering_Separator *self, enum MODE MODE){
 800261a:	b590      	push	{r4, r7, lr}
 800261c:	b083      	sub	sp, #12
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
 8002622:	460b      	mov	r3, r1
 8002624:	70fb      	strb	r3, [r7, #3]
	/**
	 * Soldering_Separator set temperature for PID based on mode
	 * Needs set mode struct.mode(MANUAL/PRESET1..) Before use
	 */
	self->MODE=MODE;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	78fa      	ldrb	r2, [r7, #3]
 800262a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	PID_Set_Point(&self->PID, Set_Temperature(&self->Temperature_Presets_C, &self->Temperature_Converting, &self->MODE));
 800262e:	687c      	ldr	r4, [r7, #4]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f103 0046 	add.w	r0, r3, #70	; 0x46
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f103 0150 	add.w	r1, r3, #80	; 0x50
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3344      	adds	r3, #68	; 0x44
 8002640:	461a      	mov	r2, r3
 8002642:	f7ff f9c1 	bl	80019c8 <Set_Temperature>
 8002646:	4603      	mov	r3, r0
 8002648:	4619      	mov	r1, r3
 800264a:	4620      	mov	r0, r4
 800264c:	f7ff f990 	bl	8001970 <PID_Set_Point>
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	bd90      	pop	{r4, r7, pc}

08002658 <Soldering_Separator_Temperature_Presets_Corection_Converting>:
//---------------------------------------------------------------------------------
void Soldering_Separator_Temperature_Presets_Corection_Converting(struct Soldering_Separator *self){
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
	Temperature_Presets_Corection_Converting(&self->Temperature_Corection_C, &self->Temperature_Corection_ADC, &self->Temperature_Converting);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f103 0168 	add.w	r1, r3, #104	; 0x68
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3350      	adds	r3, #80	; 0x50
 8002670:	461a      	mov	r2, r3
 8002672:	f7ff fa6d 	bl	8001b50 <Temperature_Presets_Corection_Converting>
}
 8002676:	bf00      	nop
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <Soldering_Separator_Set_Manual_Temperature>:
//---------------------------------------------------------------------------------
void Soldering_Separator_Set_Manual_Temperature(struct Soldering_Separator *self){
 800267e:	b580      	push	{r7, lr}
 8002680:	b082      	sub	sp, #8
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
	/**
	 * Set manual temperature for oldering_Separator and set Manual MODE
	 */
	if(self->Temperature_Presets_C.Prew_Set_Temperature_Manual!=self->Temperature_Presets_C.Manual){
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002692:	429a      	cmp	r2, r3
 8002694:	d006      	beq.n	80026a4 <Soldering_Separator_Set_Manual_Temperature+0x26>
		Soldering_Separator_Set_MODE_Temperature(self, MANUAL);	//Set temperature PID point
 8002696:	2100      	movs	r1, #0
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f7ff ffbe 	bl	800261a <Soldering_Separator_Set_MODE_Temperature>
		Soldering_Separator_Flash_Reset_Rewrite_Timer(self);	//Reset rewrite Timer
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 f908 	bl	80028b4 <Soldering_Separator_Flash_Reset_Rewrite_Timer>
	}
}
 80026a4:	bf00      	nop
 80026a6:	3708      	adds	r7, #8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <Soldering_Separator_Set_Preset1_Temperature>:
//---------------------------------------------------------------------------------
void Soldering_Separator_Set_Preset1_Temperature(struct Soldering_Separator *self){
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
	/**
	 * Set Preset1 temperature for Soldering_Separator and set Preset1 MODE
	 */
	Soldering_Separator_Set_MODE_Temperature(self, PRESET1);
 80026b4:	2101      	movs	r1, #1
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f7ff ffaf 	bl	800261a <Soldering_Separator_Set_MODE_Temperature>
}
 80026bc:	bf00      	nop
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <Soldering_Separator_Set_Preset2_Temperature>:
//---------------------------------------------------------------------------------
void Soldering_Separator_Set_Preset2_Temperature(struct Soldering_Separator *self){
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
	/**
	 * Set Preset2 temperature for Soldering_Separator and set Preset1 MODE
	 */
	Soldering_Separator_Set_MODE_Temperature(self, PRESET2);
 80026cc:	2102      	movs	r1, #2
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7ff ffa3 	bl	800261a <Soldering_Separator_Set_MODE_Temperature>
}
 80026d4:	bf00      	nop
 80026d6:	3708      	adds	r7, #8
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <Soldering_Separator_Set_Manual_Preset_Temperature_C>:
//---------------------------------------------------------------------------------
void Soldering_Separator_Set_Manual_Preset_Temperature_C(uint16_t value, struct Soldering_Separator *self){
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	4603      	mov	r3, r0
 80026e4:	6039      	str	r1, [r7, #0]
 80026e6:	80fb      	strh	r3, [r7, #6]
	/**
	 * Set manual preset temperature for Soldering_Separator in Celsius
	 */
	Set_Manual_Preset_Temperature_C(value, &self->Temperature_Presets_C);
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	f103 0246 	add.w	r2, r3, #70	; 0x46
 80026ee:	88fb      	ldrh	r3, [r7, #6]
 80026f0:	4611      	mov	r1, r2
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff faa3 	bl	8001c3e <Set_Manual_Preset_Temperature_C>
}
 80026f8:	bf00      	nop
 80026fa:	3708      	adds	r7, #8
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <Soldering_Separator_Get_State>:
//---------------------------------------------------------------------------------
enum Soldering_Separator_State Soldering_Separator_Get_State(struct Soldering_Separator *self){
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
	/**
	 * return Soldering_Separator_State (Separator_OFF,Separator_ON)
	 */
	return self->State;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
}
 800270e:	4618      	mov	r0, r3
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr

08002718 <Soldering_Separator_Get_Temperature_Set_C>:
//---------------------------------------------------------------------------------
uint16_t Soldering_Separator_Get_Temperature_Set_C(struct Soldering_Separator *self){
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
	/*
	 * Return Current set temperature preset temperature in celsius
	 */
	return Get_Temperature_Set_C(&self->Temperature_Converting);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3350      	adds	r3, #80	; 0x50
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff fa56 	bl	8001bd6 <Get_Temperature_Set_C>
 800272a:	4603      	mov	r3, r0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <Soldering_Separator_Get_Current_Temperature_C>:
//---------------------------------------------------------------------------------
uint16_t Soldering_Separator_Get_Current_Temperature_C(struct Soldering_Separator *self){
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
	/*
	 * Return Current temperature temperature in celsius
	 */
	return Get_Current_Temperature_C(&self->Temperature_Converting);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3350      	adds	r3, #80	; 0x50
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff fa53 	bl	8001bec <Get_Current_Temperature_C>
 8002746:	4603      	mov	r3, r0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3708      	adds	r7, #8
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <Soldering_Separator_Get_Manual_Preset_Temperature_C>:
//---------------------------------------------------------------------------------
uint16_t Soldering_Separator_Get_Manual_Preset_Temperature_C(struct Soldering_Separator *self){
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
	/*
	 * Return manual preset temperature in celsius
	 */
	return Get_Manual_Preset_Temperature_C(&self->Temperature_Presets_C);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3346      	adds	r3, #70	; 0x46
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff fa63 	bl	8001c28 <Get_Manual_Preset_Temperature_C>
 8002762:	4603      	mov	r3, r0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3708      	adds	r7, #8
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <Soldering_Separator_Set_PID_MAX_Control_Value>:
//---------------------------------------------------------------------------------
void Soldering_Separator_Set_PID_MAX_Control_Value(uint16_t MAX_Control_Value, struct Soldering_Separator *self){
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	4603      	mov	r3, r0
 8002774:	6039      	str	r1, [r7, #0]
 8002776:	80fb      	strh	r3, [r7, #6]
	/**
	 * Set PID's max control value
	 */
	PID_Set_MAX_Control(MAX_Control_Value, &self->PID);
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	88fb      	ldrh	r3, [r7, #6]
 800277c:	4611      	mov	r1, r2
 800277e:	4618      	mov	r0, r3
 8002780:	f7ff f914 	bl	80019ac <PID_Set_MAX_Control>
}
 8002784:	bf00      	nop
 8002786:	3708      	adds	r7, #8
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <Soldering_Separator_Get_PAC_Controll_State>:
//---------------------------------------------------------------------------------
enum PAC_Control_State Soldering_Separator_Get_PAC_Controll_State(struct Soldering_Separator *self){
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
	/**
	 * return  Soldering_Heat_Gun_Get_PAC_Controll_State(PAC_Control_OFF PAC_Control_ON)
	 */
	return self->PAC_Control->State;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002798:	7b9b      	ldrb	r3, [r3, #14]
}
 800279a:	4618      	mov	r0, r3
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr

080027a4 <Soldering_Separator_Get_PAC_Controll_Value>:
//---------------------------------------------------------------------------------
uint16_t Soldering_Separator_Get_PAC_Controll_Value(struct Soldering_Separator *self){
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
	/**
	 * return Soldering_Separator PAC's control value
	 */
	return self->PAC_Control->Control_Value;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027b0:	899b      	ldrh	r3, [r3, #12]
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc80      	pop	{r7}
 80027ba:	4770      	bx	lr

080027bc <Soldering_Separator_it>:
//---------------------------------------------------------------------------------
void Soldering_Separator_it(struct Soldering_Separator *self){
 80027bc:	b590      	push	{r4, r7, lr}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
	/**
	 * Main function PID and Filter iteration for Soldering_Separator
	 *
	 */
	if(self->State==Separator_ON&&PAC_Get_State(self->PAC)==ZCD_STATE_ON){				//if Heat Soldering_Separator turn ON && ZCD ON
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d12a      	bne.n	8002824 <Soldering_Separator_it+0x68>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7ff f800 	bl	80017d8 <PAC_Get_State>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d122      	bne.n	8002824 <Soldering_Separator_it+0x68>
		PID_Set_Curent_Point(&self->PID,(int)Temperatur_Correction(Filter_Combined(&self->Filter), &self->Temperature_Converting, &self->Temperature_Corection_ADC, &self->MODE));
 80027de:	687c      	ldr	r4, [r7, #4]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3324      	adds	r3, #36	; 0x24
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7fe fb78 	bl	8000eda <Filter_Combined>
 80027ea:	4603      	mov	r3, r0
 80027ec:	4618      	mov	r0, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f103 0150 	add.w	r1, r3, #80	; 0x50
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	3344      	adds	r3, #68	; 0x44
 80027fe:	f7ff f94d 	bl	8001a9c <Temperatur_Correction>
 8002802:	4603      	mov	r3, r0
 8002804:	4619      	mov	r1, r3
 8002806:	4620      	mov	r0, r4
 8002808:	f7ff f8c1 	bl	800198e <PID_Set_Curent_Point>
																						//Filter and set current Temperature and Soldering_Separator PID IT;
		PAC_Set_Control_Value((uint16_t)PID_it(&self->PID), self->PAC_Control);			//Set PAC control value
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff f820 	bl	8001854 <PID_it>
 8002814:	4603      	mov	r3, r0
 8002816:	b29a      	uxth	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800281c:	4619      	mov	r1, r3
 800281e:	4610      	mov	r0, r2
 8002820:	f7fe ffcc 	bl	80017bc <PAC_Set_Control_Value>
	}
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	bd90      	pop	{r4, r7, pc}

0800282c <Soldering_Separator_Flash_Write_Struct>:
//---------------------------------------------------------------------------------------------------------------------------------// Soldering_Separator Flash
uint32_t Soldering_Separator_Flash_Write_Struct(struct Soldering_Separator *self,uint32_t addr){
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
	/**
	 * Write general Soldering_Separator struct
	 */
	return Flash_Write (addr, self, sizeof(*self));
 8002836:	2288      	movs	r2, #136	; 0x88
 8002838:	6879      	ldr	r1, [r7, #4]
 800283a:	6838      	ldr	r0, [r7, #0]
 800283c:	f7fe fbb1 	bl	8000fa2 <Flash_Write>
 8002840:	4603      	mov	r3, r0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
	...

0800284c <Soldering_Separator_Flash_Read_Struct>:
//---------------------------------------------------------------------------------
HAL_StatusTypeDef Soldering_Separator_Flash_Read_Struct(struct Soldering_Separator *self,uint32_t addr){
 800284c:	b580      	push	{r7, lr}
 800284e:	b0a4      	sub	sp, #144	; 0x90
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
	/**
	 * Read general Soldering_Separator struct
	 * return HAL_OK or HAL_ERROR
	 */
	struct Soldering_Separator Read_Struct;
	Flash_Read (addr, &Read_Struct, sizeof(*self));
 8002856:	f107 0308 	add.w	r3, r7, #8
 800285a:	2288      	movs	r2, #136	; 0x88
 800285c:	4619      	mov	r1, r3
 800285e:	6838      	ldr	r0, [r7, #0]
 8002860:	f7fe fbdc 	bl	800101c <Flash_Read>
	if(Read_Struct.Flash_Key==Soldering_Separator_Struct_Key){
 8002864:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002868:	4a08      	ldr	r2, [pc, #32]	; (800288c <Soldering_Separator_Flash_Read_Struct+0x40>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d109      	bne.n	8002882 <Soldering_Separator_Flash_Read_Struct+0x36>
		*self=Read_Struct;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4618      	mov	r0, r3
 8002872:	f107 0308 	add.w	r3, r7, #8
 8002876:	2288      	movs	r2, #136	; 0x88
 8002878:	4619      	mov	r1, r3
 800287a:	f006 ff67 	bl	800974c <memcpy>
		return HAL_OK;
 800287e:	2300      	movs	r3, #0
 8002880:	e000      	b.n	8002884 <Soldering_Separator_Flash_Read_Struct+0x38>
	}else
		return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
}
 8002884:	4618      	mov	r0, r3
 8002886:	3790      	adds	r7, #144	; 0x90
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	1801f804 	.word	0x1801f804

08002890 <Soldering_Separator_Flash_Read_Manual_Temperature>:
	 * Write manual Temperature
	 */
	return Write_Manual_Temperature(&self->Temperature_Presets_C, Soldering_Separator_Manual_Temperature_Flash_Key, Soldering_Separator_Manual_Temperature_Flash_Page);
}
//---------------------------------------------------------------------------------
HAL_StatusTypeDef Soldering_Separator_Flash_Read_Manual_Temperature(struct Soldering_Separator *self){
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
	/**
	 * Read manual Temperature
	 * return HAL_OK or HAL_ERROR
	 */
	return Flash_Read_Manual_Temperature(&self->Temperature_Presets_C, Soldering_Separator_Manual_Temperature_Flash_Key, Soldering_Separator_Manual_Temperature_Flash_Page);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3346      	adds	r3, #70	; 0x46
 800289c:	227b      	movs	r2, #123	; 0x7b
 800289e:	4904      	ldr	r1, [pc, #16]	; (80028b0 <Soldering_Separator_Flash_Read_Manual_Temperature+0x20>)
 80028a0:	4618      	mov	r0, r3
 80028a2:	f000 f8bc 	bl	8002a1e <Flash_Read_Manual_Temperature>
 80028a6:	4603      	mov	r3, r0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	1801f808 	.word	0x1801f808

080028b4 <Soldering_Separator_Flash_Reset_Rewrite_Timer>:
//---------------------------------------------------------------------------------
void Soldering_Separator_Flash_Reset_Rewrite_Timer(struct Soldering_Separator *self){
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
	/**
	 * rewrite Soldering_Separator's flash timer
	 */
	Flash_Reset_Rewrite_Timer(&self->Flash_Rewrite_Timer);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	337e      	adds	r3, #126	; 0x7e
 80028c0:	4618      	mov	r0, r3
 80028c2:	f000 f8d9 	bl	8002a78 <Flash_Reset_Rewrite_Timer>
}
 80028c6:	bf00      	nop
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <Soldering_Station_Temperature_Presets_Corection_Converting>:
//---------------------------------------------------------------------------------------------------------------------------------//Soldering_Station
void Soldering_Station_Temperature_Presets_Corection_Converting(struct Soldering_Iron *Soldering_Iron, struct Soldering_Heat_Gun *Soldering_Heat_Gun, struct Soldering_Separator *Soldering_Separator){
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b084      	sub	sp, #16
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	60f8      	str	r0, [r7, #12]
 80028d6:	60b9      	str	r1, [r7, #8]
 80028d8:	607a      	str	r2, [r7, #4]
	/**
	 * Convert Temperature_Presets_Corection_C (celsius) to Temperature_Presets_Corection_ADC For all part of soldering station
	 */
	Solder_Iron_Temperature_Presets_Corection_Converting(Soldering_Iron);
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f7ff fae0 	bl	8001ea0 <Solder_Iron_Temperature_Presets_Corection_Converting>
	Soldering_Heat_Gun_Temperature_Presets_Corection_Converting(Soldering_Heat_Gun);
 80028e0:	68b8      	ldr	r0, [r7, #8]
 80028e2:	f7ff fcbc 	bl	800225e <Soldering_Heat_Gun_Temperature_Presets_Corection_Converting>
	Soldering_Separator_Temperature_Presets_Corection_Converting(Soldering_Separator);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7ff feb6 	bl	8002658 <Soldering_Separator_Temperature_Presets_Corection_Converting>

}
 80028ec:	bf00      	nop
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <Soldering_Station_Read_Struct>:
//---------------------------------------------------------------------------------------------------------------------------------
HAL_StatusTypeDef Soldering_Station_Read_Struct(struct Soldering_Iron *Soldering_Iron, struct Soldering_Heat_Gun *Soldering_Heat_Gun, struct Soldering_Separator *Soldering_Separator){
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
	/**
	 * 	Read all general structures from flash
	 * 	return HAL_OK or HAL_ERROR
	 */
	HAL_StatusTypeDef Status=HAL_OK;
 8002900:	2300      	movs	r3, #0
 8002902:	75fb      	strb	r3, [r7, #23]
	uint32_t addr = Flash_Base_Addr + Flash_Addr_Page_Size*Soldering_Station_ALL_Struct_Flash_Page;	//computing start read addr
 8002904:	4b13      	ldr	r3, [pc, #76]	; (8002954 <Soldering_Station_Read_Struct+0x60>)
 8002906:	613b      	str	r3, [r7, #16]
	Status|=Solder_Iron_Flash_Read_Struct(Soldering_Iron,addr);										//read Solder_Iron general struct
 8002908:	6939      	ldr	r1, [r7, #16]
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f7ff fbd0 	bl	80020b0 <Solder_Iron_Flash_Read_Struct>
 8002910:	4603      	mov	r3, r0
 8002912:	461a      	mov	r2, r3
 8002914:	7dfb      	ldrb	r3, [r7, #23]
 8002916:	4313      	orrs	r3, r2
 8002918:	75fb      	strb	r3, [r7, #23]
	addr+=sizeof(*Soldering_Iron)+2;																//Address shift for prew read struct
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	33ae      	adds	r3, #174	; 0xae
 800291e:	613b      	str	r3, [r7, #16]
	Status|=Soldering_Heat_Gun_Flash_Read_Struct(Soldering_Heat_Gun,addr);							//read Soldering_Heat_Gun general struct
 8002920:	6939      	ldr	r1, [r7, #16]
 8002922:	68b8      	ldr	r0, [r7, #8]
 8002924:	f7ff fdec 	bl	8002500 <Soldering_Heat_Gun_Flash_Read_Struct>
 8002928:	4603      	mov	r3, r0
 800292a:	461a      	mov	r2, r3
 800292c:	7dfb      	ldrb	r3, [r7, #23]
 800292e:	4313      	orrs	r3, r2
 8002930:	75fb      	strb	r3, [r7, #23]
	addr+=sizeof(*Soldering_Heat_Gun)+2;															//Address shift for prew read struct
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	339e      	adds	r3, #158	; 0x9e
 8002936:	613b      	str	r3, [r7, #16]
	Status|=Soldering_Separator_Flash_Read_Struct(Soldering_Separator,addr);						//read Soldering_Separator general struct
 8002938:	6939      	ldr	r1, [r7, #16]
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7ff ff86 	bl	800284c <Soldering_Separator_Flash_Read_Struct>
 8002940:	4603      	mov	r3, r0
 8002942:	461a      	mov	r2, r3
 8002944:	7dfb      	ldrb	r3, [r7, #23]
 8002946:	4313      	orrs	r3, r2
 8002948:	75fb      	strb	r3, [r7, #23]

	return Status;
 800294a:	7dfb      	ldrb	r3, [r7, #23]
}
 800294c:	4618      	mov	r0, r3
 800294e:	3718      	adds	r7, #24
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	0801f800 	.word	0x0801f800

08002958 <Soldering_Station_Write_Struct>:
//---------------------------------------------------------------------------------
HAL_StatusTypeDef Soldering_Station_Write_Struct(struct Soldering_Iron *Soldering_Iron, struct Soldering_Heat_Gun *Soldering_Heat_Gun, struct Soldering_Separator *Soldering_Separator){
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
	/**
	 *	Write all general structures from flash
	 * 	return HAL_OK or HAL_ERROR
	 */
	HAL_StatusTypeDef Status=HAL_OK;
 8002964:	2300      	movs	r3, #0
 8002966:	75fb      	strb	r3, [r7, #23]

	uint32_t addr = Flash_Base_Addr + Flash_Addr_Page_Size*Soldering_Station_ALL_Struct_Flash_Page;	//computing start read addr
 8002968:	4b19      	ldr	r3, [pc, #100]	; (80029d0 <Soldering_Station_Write_Struct+0x78>)
 800296a:	613b      	str	r3, [r7, #16]

	Flash_Erase (addr,sizeof(*Soldering_Iron)+2+sizeof(*Soldering_Heat_Gun)+2+sizeof(*Soldering_Separator));
 800296c:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8002970:	6938      	ldr	r0, [r7, #16]
 8002972:	f7fe fae7 	bl	8000f44 <Flash_Erase>

	if(Solder_Iron_Flash_Write_Struct(Soldering_Iron,addr)==HAL_ERROR)					//write Solder_Iron general struct
 8002976:	6939      	ldr	r1, [r7, #16]
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f7ff fb8a 	bl	8002092 <Solder_Iron_Flash_Write_Struct>
 800297e:	4603      	mov	r3, r0
 8002980:	2b01      	cmp	r3, #1
 8002982:	d103      	bne.n	800298c <Soldering_Station_Write_Struct+0x34>
		Status|=HAL_ERROR;
 8002984:	7dfb      	ldrb	r3, [r7, #23]
 8002986:	f043 0301 	orr.w	r3, r3, #1
 800298a:	75fb      	strb	r3, [r7, #23]
	addr+=sizeof(*Soldering_Iron)+2;													//Address shift for prew read struct
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	33ae      	adds	r3, #174	; 0xae
 8002990:	613b      	str	r3, [r7, #16]
	if(Soldering_Heat_Gun_Flash_Write_Struct(Soldering_Heat_Gun,addr)==HAL_ERROR)		//write Soldering_Heat_Gun general struct
 8002992:	6939      	ldr	r1, [r7, #16]
 8002994:	68b8      	ldr	r0, [r7, #8]
 8002996:	f7ff fda4 	bl	80024e2 <Soldering_Heat_Gun_Flash_Write_Struct>
 800299a:	4603      	mov	r3, r0
 800299c:	2b01      	cmp	r3, #1
 800299e:	d103      	bne.n	80029a8 <Soldering_Station_Write_Struct+0x50>
		Status|=HAL_ERROR;
 80029a0:	7dfb      	ldrb	r3, [r7, #23]
 80029a2:	f043 0301 	orr.w	r3, r3, #1
 80029a6:	75fb      	strb	r3, [r7, #23]
	addr+=sizeof(*Soldering_Heat_Gun)+2;												//Address shift for prew read struct
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	339e      	adds	r3, #158	; 0x9e
 80029ac:	613b      	str	r3, [r7, #16]
	if(Soldering_Separator_Flash_Write_Struct(Soldering_Separator,addr)==HAL_ERROR)		//write Soldering_Separator general struct
 80029ae:	6939      	ldr	r1, [r7, #16]
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f7ff ff3b 	bl	800282c <Soldering_Separator_Flash_Write_Struct>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d103      	bne.n	80029c4 <Soldering_Station_Write_Struct+0x6c>
		Status|=HAL_ERROR;
 80029bc:	7dfb      	ldrb	r3, [r7, #23]
 80029be:	f043 0301 	orr.w	r3, r3, #1
 80029c2:	75fb      	strb	r3, [r7, #23]

	return Status;
 80029c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3718      	adds	r7, #24
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	0801f800 	.word	0x0801f800

080029d4 <Write_Manual_Temperature>:
//---------------------------------------------------------------------------------
uint32_t Write_Manual_Temperature(struct Temperature_Presets *self, uint32_t Flash_Key, uint8_t Flash_Page){
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	4613      	mov	r3, r2
 80029e0:	71fb      	strb	r3, [r7, #7]
	/**
	 * write manual temperature parameter
	 * return end address
	 */
	uint32_t addr = Flash_Base_Addr + Flash_Addr_Page_Size*Flash_Page;	//computing start write addr
 80029e2:	79fb      	ldrb	r3, [r7, #7]
 80029e4:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80029e8:	029b      	lsls	r3, r3, #10
 80029ea:	617b      	str	r3, [r7, #20]

	Flash_Erase (addr,sizeof(self->Manual)+sizeof(Flash_Key));			//Erese PAGE
 80029ec:	2106      	movs	r1, #6
 80029ee:	6978      	ldr	r0, [r7, #20]
 80029f0:	f7fe faa8 	bl	8000f44 <Flash_Erase>

	Flash_Write (addr,&self->Manual, sizeof(self->Manual));				//Write manual temperature parameter
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2202      	movs	r2, #2
 80029f8:	4619      	mov	r1, r3
 80029fa:	6978      	ldr	r0, [r7, #20]
 80029fc:	f7fe fad1 	bl	8000fa2 <Flash_Write>

	addr+=sizeof(self->Manual)+2;										//Address shift for prew read struct
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	3304      	adds	r3, #4
 8002a04:	617b      	str	r3, [r7, #20]

	return Flash_Write (addr,&Flash_Key, sizeof(Flash_Key));			//Write Flash_Key
 8002a06:	f107 0308 	add.w	r3, r7, #8
 8002a0a:	2204      	movs	r2, #4
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	6978      	ldr	r0, [r7, #20]
 8002a10:	f7fe fac7 	bl	8000fa2 <Flash_Write>
 8002a14:	4603      	mov	r3, r0

}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3718      	adds	r7, #24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <Flash_Read_Manual_Temperature>:
//---------------------------------------------------------------------------------
HAL_StatusTypeDef Flash_Read_Manual_Temperature(struct Temperature_Presets *self, uint32_t Flash_Key, uint8_t Flash_Page){
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b088      	sub	sp, #32
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	60f8      	str	r0, [r7, #12]
 8002a26:	60b9      	str	r1, [r7, #8]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	71fb      	strb	r3, [r7, #7]
	/**
	 * Read Manual_Temperature parameter from flash
	 * return HAL_OK or HAL_ERROR
	 */
	uint32_t addr = Flash_Base_Addr + Flash_Addr_Page_Size*Flash_Page;		//computing start read addr
 8002a2c:	79fb      	ldrb	r3, [r7, #7]
 8002a2e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8002a32:	029b      	lsls	r3, r3, #10
 8002a34:	61fb      	str	r3, [r7, #28]
	uint32_t Flash_Read_Key=0;
 8002a36:	2300      	movs	r3, #0
 8002a38:	61bb      	str	r3, [r7, #24]
	uint16_t Temperature;

	Flash_Read (addr, &Temperature, sizeof(self->Manual));					//read manual temperature
 8002a3a:	f107 0316 	add.w	r3, r7, #22
 8002a3e:	2202      	movs	r2, #2
 8002a40:	4619      	mov	r1, r3
 8002a42:	69f8      	ldr	r0, [r7, #28]
 8002a44:	f7fe faea 	bl	800101c <Flash_Read>
	addr+=sizeof(self->Manual)+2;											//Address shift for prew read struct
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	3304      	adds	r3, #4
 8002a4c:	61fb      	str	r3, [r7, #28]
	Flash_Read (addr, &Flash_Read_Key,  sizeof(Flash_Read_Key));			//Read flash_key;
 8002a4e:	f107 0318 	add.w	r3, r7, #24
 8002a52:	2204      	movs	r2, #4
 8002a54:	4619      	mov	r1, r3
 8002a56:	69f8      	ldr	r0, [r7, #28]
 8002a58:	f7fe fae0 	bl	800101c <Flash_Read>

	if(Flash_Read_Key==Flash_Key){											//if flash key was read success
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	68ba      	ldr	r2, [r7, #8]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d104      	bne.n	8002a6e <Flash_Read_Manual_Temperature+0x50>
		self->Manual=Temperature;											//write temperature into struct
 8002a64:	8afa      	ldrh	r2, [r7, #22]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	801a      	strh	r2, [r3, #0]
		return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	e000      	b.n	8002a70 <Flash_Read_Manual_Temperature+0x52>
	}
	else
		return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3720      	adds	r7, #32
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <Flash_Reset_Rewrite_Timer>:
//---------------------------------------------------------------------------------
void Flash_Reset_Rewrite_Timer(struct Flash_Rewrite_Timer *self){
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
	/**
	 * Reset Rewrite_Timer
	 */
	self->Flash_Timer_Count=0;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	801a      	strh	r2, [r3, #0]
	self->Flash_Timer_State=Flash_Timer_State_ON;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	709a      	strb	r2, [r3, #2]
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bc80      	pop	{r7}
 8002a94:	4770      	bx	lr

08002a96 <Flash_Rewrite_Timer_it>:
//---------------------------------------------------------------------------------
void Flash_Rewrite_Timer_it(struct Flash_Rewrite_Timer *Flash_Rewrite_Timer, struct Temperature_Presets *Temperature_Presets,uint32_t Flash_Key, uint8_t Flash_Page){
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b084      	sub	sp, #16
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	60f8      	str	r0, [r7, #12]
 8002a9e:	60b9      	str	r1, [r7, #8]
 8002aa0:	607a      	str	r2, [r7, #4]
 8002aa2:	70fb      	strb	r3, [r7, #3]
	/**
	 * Falsh rewrite timer iteration
	 */
	if(Flash_Rewrite_Timer->Flash_Timer_State==Flash_Timer_State_ON){					//if timer turn ON
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	789b      	ldrb	r3, [r3, #2]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d110      	bne.n	8002ace <Flash_Rewrite_Timer_it+0x38>
		if(Flash_Rewrite_Timer->Flash_Timer_Count++==Flash_Rewrite_Timer_Max_Count){	//count++ & equal Flash_Rewrite_Timer_Max_Count
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	881b      	ldrh	r3, [r3, #0]
 8002ab0:	1c5a      	adds	r2, r3, #1
 8002ab2:	b291      	uxth	r1, r2
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	8011      	strh	r1, [r2, #0]
 8002ab8:	2bc8      	cmp	r3, #200	; 0xc8
 8002aba:	d108      	bne.n	8002ace <Flash_Rewrite_Timer_it+0x38>
			Write_Manual_Temperature(Temperature_Presets, Flash_Key, Flash_Page);		//write manual temperature
 8002abc:	78fb      	ldrb	r3, [r7, #3]
 8002abe:	461a      	mov	r2, r3
 8002ac0:	6879      	ldr	r1, [r7, #4]
 8002ac2:	68b8      	ldr	r0, [r7, #8]
 8002ac4:	f7ff ff86 	bl	80029d4 <Write_Manual_Temperature>
			Flash_Rewrite_Timer->Flash_Timer_State=Flash_Timer_State_OFF;				//Turn OFF timer
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	709a      	strb	r2, [r3, #2]
		}
	}
}
 8002ace:	bf00      	nop
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
	...

08002ad8 <Flash_Rewrite_Timer_tim_it>:
//---------------------------------------------------------------------------------
void Flash_Rewrite_Timer_tim_it(struct Soldering_Iron *Soldering_Iron, struct Soldering_Heat_Gun *Soldering_Heat_Gun, struct Soldering_Separator *Soldering_Separator){
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
	/**
	 * Falsh rewrite timer iteration for ALL Soldering_Station parts
	 */
	Flash_Rewrite_Timer_it(&Soldering_Iron->Flash_Rewrite_Timer, &Soldering_Iron->Temperature_Presets_C, Soldering_Iron_Manual_Temperature_Flash_Key, Soldering_Iron_Manual_Temperature_Flash_Page);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f103 00a2 	add.w	r0, r3, #162	; 0xa2
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f103 0146 	add.w	r1, r3, #70	; 0x46
 8002af0:	237d      	movs	r3, #125	; 0x7d
 8002af2:	4a0d      	ldr	r2, [pc, #52]	; (8002b28 <Flash_Rewrite_Timer_tim_it+0x50>)
 8002af4:	f7ff ffcf 	bl	8002a96 <Flash_Rewrite_Timer_it>
	Flash_Rewrite_Timer_it(&Soldering_Heat_Gun->Flash_Rewrite_Timer, &Soldering_Heat_Gun->Temperature_Presets_C, Soldering_Heat_Gun_Manual_Temperature_Flash_Key, Soldering_Heat_Gun_Manual_Temperature_Flash_Page);
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	f103 0092 	add.w	r0, r3, #146	; 0x92
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	f103 0146 	add.w	r1, r3, #70	; 0x46
 8002b04:	237c      	movs	r3, #124	; 0x7c
 8002b06:	4a09      	ldr	r2, [pc, #36]	; (8002b2c <Flash_Rewrite_Timer_tim_it+0x54>)
 8002b08:	f7ff ffc5 	bl	8002a96 <Flash_Rewrite_Timer_it>
	Flash_Rewrite_Timer_it(&Soldering_Separator->Flash_Rewrite_Timer, &Soldering_Separator->Temperature_Presets_C, Soldering_Separator_Manual_Temperature_Flash_Key, Soldering_Separator_Manual_Temperature_Flash_Page);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f103 007e 	add.w	r0, r3, #126	; 0x7e
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f103 0146 	add.w	r1, r3, #70	; 0x46
 8002b18:	237b      	movs	r3, #123	; 0x7b
 8002b1a:	4a05      	ldr	r2, [pc, #20]	; (8002b30 <Flash_Rewrite_Timer_tim_it+0x58>)
 8002b1c:	f7ff ffbb 	bl	8002a96 <Flash_Rewrite_Timer_it>
}
 8002b20:	bf00      	nop
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	0801f806 	.word	0x0801f806
 8002b2c:	0801f808 	.word	0x0801f808
 8002b30:	1801f808 	.word	0x1801f808

08002b34 <Flash_Rewrite_Timer_ini>:
//---------------------------------------------------------------------------------
void Flash_Rewrite_Timer_ini(struct Flash_Rewrite_Timer *self){
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
	/**
	 * Rewrite timer ini
	 */
	self->Flash_Timer_Count=0;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	801a      	strh	r2, [r3, #0]
	self->Flash_Timer_State=Flash_Timer_State_OFF;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	709a      	strb	r2, [r3, #2]
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bc80      	pop	{r7}
 8002b50:	4770      	bx	lr
	...

08002b54 <UI_Draw_Parmetr_Ptr>:
#include "UI_Base_Func.h"
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void UI_Draw_Parmetr_Ptr(void *value, uint8_t x, uint8_t y, enum Type mode){
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	4608      	mov	r0, r1
 8002b5e:	4611      	mov	r1, r2
 8002b60:	461a      	mov	r2, r3
 8002b62:	4603      	mov	r3, r0
 8002b64:	70fb      	strb	r3, [r7, #3]
 8002b66:	460b      	mov	r3, r1
 8002b68:	70bb      	strb	r3, [r7, #2]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	707b      	strb	r3, [r7, #1]
	/**
	 *	Displays the value on the display based on the variable pointer, type of variable and the x y position
	 *	Types INT, UIT8, UINT16, BOOL
	 */
	switch(mode){
 8002b6e:	787b      	ldrb	r3, [r7, #1]
 8002b70:	2b03      	cmp	r3, #3
 8002b72:	f200 8179 	bhi.w	8002e68 <UI_Draw_Parmetr_Ptr+0x314>
 8002b76:	a201      	add	r2, pc, #4	; (adr r2, 8002b7c <UI_Draw_Parmetr_Ptr+0x28>)
 8002b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b7c:	08002b8d 	.word	0x08002b8d
 8002b80:	08002ca5 	.word	0x08002ca5
 8002b84:	08002d6d 	.word	0x08002d6d
 8002b88:	08002e37 	.word	0x08002e37
		case INT:
			int num_int=*(int*)value;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	617b      	str	r3, [r7, #20]
			if(num_int<0){
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	da0c      	bge.n	8002bb2 <UI_Draw_Parmetr_Ptr+0x5e>
				OLED_Set_Char_Cursor(&OLED1,x-1,y);
 8002b98:	78fb      	ldrb	r3, [r7, #3]
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	3b01      	subs	r3, #1
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	78ba      	ldrb	r2, [r7, #2]
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	48b2      	ldr	r0, [pc, #712]	; (8002e70 <UI_Draw_Parmetr_Ptr+0x31c>)
 8002ba6:	f7fe fb05 	bl	80011b4 <OLED_Set_Char_Cursor>
				OLED_Send_Char(&OLED1,'-');
 8002baa:	212d      	movs	r1, #45	; 0x2d
 8002bac:	48b0      	ldr	r0, [pc, #704]	; (8002e70 <UI_Draw_Parmetr_Ptr+0x31c>)
 8002bae:	f7fe fb65 	bl	800127c <OLED_Send_Char>
			}
			OLED_Set_Char_Cursor(&OLED1,x-1,y);
 8002bb2:	78fb      	ldrb	r3, [r7, #3]
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	78ba      	ldrb	r2, [r7, #2]
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	48ac      	ldr	r0, [pc, #688]	; (8002e70 <UI_Draw_Parmetr_Ptr+0x31c>)
 8002bc0:	f7fe faf8 	bl	80011b4 <OLED_Set_Char_Cursor>
			if(num_int<0){
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	da09      	bge.n	8002bde <UI_Draw_Parmetr_Ptr+0x8a>
				OLED_Send_Char(&OLED1,'-');
 8002bca:	212d      	movs	r1, #45	; 0x2d
 8002bcc:	48a8      	ldr	r0, [pc, #672]	; (8002e70 <UI_Draw_Parmetr_Ptr+0x31c>)
 8002bce:	f7fe fb55 	bl	800127c <OLED_Send_Char>
				num_int=abs(num_int);
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	bfb8      	it	lt
 8002bd8:	425b      	neglt	r3, r3
 8002bda:	617b      	str	r3, [r7, #20]
 8002bdc:	e003      	b.n	8002be6 <UI_Draw_Parmetr_Ptr+0x92>
			}
			else
				OLED_Send_Char(&OLED1,' ');
 8002bde:	2120      	movs	r1, #32
 8002be0:	48a3      	ldr	r0, [pc, #652]	; (8002e70 <UI_Draw_Parmetr_Ptr+0x31c>)
 8002be2:	f7fe fb4b 	bl	800127c <OLED_Send_Char>
			OLED_Send_Char(&OLED1,(num_int/1000)%10+'0');
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	4aa2      	ldr	r2, [pc, #648]	; (8002e74 <UI_Draw_Parmetr_Ptr+0x320>)
 8002bea:	fb82 1203 	smull	r1, r2, r2, r3
 8002bee:	1192      	asrs	r2, r2, #6
 8002bf0:	17db      	asrs	r3, r3, #31
 8002bf2:	1ad2      	subs	r2, r2, r3
 8002bf4:	4ba0      	ldr	r3, [pc, #640]	; (8002e78 <UI_Draw_Parmetr_Ptr+0x324>)
 8002bf6:	fb83 1302 	smull	r1, r3, r3, r2
 8002bfa:	1099      	asrs	r1, r3, #2
 8002bfc:	17d3      	asrs	r3, r2, #31
 8002bfe:	1ac9      	subs	r1, r1, r3
 8002c00:	460b      	mov	r3, r1
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	440b      	add	r3, r1
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	1ad1      	subs	r1, r2, r3
 8002c0a:	b2cb      	uxtb	r3, r1
 8002c0c:	3330      	adds	r3, #48	; 0x30
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	4619      	mov	r1, r3
 8002c12:	4897      	ldr	r0, [pc, #604]	; (8002e70 <UI_Draw_Parmetr_Ptr+0x31c>)
 8002c14:	f7fe fb32 	bl	800127c <OLED_Send_Char>
			OLED_Send_Char(&OLED1,(num_int/100)%10+'0');
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	4a98      	ldr	r2, [pc, #608]	; (8002e7c <UI_Draw_Parmetr_Ptr+0x328>)
 8002c1c:	fb82 1203 	smull	r1, r2, r2, r3
 8002c20:	1152      	asrs	r2, r2, #5
 8002c22:	17db      	asrs	r3, r3, #31
 8002c24:	1ad2      	subs	r2, r2, r3
 8002c26:	4b94      	ldr	r3, [pc, #592]	; (8002e78 <UI_Draw_Parmetr_Ptr+0x324>)
 8002c28:	fb83 1302 	smull	r1, r3, r3, r2
 8002c2c:	1099      	asrs	r1, r3, #2
 8002c2e:	17d3      	asrs	r3, r2, #31
 8002c30:	1ac9      	subs	r1, r1, r3
 8002c32:	460b      	mov	r3, r1
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	440b      	add	r3, r1
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	1ad1      	subs	r1, r2, r3
 8002c3c:	b2cb      	uxtb	r3, r1
 8002c3e:	3330      	adds	r3, #48	; 0x30
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	4619      	mov	r1, r3
 8002c44:	488a      	ldr	r0, [pc, #552]	; (8002e70 <UI_Draw_Parmetr_Ptr+0x31c>)
 8002c46:	f7fe fb19 	bl	800127c <OLED_Send_Char>
			OLED_Send_Char(&OLED1,(num_int/10)%10+'0');
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	4a8a      	ldr	r2, [pc, #552]	; (8002e78 <UI_Draw_Parmetr_Ptr+0x324>)
 8002c4e:	fb82 1203 	smull	r1, r2, r2, r3
 8002c52:	1092      	asrs	r2, r2, #2
 8002c54:	17db      	asrs	r3, r3, #31
 8002c56:	1ad2      	subs	r2, r2, r3
 8002c58:	4b87      	ldr	r3, [pc, #540]	; (8002e78 <UI_Draw_Parmetr_Ptr+0x324>)
 8002c5a:	fb83 1302 	smull	r1, r3, r3, r2
 8002c5e:	1099      	asrs	r1, r3, #2
 8002c60:	17d3      	asrs	r3, r2, #31
 8002c62:	1ac9      	subs	r1, r1, r3
 8002c64:	460b      	mov	r3, r1
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	440b      	add	r3, r1
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	1ad1      	subs	r1, r2, r3
 8002c6e:	b2cb      	uxtb	r3, r1
 8002c70:	3330      	adds	r3, #48	; 0x30
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	4619      	mov	r1, r3
 8002c76:	487e      	ldr	r0, [pc, #504]	; (8002e70 <UI_Draw_Parmetr_Ptr+0x31c>)
 8002c78:	f7fe fb00 	bl	800127c <OLED_Send_Char>
			OLED_Send_Char(&OLED1,(num_int)%10+'0');
 8002c7c:	697a      	ldr	r2, [r7, #20]
 8002c7e:	4b7e      	ldr	r3, [pc, #504]	; (8002e78 <UI_Draw_Parmetr_Ptr+0x324>)
 8002c80:	fb83 1302 	smull	r1, r3, r3, r2
 8002c84:	1099      	asrs	r1, r3, #2
 8002c86:	17d3      	asrs	r3, r2, #31
 8002c88:	1ac9      	subs	r1, r1, r3
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	440b      	add	r3, r1
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	1ad1      	subs	r1, r2, r3
 8002c94:	b2cb      	uxtb	r3, r1
 8002c96:	3330      	adds	r3, #48	; 0x30
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	4874      	ldr	r0, [pc, #464]	; (8002e70 <UI_Draw_Parmetr_Ptr+0x31c>)
 8002c9e:	f7fe faed 	bl	800127c <OLED_Send_Char>
		break;
 8002ca2:	e0e1      	b.n	8002e68 <UI_Draw_Parmetr_Ptr+0x314>
		case UINT8:
			uint8_t *num_8=value;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	60bb      	str	r3, [r7, #8]
			OLED_Set_Char_Cursor(&OLED1,x,y);
 8002ca8:	78fb      	ldrb	r3, [r7, #3]
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	78ba      	ldrb	r2, [r7, #2]
 8002cae:	4619      	mov	r1, r3
 8002cb0:	486f      	ldr	r0, [pc, #444]	; (8002e70 <UI_Draw_Parmetr_Ptr+0x31c>)
 8002cb2:	f7fe fa7f 	bl	80011b4 <OLED_Set_Char_Cursor>
			OLED_Send_Char(&OLED1,(*num_8/1000)%10+'0');
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	4a6e      	ldr	r2, [pc, #440]	; (8002e74 <UI_Draw_Parmetr_Ptr+0x320>)
 8002cbc:	fb82 1203 	smull	r1, r2, r2, r3
 8002cc0:	1192      	asrs	r2, r2, #6
 8002cc2:	17db      	asrs	r3, r3, #31
 8002cc4:	1ad2      	subs	r2, r2, r3
 8002cc6:	4b6c      	ldr	r3, [pc, #432]	; (8002e78 <UI_Draw_Parmetr_Ptr+0x324>)
 8002cc8:	fb83 1302 	smull	r1, r3, r3, r2
 8002ccc:	1099      	asrs	r1, r3, #2
 8002cce:	17d3      	asrs	r3, r2, #31
 8002cd0:	1ac9      	subs	r1, r1, r3
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	440b      	add	r3, r1
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	1ad1      	subs	r1, r2, r3
 8002cdc:	b2cb      	uxtb	r3, r1
 8002cde:	3330      	adds	r3, #48	; 0x30
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	4862      	ldr	r0, [pc, #392]	; (8002e70 <UI_Draw_Parmetr_Ptr+0x31c>)
 8002ce6:	f7fe fac9 	bl	800127c <OLED_Send_Char>
			OLED_Send_Char(&OLED1,(*num_8/100)%10+'0');
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	4a63      	ldr	r2, [pc, #396]	; (8002e7c <UI_Draw_Parmetr_Ptr+0x328>)
 8002cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf4:	095b      	lsrs	r3, r3, #5
 8002cf6:	b2da      	uxtb	r2, r3
 8002cf8:	4b61      	ldr	r3, [pc, #388]	; (8002e80 <UI_Draw_Parmetr_Ptr+0x32c>)
 8002cfa:	fba3 1302 	umull	r1, r3, r3, r2
 8002cfe:	08d9      	lsrs	r1, r3, #3
 8002d00:	460b      	mov	r3, r1
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	440b      	add	r3, r1
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	3330      	adds	r3, #48	; 0x30
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	4619      	mov	r1, r3
 8002d12:	4857      	ldr	r0, [pc, #348]	; (8002e70 <UI_Draw_Parmetr_Ptr+0x31c>)
 8002d14:	f7fe fab2 	bl	800127c <OLED_Send_Char>
			OLED_Send_Char(&OLED1,(*num_8/10)%10+'0');
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	4a58      	ldr	r2, [pc, #352]	; (8002e80 <UI_Draw_Parmetr_Ptr+0x32c>)
 8002d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d22:	08db      	lsrs	r3, r3, #3
 8002d24:	b2da      	uxtb	r2, r3
 8002d26:	4b56      	ldr	r3, [pc, #344]	; (8002e80 <UI_Draw_Parmetr_Ptr+0x32c>)
 8002d28:	fba3 1302 	umull	r1, r3, r3, r2
 8002d2c:	08d9      	lsrs	r1, r3, #3
 8002d2e:	460b      	mov	r3, r1
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	440b      	add	r3, r1
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	3330      	adds	r3, #48	; 0x30
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	4619      	mov	r1, r3
 8002d40:	484b      	ldr	r0, [pc, #300]	; (8002e70 <UI_Draw_Parmetr_Ptr+0x31c>)
 8002d42:	f7fe fa9b 	bl	800127c <OLED_Send_Char>
			OLED_Send_Char(&OLED1,(*num_8)%10+'0');
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	781a      	ldrb	r2, [r3, #0]
 8002d4a:	4b4d      	ldr	r3, [pc, #308]	; (8002e80 <UI_Draw_Parmetr_Ptr+0x32c>)
 8002d4c:	fba3 1302 	umull	r1, r3, r3, r2
 8002d50:	08d9      	lsrs	r1, r3, #3
 8002d52:	460b      	mov	r3, r1
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	440b      	add	r3, r1
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	3330      	adds	r3, #48	; 0x30
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	4619      	mov	r1, r3
 8002d64:	4842      	ldr	r0, [pc, #264]	; (8002e70 <UI_Draw_Parmetr_Ptr+0x31c>)
 8002d66:	f7fe fa89 	bl	800127c <OLED_Send_Char>
		break;
 8002d6a:	e07d      	b.n	8002e68 <UI_Draw_Parmetr_Ptr+0x314>
		case UINT16:
			uint16_t *num_16=value;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	60fb      	str	r3, [r7, #12]
			OLED_Set_Char_Cursor(&OLED1,x,y);
 8002d70:	78fb      	ldrb	r3, [r7, #3]
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	78ba      	ldrb	r2, [r7, #2]
 8002d76:	4619      	mov	r1, r3
 8002d78:	483d      	ldr	r0, [pc, #244]	; (8002e70 <UI_Draw_Parmetr_Ptr+0x31c>)
 8002d7a:	f7fe fa1b 	bl	80011b4 <OLED_Set_Char_Cursor>
			OLED_Send_Char(&OLED1,(*num_16/1000)%10+'0');
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	881b      	ldrh	r3, [r3, #0]
 8002d82:	4a3c      	ldr	r2, [pc, #240]	; (8002e74 <UI_Draw_Parmetr_Ptr+0x320>)
 8002d84:	fba2 2303 	umull	r2, r3, r2, r3
 8002d88:	099b      	lsrs	r3, r3, #6
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	4b3c      	ldr	r3, [pc, #240]	; (8002e80 <UI_Draw_Parmetr_Ptr+0x32c>)
 8002d8e:	fba3 1302 	umull	r1, r3, r3, r2
 8002d92:	08d9      	lsrs	r1, r3, #3
 8002d94:	460b      	mov	r3, r1
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	3330      	adds	r3, #48	; 0x30
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	4619      	mov	r1, r3
 8002da8:	4831      	ldr	r0, [pc, #196]	; (8002e70 <UI_Draw_Parmetr_Ptr+0x31c>)
 8002daa:	f7fe fa67 	bl	800127c <OLED_Send_Char>
			OLED_Send_Char(&OLED1,(*num_16/100)%10+'0');
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	881b      	ldrh	r3, [r3, #0]
 8002db2:	4a32      	ldr	r2, [pc, #200]	; (8002e7c <UI_Draw_Parmetr_Ptr+0x328>)
 8002db4:	fba2 2303 	umull	r2, r3, r2, r3
 8002db8:	095b      	lsrs	r3, r3, #5
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	4b30      	ldr	r3, [pc, #192]	; (8002e80 <UI_Draw_Parmetr_Ptr+0x32c>)
 8002dbe:	fba3 1302 	umull	r1, r3, r3, r2
 8002dc2:	08d9      	lsrs	r1, r3, #3
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	440b      	add	r3, r1
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	3330      	adds	r3, #48	; 0x30
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	4825      	ldr	r0, [pc, #148]	; (8002e70 <UI_Draw_Parmetr_Ptr+0x31c>)
 8002dda:	f7fe fa4f 	bl	800127c <OLED_Send_Char>
			OLED_Send_Char(&OLED1,(*num_16/10)%10+'0');
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	881b      	ldrh	r3, [r3, #0]
 8002de2:	4a27      	ldr	r2, [pc, #156]	; (8002e80 <UI_Draw_Parmetr_Ptr+0x32c>)
 8002de4:	fba2 2303 	umull	r2, r3, r2, r3
 8002de8:	08db      	lsrs	r3, r3, #3
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	4b24      	ldr	r3, [pc, #144]	; (8002e80 <UI_Draw_Parmetr_Ptr+0x32c>)
 8002dee:	fba3 1302 	umull	r1, r3, r3, r2
 8002df2:	08d9      	lsrs	r1, r3, #3
 8002df4:	460b      	mov	r3, r1
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	3330      	adds	r3, #48	; 0x30
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	4619      	mov	r1, r3
 8002e08:	4819      	ldr	r0, [pc, #100]	; (8002e70 <UI_Draw_Parmetr_Ptr+0x31c>)
 8002e0a:	f7fe fa37 	bl	800127c <OLED_Send_Char>
			OLED_Send_Char(&OLED1,(*num_16)%10+'0');
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	881a      	ldrh	r2, [r3, #0]
 8002e12:	4b1b      	ldr	r3, [pc, #108]	; (8002e80 <UI_Draw_Parmetr_Ptr+0x32c>)
 8002e14:	fba3 1302 	umull	r1, r3, r3, r2
 8002e18:	08d9      	lsrs	r1, r3, #3
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	440b      	add	r3, r1
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	3330      	adds	r3, #48	; 0x30
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	4810      	ldr	r0, [pc, #64]	; (8002e70 <UI_Draw_Parmetr_Ptr+0x31c>)
 8002e30:	f7fe fa24 	bl	800127c <OLED_Send_Char>
		break;
 8002e34:	e018      	b.n	8002e68 <UI_Draw_Parmetr_Ptr+0x314>
		case BOOL:
			uint8_t *num=value;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	613b      	str	r3, [r7, #16]
			OLED_Set_Char_Cursor(&OLED1,x,y);
 8002e3a:	78fb      	ldrb	r3, [r7, #3]
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	78ba      	ldrb	r2, [r7, #2]
 8002e40:	4619      	mov	r1, r3
 8002e42:	480b      	ldr	r0, [pc, #44]	; (8002e70 <UI_Draw_Parmetr_Ptr+0x31c>)
 8002e44:	f7fe f9b6 	bl	80011b4 <OLED_Set_Char_Cursor>
			if(*num==1){
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d105      	bne.n	8002e5c <UI_Draw_Parmetr_Ptr+0x308>
				OLED_Send_String(&OLED1,"ON ", Direct_Display_MODE);
 8002e50:	2200      	movs	r2, #0
 8002e52:	490c      	ldr	r1, [pc, #48]	; (8002e84 <UI_Draw_Parmetr_Ptr+0x330>)
 8002e54:	4806      	ldr	r0, [pc, #24]	; (8002e70 <UI_Draw_Parmetr_Ptr+0x31c>)
 8002e56:	f7fe fa79 	bl	800134c <OLED_Send_String>
			}else
				OLED_Send_String(&OLED1,"OFF", Direct_Display_MODE);
		break;
 8002e5a:	e004      	b.n	8002e66 <UI_Draw_Parmetr_Ptr+0x312>
				OLED_Send_String(&OLED1,"OFF", Direct_Display_MODE);
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	490a      	ldr	r1, [pc, #40]	; (8002e88 <UI_Draw_Parmetr_Ptr+0x334>)
 8002e60:	4803      	ldr	r0, [pc, #12]	; (8002e70 <UI_Draw_Parmetr_Ptr+0x31c>)
 8002e62:	f7fe fa73 	bl	800134c <OLED_Send_String>
		break;
 8002e66:	bf00      	nop
	}
}
 8002e68:	bf00      	nop
 8002e6a:	3718      	adds	r7, #24
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	200004a4 	.word	0x200004a4
 8002e74:	10624dd3 	.word	0x10624dd3
 8002e78:	66666667 	.word	0x66666667
 8002e7c:	51eb851f 	.word	0x51eb851f
 8002e80:	cccccccd 	.word	0xcccccccd
 8002e84:	08009810 	.word	0x08009810
 8002e88:	08009814 	.word	0x08009814

08002e8c <UI_Draw_Parmetr>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void UI_Draw_Parmetr(int value, uint8_t x,uint8_t y,enum Type mode){
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	4608      	mov	r0, r1
 8002e96:	4611      	mov	r1, r2
 8002e98:	461a      	mov	r2, r3
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	70fb      	strb	r3, [r7, #3]
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	70bb      	strb	r3, [r7, #2]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	707b      	strb	r3, [r7, #1]
	/**
	 * Displays the value on the display based on the variable, type of variable and the x y position
	 */
	UI_Draw_Parmetr_Ptr(&value, x, y, mode);
 8002ea6:	787b      	ldrb	r3, [r7, #1]
 8002ea8:	78ba      	ldrb	r2, [r7, #2]
 8002eaa:	78f9      	ldrb	r1, [r7, #3]
 8002eac:	1d38      	adds	r0, r7, #4
 8002eae:	f7ff fe51 	bl	8002b54 <UI_Draw_Parmetr_Ptr>
}
 8002eb2:	bf00      	nop
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
	...

08002ebc <UI_Draw_String>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void UI_Draw_String(char *str, uint8_t x, uint8_t y, enum Display_Write_MODE Display_Write_MODE){
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	4608      	mov	r0, r1
 8002ec6:	4611      	mov	r1, r2
 8002ec8:	461a      	mov	r2, r3
 8002eca:	4603      	mov	r3, r0
 8002ecc:	70fb      	strb	r3, [r7, #3]
 8002ece:	460b      	mov	r3, r1
 8002ed0:	70bb      	strb	r3, [r7, #2]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	707b      	strb	r3, [r7, #1]
	/**
	 * Displays the string on the display based x y position and Display_Write_MODE(direct inverse)
	 */
	OLED_Set_Char_Cursor(&OLED1,x,y);					//Sets position on display from what will be display based on ASII symbols size
 8002ed6:	78fb      	ldrb	r3, [r7, #3]
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	78ba      	ldrb	r2, [r7, #2]
 8002edc:	4619      	mov	r1, r3
 8002ede:	4806      	ldr	r0, [pc, #24]	; (8002ef8 <UI_Draw_String+0x3c>)
 8002ee0:	f7fe f968 	bl	80011b4 <OLED_Set_Char_Cursor>
	OLED_Send_String(&OLED1, str, Display_Write_MODE);	//Display string on the Display
 8002ee4:	787b      	ldrb	r3, [r7, #1]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	6879      	ldr	r1, [r7, #4]
 8002eea:	4803      	ldr	r0, [pc, #12]	; (8002ef8 <UI_Draw_String+0x3c>)
 8002eec:	f7fe fa2e 	bl	800134c <OLED_Send_String>

}
 8002ef0:	bf00      	nop
 8002ef2:	3708      	adds	r7, #8
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	200004a4 	.word	0x200004a4

08002efc <UI_Set_Cursor>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void UI_Set_Cursor(uint8_t x, uint8_t y){
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	4603      	mov	r3, r0
 8002f04:	460a      	mov	r2, r1
 8002f06:	71fb      	strb	r3, [r7, #7]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	71bb      	strb	r3, [r7, #6]
	/**
	 * Set symbol cursor(>) based on x, y position and clear prew cursor position
	 */
	static uint8_t Prew_Pos_x=0,Prew_Pos_y=0;
		OLED_Set_Char_Cursor(&OLED1,Prew_Pos_x,Prew_Pos_y);
 8002f0c:	4b10      	ldr	r3, [pc, #64]	; (8002f50 <UI_Set_Cursor+0x54>)
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	4a10      	ldr	r2, [pc, #64]	; (8002f54 <UI_Set_Cursor+0x58>)
 8002f14:	7812      	ldrb	r2, [r2, #0]
 8002f16:	4619      	mov	r1, r3
 8002f18:	480f      	ldr	r0, [pc, #60]	; (8002f58 <UI_Set_Cursor+0x5c>)
 8002f1a:	f7fe f94b 	bl	80011b4 <OLED_Set_Char_Cursor>
		OLED_Send_Char(&OLED1,' ');
 8002f1e:	2120      	movs	r1, #32
 8002f20:	480d      	ldr	r0, [pc, #52]	; (8002f58 <UI_Set_Cursor+0x5c>)
 8002f22:	f7fe f9ab 	bl	800127c <OLED_Send_Char>
		OLED_Set_Char_Cursor(&OLED1,x,y);
 8002f26:	79fb      	ldrb	r3, [r7, #7]
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	79ba      	ldrb	r2, [r7, #6]
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	480a      	ldr	r0, [pc, #40]	; (8002f58 <UI_Set_Cursor+0x5c>)
 8002f30:	f7fe f940 	bl	80011b4 <OLED_Set_Char_Cursor>
		OLED_Send_Char(&OLED1,'>');
 8002f34:	213e      	movs	r1, #62	; 0x3e
 8002f36:	4808      	ldr	r0, [pc, #32]	; (8002f58 <UI_Set_Cursor+0x5c>)
 8002f38:	f7fe f9a0 	bl	800127c <OLED_Send_Char>
		Prew_Pos_x=x;
 8002f3c:	4a04      	ldr	r2, [pc, #16]	; (8002f50 <UI_Set_Cursor+0x54>)
 8002f3e:	79fb      	ldrb	r3, [r7, #7]
 8002f40:	7013      	strb	r3, [r2, #0]
		Prew_Pos_y=y;
 8002f42:	4a04      	ldr	r2, [pc, #16]	; (8002f54 <UI_Set_Cursor+0x58>)
 8002f44:	79bb      	ldrb	r3, [r7, #6]
 8002f46:	7013      	strb	r3, [r2, #0]
}
 8002f48:	bf00      	nop
 8002f4a:	3708      	adds	r7, #8
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	200002b7 	.word	0x200002b7
 8002f54:	200002b8 	.word	0x200002b8
 8002f58:	200004a4 	.word	0x200004a4

08002f5c <UI_Clear_Line>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void UI_Clear_Line(uint8_t y){
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	4603      	mov	r3, r0
 8002f64:	71fb      	strb	r3, [r7, #7]
	/**
	 * Clear row on display based on y position
	 */
	OLED_Clear_Line(&OLED1,y);
 8002f66:	79fb      	ldrb	r3, [r7, #7]
 8002f68:	4619      	mov	r1, r3
 8002f6a:	4803      	ldr	r0, [pc, #12]	; (8002f78 <UI_Clear_Line+0x1c>)
 8002f6c:	f7fe f9c6 	bl	80012fc <OLED_Clear_Line>
}
 8002f70:	bf00      	nop
 8002f72:	3708      	adds	r7, #8
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	200004a4 	.word	0x200004a4

08002f7c <UI_Change_Value_Ptr>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void UI_Change_Value_Ptr(void *parametr, uint8_t step, enum Type mode, uint16_t min, uint16_t max, struct Encoder *Encoder){
 8002f7c:	b590      	push	{r4, r7, lr}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	4608      	mov	r0, r1
 8002f86:	4611      	mov	r1, r2
 8002f88:	461a      	mov	r2, r3
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	70fb      	strb	r3, [r7, #3]
 8002f8e:	460b      	mov	r3, r1
 8002f90:	70bb      	strb	r3, [r7, #2]
 8002f92:	4613      	mov	r3, r2
 8002f94:	803b      	strh	r3, [r7, #0]
	/**
	 * Change the value based on the variable pointer, step, type of variable and encoder buffer
	 */
	switch(mode){
 8002f96:	78bb      	ldrb	r3, [r7, #2]
 8002f98:	2b03      	cmp	r3, #3
 8002f9a:	f200 8098 	bhi.w	80030ce <UI_Change_Value_Ptr+0x152>
 8002f9e:	a201      	add	r2, pc, #4	; (adr r2, 8002fa4 <UI_Change_Value_Ptr+0x28>)
 8002fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fa4:	08002fb5 	.word	0x08002fb5
 8002fa8:	08002fcf 	.word	0x08002fcf
 8002fac:	0800303d 	.word	0x0800303d
 8002fb0:	080030a7 	.word	0x080030a7
		case INT:
			*(int*)parametr+=Encoder_Get_Rotary_Switch_Buffer(Encoder)*step;
 8002fb4:	69f8      	ldr	r0, [r7, #28]
 8002fb6:	f7fd fe82 	bl	8000cbe <Encoder_Get_Rotary_Switch_Buffer>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	78fb      	ldrb	r3, [r7, #3]
 8002fbe:	fb03 f202 	mul.w	r2, r3, r2
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	441a      	add	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	601a      	str	r2, [r3, #0]
		break;
 8002fcc:	e07f      	b.n	80030ce <UI_Change_Value_Ptr+0x152>
		case UINT8:
			if((*(uint8_t*)parametr+Encoder_Get_Rotary_Switch_Buffer(Encoder)*step)<min)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	461c      	mov	r4, r3
 8002fd4:	69f8      	ldr	r0, [r7, #28]
 8002fd6:	f7fd fe72 	bl	8000cbe <Encoder_Get_Rotary_Switch_Buffer>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	78fb      	ldrb	r3, [r7, #3]
 8002fde:	fb02 f303 	mul.w	r3, r2, r3
 8002fe2:	18e2      	adds	r2, r4, r3
 8002fe4:	883b      	ldrh	r3, [r7, #0]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	da04      	bge.n	8002ff4 <UI_Change_Value_Ptr+0x78>
				*(uint8_t*)parametr=(uint8_t)min;
 8002fea:	883b      	ldrh	r3, [r7, #0]
 8002fec:	b2da      	uxtb	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	701a      	strb	r2, [r3, #0]
			else if ((*(uint8_t*)parametr+Encoder_Get_Rotary_Switch_Buffer(Encoder)*step)>max)
				*(uint8_t*)parametr=(uint8_t)max;
			else
				*(uint8_t*)parametr+=(uint8_t)Encoder_Get_Rotary_Switch_Buffer(Encoder)*step;
		break;
 8002ff2:	e06c      	b.n	80030ce <UI_Change_Value_Ptr+0x152>
			else if ((*(uint8_t*)parametr+Encoder_Get_Rotary_Switch_Buffer(Encoder)*step)>max)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	461c      	mov	r4, r3
 8002ffa:	69f8      	ldr	r0, [r7, #28]
 8002ffc:	f7fd fe5f 	bl	8000cbe <Encoder_Get_Rotary_Switch_Buffer>
 8003000:	4602      	mov	r2, r0
 8003002:	78fb      	ldrb	r3, [r7, #3]
 8003004:	fb02 f303 	mul.w	r3, r2, r3
 8003008:	18e2      	adds	r2, r4, r3
 800300a:	8b3b      	ldrh	r3, [r7, #24]
 800300c:	429a      	cmp	r2, r3
 800300e:	dd04      	ble.n	800301a <UI_Change_Value_Ptr+0x9e>
				*(uint8_t*)parametr=(uint8_t)max;
 8003010:	8b3b      	ldrh	r3, [r7, #24]
 8003012:	b2da      	uxtb	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	701a      	strb	r2, [r3, #0]
		break;
 8003018:	e059      	b.n	80030ce <UI_Change_Value_Ptr+0x152>
				*(uint8_t*)parametr+=(uint8_t)Encoder_Get_Rotary_Switch_Buffer(Encoder)*step;
 800301a:	69f8      	ldr	r0, [r7, #28]
 800301c:	f7fd fe4f 	bl	8000cbe <Encoder_Get_Rotary_Switch_Buffer>
 8003020:	4603      	mov	r3, r0
 8003022:	b2db      	uxtb	r3, r3
 8003024:	461a      	mov	r2, r3
 8003026:	78fb      	ldrb	r3, [r7, #3]
 8003028:	fb03 f102 	mul.w	r1, r3, r2
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	781a      	ldrb	r2, [r3, #0]
 8003030:	b2cb      	uxtb	r3, r1
 8003032:	4413      	add	r3, r2
 8003034:	b2da      	uxtb	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	701a      	strb	r2, [r3, #0]
		break;
 800303a:	e048      	b.n	80030ce <UI_Change_Value_Ptr+0x152>
		case UINT16:
			if((*(uint16_t*)parametr+Encoder_Get_Rotary_Switch_Buffer(Encoder)*step)<min)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	881b      	ldrh	r3, [r3, #0]
 8003040:	461c      	mov	r4, r3
 8003042:	69f8      	ldr	r0, [r7, #28]
 8003044:	f7fd fe3b 	bl	8000cbe <Encoder_Get_Rotary_Switch_Buffer>
 8003048:	4602      	mov	r2, r0
 800304a:	78fb      	ldrb	r3, [r7, #3]
 800304c:	fb02 f303 	mul.w	r3, r2, r3
 8003050:	18e2      	adds	r2, r4, r3
 8003052:	883b      	ldrh	r3, [r7, #0]
 8003054:	429a      	cmp	r2, r3
 8003056:	da03      	bge.n	8003060 <UI_Change_Value_Ptr+0xe4>
				*(uint16_t*)parametr=(uint16_t)min;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	883a      	ldrh	r2, [r7, #0]
 800305c:	801a      	strh	r2, [r3, #0]
			else if ((*(uint16_t*)parametr+Encoder_Get_Rotary_Switch_Buffer(Encoder)*step)>max)
				*(uint16_t*)parametr=(uint16_t)max;
			else
				*(uint16_t*)parametr+=(uint16_t)Encoder_Get_Rotary_Switch_Buffer(Encoder)*step;
		break;
 800305e:	e036      	b.n	80030ce <UI_Change_Value_Ptr+0x152>
			else if ((*(uint16_t*)parametr+Encoder_Get_Rotary_Switch_Buffer(Encoder)*step)>max)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	881b      	ldrh	r3, [r3, #0]
 8003064:	461c      	mov	r4, r3
 8003066:	69f8      	ldr	r0, [r7, #28]
 8003068:	f7fd fe29 	bl	8000cbe <Encoder_Get_Rotary_Switch_Buffer>
 800306c:	4602      	mov	r2, r0
 800306e:	78fb      	ldrb	r3, [r7, #3]
 8003070:	fb02 f303 	mul.w	r3, r2, r3
 8003074:	18e2      	adds	r2, r4, r3
 8003076:	8b3b      	ldrh	r3, [r7, #24]
 8003078:	429a      	cmp	r2, r3
 800307a:	dd03      	ble.n	8003084 <UI_Change_Value_Ptr+0x108>
				*(uint16_t*)parametr=(uint16_t)max;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	8b3a      	ldrh	r2, [r7, #24]
 8003080:	801a      	strh	r2, [r3, #0]
		break;
 8003082:	e024      	b.n	80030ce <UI_Change_Value_Ptr+0x152>
				*(uint16_t*)parametr+=(uint16_t)Encoder_Get_Rotary_Switch_Buffer(Encoder)*step;
 8003084:	69f8      	ldr	r0, [r7, #28]
 8003086:	f7fd fe1a 	bl	8000cbe <Encoder_Get_Rotary_Switch_Buffer>
 800308a:	4603      	mov	r3, r0
 800308c:	b29b      	uxth	r3, r3
 800308e:	461a      	mov	r2, r3
 8003090:	78fb      	ldrb	r3, [r7, #3]
 8003092:	fb03 f102 	mul.w	r1, r3, r2
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	881a      	ldrh	r2, [r3, #0]
 800309a:	b28b      	uxth	r3, r1
 800309c:	4413      	add	r3, r2
 800309e:	b29a      	uxth	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	801a      	strh	r2, [r3, #0]
		break;
 80030a4:	e013      	b.n	80030ce <UI_Change_Value_Ptr+0x152>
		case BOOL:
			if(Encoder_Get_Rotary_Switch_Buffer(Encoder)>0)
 80030a6:	69f8      	ldr	r0, [r7, #28]
 80030a8:	f7fd fe09 	bl	8000cbe <Encoder_Get_Rotary_Switch_Buffer>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	dd03      	ble.n	80030ba <UI_Change_Value_Ptr+0x13e>
				*(uint8_t*)parametr=1;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2201      	movs	r2, #1
 80030b6:	701a      	strb	r2, [r3, #0]
			else if(Encoder_Get_Rotary_Switch_Buffer(Encoder)<0)
				*(uint8_t*)parametr=0;
		break;
 80030b8:	e008      	b.n	80030cc <UI_Change_Value_Ptr+0x150>
			else if(Encoder_Get_Rotary_Switch_Buffer(Encoder)<0)
 80030ba:	69f8      	ldr	r0, [r7, #28]
 80030bc:	f7fd fdff 	bl	8000cbe <Encoder_Get_Rotary_Switch_Buffer>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	da02      	bge.n	80030cc <UI_Change_Value_Ptr+0x150>
				*(uint8_t*)parametr=0;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	701a      	strb	r2, [r3, #0]
		break;
 80030cc:	bf00      	nop
	}
	Encoder_Reset_Rotary_Switch_Buffer(Encoder);
 80030ce:	69f8      	ldr	r0, [r7, #28]
 80030d0:	f7fd fde9 	bl	8000ca6 <Encoder_Reset_Rotary_Switch_Buffer>
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd90      	pop	{r4, r7, pc}

080030dc <UI_Change_Value>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
int UI_Change_Value(int parametr, uint8_t step, enum Type mode, uint16_t min, uint16_t max, struct Encoder *Encoder){
 80030dc:	b590      	push	{r4, r7, lr}
 80030de:	b085      	sub	sp, #20
 80030e0:	af02      	add	r7, sp, #8
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	4608      	mov	r0, r1
 80030e6:	4611      	mov	r1, r2
 80030e8:	461a      	mov	r2, r3
 80030ea:	4603      	mov	r3, r0
 80030ec:	70fb      	strb	r3, [r7, #3]
 80030ee:	460b      	mov	r3, r1
 80030f0:	70bb      	strb	r3, [r7, #2]
 80030f2:	4613      	mov	r3, r2
 80030f4:	803b      	strh	r3, [r7, #0]
	/**
	 * Change the value based on the variable, step, type of variable and encoder buffer
	 * return Changed Variable
	 */
	UI_Change_Value_Ptr(&parametr, step, mode, min, max, Encoder);
 80030f6:	883c      	ldrh	r4, [r7, #0]
 80030f8:	78ba      	ldrb	r2, [r7, #2]
 80030fa:	78f9      	ldrb	r1, [r7, #3]
 80030fc:	1d38      	adds	r0, r7, #4
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	9301      	str	r3, [sp, #4]
 8003102:	8b3b      	ldrh	r3, [r7, #24]
 8003104:	9300      	str	r3, [sp, #0]
 8003106:	4623      	mov	r3, r4
 8003108:	f7ff ff38 	bl	8002f7c <UI_Change_Value_Ptr>
	return parametr;
 800310c:	687b      	ldr	r3, [r7, #4]
}
 800310e:	4618      	mov	r0, r3
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	bd90      	pop	{r4, r7, pc}
	...

08003118 <UI_Draw_String_Center>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void UI_Draw_String_Center(char *str, uint8_t y, enum Display_Write_MODE Display_Write_MODE){
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	460b      	mov	r3, r1
 8003122:	70fb      	strb	r3, [r7, #3]
 8003124:	4613      	mov	r3, r2
 8003126:	70bb      	strb	r3, [r7, #2]
	/**
	 * Draw string in center of row based on row position and Display_Write_MODE
	 */
	uint8_t str_len =strlen(str);						//Get string length
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f7fd f80f 	bl	800014c <strlen>
 800312e:	4603      	mov	r3, r0
 8003130:	73fb      	strb	r3, [r7, #15]
	uint8_t center= (OLED_Colume_Number-str_len*6)/2;	//Counting start position x to draw string
 8003132:	7bfa      	ldrb	r2, [r7, #15]
 8003134:	4613      	mov	r3, r2
 8003136:	0092      	lsls	r2, r2, #2
 8003138:	1a9b      	subs	r3, r3, r2
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	337d      	adds	r3, #125	; 0x7d
 800313e:	0fda      	lsrs	r2, r3, #31
 8003140:	4413      	add	r3, r2
 8003142:	105b      	asrs	r3, r3, #1
 8003144:	73bb      	strb	r3, [r7, #14]
	OLED_Set_Cursor(&OLED1, center, y);					//Sets position on display from what will be display
 8003146:	7bbb      	ldrb	r3, [r7, #14]
 8003148:	b29b      	uxth	r3, r3
 800314a:	78fa      	ldrb	r2, [r7, #3]
 800314c:	4619      	mov	r1, r3
 800314e:	4806      	ldr	r0, [pc, #24]	; (8003168 <UI_Draw_String_Center+0x50>)
 8003150:	f7fe f806 	bl	8001160 <OLED_Set_Cursor>
	OLED_Send_String(&OLED1, str, Display_Write_MODE);	//Display string on display
 8003154:	78bb      	ldrb	r3, [r7, #2]
 8003156:	461a      	mov	r2, r3
 8003158:	6879      	ldr	r1, [r7, #4]
 800315a:	4803      	ldr	r0, [pc, #12]	; (8003168 <UI_Draw_String_Center+0x50>)
 800315c:	f7fe f8f6 	bl	800134c <OLED_Send_String>
}
 8003160:	bf00      	nop
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	200004a4 	.word	0x200004a4

0800316c <UI_Encoder_Reset_Rotary_Switch_Buffer>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void UI_Encoder_Reset_Rotary_Switch_Buffer(struct Encoder *Encoder){
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
	/**
	 * Reset Encoder_Rotary switch buffer
	 */
	Encoder_Reset_Rotary_Switch_Buffer(Encoder);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f7fd fd96 	bl	8000ca6 <Encoder_Reset_Rotary_Switch_Buffer>
}
 800317a:	bf00      	nop
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <UI_Encoder_Reset_Button_State>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void UI_Encoder_Reset_Button_State(struct Encoder *Encoder){
 8003182:	b580      	push	{r7, lr}
 8003184:	b082      	sub	sp, #8
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
	/**
	 * Reset Encoder_Rotary button buffer
	 */
	Encoder_Reset_Button_State(Encoder);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f7fd fda2 	bl	8000cd4 <Encoder_Reset_Button_State>
}
 8003190:	bf00      	nop
 8003192:	3708      	adds	r7, #8
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <Face_UI_Draw_Name_List>:
#include "UI_Face.h"

//--------------------------------------------------------------------------------------------------------------------------------------------------------
void Face_UI_Draw_Name_List(){
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
	UI_Clear_Line(0);
 800319c:	2000      	movs	r0, #0
 800319e:	f7ff fedd 	bl	8002f5c <UI_Clear_Line>
	UI_Draw_String(" SoldIron ", 0, 0, Inverse_Display_MODE);
 80031a2:	2301      	movs	r3, #1
 80031a4:	2200      	movs	r2, #0
 80031a6:	2100      	movs	r1, #0
 80031a8:	4835      	ldr	r0, [pc, #212]	; (8003280 <Face_UI_Draw_Name_List+0xe8>)
 80031aa:	f7ff fe87 	bl	8002ebc <UI_Draw_String>
	UI_Clear_Line(1);
 80031ae:	2001      	movs	r0, #1
 80031b0:	f7ff fed4 	bl	8002f5c <UI_Clear_Line>
	UI_Draw_String("State:", 0, 1, Direct_Display_MODE);
 80031b4:	2300      	movs	r3, #0
 80031b6:	2201      	movs	r2, #1
 80031b8:	2100      	movs	r1, #0
 80031ba:	4832      	ldr	r0, [pc, #200]	; (8003284 <Face_UI_Draw_Name_List+0xec>)
 80031bc:	f7ff fe7e 	bl	8002ebc <UI_Draw_String>
	UI_Clear_Line(2);
 80031c0:	2002      	movs	r0, #2
 80031c2:	f7ff fecb 	bl	8002f5c <UI_Clear_Line>
	UI_Draw_String("TSetC:", 0, 2, Direct_Display_MODE);
 80031c6:	2300      	movs	r3, #0
 80031c8:	2202      	movs	r2, #2
 80031ca:	2100      	movs	r1, #0
 80031cc:	482e      	ldr	r0, [pc, #184]	; (8003288 <Face_UI_Draw_Name_List+0xf0>)
 80031ce:	f7ff fe75 	bl	8002ebc <UI_Draw_String>
	UI_Clear_Line(3);
 80031d2:	2003      	movs	r0, #3
 80031d4:	f7ff fec2 	bl	8002f5c <UI_Clear_Line>
	UI_Draw_String("TNowC:", 0, 3, Direct_Display_MODE);
 80031d8:	2300      	movs	r3, #0
 80031da:	2203      	movs	r2, #3
 80031dc:	2100      	movs	r1, #0
 80031de:	482b      	ldr	r0, [pc, #172]	; (800328c <Face_UI_Draw_Name_List+0xf4>)
 80031e0:	f7ff fe6c 	bl	8002ebc <UI_Draw_String>
	UI_Clear_Line(4);
 80031e4:	2004      	movs	r0, #4
 80031e6:	f7ff feb9 	bl	8002f5c <UI_Clear_Line>
	UI_Draw_String("AdPow:", 0, 4, Direct_Display_MODE);
 80031ea:	2300      	movs	r3, #0
 80031ec:	2204      	movs	r2, #4
 80031ee:	2100      	movs	r1, #0
 80031f0:	4827      	ldr	r0, [pc, #156]	; (8003290 <Face_UI_Draw_Name_List+0xf8>)
 80031f2:	f7ff fe63 	bl	8002ebc <UI_Draw_String>
	UI_Clear_Line(5);
 80031f6:	2005      	movs	r0, #5
 80031f8:	f7ff feb0 	bl	8002f5c <UI_Clear_Line>


	UI_Draw_String("Freq:", 0, 5, Inverse_Display_MODE);
 80031fc:	2301      	movs	r3, #1
 80031fe:	2205      	movs	r2, #5
 8003200:	2100      	movs	r1, #0
 8003202:	4824      	ldr	r0, [pc, #144]	; (8003294 <Face_UI_Draw_Name_List+0xfc>)
 8003204:	f7ff fe5a 	bl	8002ebc <UI_Draw_String>
	UI_Clear_Line(6);
 8003208:	2006      	movs	r0, #6
 800320a:	f7ff fea7 	bl	8002f5c <UI_Clear_Line>
	UI_Draw_String("Count:", 0, 6, Direct_Display_MODE);
 800320e:	2300      	movs	r3, #0
 8003210:	2206      	movs	r2, #6
 8003212:	2100      	movs	r1, #0
 8003214:	4820      	ldr	r0, [pc, #128]	; (8003298 <Face_UI_Draw_Name_List+0x100>)
 8003216:	f7ff fe51 	bl	8002ebc <UI_Draw_String>


	UI_Draw_String(" SoldFAN ", 11, 0, Inverse_Display_MODE);
 800321a:	2301      	movs	r3, #1
 800321c:	2200      	movs	r2, #0
 800321e:	210b      	movs	r1, #11
 8003220:	481e      	ldr	r0, [pc, #120]	; (800329c <Face_UI_Draw_Name_List+0x104>)
 8003222:	f7ff fe4b 	bl	8002ebc <UI_Draw_String>
	UI_Draw_String("State:", 11, 1, Direct_Display_MODE);
 8003226:	2300      	movs	r3, #0
 8003228:	2201      	movs	r2, #1
 800322a:	210b      	movs	r1, #11
 800322c:	4815      	ldr	r0, [pc, #84]	; (8003284 <Face_UI_Draw_Name_List+0xec>)
 800322e:	f7ff fe45 	bl	8002ebc <UI_Draw_String>
	UI_Draw_String("TSetC:", 11, 2, Direct_Display_MODE);
 8003232:	2300      	movs	r3, #0
 8003234:	2202      	movs	r2, #2
 8003236:	210b      	movs	r1, #11
 8003238:	4813      	ldr	r0, [pc, #76]	; (8003288 <Face_UI_Draw_Name_List+0xf0>)
 800323a:	f7ff fe3f 	bl	8002ebc <UI_Draw_String>
	UI_Draw_String("TNowC:", 11, 3, Direct_Display_MODE);
 800323e:	2300      	movs	r3, #0
 8003240:	2203      	movs	r2, #3
 8003242:	210b      	movs	r1, #11
 8003244:	4811      	ldr	r0, [pc, #68]	; (800328c <Face_UI_Draw_Name_List+0xf4>)
 8003246:	f7ff fe39 	bl	8002ebc <UI_Draw_String>


	UI_Draw_String(" Separator", 11, 4, Direct_Display_MODE);
 800324a:	2300      	movs	r3, #0
 800324c:	2204      	movs	r2, #4
 800324e:	210b      	movs	r1, #11
 8003250:	4813      	ldr	r0, [pc, #76]	; (80032a0 <Face_UI_Draw_Name_List+0x108>)
 8003252:	f7ff fe33 	bl	8002ebc <UI_Draw_String>
	UI_Draw_String("State:", 11, 5, Direct_Display_MODE);
 8003256:	2300      	movs	r3, #0
 8003258:	2205      	movs	r2, #5
 800325a:	210b      	movs	r1, #11
 800325c:	4809      	ldr	r0, [pc, #36]	; (8003284 <Face_UI_Draw_Name_List+0xec>)
 800325e:	f7ff fe2d 	bl	8002ebc <UI_Draw_String>
	UI_Draw_String("TSetC:", 11, 6, Direct_Display_MODE);
 8003262:	2300      	movs	r3, #0
 8003264:	2206      	movs	r2, #6
 8003266:	210b      	movs	r1, #11
 8003268:	4807      	ldr	r0, [pc, #28]	; (8003288 <Face_UI_Draw_Name_List+0xf0>)
 800326a:	f7ff fe27 	bl	8002ebc <UI_Draw_String>
	UI_Draw_String("TNowC:", 11, 7, Direct_Display_MODE);
 800326e:	2300      	movs	r3, #0
 8003270:	2207      	movs	r2, #7
 8003272:	210b      	movs	r1, #11
 8003274:	4805      	ldr	r0, [pc, #20]	; (800328c <Face_UI_Draw_Name_List+0xf4>)
 8003276:	f7ff fe21 	bl	8002ebc <UI_Draw_String>

}
 800327a:	bf00      	nop
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	08009818 	.word	0x08009818
 8003284:	08009824 	.word	0x08009824
 8003288:	0800982c 	.word	0x0800982c
 800328c:	08009834 	.word	0x08009834
 8003290:	0800983c 	.word	0x0800983c
 8003294:	08009844 	.word	0x08009844
 8003298:	0800984c 	.word	0x0800984c
 800329c:	08009854 	.word	0x08009854
 80032a0:	08009860 	.word	0x08009860

080032a4 <Face_UI_Draw_Parameters_List>:
//---------------------------------------------------------------------------------
void Face_UI_Draw_Parameters_List(){
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
							//Draw Solder_Iron Parameters
	UI_Draw_Parmetr(Solder_Iron_Get_State(&Soldering_Iron), 6, 1, BOOL);
 80032a8:	4876      	ldr	r0, [pc, #472]	; (8003484 <Face_UI_Draw_Parameters_List+0x1e0>)
 80032aa:	f7fe fe8e 	bl	8001fca <Solder_Iron_Get_State>
 80032ae:	4603      	mov	r3, r0
 80032b0:	4618      	mov	r0, r3
 80032b2:	2303      	movs	r3, #3
 80032b4:	2201      	movs	r2, #1
 80032b6:	2106      	movs	r1, #6
 80032b8:	f7ff fde8 	bl	8002e8c <UI_Draw_Parmetr>
	UI_Draw_Parmetr(Soldering_Iron_Get_Temperature_Set_C(&Soldering_Iron), 6, 2, UINT16);
 80032bc:	4871      	ldr	r0, [pc, #452]	; (8003484 <Face_UI_Draw_Parameters_List+0x1e0>)
 80032be:	f7fe fe9e 	bl	8001ffe <Soldering_Iron_Get_Temperature_Set_C>
 80032c2:	4603      	mov	r3, r0
 80032c4:	4618      	mov	r0, r3
 80032c6:	2302      	movs	r3, #2
 80032c8:	2202      	movs	r2, #2
 80032ca:	2106      	movs	r1, #6
 80032cc:	f7ff fdde 	bl	8002e8c <UI_Draw_Parmetr>
	if(Solder_Iron_Get_State(&Soldering_Iron)==Soldering_Iron_ON)
 80032d0:	486c      	ldr	r0, [pc, #432]	; (8003484 <Face_UI_Draw_Parameters_List+0x1e0>)
 80032d2:	f7fe fe7a 	bl	8001fca <Solder_Iron_Get_State>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d10a      	bne.n	80032f2 <Face_UI_Draw_Parameters_List+0x4e>
		UI_Draw_Parmetr(Soldering_Iron_Get_Current_Temperature_C(&Soldering_Iron), 6, 3, UINT16);
 80032dc:	4869      	ldr	r0, [pc, #420]	; (8003484 <Face_UI_Draw_Parameters_List+0x1e0>)
 80032de:	f7fe fe9c 	bl	800201a <Soldering_Iron_Get_Current_Temperature_C>
 80032e2:	4603      	mov	r3, r0
 80032e4:	4618      	mov	r0, r3
 80032e6:	2302      	movs	r3, #2
 80032e8:	2203      	movs	r2, #3
 80032ea:	2106      	movs	r1, #6
 80032ec:	f7ff fdce 	bl	8002e8c <UI_Draw_Parmetr>
 80032f0:	e005      	b.n	80032fe <Face_UI_Draw_Parameters_List+0x5a>
	else
		UI_Draw_String("----",6,3,Direct_Display_MODE);
 80032f2:	2300      	movs	r3, #0
 80032f4:	2203      	movs	r2, #3
 80032f6:	2106      	movs	r1, #6
 80032f8:	4863      	ldr	r0, [pc, #396]	; (8003488 <Face_UI_Draw_Parameters_List+0x1e4>)
 80032fa:	f7ff fddf 	bl	8002ebc <UI_Draw_String>
	UI_Draw_Parmetr(Solder_Iron_Get_Full_Power_State(&Soldering_Iron), 6, 4, BOOL);
 80032fe:	4861      	ldr	r0, [pc, #388]	; (8003484 <Face_UI_Draw_Parameters_List+0x1e0>)
 8003300:	f7fe fe57 	bl	8001fb2 <Solder_Iron_Get_Full_Power_State>
 8003304:	4603      	mov	r3, r0
 8003306:	4618      	mov	r0, r3
 8003308:	2303      	movs	r3, #3
 800330a:	2204      	movs	r2, #4
 800330c:	2106      	movs	r1, #6
 800330e:	f7ff fdbd 	bl	8002e8c <UI_Draw_Parmetr>

							//Draw Phase Angle Control Parameters
	if(PAC_Get_State(&PAC)==ZCD_STATE_ON){
 8003312:	485e      	ldr	r0, [pc, #376]	; (800348c <Face_UI_Draw_Parameters_List+0x1e8>)
 8003314:	f7fe fa60 	bl	80017d8 <PAC_Get_State>
 8003318:	4603      	mov	r3, r0
 800331a:	2b01      	cmp	r3, #1
 800331c:	d142      	bne.n	80033a4 <Face_UI_Draw_Parameters_List+0x100>
		UI_Draw_Parmetr(PAC_Get_Frequency(&PAC), 6, 5, UINT8);
 800331e:	485b      	ldr	r0, [pc, #364]	; (800348c <Face_UI_Draw_Parameters_List+0x1e8>)
 8003320:	f7fe fa65 	bl	80017ee <PAC_Get_Frequency>
 8003324:	4603      	mov	r3, r0
 8003326:	4618      	mov	r0, r3
 8003328:	2301      	movs	r3, #1
 800332a:	2205      	movs	r2, #5
 800332c:	2106      	movs	r1, #6
 800332e:	f7ff fdad 	bl	8002e8c <UI_Draw_Parmetr>
		UI_Draw_Parmetr(PAC_Get_Max_Control_Value(&PAC), 6, 6, UINT16);
 8003332:	4856      	ldr	r0, [pc, #344]	; (800348c <Face_UI_Draw_Parameters_List+0x1e8>)
 8003334:	f7fe fa66 	bl	8001804 <PAC_Get_Max_Control_Value>
 8003338:	4603      	mov	r3, r0
 800333a:	4618      	mov	r0, r3
 800333c:	2302      	movs	r3, #2
 800333e:	2206      	movs	r2, #6
 8003340:	2106      	movs	r1, #6
 8003342:	f7ff fda3 	bl	8002e8c <UI_Draw_Parmetr>
		if(Soldering_Heat_Gun_Get_PAC_Controll_State(&Soldering_Heat_Gun)==PAC_Control_ON)
 8003346:	4852      	ldr	r0, [pc, #328]	; (8003490 <Face_UI_Draw_Parameters_List+0x1ec>)
 8003348:	f7ff f84f 	bl	80023ea <Soldering_Heat_Gun_Get_PAC_Controll_State>
 800334c:	4603      	mov	r3, r0
 800334e:	2b01      	cmp	r3, #1
 8003350:	d10a      	bne.n	8003368 <Face_UI_Draw_Parameters_List+0xc4>
			UI_Draw_Parmetr(Soldering_Heat_Gun_Get_PAC_Controll_Value(&Soldering_Heat_Gun), 1, 7, UINT16);
 8003352:	484f      	ldr	r0, [pc, #316]	; (8003490 <Face_UI_Draw_Parameters_List+0x1ec>)
 8003354:	f7ff f855 	bl	8002402 <Soldering_Heat_Gun_Get_PAC_Controll_Value>
 8003358:	4603      	mov	r3, r0
 800335a:	4618      	mov	r0, r3
 800335c:	2302      	movs	r3, #2
 800335e:	2207      	movs	r2, #7
 8003360:	2101      	movs	r1, #1
 8003362:	f7ff fd93 	bl	8002e8c <UI_Draw_Parmetr>
 8003366:	e005      	b.n	8003374 <Face_UI_Draw_Parameters_List+0xd0>
		else
			UI_Draw_String("----",1,7,Direct_Display_MODE);
 8003368:	2300      	movs	r3, #0
 800336a:	2207      	movs	r2, #7
 800336c:	2101      	movs	r1, #1
 800336e:	4846      	ldr	r0, [pc, #280]	; (8003488 <Face_UI_Draw_Parameters_List+0x1e4>)
 8003370:	f7ff fda4 	bl	8002ebc <UI_Draw_String>
		if(Soldering_Separator_Get_PAC_Controll_State(&Soldering_Separator)==PAC_Control_ON)
 8003374:	4847      	ldr	r0, [pc, #284]	; (8003494 <Face_UI_Draw_Parameters_List+0x1f0>)
 8003376:	f7ff fa09 	bl	800278c <Soldering_Separator_Get_PAC_Controll_State>
 800337a:	4603      	mov	r3, r0
 800337c:	2b01      	cmp	r3, #1
 800337e:	d10a      	bne.n	8003396 <Face_UI_Draw_Parameters_List+0xf2>
			UI_Draw_Parmetr(Soldering_Separator_Get_PAC_Controll_Value(&Soldering_Separator), 6, 7, UINT16);
 8003380:	4844      	ldr	r0, [pc, #272]	; (8003494 <Face_UI_Draw_Parameters_List+0x1f0>)
 8003382:	f7ff fa0f 	bl	80027a4 <Soldering_Separator_Get_PAC_Controll_Value>
 8003386:	4603      	mov	r3, r0
 8003388:	4618      	mov	r0, r3
 800338a:	2302      	movs	r3, #2
 800338c:	2207      	movs	r2, #7
 800338e:	2106      	movs	r1, #6
 8003390:	f7ff fd7c 	bl	8002e8c <UI_Draw_Parmetr>
 8003394:	e01e      	b.n	80033d4 <Face_UI_Draw_Parameters_List+0x130>
		else
			UI_Draw_String("----",6,7,Direct_Display_MODE);
 8003396:	2300      	movs	r3, #0
 8003398:	2207      	movs	r2, #7
 800339a:	2106      	movs	r1, #6
 800339c:	483a      	ldr	r0, [pc, #232]	; (8003488 <Face_UI_Draw_Parameters_List+0x1e4>)
 800339e:	f7ff fd8d 	bl	8002ebc <UI_Draw_String>
 80033a2:	e017      	b.n	80033d4 <Face_UI_Draw_Parameters_List+0x130>
	}
	else{
		UI_Draw_String("----",6,5,Direct_Display_MODE);
 80033a4:	2300      	movs	r3, #0
 80033a6:	2205      	movs	r2, #5
 80033a8:	2106      	movs	r1, #6
 80033aa:	4837      	ldr	r0, [pc, #220]	; (8003488 <Face_UI_Draw_Parameters_List+0x1e4>)
 80033ac:	f7ff fd86 	bl	8002ebc <UI_Draw_String>
		UI_Draw_String("----",6,6,Direct_Display_MODE);
 80033b0:	2300      	movs	r3, #0
 80033b2:	2206      	movs	r2, #6
 80033b4:	2106      	movs	r1, #6
 80033b6:	4834      	ldr	r0, [pc, #208]	; (8003488 <Face_UI_Draw_Parameters_List+0x1e4>)
 80033b8:	f7ff fd80 	bl	8002ebc <UI_Draw_String>
		UI_Draw_String("----",1,7,Direct_Display_MODE);
 80033bc:	2300      	movs	r3, #0
 80033be:	2207      	movs	r2, #7
 80033c0:	2101      	movs	r1, #1
 80033c2:	4831      	ldr	r0, [pc, #196]	; (8003488 <Face_UI_Draw_Parameters_List+0x1e4>)
 80033c4:	f7ff fd7a 	bl	8002ebc <UI_Draw_String>
		UI_Draw_String("----",6,7,Direct_Display_MODE);
 80033c8:	2300      	movs	r3, #0
 80033ca:	2207      	movs	r2, #7
 80033cc:	2106      	movs	r1, #6
 80033ce:	482e      	ldr	r0, [pc, #184]	; (8003488 <Face_UI_Draw_Parameters_List+0x1e4>)
 80033d0:	f7ff fd74 	bl	8002ebc <UI_Draw_String>
	}

							//Draw Soldering_Heat_Gun Parameters
	UI_Draw_Parmetr(Soldering_Heat_Gun_Get_State(&Soldering_Heat_Gun), 17, 1, BOOL);
 80033d4:	482e      	ldr	r0, [pc, #184]	; (8003490 <Face_UI_Draw_Parameters_List+0x1ec>)
 80033d6:	f7fe ffd2 	bl	800237e <Soldering_Heat_Gun_Get_State>
 80033da:	4603      	mov	r3, r0
 80033dc:	4618      	mov	r0, r3
 80033de:	2303      	movs	r3, #3
 80033e0:	2201      	movs	r2, #1
 80033e2:	2111      	movs	r1, #17
 80033e4:	f7ff fd52 	bl	8002e8c <UI_Draw_Parmetr>
	UI_Draw_Parmetr(Soldering_Heat_Gun_Get_Temperature_Set_C(&Soldering_Heat_Gun), 17, 2, UINT16);
 80033e8:	4829      	ldr	r0, [pc, #164]	; (8003490 <Face_UI_Draw_Parameters_List+0x1ec>)
 80033ea:	f7fe ffe2 	bl	80023b2 <Soldering_Heat_Gun_Get_Temperature_Set_C>
 80033ee:	4603      	mov	r3, r0
 80033f0:	4618      	mov	r0, r3
 80033f2:	2302      	movs	r3, #2
 80033f4:	2202      	movs	r2, #2
 80033f6:	2111      	movs	r1, #17
 80033f8:	f7ff fd48 	bl	8002e8c <UI_Draw_Parmetr>
	if(Soldering_Heat_Gun_Get_State(&Soldering_Heat_Gun)!=Heat_Gun_OFF)
 80033fc:	4824      	ldr	r0, [pc, #144]	; (8003490 <Face_UI_Draw_Parameters_List+0x1ec>)
 80033fe:	f7fe ffbe 	bl	800237e <Soldering_Heat_Gun_Get_State>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00a      	beq.n	800341e <Face_UI_Draw_Parameters_List+0x17a>
		UI_Draw_Parmetr(Soldering_Heat_Gun_Get_Current_Temperature_C(&Soldering_Heat_Gun), 17, 3, UINT16);
 8003408:	4821      	ldr	r0, [pc, #132]	; (8003490 <Face_UI_Draw_Parameters_List+0x1ec>)
 800340a:	f7fe ffe0 	bl	80023ce <Soldering_Heat_Gun_Get_Current_Temperature_C>
 800340e:	4603      	mov	r3, r0
 8003410:	4618      	mov	r0, r3
 8003412:	2302      	movs	r3, #2
 8003414:	2203      	movs	r2, #3
 8003416:	2111      	movs	r1, #17
 8003418:	f7ff fd38 	bl	8002e8c <UI_Draw_Parmetr>
 800341c:	e005      	b.n	800342a <Face_UI_Draw_Parameters_List+0x186>
	else
		UI_Draw_String("----",17,3,Direct_Display_MODE);
 800341e:	2300      	movs	r3, #0
 8003420:	2203      	movs	r2, #3
 8003422:	2111      	movs	r1, #17
 8003424:	4818      	ldr	r0, [pc, #96]	; (8003488 <Face_UI_Draw_Parameters_List+0x1e4>)
 8003426:	f7ff fd49 	bl	8002ebc <UI_Draw_String>

							//Draw Soldering_Separator Parameters
	UI_Draw_Parmetr(Soldering_Separator_Get_State(&Soldering_Separator), 17, 5, BOOL);
 800342a:	481a      	ldr	r0, [pc, #104]	; (8003494 <Face_UI_Draw_Parameters_List+0x1f0>)
 800342c:	f7ff f968 	bl	8002700 <Soldering_Separator_Get_State>
 8003430:	4603      	mov	r3, r0
 8003432:	4618      	mov	r0, r3
 8003434:	2303      	movs	r3, #3
 8003436:	2205      	movs	r2, #5
 8003438:	2111      	movs	r1, #17
 800343a:	f7ff fd27 	bl	8002e8c <UI_Draw_Parmetr>
	UI_Draw_Parmetr(Soldering_Separator_Get_Temperature_Set_C(&Soldering_Separator), 17, 6, UINT16);
 800343e:	4815      	ldr	r0, [pc, #84]	; (8003494 <Face_UI_Draw_Parameters_List+0x1f0>)
 8003440:	f7ff f96a 	bl	8002718 <Soldering_Separator_Get_Temperature_Set_C>
 8003444:	4603      	mov	r3, r0
 8003446:	4618      	mov	r0, r3
 8003448:	2302      	movs	r3, #2
 800344a:	2206      	movs	r2, #6
 800344c:	2111      	movs	r1, #17
 800344e:	f7ff fd1d 	bl	8002e8c <UI_Draw_Parmetr>
	if(Soldering_Separator_Get_State(&Soldering_Separator)==Separator_ON)
 8003452:	4810      	ldr	r0, [pc, #64]	; (8003494 <Face_UI_Draw_Parameters_List+0x1f0>)
 8003454:	f7ff f954 	bl	8002700 <Soldering_Separator_Get_State>
 8003458:	4603      	mov	r3, r0
 800345a:	2b01      	cmp	r3, #1
 800345c:	d10a      	bne.n	8003474 <Face_UI_Draw_Parameters_List+0x1d0>
		UI_Draw_Parmetr(Soldering_Separator_Get_Current_Temperature_C(&Soldering_Separator), 17, 7, UINT16);
 800345e:	480d      	ldr	r0, [pc, #52]	; (8003494 <Face_UI_Draw_Parameters_List+0x1f0>)
 8003460:	f7ff f968 	bl	8002734 <Soldering_Separator_Get_Current_Temperature_C>
 8003464:	4603      	mov	r3, r0
 8003466:	4618      	mov	r0, r3
 8003468:	2302      	movs	r3, #2
 800346a:	2207      	movs	r2, #7
 800346c:	2111      	movs	r1, #17
 800346e:	f7ff fd0d 	bl	8002e8c <UI_Draw_Parmetr>
	else
		UI_Draw_String("----",17,7,Direct_Display_MODE);

}
 8003472:	e005      	b.n	8003480 <Face_UI_Draw_Parameters_List+0x1dc>
		UI_Draw_String("----",17,7,Direct_Display_MODE);
 8003474:	2300      	movs	r3, #0
 8003476:	2207      	movs	r2, #7
 8003478:	2111      	movs	r1, #17
 800347a:	4803      	ldr	r0, [pc, #12]	; (8003488 <Face_UI_Draw_Parameters_List+0x1e4>)
 800347c:	f7ff fd1e 	bl	8002ebc <UI_Draw_String>
}
 8003480:	bf00      	nop
 8003482:	bd80      	pop	{r7, pc}
 8003484:	20000568 	.word	0x20000568
 8003488:	0800986c 	.word	0x0800986c
 800348c:	20000738 	.word	0x20000738
 8003490:	20000614 	.word	0x20000614
 8003494:	200006b0 	.word	0x200006b0

08003498 <Get_Button_State>:
//---------------------------------------------------------------------------------Button_Handler
void Get_Button_State(struct Button_Vector *Button_Vector, struct Button* Full_Power_Button){
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
	/**
	 * //Work with buttons buffers and set modes for all part of soldering station witch ocure
	 */

	struct Button_Vector *now=Button_Vector;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	60fb      	str	r3, [r7, #12]
	do{
		if(Button_Get_Event_State(now->Button)){	//Сheck the current button for a state change
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7fd fbed 	bl	8000c8a <Button_Get_Event_State>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f000 809f 	beq.w	80035f6 <Get_Button_State+0x15e>
			switch(now->Button->ID){				//Identify the button by ID
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	2b06      	cmp	r3, #6
 80034c0:	f200 8099 	bhi.w	80035f6 <Get_Button_State+0x15e>
 80034c4:	a201      	add	r2, pc, #4	; (adr r2, 80034cc <Get_Button_State+0x34>)
 80034c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ca:	bf00      	nop
 80034cc:	08003555 	.word	0x08003555
 80034d0:	08003579 	.word	0x08003579
 80034d4:	0800359d 	.word	0x0800359d
 80034d8:	080034e9 	.word	0x080034e9
 80034dc:	0800350d 	.word	0x0800350d
 80034e0:	08003531 	.word	0x08003531
 80034e4:	080035c1 	.word	0x080035c1
				case Solder_Iron_Set_Preset2_Button_ID:
					if((Button_Get_Pin_State(now->Button)==GPIO_PIN_RESET)&&(Solder_Iron_Get_State(&Soldering_Iron)==Soldering_Iron_ON)){	//check for a falling edge event
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7fd fbb9 	bl	8000c64 <Button_Get_Pin_State>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d173      	bne.n	80035e0 <Get_Button_State+0x148>
 80034f8:	4851      	ldr	r0, [pc, #324]	; (8003640 <Get_Button_State+0x1a8>)
 80034fa:	f7fe fd66 	bl	8001fca <Solder_Iron_Get_State>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b01      	cmp	r3, #1
 8003502:	d16d      	bne.n	80035e0 <Get_Button_State+0x148>
						Solder_Iron_Set_Preset2_Temperature(&Soldering_Iron);	//Set temperature Preset
 8003504:	484e      	ldr	r0, [pc, #312]	; (8003640 <Get_Button_State+0x1a8>)
 8003506:	f7fe fd07 	bl	8001f18 <Solder_Iron_Set_Preset2_Temperature>
					}
					break;
 800350a:	e069      	b.n	80035e0 <Get_Button_State+0x148>
				case Soldering_Heat_Gun_Set_Preset2_Button_ID:
					if((Button_Get_Pin_State(now->Button)==GPIO_PIN_RESET)&&(Soldering_Heat_Gun_Get_State(&Soldering_Heat_Gun)!=Heat_Gun_OFF)){
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	4618      	mov	r0, r3
 8003512:	f7fd fba7 	bl	8000c64 <Button_Get_Pin_State>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d163      	bne.n	80035e4 <Get_Button_State+0x14c>
 800351c:	4849      	ldr	r0, [pc, #292]	; (8003644 <Get_Button_State+0x1ac>)
 800351e:	f7fe ff2e 	bl	800237e <Soldering_Heat_Gun_Get_State>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d05d      	beq.n	80035e4 <Get_Button_State+0x14c>
						Soldering_Heat_Gun_Set_Preset2_Temperature(&Soldering_Heat_Gun);
 8003528:	4846      	ldr	r0, [pc, #280]	; (8003644 <Get_Button_State+0x1ac>)
 800352a:	f7fe fefa 	bl	8002322 <Soldering_Heat_Gun_Set_Preset2_Temperature>
					}
					break;
 800352e:	e059      	b.n	80035e4 <Get_Button_State+0x14c>
				case Soldering_Separator_Set_Preset2_Button_ID:
					if((Button_Get_Pin_State(now->Button)==GPIO_PIN_RESET)&&(Soldering_Separator_Get_State(&Soldering_Separator)==Separator_ON))
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	4618      	mov	r0, r3
 8003536:	f7fd fb95 	bl	8000c64 <Button_Get_Pin_State>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d153      	bne.n	80035e8 <Get_Button_State+0x150>
 8003540:	4841      	ldr	r0, [pc, #260]	; (8003648 <Get_Button_State+0x1b0>)
 8003542:	f7ff f8dd 	bl	8002700 <Soldering_Separator_Get_State>
 8003546:	4603      	mov	r3, r0
 8003548:	2b01      	cmp	r3, #1
 800354a:	d14d      	bne.n	80035e8 <Get_Button_State+0x150>
						Soldering_Separator_Set_Preset2_Temperature(&Soldering_Separator);
 800354c:	483e      	ldr	r0, [pc, #248]	; (8003648 <Get_Button_State+0x1b0>)
 800354e:	f7ff f8b9 	bl	80026c4 <Soldering_Separator_Set_Preset2_Temperature>
					break;
 8003552:	e049      	b.n	80035e8 <Get_Button_State+0x150>
				case Solder_Iron_Set_Preset1_Button_ID:
					if((Button_Get_Pin_State(now->Button)==GPIO_PIN_RESET)&&(Solder_Iron_Get_State(&Soldering_Iron)==Soldering_Iron_ON)){
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	4618      	mov	r0, r3
 800355a:	f7fd fb83 	bl	8000c64 <Button_Get_Pin_State>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d143      	bne.n	80035ec <Get_Button_State+0x154>
 8003564:	4836      	ldr	r0, [pc, #216]	; (8003640 <Get_Button_State+0x1a8>)
 8003566:	f7fe fd30 	bl	8001fca <Solder_Iron_Get_State>
 800356a:	4603      	mov	r3, r0
 800356c:	2b01      	cmp	r3, #1
 800356e:	d13d      	bne.n	80035ec <Get_Button_State+0x154>
						Solder_Iron_Set_Preset1_Temperature(&Soldering_Iron);
 8003570:	4833      	ldr	r0, [pc, #204]	; (8003640 <Get_Button_State+0x1a8>)
 8003572:	f7fe fcc2 	bl	8001efa <Solder_Iron_Set_Preset1_Temperature>
					}
					break;
 8003576:	e039      	b.n	80035ec <Get_Button_State+0x154>
				case Soldering_Heat_Gun_Set_Preset1_Button_ID:
					if((Button_Get_Pin_State(now->Button)==GPIO_PIN_RESET)&&(Soldering_Heat_Gun_Get_State(&Soldering_Heat_Gun)!=Heat_Gun_OFF)){
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	4618      	mov	r0, r3
 800357e:	f7fd fb71 	bl	8000c64 <Button_Get_Pin_State>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d133      	bne.n	80035f0 <Get_Button_State+0x158>
 8003588:	482e      	ldr	r0, [pc, #184]	; (8003644 <Get_Button_State+0x1ac>)
 800358a:	f7fe fef8 	bl	800237e <Soldering_Heat_Gun_Get_State>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d02d      	beq.n	80035f0 <Get_Button_State+0x158>
						Soldering_Heat_Gun_Set_Preset1_Temperature(&Soldering_Heat_Gun);
 8003594:	482b      	ldr	r0, [pc, #172]	; (8003644 <Get_Button_State+0x1ac>)
 8003596:	f7fe feb8 	bl	800230a <Soldering_Heat_Gun_Set_Preset1_Temperature>
					}
					break;
 800359a:	e029      	b.n	80035f0 <Get_Button_State+0x158>
				case Soldering_Separator_Set_Preset1_Button_ID:
					if((Button_Get_Pin_State(now->Button)==GPIO_PIN_RESET)&&(Soldering_Separator_Get_State(&Soldering_Separator)==Separator_ON)){
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7fd fb5f 	bl	8000c64 <Button_Get_Pin_State>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d123      	bne.n	80035f4 <Get_Button_State+0x15c>
 80035ac:	4826      	ldr	r0, [pc, #152]	; (8003648 <Get_Button_State+0x1b0>)
 80035ae:	f7ff f8a7 	bl	8002700 <Soldering_Separator_Get_State>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d11d      	bne.n	80035f4 <Get_Button_State+0x15c>
						Soldering_Separator_Set_Preset1_Temperature(&Soldering_Separator);
 80035b8:	4823      	ldr	r0, [pc, #140]	; (8003648 <Get_Button_State+0x1b0>)
 80035ba:	f7ff f877 	bl	80026ac <Soldering_Separator_Set_Preset1_Temperature>
					}
					break;
 80035be:	e019      	b.n	80035f4 <Get_Button_State+0x15c>
				case Button_Gerkon_ID:										// if Gerkon
					if(Button_Get_Pin_State(now->Button)==GPIO_PIN_RESET)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7fd fb4d 	bl	8000c64 <Button_Get_Pin_State>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d103      	bne.n	80035d8 <Get_Button_State+0x140>
						Soldering_Heat_Gun_OFF(&Soldering_Heat_Gun);
 80035d0:	481c      	ldr	r0, [pc, #112]	; (8003644 <Get_Button_State+0x1ac>)
 80035d2:	f7fe fdf9 	bl	80021c8 <Soldering_Heat_Gun_OFF>
					else
						Soldering_Heat_Gun_ON(&Soldering_Heat_Gun);

					break;
 80035d6:	e00e      	b.n	80035f6 <Get_Button_State+0x15e>
						Soldering_Heat_Gun_ON(&Soldering_Heat_Gun);
 80035d8:	481a      	ldr	r0, [pc, #104]	; (8003644 <Get_Button_State+0x1ac>)
 80035da:	f7fe fdc3 	bl	8002164 <Soldering_Heat_Gun_ON>
					break;
 80035de:	e00a      	b.n	80035f6 <Get_Button_State+0x15e>
					break;
 80035e0:	bf00      	nop
 80035e2:	e008      	b.n	80035f6 <Get_Button_State+0x15e>
					break;
 80035e4:	bf00      	nop
 80035e6:	e006      	b.n	80035f6 <Get_Button_State+0x15e>
					break;
 80035e8:	bf00      	nop
 80035ea:	e004      	b.n	80035f6 <Get_Button_State+0x15e>
					break;
 80035ec:	bf00      	nop
 80035ee:	e002      	b.n	80035f6 <Get_Button_State+0x15e>
					break;
 80035f0:	bf00      	nop
 80035f2:	e000      	b.n	80035f6 <Get_Button_State+0x15e>
					break;
 80035f4:	bf00      	nop

			}
		}
		now=now->next;			//Go to the next button
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	60fb      	str	r3, [r7, #12]
	}while(now!=NULL);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f47f af51 	bne.w	80034a6 <Get_Button_State+0xe>



	if(Solder_Iron_Get_State(&Soldering_Iron)==Soldering_Iron_ON){			//Check Full_Power_Button for a state change if Soldering_Iron is Turn on
 8003604:	480e      	ldr	r0, [pc, #56]	; (8003640 <Get_Button_State+0x1a8>)
 8003606:	f7fe fce0 	bl	8001fca <Solder_Iron_Get_State>
 800360a:	4603      	mov	r3, r0
 800360c:	2b01      	cmp	r3, #1
 800360e:	d112      	bne.n	8003636 <Get_Button_State+0x19e>
		if(Button_Get_Event_State(Full_Power_Button)){
 8003610:	6838      	ldr	r0, [r7, #0]
 8003612:	f7fd fb3a 	bl	8000c8a <Button_Get_Event_State>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00c      	beq.n	8003636 <Get_Button_State+0x19e>
			if(Button_Get_Pin_State(Full_Power_Button)==GPIO_PIN_RESET)
 800361c:	6838      	ldr	r0, [r7, #0]
 800361e:	f7fd fb21 	bl	8000c64 <Button_Get_Pin_State>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d103      	bne.n	8003630 <Get_Button_State+0x198>
				Solder_Iron_Full_Power_ON(&Soldering_Iron);
 8003628:	4805      	ldr	r0, [pc, #20]	; (8003640 <Get_Button_State+0x1a8>)
 800362a:	f7fe fc96 	bl	8001f5a <Solder_Iron_Full_Power_ON>
			else
				Solder_Iron_Full_Power_OFF(&Soldering_Iron);
		}
	}
}
 800362e:	e002      	b.n	8003636 <Get_Button_State+0x19e>
				Solder_Iron_Full_Power_OFF(&Soldering_Iron);
 8003630:	4803      	ldr	r0, [pc, #12]	; (8003640 <Get_Button_State+0x1a8>)
 8003632:	f7fe fca8 	bl	8001f86 <Solder_Iron_Full_Power_OFF>
}
 8003636:	bf00      	nop
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	20000568 	.word	0x20000568
 8003644:	20000614 	.word	0x20000614
 8003648:	200006b0 	.word	0x200006b0

0800364c <Face_UI_it>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void Face_UI_it(struct Encoder *Encoder_P1, struct Encoder *Encoder_P2, struct Button_Vector *Button_Vector){
 800364c:	b580      	push	{r7, lr}
 800364e:	b088      	sub	sp, #32
 8003650:	af02      	add	r7, sp, #8
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
	 * Elements of station such ass Solder_Irin can work only when MC transfer control to this function
	 */
	enum{
		Interface_Contoll_Soldering_Heat_Gun,
		Interface_Contoll_Soldering_Separator
	}Interface_Contoll=Interface_Contoll_Soldering_Heat_Gun;			//this parameter contain witch interface is active now
 8003658:	2300      	movs	r3, #0
 800365a:	75fb      	strb	r3, [r7, #23]


	Soldering_Station_Temperature_Presets_Corection_Converting(&Soldering_Iron, &Soldering_Heat_Gun, &Soldering_Separator);	//Transfer Thermal correction Celsius to ADC's Levels
 800365c:	4a84      	ldr	r2, [pc, #528]	; (8003870 <Face_UI_it+0x224>)
 800365e:	4985      	ldr	r1, [pc, #532]	; (8003874 <Face_UI_it+0x228>)
 8003660:	4885      	ldr	r0, [pc, #532]	; (8003878 <Face_UI_it+0x22c>)
 8003662:	f7ff f934 	bl	80028ce <Soldering_Station_Temperature_Presets_Corection_Converting>
																																// It needs because Thermal correction with PID work with ADC's Levels
	Face_UI_Draw_Name_List();													// Clear display and draw Name of parameters on the display
 8003666:	f7ff fd97 	bl	8003198 <Face_UI_Draw_Name_List>

	UI_Encoder_Reset_Button_State(Encoder_P2);
 800366a:	68b8      	ldr	r0, [r7, #8]
 800366c:	f7ff fd89 	bl	8003182 <UI_Encoder_Reset_Button_State>
	UI_Encoder_Reset_Button_State(Encoder_P1);									//Clear encoders
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f7ff fd86 	bl	8003182 <UI_Encoder_Reset_Button_State>

	do{																			//Start work cycle

		if(Encoder_Get_Button_State(Encoder_P1)==Encoder_Button_long){			//Select which element will be control by Encoder
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f7fd fb39 	bl	8000cee <Encoder_Get_Button_State>
 800367c:	4603      	mov	r3, r0
 800367e:	2b03      	cmp	r3, #3
 8003680:	d122      	bne.n	80036c8 <Face_UI_it+0x7c>
			UI_Encoder_Reset_Button_State(Encoder_P1);							//Clear Encoder Buffer
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f7ff fd7d 	bl	8003182 <UI_Encoder_Reset_Button_State>
			if(Interface_Contoll==Interface_Contoll_Soldering_Heat_Gun){		// Soldering Separator
 8003688:	7dfb      	ldrb	r3, [r7, #23]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10e      	bne.n	80036ac <Face_UI_it+0x60>
				Interface_Contoll=Interface_Contoll_Soldering_Separator;
 800368e:	2301      	movs	r3, #1
 8003690:	75fb      	strb	r3, [r7, #23]
				UI_Draw_String(" SoldFAN ", 11, 0, Direct_Display_MODE);		//Redraw part of name interface ton mark witch part are selected
 8003692:	2300      	movs	r3, #0
 8003694:	2200      	movs	r2, #0
 8003696:	210b      	movs	r1, #11
 8003698:	4878      	ldr	r0, [pc, #480]	; (800387c <Face_UI_it+0x230>)
 800369a:	f7ff fc0f 	bl	8002ebc <UI_Draw_String>
				UI_Draw_String(" Separator", 11, 4, Inverse_Display_MODE);
 800369e:	2301      	movs	r3, #1
 80036a0:	2204      	movs	r2, #4
 80036a2:	210b      	movs	r1, #11
 80036a4:	4876      	ldr	r0, [pc, #472]	; (8003880 <Face_UI_it+0x234>)
 80036a6:	f7ff fc09 	bl	8002ebc <UI_Draw_String>
 80036aa:	e00d      	b.n	80036c8 <Face_UI_it+0x7c>
			}
			else{																//Soldering heat gun
				Interface_Contoll=Interface_Contoll_Soldering_Heat_Gun;
 80036ac:	2300      	movs	r3, #0
 80036ae:	75fb      	strb	r3, [r7, #23]
				UI_Draw_String(" SoldFAN ", 11, 0, Inverse_Display_MODE);		//Redraw part of name interface ton mark witch part are select
 80036b0:	2301      	movs	r3, #1
 80036b2:	2200      	movs	r2, #0
 80036b4:	210b      	movs	r1, #11
 80036b6:	4871      	ldr	r0, [pc, #452]	; (800387c <Face_UI_it+0x230>)
 80036b8:	f7ff fc00 	bl	8002ebc <UI_Draw_String>
				UI_Draw_String(" Separator", 11, 4, Direct_Display_MODE);
 80036bc:	2300      	movs	r3, #0
 80036be:	2204      	movs	r2, #4
 80036c0:	210b      	movs	r1, #11
 80036c2:	486f      	ldr	r0, [pc, #444]	; (8003880 <Face_UI_it+0x234>)
 80036c4:	f7ff fbfa 	bl	8002ebc <UI_Draw_String>
			}
		}

		Get_Button_State(Button_Vector, &Soldering_Iron.Full_Power_Button);		//Work with buttons buffers
 80036c8:	496e      	ldr	r1, [pc, #440]	; (8003884 <Face_UI_it+0x238>)
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f7ff fee4 	bl	8003498 <Get_Button_State>

		if(Solder_Iron_Get_State(&Soldering_Iron)==Soldering_Iron_ON){			//Change Solder_Iron Manual Temperature if Solder_Iron is turn ON
 80036d0:	4869      	ldr	r0, [pc, #420]	; (8003878 <Face_UI_it+0x22c>)
 80036d2:	f7fe fc7a 	bl	8001fca <Solder_Iron_Get_State>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d118      	bne.n	800370e <Face_UI_it+0xc2>
			Solder_Iron_Set_Manual_Preset_Temperature_C(
					(uint16_t)UI_Change_Value(Soldering_Iron_Get_Manual_Preset_Temperature_C(&Soldering_Iron), 5, UINT16, Soldering_Iron_MIN_Manual_Preset_Temperature_C, MAX_ADC_Value, Encoder_P2),
 80036dc:	4866      	ldr	r0, [pc, #408]	; (8003878 <Face_UI_it+0x22c>)
 80036de:	f7fe fc80 	bl	8001fe2 <Soldering_Iron_Get_Manual_Preset_Temperature_C>
 80036e2:	4603      	mov	r3, r0
 80036e4:	4618      	mov	r0, r3
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	9301      	str	r3, [sp, #4]
 80036ea:	f640 63d8 	movw	r3, #3800	; 0xed8
 80036ee:	9300      	str	r3, [sp, #0]
 80036f0:	2364      	movs	r3, #100	; 0x64
 80036f2:	2202      	movs	r2, #2
 80036f4:	2105      	movs	r1, #5
 80036f6:	f7ff fcf1 	bl	80030dc <UI_Change_Value>
 80036fa:	4603      	mov	r3, r0
			Solder_Iron_Set_Manual_Preset_Temperature_C(
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	495e      	ldr	r1, [pc, #376]	; (8003878 <Face_UI_it+0x22c>)
 8003700:	4618      	mov	r0, r3
 8003702:	f7fe fc18 	bl	8001f36 <Solder_Iron_Set_Manual_Preset_Temperature_C>
					&Soldering_Iron);
			Solder_Iron_Set_Manual_Temperature(&Soldering_Iron);
 8003706:	485c      	ldr	r0, [pc, #368]	; (8003878 <Face_UI_it+0x22c>)
 8003708:	f7fe fbdd 	bl	8001ec6 <Solder_Iron_Set_Manual_Temperature>
 800370c:	e002      	b.n	8003714 <Face_UI_it+0xc8>
		}
		else
			UI_Encoder_Reset_Rotary_Switch_Buffer(Encoder_P2);					//Else clear Encoder Buffer
 800370e:	68b8      	ldr	r0, [r7, #8]
 8003710:	f7ff fd2c 	bl	800316c <UI_Encoder_Reset_Rotary_Switch_Buffer>


		if(Interface_Contoll==Interface_Contoll_Soldering_Heat_Gun){				//Soldering_Heat_Gun manual temperature changing
 8003714:	7dfb      	ldrb	r3, [r7, #23]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d122      	bne.n	8003760 <Face_UI_it+0x114>
			if(Soldering_Heat_Gun_Get_State(&Soldering_Heat_Gun)!=Heat_Gun_OFF){	//Change Soldering_Heat_Gun Temperature if Soldering_Heat_Gun is turn ON
 800371a:	4856      	ldr	r0, [pc, #344]	; (8003874 <Face_UI_it+0x228>)
 800371c:	f7fe fe2f 	bl	800237e <Soldering_Heat_Gun_Get_State>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d018      	beq.n	8003758 <Face_UI_it+0x10c>
				Soldering_Heat_Gun_Set_Manual_Preset_Temperature_C(
						(uint16_t)UI_Change_Value(Soldering_Heat_Gun_Get_Manual_Preset_Temperature_C(&Soldering_Heat_Gun), 5, UINT16, Soldering_Heat_Gun_MIN_Manual_Preset_Temperature_C, MAX_ADC_Value, Encoder_P1),
 8003726:	4853      	ldr	r0, [pc, #332]	; (8003874 <Face_UI_it+0x228>)
 8003728:	f7fe fe35 	bl	8002396 <Soldering_Heat_Gun_Get_Manual_Preset_Temperature_C>
 800372c:	4603      	mov	r3, r0
 800372e:	4618      	mov	r0, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	9301      	str	r3, [sp, #4]
 8003734:	f640 63d8 	movw	r3, #3800	; 0xed8
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	2332      	movs	r3, #50	; 0x32
 800373c:	2202      	movs	r2, #2
 800373e:	2105      	movs	r1, #5
 8003740:	f7ff fccc 	bl	80030dc <UI_Change_Value>
 8003744:	4603      	mov	r3, r0
				Soldering_Heat_Gun_Set_Manual_Preset_Temperature_C(
 8003746:	b29b      	uxth	r3, r3
 8003748:	494a      	ldr	r1, [pc, #296]	; (8003874 <Face_UI_it+0x228>)
 800374a:	4618      	mov	r0, r3
 800374c:	f7fe fdf5 	bl	800233a <Soldering_Heat_Gun_Set_Manual_Preset_Temperature_C>
						&Soldering_Heat_Gun);
				Soldering_Heat_Gun_Set_Manual_Temperature(&Soldering_Heat_Gun);
 8003750:	4848      	ldr	r0, [pc, #288]	; (8003874 <Face_UI_it+0x228>)
 8003752:	f7fe fdc3 	bl	80022dc <Soldering_Heat_Gun_Set_Manual_Temperature>
 8003756:	e025      	b.n	80037a4 <Face_UI_it+0x158>
			}
			else
				UI_Encoder_Reset_Rotary_Switch_Buffer(Encoder_P1);				//Else clear Encoder Buffer
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	f7ff fd07 	bl	800316c <UI_Encoder_Reset_Rotary_Switch_Buffer>
 800375e:	e021      	b.n	80037a4 <Face_UI_it+0x158>
		}
		else{																		//Soldering_Separator manual temperature changing
			if(Soldering_Separator_Get_State(&Soldering_Separator)==Separator_ON){	//Change Soldering_Separator Temperature if Soldering_Separator is turn ON
 8003760:	4843      	ldr	r0, [pc, #268]	; (8003870 <Face_UI_it+0x224>)
 8003762:	f7fe ffcd 	bl	8002700 <Soldering_Separator_Get_State>
 8003766:	4603      	mov	r3, r0
 8003768:	2b01      	cmp	r3, #1
 800376a:	d118      	bne.n	800379e <Face_UI_it+0x152>
				Soldering_Separator_Set_Manual_Preset_Temperature_C(
						(uint16_t)UI_Change_Value(Soldering_Separator_Get_Manual_Preset_Temperature_C(&Soldering_Separator), 5, UINT16, Soldering_Separator_MIN_Manual_Preset_Temperature_C, MAX_ADC_Value, Encoder_P1),
 800376c:	4840      	ldr	r0, [pc, #256]	; (8003870 <Face_UI_it+0x224>)
 800376e:	f7fe ffef 	bl	8002750 <Soldering_Separator_Get_Manual_Preset_Temperature_C>
 8003772:	4603      	mov	r3, r0
 8003774:	4618      	mov	r0, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	9301      	str	r3, [sp, #4]
 800377a:	f640 63d8 	movw	r3, #3800	; 0xed8
 800377e:	9300      	str	r3, [sp, #0]
 8003780:	2332      	movs	r3, #50	; 0x32
 8003782:	2202      	movs	r2, #2
 8003784:	2105      	movs	r1, #5
 8003786:	f7ff fca9 	bl	80030dc <UI_Change_Value>
 800378a:	4603      	mov	r3, r0
				Soldering_Separator_Set_Manual_Preset_Temperature_C(
 800378c:	b29b      	uxth	r3, r3
 800378e:	4938      	ldr	r1, [pc, #224]	; (8003870 <Face_UI_it+0x224>)
 8003790:	4618      	mov	r0, r3
 8003792:	f7fe ffa3 	bl	80026dc <Soldering_Separator_Set_Manual_Preset_Temperature_C>
						&Soldering_Separator);
				Soldering_Separator_Set_Manual_Temperature(&Soldering_Separator);
 8003796:	4836      	ldr	r0, [pc, #216]	; (8003870 <Face_UI_it+0x224>)
 8003798:	f7fe ff71 	bl	800267e <Soldering_Separator_Set_Manual_Temperature>
 800379c:	e002      	b.n	80037a4 <Face_UI_it+0x158>
			}
			else
				UI_Encoder_Reset_Rotary_Switch_Buffer(Encoder_P1);					//Else clear Encoder Buffer
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f7ff fce4 	bl	800316c <UI_Encoder_Reset_Rotary_Switch_Buffer>
		}


		if(Encoder_Get_Button_State(Encoder_P2)==Encoder_Button_Short){                 //Solder_Iron_ON/OFF
 80037a4:	68b8      	ldr	r0, [r7, #8]
 80037a6:	f7fd faa2 	bl	8000cee <Encoder_Get_Button_State>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d10f      	bne.n	80037d0 <Face_UI_it+0x184>
			UI_Encoder_Reset_Button_State(Encoder_P2);									//Clear Encoder Buffer
 80037b0:	68b8      	ldr	r0, [r7, #8]
 80037b2:	f7ff fce6 	bl	8003182 <UI_Encoder_Reset_Button_State>
			if(Solder_Iron_Get_State(&Soldering_Iron)==Soldering_Iron_OFF){				//Switch Solder_Iron state
 80037b6:	4830      	ldr	r0, [pc, #192]	; (8003878 <Face_UI_it+0x22c>)
 80037b8:	f7fe fc07 	bl	8001fca <Solder_Iron_Get_State>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d103      	bne.n	80037ca <Face_UI_it+0x17e>
				Solder_Iron_ON(&Soldering_Iron);
 80037c2:	482d      	ldr	r0, [pc, #180]	; (8003878 <Face_UI_it+0x22c>)
 80037c4:	f7fe fb00 	bl	8001dc8 <Solder_Iron_ON>
 80037c8:	e002      	b.n	80037d0 <Face_UI_it+0x184>
			}else{
				Solder_Iron_OFF(&Soldering_Iron);
 80037ca:	482b      	ldr	r0, [pc, #172]	; (8003878 <Face_UI_it+0x22c>)
 80037cc:	f7fe fb12 	bl	8001df4 <Solder_Iron_OFF>
			}
		}

		if(Encoder_Get_Button_State(Encoder_P1)==Encoder_Button_Short&&Interface_Contoll==Interface_Contoll_Soldering_Heat_Gun){			//Soldering_Heat_Gun_ON/OFF
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	f7fd fa8c 	bl	8000cee <Encoder_Get_Button_State>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d113      	bne.n	8003804 <Face_UI_it+0x1b8>
 80037dc:	7dfb      	ldrb	r3, [r7, #23]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d110      	bne.n	8003804 <Face_UI_it+0x1b8>
			UI_Encoder_Reset_Button_State(Encoder_P1);								//Clear Encoder Buffer
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f7ff fccd 	bl	8003182 <UI_Encoder_Reset_Button_State>
			if(Soldering_Heat_Gun_Get_State(&Soldering_Heat_Gun)!=Heat_Gun_ON)		//Switch Soldering_Heat_Gun state
 80037e8:	4822      	ldr	r0, [pc, #136]	; (8003874 <Face_UI_it+0x228>)
 80037ea:	f7fe fdc8 	bl	800237e <Soldering_Heat_Gun_Get_State>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d003      	beq.n	80037fc <Face_UI_it+0x1b0>
				Soldering_Heat_Gun_ON(&Soldering_Heat_Gun);
 80037f4:	481f      	ldr	r0, [pc, #124]	; (8003874 <Face_UI_it+0x228>)
 80037f6:	f7fe fcb5 	bl	8002164 <Soldering_Heat_Gun_ON>
			if(Soldering_Heat_Gun_Get_State(&Soldering_Heat_Gun)!=Heat_Gun_ON)		//Switch Soldering_Heat_Gun state
 80037fa:	e01c      	b.n	8003836 <Face_UI_it+0x1ea>
			else
				Soldering_Heat_Gun_OFF(&Soldering_Heat_Gun);
 80037fc:	481d      	ldr	r0, [pc, #116]	; (8003874 <Face_UI_it+0x228>)
 80037fe:	f7fe fce3 	bl	80021c8 <Soldering_Heat_Gun_OFF>
			if(Soldering_Heat_Gun_Get_State(&Soldering_Heat_Gun)!=Heat_Gun_ON)		//Switch Soldering_Heat_Gun state
 8003802:	e018      	b.n	8003836 <Face_UI_it+0x1ea>
		}
		else if(Encoder_Get_Button_State(Encoder_P1)==Encoder_Button_Short&&Interface_Contoll==Interface_Contoll_Soldering_Separator){		//Soldering_Separator_ON/OFF
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f7fd fa72 	bl	8000cee <Encoder_Get_Button_State>
 800380a:	4603      	mov	r3, r0
 800380c:	2b02      	cmp	r3, #2
 800380e:	d112      	bne.n	8003836 <Face_UI_it+0x1ea>
 8003810:	7dfb      	ldrb	r3, [r7, #23]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d10f      	bne.n	8003836 <Face_UI_it+0x1ea>
			UI_Encoder_Reset_Button_State(Encoder_P1);								//Clear Encoder Buffer
 8003816:	68f8      	ldr	r0, [r7, #12]
 8003818:	f7ff fcb3 	bl	8003182 <UI_Encoder_Reset_Button_State>
				if(Soldering_Separator_Get_State(&Soldering_Separator)!=Separator_ON)
 800381c:	4814      	ldr	r0, [pc, #80]	; (8003870 <Face_UI_it+0x224>)
 800381e:	f7fe ff6f 	bl	8002700 <Soldering_Separator_Get_State>
 8003822:	4603      	mov	r3, r0
 8003824:	2b01      	cmp	r3, #1
 8003826:	d003      	beq.n	8003830 <Face_UI_it+0x1e4>
					Soldering_Separator_ON(&Soldering_Separator);
 8003828:	4811      	ldr	r0, [pc, #68]	; (8003870 <Face_UI_it+0x224>)
 800382a:	f7fe fec3 	bl	80025b4 <Soldering_Separator_ON>
 800382e:	e002      	b.n	8003836 <Face_UI_it+0x1ea>
				else
					Soldering_Separator_OFF(&Soldering_Separator);
 8003830:	480f      	ldr	r0, [pc, #60]	; (8003870 <Face_UI_it+0x224>)
 8003832:	f7fe fedd 	bl	80025f0 <Soldering_Separator_OFF>
		}
		Face_UI_Draw_Parameters_List();
 8003836:	f7ff fd35 	bl	80032a4 <Face_UI_Draw_Parameters_List>

	}while(Encoder_Get_Button_State(Encoder_P2)!=Encoder_Button_long); //Exit from Face_Ui
 800383a:	68b8      	ldr	r0, [r7, #8]
 800383c:	f7fd fa57 	bl	8000cee <Encoder_Get_Button_State>
 8003840:	4603      	mov	r3, r0
 8003842:	2b03      	cmp	r3, #3
 8003844:	f47f af17 	bne.w	8003676 <Face_UI_it+0x2a>

	Solder_Iron_OFF(&Soldering_Iron);				//Turn OFF ALL Devices
 8003848:	480b      	ldr	r0, [pc, #44]	; (8003878 <Face_UI_it+0x22c>)
 800384a:	f7fe fad3 	bl	8001df4 <Solder_Iron_OFF>
	Soldering_Heat_Gun_OFF(&Soldering_Heat_Gun);
 800384e:	4809      	ldr	r0, [pc, #36]	; (8003874 <Face_UI_it+0x228>)
 8003850:	f7fe fcba 	bl	80021c8 <Soldering_Heat_Gun_OFF>
	Soldering_Separator_OFF(&Soldering_Separator);
 8003854:	4806      	ldr	r0, [pc, #24]	; (8003870 <Face_UI_it+0x224>)
 8003856:	f7fe fecb 	bl	80025f0 <Soldering_Separator_OFF>

	UI_Encoder_Reset_Button_State(Encoder_P2);		//Reset Encoders buffer state
 800385a:	68b8      	ldr	r0, [r7, #8]
 800385c:	f7ff fc91 	bl	8003182 <UI_Encoder_Reset_Button_State>
	UI_Encoder_Reset_Button_State(Encoder_P1);
 8003860:	68f8      	ldr	r0, [r7, #12]
 8003862:	f7ff fc8e 	bl	8003182 <UI_Encoder_Reset_Button_State>
}
 8003866:	bf00      	nop
 8003868:	3718      	adds	r7, #24
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	200006b0 	.word	0x200006b0
 8003874:	20000614 	.word	0x20000614
 8003878:	20000568 	.word	0x20000568
 800387c:	08009854 	.word	0x08009854
 8003880:	08009860 	.word	0x08009860
 8003884:	200005e4 	.word	0x200005e4

08003888 <Menu_List_Element_Draw>:
#include "UI_Menu.h"

//--------------------------------------------------------------------------------------------------------------------------------------------------------
void Menu_List_Element_Draw(struct Menu_List_Element_Vector *self, uint8_t y){
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	460b      	mov	r3, r1
 8003892:	70fb      	strb	r3, [r7, #3]
	/**
	 * Draw line with name and value of parameter
	 */
	UI_Clear_Line(y);
 8003894:	78fb      	ldrb	r3, [r7, #3]
 8003896:	4618      	mov	r0, r3
 8003898:	f7ff fb60 	bl	8002f5c <UI_Clear_Line>
	UI_Draw_String(self->name, 1, y, Direct_Display_MODE);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6898      	ldr	r0, [r3, #8]
 80038a0:	78fa      	ldrb	r2, [r7, #3]
 80038a2:	2300      	movs	r3, #0
 80038a4:	2101      	movs	r1, #1
 80038a6:	f7ff fb09 	bl	8002ebc <UI_Draw_String>
	UI_Draw_Parmetr_Ptr(self->parametr, 16, y, self->mode);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6918      	ldr	r0, [r3, #16]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	7b1b      	ldrb	r3, [r3, #12]
 80038b2:	78fa      	ldrb	r2, [r7, #3]
 80038b4:	2110      	movs	r1, #16
 80038b6:	f7ff f94d 	bl	8002b54 <UI_Draw_Parmetr_Ptr>
}
 80038ba:	bf00      	nop
 80038bc:	3708      	adds	r7, #8
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <Menu_List_Element_Vector_Draw>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void Menu_List_Element_Vector_Draw(struct Menu_List_Element_Vector *self, uint8_t start_point, uint8_t quantity){
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b084      	sub	sp, #16
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
 80038ca:	460b      	mov	r3, r1
 80038cc:	70fb      	strb	r3, [r7, #3]
 80038ce:	4613      	mov	r3, r2
 80038d0:	70bb      	strb	r3, [r7, #2]
	/**
	 * Draw all  Menu_List_Element from start point ID of Menu_List_Element_Vector to start point + quantity
	 */
	while(self->ID!=start_point)		//skip to start point
 80038d2:	e002      	b.n	80038da <Menu_List_Element_Vector_Draw+0x18>
		self=self->next;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	607b      	str	r3, [r7, #4]
	while(self->ID!=start_point)		//skip to start point
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	791b      	ldrb	r3, [r3, #4]
 80038de:	78fa      	ldrb	r2, [r7, #3]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d1f7      	bne.n	80038d4 <Menu_List_Element_Vector_Draw+0x12>
	for(uint8_t i=0;i<quantity;i++){
 80038e4:	2300      	movs	r3, #0
 80038e6:	73fb      	strb	r3, [r7, #15]
 80038e8:	e016      	b.n	8003918 <Menu_List_Element_Vector_Draw+0x56>
		if(self!=NULL){																//if Menu_List_Element was created
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00a      	beq.n	8003906 <Menu_List_Element_Vector_Draw+0x44>
			Menu_List_Element_Draw(self, i+Menu_List_Element_Vector_Draw_Shift);	//draw it based on position
 80038f0:	7bfb      	ldrb	r3, [r7, #15]
 80038f2:	3301      	adds	r3, #1
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	4619      	mov	r1, r3
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f7ff ffc5 	bl	8003888 <Menu_List_Element_Draw>
			self=self->next;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	607b      	str	r3, [r7, #4]
 8003904:	e005      	b.n	8003912 <Menu_List_Element_Vector_Draw+0x50>
		}
		else																		//else
			UI_Clear_Line(i+Menu_List_Element_Vector_Draw_Shift);					//clear it's based on line position
 8003906:	7bfb      	ldrb	r3, [r7, #15]
 8003908:	3301      	adds	r3, #1
 800390a:	b2db      	uxtb	r3, r3
 800390c:	4618      	mov	r0, r3
 800390e:	f7ff fb25 	bl	8002f5c <UI_Clear_Line>
	for(uint8_t i=0;i<quantity;i++){
 8003912:	7bfb      	ldrb	r3, [r7, #15]
 8003914:	3301      	adds	r3, #1
 8003916:	73fb      	strb	r3, [r7, #15]
 8003918:	7bfa      	ldrb	r2, [r7, #15]
 800391a:	78bb      	ldrb	r3, [r7, #2]
 800391c:	429a      	cmp	r2, r3
 800391e:	d3e4      	bcc.n	80038ea <Menu_List_Element_Vector_Draw+0x28>
	}
}
 8003920:	bf00      	nop
 8003922:	bf00      	nop
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <Menu_List_Vector_Size>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
uint8_t Menu_List_Vector_Size(struct Menu_List_Element_Vector *self){
 800392a:	b480      	push	{r7}
 800392c:	b085      	sub	sp, #20
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
	/**
	 * Return quantity of elements in  Menu_List_Element_Vector
	 */
	uint8_t MAX_ID=0;
 8003932:	2300      	movs	r3, #0
 8003934:	73fb      	strb	r3, [r7, #15]
	while(self->next!=NULL){
 8003936:	e005      	b.n	8003944 <Menu_List_Vector_Size+0x1a>
			self=self->next;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	607b      	str	r3, [r7, #4]
			MAX_ID++;
 800393e:	7bfb      	ldrb	r3, [r7, #15]
 8003940:	3301      	adds	r3, #1
 8003942:	73fb      	strb	r3, [r7, #15]
	while(self->next!=NULL){
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1f5      	bne.n	8003938 <Menu_List_Vector_Size+0xe>
	}
	return MAX_ID++;
 800394c:	7bfb      	ldrb	r3, [r7, #15]
 800394e:	1c5a      	adds	r2, r3, #1
 8003950:	73fa      	strb	r2, [r7, #15]
}
 8003952:	4618      	mov	r0, r3
 8003954:	3714      	adds	r7, #20
 8003956:	46bd      	mov	sp, r7
 8003958:	bc80      	pop	{r7}
 800395a:	4770      	bx	lr

0800395c <Get_Prescaler>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
uint8_t Get_Prescaler(struct Button_Vector *Button_Vector){
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
	/**
	 *	Return number based on witch buttons are pressed
	 *	x1 x2 x5 x10
	 */
	struct Button_Vector *now=Button_Vector;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	60fb      	str	r3, [r7, #12]

	static  uint8_t Button_State=0;											//Every bit of Button_State contain local button state (Turn OFF or ON)
	uint8_t Prescaler=1;
 8003968:	2301      	movs	r3, #1
 800396a:	72fb      	strb	r3, [r7, #11]
	do{
		if(Button_Get_Event_State(now->Button)){							//If Button Event
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	4618      	mov	r0, r3
 8003972:	f7fd f98a 	bl	8000c8a <Button_Get_Event_State>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d02a      	beq.n	80039d2 <Get_Prescaler+0x76>
			switch(now->Button->ID){										//Check button ID
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d002      	beq.n	800398c <Get_Prescaler+0x30>
 8003986:	2b03      	cmp	r3, #3
 8003988:	d010      	beq.n	80039ac <Get_Prescaler+0x50>
 800398a:	e022      	b.n	80039d2 <Get_Prescaler+0x76>
				case X2_Modefire_Button_ID:
					if(Button_Get_Pin_State(now->Button)==GPIO_PIN_RESET){	//If Falling edge
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	4618      	mov	r0, r3
 8003992:	f7fd f967 	bl	8000c64 <Button_Get_Pin_State>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d117      	bne.n	80039cc <Get_Prescaler+0x70>
						Button_State^=0x02;									//Toggle state bit
 800399c:	4b1c      	ldr	r3, [pc, #112]	; (8003a10 <Get_Prescaler+0xb4>)
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	f083 0302 	eor.w	r3, r3, #2
 80039a4:	b2da      	uxtb	r2, r3
 80039a6:	4b1a      	ldr	r3, [pc, #104]	; (8003a10 <Get_Prescaler+0xb4>)
 80039a8:	701a      	strb	r2, [r3, #0]
					}
				break;
 80039aa:	e00f      	b.n	80039cc <Get_Prescaler+0x70>
				case X5_Modefire_Button_ID:
					if(Button_Get_Pin_State(now->Button)==GPIO_PIN_RESET){	//If Falling edge
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7fd f957 	bl	8000c64 <Button_Get_Pin_State>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d109      	bne.n	80039d0 <Get_Prescaler+0x74>
						Button_State^=0x01;									//Toggle state bit
 80039bc:	4b14      	ldr	r3, [pc, #80]	; (8003a10 <Get_Prescaler+0xb4>)
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	f083 0301 	eor.w	r3, r3, #1
 80039c4:	b2da      	uxtb	r2, r3
 80039c6:	4b12      	ldr	r3, [pc, #72]	; (8003a10 <Get_Prescaler+0xb4>)
 80039c8:	701a      	strb	r2, [r3, #0]
					}
				break;
 80039ca:	e001      	b.n	80039d0 <Get_Prescaler+0x74>
				break;
 80039cc:	bf00      	nop
 80039ce:	e000      	b.n	80039d2 <Get_Prescaler+0x76>
				break;
 80039d0:	bf00      	nop
			}
		}
		now=now->next;														//Go to next button
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	60fb      	str	r3, [r7, #12]
	}while(now!=NULL);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1c6      	bne.n	800396c <Get_Prescaler+0x10>

	if((Button_State&0x02)!=0)												//Set value based on Button_State
 80039de:	4b0c      	ldr	r3, [pc, #48]	; (8003a10 <Get_Prescaler+0xb4>)
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d002      	beq.n	80039f0 <Get_Prescaler+0x94>
		Prescaler*=2;
 80039ea:	7afb      	ldrb	r3, [r7, #11]
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	72fb      	strb	r3, [r7, #11]
	if((Button_State&0x01)!=0)
 80039f0:	4b07      	ldr	r3, [pc, #28]	; (8003a10 <Get_Prescaler+0xb4>)
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d004      	beq.n	8003a06 <Get_Prescaler+0xaa>
		Prescaler*=5;
 80039fc:	7afb      	ldrb	r3, [r7, #11]
 80039fe:	461a      	mov	r2, r3
 8003a00:	0092      	lsls	r2, r2, #2
 8003a02:	4413      	add	r3, r2
 8003a04:	72fb      	strb	r3, [r7, #11]

	return Prescaler;														//Return value
 8003a06:	7afb      	ldrb	r3, [r7, #11]
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	200002b9 	.word	0x200002b9

08003a14 <Menu_List_Element_Value_Change>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void Menu_List_Element_Value_Change(struct Menu_List_Element_Vector *self, uint8_t y, struct Encoder *Encoder, struct Button_Vector *Button_Vector){
 8003a14:	b5b0      	push	{r4, r5, r7, lr}
 8003a16:	b086      	sub	sp, #24
 8003a18:	af02      	add	r7, sp, #8
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	607a      	str	r2, [r7, #4]
 8003a1e:	603b      	str	r3, [r7, #0]
 8003a20:	460b      	mov	r3, r1
 8003a22:	72fb      	strb	r3, [r7, #11]
	/**
	 *	Changing value of Menu_List_Element and drawing it's value until encoder Button state not Encoder_Button_long
	 */
	UI_Encoder_Reset_Button_State(Encoder);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f7ff fbac 	bl	8003182 <UI_Encoder_Reset_Button_State>

	UI_Set_Cursor(Menu_List_Element_Vector_Cursor_x-1, y);																//SET CURSOR ON VALUE
 8003a2a:	7afb      	ldrb	r3, [r7, #11]
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	200f      	movs	r0, #15
 8003a30:	f7ff fa64 	bl	8002efc <UI_Set_Cursor>
	while(Encoder_Get_Button_State(Encoder)!=Encoder_Button_long){
 8003a34:	e01d      	b.n	8003a72 <Menu_List_Element_Value_Change+0x5e>
		UI_Change_Value_Ptr(self->parametr, (self->step)*Get_Prescaler(Button_Vector), self->mode, 0, 65535, Encoder);	//Changing value
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	691d      	ldr	r5, [r3, #16]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	7b5c      	ldrb	r4, [r3, #13]
 8003a3e:	6838      	ldr	r0, [r7, #0]
 8003a40:	f7ff ff8c 	bl	800395c <Get_Prescaler>
 8003a44:	4603      	mov	r3, r0
 8003a46:	fb04 f303 	mul.w	r3, r4, r3
 8003a4a:	b2d9      	uxtb	r1, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	7b1a      	ldrb	r2, [r3, #12]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	9301      	str	r3, [sp, #4]
 8003a54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	4628      	mov	r0, r5
 8003a5e:	f7ff fa8d 	bl	8002f7c <UI_Change_Value_Ptr>
		UI_Draw_Parmetr_Ptr(self->parametr, Menu_List_Element_Vector_Cursor_x, y, self->mode);							//Draw value
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6918      	ldr	r0, [r3, #16]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	7b1b      	ldrb	r3, [r3, #12]
 8003a6a:	7afa      	ldrb	r2, [r7, #11]
 8003a6c:	2110      	movs	r1, #16
 8003a6e:	f7ff f871 	bl	8002b54 <UI_Draw_Parmetr_Ptr>
	while(Encoder_Get_Button_State(Encoder)!=Encoder_Button_long){
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7fd f93b 	bl	8000cee <Encoder_Get_Button_State>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b03      	cmp	r3, #3
 8003a7c:	d1db      	bne.n	8003a36 <Menu_List_Element_Value_Change+0x22>
	}
	UI_Encoder_Reset_Button_State(Encoder);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f7ff fb7f 	bl	8003182 <UI_Encoder_Reset_Button_State>

}
 8003a84:	bf00      	nop
 8003a86:	3710      	adds	r7, #16
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bdb0      	pop	{r4, r5, r7, pc}

08003a8c <UI_Menu_List_Element_Vector_it>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void UI_Menu_List_Element_Vector_it(struct Menu_List_Element_Vector *self, char *Name, struct Encoder *Encoder, struct Button_Vector *Button_Vector){
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b088      	sub	sp, #32
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
 8003a98:	603b      	str	r3, [r7, #0]
	/**
	 * 	Display name, value of each element of current vector and can change value based on Type..... until Encoder button != Encoder_Button_long
	 *
	 */

	int Menu_Count=0,Menu_Count_Prew=255;				//Menu_Count current menu options, Menu_Count_Prew=255 needed to draw menu at first iteration
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	61fb      	str	r3, [r7, #28]
 8003a9e:	23ff      	movs	r3, #255	; 0xff
 8003aa0:	61bb      	str	r3, [r7, #24]
	uint8_t MAX_ID=Menu_List_Vector_Size(self);			//Get max size of vector
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f7ff ff41 	bl	800392a <Menu_List_Vector_Size>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	74fb      	strb	r3, [r7, #19]

	UI_Encoder_Reset_Button_State(Encoder);				//Reset encoder button state
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f7ff fb68 	bl	8003182 <UI_Encoder_Reset_Button_State>
	UI_Draw_String_Center(Name, 0, Inverse_Display_MODE);	//Draw Submenu name
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	68b8      	ldr	r0, [r7, #8]
 8003ab8:	f7ff fb2e 	bl	8003118 <UI_Draw_String_Center>
	UI_Set_Cursor(0, Menu_Count% (Draw_LIMIT-Menu_List_Element_Vector_Draw_Shift)+Menu_List_Element_Vector_Draw_Shift);	//Set cursor to first element based on shift
 8003abc:	69fa      	ldr	r2, [r7, #28]
 8003abe:	4b57      	ldr	r3, [pc, #348]	; (8003c1c <UI_Menu_List_Element_Vector_it+0x190>)
 8003ac0:	fb83 1302 	smull	r1, r3, r3, r2
 8003ac4:	4413      	add	r3, r2
 8003ac6:	1099      	asrs	r1, r3, #2
 8003ac8:	17d3      	asrs	r3, r2, #31
 8003aca:	1ac9      	subs	r1, r1, r3
 8003acc:	460b      	mov	r3, r1
 8003ace:	00db      	lsls	r3, r3, #3
 8003ad0:	1a5b      	subs	r3, r3, r1
 8003ad2:	1ad1      	subs	r1, r2, r3
 8003ad4:	b2cb      	uxtb	r3, r1
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	4619      	mov	r1, r3
 8003adc:	2000      	movs	r0, #0
 8003ade:	f7ff fa0d 	bl	8002efc <UI_Set_Cursor>

	while(Encoder_Get_Button_State(Encoder)!=Encoder_Button_long){	//Main body which	contain main logic work with Menu_List_Element_Vector
 8003ae2:	e08f      	b.n	8003c04 <UI_Menu_List_Element_Vector_it+0x178>

		Menu_Count+= Encoder_Get_Rotary_Switch_Buffer(Encoder);		//Get Menu_Count based on Rotary_Switch_Buffer
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f7fd f8ea 	bl	8000cbe <Encoder_Get_Rotary_Switch_Buffer>
 8003aea:	4602      	mov	r2, r0
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	4413      	add	r3, r2
 8003af0:	61fb      	str	r3, [r7, #28]
		Encoder_Reset_Rotary_Switch_Buffer(Encoder);				//Reset  Rotary_Switch_Buffer
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7fd f8d7 	bl	8000ca6 <Encoder_Reset_Rotary_Switch_Buffer>

		if(Menu_Count<0)											//Check if current Menu_Count is more than 0 and less than size of vector
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	da02      	bge.n	8003b04 <UI_Menu_List_Element_Vector_it+0x78>
			Menu_Count=0;
 8003afe:	2300      	movs	r3, #0
 8003b00:	61fb      	str	r3, [r7, #28]
 8003b02:	e005      	b.n	8003b10 <UI_Menu_List_Element_Vector_it+0x84>
		else if(Menu_Count>MAX_ID)
 8003b04:	7cfb      	ldrb	r3, [r7, #19]
 8003b06:	69fa      	ldr	r2, [r7, #28]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	dd01      	ble.n	8003b10 <UI_Menu_List_Element_Vector_it+0x84>
			Menu_Count=MAX_ID;
 8003b0c:	7cfb      	ldrb	r3, [r7, #19]
 8003b0e:	61fb      	str	r3, [r7, #28]

		if(Menu_Count_Prew!=Menu_Count){							//if Menu_Count was changed
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d038      	beq.n	8003b8a <UI_Menu_List_Element_Vector_it+0xfe>
			if(((Menu_Count/(Draw_LIMIT-Menu_List_Element_Vector_Draw_Shift))*(Draw_LIMIT-Menu_List_Element_Vector_Draw_Shift))!=((Menu_Count_Prew/(Draw_LIMIT-Menu_List_Element_Vector_Draw_Shift))*(Draw_LIMIT-Menu_List_Element_Vector_Draw_Shift)))
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	4a40      	ldr	r2, [pc, #256]	; (8003c1c <UI_Menu_List_Element_Vector_it+0x190>)
 8003b1c:	fb82 1203 	smull	r1, r2, r2, r3
 8003b20:	441a      	add	r2, r3
 8003b22:	1092      	asrs	r2, r2, #2
 8003b24:	17db      	asrs	r3, r3, #31
 8003b26:	1ad2      	subs	r2, r2, r3
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	493c      	ldr	r1, [pc, #240]	; (8003c1c <UI_Menu_List_Element_Vector_it+0x190>)
 8003b2c:	fb81 0103 	smull	r0, r1, r1, r3
 8003b30:	4419      	add	r1, r3
 8003b32:	1089      	asrs	r1, r1, #2
 8003b34:	17db      	asrs	r3, r3, #31
 8003b36:	1acb      	subs	r3, r1, r3
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d011      	beq.n	8003b60 <UI_Menu_List_Element_Vector_it+0xd4>
				// if Menu_Count more than quantity of rows on display than redraw new page with next names and values based on vector
				Menu_List_Element_Vector_Draw(self, (uint8_t)(Menu_Count/(Draw_LIMIT-Menu_List_Element_Vector_Draw_Shift))*(Draw_LIMIT-Menu_List_Element_Vector_Draw_Shift), Draw_LIMIT-Menu_List_Element_Vector_Draw_Shift);
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	4a37      	ldr	r2, [pc, #220]	; (8003c1c <UI_Menu_List_Element_Vector_it+0x190>)
 8003b40:	fb82 1203 	smull	r1, r2, r2, r3
 8003b44:	441a      	add	r2, r3
 8003b46:	1092      	asrs	r2, r2, #2
 8003b48:	17db      	asrs	r3, r3, #31
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	461a      	mov	r2, r3
 8003b50:	00d2      	lsls	r2, r2, #3
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2207      	movs	r2, #7
 8003b58:	4619      	mov	r1, r3
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f7ff feb1 	bl	80038c2 <Menu_List_Element_Vector_Draw>
			UI_Set_Cursor(0, Menu_Count% (Draw_LIMIT-Menu_List_Element_Vector_Draw_Shift)+Menu_List_Element_Vector_Draw_Shift);	//Change cursor position every time
 8003b60:	69fa      	ldr	r2, [r7, #28]
 8003b62:	4b2e      	ldr	r3, [pc, #184]	; (8003c1c <UI_Menu_List_Element_Vector_it+0x190>)
 8003b64:	fb83 1302 	smull	r1, r3, r3, r2
 8003b68:	4413      	add	r3, r2
 8003b6a:	1099      	asrs	r1, r3, #2
 8003b6c:	17d3      	asrs	r3, r2, #31
 8003b6e:	1ac9      	subs	r1, r1, r3
 8003b70:	460b      	mov	r3, r1
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	1a5b      	subs	r3, r3, r1
 8003b76:	1ad1      	subs	r1, r2, r3
 8003b78:	b2cb      	uxtb	r3, r1
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	4619      	mov	r1, r3
 8003b80:	2000      	movs	r0, #0
 8003b82:	f7ff f9bb 	bl	8002efc <UI_Set_Cursor>
			Menu_Count_Prew=Menu_Count;
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	61bb      	str	r3, [r7, #24]
		}

		if(Encoder_Get_Button_State(Encoder)==Encoder_Button_Short){	//If encoder button was pressed
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f7fd f8af 	bl	8000cee <Encoder_Get_Button_State>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d136      	bne.n	8003c04 <UI_Menu_List_Element_Vector_it+0x178>
			struct Menu_List_Element_Vector *now;
			now=self;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	617b      	str	r3, [r7, #20]
			while(now->ID!=Menu_Count){				//skip to Menu_List_Element which ID is equal to Menu_Count
 8003b9a:	e002      	b.n	8003ba2 <UI_Menu_List_Element_Vector_it+0x116>
				now=now->next;
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	617b      	str	r3, [r7, #20]
			while(now->ID!=Menu_Count){				//skip to Menu_List_Element which ID is equal to Menu_Count
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	791b      	ldrb	r3, [r3, #4]
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d1f6      	bne.n	8003b9c <UI_Menu_List_Element_Vector_it+0x110>
			}
			Menu_List_Element_Value_Change(now, now->ID% (Draw_LIMIT-Menu_List_Element_Vector_Draw_Shift)+Menu_List_Element_Vector_Draw_Shift, Encoder, Button_Vector);
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	791a      	ldrb	r2, [r3, #4]
 8003bb2:	4b1b      	ldr	r3, [pc, #108]	; (8003c20 <UI_Menu_List_Element_Vector_it+0x194>)
 8003bb4:	fba3 1302 	umull	r1, r3, r3, r2
 8003bb8:	1ad1      	subs	r1, r2, r3
 8003bba:	0849      	lsrs	r1, r1, #1
 8003bbc:	440b      	add	r3, r1
 8003bbe:	0899      	lsrs	r1, r3, #2
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	1a5b      	subs	r3, r3, r1
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	3301      	adds	r3, #1
 8003bcc:	b2d9      	uxtb	r1, r3
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	6978      	ldr	r0, [r7, #20]
 8003bd4:	f7ff ff1e 	bl	8003a14 <Menu_List_Element_Value_Change>
			//change value
			UI_Set_Cursor(0, Menu_Count% (Draw_LIMIT-Menu_List_Element_Vector_Draw_Shift)+Menu_List_Element_Vector_Draw_Shift);	//Return cursor
 8003bd8:	69fa      	ldr	r2, [r7, #28]
 8003bda:	4b10      	ldr	r3, [pc, #64]	; (8003c1c <UI_Menu_List_Element_Vector_it+0x190>)
 8003bdc:	fb83 1302 	smull	r1, r3, r3, r2
 8003be0:	4413      	add	r3, r2
 8003be2:	1099      	asrs	r1, r3, #2
 8003be4:	17d3      	asrs	r3, r2, #31
 8003be6:	1ac9      	subs	r1, r1, r3
 8003be8:	460b      	mov	r3, r1
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	1a5b      	subs	r3, r3, r1
 8003bee:	1ad1      	subs	r1, r2, r3
 8003bf0:	b2cb      	uxtb	r3, r1
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	2000      	movs	r0, #0
 8003bfa:	f7ff f97f 	bl	8002efc <UI_Set_Cursor>
			UI_Encoder_Reset_Button_State(Encoder);		//Reset encoder button state
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f7ff fabf 	bl	8003182 <UI_Encoder_Reset_Button_State>
	while(Encoder_Get_Button_State(Encoder)!=Encoder_Button_long){	//Main body which	contain main logic work with Menu_List_Element_Vector
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f7fd f872 	bl	8000cee <Encoder_Get_Button_State>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b03      	cmp	r3, #3
 8003c0e:	f47f af69 	bne.w	8003ae4 <UI_Menu_List_Element_Vector_it+0x58>
		}
	}
}
 8003c12:	bf00      	nop
 8003c14:	bf00      	nop
 8003c16:	3720      	adds	r7, #32
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	92492493 	.word	0x92492493
 8003c20:	24924925 	.word	0x24924925

08003c24 <UI_Menu_List_Element_Create>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void UI_Menu_List_Element_Create(struct Menu_List_Element_Vector *head,struct Menu_List_Element_Vector *ini_element){
 8003c24:	b5b0      	push	{r4, r5, r7, lr}
 8003c26:	b086      	sub	sp, #24
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
	/**
	 * Add a new element to enu_List_Element_Vector based on copy of ini_element
	 */
	char *st= malloc((sizeof(char)*(strlen(ini_element->name)+1)));
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7fc fa8a 	bl	800014c <strlen>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f005 fc7d 	bl	800953c <malloc>
 8003c42:	4603      	mov	r3, r0
 8003c44:	613b      	str	r3, [r7, #16]
	strcpy(st,ini_element->name);
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	6938      	ldr	r0, [r7, #16]
 8003c4e:	f005 fd75 	bl	800973c <strcpy>
	if(head->parametr==NULL){				//If Head have not any data
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10e      	bne.n	8003c78 <UI_Menu_List_Element_Create+0x54>
		*head=*ini_element;					//Head
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	4614      	mov	r4, r2
 8003c60:	461d      	mov	r5, r3
 8003c62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c66:	682b      	ldr	r3, [r5, #0]
 8003c68:	6023      	str	r3, [r4, #0]
		head->ID=0;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	711a      	strb	r2, [r3, #4]
		head->next=NULL;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	601a      	str	r2, [r3, #0]
			NEW_Element->ID++;
		}
		NEW_Element->ID++;
		now->next=NEW_Element;																			//pointer to a next element pointing to a new element
	}
}
 8003c76:	e02c      	b.n	8003cd2 <UI_Menu_List_Element_Create+0xae>
		struct Menu_List_Element_Vector *now=head;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	617b      	str	r3, [r7, #20]
		struct Menu_List_Element_Vector *NEW_Element= malloc(sizeof(struct Menu_List_Element_Vector));	//Create new element
 8003c7c:	2014      	movs	r0, #20
 8003c7e:	f005 fc5d 	bl	800953c <malloc>
 8003c82:	4603      	mov	r3, r0
 8003c84:	60fb      	str	r3, [r7, #12]
		*NEW_Element=*ini_element;																		//Copy data to the new element
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	4614      	mov	r4, r2
 8003c8c:	461d      	mov	r5, r3
 8003c8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c92:	682b      	ldr	r3, [r5, #0]
 8003c94:	6023      	str	r3, [r4, #0]
		NEW_Element->ID=head->ID;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	791a      	ldrb	r2, [r3, #4]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	711a      	strb	r2, [r3, #4]
		NEW_Element->next=NULL;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	601a      	str	r2, [r3, #0]
		while(now->next!=NULL){																			//skip head to last element
 8003ca4:	e008      	b.n	8003cb8 <UI_Menu_List_Element_Create+0x94>
			now=now->next;
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	617b      	str	r3, [r7, #20]
			NEW_Element->ID++;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	791b      	ldrb	r3, [r3, #4]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	b2da      	uxtb	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	711a      	strb	r2, [r3, #4]
		while(now->next!=NULL){																			//skip head to last element
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1f2      	bne.n	8003ca6 <UI_Menu_List_Element_Create+0x82>
		NEW_Element->ID++;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	791b      	ldrb	r3, [r3, #4]
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	b2da      	uxtb	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	711a      	strb	r2, [r3, #4]
		now->next=NEW_Element;																			//pointer to a next element pointing to a new element
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	601a      	str	r2, [r3, #0]
}
 8003cd2:	bf00      	nop
 8003cd4:	3718      	adds	r7, #24
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bdb0      	pop	{r4, r5, r7, pc}

08003cda <Menu_List_Size>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
uint8_t Menu_List_Size(struct Menu_List_Vector *self){
 8003cda:	b480      	push	{r7}
 8003cdc:	b085      	sub	sp, #20
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
	/**
	 * Return quantity of elements in  Menu_List_Vector
	 */
	uint8_t MAX_ID=0;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	73fb      	strb	r3, [r7, #15]
	while(self->next!=NULL){
 8003ce6:	e005      	b.n	8003cf4 <Menu_List_Size+0x1a>
			self=self->next;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	607b      	str	r3, [r7, #4]
			MAX_ID++;
 8003cee:	7bfb      	ldrb	r3, [r7, #15]
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	73fb      	strb	r3, [r7, #15]
	while(self->next!=NULL){
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1f5      	bne.n	8003ce8 <Menu_List_Size+0xe>
	}
	return MAX_ID++;
 8003cfc:	7bfb      	ldrb	r3, [r7, #15]
 8003cfe:	1c5a      	adds	r2, r3, #1
 8003d00:	73fa      	strb	r2, [r7, #15]
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3714      	adds	r7, #20
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bc80      	pop	{r7}
 8003d0a:	4770      	bx	lr

08003d0c <Menu_List_Vector_Draw>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void Menu_List_Vector_Draw(struct Menu_List_Vector *self, uint8_t start_point, uint8_t quantity){
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	460b      	mov	r3, r1
 8003d16:	70fb      	strb	r3, [r7, #3]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	70bb      	strb	r3, [r7, #2]
	/**
	 * Draw all names of submenu based on  Menu_List_Vector and clear all other lines
	 */
	while(self->ID!=start_point)						//skip to statr point
 8003d1c:	e002      	b.n	8003d24 <Menu_List_Vector_Draw+0x18>
		self=self->next;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	607b      	str	r3, [r7, #4]
	while(self->ID!=start_point)						//skip to statr point
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	7a1b      	ldrb	r3, [r3, #8]
 8003d28:	78fa      	ldrb	r2, [r7, #3]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d1f7      	bne.n	8003d1e <Menu_List_Vector_Draw+0x12>
	for(uint8_t i=1;i<Menu_List_Vector_Draw_Shift;i++){//Clear all lined before Menu_List_Vector. Line 0 is NAME of MENU
 8003d2e:	2301      	movs	r3, #1
 8003d30:	73fb      	strb	r3, [r7, #15]
 8003d32:	e006      	b.n	8003d42 <Menu_List_Vector_Draw+0x36>
		UI_Clear_Line(i);
 8003d34:	7bfb      	ldrb	r3, [r7, #15]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7ff f910 	bl	8002f5c <UI_Clear_Line>
	for(uint8_t i=1;i<Menu_List_Vector_Draw_Shift;i++){//Clear all lined before Menu_List_Vector. Line 0 is NAME of MENU
 8003d3c:	7bfb      	ldrb	r3, [r7, #15]
 8003d3e:	3301      	adds	r3, #1
 8003d40:	73fb      	strb	r3, [r7, #15]
 8003d42:	7bfb      	ldrb	r3, [r7, #15]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d9f5      	bls.n	8003d34 <Menu_List_Vector_Draw+0x28>
	}
	for(uint8_t i=Menu_List_Vector_Draw_Shift;i<quantity+Menu_List_Vector_Draw_Shift;i++){						//Draw all submenu's names and clear all other lines
 8003d48:	2302      	movs	r3, #2
 8003d4a:	73bb      	strb	r3, [r7, #14]
 8003d4c:	e018      	b.n	8003d80 <Menu_List_Vector_Draw+0x74>
		if(self!=NULL){
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00e      	beq.n	8003d72 <Menu_List_Vector_Draw+0x66>
			UI_Clear_Line(i);
 8003d54:	7bbb      	ldrb	r3, [r7, #14]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7ff f900 	bl	8002f5c <UI_Clear_Line>
			UI_Draw_String_Center(self->name, i, Direct_Display_MODE);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	7bb9      	ldrb	r1, [r7, #14]
 8003d62:	2200      	movs	r2, #0
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7ff f9d7 	bl	8003118 <UI_Draw_String_Center>
			self=self->next;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	607b      	str	r3, [r7, #4]
 8003d70:	e003      	b.n	8003d7a <Menu_List_Vector_Draw+0x6e>
		}
		else
			UI_Clear_Line(i);
 8003d72:	7bbb      	ldrb	r3, [r7, #14]
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7ff f8f1 	bl	8002f5c <UI_Clear_Line>
	for(uint8_t i=Menu_List_Vector_Draw_Shift;i<quantity+Menu_List_Vector_Draw_Shift;i++){						//Draw all submenu's names and clear all other lines
 8003d7a:	7bbb      	ldrb	r3, [r7, #14]
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	73bb      	strb	r3, [r7, #14]
 8003d80:	78bb      	ldrb	r3, [r7, #2]
 8003d82:	1c5a      	adds	r2, r3, #1
 8003d84:	7bbb      	ldrb	r3, [r7, #14]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	dae1      	bge.n	8003d4e <Menu_List_Vector_Draw+0x42>
	}
}
 8003d8a:	bf00      	nop
 8003d8c:	bf00      	nop
 8003d8e:	3710      	adds	r7, #16
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <Menu_Set_List_Cursor>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void Menu_Set_List_Cursor(struct Menu_List_Vector *self, uint8_t start_point, uint8_t quantity, uint8_t cursor_y){
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	4608      	mov	r0, r1
 8003d9e:	4611      	mov	r1, r2
 8003da0:	461a      	mov	r2, r3
 8003da2:	4603      	mov	r3, r0
 8003da4:	70fb      	strb	r3, [r7, #3]
 8003da6:	460b      	mov	r3, r1
 8003da8:	70bb      	strb	r3, [r7, #2]
 8003daa:	4613      	mov	r3, r2
 8003dac:	707b      	strb	r3, [r7, #1]
	/**
	 *	Draw all names of submenu based on  Menu_List_Vector and inverse NAME output on cursor_y
	 */
	while(self->ID!=start_point)			//skip to start point
 8003dae:	e002      	b.n	8003db6 <Menu_Set_List_Cursor+0x22>
		self=self->next;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	607b      	str	r3, [r7, #4]
	while(self->ID!=start_point)			//skip to start point
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	7a1b      	ldrb	r3, [r3, #8]
 8003dba:	78fa      	ldrb	r2, [r7, #3]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d1f7      	bne.n	8003db0 <Menu_Set_List_Cursor+0x1c>
	for(uint8_t i=0;i<quantity;i++){		//Draw all Submenu titles
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	73fb      	strb	r3, [r7, #15]
 8003dc4:	e01f      	b.n	8003e06 <Menu_Set_List_Cursor+0x72>
		if(self!=NULL){
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d019      	beq.n	8003e00 <Menu_Set_List_Cursor+0x6c>
			if(i==cursor_y)					//if selected
 8003dcc:	7bfa      	ldrb	r2, [r7, #15]
 8003dce:	787b      	ldrb	r3, [r7, #1]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d109      	bne.n	8003de8 <Menu_Set_List_Cursor+0x54>
				UI_Draw_String_Center(self->name, i+Menu_List_Vector_Draw_Shift, Inverse_Display_MODE);	//display title inverse
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	68d8      	ldr	r0, [r3, #12]
 8003dd8:	7bfb      	ldrb	r3, [r7, #15]
 8003dda:	3302      	adds	r3, #2
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2201      	movs	r2, #1
 8003de0:	4619      	mov	r1, r3
 8003de2:	f7ff f999 	bl	8003118 <UI_Draw_String_Center>
 8003de6:	e008      	b.n	8003dfa <Menu_Set_List_Cursor+0x66>
			else																						//else
				UI_Draw_String_Center(self->name, i+Menu_List_Vector_Draw_Shift, Direct_Display_MODE);	//display title direct
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	68d8      	ldr	r0, [r3, #12]
 8003dec:	7bfb      	ldrb	r3, [r7, #15]
 8003dee:	3302      	adds	r3, #2
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2200      	movs	r2, #0
 8003df4:	4619      	mov	r1, r3
 8003df6:	f7ff f98f 	bl	8003118 <UI_Draw_String_Center>
			self=self->next;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	607b      	str	r3, [r7, #4]
	for(uint8_t i=0;i<quantity;i++){		//Draw all Submenu titles
 8003e00:	7bfb      	ldrb	r3, [r7, #15]
 8003e02:	3301      	adds	r3, #1
 8003e04:	73fb      	strb	r3, [r7, #15]
 8003e06:	7bfa      	ldrb	r2, [r7, #15]
 8003e08:	78bb      	ldrb	r3, [r7, #2]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d3db      	bcc.n	8003dc6 <Menu_Set_List_Cursor+0x32>
		}
	}
}
 8003e0e:	bf00      	nop
 8003e10:	bf00      	nop
 8003e12:	3710      	adds	r7, #16
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <UI_Menu_it>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void UI_Menu_it(struct Menu_List_Vector *self, struct Encoder *Encoder, struct Button_Vector *Button_Vector){
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b088      	sub	sp, #32
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]

	int Menu_Count=0, Menu_Count_Prew=255;		//Menu_Count current menu options, Menu_Count_Prew=255 needed to draw menu at first iteration
 8003e24:	2300      	movs	r3, #0
 8003e26:	61fb      	str	r3, [r7, #28]
 8003e28:	23ff      	movs	r3, #255	; 0xff
 8003e2a:	61bb      	str	r3, [r7, #24]

	uint8_t MAX_ID=Menu_List_Size(self);		//Get max size of vector
 8003e2c:	68f8      	ldr	r0, [r7, #12]
 8003e2e:	f7ff ff54 	bl	8003cda <Menu_List_Size>
 8003e32:	4603      	mov	r3, r0
 8003e34:	74fb      	strb	r3, [r7, #19]
	UI_Encoder_Reset_Button_State(Encoder);		//Reset encoder button state
 8003e36:	68b8      	ldr	r0, [r7, #8]
 8003e38:	f7ff f9a3 	bl	8003182 <UI_Encoder_Reset_Button_State>

	UI_Clear_Line(0);							//Clear line for Menu Title
 8003e3c:	2000      	movs	r0, #0
 8003e3e:	f7ff f88d 	bl	8002f5c <UI_Clear_Line>
	UI_Draw_String_Center("MENU", 0, Direct_Display_MODE);	//Draw Menu Title
 8003e42:	2200      	movs	r2, #0
 8003e44:	2100      	movs	r1, #0
 8003e46:	4848      	ldr	r0, [pc, #288]	; (8003f68 <UI_Menu_it+0x150>)
 8003e48:	f7ff f966 	bl	8003118 <UI_Draw_String_Center>
	Menu_List_Vector_Draw(self, (uint8_t)(Menu_Count/(Draw_LIMIT-Menu_List_Vector_Draw_Shift))*(Draw_LIMIT-Menu_List_Vector_Draw_Shift), Draw_LIMIT-Menu_List_Vector_Draw_Shift);
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	4a47      	ldr	r2, [pc, #284]	; (8003f6c <UI_Menu_it+0x154>)
 8003e50:	fb82 1203 	smull	r1, r2, r2, r3
 8003e54:	17db      	asrs	r3, r3, #31
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	0052      	lsls	r2, r2, #1
 8003e5e:	4413      	add	r3, r2
 8003e60:	005b      	lsls	r3, r3, #1
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	2206      	movs	r2, #6
 8003e66:	4619      	mov	r1, r3
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f7ff ff4f 	bl	8003d0c <Menu_List_Vector_Draw>
															//Draw Menu subtitles based on Menu_List_Vector

	while(Encoder_Get_Button_State(Encoder)!=Encoder_Button_long){	//main cycle
 8003e6e:	e070      	b.n	8003f52 <UI_Menu_it+0x13a>

		Menu_Count+= Encoder_Get_Rotary_Switch_Buffer(Encoder);		//Get Menu_Count based on Rotary_Switch_Buffer
 8003e70:	68b8      	ldr	r0, [r7, #8]
 8003e72:	f7fc ff24 	bl	8000cbe <Encoder_Get_Rotary_Switch_Buffer>
 8003e76:	4602      	mov	r2, r0
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	61fb      	str	r3, [r7, #28]
		Encoder_Reset_Rotary_Switch_Buffer(Encoder);				//Reset encoder button state
 8003e7e:	68b8      	ldr	r0, [r7, #8]
 8003e80:	f7fc ff11 	bl	8000ca6 <Encoder_Reset_Rotary_Switch_Buffer>

		if(Menu_Count<0)											//Check if current Menu_Count is more than 0 and less than size of vector
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	da02      	bge.n	8003e90 <UI_Menu_it+0x78>
			Menu_Count=0;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	61fb      	str	r3, [r7, #28]
 8003e8e:	e005      	b.n	8003e9c <UI_Menu_it+0x84>
		else if(Menu_Count>MAX_ID)
 8003e90:	7cfb      	ldrb	r3, [r7, #19]
 8003e92:	69fa      	ldr	r2, [r7, #28]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	dd01      	ble.n	8003e9c <UI_Menu_it+0x84>
			Menu_Count=MAX_ID;
 8003e98:	7cfb      	ldrb	r3, [r7, #19]
 8003e9a:	61fb      	str	r3, [r7, #28]

		if(Menu_Count_Prew!=Menu_Count){							//if Menu_Count was changed
 8003e9c:	69ba      	ldr	r2, [r7, #24]
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d01e      	beq.n	8003ee2 <UI_Menu_it+0xca>
			Menu_Set_List_Cursor(self,								//Redraw cursor and subtitle list
					(uint8_t)(Menu_Count/(Draw_LIMIT-Menu_List_Vector_Draw_Shift))*(Draw_LIMIT-Menu_List_Vector_Draw_Shift),
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	4a31      	ldr	r2, [pc, #196]	; (8003f6c <UI_Menu_it+0x154>)
 8003ea8:	fb82 1203 	smull	r1, r2, r2, r3
 8003eac:	17db      	asrs	r3, r3, #31
 8003eae:	1ad3      	subs	r3, r2, r3
			Menu_Set_List_Cursor(self,								//Redraw cursor and subtitle list
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	0052      	lsls	r2, r2, #1
 8003eb6:	4413      	add	r3, r2
 8003eb8:	005b      	lsls	r3, r3, #1
 8003eba:	b2d8      	uxtb	r0, r3
					Draw_LIMIT-Menu_List_Vector_Draw_Shift,
					(uint8_t)Menu_Count%(Draw_LIMIT-Menu_List_Vector_Draw_Shift));
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	b2da      	uxtb	r2, r3
			Menu_Set_List_Cursor(self,								//Redraw cursor and subtitle list
 8003ec0:	4b2b      	ldr	r3, [pc, #172]	; (8003f70 <UI_Menu_it+0x158>)
 8003ec2:	fba3 1302 	umull	r1, r3, r3, r2
 8003ec6:	0899      	lsrs	r1, r3, #2
 8003ec8:	460b      	mov	r3, r1
 8003eca:	005b      	lsls	r3, r3, #1
 8003ecc:	440b      	add	r3, r1
 8003ece:	005b      	lsls	r3, r3, #1
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	2206      	movs	r2, #6
 8003ed6:	4601      	mov	r1, r0
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	f7ff ff5b 	bl	8003d94 <Menu_Set_List_Cursor>
			Menu_Count_Prew=Menu_Count;
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	61bb      	str	r3, [r7, #24]
		}

		if(Encoder_Get_Button_State(Encoder)==Encoder_Button_Short){   								//Element select
 8003ee2:	68b8      	ldr	r0, [r7, #8]
 8003ee4:	f7fc ff03 	bl	8000cee <Encoder_Get_Button_State>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d131      	bne.n	8003f52 <UI_Menu_it+0x13a>
			struct Menu_List_Vector *now;
			now=self;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	617b      	str	r3, [r7, #20]
			while(now->ID!=Menu_Count){
 8003ef2:	e002      	b.n	8003efa <UI_Menu_it+0xe2>
				now=now->next;																//Shift Element pointer to select element
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	617b      	str	r3, [r7, #20]
			while(now->ID!=Menu_Count){
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	7a1b      	ldrb	r3, [r3, #8]
 8003efe:	461a      	mov	r2, r3
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d1f6      	bne.n	8003ef4 <UI_Menu_it+0xdc>
			}
			UI_Menu_List_Element_Vector_it(now->Menu_List_Element_Vector, self->name, Encoder, Button_Vector);		//Transceive control to Menu_List_Element_Vector menu
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	6858      	ldr	r0, [r3, #4]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	68d9      	ldr	r1, [r3, #12]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68ba      	ldr	r2, [r7, #8]
 8003f12:	f7ff fdbb 	bl	8003a8c <UI_Menu_List_Element_Vector_it>
																													//Area after resceive control start
			UI_Clear_Line(0);										//Clear line for Menu Title
 8003f16:	2000      	movs	r0, #0
 8003f18:	f7ff f820 	bl	8002f5c <UI_Clear_Line>
			UI_Draw_String_Center("MENU", 0, Direct_Display_MODE);	//Draw Menu Title
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	2100      	movs	r1, #0
 8003f20:	4811      	ldr	r0, [pc, #68]	; (8003f68 <UI_Menu_it+0x150>)
 8003f22:	f7ff f8f9 	bl	8003118 <UI_Draw_String_Center>
			Menu_List_Vector_Draw(self, (uint8_t)(Menu_Count/(Draw_LIMIT-Menu_List_Vector_Draw_Shift))*(Draw_LIMIT-Menu_List_Vector_Draw_Shift), Draw_LIMIT-Menu_List_Vector_Draw_Shift);
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	4a10      	ldr	r2, [pc, #64]	; (8003f6c <UI_Menu_it+0x154>)
 8003f2a:	fb82 1203 	smull	r1, r2, r2, r3
 8003f2e:	17db      	asrs	r3, r3, #31
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	461a      	mov	r2, r3
 8003f36:	0052      	lsls	r2, r2, #1
 8003f38:	4413      	add	r3, r2
 8003f3a:	005b      	lsls	r3, r3, #1
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	2206      	movs	r2, #6
 8003f40:	4619      	mov	r1, r3
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	f7ff fee2 	bl	8003d0c <Menu_List_Vector_Draw>
			Menu_Count_Prew=255;									//Reset state
 8003f48:	23ff      	movs	r3, #255	; 0xff
 8003f4a:	61bb      	str	r3, [r7, #24]
			UI_Encoder_Reset_Button_State(Encoder);					//Reset encoder button state
 8003f4c:	68b8      	ldr	r0, [r7, #8]
 8003f4e:	f7ff f918 	bl	8003182 <UI_Encoder_Reset_Button_State>
	while(Encoder_Get_Button_State(Encoder)!=Encoder_Button_long){	//main cycle
 8003f52:	68b8      	ldr	r0, [r7, #8]
 8003f54:	f7fc fecb 	bl	8000cee <Encoder_Get_Button_State>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b03      	cmp	r3, #3
 8003f5c:	d188      	bne.n	8003e70 <UI_Menu_it+0x58>
																	//Area after resceive control end
		}
	}
}
 8003f5e:	bf00      	nop
 8003f60:	bf00      	nop
 8003f62:	3720      	adds	r7, #32
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	08009874 	.word	0x08009874
 8003f6c:	2aaaaaab 	.word	0x2aaaaaab
 8003f70:	aaaaaaab 	.word	0xaaaaaaab

08003f74 <UI_Menu_List_Create>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void UI_Menu_List_Create(struct Menu_List_Vector *List_Vector, struct Menu_List_Element_Vector *List_Element_Vector, char *name){
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b088      	sub	sp, #32
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
	/**
	 * Add a new element to List_Vector based on copy of List_Element_Vector
	 */
	char *st= malloc((sizeof(char)*(strlen(name)+1)));			//Lock memory for name str
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f7fc f8e3 	bl	800014c <strlen>
 8003f86:	4603      	mov	r3, r0
 8003f88:	3301      	adds	r3, #1
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f005 fad6 	bl	800953c <malloc>
 8003f90:	4603      	mov	r3, r0
 8003f92:	61bb      	str	r3, [r7, #24]
	strcpy(st,name);											//Copy string
 8003f94:	6879      	ldr	r1, [r7, #4]
 8003f96:	69b8      	ldr	r0, [r7, #24]
 8003f98:	f005 fbd0 	bl	800973c <strcpy>
	if(List_Vector->Menu_List_Element_Vector==NULL){			//If Head have not any data
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d109      	bne.n	8003fb8 <UI_Menu_List_Create+0x44>
		List_Vector->ID=0;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	721a      	strb	r2, [r3, #8]
		List_Vector->name=st;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	60da      	str	r2, [r3, #12]
		List_Vector->Menu_List_Element_Vector=List_Element_Vector;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	68ba      	ldr	r2, [r7, #8]
 8003fb4:	605a      	str	r2, [r3, #4]
			NEW_Element->ID++;
		}
		NEW_Element->ID++;
		now->next=NEW_Element;
	}
}
 8003fb6:	e02a      	b.n	800400e <UI_Menu_List_Create+0x9a>
		struct Menu_List_Vector *now=List_Vector;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	61fb      	str	r3, [r7, #28]
		struct Menu_List_Vector *NEW_Element=malloc(sizeof(struct Menu_List_Vector));	//create new element
 8003fbc:	2010      	movs	r0, #16
 8003fbe:	f005 fabd 	bl	800953c <malloc>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	617b      	str	r3, [r7, #20]
		NEW_Element->ID=List_Vector->ID;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	7a1a      	ldrb	r2, [r3, #8]
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	721a      	strb	r2, [r3, #8]
		NEW_Element->next=NULL;
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	601a      	str	r2, [r3, #0]
		NEW_Element->name=st;
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	69ba      	ldr	r2, [r7, #24]
 8003fd8:	60da      	str	r2, [r3, #12]
		NEW_Element->Menu_List_Element_Vector=List_Element_Vector;						//Copy data to the new element
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	68ba      	ldr	r2, [r7, #8]
 8003fde:	605a      	str	r2, [r3, #4]
		while(now->next!=NULL){															//Skip until current pointer is'not tail
 8003fe0:	e008      	b.n	8003ff4 <UI_Menu_List_Create+0x80>
			now=now->next;
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	61fb      	str	r3, [r7, #28]
			NEW_Element->ID++;
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	7a1b      	ldrb	r3, [r3, #8]
 8003fec:	3301      	adds	r3, #1
 8003fee:	b2da      	uxtb	r2, r3
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	721a      	strb	r2, [r3, #8]
		while(now->next!=NULL){															//Skip until current pointer is'not tail
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1f2      	bne.n	8003fe2 <UI_Menu_List_Create+0x6e>
		NEW_Element->ID++;
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	7a1b      	ldrb	r3, [r3, #8]
 8004000:	3301      	adds	r3, #1
 8004002:	b2da      	uxtb	r2, r3
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	721a      	strb	r2, [r3, #8]
		now->next=NEW_Element;
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	601a      	str	r2, [r3, #0]
}
 800400e:	bf00      	nop
 8004010:	3720      	adds	r7, #32
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
	...

08004018 <PAC_ON_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//---------------------------------------------------------------------------------
void PAC_ON_Callback(struct PAC *self){
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
	/**
	 * Set max MAX_Control_Value for all PID which controlling PAG
	 */
	Soldering_Heat_Gun_Set_PID_MAX_Control_Value(PAC_Get_Max_Control_Value(self), &Soldering_Heat_Gun);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f7fd fbef 	bl	8001804 <PAC_Get_Max_Control_Value>
 8004026:	4603      	mov	r3, r0
 8004028:	4907      	ldr	r1, [pc, #28]	; (8004048 <PAC_ON_Callback+0x30>)
 800402a:	4618      	mov	r0, r3
 800402c:	f7fe f997 	bl	800235e <Soldering_Heat_Gun_Set_PID_MAX_Control_Value>
	Soldering_Separator_Set_PID_MAX_Control_Value(PAC_Get_Max_Control_Value(self), &Soldering_Separator);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f7fd fbe7 	bl	8001804 <PAC_Get_Max_Control_Value>
 8004036:	4603      	mov	r3, r0
 8004038:	4904      	ldr	r1, [pc, #16]	; (800404c <PAC_ON_Callback+0x34>)
 800403a:	4618      	mov	r0, r3
 800403c:	f7fe fb96 	bl	800276c <Soldering_Separator_Set_PID_MAX_Control_Value>
}
 8004040:	bf00      	nop
 8004042:	3708      	adds	r7, #8
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	20000614 	.word	0x20000614
 800404c:	200006b0 	.word	0x200006b0

08004050 <HAL_ADC_ConvCpltCallback>:
//--------------------------------------------------------------------------------- ADC_Callback
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
	/**
	 * After DAC_Read Analog signal into ADC_Data array
	 */
	Solder_Iron_it(&Soldering_Iron);				//PID_IT and PWM Start
 8004058:	4806      	ldr	r0, [pc, #24]	; (8004074 <HAL_ADC_ConvCpltCallback+0x24>)
 800405a:	f7fd fdfe 	bl	8001c5a <Solder_Iron_it>
	Soldering_Heat_Gun_it(&Soldering_Heat_Gun);		//PID_IT
 800405e:	4806      	ldr	r0, [pc, #24]	; (8004078 <HAL_ADC_ConvCpltCallback+0x28>)
 8004060:	f7fe f9db 	bl	800241a <Soldering_Heat_Gun_it>
	Soldering_Separator_it(&Soldering_Separator);	//PID_IT
 8004064:	4805      	ldr	r0, [pc, #20]	; (800407c <HAL_ADC_ConvCpltCallback+0x2c>)
 8004066:	f7fe fba9 	bl	80027bc <Soldering_Separator_it>
}
 800406a:	bf00      	nop
 800406c:	3708      	adds	r7, #8
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	20000568 	.word	0x20000568
 8004078:	20000614 	.word	0x20000614
 800407c:	200006b0 	.word	0x200006b0

08004080 <HAL_GPIO_EXTI_Callback>:
//--------------------------------------------------------------------------------- EXTI
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN){
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	4603      	mov	r3, r0
 8004088:	80fb      	strh	r3, [r7, #6]

	if(PAC_EXTI(&PAC,&GPIO_PIN)==0){					//if interrupt was from PAC's part(ZCD) skip all another checks
 800408a:	1dbb      	adds	r3, r7, #6
 800408c:	4619      	mov	r1, r3
 800408e:	480c      	ldr	r0, [pc, #48]	; (80040c0 <HAL_GPIO_EXTI_Callback+0x40>)
 8004090:	f7fd fb16 	bl	80016c0 <PAC_EXTI>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10e      	bne.n	80040b8 <HAL_GPIO_EXTI_Callback+0x38>
		Button_Vector_EXTI(&Button_Vector,&GPIO_PIN);
 800409a:	1dbb      	adds	r3, r7, #6
 800409c:	4619      	mov	r1, r3
 800409e:	4809      	ldr	r0, [pc, #36]	; (80040c4 <HAL_GPIO_EXTI_Callback+0x44>)
 80040a0:	f7fc fdb2 	bl	8000c08 <Button_Vector_EXTI>
		Encoder_EXTI(&Encoder_P2, &GPIO_PIN);
 80040a4:	1dbb      	adds	r3, r7, #6
 80040a6:	4619      	mov	r1, r3
 80040a8:	4807      	ldr	r0, [pc, #28]	; (80040c8 <HAL_GPIO_EXTI_Callback+0x48>)
 80040aa:	f7fc fc24 	bl	80008f6 <Encoder_EXTI>
		Encoder_EXTI(&Encoder_P1, &GPIO_PIN);
 80040ae:	1dbb      	adds	r3, r7, #6
 80040b0:	4619      	mov	r1, r3
 80040b2:	4806      	ldr	r0, [pc, #24]	; (80040cc <HAL_GPIO_EXTI_Callback+0x4c>)
 80040b4:	f7fc fc1f 	bl	80008f6 <Encoder_EXTI>
	}
}
 80040b8:	bf00      	nop
 80040ba:	3708      	adds	r7, #8
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	20000738 	.word	0x20000738
 80040c4:	20000514 	.word	0x20000514
 80040c8:	200004ac 	.word	0x200004ac
 80040cc:	200004e0 	.word	0x200004e0

080040d0 <HAL_TIM_PeriodElapsedCallback>:
//---------------------------------------------------------------------------------TIM_Callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]

	static uint8_t prescaler=1;


        if(htim->Instance == TIM1) //check if the interrupt comes from TIM1									//ADC DMA
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a1d      	ldr	r2, [pc, #116]	; (8004154 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d114      	bne.n	800410c <HAL_TIM_PeriodElapsedCallback+0x3c>
        {
        	if(prescaler==1){													//First we needed stop PWM to read cotect temperature from ADC
 80040e2:	4b1d      	ldr	r3, [pc, #116]	; (8004158 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d107      	bne.n	80040fa <HAL_TIM_PeriodElapsedCallback+0x2a>
        		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);						//
 80040ea:	210c      	movs	r1, #12
 80040ec:	481b      	ldr	r0, [pc, #108]	; (800415c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80040ee:	f004 fbff 	bl	80088f0 <HAL_TIM_PWM_Stop>
        		prescaler=0;
 80040f2:	4b19      	ldr	r3, [pc, #100]	; (8004158 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	701a      	strb	r2, [r3, #0]
        	Encoder_it(&Encoder_P1);
        	Encoder_it(&Encoder_P2);
        }else if(htim->Instance == TIM4){						//Timer only for PAC
        	PAC_it(&PAC);
        }
}
 80040f8:	e027      	b.n	800414a <HAL_TIM_PeriodElapsedCallback+0x7a>
        		HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&ADC_Data[0],(uint32_t)16);	//Read data from ADC by DMA
 80040fa:	2210      	movs	r2, #16
 80040fc:	4918      	ldr	r1, [pc, #96]	; (8004160 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80040fe:	4819      	ldr	r0, [pc, #100]	; (8004164 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8004100:	f001 fcaa 	bl	8005a58 <HAL_ADC_Start_DMA>
        		prescaler=1;
 8004104:	4b14      	ldr	r3, [pc, #80]	; (8004158 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8004106:	2201      	movs	r2, #1
 8004108:	701a      	strb	r2, [r3, #0]
}
 800410a:	e01e      	b.n	800414a <HAL_TIM_PeriodElapsedCallback+0x7a>
        }else if(htim->Instance == TIM3){																	//Service  TIM3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a15      	ldr	r2, [pc, #84]	; (8004168 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d111      	bne.n	800413a <HAL_TIM_PeriodElapsedCallback+0x6a>
        	Flash_Rewrite_Timer_tim_it(&Soldering_Iron, &Soldering_Heat_Gun, &Soldering_Separator);
 8004116:	4a15      	ldr	r2, [pc, #84]	; (800416c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8004118:	4915      	ldr	r1, [pc, #84]	; (8004170 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800411a:	4816      	ldr	r0, [pc, #88]	; (8004174 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800411c:	f7fe fcdc 	bl	8002ad8 <Flash_Rewrite_Timer_tim_it>
        	Solder_Iron_tim_it(&Soldering_Iron);
 8004120:	4814      	ldr	r0, [pc, #80]	; (8004174 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8004122:	f7fd fdef 	bl	8001d04 <Solder_Iron_tim_it>
        	Button_Vector_it(&Button_Vector);
 8004126:	4814      	ldr	r0, [pc, #80]	; (8004178 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8004128:	f7fc fd86 	bl	8000c38 <Button_Vector_it>
        	Encoder_it(&Encoder_P1);
 800412c:	4813      	ldr	r0, [pc, #76]	; (800417c <HAL_TIM_PeriodElapsedCallback+0xac>)
 800412e:	f7fc fcfa 	bl	8000b26 <Encoder_it>
        	Encoder_it(&Encoder_P2);
 8004132:	4813      	ldr	r0, [pc, #76]	; (8004180 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8004134:	f7fc fcf7 	bl	8000b26 <Encoder_it>
}
 8004138:	e007      	b.n	800414a <HAL_TIM_PeriodElapsedCallback+0x7a>
        }else if(htim->Instance == TIM4){						//Timer only for PAC
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a11      	ldr	r2, [pc, #68]	; (8004184 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d102      	bne.n	800414a <HAL_TIM_PeriodElapsedCallback+0x7a>
        	PAC_it(&PAC);
 8004144:	4810      	ldr	r0, [pc, #64]	; (8004188 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8004146:	f7fd fb07 	bl	8001758 <PAC_it>
}
 800414a:	bf00      	nop
 800414c:	3708      	adds	r7, #8
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	40012c00 	.word	0x40012c00
 8004158:	2000023a 	.word	0x2000023a
 800415c:	200003cc 	.word	0x200003cc
 8004160:	2000074c 	.word	0x2000074c
 8004164:	200002bc 	.word	0x200002bc
 8004168:	40000400 	.word	0x40000400
 800416c:	200006b0 	.word	0x200006b0
 8004170:	20000614 	.word	0x20000614
 8004174:	20000568 	.word	0x20000568
 8004178:	20000514 	.word	0x20000514
 800417c:	200004e0 	.word	0x200004e0
 8004180:	200004ac 	.word	0x200004ac
 8004184:	40000800 	.word	0x40000800
 8004188:	20000738 	.word	0x20000738

0800418c <BUTTON_INI>:
//--------------------------------------------------------------------------------- INI Blocks
void BUTTON_INI(void){
 800418c:	b580      	push	{r7, lr}
 800418e:	b086      	sub	sp, #24
 8004190:	af00      	add	r7, sp, #0
	/**
	 * Button initialization
	 */
	struct Button Button_ini;

	Button_ini.ID=Button_ID_SW8;		//ID
 8004192:	2300      	movs	r3, #0
 8004194:	703b      	strb	r3, [r7, #0]
	Button_ini.count_max=2;				//Contact bounce in tim interrupts
 8004196:	2302      	movs	r3, #2
 8004198:	717b      	strb	r3, [r7, #5]
	Button_ini.EXTI_PIN=GPIO_PIN_14;	//in my schematic different buttons have the same EXTI pin
 800419a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800419e:	813b      	strh	r3, [r7, #8]
	Button_ini.PIN=GPIO_PIN_8;			//Actual state pin
 80041a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041a4:	817b      	strh	r3, [r7, #10]
	Button_ini.GPIO=GPIOA;				//Actual pin state GPIO
 80041a6:	4b3c      	ldr	r3, [pc, #240]	; (8004298 <BUTTON_INI+0x10c>)
 80041a8:	60fb      	str	r3, [r7, #12]
	Button_ini.MODE=Button_Mode_Regular_With_EXTI;//MODE
 80041aa:	2300      	movs	r3, #0
 80041ac:	743b      	strb	r3, [r7, #16]
	Button_Vector_Create(&Button_Vector,&Button_ini);
 80041ae:	463b      	mov	r3, r7
 80041b0:	4619      	mov	r1, r3
 80041b2:	483a      	ldr	r0, [pc, #232]	; (800429c <BUTTON_INI+0x110>)
 80041b4:	f7fc fcec 	bl	8000b90 <Button_Vector_Create>

	Button_ini.ID=Button_ID_SW6;
 80041b8:	2301      	movs	r3, #1
 80041ba:	703b      	strb	r3, [r7, #0]
	Button_ini.count_max=2;
 80041bc:	2302      	movs	r3, #2
 80041be:	717b      	strb	r3, [r7, #5]
	Button_ini.EXTI_PIN=GPIO_PIN_14;
 80041c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80041c4:	813b      	strh	r3, [r7, #8]
	Button_ini.PIN=GPIO_PIN_9;
 80041c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041ca:	817b      	strh	r3, [r7, #10]
	Button_ini.GPIO=GPIOA;
 80041cc:	4b32      	ldr	r3, [pc, #200]	; (8004298 <BUTTON_INI+0x10c>)
 80041ce:	60fb      	str	r3, [r7, #12]
	Button_ini.MODE=Button_Mode_Regular_With_EXTI;
 80041d0:	2300      	movs	r3, #0
 80041d2:	743b      	strb	r3, [r7, #16]
	Button_Vector_Create(&Button_Vector,&Button_ini);
 80041d4:	463b      	mov	r3, r7
 80041d6:	4619      	mov	r1, r3
 80041d8:	4830      	ldr	r0, [pc, #192]	; (800429c <BUTTON_INI+0x110>)
 80041da:	f7fc fcd9 	bl	8000b90 <Button_Vector_Create>

	Button_ini.ID=Button_ID_SW5;
 80041de:	2302      	movs	r3, #2
 80041e0:	703b      	strb	r3, [r7, #0]
	Button_ini.count_max=2;
 80041e2:	2302      	movs	r3, #2
 80041e4:	717b      	strb	r3, [r7, #5]
	Button_ini.EXTI_PIN=GPIO_PIN_14;
 80041e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80041ea:	813b      	strh	r3, [r7, #8]
	Button_ini.PIN=GPIO_PIN_10;
 80041ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041f0:	817b      	strh	r3, [r7, #10]
	Button_ini.GPIO=GPIOA;
 80041f2:	4b29      	ldr	r3, [pc, #164]	; (8004298 <BUTTON_INI+0x10c>)
 80041f4:	60fb      	str	r3, [r7, #12]
	Button_ini.MODE=Button_Mode_Regular_With_EXTI;
 80041f6:	2300      	movs	r3, #0
 80041f8:	743b      	strb	r3, [r7, #16]
	Button_Vector_Create(&Button_Vector,&Button_ini);
 80041fa:	463b      	mov	r3, r7
 80041fc:	4619      	mov	r1, r3
 80041fe:	4827      	ldr	r0, [pc, #156]	; (800429c <BUTTON_INI+0x110>)
 8004200:	f7fc fcc6 	bl	8000b90 <Button_Vector_Create>

	Button_ini.ID=Button_ID_SW2;
 8004204:	2303      	movs	r3, #3
 8004206:	703b      	strb	r3, [r7, #0]
	Button_ini.count_max=2;
 8004208:	2302      	movs	r3, #2
 800420a:	717b      	strb	r3, [r7, #5]
	Button_ini.EXTI_PIN=GPIO_PIN_3;
 800420c:	2308      	movs	r3, #8
 800420e:	813b      	strh	r3, [r7, #8]
	Button_ini.PIN=GPIO_PIN_4;
 8004210:	2310      	movs	r3, #16
 8004212:	817b      	strh	r3, [r7, #10]
	Button_ini.GPIO=GPIOB;
 8004214:	4b22      	ldr	r3, [pc, #136]	; (80042a0 <BUTTON_INI+0x114>)
 8004216:	60fb      	str	r3, [r7, #12]
	Button_ini.MODE=Button_Mode_Regular_With_EXTI;
 8004218:	2300      	movs	r3, #0
 800421a:	743b      	strb	r3, [r7, #16]
	Button_Vector_Create(&Button_Vector,&Button_ini);
 800421c:	463b      	mov	r3, r7
 800421e:	4619      	mov	r1, r3
 8004220:	481e      	ldr	r0, [pc, #120]	; (800429c <BUTTON_INI+0x110>)
 8004222:	f7fc fcb5 	bl	8000b90 <Button_Vector_Create>

	Button_ini.ID=Button_ID_SW3;
 8004226:	2304      	movs	r3, #4
 8004228:	703b      	strb	r3, [r7, #0]
	Button_ini.count_max=2;
 800422a:	2302      	movs	r3, #2
 800422c:	717b      	strb	r3, [r7, #5]
	Button_ini.EXTI_PIN=GPIO_PIN_3;
 800422e:	2308      	movs	r3, #8
 8004230:	813b      	strh	r3, [r7, #8]
	Button_ini.PIN=GPIO_PIN_5;
 8004232:	2320      	movs	r3, #32
 8004234:	817b      	strh	r3, [r7, #10]
	Button_ini.GPIO=GPIOB;
 8004236:	4b1a      	ldr	r3, [pc, #104]	; (80042a0 <BUTTON_INI+0x114>)
 8004238:	60fb      	str	r3, [r7, #12]
	Button_ini.MODE=Button_Mode_Regular_With_EXTI;
 800423a:	2300      	movs	r3, #0
 800423c:	743b      	strb	r3, [r7, #16]
	Button_Vector_Create(&Button_Vector,&Button_ini);
 800423e:	463b      	mov	r3, r7
 8004240:	4619      	mov	r1, r3
 8004242:	4816      	ldr	r0, [pc, #88]	; (800429c <BUTTON_INI+0x110>)
 8004244:	f7fc fca4 	bl	8000b90 <Button_Vector_Create>

	Button_ini.ID=Button_ID_SW7;
 8004248:	2305      	movs	r3, #5
 800424a:	703b      	strb	r3, [r7, #0]
	Button_ini.count_max=2;
 800424c:	2302      	movs	r3, #2
 800424e:	717b      	strb	r3, [r7, #5]
	Button_ini.EXTI_PIN=GPIO_PIN_3;
 8004250:	2308      	movs	r3, #8
 8004252:	813b      	strh	r3, [r7, #8]
	Button_ini.PIN=GPIO_PIN_8;
 8004254:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004258:	817b      	strh	r3, [r7, #10]
	Button_ini.GPIO=GPIOB;
 800425a:	4b11      	ldr	r3, [pc, #68]	; (80042a0 <BUTTON_INI+0x114>)
 800425c:	60fb      	str	r3, [r7, #12]
	Button_ini.MODE=Button_Mode_Regular_With_EXTI;
 800425e:	2300      	movs	r3, #0
 8004260:	743b      	strb	r3, [r7, #16]
	Button_Vector_Create(&Button_Vector,&Button_ini);
 8004262:	463b      	mov	r3, r7
 8004264:	4619      	mov	r1, r3
 8004266:	480d      	ldr	r0, [pc, #52]	; (800429c <BUTTON_INI+0x110>)
 8004268:	f7fc fc92 	bl	8000b90 <Button_Vector_Create>

	Button_ini.ID=Button_Gerkon_ID;
 800426c:	2306      	movs	r3, #6
 800426e:	703b      	strb	r3, [r7, #0]
	Button_ini.count_max=2;
 8004270:	2302      	movs	r3, #2
 8004272:	717b      	strb	r3, [r7, #5]
	Button_ini.EXTI_PIN=GPIO_PIN_2;
 8004274:	2304      	movs	r3, #4
 8004276:	813b      	strh	r3, [r7, #8]
	Button_ini.PIN=GPIO_PIN_2;
 8004278:	2304      	movs	r3, #4
 800427a:	817b      	strh	r3, [r7, #10]
	Button_ini.GPIO=GPIOA;
 800427c:	4b06      	ldr	r3, [pc, #24]	; (8004298 <BUTTON_INI+0x10c>)
 800427e:	60fb      	str	r3, [r7, #12]
	Button_ini.MODE=Button_Mode_Regular_With_EXTI;
 8004280:	2300      	movs	r3, #0
 8004282:	743b      	strb	r3, [r7, #16]
	Button_Vector_Create(&Button_Vector,&Button_ini);
 8004284:	463b      	mov	r3, r7
 8004286:	4619      	mov	r1, r3
 8004288:	4804      	ldr	r0, [pc, #16]	; (800429c <BUTTON_INI+0x110>)
 800428a:	f7fc fc81 	bl	8000b90 <Button_Vector_Create>


}
 800428e:	bf00      	nop
 8004290:	3718      	adds	r7, #24
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	40010800 	.word	0x40010800
 800429c:	20000514 	.word	0x20000514
 80042a0:	40010c00 	.word	0x40010c00

080042a4 <Encoder_INI>:
//---------------------------------------------------------------------------------
void Encoder_INI(void){
 80042a4:	b580      	push	{r7, lr}
 80042a6:	af00      	add	r7, sp, #0
	Encoder_P2.ID=Encoder_ID_P2;
 80042a8:	4b2d      	ldr	r3, [pc, #180]	; (8004360 <Encoder_INI+0xbc>)
 80042aa:	2201      	movs	r2, #1
 80042ac:	701a      	strb	r2, [r3, #0]
	Encoder_P2.Button.count_max=2;
 80042ae:	4b2c      	ldr	r3, [pc, #176]	; (8004360 <Encoder_INI+0xbc>)
 80042b0:	2202      	movs	r2, #2
 80042b2:	725a      	strb	r2, [r3, #9]
	Encoder_P2.Button.EXTI_PIN=GPIO_PIN_14;
 80042b4:	4b2a      	ldr	r3, [pc, #168]	; (8004360 <Encoder_INI+0xbc>)
 80042b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80042ba:	819a      	strh	r2, [r3, #12]
	Encoder_P2.Button.PIN=GPIO_PIN_15;
 80042bc:	4b28      	ldr	r3, [pc, #160]	; (8004360 <Encoder_INI+0xbc>)
 80042be:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80042c2:	81da      	strh	r2, [r3, #14]
	Encoder_P2.Button.GPIO=GPIOB;
 80042c4:	4b26      	ldr	r3, [pc, #152]	; (8004360 <Encoder_INI+0xbc>)
 80042c6:	4a27      	ldr	r2, [pc, #156]	; (8004364 <Encoder_INI+0xc0>)
 80042c8:	611a      	str	r2, [r3, #16]
	Encoder_P2.Button.Presed_counter_max=3;
 80042ca:	4b25      	ldr	r3, [pc, #148]	; (8004360 <Encoder_INI+0xbc>)
 80042cc:	2203      	movs	r2, #3
 80042ce:	71da      	strb	r2, [r3, #7]
	Encoder_P2.Button.MODE=Button_Mode_Encoder;
 80042d0:	4b23      	ldr	r3, [pc, #140]	; (8004360 <Encoder_INI+0xbc>)
 80042d2:	2202      	movs	r2, #2
 80042d4:	751a      	strb	r2, [r3, #20]

	Encoder_P2.Rotary_Switch.State=0;
 80042d6:	4a22      	ldr	r2, [pc, #136]	; (8004360 <Encoder_INI+0xbc>)
 80042d8:	7f53      	ldrb	r3, [r2, #29]
 80042da:	f36f 0300 	bfc	r3, #0, #1
 80042de:	7753      	strb	r3, [r2, #29]
	Encoder_P2.Rotary_Switch.EXTI_PIN=GPIO_PIN_12;
 80042e0:	4b1f      	ldr	r3, [pc, #124]	; (8004360 <Encoder_INI+0xbc>)
 80042e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80042e6:	841a      	strh	r2, [r3, #32]
	Encoder_P2.Rotary_Switch.PIN=GPIO_PIN_13;
 80042e8:	4b1d      	ldr	r3, [pc, #116]	; (8004360 <Encoder_INI+0xbc>)
 80042ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80042ee:	845a      	strh	r2, [r3, #34]	; 0x22
	Encoder_P2.Rotary_Switch.GPIO=GPIOB;
 80042f0:	4b1b      	ldr	r3, [pc, #108]	; (8004360 <Encoder_INI+0xbc>)
 80042f2:	4a1c      	ldr	r2, [pc, #112]	; (8004364 <Encoder_INI+0xc0>)
 80042f4:	625a      	str	r2, [r3, #36]	; 0x24
	Encoder_P2.Rotary_Switch.Rotary_Switch_Direcion=Reverse;
 80042f6:	4b1a      	ldr	r3, [pc, #104]	; (8004360 <Encoder_INI+0xbc>)
 80042f8:	2201      	movs	r2, #1
 80042fa:	779a      	strb	r2, [r3, #30]

	Encoder_ini(&Encoder_P2);
 80042fc:	4818      	ldr	r0, [pc, #96]	; (8004360 <Encoder_INI+0xbc>)
 80042fe:	f7fc fd02 	bl	8000d06 <Encoder_ini>


	Encoder_P1.ID=Encoder_ID_P1;
 8004302:	4b19      	ldr	r3, [pc, #100]	; (8004368 <Encoder_INI+0xc4>)
 8004304:	2200      	movs	r2, #0
 8004306:	701a      	strb	r2, [r3, #0]
	Encoder_P1.Button.count_max=2;
 8004308:	4b17      	ldr	r3, [pc, #92]	; (8004368 <Encoder_INI+0xc4>)
 800430a:	2202      	movs	r2, #2
 800430c:	725a      	strb	r2, [r3, #9]
	Encoder_P1.Button.EXTI_PIN=GPIO_PIN_3;
 800430e:	4b16      	ldr	r3, [pc, #88]	; (8004368 <Encoder_INI+0xc4>)
 8004310:	2208      	movs	r2, #8
 8004312:	819a      	strh	r2, [r3, #12]
	Encoder_P1.Button.PIN=GPIO_PIN_12;
 8004314:	4b14      	ldr	r3, [pc, #80]	; (8004368 <Encoder_INI+0xc4>)
 8004316:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800431a:	81da      	strh	r2, [r3, #14]
	Encoder_P1.Button.GPIO=GPIOA;
 800431c:	4b12      	ldr	r3, [pc, #72]	; (8004368 <Encoder_INI+0xc4>)
 800431e:	4a13      	ldr	r2, [pc, #76]	; (800436c <Encoder_INI+0xc8>)
 8004320:	611a      	str	r2, [r3, #16]
	Encoder_P1.Button.Presed_counter_max=3;
 8004322:	4b11      	ldr	r3, [pc, #68]	; (8004368 <Encoder_INI+0xc4>)
 8004324:	2203      	movs	r2, #3
 8004326:	71da      	strb	r2, [r3, #7]
	Encoder_P1.Button.MODE=Button_Mode_Encoder;
 8004328:	4b0f      	ldr	r3, [pc, #60]	; (8004368 <Encoder_INI+0xc4>)
 800432a:	2202      	movs	r2, #2
 800432c:	751a      	strb	r2, [r3, #20]

	Encoder_P1.Rotary_Switch.State=0;
 800432e:	4a0e      	ldr	r2, [pc, #56]	; (8004368 <Encoder_INI+0xc4>)
 8004330:	7f53      	ldrb	r3, [r2, #29]
 8004332:	f36f 0300 	bfc	r3, #0, #1
 8004336:	7753      	strb	r3, [r2, #29]
	Encoder_P1.Rotary_Switch.EXTI_PIN=GPIO_PIN_15;
 8004338:	4b0b      	ldr	r3, [pc, #44]	; (8004368 <Encoder_INI+0xc4>)
 800433a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800433e:	841a      	strh	r2, [r3, #32]
	Encoder_P1.Rotary_Switch.PIN=GPIO_PIN_11;
 8004340:	4b09      	ldr	r3, [pc, #36]	; (8004368 <Encoder_INI+0xc4>)
 8004342:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004346:	845a      	strh	r2, [r3, #34]	; 0x22
	Encoder_P1.Rotary_Switch.GPIO=GPIOA;
 8004348:	4b07      	ldr	r3, [pc, #28]	; (8004368 <Encoder_INI+0xc4>)
 800434a:	4a08      	ldr	r2, [pc, #32]	; (800436c <Encoder_INI+0xc8>)
 800434c:	625a      	str	r2, [r3, #36]	; 0x24
	Encoder_P1.Rotary_Switch.Rotary_Switch_Direcion=Direct;
 800434e:	4b06      	ldr	r3, [pc, #24]	; (8004368 <Encoder_INI+0xc4>)
 8004350:	2200      	movs	r2, #0
 8004352:	779a      	strb	r2, [r3, #30]

	Encoder_ini(&Encoder_P1);
 8004354:	4804      	ldr	r0, [pc, #16]	; (8004368 <Encoder_INI+0xc4>)
 8004356:	f7fc fcd6 	bl	8000d06 <Encoder_ini>

}
 800435a:	bf00      	nop
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	200004ac 	.word	0x200004ac
 8004364:	40010c00 	.word	0x40010c00
 8004368:	200004e0 	.word	0x200004e0
 800436c:	40010800 	.word	0x40010800

08004370 <MENU_INI>:
//----------------------------------------------------------------------------
void MENU_INI(void){
 8004370:	b580      	push	{r7, lr}
 8004372:	b086      	sub	sp, #24
 8004374:	af00      	add	r7, sp, #0

	struct Menu_List_Element_Vector Menu_List_Element_Vector_ini;


	Menu_List_Element_Vector_ini.name="T_Corect_Manual";
 8004376:	4b8b      	ldr	r3, [pc, #556]	; (80045a4 <MENU_INI+0x234>)
 8004378:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Iron.Temperature_Corection_C.Manual;
 800437a:	4b8b      	ldr	r3, [pc, #556]	; (80045a8 <MENU_INI+0x238>)
 800437c:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=INT;
 800437e:	2300      	movs	r3, #0
 8004380:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 8004382:	2301      	movs	r3, #1
 8004384:	747b      	strb	r3, [r7, #17]
	UI_Menu_List_Element_Create(&Soldering_Iron_Menu_Vector,&Menu_List_Element_Vector_ini);
 8004386:	1d3b      	adds	r3, r7, #4
 8004388:	4619      	mov	r1, r3
 800438a:	4888      	ldr	r0, [pc, #544]	; (80045ac <MENU_INI+0x23c>)
 800438c:	f7ff fc4a 	bl	8003c24 <UI_Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="Preset1";
 8004390:	4b87      	ldr	r3, [pc, #540]	; (80045b0 <MENU_INI+0x240>)
 8004392:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Iron.Temperature_Presets_C.Preset1;
 8004394:	4b87      	ldr	r3, [pc, #540]	; (80045b4 <MENU_INI+0x244>)
 8004396:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=UINT16;
 8004398:	2302      	movs	r3, #2
 800439a:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 800439c:	2301      	movs	r3, #1
 800439e:	747b      	strb	r3, [r7, #17]
	UI_Menu_List_Element_Create(&Soldering_Iron_Menu_Vector,&Menu_List_Element_Vector_ini);
 80043a0:	1d3b      	adds	r3, r7, #4
 80043a2:	4619      	mov	r1, r3
 80043a4:	4881      	ldr	r0, [pc, #516]	; (80045ac <MENU_INI+0x23c>)
 80043a6:	f7ff fc3d 	bl	8003c24 <UI_Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="T_Corect_Pres1";
 80043aa:	4b83      	ldr	r3, [pc, #524]	; (80045b8 <MENU_INI+0x248>)
 80043ac:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Iron.Temperature_Corection_C.Preset1;
 80043ae:	4b83      	ldr	r3, [pc, #524]	; (80045bc <MENU_INI+0x24c>)
 80043b0:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=INT;
 80043b2:	2300      	movs	r3, #0
 80043b4:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 80043b6:	2301      	movs	r3, #1
 80043b8:	747b      	strb	r3, [r7, #17]
	UI_Menu_List_Element_Create(&Soldering_Iron_Menu_Vector,&Menu_List_Element_Vector_ini);
 80043ba:	1d3b      	adds	r3, r7, #4
 80043bc:	4619      	mov	r1, r3
 80043be:	487b      	ldr	r0, [pc, #492]	; (80045ac <MENU_INI+0x23c>)
 80043c0:	f7ff fc30 	bl	8003c24 <UI_Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="Preset2";
 80043c4:	4b7e      	ldr	r3, [pc, #504]	; (80045c0 <MENU_INI+0x250>)
 80043c6:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Iron.Temperature_Presets_C.Preset2;
 80043c8:	4b7e      	ldr	r3, [pc, #504]	; (80045c4 <MENU_INI+0x254>)
 80043ca:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=UINT16;
 80043cc:	2302      	movs	r3, #2
 80043ce:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 80043d0:	2301      	movs	r3, #1
 80043d2:	747b      	strb	r3, [r7, #17]
	UI_Menu_List_Element_Create(&Soldering_Iron_Menu_Vector,&Menu_List_Element_Vector_ini);
 80043d4:	1d3b      	adds	r3, r7, #4
 80043d6:	4619      	mov	r1, r3
 80043d8:	4874      	ldr	r0, [pc, #464]	; (80045ac <MENU_INI+0x23c>)
 80043da:	f7ff fc23 	bl	8003c24 <UI_Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="T_Corect_Pres2";
 80043de:	4b7a      	ldr	r3, [pc, #488]	; (80045c8 <MENU_INI+0x258>)
 80043e0:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Iron.Temperature_Corection_C.Preset2;
 80043e2:	4b7a      	ldr	r3, [pc, #488]	; (80045cc <MENU_INI+0x25c>)
 80043e4:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=INT;
 80043e6:	2300      	movs	r3, #0
 80043e8:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 80043ea:	2301      	movs	r3, #1
 80043ec:	747b      	strb	r3, [r7, #17]
	UI_Menu_List_Element_Create(&Soldering_Iron_Menu_Vector,&Menu_List_Element_Vector_ini);
 80043ee:	1d3b      	adds	r3, r7, #4
 80043f0:	4619      	mov	r1, r3
 80043f2:	486e      	ldr	r0, [pc, #440]	; (80045ac <MENU_INI+0x23c>)
 80043f4:	f7ff fc16 	bl	8003c24 <UI_Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="Sleep_mode_T";
 80043f8:	4b75      	ldr	r3, [pc, #468]	; (80045d0 <MENU_INI+0x260>)
 80043fa:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Iron.Temperature_Presets_C.Sleep;
 80043fc:	4b75      	ldr	r3, [pc, #468]	; (80045d4 <MENU_INI+0x264>)
 80043fe:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=UINT16;
 8004400:	2302      	movs	r3, #2
 8004402:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 8004404:	2301      	movs	r3, #1
 8004406:	747b      	strb	r3, [r7, #17]
	UI_Menu_List_Element_Create(&Soldering_Iron_Menu_Vector,&Menu_List_Element_Vector_ini);
 8004408:	1d3b      	adds	r3, r7, #4
 800440a:	4619      	mov	r1, r3
 800440c:	4867      	ldr	r0, [pc, #412]	; (80045ac <MENU_INI+0x23c>)
 800440e:	f7ff fc09 	bl	8003c24 <UI_Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="Sleep_timer";
 8004412:	4b71      	ldr	r3, [pc, #452]	; (80045d8 <MENU_INI+0x268>)
 8004414:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Iron.Sleep_time;
 8004416:	4b71      	ldr	r3, [pc, #452]	; (80045dc <MENU_INI+0x26c>)
 8004418:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=UINT8;
 800441a:	2301      	movs	r3, #1
 800441c:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 800441e:	2301      	movs	r3, #1
 8004420:	747b      	strb	r3, [r7, #17]
	UI_Menu_List_Element_Create(&Soldering_Iron_Menu_Vector,&Menu_List_Element_Vector_ini);
 8004422:	1d3b      	adds	r3, r7, #4
 8004424:	4619      	mov	r1, r3
 8004426:	4861      	ldr	r0, [pc, #388]	; (80045ac <MENU_INI+0x23c>)
 8004428:	f7ff fbfc 	bl	8003c24 <UI_Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="Disable_timer";
 800442c:	4b6c      	ldr	r3, [pc, #432]	; (80045e0 <MENU_INI+0x270>)
 800442e:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Iron.Disable_time;
 8004430:	4b6c      	ldr	r3, [pc, #432]	; (80045e4 <MENU_INI+0x274>)
 8004432:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=UINT16;
 8004434:	2302      	movs	r3, #2
 8004436:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 8004438:	2301      	movs	r3, #1
 800443a:	747b      	strb	r3, [r7, #17]
	UI_Menu_List_Element_Create(&Soldering_Iron_Menu_Vector,&Menu_List_Element_Vector_ini);
 800443c:	1d3b      	adds	r3, r7, #4
 800443e:	4619      	mov	r1, r3
 8004440:	485a      	ldr	r0, [pc, #360]	; (80045ac <MENU_INI+0x23c>)
 8004442:	f7ff fbef 	bl	8003c24 <UI_Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="State";
 8004446:	4b68      	ldr	r3, [pc, #416]	; (80045e8 <MENU_INI+0x278>)
 8004448:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Iron.State;
 800444a:	4b68      	ldr	r3, [pc, #416]	; (80045ec <MENU_INI+0x27c>)
 800444c:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=BOOL;
 800444e:	2303      	movs	r3, #3
 8004450:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 8004452:	2301      	movs	r3, #1
 8004454:	747b      	strb	r3, [r7, #17]
	UI_Menu_List_Element_Create(&Soldering_Iron_Menu_Vector,&Menu_List_Element_Vector_ini);
 8004456:	1d3b      	adds	r3, r7, #4
 8004458:	4619      	mov	r1, r3
 800445a:	4854      	ldr	r0, [pc, #336]	; (80045ac <MENU_INI+0x23c>)
 800445c:	f7ff fbe2 	bl	8003c24 <UI_Menu_List_Element_Create>


	UI_Menu_List_Create(&Menu_List_Vector,&Soldering_Iron_Menu_Vector, " Soldering_Iron ");
 8004460:	4a63      	ldr	r2, [pc, #396]	; (80045f0 <MENU_INI+0x280>)
 8004462:	4952      	ldr	r1, [pc, #328]	; (80045ac <MENU_INI+0x23c>)
 8004464:	4863      	ldr	r0, [pc, #396]	; (80045f4 <MENU_INI+0x284>)
 8004466:	f7ff fd85 	bl	8003f74 <UI_Menu_List_Create>


	Menu_List_Element_Vector_ini.name="T_Corect_Manual";
 800446a:	4b4e      	ldr	r3, [pc, #312]	; (80045a4 <MENU_INI+0x234>)
 800446c:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Heat_Gun.Temperature_Corection_C.Manual;
 800446e:	4b62      	ldr	r3, [pc, #392]	; (80045f8 <MENU_INI+0x288>)
 8004470:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=INT;
 8004472:	2300      	movs	r3, #0
 8004474:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 8004476:	2301      	movs	r3, #1
 8004478:	747b      	strb	r3, [r7, #17]
	UI_Menu_List_Element_Create(&Soldering_Heat_Gun_Menu_Vector,&Menu_List_Element_Vector_ini);
 800447a:	1d3b      	adds	r3, r7, #4
 800447c:	4619      	mov	r1, r3
 800447e:	485f      	ldr	r0, [pc, #380]	; (80045fc <MENU_INI+0x28c>)
 8004480:	f7ff fbd0 	bl	8003c24 <UI_Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="Preset1";
 8004484:	4b4a      	ldr	r3, [pc, #296]	; (80045b0 <MENU_INI+0x240>)
 8004486:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Heat_Gun.Temperature_Presets_C.Preset1;
 8004488:	4b5d      	ldr	r3, [pc, #372]	; (8004600 <MENU_INI+0x290>)
 800448a:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=UINT16;
 800448c:	2302      	movs	r3, #2
 800448e:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 8004490:	2301      	movs	r3, #1
 8004492:	747b      	strb	r3, [r7, #17]
	UI_Menu_List_Element_Create(&Soldering_Heat_Gun_Menu_Vector,&Menu_List_Element_Vector_ini);
 8004494:	1d3b      	adds	r3, r7, #4
 8004496:	4619      	mov	r1, r3
 8004498:	4858      	ldr	r0, [pc, #352]	; (80045fc <MENU_INI+0x28c>)
 800449a:	f7ff fbc3 	bl	8003c24 <UI_Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="T_Corect_Pres1";
 800449e:	4b46      	ldr	r3, [pc, #280]	; (80045b8 <MENU_INI+0x248>)
 80044a0:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Heat_Gun.Temperature_Corection_C.Preset1;
 80044a2:	4b58      	ldr	r3, [pc, #352]	; (8004604 <MENU_INI+0x294>)
 80044a4:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=INT;
 80044a6:	2300      	movs	r3, #0
 80044a8:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 80044aa:	2301      	movs	r3, #1
 80044ac:	747b      	strb	r3, [r7, #17]
	UI_Menu_List_Element_Create(&Soldering_Heat_Gun_Menu_Vector,&Menu_List_Element_Vector_ini);
 80044ae:	1d3b      	adds	r3, r7, #4
 80044b0:	4619      	mov	r1, r3
 80044b2:	4852      	ldr	r0, [pc, #328]	; (80045fc <MENU_INI+0x28c>)
 80044b4:	f7ff fbb6 	bl	8003c24 <UI_Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="Preset2";
 80044b8:	4b41      	ldr	r3, [pc, #260]	; (80045c0 <MENU_INI+0x250>)
 80044ba:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Heat_Gun.Temperature_Presets_C.Preset2;
 80044bc:	4b52      	ldr	r3, [pc, #328]	; (8004608 <MENU_INI+0x298>)
 80044be:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=UINT16;
 80044c0:	2302      	movs	r3, #2
 80044c2:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 80044c4:	2301      	movs	r3, #1
 80044c6:	747b      	strb	r3, [r7, #17]
	UI_Menu_List_Element_Create(&Soldering_Heat_Gun_Menu_Vector,&Menu_List_Element_Vector_ini);
 80044c8:	1d3b      	adds	r3, r7, #4
 80044ca:	4619      	mov	r1, r3
 80044cc:	484b      	ldr	r0, [pc, #300]	; (80045fc <MENU_INI+0x28c>)
 80044ce:	f7ff fba9 	bl	8003c24 <UI_Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="T_Corect_Pres2";
 80044d2:	4b3d      	ldr	r3, [pc, #244]	; (80045c8 <MENU_INI+0x258>)
 80044d4:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Heat_Gun.Temperature_Corection_C.Preset2;
 80044d6:	4b4d      	ldr	r3, [pc, #308]	; (800460c <MENU_INI+0x29c>)
 80044d8:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=INT;
 80044da:	2300      	movs	r3, #0
 80044dc:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 80044de:	2301      	movs	r3, #1
 80044e0:	747b      	strb	r3, [r7, #17]
	UI_Menu_List_Element_Create(&Soldering_Heat_Gun_Menu_Vector,&Menu_List_Element_Vector_ini);
 80044e2:	1d3b      	adds	r3, r7, #4
 80044e4:	4619      	mov	r1, r3
 80044e6:	4845      	ldr	r0, [pc, #276]	; (80045fc <MENU_INI+0x28c>)
 80044e8:	f7ff fb9c 	bl	8003c24 <UI_Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="T_Cooling_C";
 80044ec:	4b48      	ldr	r3, [pc, #288]	; (8004610 <MENU_INI+0x2a0>)
 80044ee:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Heat_Gun.Temperature_Coolling.C;
 80044f0:	4b48      	ldr	r3, [pc, #288]	; (8004614 <MENU_INI+0x2a4>)
 80044f2:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=UINT16;
 80044f4:	2302      	movs	r3, #2
 80044f6:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 80044f8:	2301      	movs	r3, #1
 80044fa:	747b      	strb	r3, [r7, #17]
	UI_Menu_List_Element_Create(&Soldering_Heat_Gun_Menu_Vector,&Menu_List_Element_Vector_ini);
 80044fc:	1d3b      	adds	r3, r7, #4
 80044fe:	4619      	mov	r1, r3
 8004500:	483e      	ldr	r0, [pc, #248]	; (80045fc <MENU_INI+0x28c>)
 8004502:	f7ff fb8f 	bl	8003c24 <UI_Menu_List_Element_Create>



	UI_Menu_List_Create(&Menu_List_Vector,&Soldering_Heat_Gun_Menu_Vector, " Heat_Gun ");
 8004506:	4a44      	ldr	r2, [pc, #272]	; (8004618 <MENU_INI+0x2a8>)
 8004508:	493c      	ldr	r1, [pc, #240]	; (80045fc <MENU_INI+0x28c>)
 800450a:	483a      	ldr	r0, [pc, #232]	; (80045f4 <MENU_INI+0x284>)
 800450c:	f7ff fd32 	bl	8003f74 <UI_Menu_List_Create>



	Menu_List_Element_Vector_ini.name="T_Corect_Manual";
 8004510:	4b24      	ldr	r3, [pc, #144]	; (80045a4 <MENU_INI+0x234>)
 8004512:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Separator.Temperature_Corection_C.Manual;
 8004514:	4b41      	ldr	r3, [pc, #260]	; (800461c <MENU_INI+0x2ac>)
 8004516:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=INT;
 8004518:	2300      	movs	r3, #0
 800451a:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 800451c:	2301      	movs	r3, #1
 800451e:	747b      	strb	r3, [r7, #17]
	UI_Menu_List_Element_Create(&Soldering_Separator_Menu_Vector, &Menu_List_Element_Vector_ini);
 8004520:	1d3b      	adds	r3, r7, #4
 8004522:	4619      	mov	r1, r3
 8004524:	483e      	ldr	r0, [pc, #248]	; (8004620 <MENU_INI+0x2b0>)
 8004526:	f7ff fb7d 	bl	8003c24 <UI_Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="Preset1";
 800452a:	4b21      	ldr	r3, [pc, #132]	; (80045b0 <MENU_INI+0x240>)
 800452c:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Separator.Temperature_Presets_C.Preset1;
 800452e:	4b3d      	ldr	r3, [pc, #244]	; (8004624 <MENU_INI+0x2b4>)
 8004530:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=UINT16;
 8004532:	2302      	movs	r3, #2
 8004534:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 8004536:	2301      	movs	r3, #1
 8004538:	747b      	strb	r3, [r7, #17]
	UI_Menu_List_Element_Create(&Soldering_Separator_Menu_Vector, &Menu_List_Element_Vector_ini);
 800453a:	1d3b      	adds	r3, r7, #4
 800453c:	4619      	mov	r1, r3
 800453e:	4838      	ldr	r0, [pc, #224]	; (8004620 <MENU_INI+0x2b0>)
 8004540:	f7ff fb70 	bl	8003c24 <UI_Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="T_Corect_Pres1";
 8004544:	4b1c      	ldr	r3, [pc, #112]	; (80045b8 <MENU_INI+0x248>)
 8004546:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Separator.Temperature_Corection_C.Preset1;
 8004548:	4b37      	ldr	r3, [pc, #220]	; (8004628 <MENU_INI+0x2b8>)
 800454a:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=INT;
 800454c:	2300      	movs	r3, #0
 800454e:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 8004550:	2301      	movs	r3, #1
 8004552:	747b      	strb	r3, [r7, #17]
	UI_Menu_List_Element_Create(&Soldering_Separator_Menu_Vector, &Menu_List_Element_Vector_ini);
 8004554:	1d3b      	adds	r3, r7, #4
 8004556:	4619      	mov	r1, r3
 8004558:	4831      	ldr	r0, [pc, #196]	; (8004620 <MENU_INI+0x2b0>)
 800455a:	f7ff fb63 	bl	8003c24 <UI_Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="Preset2";
 800455e:	4b18      	ldr	r3, [pc, #96]	; (80045c0 <MENU_INI+0x250>)
 8004560:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Separator.Temperature_Presets_C.Preset2;
 8004562:	4b32      	ldr	r3, [pc, #200]	; (800462c <MENU_INI+0x2bc>)
 8004564:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=UINT16;
 8004566:	2302      	movs	r3, #2
 8004568:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 800456a:	2301      	movs	r3, #1
 800456c:	747b      	strb	r3, [r7, #17]
	UI_Menu_List_Element_Create(&Soldering_Separator_Menu_Vector,&Menu_List_Element_Vector_ini);
 800456e:	1d3b      	adds	r3, r7, #4
 8004570:	4619      	mov	r1, r3
 8004572:	482b      	ldr	r0, [pc, #172]	; (8004620 <MENU_INI+0x2b0>)
 8004574:	f7ff fb56 	bl	8003c24 <UI_Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="T_Corect_Pres2";
 8004578:	4b13      	ldr	r3, [pc, #76]	; (80045c8 <MENU_INI+0x258>)
 800457a:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Separator.Temperature_Corection_C.Preset2;
 800457c:	4b2c      	ldr	r3, [pc, #176]	; (8004630 <MENU_INI+0x2c0>)
 800457e:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=INT;
 8004580:	2300      	movs	r3, #0
 8004582:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 8004584:	2301      	movs	r3, #1
 8004586:	747b      	strb	r3, [r7, #17]
	UI_Menu_List_Element_Create(&Soldering_Separator_Menu_Vector, &Menu_List_Element_Vector_ini);
 8004588:	1d3b      	adds	r3, r7, #4
 800458a:	4619      	mov	r1, r3
 800458c:	4824      	ldr	r0, [pc, #144]	; (8004620 <MENU_INI+0x2b0>)
 800458e:	f7ff fb49 	bl	8003c24 <UI_Menu_List_Element_Create>


	UI_Menu_List_Create(&Menu_List_Vector,&Soldering_Separator_Menu_Vector, " Separator ");
 8004592:	4a28      	ldr	r2, [pc, #160]	; (8004634 <MENU_INI+0x2c4>)
 8004594:	4922      	ldr	r1, [pc, #136]	; (8004620 <MENU_INI+0x2b0>)
 8004596:	4817      	ldr	r0, [pc, #92]	; (80045f4 <MENU_INI+0x284>)
 8004598:	f7ff fcec 	bl	8003f74 <UI_Menu_List_Create>

}
 800459c:	bf00      	nop
 800459e:	3718      	adds	r7, #24
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	0800987c 	.word	0x0800987c
 80045a8:	200005c4 	.word	0x200005c4
 80045ac:	2000051c 	.word	0x2000051c
 80045b0:	0800988c 	.word	0x0800988c
 80045b4:	200005b0 	.word	0x200005b0
 80045b8:	08009894 	.word	0x08009894
 80045bc:	200005c8 	.word	0x200005c8
 80045c0:	080098a4 	.word	0x080098a4
 80045c4:	200005b2 	.word	0x200005b2
 80045c8:	080098ac 	.word	0x080098ac
 80045cc:	200005cc 	.word	0x200005cc
 80045d0:	080098bc 	.word	0x080098bc
 80045d4:	200005b4 	.word	0x200005b4
 80045d8:	080098cc 	.word	0x080098cc
 80045dc:	20000604 	.word	0x20000604
 80045e0:	080098d8 	.word	0x080098d8
 80045e4:	20000606 	.word	0x20000606
 80045e8:	080098e8 	.word	0x080098e8
 80045ec:	20000608 	.word	0x20000608
 80045f0:	080098f0 	.word	0x080098f0
 80045f4:	20000558 	.word	0x20000558
 80045f8:	20000670 	.word	0x20000670
 80045fc:	20000530 	.word	0x20000530
 8004600:	2000065c 	.word	0x2000065c
 8004604:	20000674 	.word	0x20000674
 8004608:	2000065e 	.word	0x2000065e
 800460c:	20000678 	.word	0x20000678
 8004610:	08009904 	.word	0x08009904
 8004614:	200006a2 	.word	0x200006a2
 8004618:	08009910 	.word	0x08009910
 800461c:	2000070c 	.word	0x2000070c
 8004620:	20000544 	.word	0x20000544
 8004624:	200006f8 	.word	0x200006f8
 8004628:	20000710 	.word	0x20000710
 800462c:	200006fa 	.word	0x200006fa
 8004630:	20000714 	.word	0x20000714
 8004634:	0800991c 	.word	0x0800991c

08004638 <OLED_INI>:
//----------------------------------------------------------------------------
void OLED_INI(void){
 8004638:	b580      	push	{r7, lr}
 800463a:	af00      	add	r7, sp, #0
	  OLED1.hi2c=&hi2c1;
 800463c:	4b05      	ldr	r3, [pc, #20]	; (8004654 <OLED_INI+0x1c>)
 800463e:	4a06      	ldr	r2, [pc, #24]	; (8004658 <OLED_INI+0x20>)
 8004640:	601a      	str	r2, [r3, #0]
	  OLED_Search_Adress(&OLED1);
 8004642:	4804      	ldr	r0, [pc, #16]	; (8004654 <OLED_INI+0x1c>)
 8004644:	f7fc fd27 	bl	8001096 <OLED_Search_Adress>
	  OLED_ini(&OLED1);
 8004648:	4802      	ldr	r0, [pc, #8]	; (8004654 <OLED_INI+0x1c>)
 800464a:	f7fc fd46 	bl	80010da <OLED_ini>
}
 800464e:	bf00      	nop
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	200004a4 	.word	0x200004a4
 8004658:	20000330 	.word	0x20000330

0800465c <Soldering_Iron_INI>:
//----------------------------------------------------------------------------
void Soldering_Iron_INI(uint8_t Flash_Read_Status){
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	4603      	mov	r3, r0
 8004664:	71fb      	strb	r3, [r7, #7]

	Soldering_Iron.PID.KP=Soldering_Iron_PID_KP;
 8004666:	4b3f      	ldr	r3, [pc, #252]	; (8004764 <Soldering_Iron_INI+0x108>)
 8004668:	4a3f      	ldr	r2, [pc, #252]	; (8004768 <Soldering_Iron_INI+0x10c>)
 800466a:	601a      	str	r2, [r3, #0]
	Soldering_Iron.PID.KI=Soldering_Iron_PID_KI;
 800466c:	4b3d      	ldr	r3, [pc, #244]	; (8004764 <Soldering_Iron_INI+0x108>)
 800466e:	4a3f      	ldr	r2, [pc, #252]	; (800476c <Soldering_Iron_INI+0x110>)
 8004670:	605a      	str	r2, [r3, #4]
	Soldering_Iron.PID.KD=Soldering_Iron_PID_KD;
 8004672:	4b3c      	ldr	r3, [pc, #240]	; (8004764 <Soldering_Iron_INI+0x108>)
 8004674:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004678:	609a      	str	r2, [r3, #8]
	Soldering_Iron.PID.dt=0.1;
 800467a:	4b3a      	ldr	r3, [pc, #232]	; (8004764 <Soldering_Iron_INI+0x108>)
 800467c:	4a3c      	ldr	r2, [pc, #240]	; (8004770 <Soldering_Iron_INI+0x114>)
 800467e:	60da      	str	r2, [r3, #12]
	Soldering_Iron.PID.MAX_Control=350;
 8004680:	4b38      	ldr	r3, [pc, #224]	; (8004764 <Soldering_Iron_INI+0x108>)
 8004682:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8004686:	821a      	strh	r2, [r3, #16]

	Soldering_Iron.Filter.Filter_Mode=Nine_Samples;
 8004688:	4b36      	ldr	r3, [pc, #216]	; (8004764 <Soldering_Iron_INI+0x108>)
 800468a:	2200      	movs	r2, #0
 800468c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Soldering_Iron.Filter.k_min=0.1;
 8004690:	4b34      	ldr	r3, [pc, #208]	; (8004764 <Soldering_Iron_INI+0x108>)
 8004692:	4a37      	ldr	r2, [pc, #220]	; (8004770 <Soldering_Iron_INI+0x114>)
 8004694:	629a      	str	r2, [r3, #40]	; 0x28
	Soldering_Iron.Filter.k_max=0.8;
 8004696:	4b33      	ldr	r3, [pc, #204]	; (8004764 <Soldering_Iron_INI+0x108>)
 8004698:	4a36      	ldr	r2, [pc, #216]	; (8004774 <Soldering_Iron_INI+0x118>)
 800469a:	62da      	str	r2, [r3, #44]	; 0x2c
	Soldering_Iron.Filter.Val_Delata=30;
 800469c:	4b31      	ldr	r3, [pc, #196]	; (8004764 <Soldering_Iron_INI+0x108>)
 800469e:	4a36      	ldr	r2, [pc, #216]	; (8004778 <Soldering_Iron_INI+0x11c>)
 80046a0:	635a      	str	r2, [r3, #52]	; 0x34
	Soldering_Iron.Filter.mass=&ADC_Data[4];
 80046a2:	4b30      	ldr	r3, [pc, #192]	; (8004764 <Soldering_Iron_INI+0x108>)
 80046a4:	4a35      	ldr	r2, [pc, #212]	; (800477c <Soldering_Iron_INI+0x120>)
 80046a6:	641a      	str	r2, [r3, #64]	; 0x40

	Soldering_Iron.PWM_htim=&htim2;
 80046a8:	4b2e      	ldr	r3, [pc, #184]	; (8004764 <Soldering_Iron_INI+0x108>)
 80046aa:	4a35      	ldr	r2, [pc, #212]	; (8004780 <Soldering_Iron_INI+0x124>)
 80046ac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

	Soldering_Iron.Full_Power_Button.ID=Full_Power_Button_ID;
 80046b0:	4b2c      	ldr	r3, [pc, #176]	; (8004764 <Soldering_Iron_INI+0x108>)
 80046b2:	2207      	movs	r2, #7
 80046b4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	Soldering_Iron.Full_Power_Button.count_max=2;
 80046b8:	4b2a      	ldr	r3, [pc, #168]	; (8004764 <Soldering_Iron_INI+0x108>)
 80046ba:	2202      	movs	r2, #2
 80046bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	Soldering_Iron.Full_Power_Button.EXTI_PIN=GPIO_PIN_4;
 80046c0:	4b28      	ldr	r3, [pc, #160]	; (8004764 <Soldering_Iron_INI+0x108>)
 80046c2:	2210      	movs	r2, #16
 80046c4:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	Soldering_Iron.Full_Power_Button.PIN=GPIO_PIN_4;
 80046c8:	4b26      	ldr	r3, [pc, #152]	; (8004764 <Soldering_Iron_INI+0x108>)
 80046ca:	2210      	movs	r2, #16
 80046cc:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	Soldering_Iron.Full_Power_Button.GPIO=GPIOA;
 80046d0:	4b24      	ldr	r3, [pc, #144]	; (8004764 <Soldering_Iron_INI+0x108>)
 80046d2:	4a2c      	ldr	r2, [pc, #176]	; (8004784 <Soldering_Iron_INI+0x128>)
 80046d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	Soldering_Iron.Full_Power_Button.MODE=Button_Mode_Regular_Without_EXTI;
 80046d8:	4b22      	ldr	r3, [pc, #136]	; (8004764 <Soldering_Iron_INI+0x108>)
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

	Soldering_Iron.VS.EXTI_PIN=GPIO_PIN_5;
 80046e0:	4b20      	ldr	r3, [pc, #128]	; (8004764 <Soldering_Iron_INI+0x108>)
 80046e2:	2220      	movs	r2, #32
 80046e4:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	Soldering_Iron.VS.GPIO=GPIOA;
 80046e8:	4b1e      	ldr	r3, [pc, #120]	; (8004764 <Soldering_Iron_INI+0x108>)
 80046ea:	4a26      	ldr	r2, [pc, #152]	; (8004784 <Soldering_Iron_INI+0x128>)
 80046ec:	675a      	str	r2, [r3, #116]	; 0x74
	Soldering_Iron.VS.State=3;
 80046ee:	4b1d      	ldr	r3, [pc, #116]	; (8004764 <Soldering_Iron_INI+0x108>)
 80046f0:	2203      	movs	r2, #3
 80046f2:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	Soldering_Iron.VS.Prew_State=4;
 80046f6:	4b1b      	ldr	r3, [pc, #108]	; (8004764 <Soldering_Iron_INI+0x108>)
 80046f8:	2204      	movs	r2, #4
 80046fa:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b

	Soldering_Iron.MODE=MANUAL;
 80046fe:	4b19      	ldr	r3, [pc, #100]	; (8004764 <Soldering_Iron_INI+0x108>)
 8004700:	2200      	movs	r2, #0
 8004702:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

	Soldering_Iron.Temperature_Converting.Coeff=Soldering_Iron_Temperature_Converting_Coeff;
 8004706:	4b17      	ldr	r3, [pc, #92]	; (8004764 <Soldering_Iron_INI+0x108>)
 8004708:	4a1f      	ldr	r2, [pc, #124]	; (8004788 <Soldering_Iron_INI+0x12c>)
 800470a:	659a      	str	r2, [r3, #88]	; 0x58

	if(Flash_Read_Status!=HAL_OK){							//if Data was read incorrect from flash reinitialize all user parameters
 800470c:	79fb      	ldrb	r3, [r7, #7]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d01d      	beq.n	800474e <Soldering_Iron_INI+0xf2>
		Soldering_Iron.Temperature_Presets_C.Manual=100;
 8004712:	4b14      	ldr	r3, [pc, #80]	; (8004764 <Soldering_Iron_INI+0x108>)
 8004714:	2264      	movs	r2, #100	; 0x64
 8004716:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		Soldering_Iron.Temperature_Presets_C.Preset1=150;
 800471a:	4b12      	ldr	r3, [pc, #72]	; (8004764 <Soldering_Iron_INI+0x108>)
 800471c:	2296      	movs	r2, #150	; 0x96
 800471e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		Soldering_Iron.Temperature_Presets_C.Preset2=300;
 8004722:	4b10      	ldr	r3, [pc, #64]	; (8004764 <Soldering_Iron_INI+0x108>)
 8004724:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004728:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

		Soldering_Iron.Temperature_Presets_C.Sleep=100;
 800472c:	4b0d      	ldr	r3, [pc, #52]	; (8004764 <Soldering_Iron_INI+0x108>)
 800472e:	2264      	movs	r2, #100	; 0x64
 8004730:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		Soldering_Iron.Sleep_time=200;
 8004734:	4b0b      	ldr	r3, [pc, #44]	; (8004764 <Soldering_Iron_INI+0x108>)
 8004736:	22c8      	movs	r2, #200	; 0xc8
 8004738:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		Soldering_Iron.Disable_time=400;
 800473c:	4b09      	ldr	r3, [pc, #36]	; (8004764 <Soldering_Iron_INI+0x108>)
 800473e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004742:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e

		Soldering_Iron.Flash_Key=0x0801F802;
 8004746:	4b07      	ldr	r3, [pc, #28]	; (8004764 <Soldering_Iron_INI+0x108>)
 8004748:	4a10      	ldr	r2, [pc, #64]	; (800478c <Soldering_Iron_INI+0x130>)
 800474a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	}
	Solder_Iron_Flash_Read_Manual_Temperature(&Soldering_Iron);	//read Last manual temperature
 800474e:	4805      	ldr	r0, [pc, #20]	; (8004764 <Soldering_Iron_INI+0x108>)
 8004750:	f7fd fcd0 	bl	80020f4 <Solder_Iron_Flash_Read_Manual_Temperature>
	Solder_Iron_ini(&Soldering_Iron);
 8004754:	4803      	ldr	r0, [pc, #12]	; (8004764 <Soldering_Iron_INI+0x108>)
 8004756:	f7fd fb19 	bl	8001d8c <Solder_Iron_ini>
}
 800475a:	bf00      	nop
 800475c:	3708      	adds	r7, #8
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	20000568 	.word	0x20000568
 8004768:	40a00000 	.word	0x40a00000
 800476c:	3d4ccccd 	.word	0x3d4ccccd
 8004770:	3dcccccd 	.word	0x3dcccccd
 8004774:	3f4ccccd 	.word	0x3f4ccccd
 8004778:	41f00000 	.word	0x41f00000
 800477c:	20000754 	.word	0x20000754
 8004780:	200003cc 	.word	0x200003cc
 8004784:	40010800 	.word	0x40010800
 8004788:	41066666 	.word	0x41066666
 800478c:	0801f802 	.word	0x0801f802

08004790 <PAC_INI>:
//----------------------------------------------------------------------------
void PAC_INI(){
 8004790:	b580      	push	{r7, lr}
 8004792:	af00      	add	r7, sp, #0
	PAC.ZCD.EXTI_PIN=GPIO_PIN_1;
 8004794:	4b05      	ldr	r3, [pc, #20]	; (80047ac <PAC_INI+0x1c>)
 8004796:	2202      	movs	r2, #2
 8004798:	811a      	strh	r2, [r3, #8]
	PAC.ZCD.GPIO=GPIOB;
 800479a:	4b04      	ldr	r3, [pc, #16]	; (80047ac <PAC_INI+0x1c>)
 800479c:	4a04      	ldr	r2, [pc, #16]	; (80047b0 <PAC_INI+0x20>)
 800479e:	60da      	str	r2, [r3, #12]
	PAC_ini(&PAC);
 80047a0:	4802      	ldr	r0, [pc, #8]	; (80047ac <PAC_INI+0x1c>)
 80047a2:	f7fd f83a 	bl	800181a <PAC_ini>

}
 80047a6:	bf00      	nop
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	20000738 	.word	0x20000738
 80047b0:	40010c00 	.word	0x40010c00

080047b4 <Soldering_Heat_Gun_INI>:
//----------------------------------------------------------------------------
void Soldering_Heat_Gun_INI(uint8_t Flash_Read_Status){
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b086      	sub	sp, #24
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	4603      	mov	r3, r0
 80047bc:	71fb      	strb	r3, [r7, #7]

	Soldering_Heat_Gun.PID.KP=Soldering_Heat_Gun_PID_KP;
 80047be:	4b35      	ldr	r3, [pc, #212]	; (8004894 <Soldering_Heat_Gun_INI+0xe0>)
 80047c0:	4a35      	ldr	r2, [pc, #212]	; (8004898 <Soldering_Heat_Gun_INI+0xe4>)
 80047c2:	601a      	str	r2, [r3, #0]
	Soldering_Heat_Gun.PID.KI=Soldering_Heat_Gun_PID_KI;
 80047c4:	4b33      	ldr	r3, [pc, #204]	; (8004894 <Soldering_Heat_Gun_INI+0xe0>)
 80047c6:	4a35      	ldr	r2, [pc, #212]	; (800489c <Soldering_Heat_Gun_INI+0xe8>)
 80047c8:	605a      	str	r2, [r3, #4]
	Soldering_Heat_Gun.PID.KD=Soldering_Heat_Gun_PID_KD;
 80047ca:	4b32      	ldr	r3, [pc, #200]	; (8004894 <Soldering_Heat_Gun_INI+0xe0>)
 80047cc:	4a34      	ldr	r2, [pc, #208]	; (80048a0 <Soldering_Heat_Gun_INI+0xec>)
 80047ce:	609a      	str	r2, [r3, #8]
	Soldering_Heat_Gun.PID.dt=0.1;
 80047d0:	4b30      	ldr	r3, [pc, #192]	; (8004894 <Soldering_Heat_Gun_INI+0xe0>)
 80047d2:	4a34      	ldr	r2, [pc, #208]	; (80048a4 <Soldering_Heat_Gun_INI+0xf0>)
 80047d4:	60da      	str	r2, [r3, #12]


	Soldering_Heat_Gun.Filter.Filter_Mode=Three_Samples;
 80047d6:	4b2f      	ldr	r3, [pc, #188]	; (8004894 <Soldering_Heat_Gun_INI+0xe0>)
 80047d8:	2201      	movs	r2, #1
 80047da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Soldering_Heat_Gun.Filter.k_min=0.03;
 80047de:	4b2d      	ldr	r3, [pc, #180]	; (8004894 <Soldering_Heat_Gun_INI+0xe0>)
 80047e0:	4a31      	ldr	r2, [pc, #196]	; (80048a8 <Soldering_Heat_Gun_INI+0xf4>)
 80047e2:	629a      	str	r2, [r3, #40]	; 0x28
	Soldering_Heat_Gun.Filter.k_max=0.8;
 80047e4:	4b2b      	ldr	r3, [pc, #172]	; (8004894 <Soldering_Heat_Gun_INI+0xe0>)
 80047e6:	4a31      	ldr	r2, [pc, #196]	; (80048ac <Soldering_Heat_Gun_INI+0xf8>)
 80047e8:	62da      	str	r2, [r3, #44]	; 0x2c
	Soldering_Heat_Gun.Filter.Val_Delata=60;
 80047ea:	4b2a      	ldr	r3, [pc, #168]	; (8004894 <Soldering_Heat_Gun_INI+0xe0>)
 80047ec:	4a30      	ldr	r2, [pc, #192]	; (80048b0 <Soldering_Heat_Gun_INI+0xfc>)
 80047ee:	635a      	str	r2, [r3, #52]	; 0x34
	Soldering_Heat_Gun.Filter.mass=&ADC_Data[1];
 80047f0:	4b28      	ldr	r3, [pc, #160]	; (8004894 <Soldering_Heat_Gun_INI+0xe0>)
 80047f2:	4a30      	ldr	r2, [pc, #192]	; (80048b4 <Soldering_Heat_Gun_INI+0x100>)
 80047f4:	641a      	str	r2, [r3, #64]	; 0x40


	Soldering_Heat_Gun.MODE=MANUAL;
 80047f6:	4b27      	ldr	r3, [pc, #156]	; (8004894 <Soldering_Heat_Gun_INI+0xe0>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

	Soldering_Heat_Gun.OFF_PIN=GPIO_PIN_15;
 80047fe:	4b25      	ldr	r3, [pc, #148]	; (8004894 <Soldering_Heat_Gun_INI+0xe0>)
 8004800:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004804:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	Soldering_Heat_Gun.OFF_GPIO=GPIOC;
 8004808:	4b22      	ldr	r3, [pc, #136]	; (8004894 <Soldering_Heat_Gun_INI+0xe0>)
 800480a:	4a2b      	ldr	r2, [pc, #172]	; (80048b8 <Soldering_Heat_Gun_INI+0x104>)
 800480c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	Soldering_Heat_Gun.MANUAL_PIN=GPIO_PIN_9;
 8004810:	4b20      	ldr	r3, [pc, #128]	; (8004894 <Soldering_Heat_Gun_INI+0xe0>)
 8004812:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004816:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	Soldering_Heat_Gun.MANUAL_GPIO=GPIOB;
 800481a:	4b1e      	ldr	r3, [pc, #120]	; (8004894 <Soldering_Heat_Gun_INI+0xe0>)
 800481c:	4a27      	ldr	r2, [pc, #156]	; (80048bc <Soldering_Heat_Gun_INI+0x108>)
 800481e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	Soldering_Heat_Gun.PAC = &PAC;
 8004822:	4b1c      	ldr	r3, [pc, #112]	; (8004894 <Soldering_Heat_Gun_INI+0xe0>)
 8004824:	4a26      	ldr	r2, [pc, #152]	; (80048c0 <Soldering_Heat_Gun_INI+0x10c>)
 8004826:	679a      	str	r2, [r3, #120]	; 0x78

	struct PAC_Control_Vector element_ini;

	element_ini.GPIO=GPIOB;
 8004828:	4b24      	ldr	r3, [pc, #144]	; (80048bc <Soldering_Heat_Gun_INI+0x108>)
 800482a:	613b      	str	r3, [r7, #16]
	element_ini.PIN=GPIO_PIN_11;
 800482c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004830:	81bb      	strh	r3, [r7, #12]

	Soldering_Heat_Gun.PAC_Control=PAC_Control_Vector_Create(&PAC, &element_ini);
 8004832:	f107 0308 	add.w	r3, r7, #8
 8004836:	4619      	mov	r1, r3
 8004838:	4821      	ldr	r0, [pc, #132]	; (80048c0 <Soldering_Heat_Gun_INI+0x10c>)
 800483a:	f7fc fe15 	bl	8001468 <PAC_Control_Vector_Create>
 800483e:	4603      	mov	r3, r0
 8004840:	4a14      	ldr	r2, [pc, #80]	; (8004894 <Soldering_Heat_Gun_INI+0xe0>)
 8004842:	6753      	str	r3, [r2, #116]	; 0x74

	Soldering_Heat_Gun.PAC_Control->Control_Value=25;
 8004844:	4b13      	ldr	r3, [pc, #76]	; (8004894 <Soldering_Heat_Gun_INI+0xe0>)
 8004846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004848:	2219      	movs	r2, #25
 800484a:	819a      	strh	r2, [r3, #12]

	Soldering_Heat_Gun.Temperature_Converting.Coeff=Soldering_Heat_Gun_Temperature_Converting_Coeff;
 800484c:	4b11      	ldr	r3, [pc, #68]	; (8004894 <Soldering_Heat_Gun_INI+0xe0>)
 800484e:	4a1d      	ldr	r2, [pc, #116]	; (80048c4 <Soldering_Heat_Gun_INI+0x110>)
 8004850:	659a      	str	r2, [r3, #88]	; 0x58

	if(Flash_Read_Status!=HAL_OK){									//if Data was read incorrect from flash reinitialize all user parameters
 8004852:	79fb      	ldrb	r3, [r7, #7]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00f      	beq.n	8004878 <Soldering_Heat_Gun_INI+0xc4>
		Soldering_Heat_Gun.Temperature_Presets_C.Preset1=100;
 8004858:	4b0e      	ldr	r3, [pc, #56]	; (8004894 <Soldering_Heat_Gun_INI+0xe0>)
 800485a:	2264      	movs	r2, #100	; 0x64
 800485c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		Soldering_Heat_Gun.Temperature_Presets_C.Preset2=200;
 8004860:	4b0c      	ldr	r3, [pc, #48]	; (8004894 <Soldering_Heat_Gun_INI+0xe0>)
 8004862:	22c8      	movs	r2, #200	; 0xc8
 8004864:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
		Soldering_Heat_Gun.Temperature_Coolling.C=50;
 8004868:	4b0a      	ldr	r3, [pc, #40]	; (8004894 <Soldering_Heat_Gun_INI+0xe0>)
 800486a:	2232      	movs	r2, #50	; 0x32
 800486c:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
		Soldering_Heat_Gun.Flash_Key=Soldering_Heat_Gun_Struct_Key;
 8004870:	4b08      	ldr	r3, [pc, #32]	; (8004894 <Soldering_Heat_Gun_INI+0xe0>)
 8004872:	4a15      	ldr	r2, [pc, #84]	; (80048c8 <Soldering_Heat_Gun_INI+0x114>)
 8004874:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	}

	Soldering_Heat_Gun_Flash_Read_Manual_Temperature(&Soldering_Heat_Gun); //read Last manual temperature
 8004878:	4806      	ldr	r0, [pc, #24]	; (8004894 <Soldering_Heat_Gun_INI+0xe0>)
 800487a:	f7fd fe63 	bl	8002544 <Soldering_Heat_Gun_Flash_Read_Manual_Temperature>

	Soldering_Heat_Gun_ini(&Soldering_Heat_Gun);
 800487e:	4805      	ldr	r0, [pc, #20]	; (8004894 <Soldering_Heat_Gun_INI+0xe0>)
 8004880:	f7fd fc57 	bl	8002132 <Soldering_Heat_Gun_ini>

	Soldering_Heat_Gun_OFF(&Soldering_Heat_Gun);
 8004884:	4803      	ldr	r0, [pc, #12]	; (8004894 <Soldering_Heat_Gun_INI+0xe0>)
 8004886:	f7fd fc9f 	bl	80021c8 <Soldering_Heat_Gun_OFF>


}
 800488a:	bf00      	nop
 800488c:	3718      	adds	r7, #24
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	20000614 	.word	0x20000614
 8004898:	3e4ccccd 	.word	0x3e4ccccd
 800489c:	3c23d70a 	.word	0x3c23d70a
 80048a0:	3ecccccd 	.word	0x3ecccccd
 80048a4:	3dcccccd 	.word	0x3dcccccd
 80048a8:	3cf5c28f 	.word	0x3cf5c28f
 80048ac:	3f4ccccd 	.word	0x3f4ccccd
 80048b0:	42700000 	.word	0x42700000
 80048b4:	2000074e 	.word	0x2000074e
 80048b8:	40011000 	.word	0x40011000
 80048bc:	40010c00 	.word	0x40010c00
 80048c0:	20000738 	.word	0x20000738
 80048c4:	41066666 	.word	0x41066666
 80048c8:	0801f804 	.word	0x0801f804

080048cc <Soldering_Separator_INI>:
//----------------------------------------------------------------------------
void Soldering_Separator_INI(uint8_t Flash_Read_Status){
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b086      	sub	sp, #24
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	4603      	mov	r3, r0
 80048d4:	71fb      	strb	r3, [r7, #7]
	Soldering_Separator.PID.KP=Soldering_Separator_PID_KP;
 80048d6:	4b27      	ldr	r3, [pc, #156]	; (8004974 <Soldering_Separator_INI+0xa8>)
 80048d8:	4a27      	ldr	r2, [pc, #156]	; (8004978 <Soldering_Separator_INI+0xac>)
 80048da:	601a      	str	r2, [r3, #0]
	Soldering_Separator.PID.KI=Soldering_Separator_PID_KI;
 80048dc:	4b25      	ldr	r3, [pc, #148]	; (8004974 <Soldering_Separator_INI+0xa8>)
 80048de:	4a27      	ldr	r2, [pc, #156]	; (800497c <Soldering_Separator_INI+0xb0>)
 80048e0:	605a      	str	r2, [r3, #4]
	Soldering_Separator.PID.KD=Soldering_Separator_PID_KD;
 80048e2:	4b24      	ldr	r3, [pc, #144]	; (8004974 <Soldering_Separator_INI+0xa8>)
 80048e4:	4a26      	ldr	r2, [pc, #152]	; (8004980 <Soldering_Separator_INI+0xb4>)
 80048e6:	609a      	str	r2, [r3, #8]
	Soldering_Separator.PID.dt=0.1;
 80048e8:	4b22      	ldr	r3, [pc, #136]	; (8004974 <Soldering_Separator_INI+0xa8>)
 80048ea:	4a26      	ldr	r2, [pc, #152]	; (8004984 <Soldering_Separator_INI+0xb8>)
 80048ec:	60da      	str	r2, [r3, #12]


	Soldering_Separator.Filter.Filter_Mode=Three_Samples;
 80048ee:	4b21      	ldr	r3, [pc, #132]	; (8004974 <Soldering_Separator_INI+0xa8>)
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Soldering_Separator.Filter.k_min=0.1;
 80048f6:	4b1f      	ldr	r3, [pc, #124]	; (8004974 <Soldering_Separator_INI+0xa8>)
 80048f8:	4a22      	ldr	r2, [pc, #136]	; (8004984 <Soldering_Separator_INI+0xb8>)
 80048fa:	629a      	str	r2, [r3, #40]	; 0x28
	Soldering_Separator.Filter.k_max=0.3;
 80048fc:	4b1d      	ldr	r3, [pc, #116]	; (8004974 <Soldering_Separator_INI+0xa8>)
 80048fe:	4a22      	ldr	r2, [pc, #136]	; (8004988 <Soldering_Separator_INI+0xbc>)
 8004900:	62da      	str	r2, [r3, #44]	; 0x2c
	Soldering_Separator.Filter.Val_Delata=60;
 8004902:	4b1c      	ldr	r3, [pc, #112]	; (8004974 <Soldering_Separator_INI+0xa8>)
 8004904:	4a21      	ldr	r2, [pc, #132]	; (800498c <Soldering_Separator_INI+0xc0>)
 8004906:	635a      	str	r2, [r3, #52]	; 0x34
	Soldering_Separator.Filter.mass=&ADC_Data[13];
 8004908:	4b1a      	ldr	r3, [pc, #104]	; (8004974 <Soldering_Separator_INI+0xa8>)
 800490a:	4a21      	ldr	r2, [pc, #132]	; (8004990 <Soldering_Separator_INI+0xc4>)
 800490c:	641a      	str	r2, [r3, #64]	; 0x40


	Soldering_Separator.MODE=MANUAL;
 800490e:	4b19      	ldr	r3, [pc, #100]	; (8004974 <Soldering_Separator_INI+0xa8>)
 8004910:	2200      	movs	r2, #0
 8004912:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

	Soldering_Separator.PAC = &PAC;
 8004916:	4b17      	ldr	r3, [pc, #92]	; (8004974 <Soldering_Separator_INI+0xa8>)
 8004918:	4a1e      	ldr	r2, [pc, #120]	; (8004994 <Soldering_Separator_INI+0xc8>)
 800491a:	679a      	str	r2, [r3, #120]	; 0x78

	struct PAC_Control_Vector element_ini;

	element_ini.GPIO=GPIOB;
 800491c:	4b1e      	ldr	r3, [pc, #120]	; (8004998 <Soldering_Separator_INI+0xcc>)
 800491e:	613b      	str	r3, [r7, #16]
	element_ini.PIN=GPIO_PIN_0;
 8004920:	2301      	movs	r3, #1
 8004922:	81bb      	strh	r3, [r7, #12]

	Soldering_Separator.PAC_Control=PAC_Control_Vector_Create(&PAC, &element_ini);
 8004924:	f107 0308 	add.w	r3, r7, #8
 8004928:	4619      	mov	r1, r3
 800492a:	481a      	ldr	r0, [pc, #104]	; (8004994 <Soldering_Separator_INI+0xc8>)
 800492c:	f7fc fd9c 	bl	8001468 <PAC_Control_Vector_Create>
 8004930:	4603      	mov	r3, r0
 8004932:	4a10      	ldr	r2, [pc, #64]	; (8004974 <Soldering_Separator_INI+0xa8>)
 8004934:	6753      	str	r3, [r2, #116]	; 0x74

	Soldering_Separator.Temperature_Converting.Coeff=Soldering_Separator_Temperature_Converting_Coeff;
 8004936:	4b0f      	ldr	r3, [pc, #60]	; (8004974 <Soldering_Separator_INI+0xa8>)
 8004938:	4a18      	ldr	r2, [pc, #96]	; (800499c <Soldering_Separator_INI+0xd0>)
 800493a:	659a      	str	r2, [r3, #88]	; 0x58

	if(Flash_Read_Status!=HAL_OK){									//if Data was read incorrect from flash reinitialize all user parameters
 800493c:	79fb      	ldrb	r3, [r7, #7]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00b      	beq.n	800495a <Soldering_Separator_INI+0x8e>
		Soldering_Separator.Temperature_Presets_C.Preset1=150;
 8004942:	4b0c      	ldr	r3, [pc, #48]	; (8004974 <Soldering_Separator_INI+0xa8>)
 8004944:	2296      	movs	r2, #150	; 0x96
 8004946:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		Soldering_Separator.Temperature_Presets_C.Preset2=200;
 800494a:	4b0a      	ldr	r3, [pc, #40]	; (8004974 <Soldering_Separator_INI+0xa8>)
 800494c:	22c8      	movs	r2, #200	; 0xc8
 800494e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
		Soldering_Separator.Flash_Key=Soldering_Separator_Struct_Key;
 8004952:	4b08      	ldr	r3, [pc, #32]	; (8004974 <Soldering_Separator_INI+0xa8>)
 8004954:	4a12      	ldr	r2, [pc, #72]	; (80049a0 <Soldering_Separator_INI+0xd4>)
 8004956:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	}

	Soldering_Separator_Flash_Read_Manual_Temperature(&Soldering_Separator);	//read Last manual temperature
 800495a:	4806      	ldr	r0, [pc, #24]	; (8004974 <Soldering_Separator_INI+0xa8>)
 800495c:	f7fd ff98 	bl	8002890 <Soldering_Separator_Flash_Read_Manual_Temperature>

	Soldering_Separator_ini(&Soldering_Separator);
 8004960:	4804      	ldr	r0, [pc, #16]	; (8004974 <Soldering_Separator_INI+0xa8>)
 8004962:	f7fd fe0e 	bl	8002582 <Soldering_Separator_ini>

	Soldering_Separator_OFF(&Soldering_Separator);
 8004966:	4803      	ldr	r0, [pc, #12]	; (8004974 <Soldering_Separator_INI+0xa8>)
 8004968:	f7fd fe42 	bl	80025f0 <Soldering_Separator_OFF>
}
 800496c:	bf00      	nop
 800496e:	3718      	adds	r7, #24
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	200006b0 	.word	0x200006b0
 8004978:	3e19999a 	.word	0x3e19999a
 800497c:	3a03126f 	.word	0x3a03126f
 8004980:	3a83126f 	.word	0x3a83126f
 8004984:	3dcccccd 	.word	0x3dcccccd
 8004988:	3e99999a 	.word	0x3e99999a
 800498c:	42700000 	.word	0x42700000
 8004990:	20000766 	.word	0x20000766
 8004994:	20000738 	.word	0x20000738
 8004998:	40010c00 	.word	0x40010c00
 800499c:	404ccccd 	.word	0x404ccccd
 80049a0:	1801f804 	.word	0x1801f804

080049a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80049aa:	f000 ff1b 	bl	80057e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80049ae:	f000 f87d 	bl	8004aac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80049b2:	f000 fb75 	bl	80050a0 <MX_GPIO_Init>
  MX_DMA_Init();
 80049b6:	f000 fb55 	bl	8005064 <MX_DMA_Init>
  MX_ADC1_Init();
 80049ba:	f000 f8c7 	bl	8004b4c <MX_ADC1_Init>
  MX_I2C1_Init();
 80049be:	f000 f9c1 	bl	8004d44 <MX_I2C1_Init>
  MX_TIM2_Init();
 80049c2:	f000 fa3f 	bl	8004e44 <MX_TIM2_Init>
  MX_TIM1_Init();
 80049c6:	f000 f9eb 	bl	8004da0 <MX_TIM1_Init>
  MX_TIM3_Init();
 80049ca:	f000 fab1 	bl	8004f30 <MX_TIM3_Init>
  MX_TIM4_Init();
 80049ce:	f000 fafd 	bl	8004fcc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  //---------------------------------------------------------------------------------
  uint8_t Flash_Read_Status;

  Flash_Read_Status=Soldering_Station_Read_Struct(&Soldering_Iron, &Soldering_Heat_Gun, &Soldering_Separator);
 80049d2:	4a2b      	ldr	r2, [pc, #172]	; (8004a80 <main+0xdc>)
 80049d4:	492b      	ldr	r1, [pc, #172]	; (8004a84 <main+0xe0>)
 80049d6:	482c      	ldr	r0, [pc, #176]	; (8004a88 <main+0xe4>)
 80049d8:	f7fd ff8c 	bl	80028f4 <Soldering_Station_Read_Struct>
 80049dc:	4603      	mov	r3, r0
 80049de:	71fb      	strb	r3, [r7, #7]


  BUTTON_INI();
 80049e0:	f7ff fbd4 	bl	800418c <BUTTON_INI>
  Encoder_INI();
 80049e4:	f7ff fc5e 	bl	80042a4 <Encoder_INI>
  MENU_INI();
 80049e8:	f7ff fcc2 	bl	8004370 <MENU_INI>
  OLED_INI();
 80049ec:	f7ff fe24 	bl	8004638 <OLED_INI>
  PAC_INI();
 80049f0:	f7ff fece 	bl	8004790 <PAC_INI>
  Soldering_Iron_INI(Flash_Read_Status);
 80049f4:	79fb      	ldrb	r3, [r7, #7]
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7ff fe30 	bl	800465c <Soldering_Iron_INI>
  Soldering_Heat_Gun_INI(Flash_Read_Status);
 80049fc:	79fb      	ldrb	r3, [r7, #7]
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7ff fed8 	bl	80047b4 <Soldering_Heat_Gun_INI>
  Soldering_Separator_INI(Flash_Read_Status);
 8004a04:	79fb      	ldrb	r3, [r7, #7]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7ff ff60 	bl	80048cc <Soldering_Separator_INI>

  if(Flash_Read_Status!=HAL_OK)							//if Struct was read incorrect
 8004a0c:	79fb      	ldrb	r3, [r7, #7]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d004      	beq.n	8004a1c <main+0x78>
	  Soldering_Station_Write_Struct(&Soldering_Iron, &Soldering_Heat_Gun, &Soldering_Separator);	//Rewrite all structures
 8004a12:	4a1b      	ldr	r2, [pc, #108]	; (8004a80 <main+0xdc>)
 8004a14:	491b      	ldr	r1, [pc, #108]	; (8004a84 <main+0xe0>)
 8004a16:	481c      	ldr	r0, [pc, #112]	; (8004a88 <main+0xe4>)
 8004a18:	f7fd ff9e 	bl	8002958 <Soldering_Station_Write_Struct>

  //---------------------------------------------------------------------------------TIM
	__HAL_TIM_CLEAR_FLAG(&htim1, TIM_SR_UIF);
 8004a1c:	4b1b      	ldr	r3, [pc, #108]	; (8004a8c <main+0xe8>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f06f 0201 	mvn.w	r2, #1
 8004a24:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&htim1);
 8004a26:	4819      	ldr	r0, [pc, #100]	; (8004a8c <main+0xe8>)
 8004a28:	f003 fe16 	bl	8008658 <HAL_TIM_Base_Start_IT>
	__HAL_TIM_CLEAR_FLAG(&htim2, TIM_SR_UIF);
 8004a2c:	4b18      	ldr	r3, [pc, #96]	; (8004a90 <main+0xec>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f06f 0201 	mvn.w	r2, #1
 8004a34:	611a      	str	r2, [r3, #16]
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8004a36:	210c      	movs	r1, #12
 8004a38:	4815      	ldr	r0, [pc, #84]	; (8004a90 <main+0xec>)
 8004a3a:	f003 feb7 	bl	80087ac <HAL_TIM_PWM_Start>

	__HAL_TIM_CLEAR_FLAG(&htim3, TIM_SR_UIF);
 8004a3e:	4b15      	ldr	r3, [pc, #84]	; (8004a94 <main+0xf0>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f06f 0201 	mvn.w	r2, #1
 8004a46:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&htim3);
 8004a48:	4812      	ldr	r0, [pc, #72]	; (8004a94 <main+0xf0>)
 8004a4a:	f003 fe05 	bl	8008658 <HAL_TIM_Base_Start_IT>

	__HAL_TIM_CLEAR_FLAG(&htim4, TIM_SR_UIF);
 8004a4e:	4b12      	ldr	r3, [pc, #72]	; (8004a98 <main+0xf4>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f06f 0201 	mvn.w	r2, #1
 8004a56:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&htim4);
 8004a58:	480f      	ldr	r0, [pc, #60]	; (8004a98 <main+0xf4>)
 8004a5a:	f003 fdfd 	bl	8008658 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Face_UI_it(&Encoder_P1, &Encoder_P2, &Button_Vector);
 8004a5e:	4a0f      	ldr	r2, [pc, #60]	; (8004a9c <main+0xf8>)
 8004a60:	490f      	ldr	r1, [pc, #60]	; (8004aa0 <main+0xfc>)
 8004a62:	4810      	ldr	r0, [pc, #64]	; (8004aa4 <main+0x100>)
 8004a64:	f7fe fdf2 	bl	800364c <Face_UI_it>
	  UI_Menu_it(&Menu_List_Vector, &Encoder_P2, &Button_Vector);
 8004a68:	4a0c      	ldr	r2, [pc, #48]	; (8004a9c <main+0xf8>)
 8004a6a:	490d      	ldr	r1, [pc, #52]	; (8004aa0 <main+0xfc>)
 8004a6c:	480e      	ldr	r0, [pc, #56]	; (8004aa8 <main+0x104>)
 8004a6e:	f7ff f9d3 	bl	8003e18 <UI_Menu_it>
	  Soldering_Station_Write_Struct(&Soldering_Iron, &Soldering_Heat_Gun, &Soldering_Separator);	//Write all struct in flash after changing in UI_Menu
 8004a72:	4a03      	ldr	r2, [pc, #12]	; (8004a80 <main+0xdc>)
 8004a74:	4903      	ldr	r1, [pc, #12]	; (8004a84 <main+0xe0>)
 8004a76:	4804      	ldr	r0, [pc, #16]	; (8004a88 <main+0xe4>)
 8004a78:	f7fd ff6e 	bl	8002958 <Soldering_Station_Write_Struct>
	  Face_UI_it(&Encoder_P1, &Encoder_P2, &Button_Vector);
 8004a7c:	e7ef      	b.n	8004a5e <main+0xba>
 8004a7e:	bf00      	nop
 8004a80:	200006b0 	.word	0x200006b0
 8004a84:	20000614 	.word	0x20000614
 8004a88:	20000568 	.word	0x20000568
 8004a8c:	20000384 	.word	0x20000384
 8004a90:	200003cc 	.word	0x200003cc
 8004a94:	20000414 	.word	0x20000414
 8004a98:	2000045c 	.word	0x2000045c
 8004a9c:	20000514 	.word	0x20000514
 8004aa0:	200004ac 	.word	0x200004ac
 8004aa4:	200004e0 	.word	0x200004e0
 8004aa8:	20000558 	.word	0x20000558

08004aac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b094      	sub	sp, #80	; 0x50
 8004ab0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004ab2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ab6:	2228      	movs	r2, #40	; 0x28
 8004ab8:	2100      	movs	r1, #0
 8004aba:	4618      	mov	r0, r3
 8004abc:	f004 fdfa 	bl	80096b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004ac0:	f107 0314 	add.w	r3, r7, #20
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	601a      	str	r2, [r3, #0]
 8004ac8:	605a      	str	r2, [r3, #4]
 8004aca:	609a      	str	r2, [r3, #8]
 8004acc:	60da      	str	r2, [r3, #12]
 8004ace:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004ad0:	1d3b      	adds	r3, r7, #4
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	601a      	str	r2, [r3, #0]
 8004ad6:	605a      	str	r2, [r3, #4]
 8004ad8:	609a      	str	r2, [r3, #8]
 8004ada:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004adc:	2302      	movs	r3, #2
 8004ade:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004ae4:	2310      	movs	r3, #16
 8004ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004aec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004af0:	4618      	mov	r0, r3
 8004af2:	f003 f8a5 	bl	8007c40 <HAL_RCC_OscConfig>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d001      	beq.n	8004b00 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8004afc:	f000 fbd8 	bl	80052b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004b00:	230f      	movs	r3, #15
 8004b02:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8004b04:	2300      	movs	r3, #0
 8004b06:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004b10:	2300      	movs	r3, #0
 8004b12:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004b14:	f107 0314 	add.w	r3, r7, #20
 8004b18:	2100      	movs	r1, #0
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f003 fb12 	bl	8008144 <HAL_RCC_ClockConfig>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8004b26:	f000 fbc3 	bl	80052b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004b2a:	2302      	movs	r3, #2
 8004b2c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004b32:	1d3b      	adds	r3, r7, #4
 8004b34:	4618      	mov	r0, r3
 8004b36:	f003 fc89 	bl	800844c <HAL_RCCEx_PeriphCLKConfig>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d001      	beq.n	8004b44 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8004b40:	f000 fbb6 	bl	80052b0 <Error_Handler>
  }
}
 8004b44:	bf00      	nop
 8004b46:	3750      	adds	r7, #80	; 0x50
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004b52:	1d3b      	adds	r3, r7, #4
 8004b54:	2200      	movs	r2, #0
 8004b56:	601a      	str	r2, [r3, #0]
 8004b58:	605a      	str	r2, [r3, #4]
 8004b5a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8004b5c:	4b77      	ldr	r3, [pc, #476]	; (8004d3c <MX_ADC1_Init+0x1f0>)
 8004b5e:	4a78      	ldr	r2, [pc, #480]	; (8004d40 <MX_ADC1_Init+0x1f4>)
 8004b60:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004b62:	4b76      	ldr	r3, [pc, #472]	; (8004d3c <MX_ADC1_Init+0x1f0>)
 8004b64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b68:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004b6a:	4b74      	ldr	r3, [pc, #464]	; (8004d3c <MX_ADC1_Init+0x1f0>)
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004b70:	4b72      	ldr	r3, [pc, #456]	; (8004d3c <MX_ADC1_Init+0x1f0>)
 8004b72:	2200      	movs	r2, #0
 8004b74:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004b76:	4b71      	ldr	r3, [pc, #452]	; (8004d3c <MX_ADC1_Init+0x1f0>)
 8004b78:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8004b7c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004b7e:	4b6f      	ldr	r3, [pc, #444]	; (8004d3c <MX_ADC1_Init+0x1f0>)
 8004b80:	2200      	movs	r2, #0
 8004b82:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 16;
 8004b84:	4b6d      	ldr	r3, [pc, #436]	; (8004d3c <MX_ADC1_Init+0x1f0>)
 8004b86:	2210      	movs	r2, #16
 8004b88:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004b8a:	486c      	ldr	r0, [pc, #432]	; (8004d3c <MX_ADC1_Init+0x1f0>)
 8004b8c:	f000 fe8c 	bl	80058a8 <HAL_ADC_Init>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d001      	beq.n	8004b9a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8004b96:	f000 fb8b 	bl	80052b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8004ba2:	2305      	movs	r3, #5
 8004ba4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004ba6:	1d3b      	adds	r3, r7, #4
 8004ba8:	4619      	mov	r1, r3
 8004baa:	4864      	ldr	r0, [pc, #400]	; (8004d3c <MX_ADC1_Init+0x1f0>)
 8004bac:	f001 f910 	bl	8005dd0 <HAL_ADC_ConfigChannel>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d001      	beq.n	8004bba <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8004bb6:	f000 fb7b 	bl	80052b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004bbe:	2302      	movs	r3, #2
 8004bc0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004bc2:	1d3b      	adds	r3, r7, #4
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	485d      	ldr	r0, [pc, #372]	; (8004d3c <MX_ADC1_Init+0x1f0>)
 8004bc8:	f001 f902 	bl	8005dd0 <HAL_ADC_ConfigChannel>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d001      	beq.n	8004bd6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8004bd2:	f000 fb6d 	bl	80052b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004bda:	1d3b      	adds	r3, r7, #4
 8004bdc:	4619      	mov	r1, r3
 8004bde:	4857      	ldr	r0, [pc, #348]	; (8004d3c <MX_ADC1_Init+0x1f0>)
 8004be0:	f001 f8f6 	bl	8005dd0 <HAL_ADC_ConfigChannel>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d001      	beq.n	8004bee <MX_ADC1_Init+0xa2>
  {
    Error_Handler();
 8004bea:	f000 fb61 	bl	80052b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8004bee:	2304      	movs	r3, #4
 8004bf0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004bf2:	1d3b      	adds	r3, r7, #4
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	4851      	ldr	r0, [pc, #324]	; (8004d3c <MX_ADC1_Init+0x1f0>)
 8004bf8:	f001 f8ea 	bl	8005dd0 <HAL_ADC_ConfigChannel>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d001      	beq.n	8004c06 <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 8004c02:	f000 fb55 	bl	80052b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8004c06:	2306      	movs	r3, #6
 8004c08:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8004c0a:	2305      	movs	r3, #5
 8004c0c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004c0e:	1d3b      	adds	r3, r7, #4
 8004c10:	4619      	mov	r1, r3
 8004c12:	484a      	ldr	r0, [pc, #296]	; (8004d3c <MX_ADC1_Init+0x1f0>)
 8004c14:	f001 f8dc 	bl	8005dd0 <HAL_ADC_ConfigChannel>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d001      	beq.n	8004c22 <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 8004c1e:	f000 fb47 	bl	80052b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8004c22:	2306      	movs	r3, #6
 8004c24:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004c26:	1d3b      	adds	r3, r7, #4
 8004c28:	4619      	mov	r1, r3
 8004c2a:	4844      	ldr	r0, [pc, #272]	; (8004d3c <MX_ADC1_Init+0x1f0>)
 8004c2c:	f001 f8d0 	bl	8005dd0 <HAL_ADC_ConfigChannel>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d001      	beq.n	8004c3a <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8004c36:	f000 fb3b 	bl	80052b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8004c3a:	2307      	movs	r3, #7
 8004c3c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004c3e:	1d3b      	adds	r3, r7, #4
 8004c40:	4619      	mov	r1, r3
 8004c42:	483e      	ldr	r0, [pc, #248]	; (8004d3c <MX_ADC1_Init+0x1f0>)
 8004c44:	f001 f8c4 	bl	8005dd0 <HAL_ADC_ConfigChannel>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d001      	beq.n	8004c52 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 8004c4e:	f000 fb2f 	bl	80052b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8004c52:	2308      	movs	r3, #8
 8004c54:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004c56:	1d3b      	adds	r3, r7, #4
 8004c58:	4619      	mov	r1, r3
 8004c5a:	4838      	ldr	r0, [pc, #224]	; (8004d3c <MX_ADC1_Init+0x1f0>)
 8004c5c:	f001 f8b8 	bl	8005dd0 <HAL_ADC_ConfigChannel>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d001      	beq.n	8004c6a <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 8004c66:	f000 fb23 	bl	80052b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8004c6a:	2309      	movs	r3, #9
 8004c6c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004c6e:	1d3b      	adds	r3, r7, #4
 8004c70:	4619      	mov	r1, r3
 8004c72:	4832      	ldr	r0, [pc, #200]	; (8004d3c <MX_ADC1_Init+0x1f0>)
 8004c74:	f001 f8ac 	bl	8005dd0 <HAL_ADC_ConfigChannel>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d001      	beq.n	8004c82 <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 8004c7e:	f000 fb17 	bl	80052b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8004c82:	230a      	movs	r3, #10
 8004c84:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004c86:	1d3b      	adds	r3, r7, #4
 8004c88:	4619      	mov	r1, r3
 8004c8a:	482c      	ldr	r0, [pc, #176]	; (8004d3c <MX_ADC1_Init+0x1f0>)
 8004c8c:	f001 f8a0 	bl	8005dd0 <HAL_ADC_ConfigChannel>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d001      	beq.n	8004c9a <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 8004c96:	f000 fb0b 	bl	80052b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8004c9a:	230b      	movs	r3, #11
 8004c9c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004c9e:	1d3b      	adds	r3, r7, #4
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	4826      	ldr	r0, [pc, #152]	; (8004d3c <MX_ADC1_Init+0x1f0>)
 8004ca4:	f001 f894 	bl	8005dd0 <HAL_ADC_ConfigChannel>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d001      	beq.n	8004cb2 <MX_ADC1_Init+0x166>
  {
    Error_Handler();
 8004cae:	f000 faff 	bl	80052b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8004cb2:	230c      	movs	r3, #12
 8004cb4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004cb6:	1d3b      	adds	r3, r7, #4
 8004cb8:	4619      	mov	r1, r3
 8004cba:	4820      	ldr	r0, [pc, #128]	; (8004d3c <MX_ADC1_Init+0x1f0>)
 8004cbc:	f001 f888 	bl	8005dd0 <HAL_ADC_ConfigChannel>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d001      	beq.n	8004cca <MX_ADC1_Init+0x17e>
  {
    Error_Handler();
 8004cc6:	f000 faf3 	bl	80052b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8004cca:	230d      	movs	r3, #13
 8004ccc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004cce:	1d3b      	adds	r3, r7, #4
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	481a      	ldr	r0, [pc, #104]	; (8004d3c <MX_ADC1_Init+0x1f0>)
 8004cd4:	f001 f87c 	bl	8005dd0 <HAL_ADC_ConfigChannel>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d001      	beq.n	8004ce2 <MX_ADC1_Init+0x196>
  {
    Error_Handler();
 8004cde:	f000 fae7 	bl	80052b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8004ce2:	2307      	movs	r3, #7
 8004ce4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 8004ce6:	230e      	movs	r3, #14
 8004ce8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8004cea:	2307      	movs	r3, #7
 8004cec:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004cee:	1d3b      	adds	r3, r7, #4
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	4812      	ldr	r0, [pc, #72]	; (8004d3c <MX_ADC1_Init+0x1f0>)
 8004cf4:	f001 f86c 	bl	8005dd0 <HAL_ADC_ConfigChannel>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d001      	beq.n	8004d02 <MX_ADC1_Init+0x1b6>
  {
    Error_Handler();
 8004cfe:	f000 fad7 	bl	80052b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_15;
 8004d02:	230f      	movs	r3, #15
 8004d04:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004d06:	1d3b      	adds	r3, r7, #4
 8004d08:	4619      	mov	r1, r3
 8004d0a:	480c      	ldr	r0, [pc, #48]	; (8004d3c <MX_ADC1_Init+0x1f0>)
 8004d0c:	f001 f860 	bl	8005dd0 <HAL_ADC_ConfigChannel>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d001      	beq.n	8004d1a <MX_ADC1_Init+0x1ce>
  {
    Error_Handler();
 8004d16:	f000 facb 	bl	80052b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_16;
 8004d1a:	2310      	movs	r3, #16
 8004d1c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004d1e:	1d3b      	adds	r3, r7, #4
 8004d20:	4619      	mov	r1, r3
 8004d22:	4806      	ldr	r0, [pc, #24]	; (8004d3c <MX_ADC1_Init+0x1f0>)
 8004d24:	f001 f854 	bl	8005dd0 <HAL_ADC_ConfigChannel>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d001      	beq.n	8004d32 <MX_ADC1_Init+0x1e6>
  {
    Error_Handler();
 8004d2e:	f000 fabf 	bl	80052b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004d32:	bf00      	nop
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	200002bc 	.word	0x200002bc
 8004d40:	40012400 	.word	0x40012400

08004d44 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004d48:	4b12      	ldr	r3, [pc, #72]	; (8004d94 <MX_I2C1_Init+0x50>)
 8004d4a:	4a13      	ldr	r2, [pc, #76]	; (8004d98 <MX_I2C1_Init+0x54>)
 8004d4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8004d4e:	4b11      	ldr	r3, [pc, #68]	; (8004d94 <MX_I2C1_Init+0x50>)
 8004d50:	4a12      	ldr	r2, [pc, #72]	; (8004d9c <MX_I2C1_Init+0x58>)
 8004d52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004d54:	4b0f      	ldr	r3, [pc, #60]	; (8004d94 <MX_I2C1_Init+0x50>)
 8004d56:	2200      	movs	r2, #0
 8004d58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004d5a:	4b0e      	ldr	r3, [pc, #56]	; (8004d94 <MX_I2C1_Init+0x50>)
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004d60:	4b0c      	ldr	r3, [pc, #48]	; (8004d94 <MX_I2C1_Init+0x50>)
 8004d62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004d66:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004d68:	4b0a      	ldr	r3, [pc, #40]	; (8004d94 <MX_I2C1_Init+0x50>)
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004d6e:	4b09      	ldr	r3, [pc, #36]	; (8004d94 <MX_I2C1_Init+0x50>)
 8004d70:	2200      	movs	r2, #0
 8004d72:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004d74:	4b07      	ldr	r3, [pc, #28]	; (8004d94 <MX_I2C1_Init+0x50>)
 8004d76:	2200      	movs	r2, #0
 8004d78:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004d7a:	4b06      	ldr	r3, [pc, #24]	; (8004d94 <MX_I2C1_Init+0x50>)
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004d80:	4804      	ldr	r0, [pc, #16]	; (8004d94 <MX_I2C1_Init+0x50>)
 8004d82:	f002 f9e5 	bl	8007150 <HAL_I2C_Init>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d001      	beq.n	8004d90 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004d8c:	f000 fa90 	bl	80052b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004d90:	bf00      	nop
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	20000330 	.word	0x20000330
 8004d98:	40005400 	.word	0x40005400
 8004d9c:	00061a80 	.word	0x00061a80

08004da0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b086      	sub	sp, #24
 8004da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004da6:	f107 0308 	add.w	r3, r7, #8
 8004daa:	2200      	movs	r2, #0
 8004dac:	601a      	str	r2, [r3, #0]
 8004dae:	605a      	str	r2, [r3, #4]
 8004db0:	609a      	str	r2, [r3, #8]
 8004db2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004db4:	463b      	mov	r3, r7
 8004db6:	2200      	movs	r2, #0
 8004db8:	601a      	str	r2, [r3, #0]
 8004dba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004dbc:	4b1f      	ldr	r3, [pc, #124]	; (8004e3c <MX_TIM1_Init+0x9c>)
 8004dbe:	4a20      	ldr	r2, [pc, #128]	; (8004e40 <MX_TIM1_Init+0xa0>)
 8004dc0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 799;
 8004dc2:	4b1e      	ldr	r3, [pc, #120]	; (8004e3c <MX_TIM1_Init+0x9c>)
 8004dc4:	f240 321f 	movw	r2, #799	; 0x31f
 8004dc8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004dca:	4b1c      	ldr	r3, [pc, #112]	; (8004e3c <MX_TIM1_Init+0x9c>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 499;
 8004dd0:	4b1a      	ldr	r3, [pc, #104]	; (8004e3c <MX_TIM1_Init+0x9c>)
 8004dd2:	f240 12f3 	movw	r2, #499	; 0x1f3
 8004dd6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004dd8:	4b18      	ldr	r3, [pc, #96]	; (8004e3c <MX_TIM1_Init+0x9c>)
 8004dda:	2200      	movs	r2, #0
 8004ddc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004dde:	4b17      	ldr	r3, [pc, #92]	; (8004e3c <MX_TIM1_Init+0x9c>)
 8004de0:	2200      	movs	r2, #0
 8004de2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004de4:	4b15      	ldr	r3, [pc, #84]	; (8004e3c <MX_TIM1_Init+0x9c>)
 8004de6:	2200      	movs	r2, #0
 8004de8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004dea:	4814      	ldr	r0, [pc, #80]	; (8004e3c <MX_TIM1_Init+0x9c>)
 8004dec:	f003 fbe4 	bl	80085b8 <HAL_TIM_Base_Init>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d001      	beq.n	8004dfa <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8004df6:	f000 fa5b 	bl	80052b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004dfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004dfe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004e00:	f107 0308 	add.w	r3, r7, #8
 8004e04:	4619      	mov	r1, r3
 8004e06:	480d      	ldr	r0, [pc, #52]	; (8004e3c <MX_TIM1_Init+0x9c>)
 8004e08:	f003 ff9c 	bl	8008d44 <HAL_TIM_ConfigClockSource>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d001      	beq.n	8004e16 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8004e12:	f000 fa4d 	bl	80052b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e16:	2300      	movs	r3, #0
 8004e18:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004e1e:	463b      	mov	r3, r7
 8004e20:	4619      	mov	r1, r3
 8004e22:	4806      	ldr	r0, [pc, #24]	; (8004e3c <MX_TIM1_Init+0x9c>)
 8004e24:	f004 fb1a 	bl	800945c <HAL_TIMEx_MasterConfigSynchronization>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d001      	beq.n	8004e32 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8004e2e:	f000 fa3f 	bl	80052b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004e32:	bf00      	nop
 8004e34:	3718      	adds	r7, #24
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	20000384 	.word	0x20000384
 8004e40:	40012c00 	.word	0x40012c00

08004e44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b08e      	sub	sp, #56	; 0x38
 8004e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004e4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e4e:	2200      	movs	r2, #0
 8004e50:	601a      	str	r2, [r3, #0]
 8004e52:	605a      	str	r2, [r3, #4]
 8004e54:	609a      	str	r2, [r3, #8]
 8004e56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e58:	f107 0320 	add.w	r3, r7, #32
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	601a      	str	r2, [r3, #0]
 8004e60:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004e62:	1d3b      	adds	r3, r7, #4
 8004e64:	2200      	movs	r2, #0
 8004e66:	601a      	str	r2, [r3, #0]
 8004e68:	605a      	str	r2, [r3, #4]
 8004e6a:	609a      	str	r2, [r3, #8]
 8004e6c:	60da      	str	r2, [r3, #12]
 8004e6e:	611a      	str	r2, [r3, #16]
 8004e70:	615a      	str	r2, [r3, #20]
 8004e72:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004e74:	4b2d      	ldr	r3, [pc, #180]	; (8004f2c <MX_TIM2_Init+0xe8>)
 8004e76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004e7a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004e7c:	4b2b      	ldr	r3, [pc, #172]	; (8004f2c <MX_TIM2_Init+0xe8>)
 8004e7e:	2200      	movs	r2, #0
 8004e80:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e82:	4b2a      	ldr	r3, [pc, #168]	; (8004f2c <MX_TIM2_Init+0xe8>)
 8004e84:	2200      	movs	r2, #0
 8004e86:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 399;
 8004e88:	4b28      	ldr	r3, [pc, #160]	; (8004f2c <MX_TIM2_Init+0xe8>)
 8004e8a:	f240 128f 	movw	r2, #399	; 0x18f
 8004e8e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e90:	4b26      	ldr	r3, [pc, #152]	; (8004f2c <MX_TIM2_Init+0xe8>)
 8004e92:	2200      	movs	r2, #0
 8004e94:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e96:	4b25      	ldr	r3, [pc, #148]	; (8004f2c <MX_TIM2_Init+0xe8>)
 8004e98:	2200      	movs	r2, #0
 8004e9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004e9c:	4823      	ldr	r0, [pc, #140]	; (8004f2c <MX_TIM2_Init+0xe8>)
 8004e9e:	f003 fb8b 	bl	80085b8 <HAL_TIM_Base_Init>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d001      	beq.n	8004eac <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8004ea8:	f000 fa02 	bl	80052b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004eac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004eb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	481c      	ldr	r0, [pc, #112]	; (8004f2c <MX_TIM2_Init+0xe8>)
 8004eba:	f003 ff43 	bl	8008d44 <HAL_TIM_ConfigClockSource>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d001      	beq.n	8004ec8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8004ec4:	f000 f9f4 	bl	80052b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004ec8:	4818      	ldr	r0, [pc, #96]	; (8004f2c <MX_TIM2_Init+0xe8>)
 8004eca:	f003 fc17 	bl	80086fc <HAL_TIM_PWM_Init>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d001      	beq.n	8004ed8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8004ed4:	f000 f9ec 	bl	80052b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004edc:	2300      	movs	r3, #0
 8004ede:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004ee0:	f107 0320 	add.w	r3, r7, #32
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	4811      	ldr	r0, [pc, #68]	; (8004f2c <MX_TIM2_Init+0xe8>)
 8004ee8:	f004 fab8 	bl	800945c <HAL_TIMEx_MasterConfigSynchronization>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d001      	beq.n	8004ef6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8004ef2:	f000 f9dd 	bl	80052b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004ef6:	2360      	movs	r3, #96	; 0x60
 8004ef8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004efa:	2300      	movs	r3, #0
 8004efc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004efe:	2300      	movs	r3, #0
 8004f00:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004f02:	2300      	movs	r3, #0
 8004f04:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004f06:	1d3b      	adds	r3, r7, #4
 8004f08:	220c      	movs	r2, #12
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	4807      	ldr	r0, [pc, #28]	; (8004f2c <MX_TIM2_Init+0xe8>)
 8004f0e:	f003 fe5b 	bl	8008bc8 <HAL_TIM_PWM_ConfigChannel>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d001      	beq.n	8004f1c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8004f18:	f000 f9ca 	bl	80052b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004f1c:	4803      	ldr	r0, [pc, #12]	; (8004f2c <MX_TIM2_Init+0xe8>)
 8004f1e:	f000 fb37 	bl	8005590 <HAL_TIM_MspPostInit>

}
 8004f22:	bf00      	nop
 8004f24:	3738      	adds	r7, #56	; 0x38
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	200003cc 	.word	0x200003cc

08004f30 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b086      	sub	sp, #24
 8004f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004f36:	f107 0308 	add.w	r3, r7, #8
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	601a      	str	r2, [r3, #0]
 8004f3e:	605a      	str	r2, [r3, #4]
 8004f40:	609a      	str	r2, [r3, #8]
 8004f42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f44:	463b      	mov	r3, r7
 8004f46:	2200      	movs	r2, #0
 8004f48:	601a      	str	r2, [r3, #0]
 8004f4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004f4c:	4b1d      	ldr	r3, [pc, #116]	; (8004fc4 <MX_TIM3_Init+0x94>)
 8004f4e:	4a1e      	ldr	r2, [pc, #120]	; (8004fc8 <MX_TIM3_Init+0x98>)
 8004f50:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 799;
 8004f52:	4b1c      	ldr	r3, [pc, #112]	; (8004fc4 <MX_TIM3_Init+0x94>)
 8004f54:	f240 321f 	movw	r2, #799	; 0x31f
 8004f58:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f5a:	4b1a      	ldr	r3, [pc, #104]	; (8004fc4 <MX_TIM3_Init+0x94>)
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 8004f60:	4b18      	ldr	r3, [pc, #96]	; (8004fc4 <MX_TIM3_Init+0x94>)
 8004f62:	f240 12f3 	movw	r2, #499	; 0x1f3
 8004f66:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f68:	4b16      	ldr	r3, [pc, #88]	; (8004fc4 <MX_TIM3_Init+0x94>)
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f6e:	4b15      	ldr	r3, [pc, #84]	; (8004fc4 <MX_TIM3_Init+0x94>)
 8004f70:	2200      	movs	r2, #0
 8004f72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004f74:	4813      	ldr	r0, [pc, #76]	; (8004fc4 <MX_TIM3_Init+0x94>)
 8004f76:	f003 fb1f 	bl	80085b8 <HAL_TIM_Base_Init>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d001      	beq.n	8004f84 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8004f80:	f000 f996 	bl	80052b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004f8a:	f107 0308 	add.w	r3, r7, #8
 8004f8e:	4619      	mov	r1, r3
 8004f90:	480c      	ldr	r0, [pc, #48]	; (8004fc4 <MX_TIM3_Init+0x94>)
 8004f92:	f003 fed7 	bl	8008d44 <HAL_TIM_ConfigClockSource>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d001      	beq.n	8004fa0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8004f9c:	f000 f988 	bl	80052b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004fa8:	463b      	mov	r3, r7
 8004faa:	4619      	mov	r1, r3
 8004fac:	4805      	ldr	r0, [pc, #20]	; (8004fc4 <MX_TIM3_Init+0x94>)
 8004fae:	f004 fa55 	bl	800945c <HAL_TIMEx_MasterConfigSynchronization>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d001      	beq.n	8004fbc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8004fb8:	f000 f97a 	bl	80052b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004fbc:	bf00      	nop
 8004fbe:	3718      	adds	r7, #24
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	20000414 	.word	0x20000414
 8004fc8:	40000400 	.word	0x40000400

08004fcc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b086      	sub	sp, #24
 8004fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004fd2:	f107 0308 	add.w	r3, r7, #8
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	601a      	str	r2, [r3, #0]
 8004fda:	605a      	str	r2, [r3, #4]
 8004fdc:	609a      	str	r2, [r3, #8]
 8004fde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004fe0:	463b      	mov	r3, r7
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	601a      	str	r2, [r3, #0]
 8004fe6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004fe8:	4b1c      	ldr	r3, [pc, #112]	; (800505c <MX_TIM4_Init+0x90>)
 8004fea:	4a1d      	ldr	r2, [pc, #116]	; (8005060 <MX_TIM4_Init+0x94>)
 8004fec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 8004fee:	4b1b      	ldr	r3, [pc, #108]	; (800505c <MX_TIM4_Init+0x90>)
 8004ff0:	224f      	movs	r2, #79	; 0x4f
 8004ff2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ff4:	4b19      	ldr	r3, [pc, #100]	; (800505c <MX_TIM4_Init+0x90>)
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9;
 8004ffa:	4b18      	ldr	r3, [pc, #96]	; (800505c <MX_TIM4_Init+0x90>)
 8004ffc:	2209      	movs	r2, #9
 8004ffe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005000:	4b16      	ldr	r3, [pc, #88]	; (800505c <MX_TIM4_Init+0x90>)
 8005002:	2200      	movs	r2, #0
 8005004:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005006:	4b15      	ldr	r3, [pc, #84]	; (800505c <MX_TIM4_Init+0x90>)
 8005008:	2200      	movs	r2, #0
 800500a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800500c:	4813      	ldr	r0, [pc, #76]	; (800505c <MX_TIM4_Init+0x90>)
 800500e:	f003 fad3 	bl	80085b8 <HAL_TIM_Base_Init>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d001      	beq.n	800501c <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8005018:	f000 f94a 	bl	80052b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800501c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005020:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005022:	f107 0308 	add.w	r3, r7, #8
 8005026:	4619      	mov	r1, r3
 8005028:	480c      	ldr	r0, [pc, #48]	; (800505c <MX_TIM4_Init+0x90>)
 800502a:	f003 fe8b 	bl	8008d44 <HAL_TIM_ConfigClockSource>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d001      	beq.n	8005038 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8005034:	f000 f93c 	bl	80052b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005038:	2300      	movs	r3, #0
 800503a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800503c:	2300      	movs	r3, #0
 800503e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005040:	463b      	mov	r3, r7
 8005042:	4619      	mov	r1, r3
 8005044:	4805      	ldr	r0, [pc, #20]	; (800505c <MX_TIM4_Init+0x90>)
 8005046:	f004 fa09 	bl	800945c <HAL_TIMEx_MasterConfigSynchronization>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d001      	beq.n	8005054 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8005050:	f000 f92e 	bl	80052b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8005054:	bf00      	nop
 8005056:	3718      	adds	r7, #24
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	2000045c 	.word	0x2000045c
 8005060:	40000800 	.word	0x40000800

08005064 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800506a:	4b0c      	ldr	r3, [pc, #48]	; (800509c <MX_DMA_Init+0x38>)
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	4a0b      	ldr	r2, [pc, #44]	; (800509c <MX_DMA_Init+0x38>)
 8005070:	f043 0301 	orr.w	r3, r3, #1
 8005074:	6153      	str	r3, [r2, #20]
 8005076:	4b09      	ldr	r3, [pc, #36]	; (800509c <MX_DMA_Init+0x38>)
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	f003 0301 	and.w	r3, r3, #1
 800507e:	607b      	str	r3, [r7, #4]
 8005080:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8005082:	2200      	movs	r2, #0
 8005084:	2100      	movs	r1, #0
 8005086:	200b      	movs	r0, #11
 8005088:	f001 f97b 	bl	8006382 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800508c:	200b      	movs	r0, #11
 800508e:	f001 f994 	bl	80063ba <HAL_NVIC_EnableIRQ>

}
 8005092:	bf00      	nop
 8005094:	3708      	adds	r7, #8
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	40021000 	.word	0x40021000

080050a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b088      	sub	sp, #32
 80050a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050a6:	f107 0310 	add.w	r3, r7, #16
 80050aa:	2200      	movs	r2, #0
 80050ac:	601a      	str	r2, [r3, #0]
 80050ae:	605a      	str	r2, [r3, #4]
 80050b0:	609a      	str	r2, [r3, #8]
 80050b2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80050b4:	4b77      	ldr	r3, [pc, #476]	; (8005294 <MX_GPIO_Init+0x1f4>)
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	4a76      	ldr	r2, [pc, #472]	; (8005294 <MX_GPIO_Init+0x1f4>)
 80050ba:	f043 0310 	orr.w	r3, r3, #16
 80050be:	6193      	str	r3, [r2, #24]
 80050c0:	4b74      	ldr	r3, [pc, #464]	; (8005294 <MX_GPIO_Init+0x1f4>)
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	f003 0310 	and.w	r3, r3, #16
 80050c8:	60fb      	str	r3, [r7, #12]
 80050ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80050cc:	4b71      	ldr	r3, [pc, #452]	; (8005294 <MX_GPIO_Init+0x1f4>)
 80050ce:	699b      	ldr	r3, [r3, #24]
 80050d0:	4a70      	ldr	r2, [pc, #448]	; (8005294 <MX_GPIO_Init+0x1f4>)
 80050d2:	f043 0320 	orr.w	r3, r3, #32
 80050d6:	6193      	str	r3, [r2, #24]
 80050d8:	4b6e      	ldr	r3, [pc, #440]	; (8005294 <MX_GPIO_Init+0x1f4>)
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	f003 0320 	and.w	r3, r3, #32
 80050e0:	60bb      	str	r3, [r7, #8]
 80050e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80050e4:	4b6b      	ldr	r3, [pc, #428]	; (8005294 <MX_GPIO_Init+0x1f4>)
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	4a6a      	ldr	r2, [pc, #424]	; (8005294 <MX_GPIO_Init+0x1f4>)
 80050ea:	f043 0304 	orr.w	r3, r3, #4
 80050ee:	6193      	str	r3, [r2, #24]
 80050f0:	4b68      	ldr	r3, [pc, #416]	; (8005294 <MX_GPIO_Init+0x1f4>)
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	f003 0304 	and.w	r3, r3, #4
 80050f8:	607b      	str	r3, [r7, #4]
 80050fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80050fc:	4b65      	ldr	r3, [pc, #404]	; (8005294 <MX_GPIO_Init+0x1f4>)
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	4a64      	ldr	r2, [pc, #400]	; (8005294 <MX_GPIO_Init+0x1f4>)
 8005102:	f043 0308 	orr.w	r3, r3, #8
 8005106:	6193      	str	r3, [r2, #24]
 8005108:	4b62      	ldr	r3, [pc, #392]	; (8005294 <MX_GPIO_Init+0x1f4>)
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	f003 0308 	and.w	r3, r3, #8
 8005110:	603b      	str	r3, [r7, #0]
 8005112:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8005114:	2200      	movs	r2, #0
 8005116:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800511a:	485f      	ldr	r0, [pc, #380]	; (8005298 <MX_GPIO_Init+0x1f8>)
 800511c:	f001 ffe7 	bl	80070ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_9, GPIO_PIN_RESET);
 8005120:	2200      	movs	r2, #0
 8005122:	f640 6101 	movw	r1, #3585	; 0xe01
 8005126:	485d      	ldr	r0, [pc, #372]	; (800529c <MX_GPIO_Init+0x1fc>)
 8005128:	f001 ffe1 	bl	80070ee <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800512c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8005130:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005132:	2300      	movs	r3, #0
 8005134:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005136:	2300      	movs	r3, #0
 8005138:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800513a:	f107 0310 	add.w	r3, r7, #16
 800513e:	4619      	mov	r1, r3
 8005140:	4855      	ldr	r0, [pc, #340]	; (8005298 <MX_GPIO_Init+0x1f8>)
 8005142:	f001 fe39 	bl	8006db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005146:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800514a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800514c:	2301      	movs	r3, #1
 800514e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005150:	2300      	movs	r3, #0
 8005152:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005154:	2302      	movs	r3, #2
 8005156:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005158:	f107 0310 	add.w	r3, r7, #16
 800515c:	4619      	mov	r1, r3
 800515e:	484e      	ldr	r0, [pc, #312]	; (8005298 <MX_GPIO_Init+0x1f8>)
 8005160:	f001 fe2a 	bl	8006db8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8005164:	23c2      	movs	r3, #194	; 0xc2
 8005166:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005168:	2303      	movs	r3, #3
 800516a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800516c:	f107 0310 	add.w	r3, r7, #16
 8005170:	4619      	mov	r1, r3
 8005172:	484b      	ldr	r0, [pc, #300]	; (80052a0 <MX_GPIO_Init+0x200>)
 8005174:	f001 fe20 	bl	8006db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005178:	2304      	movs	r3, #4
 800517a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800517c:	4b49      	ldr	r3, [pc, #292]	; (80052a4 <MX_GPIO_Init+0x204>)
 800517e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005180:	2300      	movs	r3, #0
 8005182:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005184:	f107 0310 	add.w	r3, r7, #16
 8005188:	4619      	mov	r1, r3
 800518a:	4845      	ldr	r0, [pc, #276]	; (80052a0 <MX_GPIO_Init+0x200>)
 800518c:	f001 fe14 	bl	8006db8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA8 PA9
                           PA10 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9
 8005190:	f241 7330 	movw	r3, #5936	; 0x1730
 8005194:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_10|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005196:	2300      	movs	r3, #0
 8005198:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800519a:	2300      	movs	r3, #0
 800519c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800519e:	f107 0310 	add.w	r3, r7, #16
 80051a2:	4619      	mov	r1, r3
 80051a4:	483e      	ldr	r0, [pc, #248]	; (80052a0 <MX_GPIO_Init+0x200>)
 80051a6:	f001 fe07 	bl	8006db8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB11 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_9;
 80051aa:	f640 6301 	movw	r3, #3585	; 0xe01
 80051ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80051b0:	2301      	movs	r3, #1
 80051b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051b4:	2300      	movs	r3, #0
 80051b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051b8:	2302      	movs	r3, #2
 80051ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051bc:	f107 0310 	add.w	r3, r7, #16
 80051c0:	4619      	mov	r1, r3
 80051c2:	4836      	ldr	r0, [pc, #216]	; (800529c <MX_GPIO_Init+0x1fc>)
 80051c4:	f001 fdf8 	bl	8006db8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB14 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_14|GPIO_PIN_3;
 80051c8:	f244 030a 	movw	r3, #16394	; 0x400a
 80051cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80051ce:	4b35      	ldr	r3, [pc, #212]	; (80052a4 <MX_GPIO_Init+0x204>)
 80051d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051d2:	2300      	movs	r3, #0
 80051d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051d6:	f107 0310 	add.w	r3, r7, #16
 80051da:	4619      	mov	r1, r3
 80051dc:	482f      	ldr	r0, [pc, #188]	; (800529c <MX_GPIO_Init+0x1fc>)
 80051de:	f001 fdeb 	bl	8006db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80051e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80051e8:	4b2f      	ldr	r3, [pc, #188]	; (80052a8 <MX_GPIO_Init+0x208>)
 80051ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ec:	2300      	movs	r3, #0
 80051ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051f0:	f107 0310 	add.w	r3, r7, #16
 80051f4:	4619      	mov	r1, r3
 80051f6:	4829      	ldr	r0, [pc, #164]	; (800529c <MX_GPIO_Init+0x1fc>)
 80051f8:	f001 fdde 	bl	8006db8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB15 PB4 PB5
                           PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5
 80051fc:	f24a 1330 	movw	r3, #41264	; 0xa130
 8005200:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005202:	2300      	movs	r3, #0
 8005204:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005206:	2300      	movs	r3, #0
 8005208:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800520a:	f107 0310 	add.w	r3, r7, #16
 800520e:	4619      	mov	r1, r3
 8005210:	4822      	ldr	r0, [pc, #136]	; (800529c <MX_GPIO_Init+0x1fc>)
 8005212:	f001 fdd1 	bl	8006db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005216:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800521a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800521c:	4b23      	ldr	r3, [pc, #140]	; (80052ac <MX_GPIO_Init+0x20c>)
 800521e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005220:	2300      	movs	r3, #0
 8005222:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005224:	f107 0310 	add.w	r3, r7, #16
 8005228:	4619      	mov	r1, r3
 800522a:	481d      	ldr	r0, [pc, #116]	; (80052a0 <MX_GPIO_Init+0x200>)
 800522c:	f001 fdc4 	bl	8006db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005230:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005234:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005236:	4b1c      	ldr	r3, [pc, #112]	; (80052a8 <MX_GPIO_Init+0x208>)
 8005238:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800523a:	2300      	movs	r3, #0
 800523c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800523e:	f107 0310 	add.w	r3, r7, #16
 8005242:	4619      	mov	r1, r3
 8005244:	4816      	ldr	r0, [pc, #88]	; (80052a0 <MX_GPIO_Init+0x200>)
 8005246:	f001 fdb7 	bl	8006db8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 3, 0);
 800524a:	2200      	movs	r2, #0
 800524c:	2103      	movs	r1, #3
 800524e:	2007      	movs	r0, #7
 8005250:	f001 f897 	bl	8006382 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8005254:	2007      	movs	r0, #7
 8005256:	f001 f8b0 	bl	80063ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 3, 0);
 800525a:	2200      	movs	r2, #0
 800525c:	2103      	movs	r1, #3
 800525e:	2008      	movs	r0, #8
 8005260:	f001 f88f 	bl	8006382 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8005264:	2008      	movs	r0, #8
 8005266:	f001 f8a8 	bl	80063ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 3, 0);
 800526a:	2200      	movs	r2, #0
 800526c:	2103      	movs	r1, #3
 800526e:	2009      	movs	r0, #9
 8005270:	f001 f887 	bl	8006382 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8005274:	2009      	movs	r0, #9
 8005276:	f001 f8a0 	bl	80063ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800527a:	2200      	movs	r2, #0
 800527c:	2100      	movs	r1, #0
 800527e:	2028      	movs	r0, #40	; 0x28
 8005280:	f001 f87f 	bl	8006382 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005284:	2028      	movs	r0, #40	; 0x28
 8005286:	f001 f898 	bl	80063ba <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800528a:	bf00      	nop
 800528c:	3720      	adds	r7, #32
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	40021000 	.word	0x40021000
 8005298:	40011000 	.word	0x40011000
 800529c:	40010c00 	.word	0x40010c00
 80052a0:	40010800 	.word	0x40010800
 80052a4:	10310000 	.word	0x10310000
 80052a8:	10210000 	.word	0x10210000
 80052ac:	10110000 	.word	0x10110000

080052b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80052b0:	b480      	push	{r7}
 80052b2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80052b4:	b672      	cpsid	i
}
 80052b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80052b8:	e7fe      	b.n	80052b8 <Error_Handler+0x8>
	...

080052bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80052c2:	4b1d      	ldr	r3, [pc, #116]	; (8005338 <HAL_MspInit+0x7c>)
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	4a1c      	ldr	r2, [pc, #112]	; (8005338 <HAL_MspInit+0x7c>)
 80052c8:	f043 0301 	orr.w	r3, r3, #1
 80052cc:	6193      	str	r3, [r2, #24]
 80052ce:	4b1a      	ldr	r3, [pc, #104]	; (8005338 <HAL_MspInit+0x7c>)
 80052d0:	699b      	ldr	r3, [r3, #24]
 80052d2:	f003 0301 	and.w	r3, r3, #1
 80052d6:	60bb      	str	r3, [r7, #8]
 80052d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80052da:	4b17      	ldr	r3, [pc, #92]	; (8005338 <HAL_MspInit+0x7c>)
 80052dc:	69db      	ldr	r3, [r3, #28]
 80052de:	4a16      	ldr	r2, [pc, #88]	; (8005338 <HAL_MspInit+0x7c>)
 80052e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052e4:	61d3      	str	r3, [r2, #28]
 80052e6:	4b14      	ldr	r3, [pc, #80]	; (8005338 <HAL_MspInit+0x7c>)
 80052e8:	69db      	ldr	r3, [r3, #28]
 80052ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052ee:	607b      	str	r3, [r7, #4]
 80052f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 80052f2:	2200      	movs	r2, #0
 80052f4:	2100      	movs	r1, #0
 80052f6:	2004      	movs	r0, #4
 80052f8:	f001 f843 	bl	8006382 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 80052fc:	2004      	movs	r0, #4
 80052fe:	f001 f85c 	bl	80063ba <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8005302:	2200      	movs	r2, #0
 8005304:	2100      	movs	r1, #0
 8005306:	2005      	movs	r0, #5
 8005308:	f001 f83b 	bl	8006382 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800530c:	2005      	movs	r0, #5
 800530e:	f001 f854 	bl	80063ba <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005312:	4b0a      	ldr	r3, [pc, #40]	; (800533c <HAL_MspInit+0x80>)
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	60fb      	str	r3, [r7, #12]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800531e:	60fb      	str	r3, [r7, #12]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005326:	60fb      	str	r3, [r7, #12]
 8005328:	4a04      	ldr	r2, [pc, #16]	; (800533c <HAL_MspInit+0x80>)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800532e:	bf00      	nop
 8005330:	3710      	adds	r7, #16
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	40021000 	.word	0x40021000
 800533c:	40010000 	.word	0x40010000

08005340 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b088      	sub	sp, #32
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005348:	f107 0310 	add.w	r3, r7, #16
 800534c:	2200      	movs	r2, #0
 800534e:	601a      	str	r2, [r3, #0]
 8005350:	605a      	str	r2, [r3, #4]
 8005352:	609a      	str	r2, [r3, #8]
 8005354:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a2d      	ldr	r2, [pc, #180]	; (8005410 <HAL_ADC_MspInit+0xd0>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d152      	bne.n	8005406 <HAL_ADC_MspInit+0xc6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005360:	4b2c      	ldr	r3, [pc, #176]	; (8005414 <HAL_ADC_MspInit+0xd4>)
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	4a2b      	ldr	r2, [pc, #172]	; (8005414 <HAL_ADC_MspInit+0xd4>)
 8005366:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800536a:	6193      	str	r3, [r2, #24]
 800536c:	4b29      	ldr	r3, [pc, #164]	; (8005414 <HAL_ADC_MspInit+0xd4>)
 800536e:	699b      	ldr	r3, [r3, #24]
 8005370:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005374:	60fb      	str	r3, [r7, #12]
 8005376:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005378:	4b26      	ldr	r3, [pc, #152]	; (8005414 <HAL_ADC_MspInit+0xd4>)
 800537a:	699b      	ldr	r3, [r3, #24]
 800537c:	4a25      	ldr	r2, [pc, #148]	; (8005414 <HAL_ADC_MspInit+0xd4>)
 800537e:	f043 0304 	orr.w	r3, r3, #4
 8005382:	6193      	str	r3, [r2, #24]
 8005384:	4b23      	ldr	r3, [pc, #140]	; (8005414 <HAL_ADC_MspInit+0xd4>)
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	f003 0304 	and.w	r3, r3, #4
 800538c:	60bb      	str	r3, [r7, #8]
 800538e:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8005390:	23c3      	movs	r3, #195	; 0xc3
 8005392:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005394:	2303      	movs	r3, #3
 8005396:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005398:	f107 0310 	add.w	r3, r7, #16
 800539c:	4619      	mov	r1, r3
 800539e:	481e      	ldr	r0, [pc, #120]	; (8005418 <HAL_ADC_MspInit+0xd8>)
 80053a0:	f001 fd0a 	bl	8006db8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80053a4:	4b1d      	ldr	r3, [pc, #116]	; (800541c <HAL_ADC_MspInit+0xdc>)
 80053a6:	4a1e      	ldr	r2, [pc, #120]	; (8005420 <HAL_ADC_MspInit+0xe0>)
 80053a8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80053aa:	4b1c      	ldr	r3, [pc, #112]	; (800541c <HAL_ADC_MspInit+0xdc>)
 80053ac:	2200      	movs	r2, #0
 80053ae:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80053b0:	4b1a      	ldr	r3, [pc, #104]	; (800541c <HAL_ADC_MspInit+0xdc>)
 80053b2:	2200      	movs	r2, #0
 80053b4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80053b6:	4b19      	ldr	r3, [pc, #100]	; (800541c <HAL_ADC_MspInit+0xdc>)
 80053b8:	2280      	movs	r2, #128	; 0x80
 80053ba:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80053bc:	4b17      	ldr	r3, [pc, #92]	; (800541c <HAL_ADC_MspInit+0xdc>)
 80053be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053c2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80053c4:	4b15      	ldr	r3, [pc, #84]	; (800541c <HAL_ADC_MspInit+0xdc>)
 80053c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80053ca:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80053cc:	4b13      	ldr	r3, [pc, #76]	; (800541c <HAL_ADC_MspInit+0xdc>)
 80053ce:	2200      	movs	r2, #0
 80053d0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80053d2:	4b12      	ldr	r3, [pc, #72]	; (800541c <HAL_ADC_MspInit+0xdc>)
 80053d4:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80053d8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80053da:	4810      	ldr	r0, [pc, #64]	; (800541c <HAL_ADC_MspInit+0xdc>)
 80053dc:	f001 f808 	bl	80063f0 <HAL_DMA_Init>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d001      	beq.n	80053ea <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 80053e6:	f7ff ff63 	bl	80052b0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a0b      	ldr	r2, [pc, #44]	; (800541c <HAL_ADC_MspInit+0xdc>)
 80053ee:	621a      	str	r2, [r3, #32]
 80053f0:	4a0a      	ldr	r2, [pc, #40]	; (800541c <HAL_ADC_MspInit+0xdc>)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80053f6:	2200      	movs	r2, #0
 80053f8:	2100      	movs	r1, #0
 80053fa:	2012      	movs	r0, #18
 80053fc:	f000 ffc1 	bl	8006382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8005400:	2012      	movs	r0, #18
 8005402:	f000 ffda 	bl	80063ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005406:	bf00      	nop
 8005408:	3720      	adds	r7, #32
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	40012400 	.word	0x40012400
 8005414:	40021000 	.word	0x40021000
 8005418:	40010800 	.word	0x40010800
 800541c:	200002ec 	.word	0x200002ec
 8005420:	40020008 	.word	0x40020008

08005424 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b088      	sub	sp, #32
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800542c:	f107 0310 	add.w	r3, r7, #16
 8005430:	2200      	movs	r2, #0
 8005432:	601a      	str	r2, [r3, #0]
 8005434:	605a      	str	r2, [r3, #4]
 8005436:	609a      	str	r2, [r3, #8]
 8005438:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a15      	ldr	r2, [pc, #84]	; (8005494 <HAL_I2C_MspInit+0x70>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d123      	bne.n	800548c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005444:	4b14      	ldr	r3, [pc, #80]	; (8005498 <HAL_I2C_MspInit+0x74>)
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	4a13      	ldr	r2, [pc, #76]	; (8005498 <HAL_I2C_MspInit+0x74>)
 800544a:	f043 0308 	orr.w	r3, r3, #8
 800544e:	6193      	str	r3, [r2, #24]
 8005450:	4b11      	ldr	r3, [pc, #68]	; (8005498 <HAL_I2C_MspInit+0x74>)
 8005452:	699b      	ldr	r3, [r3, #24]
 8005454:	f003 0308 	and.w	r3, r3, #8
 8005458:	60fb      	str	r3, [r7, #12]
 800545a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800545c:	23c0      	movs	r3, #192	; 0xc0
 800545e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005460:	2312      	movs	r3, #18
 8005462:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005464:	2303      	movs	r3, #3
 8005466:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005468:	f107 0310 	add.w	r3, r7, #16
 800546c:	4619      	mov	r1, r3
 800546e:	480b      	ldr	r0, [pc, #44]	; (800549c <HAL_I2C_MspInit+0x78>)
 8005470:	f001 fca2 	bl	8006db8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005474:	4b08      	ldr	r3, [pc, #32]	; (8005498 <HAL_I2C_MspInit+0x74>)
 8005476:	69db      	ldr	r3, [r3, #28]
 8005478:	4a07      	ldr	r2, [pc, #28]	; (8005498 <HAL_I2C_MspInit+0x74>)
 800547a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800547e:	61d3      	str	r3, [r2, #28]
 8005480:	4b05      	ldr	r3, [pc, #20]	; (8005498 <HAL_I2C_MspInit+0x74>)
 8005482:	69db      	ldr	r3, [r3, #28]
 8005484:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005488:	60bb      	str	r3, [r7, #8]
 800548a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800548c:	bf00      	nop
 800548e:	3720      	adds	r7, #32
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}
 8005494:	40005400 	.word	0x40005400
 8005498:	40021000 	.word	0x40021000
 800549c:	40010c00 	.word	0x40010c00

080054a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b086      	sub	sp, #24
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a34      	ldr	r2, [pc, #208]	; (8005580 <HAL_TIM_Base_MspInit+0xe0>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d114      	bne.n	80054dc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80054b2:	4b34      	ldr	r3, [pc, #208]	; (8005584 <HAL_TIM_Base_MspInit+0xe4>)
 80054b4:	699b      	ldr	r3, [r3, #24]
 80054b6:	4a33      	ldr	r2, [pc, #204]	; (8005584 <HAL_TIM_Base_MspInit+0xe4>)
 80054b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80054bc:	6193      	str	r3, [r2, #24]
 80054be:	4b31      	ldr	r3, [pc, #196]	; (8005584 <HAL_TIM_Base_MspInit+0xe4>)
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054c6:	617b      	str	r3, [r7, #20]
 80054c8:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80054ca:	2200      	movs	r2, #0
 80054cc:	2100      	movs	r1, #0
 80054ce:	2019      	movs	r0, #25
 80054d0:	f000 ff57 	bl	8006382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80054d4:	2019      	movs	r0, #25
 80054d6:	f000 ff70 	bl	80063ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80054da:	e04c      	b.n	8005576 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM2)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054e4:	d114      	bne.n	8005510 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80054e6:	4b27      	ldr	r3, [pc, #156]	; (8005584 <HAL_TIM_Base_MspInit+0xe4>)
 80054e8:	69db      	ldr	r3, [r3, #28]
 80054ea:	4a26      	ldr	r2, [pc, #152]	; (8005584 <HAL_TIM_Base_MspInit+0xe4>)
 80054ec:	f043 0301 	orr.w	r3, r3, #1
 80054f0:	61d3      	str	r3, [r2, #28]
 80054f2:	4b24      	ldr	r3, [pc, #144]	; (8005584 <HAL_TIM_Base_MspInit+0xe4>)
 80054f4:	69db      	ldr	r3, [r3, #28]
 80054f6:	f003 0301 	and.w	r3, r3, #1
 80054fa:	613b      	str	r3, [r7, #16]
 80054fc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 80054fe:	2200      	movs	r2, #0
 8005500:	2103      	movs	r1, #3
 8005502:	201c      	movs	r0, #28
 8005504:	f000 ff3d 	bl	8006382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005508:	201c      	movs	r0, #28
 800550a:	f000 ff56 	bl	80063ba <HAL_NVIC_EnableIRQ>
}
 800550e:	e032      	b.n	8005576 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM3)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a1c      	ldr	r2, [pc, #112]	; (8005588 <HAL_TIM_Base_MspInit+0xe8>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d114      	bne.n	8005544 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800551a:	4b1a      	ldr	r3, [pc, #104]	; (8005584 <HAL_TIM_Base_MspInit+0xe4>)
 800551c:	69db      	ldr	r3, [r3, #28]
 800551e:	4a19      	ldr	r2, [pc, #100]	; (8005584 <HAL_TIM_Base_MspInit+0xe4>)
 8005520:	f043 0302 	orr.w	r3, r3, #2
 8005524:	61d3      	str	r3, [r2, #28]
 8005526:	4b17      	ldr	r3, [pc, #92]	; (8005584 <HAL_TIM_Base_MspInit+0xe4>)
 8005528:	69db      	ldr	r3, [r3, #28]
 800552a:	f003 0302 	and.w	r3, r3, #2
 800552e:	60fb      	str	r3, [r7, #12]
 8005530:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 8005532:	2200      	movs	r2, #0
 8005534:	2103      	movs	r1, #3
 8005536:	201d      	movs	r0, #29
 8005538:	f000 ff23 	bl	8006382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800553c:	201d      	movs	r0, #29
 800553e:	f000 ff3c 	bl	80063ba <HAL_NVIC_EnableIRQ>
}
 8005542:	e018      	b.n	8005576 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM4)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a10      	ldr	r2, [pc, #64]	; (800558c <HAL_TIM_Base_MspInit+0xec>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d113      	bne.n	8005576 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800554e:	4b0d      	ldr	r3, [pc, #52]	; (8005584 <HAL_TIM_Base_MspInit+0xe4>)
 8005550:	69db      	ldr	r3, [r3, #28]
 8005552:	4a0c      	ldr	r2, [pc, #48]	; (8005584 <HAL_TIM_Base_MspInit+0xe4>)
 8005554:	f043 0304 	orr.w	r3, r3, #4
 8005558:	61d3      	str	r3, [r2, #28]
 800555a:	4b0a      	ldr	r3, [pc, #40]	; (8005584 <HAL_TIM_Base_MspInit+0xe4>)
 800555c:	69db      	ldr	r3, [r3, #28]
 800555e:	f003 0304 	and.w	r3, r3, #4
 8005562:	60bb      	str	r3, [r7, #8]
 8005564:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8005566:	2200      	movs	r2, #0
 8005568:	2101      	movs	r1, #1
 800556a:	201e      	movs	r0, #30
 800556c:	f000 ff09 	bl	8006382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005570:	201e      	movs	r0, #30
 8005572:	f000 ff22 	bl	80063ba <HAL_NVIC_EnableIRQ>
}
 8005576:	bf00      	nop
 8005578:	3718      	adds	r7, #24
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	40012c00 	.word	0x40012c00
 8005584:	40021000 	.word	0x40021000
 8005588:	40000400 	.word	0x40000400
 800558c:	40000800 	.word	0x40000800

08005590 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b088      	sub	sp, #32
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005598:	f107 0310 	add.w	r3, r7, #16
 800559c:	2200      	movs	r2, #0
 800559e:	601a      	str	r2, [r3, #0]
 80055a0:	605a      	str	r2, [r3, #4]
 80055a2:	609a      	str	r2, [r3, #8]
 80055a4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055ae:	d117      	bne.n	80055e0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055b0:	4b0d      	ldr	r3, [pc, #52]	; (80055e8 <HAL_TIM_MspPostInit+0x58>)
 80055b2:	699b      	ldr	r3, [r3, #24]
 80055b4:	4a0c      	ldr	r2, [pc, #48]	; (80055e8 <HAL_TIM_MspPostInit+0x58>)
 80055b6:	f043 0304 	orr.w	r3, r3, #4
 80055ba:	6193      	str	r3, [r2, #24]
 80055bc:	4b0a      	ldr	r3, [pc, #40]	; (80055e8 <HAL_TIM_MspPostInit+0x58>)
 80055be:	699b      	ldr	r3, [r3, #24]
 80055c0:	f003 0304 	and.w	r3, r3, #4
 80055c4:	60fb      	str	r3, [r7, #12]
 80055c6:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80055c8:	2308      	movs	r3, #8
 80055ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055cc:	2302      	movs	r3, #2
 80055ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80055d0:	2303      	movs	r3, #3
 80055d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055d4:	f107 0310 	add.w	r3, r7, #16
 80055d8:	4619      	mov	r1, r3
 80055da:	4804      	ldr	r0, [pc, #16]	; (80055ec <HAL_TIM_MspPostInit+0x5c>)
 80055dc:	f001 fbec 	bl	8006db8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80055e0:	bf00      	nop
 80055e2:	3720      	adds	r7, #32
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	40021000 	.word	0x40021000
 80055ec:	40010800 	.word	0x40010800

080055f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80055f0:	b480      	push	{r7}
 80055f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80055f4:	e7fe      	b.n	80055f4 <NMI_Handler+0x4>

080055f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80055f6:	b480      	push	{r7}
 80055f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80055fa:	e7fe      	b.n	80055fa <HardFault_Handler+0x4>

080055fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80055fc:	b480      	push	{r7}
 80055fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005600:	e7fe      	b.n	8005600 <MemManage_Handler+0x4>

08005602 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005602:	b480      	push	{r7}
 8005604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005606:	e7fe      	b.n	8005606 <BusFault_Handler+0x4>

08005608 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005608:	b480      	push	{r7}
 800560a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800560c:	e7fe      	b.n	800560c <UsageFault_Handler+0x4>

0800560e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800560e:	b480      	push	{r7}
 8005610:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005612:	bf00      	nop
 8005614:	46bd      	mov	sp, r7
 8005616:	bc80      	pop	{r7}
 8005618:	4770      	bx	lr

0800561a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800561a:	b480      	push	{r7}
 800561c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800561e:	bf00      	nop
 8005620:	46bd      	mov	sp, r7
 8005622:	bc80      	pop	{r7}
 8005624:	4770      	bx	lr

08005626 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005626:	b480      	push	{r7}
 8005628:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800562a:	bf00      	nop
 800562c:	46bd      	mov	sp, r7
 800562e:	bc80      	pop	{r7}
 8005630:	4770      	bx	lr

08005632 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005632:	b580      	push	{r7, lr}
 8005634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005636:	f000 f91b 	bl	8005870 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800563a:	bf00      	nop
 800563c:	bd80      	pop	{r7, pc}

0800563e <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 800563e:	b580      	push	{r7, lr}
 8005640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8005642:	f001 f933 	bl	80068ac <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8005646:	bf00      	nop
 8005648:	bd80      	pop	{r7, pc}

0800564a <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800564a:	b480      	push	{r7}
 800564c:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800564e:	bf00      	nop
 8005650:	46bd      	mov	sp, r7
 8005652:	bc80      	pop	{r7}
 8005654:	4770      	bx	lr

08005656 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8005656:	b580      	push	{r7, lr}
 8005658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800565a:	2002      	movs	r0, #2
 800565c:	f001 fd60 	bl	8007120 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8005660:	bf00      	nop
 8005662:	bd80      	pop	{r7, pc}

08005664 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8005668:	2004      	movs	r0, #4
 800566a:	f001 fd59 	bl	8007120 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800566e:	bf00      	nop
 8005670:	bd80      	pop	{r7, pc}

08005672 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8005672:	b580      	push	{r7, lr}
 8005674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8005676:	2008      	movs	r0, #8
 8005678:	f001 fd52 	bl	8007120 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800567c:	bf00      	nop
 800567e:	bd80      	pop	{r7, pc}

08005680 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005684:	4802      	ldr	r0, [pc, #8]	; (8005690 <DMA1_Channel1_IRQHandler+0x10>)
 8005686:	f000 ff6d 	bl	8006564 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800568a:	bf00      	nop
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	200002ec 	.word	0x200002ec

08005694 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005698:	4802      	ldr	r0, [pc, #8]	; (80056a4 <ADC1_2_IRQHandler+0x10>)
 800569a:	f000 fabb 	bl	8005c14 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800569e:	bf00      	nop
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	200002bc 	.word	0x200002bc

080056a8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80056ac:	4802      	ldr	r0, [pc, #8]	; (80056b8 <TIM1_UP_IRQHandler+0x10>)
 80056ae:	f003 f983 	bl	80089b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80056b2:	bf00      	nop
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	20000384 	.word	0x20000384

080056bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80056c0:	4802      	ldr	r0, [pc, #8]	; (80056cc <TIM2_IRQHandler+0x10>)
 80056c2:	f003 f979 	bl	80089b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80056c6:	bf00      	nop
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	200003cc 	.word	0x200003cc

080056d0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80056d4:	4802      	ldr	r0, [pc, #8]	; (80056e0 <TIM3_IRQHandler+0x10>)
 80056d6:	f003 f96f 	bl	80089b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80056da:	bf00      	nop
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	20000414 	.word	0x20000414

080056e4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80056e8:	4802      	ldr	r0, [pc, #8]	; (80056f4 <TIM4_IRQHandler+0x10>)
 80056ea:	f003 f965 	bl	80089b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80056ee:	bf00      	nop
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	2000045c 	.word	0x2000045c

080056f8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80056fc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005700:	f001 fd0e 	bl	8007120 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8005704:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005708:	f001 fd0a 	bl	8007120 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800570c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005710:	f001 fd06 	bl	8007120 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8005714:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005718:	f001 fd02 	bl	8007120 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800571c:	bf00      	nop
 800571e:	bd80      	pop	{r7, pc}

08005720 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b086      	sub	sp, #24
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005728:	4a14      	ldr	r2, [pc, #80]	; (800577c <_sbrk+0x5c>)
 800572a:	4b15      	ldr	r3, [pc, #84]	; (8005780 <_sbrk+0x60>)
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
   if (NULL == __sbrk_heap_end)
 8005734:	4b13      	ldr	r3, [pc, #76]	; (8005784 <_sbrk+0x64>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d102      	bne.n	8005742 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800573c:	4b11      	ldr	r3, [pc, #68]	; (8005784 <_sbrk+0x64>)
 800573e:	4a12      	ldr	r2, [pc, #72]	; (8005788 <_sbrk+0x68>)
 8005740:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005742:	4b10      	ldr	r3, [pc, #64]	; (8005784 <_sbrk+0x64>)
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4413      	add	r3, r2
 800574a:	693a      	ldr	r2, [r7, #16]
 800574c:	429a      	cmp	r2, r3
 800574e:	d207      	bcs.n	8005760 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005750:	f003 ffc8 	bl	80096e4 <__errno>
 8005754:	4603      	mov	r3, r0
 8005756:	220c      	movs	r2, #12
 8005758:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800575a:	f04f 33ff 	mov.w	r3, #4294967295
 800575e:	e009      	b.n	8005774 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005760:	4b08      	ldr	r3, [pc, #32]	; (8005784 <_sbrk+0x64>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005766:	4b07      	ldr	r3, [pc, #28]	; (8005784 <_sbrk+0x64>)
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4413      	add	r3, r2
 800576e:	4a05      	ldr	r2, [pc, #20]	; (8005784 <_sbrk+0x64>)
 8005770:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005772:	68fb      	ldr	r3, [r7, #12]
}
 8005774:	4618      	mov	r0, r3
 8005776:	3718      	adds	r7, #24
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}
 800577c:	20005000 	.word	0x20005000
 8005780:	00000400 	.word	0x00000400
 8005784:	20000770 	.word	0x20000770
 8005788:	200008e0 	.word	0x200008e0

0800578c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800578c:	b480      	push	{r7}
 800578e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005790:	bf00      	nop
 8005792:	46bd      	mov	sp, r7
 8005794:	bc80      	pop	{r7}
 8005796:	4770      	bx	lr

08005798 <Reset_Handler>:
 8005798:	f7ff fff8 	bl	800578c <SystemInit>
 800579c:	480b      	ldr	r0, [pc, #44]	; (80057cc <LoopFillZerobss+0xe>)
 800579e:	490c      	ldr	r1, [pc, #48]	; (80057d0 <LoopFillZerobss+0x12>)
 80057a0:	4a0c      	ldr	r2, [pc, #48]	; (80057d4 <LoopFillZerobss+0x16>)
 80057a2:	2300      	movs	r3, #0
 80057a4:	e002      	b.n	80057ac <LoopCopyDataInit>

080057a6 <CopyDataInit>:
 80057a6:	58d4      	ldr	r4, [r2, r3]
 80057a8:	50c4      	str	r4, [r0, r3]
 80057aa:	3304      	adds	r3, #4

080057ac <LoopCopyDataInit>:
 80057ac:	18c4      	adds	r4, r0, r3
 80057ae:	428c      	cmp	r4, r1
 80057b0:	d3f9      	bcc.n	80057a6 <CopyDataInit>
 80057b2:	4a09      	ldr	r2, [pc, #36]	; (80057d8 <LoopFillZerobss+0x1a>)
 80057b4:	4c09      	ldr	r4, [pc, #36]	; (80057dc <LoopFillZerobss+0x1e>)
 80057b6:	2300      	movs	r3, #0
 80057b8:	e001      	b.n	80057be <LoopFillZerobss>

080057ba <FillZerobss>:
 80057ba:	6013      	str	r3, [r2, #0]
 80057bc:	3204      	adds	r2, #4

080057be <LoopFillZerobss>:
 80057be:	42a2      	cmp	r2, r4
 80057c0:	d3fb      	bcc.n	80057ba <FillZerobss>
 80057c2:	f003 ff95 	bl	80096f0 <__libc_init_array>
 80057c6:	f7ff f8ed 	bl	80049a4 <main>
 80057ca:	4770      	bx	lr
 80057cc:	20000000 	.word	0x20000000
 80057d0:	20000298 	.word	0x20000298
 80057d4:	08009958 	.word	0x08009958
 80057d8:	20000298 	.word	0x20000298
 80057dc:	200008e0 	.word	0x200008e0

080057e0 <CAN1_RX1_IRQHandler>:
 80057e0:	e7fe      	b.n	80057e0 <CAN1_RX1_IRQHandler>
	...

080057e4 <HAL_Init>:
 80057e4:	b580      	push	{r7, lr}
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	4b08      	ldr	r3, [pc, #32]	; (800580c <HAL_Init+0x28>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a07      	ldr	r2, [pc, #28]	; (800580c <HAL_Init+0x28>)
 80057ee:	f043 0310 	orr.w	r3, r3, #16
 80057f2:	6013      	str	r3, [r2, #0]
 80057f4:	2003      	movs	r0, #3
 80057f6:	f000 fdb9 	bl	800636c <HAL_NVIC_SetPriorityGrouping>
 80057fa:	200f      	movs	r0, #15
 80057fc:	f000 f808 	bl	8005810 <HAL_InitTick>
 8005800:	f7ff fd5c 	bl	80052bc <HAL_MspInit>
 8005804:	2300      	movs	r3, #0
 8005806:	4618      	mov	r0, r3
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	40022000 	.word	0x40022000

08005810 <HAL_InitTick>:
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	4b12      	ldr	r3, [pc, #72]	; (8005864 <HAL_InitTick+0x54>)
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	4b12      	ldr	r3, [pc, #72]	; (8005868 <HAL_InitTick+0x58>)
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	4619      	mov	r1, r3
 8005822:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005826:	fbb3 f3f1 	udiv	r3, r3, r1
 800582a:	fbb2 f3f3 	udiv	r3, r2, r3
 800582e:	4618      	mov	r0, r3
 8005830:	f000 fdd1 	bl	80063d6 <HAL_SYSTICK_Config>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d001      	beq.n	800583e <HAL_InitTick+0x2e>
 800583a:	2301      	movs	r3, #1
 800583c:	e00e      	b.n	800585c <HAL_InitTick+0x4c>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2b0f      	cmp	r3, #15
 8005842:	d80a      	bhi.n	800585a <HAL_InitTick+0x4a>
 8005844:	2200      	movs	r2, #0
 8005846:	6879      	ldr	r1, [r7, #4]
 8005848:	f04f 30ff 	mov.w	r0, #4294967295
 800584c:	f000 fd99 	bl	8006382 <HAL_NVIC_SetPriority>
 8005850:	4a06      	ldr	r2, [pc, #24]	; (800586c <HAL_InitTick+0x5c>)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6013      	str	r3, [r2, #0]
 8005856:	2300      	movs	r3, #0
 8005858:	e000      	b.n	800585c <HAL_InitTick+0x4c>
 800585a:	2301      	movs	r3, #1
 800585c:	4618      	mov	r0, r3
 800585e:	3708      	adds	r7, #8
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}
 8005864:	2000023c 	.word	0x2000023c
 8005868:	20000244 	.word	0x20000244
 800586c:	20000240 	.word	0x20000240

08005870 <HAL_IncTick>:
 8005870:	b480      	push	{r7}
 8005872:	af00      	add	r7, sp, #0
 8005874:	4b05      	ldr	r3, [pc, #20]	; (800588c <HAL_IncTick+0x1c>)
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	461a      	mov	r2, r3
 800587a:	4b05      	ldr	r3, [pc, #20]	; (8005890 <HAL_IncTick+0x20>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4413      	add	r3, r2
 8005880:	4a03      	ldr	r2, [pc, #12]	; (8005890 <HAL_IncTick+0x20>)
 8005882:	6013      	str	r3, [r2, #0]
 8005884:	bf00      	nop
 8005886:	46bd      	mov	sp, r7
 8005888:	bc80      	pop	{r7}
 800588a:	4770      	bx	lr
 800588c:	20000244 	.word	0x20000244
 8005890:	20000774 	.word	0x20000774

08005894 <HAL_GetTick>:
 8005894:	b480      	push	{r7}
 8005896:	af00      	add	r7, sp, #0
 8005898:	4b02      	ldr	r3, [pc, #8]	; (80058a4 <HAL_GetTick+0x10>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4618      	mov	r0, r3
 800589e:	46bd      	mov	sp, r7
 80058a0:	bc80      	pop	{r7}
 80058a2:	4770      	bx	lr
 80058a4:	20000774 	.word	0x20000774

080058a8 <HAL_ADC_Init>:
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b086      	sub	sp, #24
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	2300      	movs	r3, #0
 80058b2:	75fb      	strb	r3, [r7, #23]
 80058b4:	2300      	movs	r3, #0
 80058b6:	613b      	str	r3, [r7, #16]
 80058b8:	2300      	movs	r3, #0
 80058ba:	60bb      	str	r3, [r7, #8]
 80058bc:	2300      	movs	r3, #0
 80058be:	60fb      	str	r3, [r7, #12]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d101      	bne.n	80058ca <HAL_ADC_Init+0x22>
 80058c6:	2301      	movs	r3, #1
 80058c8:	e0be      	b.n	8005a48 <HAL_ADC_Init+0x1a0>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d109      	bne.n	80058ec <HAL_ADC_Init+0x44>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f7ff fd2a 	bl	8005340 <HAL_ADC_MspInit>
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 fbc1 	bl	8006074 <ADC_ConversionStop_Disable>
 80058f2:	4603      	mov	r3, r0
 80058f4:	75fb      	strb	r3, [r7, #23]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058fa:	f003 0310 	and.w	r3, r3, #16
 80058fe:	2b00      	cmp	r3, #0
 8005900:	f040 8099 	bne.w	8005a36 <HAL_ADC_Init+0x18e>
 8005904:	7dfb      	ldrb	r3, [r7, #23]
 8005906:	2b00      	cmp	r3, #0
 8005908:	f040 8095 	bne.w	8005a36 <HAL_ADC_Init+0x18e>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005910:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005914:	f023 0302 	bic.w	r3, r3, #2
 8005918:	f043 0202 	orr.w	r2, r3, #2
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	629a      	str	r2, [r3, #40]	; 0x28
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685a      	ldr	r2, [r3, #4]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	69db      	ldr	r3, [r3, #28]
 8005928:	431a      	orrs	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	7b1b      	ldrb	r3, [r3, #12]
 800592e:	005b      	lsls	r3, r3, #1
 8005930:	4313      	orrs	r3, r2
 8005932:	68ba      	ldr	r2, [r7, #8]
 8005934:	4313      	orrs	r3, r2
 8005936:	60bb      	str	r3, [r7, #8]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005940:	d003      	beq.n	800594a <HAL_ADC_Init+0xa2>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	2b01      	cmp	r3, #1
 8005948:	d102      	bne.n	8005950 <HAL_ADC_Init+0xa8>
 800594a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800594e:	e000      	b.n	8005952 <HAL_ADC_Init+0xaa>
 8005950:	2300      	movs	r3, #0
 8005952:	693a      	ldr	r2, [r7, #16]
 8005954:	4313      	orrs	r3, r2
 8005956:	613b      	str	r3, [r7, #16]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	7d1b      	ldrb	r3, [r3, #20]
 800595c:	2b01      	cmp	r3, #1
 800595e:	d119      	bne.n	8005994 <HAL_ADC_Init+0xec>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	7b1b      	ldrb	r3, [r3, #12]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d109      	bne.n	800597c <HAL_ADC_Init+0xd4>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	3b01      	subs	r3, #1
 800596e:	035a      	lsls	r2, r3, #13
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	4313      	orrs	r3, r2
 8005974:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005978:	613b      	str	r3, [r7, #16]
 800597a:	e00b      	b.n	8005994 <HAL_ADC_Init+0xec>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005980:	f043 0220 	orr.w	r2, r3, #32
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	629a      	str	r2, [r3, #40]	; 0x28
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800598c:	f043 0201 	orr.w	r2, r3, #1
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	62da      	str	r2, [r3, #44]	; 0x2c
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	693a      	ldr	r2, [r7, #16]
 80059a4:	430a      	orrs	r2, r1
 80059a6:	605a      	str	r2, [r3, #4]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	689a      	ldr	r2, [r3, #8]
 80059ae:	4b28      	ldr	r3, [pc, #160]	; (8005a50 <HAL_ADC_Init+0x1a8>)
 80059b0:	4013      	ands	r3, r2
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	6812      	ldr	r2, [r2, #0]
 80059b6:	68b9      	ldr	r1, [r7, #8]
 80059b8:	430b      	orrs	r3, r1
 80059ba:	6093      	str	r3, [r2, #8]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059c4:	d003      	beq.n	80059ce <HAL_ADC_Init+0x126>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d104      	bne.n	80059d8 <HAL_ADC_Init+0x130>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	3b01      	subs	r3, #1
 80059d4:	051b      	lsls	r3, r3, #20
 80059d6:	60fb      	str	r3, [r7, #12]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059de:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	430a      	orrs	r2, r1
 80059ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	689a      	ldr	r2, [r3, #8]
 80059f2:	4b18      	ldr	r3, [pc, #96]	; (8005a54 <HAL_ADC_Init+0x1ac>)
 80059f4:	4013      	ands	r3, r2
 80059f6:	68ba      	ldr	r2, [r7, #8]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d10b      	bne.n	8005a14 <HAL_ADC_Init+0x16c>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	62da      	str	r2, [r3, #44]	; 0x2c
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a06:	f023 0303 	bic.w	r3, r3, #3
 8005a0a:	f043 0201 	orr.w	r2, r3, #1
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	629a      	str	r2, [r3, #40]	; 0x28
 8005a12:	e018      	b.n	8005a46 <HAL_ADC_Init+0x19e>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a18:	f023 0312 	bic.w	r3, r3, #18
 8005a1c:	f043 0210 	orr.w	r2, r3, #16
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	629a      	str	r2, [r3, #40]	; 0x28
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a28:	f043 0201 	orr.w	r2, r3, #1
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	62da      	str	r2, [r3, #44]	; 0x2c
 8005a30:	2301      	movs	r3, #1
 8005a32:	75fb      	strb	r3, [r7, #23]
 8005a34:	e007      	b.n	8005a46 <HAL_ADC_Init+0x19e>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a3a:	f043 0210 	orr.w	r2, r3, #16
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	629a      	str	r2, [r3, #40]	; 0x28
 8005a42:	2301      	movs	r3, #1
 8005a44:	75fb      	strb	r3, [r7, #23]
 8005a46:	7dfb      	ldrb	r3, [r7, #23]
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3718      	adds	r7, #24
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	ffe1f7fd 	.word	0xffe1f7fd
 8005a54:	ff1f0efe 	.word	0xff1f0efe

08005a58 <HAL_ADC_Start_DMA>:
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b086      	sub	sp, #24
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	607a      	str	r2, [r7, #4]
 8005a64:	2300      	movs	r3, #0
 8005a66:	75fb      	strb	r3, [r7, #23]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a64      	ldr	r2, [pc, #400]	; (8005c00 <HAL_ADC_Start_DMA+0x1a8>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d004      	beq.n	8005a7c <HAL_ADC_Start_DMA+0x24>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a63      	ldr	r2, [pc, #396]	; (8005c04 <HAL_ADC_Start_DMA+0x1ac>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d106      	bne.n	8005a8a <HAL_ADC_Start_DMA+0x32>
 8005a7c:	4b60      	ldr	r3, [pc, #384]	; (8005c00 <HAL_ADC_Start_DMA+0x1a8>)
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	f040 80b3 	bne.w	8005bf0 <HAL_ADC_Start_DMA+0x198>
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d101      	bne.n	8005a98 <HAL_ADC_Start_DMA+0x40>
 8005a94:	2302      	movs	r3, #2
 8005a96:	e0ae      	b.n	8005bf6 <HAL_ADC_Start_DMA+0x19e>
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005aa0:	68f8      	ldr	r0, [r7, #12]
 8005aa2:	f000 fa8d 	bl	8005fc0 <ADC_Enable>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	75fb      	strb	r3, [r7, #23]
 8005aaa:	7dfb      	ldrb	r3, [r7, #23]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	f040 809a 	bne.w	8005be6 <HAL_ADC_Start_DMA+0x18e>
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005aba:	f023 0301 	bic.w	r3, r3, #1
 8005abe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	629a      	str	r2, [r3, #40]	; 0x28
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a4e      	ldr	r2, [pc, #312]	; (8005c04 <HAL_ADC_Start_DMA+0x1ac>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d105      	bne.n	8005adc <HAL_ADC_Start_DMA+0x84>
 8005ad0:	4b4b      	ldr	r3, [pc, #300]	; (8005c00 <HAL_ADC_Start_DMA+0x1a8>)
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d115      	bne.n	8005b08 <HAL_ADC_Start_DMA+0xb0>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	629a      	str	r2, [r3, #40]	; 0x28
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d026      	beq.n	8005b44 <HAL_ADC_Start_DMA+0xec>
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005afa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005afe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	629a      	str	r2, [r3, #40]	; 0x28
 8005b06:	e01d      	b.n	8005b44 <HAL_ADC_Start_DMA+0xec>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b0c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	629a      	str	r2, [r3, #40]	; 0x28
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a39      	ldr	r2, [pc, #228]	; (8005c00 <HAL_ADC_Start_DMA+0x1a8>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d004      	beq.n	8005b28 <HAL_ADC_Start_DMA+0xd0>
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a38      	ldr	r2, [pc, #224]	; (8005c04 <HAL_ADC_Start_DMA+0x1ac>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d10d      	bne.n	8005b44 <HAL_ADC_Start_DMA+0xec>
 8005b28:	4b35      	ldr	r3, [pc, #212]	; (8005c00 <HAL_ADC_Start_DMA+0x1a8>)
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d007      	beq.n	8005b44 <HAL_ADC_Start_DMA+0xec>
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b38:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005b3c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	629a      	str	r2, [r3, #40]	; 0x28
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d006      	beq.n	8005b5e <HAL_ADC_Start_DMA+0x106>
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b54:	f023 0206 	bic.w	r2, r3, #6
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	62da      	str	r2, [r3, #44]	; 0x2c
 8005b5c:	e002      	b.n	8005b64 <HAL_ADC_Start_DMA+0x10c>
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2200      	movs	r2, #0
 8005b62:	62da      	str	r2, [r3, #44]	; 0x2c
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6a1b      	ldr	r3, [r3, #32]
 8005b70:	4a25      	ldr	r2, [pc, #148]	; (8005c08 <HAL_ADC_Start_DMA+0x1b0>)
 8005b72:	629a      	str	r2, [r3, #40]	; 0x28
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6a1b      	ldr	r3, [r3, #32]
 8005b78:	4a24      	ldr	r2, [pc, #144]	; (8005c0c <HAL_ADC_Start_DMA+0x1b4>)
 8005b7a:	62da      	str	r2, [r3, #44]	; 0x2c
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6a1b      	ldr	r3, [r3, #32]
 8005b80:	4a23      	ldr	r2, [pc, #140]	; (8005c10 <HAL_ADC_Start_DMA+0x1b8>)
 8005b82:	631a      	str	r2, [r3, #48]	; 0x30
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f06f 0202 	mvn.w	r2, #2
 8005b8c:	601a      	str	r2, [r3, #0]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	689a      	ldr	r2, [r3, #8]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b9c:	609a      	str	r2, [r3, #8]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6a18      	ldr	r0, [r3, #32]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	334c      	adds	r3, #76	; 0x4c
 8005ba8:	4619      	mov	r1, r3
 8005baa:	68ba      	ldr	r2, [r7, #8]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f000 fc79 	bl	80064a4 <HAL_DMA_Start_IT>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8005bbc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8005bc0:	d108      	bne.n	8005bd4 <HAL_ADC_Start_DMA+0x17c>
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	689a      	ldr	r2, [r3, #8]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8005bd0:	609a      	str	r2, [r3, #8]
 8005bd2:	e00f      	b.n	8005bf4 <HAL_ADC_Start_DMA+0x19c>
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	689a      	ldr	r2, [r3, #8]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005be2:	609a      	str	r2, [r3, #8]
 8005be4:	e006      	b.n	8005bf4 <HAL_ADC_Start_DMA+0x19c>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005bee:	e001      	b.n	8005bf4 <HAL_ADC_Start_DMA+0x19c>
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	75fb      	strb	r3, [r7, #23]
 8005bf4:	7dfb      	ldrb	r3, [r7, #23]
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3718      	adds	r7, #24
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	40012400 	.word	0x40012400
 8005c04:	40012800 	.word	0x40012800
 8005c08:	080060f7 	.word	0x080060f7
 8005c0c:	08006173 	.word	0x08006173
 8005c10:	0800618f 	.word	0x0800618f

08005c14 <HAL_ADC_IRQHandler>:
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b082      	sub	sp, #8
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	f003 0320 	and.w	r3, r3, #32
 8005c26:	2b20      	cmp	r3, #32
 8005c28:	d140      	bne.n	8005cac <HAL_ADC_IRQHandler+0x98>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0302 	and.w	r3, r3, #2
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	d139      	bne.n	8005cac <HAL_ADC_IRQHandler+0x98>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c3c:	f003 0310 	and.w	r3, r3, #16
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d105      	bne.n	8005c50 <HAL_ADC_IRQHandler+0x3c>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c48:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	629a      	str	r2, [r3, #40]	; 0x28
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8005c5a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8005c5e:	d11d      	bne.n	8005c9c <HAL_ADC_IRQHandler+0x88>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	7b1b      	ldrb	r3, [r3, #12]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d119      	bne.n	8005c9c <HAL_ADC_IRQHandler+0x88>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	685a      	ldr	r2, [r3, #4]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f022 0220 	bic.w	r2, r2, #32
 8005c76:	605a      	str	r2, [r3, #4]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c7c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	629a      	str	r2, [r3, #40]	; 0x28
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d105      	bne.n	8005c9c <HAL_ADC_IRQHandler+0x88>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c94:	f043 0201 	orr.w	r2, r3, #1
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	629a      	str	r2, [r3, #40]	; 0x28
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f7fe f9d7 	bl	8004050 <HAL_ADC_ConvCpltCallback>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f06f 0212 	mvn.w	r2, #18
 8005caa:	601a      	str	r2, [r3, #0]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cb6:	2b80      	cmp	r3, #128	; 0x80
 8005cb8:	d14f      	bne.n	8005d5a <HAL_ADC_IRQHandler+0x146>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 0304 	and.w	r3, r3, #4
 8005cc4:	2b04      	cmp	r3, #4
 8005cc6:	d148      	bne.n	8005d5a <HAL_ADC_IRQHandler+0x146>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ccc:	f003 0310 	and.w	r3, r3, #16
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d105      	bne.n	8005ce0 <HAL_ADC_IRQHandler+0xcc>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	629a      	str	r2, [r3, #40]	; 0x28
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005cea:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8005cee:	d012      	beq.n	8005d16 <HAL_ADC_IRQHandler+0x102>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d125      	bne.n	8005d4a <HAL_ADC_IRQHandler+0x136>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8005d08:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8005d0c:	d11d      	bne.n	8005d4a <HAL_ADC_IRQHandler+0x136>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	7b1b      	ldrb	r3, [r3, #12]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d119      	bne.n	8005d4a <HAL_ADC_IRQHandler+0x136>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	685a      	ldr	r2, [r3, #4]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d24:	605a      	str	r2, [r3, #4]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	629a      	str	r2, [r3, #40]	; 0x28
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d105      	bne.n	8005d4a <HAL_ADC_IRQHandler+0x136>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d42:	f043 0201 	orr.w	r2, r3, #1
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	629a      	str	r2, [r3, #40]	; 0x28
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 fa39 	bl	80061c2 <HAL_ADCEx_InjectedConvCpltCallback>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f06f 020c 	mvn.w	r2, #12
 8005d58:	601a      	str	r2, [r3, #0]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d64:	2b40      	cmp	r3, #64	; 0x40
 8005d66:	d114      	bne.n	8005d92 <HAL_ADC_IRQHandler+0x17e>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 0301 	and.w	r3, r3, #1
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d10d      	bne.n	8005d92 <HAL_ADC_IRQHandler+0x17e>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d7a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	629a      	str	r2, [r3, #40]	; 0x28
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 f812 	bl	8005dac <HAL_ADC_LevelOutOfWindowCallback>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f06f 0201 	mvn.w	r2, #1
 8005d90:	601a      	str	r2, [r3, #0]
 8005d92:	bf00      	nop
 8005d94:	3708      	adds	r7, #8
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}

08005d9a <HAL_ADC_ConvHalfCpltCallback>:
 8005d9a:	b480      	push	{r7}
 8005d9c:	b083      	sub	sp, #12
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
 8005da2:	bf00      	nop
 8005da4:	370c      	adds	r7, #12
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bc80      	pop	{r7}
 8005daa:	4770      	bx	lr

08005dac <HAL_ADC_LevelOutOfWindowCallback>:
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	bf00      	nop
 8005db6:	370c      	adds	r7, #12
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bc80      	pop	{r7}
 8005dbc:	4770      	bx	lr

08005dbe <HAL_ADC_ErrorCallback>:
 8005dbe:	b480      	push	{r7}
 8005dc0:	b083      	sub	sp, #12
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
 8005dc6:	bf00      	nop
 8005dc8:	370c      	adds	r7, #12
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bc80      	pop	{r7}
 8005dce:	4770      	bx	lr

08005dd0 <HAL_ADC_ConfigChannel>:
 8005dd0:	b480      	push	{r7}
 8005dd2:	b085      	sub	sp, #20
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
 8005dda:	2300      	movs	r3, #0
 8005ddc:	73fb      	strb	r3, [r7, #15]
 8005dde:	2300      	movs	r3, #0
 8005de0:	60bb      	str	r3, [r7, #8]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d101      	bne.n	8005df0 <HAL_ADC_ConfigChannel+0x20>
 8005dec:	2302      	movs	r3, #2
 8005dee:	e0dc      	b.n	8005faa <HAL_ADC_ConfigChannel+0x1da>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	2b06      	cmp	r3, #6
 8005dfe:	d81c      	bhi.n	8005e3a <HAL_ADC_ConfigChannel+0x6a>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	685a      	ldr	r2, [r3, #4]
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	4413      	add	r3, r2
 8005e10:	3b05      	subs	r3, #5
 8005e12:	221f      	movs	r2, #31
 8005e14:	fa02 f303 	lsl.w	r3, r2, r3
 8005e18:	43db      	mvns	r3, r3
 8005e1a:	4019      	ands	r1, r3
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	6818      	ldr	r0, [r3, #0]
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	685a      	ldr	r2, [r3, #4]
 8005e24:	4613      	mov	r3, r2
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	4413      	add	r3, r2
 8005e2a:	3b05      	subs	r3, #5
 8005e2c:	fa00 f203 	lsl.w	r2, r0, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	430a      	orrs	r2, r1
 8005e36:	635a      	str	r2, [r3, #52]	; 0x34
 8005e38:	e03c      	b.n	8005eb4 <HAL_ADC_ConfigChannel+0xe4>
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	2b0c      	cmp	r3, #12
 8005e40:	d81c      	bhi.n	8005e7c <HAL_ADC_ConfigChannel+0xac>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	685a      	ldr	r2, [r3, #4]
 8005e4c:	4613      	mov	r3, r2
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	4413      	add	r3, r2
 8005e52:	3b23      	subs	r3, #35	; 0x23
 8005e54:	221f      	movs	r2, #31
 8005e56:	fa02 f303 	lsl.w	r3, r2, r3
 8005e5a:	43db      	mvns	r3, r3
 8005e5c:	4019      	ands	r1, r3
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	6818      	ldr	r0, [r3, #0]
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	685a      	ldr	r2, [r3, #4]
 8005e66:	4613      	mov	r3, r2
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	4413      	add	r3, r2
 8005e6c:	3b23      	subs	r3, #35	; 0x23
 8005e6e:	fa00 f203 	lsl.w	r2, r0, r3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	430a      	orrs	r2, r1
 8005e78:	631a      	str	r2, [r3, #48]	; 0x30
 8005e7a:	e01b      	b.n	8005eb4 <HAL_ADC_ConfigChannel+0xe4>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	685a      	ldr	r2, [r3, #4]
 8005e86:	4613      	mov	r3, r2
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	4413      	add	r3, r2
 8005e8c:	3b41      	subs	r3, #65	; 0x41
 8005e8e:	221f      	movs	r2, #31
 8005e90:	fa02 f303 	lsl.w	r3, r2, r3
 8005e94:	43db      	mvns	r3, r3
 8005e96:	4019      	ands	r1, r3
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	6818      	ldr	r0, [r3, #0]
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	685a      	ldr	r2, [r3, #4]
 8005ea0:	4613      	mov	r3, r2
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	4413      	add	r3, r2
 8005ea6:	3b41      	subs	r3, #65	; 0x41
 8005ea8:	fa00 f203 	lsl.w	r2, r0, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	430a      	orrs	r2, r1
 8005eb2:	62da      	str	r2, [r3, #44]	; 0x2c
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2b09      	cmp	r3, #9
 8005eba:	d91c      	bls.n	8005ef6 <HAL_ADC_ConfigChannel+0x126>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68d9      	ldr	r1, [r3, #12]
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	4613      	mov	r3, r2
 8005ec8:	005b      	lsls	r3, r3, #1
 8005eca:	4413      	add	r3, r2
 8005ecc:	3b1e      	subs	r3, #30
 8005ece:	2207      	movs	r2, #7
 8005ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed4:	43db      	mvns	r3, r3
 8005ed6:	4019      	ands	r1, r3
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	6898      	ldr	r0, [r3, #8]
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	005b      	lsls	r3, r3, #1
 8005ee4:	4413      	add	r3, r2
 8005ee6:	3b1e      	subs	r3, #30
 8005ee8:	fa00 f203 	lsl.w	r2, r0, r3
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	430a      	orrs	r2, r1
 8005ef2:	60da      	str	r2, [r3, #12]
 8005ef4:	e019      	b.n	8005f2a <HAL_ADC_ConfigChannel+0x15a>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	6919      	ldr	r1, [r3, #16]
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	4613      	mov	r3, r2
 8005f02:	005b      	lsls	r3, r3, #1
 8005f04:	4413      	add	r3, r2
 8005f06:	2207      	movs	r2, #7
 8005f08:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0c:	43db      	mvns	r3, r3
 8005f0e:	4019      	ands	r1, r3
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	6898      	ldr	r0, [r3, #8]
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	4613      	mov	r3, r2
 8005f1a:	005b      	lsls	r3, r3, #1
 8005f1c:	4413      	add	r3, r2
 8005f1e:	fa00 f203 	lsl.w	r2, r0, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	430a      	orrs	r2, r1
 8005f28:	611a      	str	r2, [r3, #16]
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	2b10      	cmp	r3, #16
 8005f30:	d003      	beq.n	8005f3a <HAL_ADC_ConfigChannel+0x16a>
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2b11      	cmp	r3, #17
 8005f38:	d132      	bne.n	8005fa0 <HAL_ADC_ConfigChannel+0x1d0>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a1d      	ldr	r2, [pc, #116]	; (8005fb4 <HAL_ADC_ConfigChannel+0x1e4>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d125      	bne.n	8005f90 <HAL_ADC_ConfigChannel+0x1c0>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d126      	bne.n	8005fa0 <HAL_ADC_ConfigChannel+0x1d0>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	689a      	ldr	r2, [r3, #8]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005f60:	609a      	str	r2, [r3, #8]
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2b10      	cmp	r3, #16
 8005f68:	d11a      	bne.n	8005fa0 <HAL_ADC_ConfigChannel+0x1d0>
 8005f6a:	4b13      	ldr	r3, [pc, #76]	; (8005fb8 <HAL_ADC_ConfigChannel+0x1e8>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a13      	ldr	r2, [pc, #76]	; (8005fbc <HAL_ADC_ConfigChannel+0x1ec>)
 8005f70:	fba2 2303 	umull	r2, r3, r2, r3
 8005f74:	0c9a      	lsrs	r2, r3, #18
 8005f76:	4613      	mov	r3, r2
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	4413      	add	r3, r2
 8005f7c:	005b      	lsls	r3, r3, #1
 8005f7e:	60bb      	str	r3, [r7, #8]
 8005f80:	e002      	b.n	8005f88 <HAL_ADC_ConfigChannel+0x1b8>
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	3b01      	subs	r3, #1
 8005f86:	60bb      	str	r3, [r7, #8]
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d1f9      	bne.n	8005f82 <HAL_ADC_ConfigChannel+0x1b2>
 8005f8e:	e007      	b.n	8005fa0 <HAL_ADC_ConfigChannel+0x1d0>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f94:	f043 0220 	orr.w	r2, r3, #32
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	629a      	str	r2, [r3, #40]	; 0x28
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	73fb      	strb	r3, [r7, #15]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005fa8:	7bfb      	ldrb	r3, [r7, #15]
 8005faa:	4618      	mov	r0, r3
 8005fac:	3714      	adds	r7, #20
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bc80      	pop	{r7}
 8005fb2:	4770      	bx	lr
 8005fb4:	40012400 	.word	0x40012400
 8005fb8:	2000023c 	.word	0x2000023c
 8005fbc:	431bde83 	.word	0x431bde83

08005fc0 <ADC_Enable>:
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	2300      	movs	r3, #0
 8005fca:	60fb      	str	r3, [r7, #12]
 8005fcc:	2300      	movs	r3, #0
 8005fce:	60bb      	str	r3, [r7, #8]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	f003 0301 	and.w	r3, r3, #1
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d040      	beq.n	8006060 <ADC_Enable+0xa0>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	689a      	ldr	r2, [r3, #8]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f042 0201 	orr.w	r2, r2, #1
 8005fec:	609a      	str	r2, [r3, #8]
 8005fee:	4b1f      	ldr	r3, [pc, #124]	; (800606c <ADC_Enable+0xac>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a1f      	ldr	r2, [pc, #124]	; (8006070 <ADC_Enable+0xb0>)
 8005ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff8:	0c9b      	lsrs	r3, r3, #18
 8005ffa:	60bb      	str	r3, [r7, #8]
 8005ffc:	e002      	b.n	8006004 <ADC_Enable+0x44>
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	3b01      	subs	r3, #1
 8006002:	60bb      	str	r3, [r7, #8]
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1f9      	bne.n	8005ffe <ADC_Enable+0x3e>
 800600a:	f7ff fc43 	bl	8005894 <HAL_GetTick>
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	e01f      	b.n	8006052 <ADC_Enable+0x92>
 8006012:	f7ff fc3f 	bl	8005894 <HAL_GetTick>
 8006016:	4602      	mov	r2, r0
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	2b02      	cmp	r3, #2
 800601e:	d918      	bls.n	8006052 <ADC_Enable+0x92>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	f003 0301 	and.w	r3, r3, #1
 800602a:	2b01      	cmp	r3, #1
 800602c:	d011      	beq.n	8006052 <ADC_Enable+0x92>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006032:	f043 0210 	orr.w	r2, r3, #16
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	629a      	str	r2, [r3, #40]	; 0x28
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603e:	f043 0201 	orr.w	r2, r3, #1
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	62da      	str	r2, [r3, #44]	; 0x2c
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800604e:	2301      	movs	r3, #1
 8006050:	e007      	b.n	8006062 <ADC_Enable+0xa2>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	f003 0301 	and.w	r3, r3, #1
 800605c:	2b01      	cmp	r3, #1
 800605e:	d1d8      	bne.n	8006012 <ADC_Enable+0x52>
 8006060:	2300      	movs	r3, #0
 8006062:	4618      	mov	r0, r3
 8006064:	3710      	adds	r7, #16
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
 800606a:	bf00      	nop
 800606c:	2000023c 	.word	0x2000023c
 8006070:	431bde83 	.word	0x431bde83

08006074 <ADC_ConversionStop_Disable>:
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	2300      	movs	r3, #0
 800607e:	60fb      	str	r3, [r7, #12]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	f003 0301 	and.w	r3, r3, #1
 800608a:	2b01      	cmp	r3, #1
 800608c:	d12e      	bne.n	80060ec <ADC_ConversionStop_Disable+0x78>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	689a      	ldr	r2, [r3, #8]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f022 0201 	bic.w	r2, r2, #1
 800609c:	609a      	str	r2, [r3, #8]
 800609e:	f7ff fbf9 	bl	8005894 <HAL_GetTick>
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	e01b      	b.n	80060de <ADC_ConversionStop_Disable+0x6a>
 80060a6:	f7ff fbf5 	bl	8005894 <HAL_GetTick>
 80060aa:	4602      	mov	r2, r0
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	d914      	bls.n	80060de <ADC_ConversionStop_Disable+0x6a>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	f003 0301 	and.w	r3, r3, #1
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d10d      	bne.n	80060de <ADC_ConversionStop_Disable+0x6a>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c6:	f043 0210 	orr.w	r2, r3, #16
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	629a      	str	r2, [r3, #40]	; 0x28
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d2:	f043 0201 	orr.w	r2, r3, #1
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80060da:	2301      	movs	r3, #1
 80060dc:	e007      	b.n	80060ee <ADC_ConversionStop_Disable+0x7a>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	f003 0301 	and.w	r3, r3, #1
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d0dc      	beq.n	80060a6 <ADC_ConversionStop_Disable+0x32>
 80060ec:	2300      	movs	r3, #0
 80060ee:	4618      	mov	r0, r3
 80060f0:	3710      	adds	r7, #16
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <ADC_DMAConvCplt>:
 80060f6:	b580      	push	{r7, lr}
 80060f8:	b084      	sub	sp, #16
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006102:	60fb      	str	r3, [r7, #12]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006108:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800610c:	2b00      	cmp	r3, #0
 800610e:	d127      	bne.n	8006160 <ADC_DMAConvCplt+0x6a>
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006114:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	629a      	str	r2, [r3, #40]	; 0x28
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8006126:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800612a:	d115      	bne.n	8006158 <ADC_DMAConvCplt+0x62>
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	7b1b      	ldrb	r3, [r3, #12]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d111      	bne.n	8006158 <ADC_DMAConvCplt+0x62>
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006138:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	629a      	str	r2, [r3, #40]	; 0x28
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006144:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006148:	2b00      	cmp	r3, #0
 800614a:	d105      	bne.n	8006158 <ADC_DMAConvCplt+0x62>
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006150:	f043 0201 	orr.w	r2, r3, #1
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	629a      	str	r2, [r3, #40]	; 0x28
 8006158:	68f8      	ldr	r0, [r7, #12]
 800615a:	f7fd ff79 	bl	8004050 <HAL_ADC_ConvCpltCallback>
 800615e:	e004      	b.n	800616a <ADC_DMAConvCplt+0x74>
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6a1b      	ldr	r3, [r3, #32]
 8006164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	4798      	blx	r3
 800616a:	bf00      	nop
 800616c:	3710      	adds	r7, #16
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}

08006172 <ADC_DMAHalfConvCplt>:
 8006172:	b580      	push	{r7, lr}
 8006174:	b084      	sub	sp, #16
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617e:	60fb      	str	r3, [r7, #12]
 8006180:	68f8      	ldr	r0, [r7, #12]
 8006182:	f7ff fe0a 	bl	8005d9a <HAL_ADC_ConvHalfCpltCallback>
 8006186:	bf00      	nop
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}

0800618e <ADC_DMAError>:
 800618e:	b580      	push	{r7, lr}
 8006190:	b084      	sub	sp, #16
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619a:	60fb      	str	r3, [r7, #12]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	629a      	str	r2, [r3, #40]	; 0x28
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ac:	f043 0204 	orr.w	r2, r3, #4
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	62da      	str	r2, [r3, #44]	; 0x2c
 80061b4:	68f8      	ldr	r0, [r7, #12]
 80061b6:	f7ff fe02 	bl	8005dbe <HAL_ADC_ErrorCallback>
 80061ba:	bf00      	nop
 80061bc:	3710      	adds	r7, #16
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}

080061c2 <HAL_ADCEx_InjectedConvCpltCallback>:
 80061c2:	b480      	push	{r7}
 80061c4:	b083      	sub	sp, #12
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
 80061ca:	bf00      	nop
 80061cc:	370c      	adds	r7, #12
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bc80      	pop	{r7}
 80061d2:	4770      	bx	lr

080061d4 <__NVIC_SetPriorityGrouping>:
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f003 0307 	and.w	r3, r3, #7
 80061e2:	60fb      	str	r3, [r7, #12]
 80061e4:	4b0c      	ldr	r3, [pc, #48]	; (8006218 <__NVIC_SetPriorityGrouping+0x44>)
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	60bb      	str	r3, [r7, #8]
 80061ea:	68ba      	ldr	r2, [r7, #8]
 80061ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80061f0:	4013      	ands	r3, r2
 80061f2:	60bb      	str	r3, [r7, #8]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	021a      	lsls	r2, r3, #8
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006200:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006204:	60bb      	str	r3, [r7, #8]
 8006206:	4a04      	ldr	r2, [pc, #16]	; (8006218 <__NVIC_SetPriorityGrouping+0x44>)
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	60d3      	str	r3, [r2, #12]
 800620c:	bf00      	nop
 800620e:	3714      	adds	r7, #20
 8006210:	46bd      	mov	sp, r7
 8006212:	bc80      	pop	{r7}
 8006214:	4770      	bx	lr
 8006216:	bf00      	nop
 8006218:	e000ed00 	.word	0xe000ed00

0800621c <__NVIC_GetPriorityGrouping>:
 800621c:	b480      	push	{r7}
 800621e:	af00      	add	r7, sp, #0
 8006220:	4b04      	ldr	r3, [pc, #16]	; (8006234 <__NVIC_GetPriorityGrouping+0x18>)
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	0a1b      	lsrs	r3, r3, #8
 8006226:	f003 0307 	and.w	r3, r3, #7
 800622a:	4618      	mov	r0, r3
 800622c:	46bd      	mov	sp, r7
 800622e:	bc80      	pop	{r7}
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	e000ed00 	.word	0xe000ed00

08006238 <__NVIC_EnableIRQ>:
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
 800623e:	4603      	mov	r3, r0
 8006240:	71fb      	strb	r3, [r7, #7]
 8006242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006246:	2b00      	cmp	r3, #0
 8006248:	db0b      	blt.n	8006262 <__NVIC_EnableIRQ+0x2a>
 800624a:	79fb      	ldrb	r3, [r7, #7]
 800624c:	f003 021f 	and.w	r2, r3, #31
 8006250:	4906      	ldr	r1, [pc, #24]	; (800626c <__NVIC_EnableIRQ+0x34>)
 8006252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006256:	095b      	lsrs	r3, r3, #5
 8006258:	2001      	movs	r0, #1
 800625a:	fa00 f202 	lsl.w	r2, r0, r2
 800625e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006262:	bf00      	nop
 8006264:	370c      	adds	r7, #12
 8006266:	46bd      	mov	sp, r7
 8006268:	bc80      	pop	{r7}
 800626a:	4770      	bx	lr
 800626c:	e000e100 	.word	0xe000e100

08006270 <__NVIC_SetPriority>:
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	4603      	mov	r3, r0
 8006278:	6039      	str	r1, [r7, #0]
 800627a:	71fb      	strb	r3, [r7, #7]
 800627c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006280:	2b00      	cmp	r3, #0
 8006282:	db0a      	blt.n	800629a <__NVIC_SetPriority+0x2a>
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	b2da      	uxtb	r2, r3
 8006288:	490c      	ldr	r1, [pc, #48]	; (80062bc <__NVIC_SetPriority+0x4c>)
 800628a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800628e:	0112      	lsls	r2, r2, #4
 8006290:	b2d2      	uxtb	r2, r2
 8006292:	440b      	add	r3, r1
 8006294:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8006298:	e00a      	b.n	80062b0 <__NVIC_SetPriority+0x40>
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	b2da      	uxtb	r2, r3
 800629e:	4908      	ldr	r1, [pc, #32]	; (80062c0 <__NVIC_SetPriority+0x50>)
 80062a0:	79fb      	ldrb	r3, [r7, #7]
 80062a2:	f003 030f 	and.w	r3, r3, #15
 80062a6:	3b04      	subs	r3, #4
 80062a8:	0112      	lsls	r2, r2, #4
 80062aa:	b2d2      	uxtb	r2, r2
 80062ac:	440b      	add	r3, r1
 80062ae:	761a      	strb	r2, [r3, #24]
 80062b0:	bf00      	nop
 80062b2:	370c      	adds	r7, #12
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bc80      	pop	{r7}
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	e000e100 	.word	0xe000e100
 80062c0:	e000ed00 	.word	0xe000ed00

080062c4 <NVIC_EncodePriority>:
 80062c4:	b480      	push	{r7}
 80062c6:	b089      	sub	sp, #36	; 0x24
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f003 0307 	and.w	r3, r3, #7
 80062d6:	61fb      	str	r3, [r7, #28]
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	f1c3 0307 	rsb	r3, r3, #7
 80062de:	2b04      	cmp	r3, #4
 80062e0:	bf28      	it	cs
 80062e2:	2304      	movcs	r3, #4
 80062e4:	61bb      	str	r3, [r7, #24]
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	3304      	adds	r3, #4
 80062ea:	2b06      	cmp	r3, #6
 80062ec:	d902      	bls.n	80062f4 <NVIC_EncodePriority+0x30>
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	3b03      	subs	r3, #3
 80062f2:	e000      	b.n	80062f6 <NVIC_EncodePriority+0x32>
 80062f4:	2300      	movs	r3, #0
 80062f6:	617b      	str	r3, [r7, #20]
 80062f8:	f04f 32ff 	mov.w	r2, #4294967295
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006302:	43da      	mvns	r2, r3
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	401a      	ands	r2, r3
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	409a      	lsls	r2, r3
 800630c:	f04f 31ff 	mov.w	r1, #4294967295
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	fa01 f303 	lsl.w	r3, r1, r3
 8006316:	43d9      	mvns	r1, r3
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	400b      	ands	r3, r1
 800631c:	4313      	orrs	r3, r2
 800631e:	4618      	mov	r0, r3
 8006320:	3724      	adds	r7, #36	; 0x24
 8006322:	46bd      	mov	sp, r7
 8006324:	bc80      	pop	{r7}
 8006326:	4770      	bx	lr

08006328 <SysTick_Config>:
 8006328:	b580      	push	{r7, lr}
 800632a:	b082      	sub	sp, #8
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	3b01      	subs	r3, #1
 8006334:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006338:	d301      	bcc.n	800633e <SysTick_Config+0x16>
 800633a:	2301      	movs	r3, #1
 800633c:	e00f      	b.n	800635e <SysTick_Config+0x36>
 800633e:	4a0a      	ldr	r2, [pc, #40]	; (8006368 <SysTick_Config+0x40>)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	3b01      	subs	r3, #1
 8006344:	6053      	str	r3, [r2, #4]
 8006346:	210f      	movs	r1, #15
 8006348:	f04f 30ff 	mov.w	r0, #4294967295
 800634c:	f7ff ff90 	bl	8006270 <__NVIC_SetPriority>
 8006350:	4b05      	ldr	r3, [pc, #20]	; (8006368 <SysTick_Config+0x40>)
 8006352:	2200      	movs	r2, #0
 8006354:	609a      	str	r2, [r3, #8]
 8006356:	4b04      	ldr	r3, [pc, #16]	; (8006368 <SysTick_Config+0x40>)
 8006358:	2207      	movs	r2, #7
 800635a:	601a      	str	r2, [r3, #0]
 800635c:	2300      	movs	r3, #0
 800635e:	4618      	mov	r0, r3
 8006360:	3708      	adds	r7, #8
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	e000e010 	.word	0xe000e010

0800636c <HAL_NVIC_SetPriorityGrouping>:
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f7ff ff2d 	bl	80061d4 <__NVIC_SetPriorityGrouping>
 800637a:	bf00      	nop
 800637c:	3708      	adds	r7, #8
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}

08006382 <HAL_NVIC_SetPriority>:
 8006382:	b580      	push	{r7, lr}
 8006384:	b086      	sub	sp, #24
 8006386:	af00      	add	r7, sp, #0
 8006388:	4603      	mov	r3, r0
 800638a:	60b9      	str	r1, [r7, #8]
 800638c:	607a      	str	r2, [r7, #4]
 800638e:	73fb      	strb	r3, [r7, #15]
 8006390:	2300      	movs	r3, #0
 8006392:	617b      	str	r3, [r7, #20]
 8006394:	f7ff ff42 	bl	800621c <__NVIC_GetPriorityGrouping>
 8006398:	6178      	str	r0, [r7, #20]
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	68b9      	ldr	r1, [r7, #8]
 800639e:	6978      	ldr	r0, [r7, #20]
 80063a0:	f7ff ff90 	bl	80062c4 <NVIC_EncodePriority>
 80063a4:	4602      	mov	r2, r0
 80063a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063aa:	4611      	mov	r1, r2
 80063ac:	4618      	mov	r0, r3
 80063ae:	f7ff ff5f 	bl	8006270 <__NVIC_SetPriority>
 80063b2:	bf00      	nop
 80063b4:	3718      	adds	r7, #24
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}

080063ba <HAL_NVIC_EnableIRQ>:
 80063ba:	b580      	push	{r7, lr}
 80063bc:	b082      	sub	sp, #8
 80063be:	af00      	add	r7, sp, #0
 80063c0:	4603      	mov	r3, r0
 80063c2:	71fb      	strb	r3, [r7, #7]
 80063c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063c8:	4618      	mov	r0, r3
 80063ca:	f7ff ff35 	bl	8006238 <__NVIC_EnableIRQ>
 80063ce:	bf00      	nop
 80063d0:	3708      	adds	r7, #8
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <HAL_SYSTICK_Config>:
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b082      	sub	sp, #8
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f7ff ffa2 	bl	8006328 <SysTick_Config>
 80063e4:	4603      	mov	r3, r0
 80063e6:	4618      	mov	r0, r3
 80063e8:	3708      	adds	r7, #8
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
	...

080063f0 <HAL_DMA_Init>:
 80063f0:	b480      	push	{r7}
 80063f2:	b085      	sub	sp, #20
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	2300      	movs	r3, #0
 80063fa:	60fb      	str	r3, [r7, #12]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d101      	bne.n	8006406 <HAL_DMA_Init+0x16>
 8006402:	2301      	movs	r3, #1
 8006404:	e043      	b.n	800648e <HAL_DMA_Init+0x9e>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	461a      	mov	r2, r3
 800640c:	4b22      	ldr	r3, [pc, #136]	; (8006498 <HAL_DMA_Init+0xa8>)
 800640e:	4413      	add	r3, r2
 8006410:	4a22      	ldr	r2, [pc, #136]	; (800649c <HAL_DMA_Init+0xac>)
 8006412:	fba2 2303 	umull	r2, r3, r2, r3
 8006416:	091b      	lsrs	r3, r3, #4
 8006418:	009a      	lsls	r2, r3, #2
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	641a      	str	r2, [r3, #64]	; 0x40
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a1f      	ldr	r2, [pc, #124]	; (80064a0 <HAL_DMA_Init+0xb0>)
 8006422:	63da      	str	r2, [r3, #60]	; 0x3c
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2202      	movs	r2, #2
 8006428:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	60fb      	str	r3, [r7, #12]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800643a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800643e:	60fb      	str	r3, [r7, #12]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	685a      	ldr	r2, [r3, #4]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	431a      	orrs	r2, r3
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	431a      	orrs	r2, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	431a      	orrs	r2, r3
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	695b      	ldr	r3, [r3, #20]
 800645a:	431a      	orrs	r2, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	699b      	ldr	r3, [r3, #24]
 8006460:	431a      	orrs	r2, r3
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	69db      	ldr	r3, [r3, #28]
 8006466:	4313      	orrs	r3, r2
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	4313      	orrs	r3, r2
 800646c:	60fb      	str	r3, [r7, #12]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	601a      	str	r2, [r3, #0]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	639a      	str	r2, [r3, #56]	; 0x38
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	f883 2020 	strb.w	r2, [r3, #32]
 800648c:	2300      	movs	r3, #0
 800648e:	4618      	mov	r0, r3
 8006490:	3714      	adds	r7, #20
 8006492:	46bd      	mov	sp, r7
 8006494:	bc80      	pop	{r7}
 8006496:	4770      	bx	lr
 8006498:	bffdfff8 	.word	0xbffdfff8
 800649c:	cccccccd 	.word	0xcccccccd
 80064a0:	40020000 	.word	0x40020000

080064a4 <HAL_DMA_Start_IT>:
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b086      	sub	sp, #24
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	607a      	str	r2, [r7, #4]
 80064b0:	603b      	str	r3, [r7, #0]
 80064b2:	2300      	movs	r3, #0
 80064b4:	75fb      	strb	r3, [r7, #23]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d101      	bne.n	80064c4 <HAL_DMA_Start_IT+0x20>
 80064c0:	2302      	movs	r3, #2
 80064c2:	e04a      	b.n	800655a <HAL_DMA_Start_IT+0xb6>
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 2020 	strb.w	r2, [r3, #32]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d13a      	bne.n	800654c <HAL_DMA_Start_IT+0xa8>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2202      	movs	r2, #2
 80064da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2200      	movs	r2, #0
 80064e2:	639a      	str	r2, [r3, #56]	; 0x38
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f022 0201 	bic.w	r2, r2, #1
 80064f2:	601a      	str	r2, [r3, #0]
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	68b9      	ldr	r1, [r7, #8]
 80064fa:	68f8      	ldr	r0, [r7, #12]
 80064fc:	f000 f938 	bl	8006770 <DMA_SetConfig>
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006504:	2b00      	cmp	r3, #0
 8006506:	d008      	beq.n	800651a <HAL_DMA_Start_IT+0x76>
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f042 020e 	orr.w	r2, r2, #14
 8006516:	601a      	str	r2, [r3, #0]
 8006518:	e00f      	b.n	800653a <HAL_DMA_Start_IT+0x96>
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f022 0204 	bic.w	r2, r2, #4
 8006528:	601a      	str	r2, [r3, #0]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f042 020a 	orr.w	r2, r2, #10
 8006538:	601a      	str	r2, [r3, #0]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f042 0201 	orr.w	r2, r2, #1
 8006548:	601a      	str	r2, [r3, #0]
 800654a:	e005      	b.n	8006558 <HAL_DMA_Start_IT+0xb4>
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2200      	movs	r2, #0
 8006550:	f883 2020 	strb.w	r2, [r3, #32]
 8006554:	2302      	movs	r3, #2
 8006556:	75fb      	strb	r3, [r7, #23]
 8006558:	7dfb      	ldrb	r3, [r7, #23]
 800655a:	4618      	mov	r0, r3
 800655c:	3718      	adds	r7, #24
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
	...

08006564 <HAL_DMA_IRQHandler>:
 8006564:	b580      	push	{r7, lr}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	60fb      	str	r3, [r7, #12]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	60bb      	str	r3, [r7, #8]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006580:	2204      	movs	r2, #4
 8006582:	409a      	lsls	r2, r3
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	4013      	ands	r3, r2
 8006588:	2b00      	cmp	r3, #0
 800658a:	d04f      	beq.n	800662c <HAL_DMA_IRQHandler+0xc8>
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	f003 0304 	and.w	r3, r3, #4
 8006592:	2b00      	cmp	r3, #0
 8006594:	d04a      	beq.n	800662c <HAL_DMA_IRQHandler+0xc8>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 0320 	and.w	r3, r3, #32
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d107      	bne.n	80065b4 <HAL_DMA_IRQHandler+0x50>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f022 0204 	bic.w	r2, r2, #4
 80065b2:	601a      	str	r2, [r3, #0]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a66      	ldr	r2, [pc, #408]	; (8006754 <HAL_DMA_IRQHandler+0x1f0>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d029      	beq.n	8006612 <HAL_DMA_IRQHandler+0xae>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a65      	ldr	r2, [pc, #404]	; (8006758 <HAL_DMA_IRQHandler+0x1f4>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d022      	beq.n	800660e <HAL_DMA_IRQHandler+0xaa>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a63      	ldr	r2, [pc, #396]	; (800675c <HAL_DMA_IRQHandler+0x1f8>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d01a      	beq.n	8006608 <HAL_DMA_IRQHandler+0xa4>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a62      	ldr	r2, [pc, #392]	; (8006760 <HAL_DMA_IRQHandler+0x1fc>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d012      	beq.n	8006602 <HAL_DMA_IRQHandler+0x9e>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a60      	ldr	r2, [pc, #384]	; (8006764 <HAL_DMA_IRQHandler+0x200>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d00a      	beq.n	80065fc <HAL_DMA_IRQHandler+0x98>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a5f      	ldr	r2, [pc, #380]	; (8006768 <HAL_DMA_IRQHandler+0x204>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d102      	bne.n	80065f6 <HAL_DMA_IRQHandler+0x92>
 80065f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80065f4:	e00e      	b.n	8006614 <HAL_DMA_IRQHandler+0xb0>
 80065f6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80065fa:	e00b      	b.n	8006614 <HAL_DMA_IRQHandler+0xb0>
 80065fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006600:	e008      	b.n	8006614 <HAL_DMA_IRQHandler+0xb0>
 8006602:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006606:	e005      	b.n	8006614 <HAL_DMA_IRQHandler+0xb0>
 8006608:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800660c:	e002      	b.n	8006614 <HAL_DMA_IRQHandler+0xb0>
 800660e:	2340      	movs	r3, #64	; 0x40
 8006610:	e000      	b.n	8006614 <HAL_DMA_IRQHandler+0xb0>
 8006612:	2304      	movs	r3, #4
 8006614:	4a55      	ldr	r2, [pc, #340]	; (800676c <HAL_DMA_IRQHandler+0x208>)
 8006616:	6053      	str	r3, [r2, #4]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800661c:	2b00      	cmp	r3, #0
 800661e:	f000 8094 	beq.w	800674a <HAL_DMA_IRQHandler+0x1e6>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	4798      	blx	r3
 800662a:	e08e      	b.n	800674a <HAL_DMA_IRQHandler+0x1e6>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006630:	2202      	movs	r2, #2
 8006632:	409a      	lsls	r2, r3
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	4013      	ands	r3, r2
 8006638:	2b00      	cmp	r3, #0
 800663a:	d056      	beq.n	80066ea <HAL_DMA_IRQHandler+0x186>
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	f003 0302 	and.w	r3, r3, #2
 8006642:	2b00      	cmp	r3, #0
 8006644:	d051      	beq.n	80066ea <HAL_DMA_IRQHandler+0x186>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 0320 	and.w	r3, r3, #32
 8006650:	2b00      	cmp	r3, #0
 8006652:	d10b      	bne.n	800666c <HAL_DMA_IRQHandler+0x108>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f022 020a 	bic.w	r2, r2, #10
 8006662:	601a      	str	r2, [r3, #0]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2201      	movs	r2, #1
 8006668:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a38      	ldr	r2, [pc, #224]	; (8006754 <HAL_DMA_IRQHandler+0x1f0>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d029      	beq.n	80066ca <HAL_DMA_IRQHandler+0x166>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a37      	ldr	r2, [pc, #220]	; (8006758 <HAL_DMA_IRQHandler+0x1f4>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d022      	beq.n	80066c6 <HAL_DMA_IRQHandler+0x162>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a35      	ldr	r2, [pc, #212]	; (800675c <HAL_DMA_IRQHandler+0x1f8>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d01a      	beq.n	80066c0 <HAL_DMA_IRQHandler+0x15c>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a34      	ldr	r2, [pc, #208]	; (8006760 <HAL_DMA_IRQHandler+0x1fc>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d012      	beq.n	80066ba <HAL_DMA_IRQHandler+0x156>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a32      	ldr	r2, [pc, #200]	; (8006764 <HAL_DMA_IRQHandler+0x200>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d00a      	beq.n	80066b4 <HAL_DMA_IRQHandler+0x150>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a31      	ldr	r2, [pc, #196]	; (8006768 <HAL_DMA_IRQHandler+0x204>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d102      	bne.n	80066ae <HAL_DMA_IRQHandler+0x14a>
 80066a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80066ac:	e00e      	b.n	80066cc <HAL_DMA_IRQHandler+0x168>
 80066ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80066b2:	e00b      	b.n	80066cc <HAL_DMA_IRQHandler+0x168>
 80066b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80066b8:	e008      	b.n	80066cc <HAL_DMA_IRQHandler+0x168>
 80066ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80066be:	e005      	b.n	80066cc <HAL_DMA_IRQHandler+0x168>
 80066c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066c4:	e002      	b.n	80066cc <HAL_DMA_IRQHandler+0x168>
 80066c6:	2320      	movs	r3, #32
 80066c8:	e000      	b.n	80066cc <HAL_DMA_IRQHandler+0x168>
 80066ca:	2302      	movs	r3, #2
 80066cc:	4a27      	ldr	r2, [pc, #156]	; (800676c <HAL_DMA_IRQHandler+0x208>)
 80066ce:	6053      	str	r3, [r2, #4]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f883 2020 	strb.w	r2, [r3, #32]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d034      	beq.n	800674a <HAL_DMA_IRQHandler+0x1e6>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	4798      	blx	r3
 80066e8:	e02f      	b.n	800674a <HAL_DMA_IRQHandler+0x1e6>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ee:	2208      	movs	r2, #8
 80066f0:	409a      	lsls	r2, r3
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	4013      	ands	r3, r2
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d028      	beq.n	800674c <HAL_DMA_IRQHandler+0x1e8>
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	f003 0308 	and.w	r3, r3, #8
 8006700:	2b00      	cmp	r3, #0
 8006702:	d023      	beq.n	800674c <HAL_DMA_IRQHandler+0x1e8>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f022 020e 	bic.w	r2, r2, #14
 8006712:	601a      	str	r2, [r3, #0]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800671c:	2101      	movs	r1, #1
 800671e:	fa01 f202 	lsl.w	r2, r1, r2
 8006722:	605a      	str	r2, [r3, #4]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	639a      	str	r2, [r3, #56]	; 0x38
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2201      	movs	r2, #1
 800672e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	f883 2020 	strb.w	r2, [r3, #32]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800673e:	2b00      	cmp	r3, #0
 8006740:	d004      	beq.n	800674c <HAL_DMA_IRQHandler+0x1e8>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	4798      	blx	r3
 800674a:	bf00      	nop
 800674c:	bf00      	nop
 800674e:	3710      	adds	r7, #16
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}
 8006754:	40020008 	.word	0x40020008
 8006758:	4002001c 	.word	0x4002001c
 800675c:	40020030 	.word	0x40020030
 8006760:	40020044 	.word	0x40020044
 8006764:	40020058 	.word	0x40020058
 8006768:	4002006c 	.word	0x4002006c
 800676c:	40020000 	.word	0x40020000

08006770 <DMA_SetConfig>:
 8006770:	b480      	push	{r7}
 8006772:	b085      	sub	sp, #20
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	607a      	str	r2, [r7, #4]
 800677c:	603b      	str	r3, [r7, #0]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006786:	2101      	movs	r1, #1
 8006788:	fa01 f202 	lsl.w	r2, r1, r2
 800678c:	605a      	str	r2, [r3, #4]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	683a      	ldr	r2, [r7, #0]
 8006794:	605a      	str	r2, [r3, #4]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	2b10      	cmp	r3, #16
 800679c:	d108      	bne.n	80067b0 <DMA_SetConfig+0x40>
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	609a      	str	r2, [r3, #8]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68ba      	ldr	r2, [r7, #8]
 80067ac:	60da      	str	r2, [r3, #12]
 80067ae:	e007      	b.n	80067c0 <DMA_SetConfig+0x50>
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68ba      	ldr	r2, [r7, #8]
 80067b6:	609a      	str	r2, [r3, #8]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	60da      	str	r2, [r3, #12]
 80067c0:	bf00      	nop
 80067c2:	3714      	adds	r7, #20
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bc80      	pop	{r7}
 80067c8:	4770      	bx	lr
	...

080067cc <HAL_FLASH_Program>:
 80067cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067ce:	b087      	sub	sp, #28
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	e9c7 2300 	strd	r2, r3, [r7]
 80067da:	2301      	movs	r3, #1
 80067dc:	75fb      	strb	r3, [r7, #23]
 80067de:	2300      	movs	r3, #0
 80067e0:	75bb      	strb	r3, [r7, #22]
 80067e2:	2300      	movs	r3, #0
 80067e4:	757b      	strb	r3, [r7, #21]
 80067e6:	4b2f      	ldr	r3, [pc, #188]	; (80068a4 <HAL_FLASH_Program+0xd8>)
 80067e8:	7e1b      	ldrb	r3, [r3, #24]
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d101      	bne.n	80067f2 <HAL_FLASH_Program+0x26>
 80067ee:	2302      	movs	r3, #2
 80067f0:	e054      	b.n	800689c <HAL_FLASH_Program+0xd0>
 80067f2:	4b2c      	ldr	r3, [pc, #176]	; (80068a4 <HAL_FLASH_Program+0xd8>)
 80067f4:	2201      	movs	r2, #1
 80067f6:	761a      	strb	r2, [r3, #24]
 80067f8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80067fc:	f000 f99e 	bl	8006b3c <FLASH_WaitForLastOperation>
 8006800:	4603      	mov	r3, r0
 8006802:	75fb      	strb	r3, [r7, #23]
 8006804:	7dfb      	ldrb	r3, [r7, #23]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d144      	bne.n	8006894 <HAL_FLASH_Program+0xc8>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2b01      	cmp	r3, #1
 800680e:	d102      	bne.n	8006816 <HAL_FLASH_Program+0x4a>
 8006810:	2301      	movs	r3, #1
 8006812:	757b      	strb	r3, [r7, #21]
 8006814:	e007      	b.n	8006826 <HAL_FLASH_Program+0x5a>
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2b02      	cmp	r3, #2
 800681a:	d102      	bne.n	8006822 <HAL_FLASH_Program+0x56>
 800681c:	2302      	movs	r3, #2
 800681e:	757b      	strb	r3, [r7, #21]
 8006820:	e001      	b.n	8006826 <HAL_FLASH_Program+0x5a>
 8006822:	2304      	movs	r3, #4
 8006824:	757b      	strb	r3, [r7, #21]
 8006826:	2300      	movs	r3, #0
 8006828:	75bb      	strb	r3, [r7, #22]
 800682a:	e02d      	b.n	8006888 <HAL_FLASH_Program+0xbc>
 800682c:	7dbb      	ldrb	r3, [r7, #22]
 800682e:	005a      	lsls	r2, r3, #1
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	eb02 0c03 	add.w	ip, r2, r3
 8006836:	7dbb      	ldrb	r3, [r7, #22]
 8006838:	0119      	lsls	r1, r3, #4
 800683a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800683e:	f1c1 0620 	rsb	r6, r1, #32
 8006842:	f1a1 0020 	sub.w	r0, r1, #32
 8006846:	fa22 f401 	lsr.w	r4, r2, r1
 800684a:	fa03 f606 	lsl.w	r6, r3, r6
 800684e:	4334      	orrs	r4, r6
 8006850:	fa23 f000 	lsr.w	r0, r3, r0
 8006854:	4304      	orrs	r4, r0
 8006856:	fa23 f501 	lsr.w	r5, r3, r1
 800685a:	b2a3      	uxth	r3, r4
 800685c:	4619      	mov	r1, r3
 800685e:	4660      	mov	r0, ip
 8006860:	f000 f950 	bl	8006b04 <FLASH_Program_HalfWord>
 8006864:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006868:	f000 f968 	bl	8006b3c <FLASH_WaitForLastOperation>
 800686c:	4603      	mov	r3, r0
 800686e:	75fb      	strb	r3, [r7, #23]
 8006870:	4b0d      	ldr	r3, [pc, #52]	; (80068a8 <HAL_FLASH_Program+0xdc>)
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	4a0c      	ldr	r2, [pc, #48]	; (80068a8 <HAL_FLASH_Program+0xdc>)
 8006876:	f023 0301 	bic.w	r3, r3, #1
 800687a:	6113      	str	r3, [r2, #16]
 800687c:	7dfb      	ldrb	r3, [r7, #23]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d107      	bne.n	8006892 <HAL_FLASH_Program+0xc6>
 8006882:	7dbb      	ldrb	r3, [r7, #22]
 8006884:	3301      	adds	r3, #1
 8006886:	75bb      	strb	r3, [r7, #22]
 8006888:	7dba      	ldrb	r2, [r7, #22]
 800688a:	7d7b      	ldrb	r3, [r7, #21]
 800688c:	429a      	cmp	r2, r3
 800688e:	d3cd      	bcc.n	800682c <HAL_FLASH_Program+0x60>
 8006890:	e000      	b.n	8006894 <HAL_FLASH_Program+0xc8>
 8006892:	bf00      	nop
 8006894:	4b03      	ldr	r3, [pc, #12]	; (80068a4 <HAL_FLASH_Program+0xd8>)
 8006896:	2200      	movs	r2, #0
 8006898:	761a      	strb	r2, [r3, #24]
 800689a:	7dfb      	ldrb	r3, [r7, #23]
 800689c:	4618      	mov	r0, r3
 800689e:	371c      	adds	r7, #28
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068a4:	20000778 	.word	0x20000778
 80068a8:	40022000 	.word	0x40022000

080068ac <HAL_FLASH_IRQHandler>:
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	2300      	movs	r3, #0
 80068b4:	607b      	str	r3, [r7, #4]
 80068b6:	4b6d      	ldr	r3, [pc, #436]	; (8006a6c <HAL_FLASH_IRQHandler+0x1c0>)
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	f003 0310 	and.w	r3, r3, #16
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d105      	bne.n	80068ce <HAL_FLASH_IRQHandler+0x22>
 80068c2:	4b6a      	ldr	r3, [pc, #424]	; (8006a6c <HAL_FLASH_IRQHandler+0x1c0>)
 80068c4:	68db      	ldr	r3, [r3, #12]
 80068c6:	f003 0304 	and.w	r3, r3, #4
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00e      	beq.n	80068ec <HAL_FLASH_IRQHandler+0x40>
 80068ce:	4b68      	ldr	r3, [pc, #416]	; (8006a70 <HAL_FLASH_IRQHandler+0x1c4>)
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	607b      	str	r3, [r7, #4]
 80068d4:	4b66      	ldr	r3, [pc, #408]	; (8006a70 <HAL_FLASH_IRQHandler+0x1c4>)
 80068d6:	f04f 32ff 	mov.w	r2, #4294967295
 80068da:	609a      	str	r2, [r3, #8]
 80068dc:	f000 f974 	bl	8006bc8 <FLASH_SetErrorCode>
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 f8d0 	bl	8006a86 <HAL_FLASH_OperationErrorCallback>
 80068e6:	4b62      	ldr	r3, [pc, #392]	; (8006a70 <HAL_FLASH_IRQHandler+0x1c4>)
 80068e8:	2200      	movs	r2, #0
 80068ea:	701a      	strb	r2, [r3, #0]
 80068ec:	4b5f      	ldr	r3, [pc, #380]	; (8006a6c <HAL_FLASH_IRQHandler+0x1c0>)
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	f003 0320 	and.w	r3, r3, #32
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f000 80a0 	beq.w	8006a3a <HAL_FLASH_IRQHandler+0x18e>
 80068fa:	4b5c      	ldr	r3, [pc, #368]	; (8006a6c <HAL_FLASH_IRQHandler+0x1c0>)
 80068fc:	2220      	movs	r2, #32
 80068fe:	60da      	str	r2, [r3, #12]
 8006900:	4b5b      	ldr	r3, [pc, #364]	; (8006a70 <HAL_FLASH_IRQHandler+0x1c4>)
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	b2db      	uxtb	r3, r3
 8006906:	2b00      	cmp	r3, #0
 8006908:	f000 8097 	beq.w	8006a3a <HAL_FLASH_IRQHandler+0x18e>
 800690c:	4b58      	ldr	r3, [pc, #352]	; (8006a70 <HAL_FLASH_IRQHandler+0x1c4>)
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	b2db      	uxtb	r3, r3
 8006912:	2b01      	cmp	r3, #1
 8006914:	d12d      	bne.n	8006972 <HAL_FLASH_IRQHandler+0xc6>
 8006916:	4b56      	ldr	r3, [pc, #344]	; (8006a70 <HAL_FLASH_IRQHandler+0x1c4>)
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	3b01      	subs	r3, #1
 800691c:	4a54      	ldr	r2, [pc, #336]	; (8006a70 <HAL_FLASH_IRQHandler+0x1c4>)
 800691e:	6053      	str	r3, [r2, #4]
 8006920:	4b53      	ldr	r3, [pc, #332]	; (8006a70 <HAL_FLASH_IRQHandler+0x1c4>)
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d017      	beq.n	8006958 <HAL_FLASH_IRQHandler+0xac>
 8006928:	4b51      	ldr	r3, [pc, #324]	; (8006a70 <HAL_FLASH_IRQHandler+0x1c4>)
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	607b      	str	r3, [r7, #4]
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 f8a0 	bl	8006a74 <HAL_FLASH_EndOfOperationCallback>
 8006934:	4b4e      	ldr	r3, [pc, #312]	; (8006a70 <HAL_FLASH_IRQHandler+0x1c4>)
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800693c:	607b      	str	r3, [r7, #4]
 800693e:	4a4c      	ldr	r2, [pc, #304]	; (8006a70 <HAL_FLASH_IRQHandler+0x1c4>)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6093      	str	r3, [r2, #8]
 8006944:	4b49      	ldr	r3, [pc, #292]	; (8006a6c <HAL_FLASH_IRQHandler+0x1c0>)
 8006946:	691b      	ldr	r3, [r3, #16]
 8006948:	4a48      	ldr	r2, [pc, #288]	; (8006a6c <HAL_FLASH_IRQHandler+0x1c0>)
 800694a:	f023 0302 	bic.w	r3, r3, #2
 800694e:	6113      	str	r3, [r2, #16]
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f000 fa11 	bl	8006d78 <FLASH_PageErase>
 8006956:	e070      	b.n	8006a3a <HAL_FLASH_IRQHandler+0x18e>
 8006958:	f04f 33ff 	mov.w	r3, #4294967295
 800695c:	607b      	str	r3, [r7, #4]
 800695e:	4a44      	ldr	r2, [pc, #272]	; (8006a70 <HAL_FLASH_IRQHandler+0x1c4>)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6093      	str	r3, [r2, #8]
 8006964:	4b42      	ldr	r3, [pc, #264]	; (8006a70 <HAL_FLASH_IRQHandler+0x1c4>)
 8006966:	2200      	movs	r2, #0
 8006968:	701a      	strb	r2, [r3, #0]
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 f882 	bl	8006a74 <HAL_FLASH_EndOfOperationCallback>
 8006970:	e063      	b.n	8006a3a <HAL_FLASH_IRQHandler+0x18e>
 8006972:	4b3f      	ldr	r3, [pc, #252]	; (8006a70 <HAL_FLASH_IRQHandler+0x1c4>)
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	b2db      	uxtb	r3, r3
 8006978:	2b02      	cmp	r3, #2
 800697a:	d10c      	bne.n	8006996 <HAL_FLASH_IRQHandler+0xea>
 800697c:	4b3b      	ldr	r3, [pc, #236]	; (8006a6c <HAL_FLASH_IRQHandler+0x1c0>)
 800697e:	691b      	ldr	r3, [r3, #16]
 8006980:	4a3a      	ldr	r2, [pc, #232]	; (8006a6c <HAL_FLASH_IRQHandler+0x1c0>)
 8006982:	f023 0304 	bic.w	r3, r3, #4
 8006986:	6113      	str	r3, [r2, #16]
 8006988:	2000      	movs	r0, #0
 800698a:	f000 f873 	bl	8006a74 <HAL_FLASH_EndOfOperationCallback>
 800698e:	4b38      	ldr	r3, [pc, #224]	; (8006a70 <HAL_FLASH_IRQHandler+0x1c4>)
 8006990:	2200      	movs	r2, #0
 8006992:	701a      	strb	r2, [r3, #0]
 8006994:	e051      	b.n	8006a3a <HAL_FLASH_IRQHandler+0x18e>
 8006996:	4b36      	ldr	r3, [pc, #216]	; (8006a70 <HAL_FLASH_IRQHandler+0x1c4>)
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	3b01      	subs	r3, #1
 800699c:	4a34      	ldr	r2, [pc, #208]	; (8006a70 <HAL_FLASH_IRQHandler+0x1c4>)
 800699e:	6053      	str	r3, [r2, #4]
 80069a0:	4b33      	ldr	r3, [pc, #204]	; (8006a70 <HAL_FLASH_IRQHandler+0x1c4>)
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d024      	beq.n	80069f2 <HAL_FLASH_IRQHandler+0x146>
 80069a8:	4b31      	ldr	r3, [pc, #196]	; (8006a70 <HAL_FLASH_IRQHandler+0x1c4>)
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	3302      	adds	r3, #2
 80069ae:	4a30      	ldr	r2, [pc, #192]	; (8006a70 <HAL_FLASH_IRQHandler+0x1c4>)
 80069b0:	6093      	str	r3, [r2, #8]
 80069b2:	4b2f      	ldr	r3, [pc, #188]	; (8006a70 <HAL_FLASH_IRQHandler+0x1c4>)
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	607b      	str	r3, [r7, #4]
 80069b8:	4b2d      	ldr	r3, [pc, #180]	; (8006a70 <HAL_FLASH_IRQHandler+0x1c4>)
 80069ba:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80069be:	f04f 0200 	mov.w	r2, #0
 80069c2:	f04f 0300 	mov.w	r3, #0
 80069c6:	0c02      	lsrs	r2, r0, #16
 80069c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80069cc:	0c0b      	lsrs	r3, r1, #16
 80069ce:	4928      	ldr	r1, [pc, #160]	; (8006a70 <HAL_FLASH_IRQHandler+0x1c4>)
 80069d0:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80069d4:	4b25      	ldr	r3, [pc, #148]	; (8006a6c <HAL_FLASH_IRQHandler+0x1c0>)
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	4a24      	ldr	r2, [pc, #144]	; (8006a6c <HAL_FLASH_IRQHandler+0x1c0>)
 80069da:	f023 0301 	bic.w	r3, r3, #1
 80069de:	6113      	str	r3, [r2, #16]
 80069e0:	4b23      	ldr	r3, [pc, #140]	; (8006a70 <HAL_FLASH_IRQHandler+0x1c4>)
 80069e2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80069e6:	b293      	uxth	r3, r2
 80069e8:	4619      	mov	r1, r3
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 f88a 	bl	8006b04 <FLASH_Program_HalfWord>
 80069f0:	e023      	b.n	8006a3a <HAL_FLASH_IRQHandler+0x18e>
 80069f2:	4b1f      	ldr	r3, [pc, #124]	; (8006a70 <HAL_FLASH_IRQHandler+0x1c4>)
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	2b03      	cmp	r3, #3
 80069fa:	d105      	bne.n	8006a08 <HAL_FLASH_IRQHandler+0x15c>
 80069fc:	4b1c      	ldr	r3, [pc, #112]	; (8006a70 <HAL_FLASH_IRQHandler+0x1c4>)
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	4618      	mov	r0, r3
 8006a02:	f000 f837 	bl	8006a74 <HAL_FLASH_EndOfOperationCallback>
 8006a06:	e011      	b.n	8006a2c <HAL_FLASH_IRQHandler+0x180>
 8006a08:	4b19      	ldr	r3, [pc, #100]	; (8006a70 <HAL_FLASH_IRQHandler+0x1c4>)
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	2b04      	cmp	r3, #4
 8006a10:	d106      	bne.n	8006a20 <HAL_FLASH_IRQHandler+0x174>
 8006a12:	4b17      	ldr	r3, [pc, #92]	; (8006a70 <HAL_FLASH_IRQHandler+0x1c4>)
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	3b02      	subs	r3, #2
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f000 f82b 	bl	8006a74 <HAL_FLASH_EndOfOperationCallback>
 8006a1e:	e005      	b.n	8006a2c <HAL_FLASH_IRQHandler+0x180>
 8006a20:	4b13      	ldr	r3, [pc, #76]	; (8006a70 <HAL_FLASH_IRQHandler+0x1c4>)
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	3b06      	subs	r3, #6
 8006a26:	4618      	mov	r0, r3
 8006a28:	f000 f824 	bl	8006a74 <HAL_FLASH_EndOfOperationCallback>
 8006a2c:	4b10      	ldr	r3, [pc, #64]	; (8006a70 <HAL_FLASH_IRQHandler+0x1c4>)
 8006a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8006a32:	609a      	str	r2, [r3, #8]
 8006a34:	4b0e      	ldr	r3, [pc, #56]	; (8006a70 <HAL_FLASH_IRQHandler+0x1c4>)
 8006a36:	2200      	movs	r2, #0
 8006a38:	701a      	strb	r2, [r3, #0]
 8006a3a:	4b0d      	ldr	r3, [pc, #52]	; (8006a70 <HAL_FLASH_IRQHandler+0x1c4>)
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d10e      	bne.n	8006a62 <HAL_FLASH_IRQHandler+0x1b6>
 8006a44:	4b09      	ldr	r3, [pc, #36]	; (8006a6c <HAL_FLASH_IRQHandler+0x1c0>)
 8006a46:	691b      	ldr	r3, [r3, #16]
 8006a48:	4a08      	ldr	r2, [pc, #32]	; (8006a6c <HAL_FLASH_IRQHandler+0x1c0>)
 8006a4a:	f023 0307 	bic.w	r3, r3, #7
 8006a4e:	6113      	str	r3, [r2, #16]
 8006a50:	4b06      	ldr	r3, [pc, #24]	; (8006a6c <HAL_FLASH_IRQHandler+0x1c0>)
 8006a52:	691b      	ldr	r3, [r3, #16]
 8006a54:	4a05      	ldr	r2, [pc, #20]	; (8006a6c <HAL_FLASH_IRQHandler+0x1c0>)
 8006a56:	f423 53a0 	bic.w	r3, r3, #5120	; 0x1400
 8006a5a:	6113      	str	r3, [r2, #16]
 8006a5c:	4b04      	ldr	r3, [pc, #16]	; (8006a70 <HAL_FLASH_IRQHandler+0x1c4>)
 8006a5e:	2200      	movs	r2, #0
 8006a60:	761a      	strb	r2, [r3, #24]
 8006a62:	bf00      	nop
 8006a64:	3708      	adds	r7, #8
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	40022000 	.word	0x40022000
 8006a70:	20000778 	.word	0x20000778

08006a74 <HAL_FLASH_EndOfOperationCallback>:
 8006a74:	b480      	push	{r7}
 8006a76:	b083      	sub	sp, #12
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	bf00      	nop
 8006a7e:	370c      	adds	r7, #12
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bc80      	pop	{r7}
 8006a84:	4770      	bx	lr

08006a86 <HAL_FLASH_OperationErrorCallback>:
 8006a86:	b480      	push	{r7}
 8006a88:	b083      	sub	sp, #12
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
 8006a8e:	bf00      	nop
 8006a90:	370c      	adds	r7, #12
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bc80      	pop	{r7}
 8006a96:	4770      	bx	lr

08006a98 <HAL_FLASH_Unlock>:
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	71fb      	strb	r3, [r7, #7]
 8006aa2:	4b0d      	ldr	r3, [pc, #52]	; (8006ad8 <HAL_FLASH_Unlock+0x40>)
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d00d      	beq.n	8006aca <HAL_FLASH_Unlock+0x32>
 8006aae:	4b0a      	ldr	r3, [pc, #40]	; (8006ad8 <HAL_FLASH_Unlock+0x40>)
 8006ab0:	4a0a      	ldr	r2, [pc, #40]	; (8006adc <HAL_FLASH_Unlock+0x44>)
 8006ab2:	605a      	str	r2, [r3, #4]
 8006ab4:	4b08      	ldr	r3, [pc, #32]	; (8006ad8 <HAL_FLASH_Unlock+0x40>)
 8006ab6:	4a0a      	ldr	r2, [pc, #40]	; (8006ae0 <HAL_FLASH_Unlock+0x48>)
 8006ab8:	605a      	str	r2, [r3, #4]
 8006aba:	4b07      	ldr	r3, [pc, #28]	; (8006ad8 <HAL_FLASH_Unlock+0x40>)
 8006abc:	691b      	ldr	r3, [r3, #16]
 8006abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d001      	beq.n	8006aca <HAL_FLASH_Unlock+0x32>
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	71fb      	strb	r3, [r7, #7]
 8006aca:	79fb      	ldrb	r3, [r7, #7]
 8006acc:	4618      	mov	r0, r3
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bc80      	pop	{r7}
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop
 8006ad8:	40022000 	.word	0x40022000
 8006adc:	45670123 	.word	0x45670123
 8006ae0:	cdef89ab 	.word	0xcdef89ab

08006ae4 <HAL_FLASH_Lock>:
 8006ae4:	b480      	push	{r7}
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	4b05      	ldr	r3, [pc, #20]	; (8006b00 <HAL_FLASH_Lock+0x1c>)
 8006aea:	691b      	ldr	r3, [r3, #16]
 8006aec:	4a04      	ldr	r2, [pc, #16]	; (8006b00 <HAL_FLASH_Lock+0x1c>)
 8006aee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006af2:	6113      	str	r3, [r2, #16]
 8006af4:	2300      	movs	r3, #0
 8006af6:	4618      	mov	r0, r3
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bc80      	pop	{r7}
 8006afc:	4770      	bx	lr
 8006afe:	bf00      	nop
 8006b00:	40022000 	.word	0x40022000

08006b04 <FLASH_Program_HalfWord>:
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	807b      	strh	r3, [r7, #2]
 8006b10:	4b08      	ldr	r3, [pc, #32]	; (8006b34 <FLASH_Program_HalfWord+0x30>)
 8006b12:	2200      	movs	r2, #0
 8006b14:	61da      	str	r2, [r3, #28]
 8006b16:	4b08      	ldr	r3, [pc, #32]	; (8006b38 <FLASH_Program_HalfWord+0x34>)
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	4a07      	ldr	r2, [pc, #28]	; (8006b38 <FLASH_Program_HalfWord+0x34>)
 8006b1c:	f043 0301 	orr.w	r3, r3, #1
 8006b20:	6113      	str	r3, [r2, #16]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	887a      	ldrh	r2, [r7, #2]
 8006b26:	801a      	strh	r2, [r3, #0]
 8006b28:	bf00      	nop
 8006b2a:	370c      	adds	r7, #12
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bc80      	pop	{r7}
 8006b30:	4770      	bx	lr
 8006b32:	bf00      	nop
 8006b34:	20000778 	.word	0x20000778
 8006b38:	40022000 	.word	0x40022000

08006b3c <FLASH_WaitForLastOperation>:
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	f7fe fea6 	bl	8005894 <HAL_GetTick>
 8006b48:	60f8      	str	r0, [r7, #12]
 8006b4a:	e010      	b.n	8006b6e <FLASH_WaitForLastOperation+0x32>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b52:	d00c      	beq.n	8006b6e <FLASH_WaitForLastOperation+0x32>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d007      	beq.n	8006b6a <FLASH_WaitForLastOperation+0x2e>
 8006b5a:	f7fe fe9b 	bl	8005894 <HAL_GetTick>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	1ad3      	subs	r3, r2, r3
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d201      	bcs.n	8006b6e <FLASH_WaitForLastOperation+0x32>
 8006b6a:	2303      	movs	r3, #3
 8006b6c:	e025      	b.n	8006bba <FLASH_WaitForLastOperation+0x7e>
 8006b6e:	4b15      	ldr	r3, [pc, #84]	; (8006bc4 <FLASH_WaitForLastOperation+0x88>)
 8006b70:	68db      	ldr	r3, [r3, #12]
 8006b72:	f003 0301 	and.w	r3, r3, #1
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d1e8      	bne.n	8006b4c <FLASH_WaitForLastOperation+0x10>
 8006b7a:	4b12      	ldr	r3, [pc, #72]	; (8006bc4 <FLASH_WaitForLastOperation+0x88>)
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	f003 0320 	and.w	r3, r3, #32
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d002      	beq.n	8006b8c <FLASH_WaitForLastOperation+0x50>
 8006b86:	4b0f      	ldr	r3, [pc, #60]	; (8006bc4 <FLASH_WaitForLastOperation+0x88>)
 8006b88:	2220      	movs	r2, #32
 8006b8a:	60da      	str	r2, [r3, #12]
 8006b8c:	4b0d      	ldr	r3, [pc, #52]	; (8006bc4 <FLASH_WaitForLastOperation+0x88>)
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	f003 0310 	and.w	r3, r3, #16
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d10b      	bne.n	8006bb0 <FLASH_WaitForLastOperation+0x74>
 8006b98:	4b0a      	ldr	r3, [pc, #40]	; (8006bc4 <FLASH_WaitForLastOperation+0x88>)
 8006b9a:	69db      	ldr	r3, [r3, #28]
 8006b9c:	f003 0301 	and.w	r3, r3, #1
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d105      	bne.n	8006bb0 <FLASH_WaitForLastOperation+0x74>
 8006ba4:	4b07      	ldr	r3, [pc, #28]	; (8006bc4 <FLASH_WaitForLastOperation+0x88>)
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	f003 0304 	and.w	r3, r3, #4
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d003      	beq.n	8006bb8 <FLASH_WaitForLastOperation+0x7c>
 8006bb0:	f000 f80a 	bl	8006bc8 <FLASH_SetErrorCode>
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e000      	b.n	8006bba <FLASH_WaitForLastOperation+0x7e>
 8006bb8:	2300      	movs	r3, #0
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3710      	adds	r7, #16
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	bf00      	nop
 8006bc4:	40022000 	.word	0x40022000

08006bc8 <FLASH_SetErrorCode>:
 8006bc8:	b480      	push	{r7}
 8006bca:	b083      	sub	sp, #12
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	2300      	movs	r3, #0
 8006bd0:	607b      	str	r3, [r7, #4]
 8006bd2:	4b23      	ldr	r3, [pc, #140]	; (8006c60 <FLASH_SetErrorCode+0x98>)
 8006bd4:	68db      	ldr	r3, [r3, #12]
 8006bd6:	f003 0310 	and.w	r3, r3, #16
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d009      	beq.n	8006bf2 <FLASH_SetErrorCode+0x2a>
 8006bde:	4b21      	ldr	r3, [pc, #132]	; (8006c64 <FLASH_SetErrorCode+0x9c>)
 8006be0:	69db      	ldr	r3, [r3, #28]
 8006be2:	f043 0302 	orr.w	r3, r3, #2
 8006be6:	4a1f      	ldr	r2, [pc, #124]	; (8006c64 <FLASH_SetErrorCode+0x9c>)
 8006be8:	61d3      	str	r3, [r2, #28]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f043 0310 	orr.w	r3, r3, #16
 8006bf0:	607b      	str	r3, [r7, #4]
 8006bf2:	4b1b      	ldr	r3, [pc, #108]	; (8006c60 <FLASH_SetErrorCode+0x98>)
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	f003 0304 	and.w	r3, r3, #4
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d009      	beq.n	8006c12 <FLASH_SetErrorCode+0x4a>
 8006bfe:	4b19      	ldr	r3, [pc, #100]	; (8006c64 <FLASH_SetErrorCode+0x9c>)
 8006c00:	69db      	ldr	r3, [r3, #28]
 8006c02:	f043 0301 	orr.w	r3, r3, #1
 8006c06:	4a17      	ldr	r2, [pc, #92]	; (8006c64 <FLASH_SetErrorCode+0x9c>)
 8006c08:	61d3      	str	r3, [r2, #28]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f043 0304 	orr.w	r3, r3, #4
 8006c10:	607b      	str	r3, [r7, #4]
 8006c12:	4b13      	ldr	r3, [pc, #76]	; (8006c60 <FLASH_SetErrorCode+0x98>)
 8006c14:	69db      	ldr	r3, [r3, #28]
 8006c16:	f003 0301 	and.w	r3, r3, #1
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00b      	beq.n	8006c36 <FLASH_SetErrorCode+0x6e>
 8006c1e:	4b11      	ldr	r3, [pc, #68]	; (8006c64 <FLASH_SetErrorCode+0x9c>)
 8006c20:	69db      	ldr	r3, [r3, #28]
 8006c22:	f043 0304 	orr.w	r3, r3, #4
 8006c26:	4a0f      	ldr	r2, [pc, #60]	; (8006c64 <FLASH_SetErrorCode+0x9c>)
 8006c28:	61d3      	str	r3, [r2, #28]
 8006c2a:	4b0d      	ldr	r3, [pc, #52]	; (8006c60 <FLASH_SetErrorCode+0x98>)
 8006c2c:	69db      	ldr	r3, [r3, #28]
 8006c2e:	4a0c      	ldr	r2, [pc, #48]	; (8006c60 <FLASH_SetErrorCode+0x98>)
 8006c30:	f023 0301 	bic.w	r3, r3, #1
 8006c34:	61d3      	str	r3, [r2, #28]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f240 1201 	movw	r2, #257	; 0x101
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d106      	bne.n	8006c4e <FLASH_SetErrorCode+0x86>
 8006c40:	4b07      	ldr	r3, [pc, #28]	; (8006c60 <FLASH_SetErrorCode+0x98>)
 8006c42:	69db      	ldr	r3, [r3, #28]
 8006c44:	4a06      	ldr	r2, [pc, #24]	; (8006c60 <FLASH_SetErrorCode+0x98>)
 8006c46:	f023 0301 	bic.w	r3, r3, #1
 8006c4a:	61d3      	str	r3, [r2, #28]
 8006c4c:	e002      	b.n	8006c54 <FLASH_SetErrorCode+0x8c>
 8006c4e:	4a04      	ldr	r2, [pc, #16]	; (8006c60 <FLASH_SetErrorCode+0x98>)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	60d3      	str	r3, [r2, #12]
 8006c54:	bf00      	nop
 8006c56:	370c      	adds	r7, #12
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bc80      	pop	{r7}
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	40022000 	.word	0x40022000
 8006c64:	20000778 	.word	0x20000778

08006c68 <HAL_FLASHEx_Erase>:
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
 8006c72:	2301      	movs	r3, #1
 8006c74:	73fb      	strb	r3, [r7, #15]
 8006c76:	2300      	movs	r3, #0
 8006c78:	60bb      	str	r3, [r7, #8]
 8006c7a:	4b2f      	ldr	r3, [pc, #188]	; (8006d38 <HAL_FLASHEx_Erase+0xd0>)
 8006c7c:	7e1b      	ldrb	r3, [r3, #24]
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d101      	bne.n	8006c86 <HAL_FLASHEx_Erase+0x1e>
 8006c82:	2302      	movs	r3, #2
 8006c84:	e053      	b.n	8006d2e <HAL_FLASHEx_Erase+0xc6>
 8006c86:	4b2c      	ldr	r3, [pc, #176]	; (8006d38 <HAL_FLASHEx_Erase+0xd0>)
 8006c88:	2201      	movs	r2, #1
 8006c8a:	761a      	strb	r2, [r3, #24]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2b02      	cmp	r3, #2
 8006c92:	d116      	bne.n	8006cc2 <HAL_FLASHEx_Erase+0x5a>
 8006c94:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006c98:	f7ff ff50 	bl	8006b3c <FLASH_WaitForLastOperation>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d141      	bne.n	8006d26 <HAL_FLASHEx_Erase+0xbe>
 8006ca2:	2001      	movs	r0, #1
 8006ca4:	f000 f84c 	bl	8006d40 <FLASH_MassErase>
 8006ca8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006cac:	f7ff ff46 	bl	8006b3c <FLASH_WaitForLastOperation>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	73fb      	strb	r3, [r7, #15]
 8006cb4:	4b21      	ldr	r3, [pc, #132]	; (8006d3c <HAL_FLASHEx_Erase+0xd4>)
 8006cb6:	691b      	ldr	r3, [r3, #16]
 8006cb8:	4a20      	ldr	r2, [pc, #128]	; (8006d3c <HAL_FLASHEx_Erase+0xd4>)
 8006cba:	f023 0304 	bic.w	r3, r3, #4
 8006cbe:	6113      	str	r3, [r2, #16]
 8006cc0:	e031      	b.n	8006d26 <HAL_FLASHEx_Erase+0xbe>
 8006cc2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006cc6:	f7ff ff39 	bl	8006b3c <FLASH_WaitForLastOperation>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d12a      	bne.n	8006d26 <HAL_FLASHEx_Erase+0xbe>
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	f04f 32ff 	mov.w	r2, #4294967295
 8006cd6:	601a      	str	r2, [r3, #0]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	60bb      	str	r3, [r7, #8]
 8006cde:	e019      	b.n	8006d14 <HAL_FLASHEx_Erase+0xac>
 8006ce0:	68b8      	ldr	r0, [r7, #8]
 8006ce2:	f000 f849 	bl	8006d78 <FLASH_PageErase>
 8006ce6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006cea:	f7ff ff27 	bl	8006b3c <FLASH_WaitForLastOperation>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	73fb      	strb	r3, [r7, #15]
 8006cf2:	4b12      	ldr	r3, [pc, #72]	; (8006d3c <HAL_FLASHEx_Erase+0xd4>)
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	4a11      	ldr	r2, [pc, #68]	; (8006d3c <HAL_FLASHEx_Erase+0xd4>)
 8006cf8:	f023 0302 	bic.w	r3, r3, #2
 8006cfc:	6113      	str	r3, [r2, #16]
 8006cfe:	7bfb      	ldrb	r3, [r7, #15]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d003      	beq.n	8006d0c <HAL_FLASHEx_Erase+0xa4>
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	68ba      	ldr	r2, [r7, #8]
 8006d08:	601a      	str	r2, [r3, #0]
 8006d0a:	e00c      	b.n	8006d26 <HAL_FLASHEx_Erase+0xbe>
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d12:	60bb      	str	r3, [r7, #8]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	68db      	ldr	r3, [r3, #12]
 8006d18:	029a      	lsls	r2, r3, #10
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	4413      	add	r3, r2
 8006d20:	68ba      	ldr	r2, [r7, #8]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d3dc      	bcc.n	8006ce0 <HAL_FLASHEx_Erase+0x78>
 8006d26:	4b04      	ldr	r3, [pc, #16]	; (8006d38 <HAL_FLASHEx_Erase+0xd0>)
 8006d28:	2200      	movs	r2, #0
 8006d2a:	761a      	strb	r2, [r3, #24]
 8006d2c:	7bfb      	ldrb	r3, [r7, #15]
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3710      	adds	r7, #16
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	bf00      	nop
 8006d38:	20000778 	.word	0x20000778
 8006d3c:	40022000 	.word	0x40022000

08006d40 <FLASH_MassErase>:
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	4b09      	ldr	r3, [pc, #36]	; (8006d70 <FLASH_MassErase+0x30>)
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	61da      	str	r2, [r3, #28]
 8006d4e:	4b09      	ldr	r3, [pc, #36]	; (8006d74 <FLASH_MassErase+0x34>)
 8006d50:	691b      	ldr	r3, [r3, #16]
 8006d52:	4a08      	ldr	r2, [pc, #32]	; (8006d74 <FLASH_MassErase+0x34>)
 8006d54:	f043 0304 	orr.w	r3, r3, #4
 8006d58:	6113      	str	r3, [r2, #16]
 8006d5a:	4b06      	ldr	r3, [pc, #24]	; (8006d74 <FLASH_MassErase+0x34>)
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	4a05      	ldr	r2, [pc, #20]	; (8006d74 <FLASH_MassErase+0x34>)
 8006d60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d64:	6113      	str	r3, [r2, #16]
 8006d66:	bf00      	nop
 8006d68:	370c      	adds	r7, #12
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bc80      	pop	{r7}
 8006d6e:	4770      	bx	lr
 8006d70:	20000778 	.word	0x20000778
 8006d74:	40022000 	.word	0x40022000

08006d78 <FLASH_PageErase>:
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	4b0b      	ldr	r3, [pc, #44]	; (8006db0 <FLASH_PageErase+0x38>)
 8006d82:	2200      	movs	r2, #0
 8006d84:	61da      	str	r2, [r3, #28]
 8006d86:	4b0b      	ldr	r3, [pc, #44]	; (8006db4 <FLASH_PageErase+0x3c>)
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	4a0a      	ldr	r2, [pc, #40]	; (8006db4 <FLASH_PageErase+0x3c>)
 8006d8c:	f043 0302 	orr.w	r3, r3, #2
 8006d90:	6113      	str	r3, [r2, #16]
 8006d92:	4a08      	ldr	r2, [pc, #32]	; (8006db4 <FLASH_PageErase+0x3c>)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6153      	str	r3, [r2, #20]
 8006d98:	4b06      	ldr	r3, [pc, #24]	; (8006db4 <FLASH_PageErase+0x3c>)
 8006d9a:	691b      	ldr	r3, [r3, #16]
 8006d9c:	4a05      	ldr	r2, [pc, #20]	; (8006db4 <FLASH_PageErase+0x3c>)
 8006d9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006da2:	6113      	str	r3, [r2, #16]
 8006da4:	bf00      	nop
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bc80      	pop	{r7}
 8006dac:	4770      	bx	lr
 8006dae:	bf00      	nop
 8006db0:	20000778 	.word	0x20000778
 8006db4:	40022000 	.word	0x40022000

08006db8 <HAL_GPIO_Init>:
 8006db8:	b480      	push	{r7}
 8006dba:	b08b      	sub	sp, #44	; 0x2c
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	623b      	str	r3, [r7, #32]
 8006dca:	e169      	b.n	80070a0 <HAL_GPIO_Init+0x2e8>
 8006dcc:	2201      	movs	r2, #1
 8006dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8006dd4:	61fb      	str	r3, [r7, #28]
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	69fa      	ldr	r2, [r7, #28]
 8006ddc:	4013      	ands	r3, r2
 8006dde:	61bb      	str	r3, [r7, #24]
 8006de0:	69ba      	ldr	r2, [r7, #24]
 8006de2:	69fb      	ldr	r3, [r7, #28]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	f040 8158 	bne.w	800709a <HAL_GPIO_Init+0x2e2>
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	4a9a      	ldr	r2, [pc, #616]	; (8007058 <HAL_GPIO_Init+0x2a0>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d05e      	beq.n	8006eb2 <HAL_GPIO_Init+0xfa>
 8006df4:	4a98      	ldr	r2, [pc, #608]	; (8007058 <HAL_GPIO_Init+0x2a0>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d875      	bhi.n	8006ee6 <HAL_GPIO_Init+0x12e>
 8006dfa:	4a98      	ldr	r2, [pc, #608]	; (800705c <HAL_GPIO_Init+0x2a4>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d058      	beq.n	8006eb2 <HAL_GPIO_Init+0xfa>
 8006e00:	4a96      	ldr	r2, [pc, #600]	; (800705c <HAL_GPIO_Init+0x2a4>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d86f      	bhi.n	8006ee6 <HAL_GPIO_Init+0x12e>
 8006e06:	4a96      	ldr	r2, [pc, #600]	; (8007060 <HAL_GPIO_Init+0x2a8>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d052      	beq.n	8006eb2 <HAL_GPIO_Init+0xfa>
 8006e0c:	4a94      	ldr	r2, [pc, #592]	; (8007060 <HAL_GPIO_Init+0x2a8>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d869      	bhi.n	8006ee6 <HAL_GPIO_Init+0x12e>
 8006e12:	4a94      	ldr	r2, [pc, #592]	; (8007064 <HAL_GPIO_Init+0x2ac>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d04c      	beq.n	8006eb2 <HAL_GPIO_Init+0xfa>
 8006e18:	4a92      	ldr	r2, [pc, #584]	; (8007064 <HAL_GPIO_Init+0x2ac>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d863      	bhi.n	8006ee6 <HAL_GPIO_Init+0x12e>
 8006e1e:	4a92      	ldr	r2, [pc, #584]	; (8007068 <HAL_GPIO_Init+0x2b0>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d046      	beq.n	8006eb2 <HAL_GPIO_Init+0xfa>
 8006e24:	4a90      	ldr	r2, [pc, #576]	; (8007068 <HAL_GPIO_Init+0x2b0>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d85d      	bhi.n	8006ee6 <HAL_GPIO_Init+0x12e>
 8006e2a:	2b12      	cmp	r3, #18
 8006e2c:	d82a      	bhi.n	8006e84 <HAL_GPIO_Init+0xcc>
 8006e2e:	2b12      	cmp	r3, #18
 8006e30:	d859      	bhi.n	8006ee6 <HAL_GPIO_Init+0x12e>
 8006e32:	a201      	add	r2, pc, #4	; (adr r2, 8006e38 <HAL_GPIO_Init+0x80>)
 8006e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e38:	08006eb3 	.word	0x08006eb3
 8006e3c:	08006e8d 	.word	0x08006e8d
 8006e40:	08006e9f 	.word	0x08006e9f
 8006e44:	08006ee1 	.word	0x08006ee1
 8006e48:	08006ee7 	.word	0x08006ee7
 8006e4c:	08006ee7 	.word	0x08006ee7
 8006e50:	08006ee7 	.word	0x08006ee7
 8006e54:	08006ee7 	.word	0x08006ee7
 8006e58:	08006ee7 	.word	0x08006ee7
 8006e5c:	08006ee7 	.word	0x08006ee7
 8006e60:	08006ee7 	.word	0x08006ee7
 8006e64:	08006ee7 	.word	0x08006ee7
 8006e68:	08006ee7 	.word	0x08006ee7
 8006e6c:	08006ee7 	.word	0x08006ee7
 8006e70:	08006ee7 	.word	0x08006ee7
 8006e74:	08006ee7 	.word	0x08006ee7
 8006e78:	08006ee7 	.word	0x08006ee7
 8006e7c:	08006e95 	.word	0x08006e95
 8006e80:	08006ea9 	.word	0x08006ea9
 8006e84:	4a79      	ldr	r2, [pc, #484]	; (800706c <HAL_GPIO_Init+0x2b4>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d013      	beq.n	8006eb2 <HAL_GPIO_Init+0xfa>
 8006e8a:	e02c      	b.n	8006ee6 <HAL_GPIO_Init+0x12e>
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	623b      	str	r3, [r7, #32]
 8006e92:	e029      	b.n	8006ee8 <HAL_GPIO_Init+0x130>
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	3304      	adds	r3, #4
 8006e9a:	623b      	str	r3, [r7, #32]
 8006e9c:	e024      	b.n	8006ee8 <HAL_GPIO_Init+0x130>
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	3308      	adds	r3, #8
 8006ea4:	623b      	str	r3, [r7, #32]
 8006ea6:	e01f      	b.n	8006ee8 <HAL_GPIO_Init+0x130>
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	330c      	adds	r3, #12
 8006eae:	623b      	str	r3, [r7, #32]
 8006eb0:	e01a      	b.n	8006ee8 <HAL_GPIO_Init+0x130>
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d102      	bne.n	8006ec0 <HAL_GPIO_Init+0x108>
 8006eba:	2304      	movs	r3, #4
 8006ebc:	623b      	str	r3, [r7, #32]
 8006ebe:	e013      	b.n	8006ee8 <HAL_GPIO_Init+0x130>
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d105      	bne.n	8006ed4 <HAL_GPIO_Init+0x11c>
 8006ec8:	2308      	movs	r3, #8
 8006eca:	623b      	str	r3, [r7, #32]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	69fa      	ldr	r2, [r7, #28]
 8006ed0:	611a      	str	r2, [r3, #16]
 8006ed2:	e009      	b.n	8006ee8 <HAL_GPIO_Init+0x130>
 8006ed4:	2308      	movs	r3, #8
 8006ed6:	623b      	str	r3, [r7, #32]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	69fa      	ldr	r2, [r7, #28]
 8006edc:	615a      	str	r2, [r3, #20]
 8006ede:	e003      	b.n	8006ee8 <HAL_GPIO_Init+0x130>
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	623b      	str	r3, [r7, #32]
 8006ee4:	e000      	b.n	8006ee8 <HAL_GPIO_Init+0x130>
 8006ee6:	bf00      	nop
 8006ee8:	69bb      	ldr	r3, [r7, #24]
 8006eea:	2bff      	cmp	r3, #255	; 0xff
 8006eec:	d801      	bhi.n	8006ef2 <HAL_GPIO_Init+0x13a>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	e001      	b.n	8006ef6 <HAL_GPIO_Init+0x13e>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	3304      	adds	r3, #4
 8006ef6:	617b      	str	r3, [r7, #20]
 8006ef8:	69bb      	ldr	r3, [r7, #24]
 8006efa:	2bff      	cmp	r3, #255	; 0xff
 8006efc:	d802      	bhi.n	8006f04 <HAL_GPIO_Init+0x14c>
 8006efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	e002      	b.n	8006f0a <HAL_GPIO_Init+0x152>
 8006f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f06:	3b08      	subs	r3, #8
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	613b      	str	r3, [r7, #16]
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	210f      	movs	r1, #15
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	fa01 f303 	lsl.w	r3, r1, r3
 8006f18:	43db      	mvns	r3, r3
 8006f1a:	401a      	ands	r2, r3
 8006f1c:	6a39      	ldr	r1, [r7, #32]
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	fa01 f303 	lsl.w	r3, r1, r3
 8006f24:	431a      	orrs	r2, r3
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	601a      	str	r2, [r3, #0]
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	f000 80b1 	beq.w	800709a <HAL_GPIO_Init+0x2e2>
 8006f38:	4b4d      	ldr	r3, [pc, #308]	; (8007070 <HAL_GPIO_Init+0x2b8>)
 8006f3a:	699b      	ldr	r3, [r3, #24]
 8006f3c:	4a4c      	ldr	r2, [pc, #304]	; (8007070 <HAL_GPIO_Init+0x2b8>)
 8006f3e:	f043 0301 	orr.w	r3, r3, #1
 8006f42:	6193      	str	r3, [r2, #24]
 8006f44:	4b4a      	ldr	r3, [pc, #296]	; (8007070 <HAL_GPIO_Init+0x2b8>)
 8006f46:	699b      	ldr	r3, [r3, #24]
 8006f48:	f003 0301 	and.w	r3, r3, #1
 8006f4c:	60bb      	str	r3, [r7, #8]
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	4a48      	ldr	r2, [pc, #288]	; (8007074 <HAL_GPIO_Init+0x2bc>)
 8006f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f54:	089b      	lsrs	r3, r3, #2
 8006f56:	3302      	adds	r3, #2
 8006f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f5c:	60fb      	str	r3, [r7, #12]
 8006f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f60:	f003 0303 	and.w	r3, r3, #3
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	220f      	movs	r2, #15
 8006f68:	fa02 f303 	lsl.w	r3, r2, r3
 8006f6c:	43db      	mvns	r3, r3
 8006f6e:	68fa      	ldr	r2, [r7, #12]
 8006f70:	4013      	ands	r3, r2
 8006f72:	60fb      	str	r3, [r7, #12]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	4a40      	ldr	r2, [pc, #256]	; (8007078 <HAL_GPIO_Init+0x2c0>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d013      	beq.n	8006fa4 <HAL_GPIO_Init+0x1ec>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	4a3f      	ldr	r2, [pc, #252]	; (800707c <HAL_GPIO_Init+0x2c4>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d00d      	beq.n	8006fa0 <HAL_GPIO_Init+0x1e8>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	4a3e      	ldr	r2, [pc, #248]	; (8007080 <HAL_GPIO_Init+0x2c8>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d007      	beq.n	8006f9c <HAL_GPIO_Init+0x1e4>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4a3d      	ldr	r2, [pc, #244]	; (8007084 <HAL_GPIO_Init+0x2cc>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d101      	bne.n	8006f98 <HAL_GPIO_Init+0x1e0>
 8006f94:	2303      	movs	r3, #3
 8006f96:	e006      	b.n	8006fa6 <HAL_GPIO_Init+0x1ee>
 8006f98:	2304      	movs	r3, #4
 8006f9a:	e004      	b.n	8006fa6 <HAL_GPIO_Init+0x1ee>
 8006f9c:	2302      	movs	r3, #2
 8006f9e:	e002      	b.n	8006fa6 <HAL_GPIO_Init+0x1ee>
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	e000      	b.n	8006fa6 <HAL_GPIO_Init+0x1ee>
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fa8:	f002 0203 	and.w	r2, r2, #3
 8006fac:	0092      	lsls	r2, r2, #2
 8006fae:	4093      	lsls	r3, r2
 8006fb0:	68fa      	ldr	r2, [r7, #12]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	60fb      	str	r3, [r7, #12]
 8006fb6:	492f      	ldr	r1, [pc, #188]	; (8007074 <HAL_GPIO_Init+0x2bc>)
 8006fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fba:	089b      	lsrs	r3, r3, #2
 8006fbc:	3302      	adds	r3, #2
 8006fbe:	68fa      	ldr	r2, [r7, #12]
 8006fc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d006      	beq.n	8006fde <HAL_GPIO_Init+0x226>
 8006fd0:	4b2d      	ldr	r3, [pc, #180]	; (8007088 <HAL_GPIO_Init+0x2d0>)
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	492c      	ldr	r1, [pc, #176]	; (8007088 <HAL_GPIO_Init+0x2d0>)
 8006fd6:	69bb      	ldr	r3, [r7, #24]
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	600b      	str	r3, [r1, #0]
 8006fdc:	e006      	b.n	8006fec <HAL_GPIO_Init+0x234>
 8006fde:	4b2a      	ldr	r3, [pc, #168]	; (8007088 <HAL_GPIO_Init+0x2d0>)
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	69bb      	ldr	r3, [r7, #24]
 8006fe4:	43db      	mvns	r3, r3
 8006fe6:	4928      	ldr	r1, [pc, #160]	; (8007088 <HAL_GPIO_Init+0x2d0>)
 8006fe8:	4013      	ands	r3, r2
 8006fea:	600b      	str	r3, [r1, #0]
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d006      	beq.n	8007006 <HAL_GPIO_Init+0x24e>
 8006ff8:	4b23      	ldr	r3, [pc, #140]	; (8007088 <HAL_GPIO_Init+0x2d0>)
 8006ffa:	685a      	ldr	r2, [r3, #4]
 8006ffc:	4922      	ldr	r1, [pc, #136]	; (8007088 <HAL_GPIO_Init+0x2d0>)
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	4313      	orrs	r3, r2
 8007002:	604b      	str	r3, [r1, #4]
 8007004:	e006      	b.n	8007014 <HAL_GPIO_Init+0x25c>
 8007006:	4b20      	ldr	r3, [pc, #128]	; (8007088 <HAL_GPIO_Init+0x2d0>)
 8007008:	685a      	ldr	r2, [r3, #4]
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	43db      	mvns	r3, r3
 800700e:	491e      	ldr	r1, [pc, #120]	; (8007088 <HAL_GPIO_Init+0x2d0>)
 8007010:	4013      	ands	r3, r2
 8007012:	604b      	str	r3, [r1, #4]
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800701c:	2b00      	cmp	r3, #0
 800701e:	d006      	beq.n	800702e <HAL_GPIO_Init+0x276>
 8007020:	4b19      	ldr	r3, [pc, #100]	; (8007088 <HAL_GPIO_Init+0x2d0>)
 8007022:	689a      	ldr	r2, [r3, #8]
 8007024:	4918      	ldr	r1, [pc, #96]	; (8007088 <HAL_GPIO_Init+0x2d0>)
 8007026:	69bb      	ldr	r3, [r7, #24]
 8007028:	4313      	orrs	r3, r2
 800702a:	608b      	str	r3, [r1, #8]
 800702c:	e006      	b.n	800703c <HAL_GPIO_Init+0x284>
 800702e:	4b16      	ldr	r3, [pc, #88]	; (8007088 <HAL_GPIO_Init+0x2d0>)
 8007030:	689a      	ldr	r2, [r3, #8]
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	43db      	mvns	r3, r3
 8007036:	4914      	ldr	r1, [pc, #80]	; (8007088 <HAL_GPIO_Init+0x2d0>)
 8007038:	4013      	ands	r3, r2
 800703a:	608b      	str	r3, [r1, #8]
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007044:	2b00      	cmp	r3, #0
 8007046:	d021      	beq.n	800708c <HAL_GPIO_Init+0x2d4>
 8007048:	4b0f      	ldr	r3, [pc, #60]	; (8007088 <HAL_GPIO_Init+0x2d0>)
 800704a:	68da      	ldr	r2, [r3, #12]
 800704c:	490e      	ldr	r1, [pc, #56]	; (8007088 <HAL_GPIO_Init+0x2d0>)
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	4313      	orrs	r3, r2
 8007052:	60cb      	str	r3, [r1, #12]
 8007054:	e021      	b.n	800709a <HAL_GPIO_Init+0x2e2>
 8007056:	bf00      	nop
 8007058:	10320000 	.word	0x10320000
 800705c:	10310000 	.word	0x10310000
 8007060:	10220000 	.word	0x10220000
 8007064:	10210000 	.word	0x10210000
 8007068:	10120000 	.word	0x10120000
 800706c:	10110000 	.word	0x10110000
 8007070:	40021000 	.word	0x40021000
 8007074:	40010000 	.word	0x40010000
 8007078:	40010800 	.word	0x40010800
 800707c:	40010c00 	.word	0x40010c00
 8007080:	40011000 	.word	0x40011000
 8007084:	40011400 	.word	0x40011400
 8007088:	40010400 	.word	0x40010400
 800708c:	4b0b      	ldr	r3, [pc, #44]	; (80070bc <HAL_GPIO_Init+0x304>)
 800708e:	68da      	ldr	r2, [r3, #12]
 8007090:	69bb      	ldr	r3, [r7, #24]
 8007092:	43db      	mvns	r3, r3
 8007094:	4909      	ldr	r1, [pc, #36]	; (80070bc <HAL_GPIO_Init+0x304>)
 8007096:	4013      	ands	r3, r2
 8007098:	60cb      	str	r3, [r1, #12]
 800709a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709c:	3301      	adds	r3, #1
 800709e:	627b      	str	r3, [r7, #36]	; 0x24
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a6:	fa22 f303 	lsr.w	r3, r2, r3
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	f47f ae8e 	bne.w	8006dcc <HAL_GPIO_Init+0x14>
 80070b0:	bf00      	nop
 80070b2:	bf00      	nop
 80070b4:	372c      	adds	r7, #44	; 0x2c
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bc80      	pop	{r7}
 80070ba:	4770      	bx	lr
 80070bc:	40010400 	.word	0x40010400

080070c0 <HAL_GPIO_ReadPin>:
 80070c0:	b480      	push	{r7}
 80070c2:	b085      	sub	sp, #20
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	460b      	mov	r3, r1
 80070ca:	807b      	strh	r3, [r7, #2]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	689a      	ldr	r2, [r3, #8]
 80070d0:	887b      	ldrh	r3, [r7, #2]
 80070d2:	4013      	ands	r3, r2
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d002      	beq.n	80070de <HAL_GPIO_ReadPin+0x1e>
 80070d8:	2301      	movs	r3, #1
 80070da:	73fb      	strb	r3, [r7, #15]
 80070dc:	e001      	b.n	80070e2 <HAL_GPIO_ReadPin+0x22>
 80070de:	2300      	movs	r3, #0
 80070e0:	73fb      	strb	r3, [r7, #15]
 80070e2:	7bfb      	ldrb	r3, [r7, #15]
 80070e4:	4618      	mov	r0, r3
 80070e6:	3714      	adds	r7, #20
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bc80      	pop	{r7}
 80070ec:	4770      	bx	lr

080070ee <HAL_GPIO_WritePin>:
 80070ee:	b480      	push	{r7}
 80070f0:	b083      	sub	sp, #12
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
 80070f6:	460b      	mov	r3, r1
 80070f8:	807b      	strh	r3, [r7, #2]
 80070fa:	4613      	mov	r3, r2
 80070fc:	707b      	strb	r3, [r7, #1]
 80070fe:	787b      	ldrb	r3, [r7, #1]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d003      	beq.n	800710c <HAL_GPIO_WritePin+0x1e>
 8007104:	887a      	ldrh	r2, [r7, #2]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	611a      	str	r2, [r3, #16]
 800710a:	e003      	b.n	8007114 <HAL_GPIO_WritePin+0x26>
 800710c:	887b      	ldrh	r3, [r7, #2]
 800710e:	041a      	lsls	r2, r3, #16
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	611a      	str	r2, [r3, #16]
 8007114:	bf00      	nop
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	bc80      	pop	{r7}
 800711c:	4770      	bx	lr
	...

08007120 <HAL_GPIO_EXTI_IRQHandler>:
 8007120:	b580      	push	{r7, lr}
 8007122:	b082      	sub	sp, #8
 8007124:	af00      	add	r7, sp, #0
 8007126:	4603      	mov	r3, r0
 8007128:	80fb      	strh	r3, [r7, #6]
 800712a:	4b08      	ldr	r3, [pc, #32]	; (800714c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800712c:	695a      	ldr	r2, [r3, #20]
 800712e:	88fb      	ldrh	r3, [r7, #6]
 8007130:	4013      	ands	r3, r2
 8007132:	2b00      	cmp	r3, #0
 8007134:	d006      	beq.n	8007144 <HAL_GPIO_EXTI_IRQHandler+0x24>
 8007136:	4a05      	ldr	r2, [pc, #20]	; (800714c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007138:	88fb      	ldrh	r3, [r7, #6]
 800713a:	6153      	str	r3, [r2, #20]
 800713c:	88fb      	ldrh	r3, [r7, #6]
 800713e:	4618      	mov	r0, r3
 8007140:	f7fc ff9e 	bl	8004080 <HAL_GPIO_EXTI_Callback>
 8007144:	bf00      	nop
 8007146:	3708      	adds	r7, #8
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}
 800714c:	40010400 	.word	0x40010400

08007150 <HAL_I2C_Init>:
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d101      	bne.n	8007162 <HAL_I2C_Init+0x12>
 800715e:	2301      	movs	r3, #1
 8007160:	e12b      	b.n	80073ba <HAL_I2C_Init+0x26a>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007168:	b2db      	uxtb	r3, r3
 800716a:	2b00      	cmp	r3, #0
 800716c:	d106      	bne.n	800717c <HAL_I2C_Init+0x2c>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f7fe f954 	bl	8005424 <HAL_I2C_MspInit>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2224      	movs	r2, #36	; 0x24
 8007180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f022 0201 	bic.w	r2, r2, #1
 8007192:	601a      	str	r2, [r3, #0]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80071a2:	601a      	str	r2, [r3, #0]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80071b2:	601a      	str	r2, [r3, #0]
 80071b4:	f001 f918 	bl	80083e8 <HAL_RCC_GetPCLK1Freq>
 80071b8:	60f8      	str	r0, [r7, #12]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	4a81      	ldr	r2, [pc, #516]	; (80073c4 <HAL_I2C_Init+0x274>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d807      	bhi.n	80071d4 <HAL_I2C_Init+0x84>
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	4a80      	ldr	r2, [pc, #512]	; (80073c8 <HAL_I2C_Init+0x278>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	bf94      	ite	ls
 80071cc:	2301      	movls	r3, #1
 80071ce:	2300      	movhi	r3, #0
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	e006      	b.n	80071e2 <HAL_I2C_Init+0x92>
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	4a7d      	ldr	r2, [pc, #500]	; (80073cc <HAL_I2C_Init+0x27c>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	bf94      	ite	ls
 80071dc:	2301      	movls	r3, #1
 80071de:	2300      	movhi	r3, #0
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d001      	beq.n	80071ea <HAL_I2C_Init+0x9a>
 80071e6:	2301      	movs	r3, #1
 80071e8:	e0e7      	b.n	80073ba <HAL_I2C_Init+0x26a>
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	4a78      	ldr	r2, [pc, #480]	; (80073d0 <HAL_I2C_Init+0x280>)
 80071ee:	fba2 2303 	umull	r2, r3, r2, r3
 80071f2:	0c9b      	lsrs	r3, r3, #18
 80071f4:	60bb      	str	r3, [r7, #8]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	68ba      	ldr	r2, [r7, #8]
 8007206:	430a      	orrs	r2, r1
 8007208:	605a      	str	r2, [r3, #4]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	6a1b      	ldr	r3, [r3, #32]
 8007210:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	4a6a      	ldr	r2, [pc, #424]	; (80073c4 <HAL_I2C_Init+0x274>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d802      	bhi.n	8007224 <HAL_I2C_Init+0xd4>
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	3301      	adds	r3, #1
 8007222:	e009      	b.n	8007238 <HAL_I2C_Init+0xe8>
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800722a:	fb02 f303 	mul.w	r3, r2, r3
 800722e:	4a69      	ldr	r2, [pc, #420]	; (80073d4 <HAL_I2C_Init+0x284>)
 8007230:	fba2 2303 	umull	r2, r3, r2, r3
 8007234:	099b      	lsrs	r3, r3, #6
 8007236:	3301      	adds	r3, #1
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	6812      	ldr	r2, [r2, #0]
 800723c:	430b      	orrs	r3, r1
 800723e:	6213      	str	r3, [r2, #32]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	69db      	ldr	r3, [r3, #28]
 8007246:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800724a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	495c      	ldr	r1, [pc, #368]	; (80073c4 <HAL_I2C_Init+0x274>)
 8007254:	428b      	cmp	r3, r1
 8007256:	d819      	bhi.n	800728c <HAL_I2C_Init+0x13c>
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	1e59      	subs	r1, r3, #1
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	005b      	lsls	r3, r3, #1
 8007262:	fbb1 f3f3 	udiv	r3, r1, r3
 8007266:	1c59      	adds	r1, r3, #1
 8007268:	f640 73fc 	movw	r3, #4092	; 0xffc
 800726c:	400b      	ands	r3, r1
 800726e:	2b00      	cmp	r3, #0
 8007270:	d00a      	beq.n	8007288 <HAL_I2C_Init+0x138>
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	1e59      	subs	r1, r3, #1
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	005b      	lsls	r3, r3, #1
 800727c:	fbb1 f3f3 	udiv	r3, r1, r3
 8007280:	3301      	adds	r3, #1
 8007282:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007286:	e051      	b.n	800732c <HAL_I2C_Init+0x1dc>
 8007288:	2304      	movs	r3, #4
 800728a:	e04f      	b.n	800732c <HAL_I2C_Init+0x1dc>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d111      	bne.n	80072b8 <HAL_I2C_Init+0x168>
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	1e58      	subs	r0, r3, #1
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6859      	ldr	r1, [r3, #4]
 800729c:	460b      	mov	r3, r1
 800729e:	005b      	lsls	r3, r3, #1
 80072a0:	440b      	add	r3, r1
 80072a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80072a6:	3301      	adds	r3, #1
 80072a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	bf0c      	ite	eq
 80072b0:	2301      	moveq	r3, #1
 80072b2:	2300      	movne	r3, #0
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	e012      	b.n	80072de <HAL_I2C_Init+0x18e>
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	1e58      	subs	r0, r3, #1
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6859      	ldr	r1, [r3, #4]
 80072c0:	460b      	mov	r3, r1
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	440b      	add	r3, r1
 80072c6:	0099      	lsls	r1, r3, #2
 80072c8:	440b      	add	r3, r1
 80072ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80072ce:	3301      	adds	r3, #1
 80072d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	bf0c      	ite	eq
 80072d8:	2301      	moveq	r3, #1
 80072da:	2300      	movne	r3, #0
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d001      	beq.n	80072e6 <HAL_I2C_Init+0x196>
 80072e2:	2301      	movs	r3, #1
 80072e4:	e022      	b.n	800732c <HAL_I2C_Init+0x1dc>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d10e      	bne.n	800730c <HAL_I2C_Init+0x1bc>
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	1e58      	subs	r0, r3, #1
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6859      	ldr	r1, [r3, #4]
 80072f6:	460b      	mov	r3, r1
 80072f8:	005b      	lsls	r3, r3, #1
 80072fa:	440b      	add	r3, r1
 80072fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8007300:	3301      	adds	r3, #1
 8007302:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007306:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800730a:	e00f      	b.n	800732c <HAL_I2C_Init+0x1dc>
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	1e58      	subs	r0, r3, #1
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6859      	ldr	r1, [r3, #4]
 8007314:	460b      	mov	r3, r1
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	440b      	add	r3, r1
 800731a:	0099      	lsls	r1, r3, #2
 800731c:	440b      	add	r3, r1
 800731e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007322:	3301      	adds	r3, #1
 8007324:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007328:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800732c:	6879      	ldr	r1, [r7, #4]
 800732e:	6809      	ldr	r1, [r1, #0]
 8007330:	4313      	orrs	r3, r2
 8007332:	61cb      	str	r3, [r1, #28]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	69da      	ldr	r2, [r3, #28]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6a1b      	ldr	r3, [r3, #32]
 8007346:	431a      	orrs	r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	430a      	orrs	r2, r1
 800734e:	601a      	str	r2, [r3, #0]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800735a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	6911      	ldr	r1, [r2, #16]
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	68d2      	ldr	r2, [r2, #12]
 8007366:	4311      	orrs	r1, r2
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	6812      	ldr	r2, [r2, #0]
 800736c:	430b      	orrs	r3, r1
 800736e:	6093      	str	r3, [r2, #8]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68db      	ldr	r3, [r3, #12]
 8007376:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	695a      	ldr	r2, [r3, #20]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	699b      	ldr	r3, [r3, #24]
 8007382:	431a      	orrs	r2, r3
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	430a      	orrs	r2, r1
 800738a:	60da      	str	r2, [r3, #12]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f042 0201 	orr.w	r2, r2, #1
 800739a:	601a      	str	r2, [r3, #0]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	641a      	str	r2, [r3, #64]	; 0x40
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2220      	movs	r2, #32
 80073a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	631a      	str	r2, [r3, #48]	; 0x30
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073b8:	2300      	movs	r3, #0
 80073ba:	4618      	mov	r0, r3
 80073bc:	3710      	adds	r7, #16
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop
 80073c4:	000186a0 	.word	0x000186a0
 80073c8:	001e847f 	.word	0x001e847f
 80073cc:	003d08ff 	.word	0x003d08ff
 80073d0:	431bde83 	.word	0x431bde83
 80073d4:	10624dd3 	.word	0x10624dd3

080073d8 <HAL_I2C_Master_Transmit>:
 80073d8:	b580      	push	{r7, lr}
 80073da:	b088      	sub	sp, #32
 80073dc:	af02      	add	r7, sp, #8
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	607a      	str	r2, [r7, #4]
 80073e2:	461a      	mov	r2, r3
 80073e4:	460b      	mov	r3, r1
 80073e6:	817b      	strh	r3, [r7, #10]
 80073e8:	4613      	mov	r3, r2
 80073ea:	813b      	strh	r3, [r7, #8]
 80073ec:	f7fe fa52 	bl	8005894 <HAL_GetTick>
 80073f0:	6178      	str	r0, [r7, #20]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	2b20      	cmp	r3, #32
 80073fc:	f040 80e0 	bne.w	80075c0 <HAL_I2C_Master_Transmit+0x1e8>
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	9300      	str	r3, [sp, #0]
 8007404:	2319      	movs	r3, #25
 8007406:	2201      	movs	r2, #1
 8007408:	4970      	ldr	r1, [pc, #448]	; (80075cc <HAL_I2C_Master_Transmit+0x1f4>)
 800740a:	68f8      	ldr	r0, [r7, #12]
 800740c:	f000 fa92 	bl	8007934 <I2C_WaitOnFlagUntilTimeout>
 8007410:	4603      	mov	r3, r0
 8007412:	2b00      	cmp	r3, #0
 8007414:	d001      	beq.n	800741a <HAL_I2C_Master_Transmit+0x42>
 8007416:	2302      	movs	r3, #2
 8007418:	e0d3      	b.n	80075c2 <HAL_I2C_Master_Transmit+0x1ea>
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007420:	2b01      	cmp	r3, #1
 8007422:	d101      	bne.n	8007428 <HAL_I2C_Master_Transmit+0x50>
 8007424:	2302      	movs	r3, #2
 8007426:	e0cc      	b.n	80075c2 <HAL_I2C_Master_Transmit+0x1ea>
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2201      	movs	r2, #1
 800742c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f003 0301 	and.w	r3, r3, #1
 800743a:	2b01      	cmp	r3, #1
 800743c:	d007      	beq.n	800744e <HAL_I2C_Master_Transmit+0x76>
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f042 0201 	orr.w	r2, r2, #1
 800744c:	601a      	str	r2, [r3, #0]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800745c:	601a      	str	r2, [r3, #0]
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2221      	movs	r2, #33	; 0x21
 8007462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2210      	movs	r2, #16
 800746a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2200      	movs	r2, #0
 8007472:	641a      	str	r2, [r3, #64]	; 0x40
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	625a      	str	r2, [r3, #36]	; 0x24
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	893a      	ldrh	r2, [r7, #8]
 800747e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007484:	b29a      	uxth	r2, r3
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	851a      	strh	r2, [r3, #40]	; 0x28
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	4a50      	ldr	r2, [pc, #320]	; (80075d0 <HAL_I2C_Master_Transmit+0x1f8>)
 800748e:	62da      	str	r2, [r3, #44]	; 0x2c
 8007490:	8979      	ldrh	r1, [r7, #10]
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	6a3a      	ldr	r2, [r7, #32]
 8007496:	68f8      	ldr	r0, [r7, #12]
 8007498:	f000 f9ca 	bl	8007830 <I2C_MasterRequestWrite>
 800749c:	4603      	mov	r3, r0
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d001      	beq.n	80074a6 <HAL_I2C_Master_Transmit+0xce>
 80074a2:	2301      	movs	r3, #1
 80074a4:	e08d      	b.n	80075c2 <HAL_I2C_Master_Transmit+0x1ea>
 80074a6:	2300      	movs	r3, #0
 80074a8:	613b      	str	r3, [r7, #16]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	695b      	ldr	r3, [r3, #20]
 80074b0:	613b      	str	r3, [r7, #16]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	699b      	ldr	r3, [r3, #24]
 80074b8:	613b      	str	r3, [r7, #16]
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	e066      	b.n	800758c <HAL_I2C_Master_Transmit+0x1b4>
 80074be:	697a      	ldr	r2, [r7, #20]
 80074c0:	6a39      	ldr	r1, [r7, #32]
 80074c2:	68f8      	ldr	r0, [r7, #12]
 80074c4:	f000 fb0c 	bl	8007ae0 <I2C_WaitOnTXEFlagUntilTimeout>
 80074c8:	4603      	mov	r3, r0
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d00d      	beq.n	80074ea <HAL_I2C_Master_Transmit+0x112>
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d2:	2b04      	cmp	r3, #4
 80074d4:	d107      	bne.n	80074e6 <HAL_I2C_Master_Transmit+0x10e>
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074e4:	601a      	str	r2, [r3, #0]
 80074e6:	2301      	movs	r3, #1
 80074e8:	e06b      	b.n	80075c2 <HAL_I2C_Master_Transmit+0x1ea>
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ee:	781a      	ldrb	r2, [r3, #0]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	611a      	str	r2, [r3, #16]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fa:	1c5a      	adds	r2, r3, #1
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	625a      	str	r2, [r3, #36]	; 0x24
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007504:	b29b      	uxth	r3, r3
 8007506:	3b01      	subs	r3, #1
 8007508:	b29a      	uxth	r2, r3
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007512:	3b01      	subs	r3, #1
 8007514:	b29a      	uxth	r2, r3
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	851a      	strh	r2, [r3, #40]	; 0x28
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	695b      	ldr	r3, [r3, #20]
 8007520:	f003 0304 	and.w	r3, r3, #4
 8007524:	2b04      	cmp	r3, #4
 8007526:	d11b      	bne.n	8007560 <HAL_I2C_Master_Transmit+0x188>
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800752c:	2b00      	cmp	r3, #0
 800752e:	d017      	beq.n	8007560 <HAL_I2C_Master_Transmit+0x188>
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007534:	781a      	ldrb	r2, [r3, #0]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	611a      	str	r2, [r3, #16]
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007540:	1c5a      	adds	r2, r3, #1
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	625a      	str	r2, [r3, #36]	; 0x24
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800754a:	b29b      	uxth	r3, r3
 800754c:	3b01      	subs	r3, #1
 800754e:	b29a      	uxth	r2, r3
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007558:	3b01      	subs	r3, #1
 800755a:	b29a      	uxth	r2, r3
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	851a      	strh	r2, [r3, #40]	; 0x28
 8007560:	697a      	ldr	r2, [r7, #20]
 8007562:	6a39      	ldr	r1, [r7, #32]
 8007564:	68f8      	ldr	r0, [r7, #12]
 8007566:	f000 fafc 	bl	8007b62 <I2C_WaitOnBTFFlagUntilTimeout>
 800756a:	4603      	mov	r3, r0
 800756c:	2b00      	cmp	r3, #0
 800756e:	d00d      	beq.n	800758c <HAL_I2C_Master_Transmit+0x1b4>
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007574:	2b04      	cmp	r3, #4
 8007576:	d107      	bne.n	8007588 <HAL_I2C_Master_Transmit+0x1b0>
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007586:	601a      	str	r2, [r3, #0]
 8007588:	2301      	movs	r3, #1
 800758a:	e01a      	b.n	80075c2 <HAL_I2C_Master_Transmit+0x1ea>
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007590:	2b00      	cmp	r3, #0
 8007592:	d194      	bne.n	80074be <HAL_I2C_Master_Transmit+0xe6>
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075a2:	601a      	str	r2, [r3, #0]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2220      	movs	r2, #32
 80075a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2200      	movs	r2, #0
 80075b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2200      	movs	r2, #0
 80075b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80075bc:	2300      	movs	r3, #0
 80075be:	e000      	b.n	80075c2 <HAL_I2C_Master_Transmit+0x1ea>
 80075c0:	2302      	movs	r3, #2
 80075c2:	4618      	mov	r0, r3
 80075c4:	3718      	adds	r7, #24
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}
 80075ca:	bf00      	nop
 80075cc:	00100002 	.word	0x00100002
 80075d0:	ffff0000 	.word	0xffff0000

080075d4 <HAL_I2C_IsDeviceReady>:
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b08a      	sub	sp, #40	; 0x28
 80075d8:	af02      	add	r7, sp, #8
 80075da:	60f8      	str	r0, [r7, #12]
 80075dc:	607a      	str	r2, [r7, #4]
 80075de:	603b      	str	r3, [r7, #0]
 80075e0:	460b      	mov	r3, r1
 80075e2:	817b      	strh	r3, [r7, #10]
 80075e4:	f7fe f956 	bl	8005894 <HAL_GetTick>
 80075e8:	61f8      	str	r0, [r7, #28]
 80075ea:	2301      	movs	r3, #1
 80075ec:	61bb      	str	r3, [r7, #24]
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	2b20      	cmp	r3, #32
 80075f8:	f040 8111 	bne.w	800781e <HAL_I2C_IsDeviceReady+0x24a>
 80075fc:	69fb      	ldr	r3, [r7, #28]
 80075fe:	9300      	str	r3, [sp, #0]
 8007600:	2319      	movs	r3, #25
 8007602:	2201      	movs	r2, #1
 8007604:	4988      	ldr	r1, [pc, #544]	; (8007828 <HAL_I2C_IsDeviceReady+0x254>)
 8007606:	68f8      	ldr	r0, [r7, #12]
 8007608:	f000 f994 	bl	8007934 <I2C_WaitOnFlagUntilTimeout>
 800760c:	4603      	mov	r3, r0
 800760e:	2b00      	cmp	r3, #0
 8007610:	d001      	beq.n	8007616 <HAL_I2C_IsDeviceReady+0x42>
 8007612:	2302      	movs	r3, #2
 8007614:	e104      	b.n	8007820 <HAL_I2C_IsDeviceReady+0x24c>
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800761c:	2b01      	cmp	r3, #1
 800761e:	d101      	bne.n	8007624 <HAL_I2C_IsDeviceReady+0x50>
 8007620:	2302      	movs	r3, #2
 8007622:	e0fd      	b.n	8007820 <HAL_I2C_IsDeviceReady+0x24c>
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2201      	movs	r2, #1
 8007628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f003 0301 	and.w	r3, r3, #1
 8007636:	2b01      	cmp	r3, #1
 8007638:	d007      	beq.n	800764a <HAL_I2C_IsDeviceReady+0x76>
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f042 0201 	orr.w	r2, r2, #1
 8007648:	601a      	str	r2, [r3, #0]
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	681a      	ldr	r2, [r3, #0]
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007658:	601a      	str	r2, [r3, #0]
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2224      	movs	r2, #36	; 0x24
 800765e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2200      	movs	r2, #0
 8007666:	641a      	str	r2, [r3, #64]	; 0x40
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	4a70      	ldr	r2, [pc, #448]	; (800782c <HAL_I2C_IsDeviceReady+0x258>)
 800766c:	62da      	str	r2, [r3, #44]	; 0x2c
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800767c:	601a      	str	r2, [r3, #0]
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	9300      	str	r3, [sp, #0]
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	2200      	movs	r2, #0
 8007686:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800768a:	68f8      	ldr	r0, [r7, #12]
 800768c:	f000 f952 	bl	8007934 <I2C_WaitOnFlagUntilTimeout>
 8007690:	4603      	mov	r3, r0
 8007692:	2b00      	cmp	r3, #0
 8007694:	d00d      	beq.n	80076b2 <HAL_I2C_IsDeviceReady+0xde>
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076a4:	d103      	bne.n	80076ae <HAL_I2C_IsDeviceReady+0xda>
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076ac:	641a      	str	r2, [r3, #64]	; 0x40
 80076ae:	2303      	movs	r3, #3
 80076b0:	e0b6      	b.n	8007820 <HAL_I2C_IsDeviceReady+0x24c>
 80076b2:	897b      	ldrh	r3, [r7, #10]
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	461a      	mov	r2, r3
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80076c0:	611a      	str	r2, [r3, #16]
 80076c2:	f7fe f8e7 	bl	8005894 <HAL_GetTick>
 80076c6:	61f8      	str	r0, [r7, #28]
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	695b      	ldr	r3, [r3, #20]
 80076ce:	f003 0302 	and.w	r3, r3, #2
 80076d2:	2b02      	cmp	r3, #2
 80076d4:	bf0c      	ite	eq
 80076d6:	2301      	moveq	r3, #1
 80076d8:	2300      	movne	r3, #0
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	75fb      	strb	r3, [r7, #23]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	695b      	ldr	r3, [r3, #20]
 80076e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076ec:	bf0c      	ite	eq
 80076ee:	2301      	moveq	r3, #1
 80076f0:	2300      	movne	r3, #0
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	75bb      	strb	r3, [r7, #22]
 80076f6:	e025      	b.n	8007744 <HAL_I2C_IsDeviceReady+0x170>
 80076f8:	f7fe f8cc 	bl	8005894 <HAL_GetTick>
 80076fc:	4602      	mov	r2, r0
 80076fe:	69fb      	ldr	r3, [r7, #28]
 8007700:	1ad3      	subs	r3, r2, r3
 8007702:	683a      	ldr	r2, [r7, #0]
 8007704:	429a      	cmp	r2, r3
 8007706:	d302      	bcc.n	800770e <HAL_I2C_IsDeviceReady+0x13a>
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d103      	bne.n	8007716 <HAL_I2C_IsDeviceReady+0x142>
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	22a0      	movs	r2, #160	; 0xa0
 8007712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	695b      	ldr	r3, [r3, #20]
 800771c:	f003 0302 	and.w	r3, r3, #2
 8007720:	2b02      	cmp	r3, #2
 8007722:	bf0c      	ite	eq
 8007724:	2301      	moveq	r3, #1
 8007726:	2300      	movne	r3, #0
 8007728:	b2db      	uxtb	r3, r3
 800772a:	75fb      	strb	r3, [r7, #23]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	695b      	ldr	r3, [r3, #20]
 8007732:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007736:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800773a:	bf0c      	ite	eq
 800773c:	2301      	moveq	r3, #1
 800773e:	2300      	movne	r3, #0
 8007740:	b2db      	uxtb	r3, r3
 8007742:	75bb      	strb	r3, [r7, #22]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800774a:	b2db      	uxtb	r3, r3
 800774c:	2ba0      	cmp	r3, #160	; 0xa0
 800774e:	d005      	beq.n	800775c <HAL_I2C_IsDeviceReady+0x188>
 8007750:	7dfb      	ldrb	r3, [r7, #23]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d102      	bne.n	800775c <HAL_I2C_IsDeviceReady+0x188>
 8007756:	7dbb      	ldrb	r3, [r7, #22]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d0cd      	beq.n	80076f8 <HAL_I2C_IsDeviceReady+0x124>
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2220      	movs	r2, #32
 8007760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	695b      	ldr	r3, [r3, #20]
 800776a:	f003 0302 	and.w	r3, r3, #2
 800776e:	2b02      	cmp	r3, #2
 8007770:	d129      	bne.n	80077c6 <HAL_I2C_IsDeviceReady+0x1f2>
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007780:	601a      	str	r2, [r3, #0]
 8007782:	2300      	movs	r3, #0
 8007784:	613b      	str	r3, [r7, #16]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	695b      	ldr	r3, [r3, #20]
 800778c:	613b      	str	r3, [r7, #16]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	699b      	ldr	r3, [r3, #24]
 8007794:	613b      	str	r3, [r7, #16]
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	69fb      	ldr	r3, [r7, #28]
 800779a:	9300      	str	r3, [sp, #0]
 800779c:	2319      	movs	r3, #25
 800779e:	2201      	movs	r2, #1
 80077a0:	4921      	ldr	r1, [pc, #132]	; (8007828 <HAL_I2C_IsDeviceReady+0x254>)
 80077a2:	68f8      	ldr	r0, [r7, #12]
 80077a4:	f000 f8c6 	bl	8007934 <I2C_WaitOnFlagUntilTimeout>
 80077a8:	4603      	mov	r3, r0
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d001      	beq.n	80077b2 <HAL_I2C_IsDeviceReady+0x1de>
 80077ae:	2301      	movs	r3, #1
 80077b0:	e036      	b.n	8007820 <HAL_I2C_IsDeviceReady+0x24c>
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2220      	movs	r2, #32
 80077b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2200      	movs	r2, #0
 80077be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80077c2:	2300      	movs	r3, #0
 80077c4:	e02c      	b.n	8007820 <HAL_I2C_IsDeviceReady+0x24c>
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077d4:	601a      	str	r2, [r3, #0]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80077de:	615a      	str	r2, [r3, #20]
 80077e0:	69fb      	ldr	r3, [r7, #28]
 80077e2:	9300      	str	r3, [sp, #0]
 80077e4:	2319      	movs	r3, #25
 80077e6:	2201      	movs	r2, #1
 80077e8:	490f      	ldr	r1, [pc, #60]	; (8007828 <HAL_I2C_IsDeviceReady+0x254>)
 80077ea:	68f8      	ldr	r0, [r7, #12]
 80077ec:	f000 f8a2 	bl	8007934 <I2C_WaitOnFlagUntilTimeout>
 80077f0:	4603      	mov	r3, r0
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d001      	beq.n	80077fa <HAL_I2C_IsDeviceReady+0x226>
 80077f6:	2301      	movs	r3, #1
 80077f8:	e012      	b.n	8007820 <HAL_I2C_IsDeviceReady+0x24c>
 80077fa:	69bb      	ldr	r3, [r7, #24]
 80077fc:	3301      	adds	r3, #1
 80077fe:	61bb      	str	r3, [r7, #24]
 8007800:	69ba      	ldr	r2, [r7, #24]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	429a      	cmp	r2, r3
 8007806:	f4ff af32 	bcc.w	800766e <HAL_I2C_IsDeviceReady+0x9a>
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2220      	movs	r2, #32
 800780e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2200      	movs	r2, #0
 8007816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800781a:	2301      	movs	r3, #1
 800781c:	e000      	b.n	8007820 <HAL_I2C_IsDeviceReady+0x24c>
 800781e:	2302      	movs	r3, #2
 8007820:	4618      	mov	r0, r3
 8007822:	3720      	adds	r7, #32
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}
 8007828:	00100002 	.word	0x00100002
 800782c:	ffff0000 	.word	0xffff0000

08007830 <I2C_MasterRequestWrite>:
 8007830:	b580      	push	{r7, lr}
 8007832:	b088      	sub	sp, #32
 8007834:	af02      	add	r7, sp, #8
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	607a      	str	r2, [r7, #4]
 800783a:	603b      	str	r3, [r7, #0]
 800783c:	460b      	mov	r3, r1
 800783e:	817b      	strh	r3, [r7, #10]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007844:	617b      	str	r3, [r7, #20]
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	2b08      	cmp	r3, #8
 800784a:	d006      	beq.n	800785a <I2C_MasterRequestWrite+0x2a>
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	2b01      	cmp	r3, #1
 8007850:	d003      	beq.n	800785a <I2C_MasterRequestWrite+0x2a>
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007858:	d108      	bne.n	800786c <I2C_MasterRequestWrite+0x3c>
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007868:	601a      	str	r2, [r3, #0]
 800786a:	e00b      	b.n	8007884 <I2C_MasterRequestWrite+0x54>
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007870:	2b12      	cmp	r3, #18
 8007872:	d107      	bne.n	8007884 <I2C_MasterRequestWrite+0x54>
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007882:	601a      	str	r2, [r3, #0]
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	9300      	str	r3, [sp, #0]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2200      	movs	r2, #0
 800788c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007890:	68f8      	ldr	r0, [r7, #12]
 8007892:	f000 f84f 	bl	8007934 <I2C_WaitOnFlagUntilTimeout>
 8007896:	4603      	mov	r3, r0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d00d      	beq.n	80078b8 <I2C_MasterRequestWrite+0x88>
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078aa:	d103      	bne.n	80078b4 <I2C_MasterRequestWrite+0x84>
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078b2:	641a      	str	r2, [r3, #64]	; 0x40
 80078b4:	2303      	movs	r3, #3
 80078b6:	e035      	b.n	8007924 <I2C_MasterRequestWrite+0xf4>
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	691b      	ldr	r3, [r3, #16]
 80078bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80078c0:	d108      	bne.n	80078d4 <I2C_MasterRequestWrite+0xa4>
 80078c2:	897b      	ldrh	r3, [r7, #10]
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	461a      	mov	r2, r3
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80078d0:	611a      	str	r2, [r3, #16]
 80078d2:	e01b      	b.n	800790c <I2C_MasterRequestWrite+0xdc>
 80078d4:	897b      	ldrh	r3, [r7, #10]
 80078d6:	11db      	asrs	r3, r3, #7
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	f003 0306 	and.w	r3, r3, #6
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	f063 030f 	orn	r3, r3, #15
 80078e4:	b2da      	uxtb	r2, r3
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	611a      	str	r2, [r3, #16]
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	687a      	ldr	r2, [r7, #4]
 80078f0:	490e      	ldr	r1, [pc, #56]	; (800792c <I2C_MasterRequestWrite+0xfc>)
 80078f2:	68f8      	ldr	r0, [r7, #12]
 80078f4:	f000 f875 	bl	80079e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80078f8:	4603      	mov	r3, r0
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d001      	beq.n	8007902 <I2C_MasterRequestWrite+0xd2>
 80078fe:	2301      	movs	r3, #1
 8007900:	e010      	b.n	8007924 <I2C_MasterRequestWrite+0xf4>
 8007902:	897b      	ldrh	r3, [r7, #10]
 8007904:	b2da      	uxtb	r2, r3
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	611a      	str	r2, [r3, #16]
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	4907      	ldr	r1, [pc, #28]	; (8007930 <I2C_MasterRequestWrite+0x100>)
 8007912:	68f8      	ldr	r0, [r7, #12]
 8007914:	f000 f865 	bl	80079e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007918:	4603      	mov	r3, r0
 800791a:	2b00      	cmp	r3, #0
 800791c:	d001      	beq.n	8007922 <I2C_MasterRequestWrite+0xf2>
 800791e:	2301      	movs	r3, #1
 8007920:	e000      	b.n	8007924 <I2C_MasterRequestWrite+0xf4>
 8007922:	2300      	movs	r3, #0
 8007924:	4618      	mov	r0, r3
 8007926:	3718      	adds	r7, #24
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}
 800792c:	00010008 	.word	0x00010008
 8007930:	00010002 	.word	0x00010002

08007934 <I2C_WaitOnFlagUntilTimeout>:
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	60f8      	str	r0, [r7, #12]
 800793c:	60b9      	str	r1, [r7, #8]
 800793e:	603b      	str	r3, [r7, #0]
 8007940:	4613      	mov	r3, r2
 8007942:	71fb      	strb	r3, [r7, #7]
 8007944:	e025      	b.n	8007992 <I2C_WaitOnFlagUntilTimeout+0x5e>
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800794c:	d021      	beq.n	8007992 <I2C_WaitOnFlagUntilTimeout+0x5e>
 800794e:	f7fd ffa1 	bl	8005894 <HAL_GetTick>
 8007952:	4602      	mov	r2, r0
 8007954:	69bb      	ldr	r3, [r7, #24]
 8007956:	1ad3      	subs	r3, r2, r3
 8007958:	683a      	ldr	r2, [r7, #0]
 800795a:	429a      	cmp	r2, r3
 800795c:	d302      	bcc.n	8007964 <I2C_WaitOnFlagUntilTimeout+0x30>
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d116      	bne.n	8007992 <I2C_WaitOnFlagUntilTimeout+0x5e>
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2200      	movs	r2, #0
 8007968:	631a      	str	r2, [r3, #48]	; 0x30
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2220      	movs	r2, #32
 800796e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2200      	movs	r2, #0
 8007976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800797e:	f043 0220 	orr.w	r2, r3, #32
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	641a      	str	r2, [r3, #64]	; 0x40
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2200      	movs	r2, #0
 800798a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800798e:	2301      	movs	r3, #1
 8007990:	e023      	b.n	80079da <I2C_WaitOnFlagUntilTimeout+0xa6>
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	0c1b      	lsrs	r3, r3, #16
 8007996:	b2db      	uxtb	r3, r3
 8007998:	2b01      	cmp	r3, #1
 800799a:	d10d      	bne.n	80079b8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	695b      	ldr	r3, [r3, #20]
 80079a2:	43da      	mvns	r2, r3
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	4013      	ands	r3, r2
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	bf0c      	ite	eq
 80079ae:	2301      	moveq	r3, #1
 80079b0:	2300      	movne	r3, #0
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	461a      	mov	r2, r3
 80079b6:	e00c      	b.n	80079d2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	699b      	ldr	r3, [r3, #24]
 80079be:	43da      	mvns	r2, r3
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	4013      	ands	r3, r2
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	bf0c      	ite	eq
 80079ca:	2301      	moveq	r3, #1
 80079cc:	2300      	movne	r3, #0
 80079ce:	b2db      	uxtb	r3, r3
 80079d0:	461a      	mov	r2, r3
 80079d2:	79fb      	ldrb	r3, [r7, #7]
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d0b6      	beq.n	8007946 <I2C_WaitOnFlagUntilTimeout+0x12>
 80079d8:	2300      	movs	r3, #0
 80079da:	4618      	mov	r0, r3
 80079dc:	3710      	adds	r7, #16
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}

080079e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 80079e2:	b580      	push	{r7, lr}
 80079e4:	b084      	sub	sp, #16
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	60f8      	str	r0, [r7, #12]
 80079ea:	60b9      	str	r1, [r7, #8]
 80079ec:	607a      	str	r2, [r7, #4]
 80079ee:	603b      	str	r3, [r7, #0]
 80079f0:	e051      	b.n	8007a96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	695b      	ldr	r3, [r3, #20]
 80079f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a00:	d123      	bne.n	8007a4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a10:	601a      	str	r2, [r3, #0]
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007a1a:	615a      	str	r2, [r3, #20]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	631a      	str	r2, [r3, #48]	; 0x30
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2220      	movs	r2, #32
 8007a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a36:	f043 0204 	orr.w	r2, r3, #4
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	641a      	str	r2, [r3, #64]	; 0x40
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007a46:	2301      	movs	r3, #1
 8007a48:	e046      	b.n	8007ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a50:	d021      	beq.n	8007a96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8007a52:	f7fd ff1f 	bl	8005894 <HAL_GetTick>
 8007a56:	4602      	mov	r2, r0
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	1ad3      	subs	r3, r2, r3
 8007a5c:	687a      	ldr	r2, [r7, #4]
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	d302      	bcc.n	8007a68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d116      	bne.n	8007a96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	631a      	str	r2, [r3, #48]	; 0x30
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2220      	movs	r2, #32
 8007a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a82:	f043 0220 	orr.w	r2, r3, #32
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	641a      	str	r2, [r3, #64]	; 0x40
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007a92:	2301      	movs	r3, #1
 8007a94:	e020      	b.n	8007ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	0c1b      	lsrs	r3, r3, #16
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d10c      	bne.n	8007aba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	695b      	ldr	r3, [r3, #20]
 8007aa6:	43da      	mvns	r2, r3
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	4013      	ands	r3, r2
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	bf14      	ite	ne
 8007ab2:	2301      	movne	r3, #1
 8007ab4:	2300      	moveq	r3, #0
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	e00b      	b.n	8007ad2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	699b      	ldr	r3, [r3, #24]
 8007ac0:	43da      	mvns	r2, r3
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	4013      	ands	r3, r2
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	bf14      	ite	ne
 8007acc:	2301      	movne	r3, #1
 8007ace:	2300      	moveq	r3, #0
 8007ad0:	b2db      	uxtb	r3, r3
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d18d      	bne.n	80079f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3710      	adds	r7, #16
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <I2C_WaitOnTXEFlagUntilTimeout>:
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b084      	sub	sp, #16
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	607a      	str	r2, [r7, #4]
 8007aec:	e02d      	b.n	8007b4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 8007aee:	68f8      	ldr	r0, [r7, #12]
 8007af0:	f000 f878 	bl	8007be4 <I2C_IsAcknowledgeFailed>
 8007af4:	4603      	mov	r3, r0
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d001      	beq.n	8007afe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
 8007afa:	2301      	movs	r3, #1
 8007afc:	e02d      	b.n	8007b5a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b04:	d021      	beq.n	8007b4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 8007b06:	f7fd fec5 	bl	8005894 <HAL_GetTick>
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	1ad3      	subs	r3, r2, r3
 8007b10:	68ba      	ldr	r2, [r7, #8]
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d302      	bcc.n	8007b1c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d116      	bne.n	8007b4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	631a      	str	r2, [r3, #48]	; 0x30
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2220      	movs	r2, #32
 8007b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b36:	f043 0220 	orr.w	r2, r3, #32
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	641a      	str	r2, [r3, #64]	; 0x40
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2200      	movs	r2, #0
 8007b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007b46:	2301      	movs	r3, #1
 8007b48:	e007      	b.n	8007b5a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	695b      	ldr	r3, [r3, #20]
 8007b50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b54:	2b80      	cmp	r3, #128	; 0x80
 8007b56:	d1ca      	bne.n	8007aee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
 8007b58:	2300      	movs	r3, #0
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3710      	adds	r7, #16
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}

08007b62 <I2C_WaitOnBTFFlagUntilTimeout>:
 8007b62:	b580      	push	{r7, lr}
 8007b64:	b084      	sub	sp, #16
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	60f8      	str	r0, [r7, #12]
 8007b6a:	60b9      	str	r1, [r7, #8]
 8007b6c:	607a      	str	r2, [r7, #4]
 8007b6e:	e02d      	b.n	8007bcc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8007b70:	68f8      	ldr	r0, [r7, #12]
 8007b72:	f000 f837 	bl	8007be4 <I2C_IsAcknowledgeFailed>
 8007b76:	4603      	mov	r3, r0
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d001      	beq.n	8007b80 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	e02d      	b.n	8007bdc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b86:	d021      	beq.n	8007bcc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8007b88:	f7fd fe84 	bl	8005894 <HAL_GetTick>
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	1ad3      	subs	r3, r2, r3
 8007b92:	68ba      	ldr	r2, [r7, #8]
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d302      	bcc.n	8007b9e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d116      	bne.n	8007bcc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	631a      	str	r2, [r3, #48]	; 0x30
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2220      	movs	r2, #32
 8007ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb8:	f043 0220 	orr.w	r2, r3, #32
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	641a      	str	r2, [r3, #64]	; 0x40
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007bc8:	2301      	movs	r3, #1
 8007bca:	e007      	b.n	8007bdc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	695b      	ldr	r3, [r3, #20]
 8007bd2:	f003 0304 	and.w	r3, r3, #4
 8007bd6:	2b04      	cmp	r3, #4
 8007bd8:	d1ca      	bne.n	8007b70 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
 8007bda:	2300      	movs	r3, #0
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3710      	adds	r7, #16
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <I2C_IsAcknowledgeFailed>:
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	695b      	ldr	r3, [r3, #20]
 8007bf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bfa:	d11b      	bne.n	8007c34 <I2C_IsAcknowledgeFailed+0x50>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007c04:	615a      	str	r2, [r3, #20]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	631a      	str	r2, [r3, #48]	; 0x30
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2220      	movs	r2, #32
 8007c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2200      	movs	r2, #0
 8007c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c20:	f043 0204 	orr.w	r2, r3, #4
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	641a      	str	r2, [r3, #64]	; 0x40
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007c30:	2301      	movs	r3, #1
 8007c32:	e000      	b.n	8007c36 <I2C_IsAcknowledgeFailed+0x52>
 8007c34:	2300      	movs	r3, #0
 8007c36:	4618      	mov	r0, r3
 8007c38:	370c      	adds	r7, #12
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bc80      	pop	{r7}
 8007c3e:	4770      	bx	lr

08007c40 <HAL_RCC_OscConfig>:
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b086      	sub	sp, #24
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d101      	bne.n	8007c52 <HAL_RCC_OscConfig+0x12>
 8007c4e:	2301      	movs	r3, #1
 8007c50:	e272      	b.n	8008138 <HAL_RCC_OscConfig+0x4f8>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f003 0301 	and.w	r3, r3, #1
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	f000 8087 	beq.w	8007d6e <HAL_RCC_OscConfig+0x12e>
 8007c60:	4b92      	ldr	r3, [pc, #584]	; (8007eac <HAL_RCC_OscConfig+0x26c>)
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	f003 030c 	and.w	r3, r3, #12
 8007c68:	2b04      	cmp	r3, #4
 8007c6a:	d00c      	beq.n	8007c86 <HAL_RCC_OscConfig+0x46>
 8007c6c:	4b8f      	ldr	r3, [pc, #572]	; (8007eac <HAL_RCC_OscConfig+0x26c>)
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	f003 030c 	and.w	r3, r3, #12
 8007c74:	2b08      	cmp	r3, #8
 8007c76:	d112      	bne.n	8007c9e <HAL_RCC_OscConfig+0x5e>
 8007c78:	4b8c      	ldr	r3, [pc, #560]	; (8007eac <HAL_RCC_OscConfig+0x26c>)
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c84:	d10b      	bne.n	8007c9e <HAL_RCC_OscConfig+0x5e>
 8007c86:	4b89      	ldr	r3, [pc, #548]	; (8007eac <HAL_RCC_OscConfig+0x26c>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d06c      	beq.n	8007d6c <HAL_RCC_OscConfig+0x12c>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d168      	bne.n	8007d6c <HAL_RCC_OscConfig+0x12c>
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	e24c      	b.n	8008138 <HAL_RCC_OscConfig+0x4f8>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ca6:	d106      	bne.n	8007cb6 <HAL_RCC_OscConfig+0x76>
 8007ca8:	4b80      	ldr	r3, [pc, #512]	; (8007eac <HAL_RCC_OscConfig+0x26c>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a7f      	ldr	r2, [pc, #508]	; (8007eac <HAL_RCC_OscConfig+0x26c>)
 8007cae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007cb2:	6013      	str	r3, [r2, #0]
 8007cb4:	e02e      	b.n	8007d14 <HAL_RCC_OscConfig+0xd4>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d10c      	bne.n	8007cd8 <HAL_RCC_OscConfig+0x98>
 8007cbe:	4b7b      	ldr	r3, [pc, #492]	; (8007eac <HAL_RCC_OscConfig+0x26c>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a7a      	ldr	r2, [pc, #488]	; (8007eac <HAL_RCC_OscConfig+0x26c>)
 8007cc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007cc8:	6013      	str	r3, [r2, #0]
 8007cca:	4b78      	ldr	r3, [pc, #480]	; (8007eac <HAL_RCC_OscConfig+0x26c>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a77      	ldr	r2, [pc, #476]	; (8007eac <HAL_RCC_OscConfig+0x26c>)
 8007cd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007cd4:	6013      	str	r3, [r2, #0]
 8007cd6:	e01d      	b.n	8007d14 <HAL_RCC_OscConfig+0xd4>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007ce0:	d10c      	bne.n	8007cfc <HAL_RCC_OscConfig+0xbc>
 8007ce2:	4b72      	ldr	r3, [pc, #456]	; (8007eac <HAL_RCC_OscConfig+0x26c>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a71      	ldr	r2, [pc, #452]	; (8007eac <HAL_RCC_OscConfig+0x26c>)
 8007ce8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007cec:	6013      	str	r3, [r2, #0]
 8007cee:	4b6f      	ldr	r3, [pc, #444]	; (8007eac <HAL_RCC_OscConfig+0x26c>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a6e      	ldr	r2, [pc, #440]	; (8007eac <HAL_RCC_OscConfig+0x26c>)
 8007cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007cf8:	6013      	str	r3, [r2, #0]
 8007cfa:	e00b      	b.n	8007d14 <HAL_RCC_OscConfig+0xd4>
 8007cfc:	4b6b      	ldr	r3, [pc, #428]	; (8007eac <HAL_RCC_OscConfig+0x26c>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a6a      	ldr	r2, [pc, #424]	; (8007eac <HAL_RCC_OscConfig+0x26c>)
 8007d02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d06:	6013      	str	r3, [r2, #0]
 8007d08:	4b68      	ldr	r3, [pc, #416]	; (8007eac <HAL_RCC_OscConfig+0x26c>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a67      	ldr	r2, [pc, #412]	; (8007eac <HAL_RCC_OscConfig+0x26c>)
 8007d0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d12:	6013      	str	r3, [r2, #0]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d013      	beq.n	8007d44 <HAL_RCC_OscConfig+0x104>
 8007d1c:	f7fd fdba 	bl	8005894 <HAL_GetTick>
 8007d20:	6138      	str	r0, [r7, #16]
 8007d22:	e008      	b.n	8007d36 <HAL_RCC_OscConfig+0xf6>
 8007d24:	f7fd fdb6 	bl	8005894 <HAL_GetTick>
 8007d28:	4602      	mov	r2, r0
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	1ad3      	subs	r3, r2, r3
 8007d2e:	2b64      	cmp	r3, #100	; 0x64
 8007d30:	d901      	bls.n	8007d36 <HAL_RCC_OscConfig+0xf6>
 8007d32:	2303      	movs	r3, #3
 8007d34:	e200      	b.n	8008138 <HAL_RCC_OscConfig+0x4f8>
 8007d36:	4b5d      	ldr	r3, [pc, #372]	; (8007eac <HAL_RCC_OscConfig+0x26c>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d0f0      	beq.n	8007d24 <HAL_RCC_OscConfig+0xe4>
 8007d42:	e014      	b.n	8007d6e <HAL_RCC_OscConfig+0x12e>
 8007d44:	f7fd fda6 	bl	8005894 <HAL_GetTick>
 8007d48:	6138      	str	r0, [r7, #16]
 8007d4a:	e008      	b.n	8007d5e <HAL_RCC_OscConfig+0x11e>
 8007d4c:	f7fd fda2 	bl	8005894 <HAL_GetTick>
 8007d50:	4602      	mov	r2, r0
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	1ad3      	subs	r3, r2, r3
 8007d56:	2b64      	cmp	r3, #100	; 0x64
 8007d58:	d901      	bls.n	8007d5e <HAL_RCC_OscConfig+0x11e>
 8007d5a:	2303      	movs	r3, #3
 8007d5c:	e1ec      	b.n	8008138 <HAL_RCC_OscConfig+0x4f8>
 8007d5e:	4b53      	ldr	r3, [pc, #332]	; (8007eac <HAL_RCC_OscConfig+0x26c>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d1f0      	bne.n	8007d4c <HAL_RCC_OscConfig+0x10c>
 8007d6a:	e000      	b.n	8007d6e <HAL_RCC_OscConfig+0x12e>
 8007d6c:	bf00      	nop
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f003 0302 	and.w	r3, r3, #2
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d063      	beq.n	8007e42 <HAL_RCC_OscConfig+0x202>
 8007d7a:	4b4c      	ldr	r3, [pc, #304]	; (8007eac <HAL_RCC_OscConfig+0x26c>)
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	f003 030c 	and.w	r3, r3, #12
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d00b      	beq.n	8007d9e <HAL_RCC_OscConfig+0x15e>
 8007d86:	4b49      	ldr	r3, [pc, #292]	; (8007eac <HAL_RCC_OscConfig+0x26c>)
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	f003 030c 	and.w	r3, r3, #12
 8007d8e:	2b08      	cmp	r3, #8
 8007d90:	d11c      	bne.n	8007dcc <HAL_RCC_OscConfig+0x18c>
 8007d92:	4b46      	ldr	r3, [pc, #280]	; (8007eac <HAL_RCC_OscConfig+0x26c>)
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d116      	bne.n	8007dcc <HAL_RCC_OscConfig+0x18c>
 8007d9e:	4b43      	ldr	r3, [pc, #268]	; (8007eac <HAL_RCC_OscConfig+0x26c>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f003 0302 	and.w	r3, r3, #2
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d005      	beq.n	8007db6 <HAL_RCC_OscConfig+0x176>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	691b      	ldr	r3, [r3, #16]
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	d001      	beq.n	8007db6 <HAL_RCC_OscConfig+0x176>
 8007db2:	2301      	movs	r3, #1
 8007db4:	e1c0      	b.n	8008138 <HAL_RCC_OscConfig+0x4f8>
 8007db6:	4b3d      	ldr	r3, [pc, #244]	; (8007eac <HAL_RCC_OscConfig+0x26c>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	695b      	ldr	r3, [r3, #20]
 8007dc2:	00db      	lsls	r3, r3, #3
 8007dc4:	4939      	ldr	r1, [pc, #228]	; (8007eac <HAL_RCC_OscConfig+0x26c>)
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	600b      	str	r3, [r1, #0]
 8007dca:	e03a      	b.n	8007e42 <HAL_RCC_OscConfig+0x202>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	691b      	ldr	r3, [r3, #16]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d020      	beq.n	8007e16 <HAL_RCC_OscConfig+0x1d6>
 8007dd4:	4b36      	ldr	r3, [pc, #216]	; (8007eb0 <HAL_RCC_OscConfig+0x270>)
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	601a      	str	r2, [r3, #0]
 8007dda:	f7fd fd5b 	bl	8005894 <HAL_GetTick>
 8007dde:	6138      	str	r0, [r7, #16]
 8007de0:	e008      	b.n	8007df4 <HAL_RCC_OscConfig+0x1b4>
 8007de2:	f7fd fd57 	bl	8005894 <HAL_GetTick>
 8007de6:	4602      	mov	r2, r0
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	1ad3      	subs	r3, r2, r3
 8007dec:	2b02      	cmp	r3, #2
 8007dee:	d901      	bls.n	8007df4 <HAL_RCC_OscConfig+0x1b4>
 8007df0:	2303      	movs	r3, #3
 8007df2:	e1a1      	b.n	8008138 <HAL_RCC_OscConfig+0x4f8>
 8007df4:	4b2d      	ldr	r3, [pc, #180]	; (8007eac <HAL_RCC_OscConfig+0x26c>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f003 0302 	and.w	r3, r3, #2
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d0f0      	beq.n	8007de2 <HAL_RCC_OscConfig+0x1a2>
 8007e00:	4b2a      	ldr	r3, [pc, #168]	; (8007eac <HAL_RCC_OscConfig+0x26c>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	695b      	ldr	r3, [r3, #20]
 8007e0c:	00db      	lsls	r3, r3, #3
 8007e0e:	4927      	ldr	r1, [pc, #156]	; (8007eac <HAL_RCC_OscConfig+0x26c>)
 8007e10:	4313      	orrs	r3, r2
 8007e12:	600b      	str	r3, [r1, #0]
 8007e14:	e015      	b.n	8007e42 <HAL_RCC_OscConfig+0x202>
 8007e16:	4b26      	ldr	r3, [pc, #152]	; (8007eb0 <HAL_RCC_OscConfig+0x270>)
 8007e18:	2200      	movs	r2, #0
 8007e1a:	601a      	str	r2, [r3, #0]
 8007e1c:	f7fd fd3a 	bl	8005894 <HAL_GetTick>
 8007e20:	6138      	str	r0, [r7, #16]
 8007e22:	e008      	b.n	8007e36 <HAL_RCC_OscConfig+0x1f6>
 8007e24:	f7fd fd36 	bl	8005894 <HAL_GetTick>
 8007e28:	4602      	mov	r2, r0
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	1ad3      	subs	r3, r2, r3
 8007e2e:	2b02      	cmp	r3, #2
 8007e30:	d901      	bls.n	8007e36 <HAL_RCC_OscConfig+0x1f6>
 8007e32:	2303      	movs	r3, #3
 8007e34:	e180      	b.n	8008138 <HAL_RCC_OscConfig+0x4f8>
 8007e36:	4b1d      	ldr	r3, [pc, #116]	; (8007eac <HAL_RCC_OscConfig+0x26c>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f003 0302 	and.w	r3, r3, #2
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d1f0      	bne.n	8007e24 <HAL_RCC_OscConfig+0x1e4>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f003 0308 	and.w	r3, r3, #8
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d03a      	beq.n	8007ec4 <HAL_RCC_OscConfig+0x284>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	699b      	ldr	r3, [r3, #24]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d019      	beq.n	8007e8a <HAL_RCC_OscConfig+0x24a>
 8007e56:	4b17      	ldr	r3, [pc, #92]	; (8007eb4 <HAL_RCC_OscConfig+0x274>)
 8007e58:	2201      	movs	r2, #1
 8007e5a:	601a      	str	r2, [r3, #0]
 8007e5c:	f7fd fd1a 	bl	8005894 <HAL_GetTick>
 8007e60:	6138      	str	r0, [r7, #16]
 8007e62:	e008      	b.n	8007e76 <HAL_RCC_OscConfig+0x236>
 8007e64:	f7fd fd16 	bl	8005894 <HAL_GetTick>
 8007e68:	4602      	mov	r2, r0
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	1ad3      	subs	r3, r2, r3
 8007e6e:	2b02      	cmp	r3, #2
 8007e70:	d901      	bls.n	8007e76 <HAL_RCC_OscConfig+0x236>
 8007e72:	2303      	movs	r3, #3
 8007e74:	e160      	b.n	8008138 <HAL_RCC_OscConfig+0x4f8>
 8007e76:	4b0d      	ldr	r3, [pc, #52]	; (8007eac <HAL_RCC_OscConfig+0x26c>)
 8007e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e7a:	f003 0302 	and.w	r3, r3, #2
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d0f0      	beq.n	8007e64 <HAL_RCC_OscConfig+0x224>
 8007e82:	2001      	movs	r0, #1
 8007e84:	f000 fac4 	bl	8008410 <RCC_Delay>
 8007e88:	e01c      	b.n	8007ec4 <HAL_RCC_OscConfig+0x284>
 8007e8a:	4b0a      	ldr	r3, [pc, #40]	; (8007eb4 <HAL_RCC_OscConfig+0x274>)
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	601a      	str	r2, [r3, #0]
 8007e90:	f7fd fd00 	bl	8005894 <HAL_GetTick>
 8007e94:	6138      	str	r0, [r7, #16]
 8007e96:	e00f      	b.n	8007eb8 <HAL_RCC_OscConfig+0x278>
 8007e98:	f7fd fcfc 	bl	8005894 <HAL_GetTick>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	1ad3      	subs	r3, r2, r3
 8007ea2:	2b02      	cmp	r3, #2
 8007ea4:	d908      	bls.n	8007eb8 <HAL_RCC_OscConfig+0x278>
 8007ea6:	2303      	movs	r3, #3
 8007ea8:	e146      	b.n	8008138 <HAL_RCC_OscConfig+0x4f8>
 8007eaa:	bf00      	nop
 8007eac:	40021000 	.word	0x40021000
 8007eb0:	42420000 	.word	0x42420000
 8007eb4:	42420480 	.word	0x42420480
 8007eb8:	4b92      	ldr	r3, [pc, #584]	; (8008104 <HAL_RCC_OscConfig+0x4c4>)
 8007eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ebc:	f003 0302 	and.w	r3, r3, #2
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d1e9      	bne.n	8007e98 <HAL_RCC_OscConfig+0x258>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f003 0304 	and.w	r3, r3, #4
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	f000 80a6 	beq.w	800801e <HAL_RCC_OscConfig+0x3de>
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	75fb      	strb	r3, [r7, #23]
 8007ed6:	4b8b      	ldr	r3, [pc, #556]	; (8008104 <HAL_RCC_OscConfig+0x4c4>)
 8007ed8:	69db      	ldr	r3, [r3, #28]
 8007eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d10d      	bne.n	8007efe <HAL_RCC_OscConfig+0x2be>
 8007ee2:	4b88      	ldr	r3, [pc, #544]	; (8008104 <HAL_RCC_OscConfig+0x4c4>)
 8007ee4:	69db      	ldr	r3, [r3, #28]
 8007ee6:	4a87      	ldr	r2, [pc, #540]	; (8008104 <HAL_RCC_OscConfig+0x4c4>)
 8007ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007eec:	61d3      	str	r3, [r2, #28]
 8007eee:	4b85      	ldr	r3, [pc, #532]	; (8008104 <HAL_RCC_OscConfig+0x4c4>)
 8007ef0:	69db      	ldr	r3, [r3, #28]
 8007ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ef6:	60bb      	str	r3, [r7, #8]
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	2301      	movs	r3, #1
 8007efc:	75fb      	strb	r3, [r7, #23]
 8007efe:	4b82      	ldr	r3, [pc, #520]	; (8008108 <HAL_RCC_OscConfig+0x4c8>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d118      	bne.n	8007f3c <HAL_RCC_OscConfig+0x2fc>
 8007f0a:	4b7f      	ldr	r3, [pc, #508]	; (8008108 <HAL_RCC_OscConfig+0x4c8>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a7e      	ldr	r2, [pc, #504]	; (8008108 <HAL_RCC_OscConfig+0x4c8>)
 8007f10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f14:	6013      	str	r3, [r2, #0]
 8007f16:	f7fd fcbd 	bl	8005894 <HAL_GetTick>
 8007f1a:	6138      	str	r0, [r7, #16]
 8007f1c:	e008      	b.n	8007f30 <HAL_RCC_OscConfig+0x2f0>
 8007f1e:	f7fd fcb9 	bl	8005894 <HAL_GetTick>
 8007f22:	4602      	mov	r2, r0
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	1ad3      	subs	r3, r2, r3
 8007f28:	2b64      	cmp	r3, #100	; 0x64
 8007f2a:	d901      	bls.n	8007f30 <HAL_RCC_OscConfig+0x2f0>
 8007f2c:	2303      	movs	r3, #3
 8007f2e:	e103      	b.n	8008138 <HAL_RCC_OscConfig+0x4f8>
 8007f30:	4b75      	ldr	r3, [pc, #468]	; (8008108 <HAL_RCC_OscConfig+0x4c8>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d0f0      	beq.n	8007f1e <HAL_RCC_OscConfig+0x2de>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	68db      	ldr	r3, [r3, #12]
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d106      	bne.n	8007f52 <HAL_RCC_OscConfig+0x312>
 8007f44:	4b6f      	ldr	r3, [pc, #444]	; (8008104 <HAL_RCC_OscConfig+0x4c4>)
 8007f46:	6a1b      	ldr	r3, [r3, #32]
 8007f48:	4a6e      	ldr	r2, [pc, #440]	; (8008104 <HAL_RCC_OscConfig+0x4c4>)
 8007f4a:	f043 0301 	orr.w	r3, r3, #1
 8007f4e:	6213      	str	r3, [r2, #32]
 8007f50:	e02d      	b.n	8007fae <HAL_RCC_OscConfig+0x36e>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	68db      	ldr	r3, [r3, #12]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d10c      	bne.n	8007f74 <HAL_RCC_OscConfig+0x334>
 8007f5a:	4b6a      	ldr	r3, [pc, #424]	; (8008104 <HAL_RCC_OscConfig+0x4c4>)
 8007f5c:	6a1b      	ldr	r3, [r3, #32]
 8007f5e:	4a69      	ldr	r2, [pc, #420]	; (8008104 <HAL_RCC_OscConfig+0x4c4>)
 8007f60:	f023 0301 	bic.w	r3, r3, #1
 8007f64:	6213      	str	r3, [r2, #32]
 8007f66:	4b67      	ldr	r3, [pc, #412]	; (8008104 <HAL_RCC_OscConfig+0x4c4>)
 8007f68:	6a1b      	ldr	r3, [r3, #32]
 8007f6a:	4a66      	ldr	r2, [pc, #408]	; (8008104 <HAL_RCC_OscConfig+0x4c4>)
 8007f6c:	f023 0304 	bic.w	r3, r3, #4
 8007f70:	6213      	str	r3, [r2, #32]
 8007f72:	e01c      	b.n	8007fae <HAL_RCC_OscConfig+0x36e>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	68db      	ldr	r3, [r3, #12]
 8007f78:	2b05      	cmp	r3, #5
 8007f7a:	d10c      	bne.n	8007f96 <HAL_RCC_OscConfig+0x356>
 8007f7c:	4b61      	ldr	r3, [pc, #388]	; (8008104 <HAL_RCC_OscConfig+0x4c4>)
 8007f7e:	6a1b      	ldr	r3, [r3, #32]
 8007f80:	4a60      	ldr	r2, [pc, #384]	; (8008104 <HAL_RCC_OscConfig+0x4c4>)
 8007f82:	f043 0304 	orr.w	r3, r3, #4
 8007f86:	6213      	str	r3, [r2, #32]
 8007f88:	4b5e      	ldr	r3, [pc, #376]	; (8008104 <HAL_RCC_OscConfig+0x4c4>)
 8007f8a:	6a1b      	ldr	r3, [r3, #32]
 8007f8c:	4a5d      	ldr	r2, [pc, #372]	; (8008104 <HAL_RCC_OscConfig+0x4c4>)
 8007f8e:	f043 0301 	orr.w	r3, r3, #1
 8007f92:	6213      	str	r3, [r2, #32]
 8007f94:	e00b      	b.n	8007fae <HAL_RCC_OscConfig+0x36e>
 8007f96:	4b5b      	ldr	r3, [pc, #364]	; (8008104 <HAL_RCC_OscConfig+0x4c4>)
 8007f98:	6a1b      	ldr	r3, [r3, #32]
 8007f9a:	4a5a      	ldr	r2, [pc, #360]	; (8008104 <HAL_RCC_OscConfig+0x4c4>)
 8007f9c:	f023 0301 	bic.w	r3, r3, #1
 8007fa0:	6213      	str	r3, [r2, #32]
 8007fa2:	4b58      	ldr	r3, [pc, #352]	; (8008104 <HAL_RCC_OscConfig+0x4c4>)
 8007fa4:	6a1b      	ldr	r3, [r3, #32]
 8007fa6:	4a57      	ldr	r2, [pc, #348]	; (8008104 <HAL_RCC_OscConfig+0x4c4>)
 8007fa8:	f023 0304 	bic.w	r3, r3, #4
 8007fac:	6213      	str	r3, [r2, #32]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	68db      	ldr	r3, [r3, #12]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d015      	beq.n	8007fe2 <HAL_RCC_OscConfig+0x3a2>
 8007fb6:	f7fd fc6d 	bl	8005894 <HAL_GetTick>
 8007fba:	6138      	str	r0, [r7, #16]
 8007fbc:	e00a      	b.n	8007fd4 <HAL_RCC_OscConfig+0x394>
 8007fbe:	f7fd fc69 	bl	8005894 <HAL_GetTick>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	1ad3      	subs	r3, r2, r3
 8007fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d901      	bls.n	8007fd4 <HAL_RCC_OscConfig+0x394>
 8007fd0:	2303      	movs	r3, #3
 8007fd2:	e0b1      	b.n	8008138 <HAL_RCC_OscConfig+0x4f8>
 8007fd4:	4b4b      	ldr	r3, [pc, #300]	; (8008104 <HAL_RCC_OscConfig+0x4c4>)
 8007fd6:	6a1b      	ldr	r3, [r3, #32]
 8007fd8:	f003 0302 	and.w	r3, r3, #2
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d0ee      	beq.n	8007fbe <HAL_RCC_OscConfig+0x37e>
 8007fe0:	e014      	b.n	800800c <HAL_RCC_OscConfig+0x3cc>
 8007fe2:	f7fd fc57 	bl	8005894 <HAL_GetTick>
 8007fe6:	6138      	str	r0, [r7, #16]
 8007fe8:	e00a      	b.n	8008000 <HAL_RCC_OscConfig+0x3c0>
 8007fea:	f7fd fc53 	bl	8005894 <HAL_GetTick>
 8007fee:	4602      	mov	r2, r0
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	1ad3      	subs	r3, r2, r3
 8007ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d901      	bls.n	8008000 <HAL_RCC_OscConfig+0x3c0>
 8007ffc:	2303      	movs	r3, #3
 8007ffe:	e09b      	b.n	8008138 <HAL_RCC_OscConfig+0x4f8>
 8008000:	4b40      	ldr	r3, [pc, #256]	; (8008104 <HAL_RCC_OscConfig+0x4c4>)
 8008002:	6a1b      	ldr	r3, [r3, #32]
 8008004:	f003 0302 	and.w	r3, r3, #2
 8008008:	2b00      	cmp	r3, #0
 800800a:	d1ee      	bne.n	8007fea <HAL_RCC_OscConfig+0x3aa>
 800800c:	7dfb      	ldrb	r3, [r7, #23]
 800800e:	2b01      	cmp	r3, #1
 8008010:	d105      	bne.n	800801e <HAL_RCC_OscConfig+0x3de>
 8008012:	4b3c      	ldr	r3, [pc, #240]	; (8008104 <HAL_RCC_OscConfig+0x4c4>)
 8008014:	69db      	ldr	r3, [r3, #28]
 8008016:	4a3b      	ldr	r2, [pc, #236]	; (8008104 <HAL_RCC_OscConfig+0x4c4>)
 8008018:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800801c:	61d3      	str	r3, [r2, #28]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	69db      	ldr	r3, [r3, #28]
 8008022:	2b00      	cmp	r3, #0
 8008024:	f000 8087 	beq.w	8008136 <HAL_RCC_OscConfig+0x4f6>
 8008028:	4b36      	ldr	r3, [pc, #216]	; (8008104 <HAL_RCC_OscConfig+0x4c4>)
 800802a:	685b      	ldr	r3, [r3, #4]
 800802c:	f003 030c 	and.w	r3, r3, #12
 8008030:	2b08      	cmp	r3, #8
 8008032:	d061      	beq.n	80080f8 <HAL_RCC_OscConfig+0x4b8>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	69db      	ldr	r3, [r3, #28]
 8008038:	2b02      	cmp	r3, #2
 800803a:	d146      	bne.n	80080ca <HAL_RCC_OscConfig+0x48a>
 800803c:	4b33      	ldr	r3, [pc, #204]	; (800810c <HAL_RCC_OscConfig+0x4cc>)
 800803e:	2200      	movs	r2, #0
 8008040:	601a      	str	r2, [r3, #0]
 8008042:	f7fd fc27 	bl	8005894 <HAL_GetTick>
 8008046:	6138      	str	r0, [r7, #16]
 8008048:	e008      	b.n	800805c <HAL_RCC_OscConfig+0x41c>
 800804a:	f7fd fc23 	bl	8005894 <HAL_GetTick>
 800804e:	4602      	mov	r2, r0
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	1ad3      	subs	r3, r2, r3
 8008054:	2b02      	cmp	r3, #2
 8008056:	d901      	bls.n	800805c <HAL_RCC_OscConfig+0x41c>
 8008058:	2303      	movs	r3, #3
 800805a:	e06d      	b.n	8008138 <HAL_RCC_OscConfig+0x4f8>
 800805c:	4b29      	ldr	r3, [pc, #164]	; (8008104 <HAL_RCC_OscConfig+0x4c4>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008064:	2b00      	cmp	r3, #0
 8008066:	d1f0      	bne.n	800804a <HAL_RCC_OscConfig+0x40a>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6a1b      	ldr	r3, [r3, #32]
 800806c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008070:	d108      	bne.n	8008084 <HAL_RCC_OscConfig+0x444>
 8008072:	4b24      	ldr	r3, [pc, #144]	; (8008104 <HAL_RCC_OscConfig+0x4c4>)
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	4921      	ldr	r1, [pc, #132]	; (8008104 <HAL_RCC_OscConfig+0x4c4>)
 8008080:	4313      	orrs	r3, r2
 8008082:	604b      	str	r3, [r1, #4]
 8008084:	4b1f      	ldr	r3, [pc, #124]	; (8008104 <HAL_RCC_OscConfig+0x4c4>)
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6a19      	ldr	r1, [r3, #32]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008094:	430b      	orrs	r3, r1
 8008096:	491b      	ldr	r1, [pc, #108]	; (8008104 <HAL_RCC_OscConfig+0x4c4>)
 8008098:	4313      	orrs	r3, r2
 800809a:	604b      	str	r3, [r1, #4]
 800809c:	4b1b      	ldr	r3, [pc, #108]	; (800810c <HAL_RCC_OscConfig+0x4cc>)
 800809e:	2201      	movs	r2, #1
 80080a0:	601a      	str	r2, [r3, #0]
 80080a2:	f7fd fbf7 	bl	8005894 <HAL_GetTick>
 80080a6:	6138      	str	r0, [r7, #16]
 80080a8:	e008      	b.n	80080bc <HAL_RCC_OscConfig+0x47c>
 80080aa:	f7fd fbf3 	bl	8005894 <HAL_GetTick>
 80080ae:	4602      	mov	r2, r0
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	1ad3      	subs	r3, r2, r3
 80080b4:	2b02      	cmp	r3, #2
 80080b6:	d901      	bls.n	80080bc <HAL_RCC_OscConfig+0x47c>
 80080b8:	2303      	movs	r3, #3
 80080ba:	e03d      	b.n	8008138 <HAL_RCC_OscConfig+0x4f8>
 80080bc:	4b11      	ldr	r3, [pc, #68]	; (8008104 <HAL_RCC_OscConfig+0x4c4>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d0f0      	beq.n	80080aa <HAL_RCC_OscConfig+0x46a>
 80080c8:	e035      	b.n	8008136 <HAL_RCC_OscConfig+0x4f6>
 80080ca:	4b10      	ldr	r3, [pc, #64]	; (800810c <HAL_RCC_OscConfig+0x4cc>)
 80080cc:	2200      	movs	r2, #0
 80080ce:	601a      	str	r2, [r3, #0]
 80080d0:	f7fd fbe0 	bl	8005894 <HAL_GetTick>
 80080d4:	6138      	str	r0, [r7, #16]
 80080d6:	e008      	b.n	80080ea <HAL_RCC_OscConfig+0x4aa>
 80080d8:	f7fd fbdc 	bl	8005894 <HAL_GetTick>
 80080dc:	4602      	mov	r2, r0
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	1ad3      	subs	r3, r2, r3
 80080e2:	2b02      	cmp	r3, #2
 80080e4:	d901      	bls.n	80080ea <HAL_RCC_OscConfig+0x4aa>
 80080e6:	2303      	movs	r3, #3
 80080e8:	e026      	b.n	8008138 <HAL_RCC_OscConfig+0x4f8>
 80080ea:	4b06      	ldr	r3, [pc, #24]	; (8008104 <HAL_RCC_OscConfig+0x4c4>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d1f0      	bne.n	80080d8 <HAL_RCC_OscConfig+0x498>
 80080f6:	e01e      	b.n	8008136 <HAL_RCC_OscConfig+0x4f6>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	69db      	ldr	r3, [r3, #28]
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d107      	bne.n	8008110 <HAL_RCC_OscConfig+0x4d0>
 8008100:	2301      	movs	r3, #1
 8008102:	e019      	b.n	8008138 <HAL_RCC_OscConfig+0x4f8>
 8008104:	40021000 	.word	0x40021000
 8008108:	40007000 	.word	0x40007000
 800810c:	42420060 	.word	0x42420060
 8008110:	4b0b      	ldr	r3, [pc, #44]	; (8008140 <HAL_RCC_OscConfig+0x500>)
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	60fb      	str	r3, [r7, #12]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6a1b      	ldr	r3, [r3, #32]
 8008120:	429a      	cmp	r2, r3
 8008122:	d106      	bne.n	8008132 <HAL_RCC_OscConfig+0x4f2>
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800812e:	429a      	cmp	r2, r3
 8008130:	d001      	beq.n	8008136 <HAL_RCC_OscConfig+0x4f6>
 8008132:	2301      	movs	r3, #1
 8008134:	e000      	b.n	8008138 <HAL_RCC_OscConfig+0x4f8>
 8008136:	2300      	movs	r3, #0
 8008138:	4618      	mov	r0, r3
 800813a:	3718      	adds	r7, #24
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}
 8008140:	40021000 	.word	0x40021000

08008144 <HAL_RCC_ClockConfig>:
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	6039      	str	r1, [r7, #0]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d101      	bne.n	8008158 <HAL_RCC_ClockConfig+0x14>
 8008154:	2301      	movs	r3, #1
 8008156:	e0d0      	b.n	80082fa <HAL_RCC_ClockConfig+0x1b6>
 8008158:	4b6a      	ldr	r3, [pc, #424]	; (8008304 <HAL_RCC_ClockConfig+0x1c0>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f003 0307 	and.w	r3, r3, #7
 8008160:	683a      	ldr	r2, [r7, #0]
 8008162:	429a      	cmp	r2, r3
 8008164:	d910      	bls.n	8008188 <HAL_RCC_ClockConfig+0x44>
 8008166:	4b67      	ldr	r3, [pc, #412]	; (8008304 <HAL_RCC_ClockConfig+0x1c0>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f023 0207 	bic.w	r2, r3, #7
 800816e:	4965      	ldr	r1, [pc, #404]	; (8008304 <HAL_RCC_ClockConfig+0x1c0>)
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	4313      	orrs	r3, r2
 8008174:	600b      	str	r3, [r1, #0]
 8008176:	4b63      	ldr	r3, [pc, #396]	; (8008304 <HAL_RCC_ClockConfig+0x1c0>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f003 0307 	and.w	r3, r3, #7
 800817e:	683a      	ldr	r2, [r7, #0]
 8008180:	429a      	cmp	r2, r3
 8008182:	d001      	beq.n	8008188 <HAL_RCC_ClockConfig+0x44>
 8008184:	2301      	movs	r3, #1
 8008186:	e0b8      	b.n	80082fa <HAL_RCC_ClockConfig+0x1b6>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f003 0302 	and.w	r3, r3, #2
 8008190:	2b00      	cmp	r3, #0
 8008192:	d020      	beq.n	80081d6 <HAL_RCC_ClockConfig+0x92>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f003 0304 	and.w	r3, r3, #4
 800819c:	2b00      	cmp	r3, #0
 800819e:	d005      	beq.n	80081ac <HAL_RCC_ClockConfig+0x68>
 80081a0:	4b59      	ldr	r3, [pc, #356]	; (8008308 <HAL_RCC_ClockConfig+0x1c4>)
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	4a58      	ldr	r2, [pc, #352]	; (8008308 <HAL_RCC_ClockConfig+0x1c4>)
 80081a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80081aa:	6053      	str	r3, [r2, #4]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f003 0308 	and.w	r3, r3, #8
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d005      	beq.n	80081c4 <HAL_RCC_ClockConfig+0x80>
 80081b8:	4b53      	ldr	r3, [pc, #332]	; (8008308 <HAL_RCC_ClockConfig+0x1c4>)
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	4a52      	ldr	r2, [pc, #328]	; (8008308 <HAL_RCC_ClockConfig+0x1c4>)
 80081be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80081c2:	6053      	str	r3, [r2, #4]
 80081c4:	4b50      	ldr	r3, [pc, #320]	; (8008308 <HAL_RCC_ClockConfig+0x1c4>)
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	689b      	ldr	r3, [r3, #8]
 80081d0:	494d      	ldr	r1, [pc, #308]	; (8008308 <HAL_RCC_ClockConfig+0x1c4>)
 80081d2:	4313      	orrs	r3, r2
 80081d4:	604b      	str	r3, [r1, #4]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f003 0301 	and.w	r3, r3, #1
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d040      	beq.n	8008264 <HAL_RCC_ClockConfig+0x120>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d107      	bne.n	80081fa <HAL_RCC_ClockConfig+0xb6>
 80081ea:	4b47      	ldr	r3, [pc, #284]	; (8008308 <HAL_RCC_ClockConfig+0x1c4>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d115      	bne.n	8008222 <HAL_RCC_ClockConfig+0xde>
 80081f6:	2301      	movs	r3, #1
 80081f8:	e07f      	b.n	80082fa <HAL_RCC_ClockConfig+0x1b6>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	2b02      	cmp	r3, #2
 8008200:	d107      	bne.n	8008212 <HAL_RCC_ClockConfig+0xce>
 8008202:	4b41      	ldr	r3, [pc, #260]	; (8008308 <HAL_RCC_ClockConfig+0x1c4>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800820a:	2b00      	cmp	r3, #0
 800820c:	d109      	bne.n	8008222 <HAL_RCC_ClockConfig+0xde>
 800820e:	2301      	movs	r3, #1
 8008210:	e073      	b.n	80082fa <HAL_RCC_ClockConfig+0x1b6>
 8008212:	4b3d      	ldr	r3, [pc, #244]	; (8008308 <HAL_RCC_ClockConfig+0x1c4>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f003 0302 	and.w	r3, r3, #2
 800821a:	2b00      	cmp	r3, #0
 800821c:	d101      	bne.n	8008222 <HAL_RCC_ClockConfig+0xde>
 800821e:	2301      	movs	r3, #1
 8008220:	e06b      	b.n	80082fa <HAL_RCC_ClockConfig+0x1b6>
 8008222:	4b39      	ldr	r3, [pc, #228]	; (8008308 <HAL_RCC_ClockConfig+0x1c4>)
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	f023 0203 	bic.w	r2, r3, #3
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	4936      	ldr	r1, [pc, #216]	; (8008308 <HAL_RCC_ClockConfig+0x1c4>)
 8008230:	4313      	orrs	r3, r2
 8008232:	604b      	str	r3, [r1, #4]
 8008234:	f7fd fb2e 	bl	8005894 <HAL_GetTick>
 8008238:	60f8      	str	r0, [r7, #12]
 800823a:	e00a      	b.n	8008252 <HAL_RCC_ClockConfig+0x10e>
 800823c:	f7fd fb2a 	bl	8005894 <HAL_GetTick>
 8008240:	4602      	mov	r2, r0
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	1ad3      	subs	r3, r2, r3
 8008246:	f241 3288 	movw	r2, #5000	; 0x1388
 800824a:	4293      	cmp	r3, r2
 800824c:	d901      	bls.n	8008252 <HAL_RCC_ClockConfig+0x10e>
 800824e:	2303      	movs	r3, #3
 8008250:	e053      	b.n	80082fa <HAL_RCC_ClockConfig+0x1b6>
 8008252:	4b2d      	ldr	r3, [pc, #180]	; (8008308 <HAL_RCC_ClockConfig+0x1c4>)
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	f003 020c 	and.w	r2, r3, #12
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	009b      	lsls	r3, r3, #2
 8008260:	429a      	cmp	r2, r3
 8008262:	d1eb      	bne.n	800823c <HAL_RCC_ClockConfig+0xf8>
 8008264:	4b27      	ldr	r3, [pc, #156]	; (8008304 <HAL_RCC_ClockConfig+0x1c0>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f003 0307 	and.w	r3, r3, #7
 800826c:	683a      	ldr	r2, [r7, #0]
 800826e:	429a      	cmp	r2, r3
 8008270:	d210      	bcs.n	8008294 <HAL_RCC_ClockConfig+0x150>
 8008272:	4b24      	ldr	r3, [pc, #144]	; (8008304 <HAL_RCC_ClockConfig+0x1c0>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f023 0207 	bic.w	r2, r3, #7
 800827a:	4922      	ldr	r1, [pc, #136]	; (8008304 <HAL_RCC_ClockConfig+0x1c0>)
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	4313      	orrs	r3, r2
 8008280:	600b      	str	r3, [r1, #0]
 8008282:	4b20      	ldr	r3, [pc, #128]	; (8008304 <HAL_RCC_ClockConfig+0x1c0>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f003 0307 	and.w	r3, r3, #7
 800828a:	683a      	ldr	r2, [r7, #0]
 800828c:	429a      	cmp	r2, r3
 800828e:	d001      	beq.n	8008294 <HAL_RCC_ClockConfig+0x150>
 8008290:	2301      	movs	r3, #1
 8008292:	e032      	b.n	80082fa <HAL_RCC_ClockConfig+0x1b6>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f003 0304 	and.w	r3, r3, #4
 800829c:	2b00      	cmp	r3, #0
 800829e:	d008      	beq.n	80082b2 <HAL_RCC_ClockConfig+0x16e>
 80082a0:	4b19      	ldr	r3, [pc, #100]	; (8008308 <HAL_RCC_ClockConfig+0x1c4>)
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	4916      	ldr	r1, [pc, #88]	; (8008308 <HAL_RCC_ClockConfig+0x1c4>)
 80082ae:	4313      	orrs	r3, r2
 80082b0:	604b      	str	r3, [r1, #4]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f003 0308 	and.w	r3, r3, #8
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d009      	beq.n	80082d2 <HAL_RCC_ClockConfig+0x18e>
 80082be:	4b12      	ldr	r3, [pc, #72]	; (8008308 <HAL_RCC_ClockConfig+0x1c4>)
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	691b      	ldr	r3, [r3, #16]
 80082ca:	00db      	lsls	r3, r3, #3
 80082cc:	490e      	ldr	r1, [pc, #56]	; (8008308 <HAL_RCC_ClockConfig+0x1c4>)
 80082ce:	4313      	orrs	r3, r2
 80082d0:	604b      	str	r3, [r1, #4]
 80082d2:	f000 f821 	bl	8008318 <HAL_RCC_GetSysClockFreq>
 80082d6:	4602      	mov	r2, r0
 80082d8:	4b0b      	ldr	r3, [pc, #44]	; (8008308 <HAL_RCC_ClockConfig+0x1c4>)
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	091b      	lsrs	r3, r3, #4
 80082de:	f003 030f 	and.w	r3, r3, #15
 80082e2:	490a      	ldr	r1, [pc, #40]	; (800830c <HAL_RCC_ClockConfig+0x1c8>)
 80082e4:	5ccb      	ldrb	r3, [r1, r3]
 80082e6:	fa22 f303 	lsr.w	r3, r2, r3
 80082ea:	4a09      	ldr	r2, [pc, #36]	; (8008310 <HAL_RCC_ClockConfig+0x1cc>)
 80082ec:	6013      	str	r3, [r2, #0]
 80082ee:	4b09      	ldr	r3, [pc, #36]	; (8008314 <HAL_RCC_ClockConfig+0x1d0>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4618      	mov	r0, r3
 80082f4:	f7fd fa8c 	bl	8005810 <HAL_InitTick>
 80082f8:	2300      	movs	r3, #0
 80082fa:	4618      	mov	r0, r3
 80082fc:	3710      	adds	r7, #16
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
 8008302:	bf00      	nop
 8008304:	40022000 	.word	0x40022000
 8008308:	40021000 	.word	0x40021000
 800830c:	08009938 	.word	0x08009938
 8008310:	2000023c 	.word	0x2000023c
 8008314:	20000240 	.word	0x20000240

08008318 <HAL_RCC_GetSysClockFreq>:
 8008318:	b490      	push	{r4, r7}
 800831a:	b08a      	sub	sp, #40	; 0x28
 800831c:	af00      	add	r7, sp, #0
 800831e:	4b29      	ldr	r3, [pc, #164]	; (80083c4 <HAL_RCC_GetSysClockFreq+0xac>)
 8008320:	1d3c      	adds	r4, r7, #4
 8008322:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008324:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008328:	f240 2301 	movw	r3, #513	; 0x201
 800832c:	803b      	strh	r3, [r7, #0]
 800832e:	2300      	movs	r3, #0
 8008330:	61fb      	str	r3, [r7, #28]
 8008332:	2300      	movs	r3, #0
 8008334:	61bb      	str	r3, [r7, #24]
 8008336:	2300      	movs	r3, #0
 8008338:	627b      	str	r3, [r7, #36]	; 0x24
 800833a:	2300      	movs	r3, #0
 800833c:	617b      	str	r3, [r7, #20]
 800833e:	2300      	movs	r3, #0
 8008340:	623b      	str	r3, [r7, #32]
 8008342:	4b21      	ldr	r3, [pc, #132]	; (80083c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	61fb      	str	r3, [r7, #28]
 8008348:	69fb      	ldr	r3, [r7, #28]
 800834a:	f003 030c 	and.w	r3, r3, #12
 800834e:	2b04      	cmp	r3, #4
 8008350:	d002      	beq.n	8008358 <HAL_RCC_GetSysClockFreq+0x40>
 8008352:	2b08      	cmp	r3, #8
 8008354:	d003      	beq.n	800835e <HAL_RCC_GetSysClockFreq+0x46>
 8008356:	e02b      	b.n	80083b0 <HAL_RCC_GetSysClockFreq+0x98>
 8008358:	4b1c      	ldr	r3, [pc, #112]	; (80083cc <HAL_RCC_GetSysClockFreq+0xb4>)
 800835a:	623b      	str	r3, [r7, #32]
 800835c:	e02b      	b.n	80083b6 <HAL_RCC_GetSysClockFreq+0x9e>
 800835e:	69fb      	ldr	r3, [r7, #28]
 8008360:	0c9b      	lsrs	r3, r3, #18
 8008362:	f003 030f 	and.w	r3, r3, #15
 8008366:	3328      	adds	r3, #40	; 0x28
 8008368:	443b      	add	r3, r7
 800836a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800836e:	617b      	str	r3, [r7, #20]
 8008370:	69fb      	ldr	r3, [r7, #28]
 8008372:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008376:	2b00      	cmp	r3, #0
 8008378:	d012      	beq.n	80083a0 <HAL_RCC_GetSysClockFreq+0x88>
 800837a:	4b13      	ldr	r3, [pc, #76]	; (80083c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	0c5b      	lsrs	r3, r3, #17
 8008380:	f003 0301 	and.w	r3, r3, #1
 8008384:	3328      	adds	r3, #40	; 0x28
 8008386:	443b      	add	r3, r7
 8008388:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800838c:	61bb      	str	r3, [r7, #24]
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	4a0e      	ldr	r2, [pc, #56]	; (80083cc <HAL_RCC_GetSysClockFreq+0xb4>)
 8008392:	fb03 f202 	mul.w	r2, r3, r2
 8008396:	69bb      	ldr	r3, [r7, #24]
 8008398:	fbb2 f3f3 	udiv	r3, r2, r3
 800839c:	627b      	str	r3, [r7, #36]	; 0x24
 800839e:	e004      	b.n	80083aa <HAL_RCC_GetSysClockFreq+0x92>
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	4a0b      	ldr	r2, [pc, #44]	; (80083d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80083a4:	fb02 f303 	mul.w	r3, r2, r3
 80083a8:	627b      	str	r3, [r7, #36]	; 0x24
 80083aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ac:	623b      	str	r3, [r7, #32]
 80083ae:	e002      	b.n	80083b6 <HAL_RCC_GetSysClockFreq+0x9e>
 80083b0:	4b06      	ldr	r3, [pc, #24]	; (80083cc <HAL_RCC_GetSysClockFreq+0xb4>)
 80083b2:	623b      	str	r3, [r7, #32]
 80083b4:	bf00      	nop
 80083b6:	6a3b      	ldr	r3, [r7, #32]
 80083b8:	4618      	mov	r0, r3
 80083ba:	3728      	adds	r7, #40	; 0x28
 80083bc:	46bd      	mov	sp, r7
 80083be:	bc90      	pop	{r4, r7}
 80083c0:	4770      	bx	lr
 80083c2:	bf00      	nop
 80083c4:	08009928 	.word	0x08009928
 80083c8:	40021000 	.word	0x40021000
 80083cc:	007a1200 	.word	0x007a1200
 80083d0:	003d0900 	.word	0x003d0900

080083d4 <HAL_RCC_GetHCLKFreq>:
 80083d4:	b480      	push	{r7}
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	4b02      	ldr	r3, [pc, #8]	; (80083e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4618      	mov	r0, r3
 80083de:	46bd      	mov	sp, r7
 80083e0:	bc80      	pop	{r7}
 80083e2:	4770      	bx	lr
 80083e4:	2000023c 	.word	0x2000023c

080083e8 <HAL_RCC_GetPCLK1Freq>:
 80083e8:	b580      	push	{r7, lr}
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	f7ff fff2 	bl	80083d4 <HAL_RCC_GetHCLKFreq>
 80083f0:	4602      	mov	r2, r0
 80083f2:	4b05      	ldr	r3, [pc, #20]	; (8008408 <HAL_RCC_GetPCLK1Freq+0x20>)
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	0a1b      	lsrs	r3, r3, #8
 80083f8:	f003 0307 	and.w	r3, r3, #7
 80083fc:	4903      	ldr	r1, [pc, #12]	; (800840c <HAL_RCC_GetPCLK1Freq+0x24>)
 80083fe:	5ccb      	ldrb	r3, [r1, r3]
 8008400:	fa22 f303 	lsr.w	r3, r2, r3
 8008404:	4618      	mov	r0, r3
 8008406:	bd80      	pop	{r7, pc}
 8008408:	40021000 	.word	0x40021000
 800840c:	08009948 	.word	0x08009948

08008410 <RCC_Delay>:
 8008410:	b480      	push	{r7}
 8008412:	b085      	sub	sp, #20
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
 8008418:	4b0a      	ldr	r3, [pc, #40]	; (8008444 <RCC_Delay+0x34>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a0a      	ldr	r2, [pc, #40]	; (8008448 <RCC_Delay+0x38>)
 800841e:	fba2 2303 	umull	r2, r3, r2, r3
 8008422:	0a5b      	lsrs	r3, r3, #9
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	fb02 f303 	mul.w	r3, r2, r3
 800842a:	60fb      	str	r3, [r7, #12]
 800842c:	bf00      	nop
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	1e5a      	subs	r2, r3, #1
 8008432:	60fa      	str	r2, [r7, #12]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d1f9      	bne.n	800842c <RCC_Delay+0x1c>
 8008438:	bf00      	nop
 800843a:	bf00      	nop
 800843c:	3714      	adds	r7, #20
 800843e:	46bd      	mov	sp, r7
 8008440:	bc80      	pop	{r7}
 8008442:	4770      	bx	lr
 8008444:	2000023c 	.word	0x2000023c
 8008448:	10624dd3 	.word	0x10624dd3

0800844c <HAL_RCCEx_PeriphCLKConfig>:
 800844c:	b580      	push	{r7, lr}
 800844e:	b086      	sub	sp, #24
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	2300      	movs	r3, #0
 8008456:	613b      	str	r3, [r7, #16]
 8008458:	2300      	movs	r3, #0
 800845a:	60fb      	str	r3, [r7, #12]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f003 0301 	and.w	r3, r3, #1
 8008464:	2b00      	cmp	r3, #0
 8008466:	d07d      	beq.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8008468:	2300      	movs	r3, #0
 800846a:	75fb      	strb	r3, [r7, #23]
 800846c:	4b4f      	ldr	r3, [pc, #316]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800846e:	69db      	ldr	r3, [r3, #28]
 8008470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008474:	2b00      	cmp	r3, #0
 8008476:	d10d      	bne.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8008478:	4b4c      	ldr	r3, [pc, #304]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800847a:	69db      	ldr	r3, [r3, #28]
 800847c:	4a4b      	ldr	r2, [pc, #300]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800847e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008482:	61d3      	str	r3, [r2, #28]
 8008484:	4b49      	ldr	r3, [pc, #292]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008486:	69db      	ldr	r3, [r3, #28]
 8008488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800848c:	60bb      	str	r3, [r7, #8]
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	2301      	movs	r3, #1
 8008492:	75fb      	strb	r3, [r7, #23]
 8008494:	4b46      	ldr	r3, [pc, #280]	; (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800849c:	2b00      	cmp	r3, #0
 800849e:	d118      	bne.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0x86>
 80084a0:	4b43      	ldr	r3, [pc, #268]	; (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a42      	ldr	r2, [pc, #264]	; (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80084a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084aa:	6013      	str	r3, [r2, #0]
 80084ac:	f7fd f9f2 	bl	8005894 <HAL_GetTick>
 80084b0:	6138      	str	r0, [r7, #16]
 80084b2:	e008      	b.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80084b4:	f7fd f9ee 	bl	8005894 <HAL_GetTick>
 80084b8:	4602      	mov	r2, r0
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	1ad3      	subs	r3, r2, r3
 80084be:	2b64      	cmp	r3, #100	; 0x64
 80084c0:	d901      	bls.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80084c2:	2303      	movs	r3, #3
 80084c4:	e06d      	b.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
 80084c6:	4b3a      	ldr	r3, [pc, #232]	; (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d0f0      	beq.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80084d2:	4b36      	ldr	r3, [pc, #216]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80084d4:	6a1b      	ldr	r3, [r3, #32]
 80084d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084da:	60fb      	str	r3, [r7, #12]
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d02e      	beq.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084ea:	68fa      	ldr	r2, [r7, #12]
 80084ec:	429a      	cmp	r2, r3
 80084ee:	d027      	beq.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80084f0:	4b2e      	ldr	r3, [pc, #184]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80084f2:	6a1b      	ldr	r3, [r3, #32]
 80084f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084f8:	60fb      	str	r3, [r7, #12]
 80084fa:	4b2e      	ldr	r3, [pc, #184]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80084fc:	2201      	movs	r2, #1
 80084fe:	601a      	str	r2, [r3, #0]
 8008500:	4b2c      	ldr	r3, [pc, #176]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008502:	2200      	movs	r2, #0
 8008504:	601a      	str	r2, [r3, #0]
 8008506:	4a29      	ldr	r2, [pc, #164]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	6213      	str	r3, [r2, #32]
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f003 0301 	and.w	r3, r3, #1
 8008512:	2b00      	cmp	r3, #0
 8008514:	d014      	beq.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8008516:	f7fd f9bd 	bl	8005894 <HAL_GetTick>
 800851a:	6138      	str	r0, [r7, #16]
 800851c:	e00a      	b.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800851e:	f7fd f9b9 	bl	8005894 <HAL_GetTick>
 8008522:	4602      	mov	r2, r0
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	1ad3      	subs	r3, r2, r3
 8008528:	f241 3288 	movw	r2, #5000	; 0x1388
 800852c:	4293      	cmp	r3, r2
 800852e:	d901      	bls.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8008530:	2303      	movs	r3, #3
 8008532:	e036      	b.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
 8008534:	4b1d      	ldr	r3, [pc, #116]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008536:	6a1b      	ldr	r3, [r3, #32]
 8008538:	f003 0302 	and.w	r3, r3, #2
 800853c:	2b00      	cmp	r3, #0
 800853e:	d0ee      	beq.n	800851e <HAL_RCCEx_PeriphCLKConfig+0xd2>
 8008540:	4b1a      	ldr	r3, [pc, #104]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008542:	6a1b      	ldr	r3, [r3, #32]
 8008544:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	4917      	ldr	r1, [pc, #92]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800854e:	4313      	orrs	r3, r2
 8008550:	620b      	str	r3, [r1, #32]
 8008552:	7dfb      	ldrb	r3, [r7, #23]
 8008554:	2b01      	cmp	r3, #1
 8008556:	d105      	bne.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8008558:	4b14      	ldr	r3, [pc, #80]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800855a:	69db      	ldr	r3, [r3, #28]
 800855c:	4a13      	ldr	r2, [pc, #76]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800855e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008562:	61d3      	str	r3, [r2, #28]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f003 0302 	and.w	r3, r3, #2
 800856c:	2b00      	cmp	r3, #0
 800856e:	d008      	beq.n	8008582 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008570:	4b0e      	ldr	r3, [pc, #56]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	689b      	ldr	r3, [r3, #8]
 800857c:	490b      	ldr	r1, [pc, #44]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800857e:	4313      	orrs	r3, r2
 8008580:	604b      	str	r3, [r1, #4]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f003 0310 	and.w	r3, r3, #16
 800858a:	2b00      	cmp	r3, #0
 800858c:	d008      	beq.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800858e:	4b07      	ldr	r3, [pc, #28]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	68db      	ldr	r3, [r3, #12]
 800859a:	4904      	ldr	r1, [pc, #16]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800859c:	4313      	orrs	r3, r2
 800859e:	604b      	str	r3, [r1, #4]
 80085a0:	2300      	movs	r3, #0
 80085a2:	4618      	mov	r0, r3
 80085a4:	3718      	adds	r7, #24
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop
 80085ac:	40021000 	.word	0x40021000
 80085b0:	40007000 	.word	0x40007000
 80085b4:	42420440 	.word	0x42420440

080085b8 <HAL_TIM_Base_Init>:
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b082      	sub	sp, #8
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d101      	bne.n	80085ca <HAL_TIM_Base_Init+0x12>
 80085c6:	2301      	movs	r3, #1
 80085c8:	e041      	b.n	800864e <HAL_TIM_Base_Init+0x96>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085d0:	b2db      	uxtb	r3, r3
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d106      	bne.n	80085e4 <HAL_TIM_Base_Init+0x2c>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2200      	movs	r2, #0
 80085da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f7fc ff5e 	bl	80054a0 <HAL_TIM_Base_MspInit>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2202      	movs	r2, #2
 80085e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681a      	ldr	r2, [r3, #0]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	3304      	adds	r3, #4
 80085f4:	4619      	mov	r1, r3
 80085f6:	4610      	mov	r0, r2
 80085f8:	f000 fc8c 	bl	8008f14 <TIM_Base_SetConfig>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2201      	movs	r2, #1
 8008600:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2201      	movs	r2, #1
 8008608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2201      	movs	r2, #1
 8008610:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2201      	movs	r2, #1
 8008618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2201      	movs	r2, #1
 8008620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2201      	movs	r2, #1
 8008628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2201      	movs	r2, #1
 8008630:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2201      	movs	r2, #1
 8008638:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2201      	movs	r2, #1
 8008640:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2201      	movs	r2, #1
 8008648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800864c:	2300      	movs	r3, #0
 800864e:	4618      	mov	r0, r3
 8008650:	3708      	adds	r7, #8
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
	...

08008658 <HAL_TIM_Base_Start_IT>:
 8008658:	b480      	push	{r7}
 800865a:	b085      	sub	sp, #20
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008666:	b2db      	uxtb	r3, r3
 8008668:	2b01      	cmp	r3, #1
 800866a:	d001      	beq.n	8008670 <HAL_TIM_Base_Start_IT+0x18>
 800866c:	2301      	movs	r3, #1
 800866e:	e03a      	b.n	80086e6 <HAL_TIM_Base_Start_IT+0x8e>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2202      	movs	r2, #2
 8008674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	68da      	ldr	r2, [r3, #12]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f042 0201 	orr.w	r2, r2, #1
 8008686:	60da      	str	r2, [r3, #12]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a18      	ldr	r2, [pc, #96]	; (80086f0 <HAL_TIM_Base_Start_IT+0x98>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d00e      	beq.n	80086b0 <HAL_TIM_Base_Start_IT+0x58>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800869a:	d009      	beq.n	80086b0 <HAL_TIM_Base_Start_IT+0x58>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a14      	ldr	r2, [pc, #80]	; (80086f4 <HAL_TIM_Base_Start_IT+0x9c>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d004      	beq.n	80086b0 <HAL_TIM_Base_Start_IT+0x58>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a13      	ldr	r2, [pc, #76]	; (80086f8 <HAL_TIM_Base_Start_IT+0xa0>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d111      	bne.n	80086d4 <HAL_TIM_Base_Start_IT+0x7c>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	689b      	ldr	r3, [r3, #8]
 80086b6:	f003 0307 	and.w	r3, r3, #7
 80086ba:	60fb      	str	r3, [r7, #12]
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2b06      	cmp	r3, #6
 80086c0:	d010      	beq.n	80086e4 <HAL_TIM_Base_Start_IT+0x8c>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f042 0201 	orr.w	r2, r2, #1
 80086d0:	601a      	str	r2, [r3, #0]
 80086d2:	e007      	b.n	80086e4 <HAL_TIM_Base_Start_IT+0x8c>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f042 0201 	orr.w	r2, r2, #1
 80086e2:	601a      	str	r2, [r3, #0]
 80086e4:	2300      	movs	r3, #0
 80086e6:	4618      	mov	r0, r3
 80086e8:	3714      	adds	r7, #20
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bc80      	pop	{r7}
 80086ee:	4770      	bx	lr
 80086f0:	40012c00 	.word	0x40012c00
 80086f4:	40000400 	.word	0x40000400
 80086f8:	40000800 	.word	0x40000800

080086fc <HAL_TIM_PWM_Init>:
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b082      	sub	sp, #8
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d101      	bne.n	800870e <HAL_TIM_PWM_Init+0x12>
 800870a:	2301      	movs	r3, #1
 800870c:	e041      	b.n	8008792 <HAL_TIM_PWM_Init+0x96>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008714:	b2db      	uxtb	r3, r3
 8008716:	2b00      	cmp	r3, #0
 8008718:	d106      	bne.n	8008728 <HAL_TIM_PWM_Init+0x2c>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2200      	movs	r2, #0
 800871e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f000 f839 	bl	800879a <HAL_TIM_PWM_MspInit>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2202      	movs	r2, #2
 800872c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681a      	ldr	r2, [r3, #0]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	3304      	adds	r3, #4
 8008738:	4619      	mov	r1, r3
 800873a:	4610      	mov	r0, r2
 800873c:	f000 fbea 	bl	8008f14 <TIM_Base_SetConfig>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2201      	movs	r2, #1
 8008744:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2201      	movs	r2, #1
 800874c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2201      	movs	r2, #1
 8008754:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2201      	movs	r2, #1
 800875c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2201      	movs	r2, #1
 8008764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2201      	movs	r2, #1
 800876c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2201      	movs	r2, #1
 8008774:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2201      	movs	r2, #1
 800877c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2201      	movs	r2, #1
 8008784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2201      	movs	r2, #1
 800878c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008790:	2300      	movs	r3, #0
 8008792:	4618      	mov	r0, r3
 8008794:	3708      	adds	r7, #8
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}

0800879a <HAL_TIM_PWM_MspInit>:
 800879a:	b480      	push	{r7}
 800879c:	b083      	sub	sp, #12
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
 80087a2:	bf00      	nop
 80087a4:	370c      	adds	r7, #12
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bc80      	pop	{r7}
 80087aa:	4770      	bx	lr

080087ac <HAL_TIM_PWM_Start>:
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b084      	sub	sp, #16
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	6039      	str	r1, [r7, #0]
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d109      	bne.n	80087d0 <HAL_TIM_PWM_Start+0x24>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80087c2:	b2db      	uxtb	r3, r3
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	bf14      	ite	ne
 80087c8:	2301      	movne	r3, #1
 80087ca:	2300      	moveq	r3, #0
 80087cc:	b2db      	uxtb	r3, r3
 80087ce:	e022      	b.n	8008816 <HAL_TIM_PWM_Start+0x6a>
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	2b04      	cmp	r3, #4
 80087d4:	d109      	bne.n	80087ea <HAL_TIM_PWM_Start+0x3e>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	2b01      	cmp	r3, #1
 80087e0:	bf14      	ite	ne
 80087e2:	2301      	movne	r3, #1
 80087e4:	2300      	moveq	r3, #0
 80087e6:	b2db      	uxtb	r3, r3
 80087e8:	e015      	b.n	8008816 <HAL_TIM_PWM_Start+0x6a>
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	2b08      	cmp	r3, #8
 80087ee:	d109      	bne.n	8008804 <HAL_TIM_PWM_Start+0x58>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80087f6:	b2db      	uxtb	r3, r3
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	bf14      	ite	ne
 80087fc:	2301      	movne	r3, #1
 80087fe:	2300      	moveq	r3, #0
 8008800:	b2db      	uxtb	r3, r3
 8008802:	e008      	b.n	8008816 <HAL_TIM_PWM_Start+0x6a>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800880a:	b2db      	uxtb	r3, r3
 800880c:	2b01      	cmp	r3, #1
 800880e:	bf14      	ite	ne
 8008810:	2301      	movne	r3, #1
 8008812:	2300      	moveq	r3, #0
 8008814:	b2db      	uxtb	r3, r3
 8008816:	2b00      	cmp	r3, #0
 8008818:	d001      	beq.n	800881e <HAL_TIM_PWM_Start+0x72>
 800881a:	2301      	movs	r3, #1
 800881c:	e05e      	b.n	80088dc <HAL_TIM_PWM_Start+0x130>
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d104      	bne.n	800882e <HAL_TIM_PWM_Start+0x82>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2202      	movs	r2, #2
 8008828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800882c:	e013      	b.n	8008856 <HAL_TIM_PWM_Start+0xaa>
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	2b04      	cmp	r3, #4
 8008832:	d104      	bne.n	800883e <HAL_TIM_PWM_Start+0x92>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2202      	movs	r2, #2
 8008838:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800883c:	e00b      	b.n	8008856 <HAL_TIM_PWM_Start+0xaa>
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	2b08      	cmp	r3, #8
 8008842:	d104      	bne.n	800884e <HAL_TIM_PWM_Start+0xa2>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2202      	movs	r2, #2
 8008848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800884c:	e003      	b.n	8008856 <HAL_TIM_PWM_Start+0xaa>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2202      	movs	r2, #2
 8008852:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	2201      	movs	r2, #1
 800885c:	6839      	ldr	r1, [r7, #0]
 800885e:	4618      	mov	r0, r3
 8008860:	f000 fdd8 	bl	8009414 <TIM_CCxChannelCmd>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a1e      	ldr	r2, [pc, #120]	; (80088e4 <HAL_TIM_PWM_Start+0x138>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d107      	bne.n	800887e <HAL_TIM_PWM_Start+0xd2>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800887c:	645a      	str	r2, [r3, #68]	; 0x44
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4a18      	ldr	r2, [pc, #96]	; (80088e4 <HAL_TIM_PWM_Start+0x138>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d00e      	beq.n	80088a6 <HAL_TIM_PWM_Start+0xfa>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008890:	d009      	beq.n	80088a6 <HAL_TIM_PWM_Start+0xfa>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4a14      	ldr	r2, [pc, #80]	; (80088e8 <HAL_TIM_PWM_Start+0x13c>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d004      	beq.n	80088a6 <HAL_TIM_PWM_Start+0xfa>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4a12      	ldr	r2, [pc, #72]	; (80088ec <HAL_TIM_PWM_Start+0x140>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d111      	bne.n	80088ca <HAL_TIM_PWM_Start+0x11e>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	f003 0307 	and.w	r3, r3, #7
 80088b0:	60fb      	str	r3, [r7, #12]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2b06      	cmp	r3, #6
 80088b6:	d010      	beq.n	80088da <HAL_TIM_PWM_Start+0x12e>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	681a      	ldr	r2, [r3, #0]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f042 0201 	orr.w	r2, r2, #1
 80088c6:	601a      	str	r2, [r3, #0]
 80088c8:	e007      	b.n	80088da <HAL_TIM_PWM_Start+0x12e>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	681a      	ldr	r2, [r3, #0]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f042 0201 	orr.w	r2, r2, #1
 80088d8:	601a      	str	r2, [r3, #0]
 80088da:	2300      	movs	r3, #0
 80088dc:	4618      	mov	r0, r3
 80088de:	3710      	adds	r7, #16
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}
 80088e4:	40012c00 	.word	0x40012c00
 80088e8:	40000400 	.word	0x40000400
 80088ec:	40000800 	.word	0x40000800

080088f0 <HAL_TIM_PWM_Stop>:
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	6039      	str	r1, [r7, #0]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	2200      	movs	r2, #0
 8008900:	6839      	ldr	r1, [r7, #0]
 8008902:	4618      	mov	r0, r3
 8008904:	f000 fd86 	bl	8009414 <TIM_CCxChannelCmd>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a29      	ldr	r2, [pc, #164]	; (80089b4 <HAL_TIM_PWM_Stop+0xc4>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d117      	bne.n	8008942 <HAL_TIM_PWM_Stop+0x52>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	6a1a      	ldr	r2, [r3, #32]
 8008918:	f241 1311 	movw	r3, #4369	; 0x1111
 800891c:	4013      	ands	r3, r2
 800891e:	2b00      	cmp	r3, #0
 8008920:	d10f      	bne.n	8008942 <HAL_TIM_PWM_Stop+0x52>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	6a1a      	ldr	r2, [r3, #32]
 8008928:	f240 4344 	movw	r3, #1092	; 0x444
 800892c:	4013      	ands	r3, r2
 800892e:	2b00      	cmp	r3, #0
 8008930:	d107      	bne.n	8008942 <HAL_TIM_PWM_Stop+0x52>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008940:	645a      	str	r2, [r3, #68]	; 0x44
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	6a1a      	ldr	r2, [r3, #32]
 8008948:	f241 1311 	movw	r3, #4369	; 0x1111
 800894c:	4013      	ands	r3, r2
 800894e:	2b00      	cmp	r3, #0
 8008950:	d10f      	bne.n	8008972 <HAL_TIM_PWM_Stop+0x82>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	6a1a      	ldr	r2, [r3, #32]
 8008958:	f240 4344 	movw	r3, #1092	; 0x444
 800895c:	4013      	ands	r3, r2
 800895e:	2b00      	cmp	r3, #0
 8008960:	d107      	bne.n	8008972 <HAL_TIM_PWM_Stop+0x82>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f022 0201 	bic.w	r2, r2, #1
 8008970:	601a      	str	r2, [r3, #0]
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d104      	bne.n	8008982 <HAL_TIM_PWM_Stop+0x92>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2201      	movs	r2, #1
 800897c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008980:	e013      	b.n	80089aa <HAL_TIM_PWM_Stop+0xba>
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	2b04      	cmp	r3, #4
 8008986:	d104      	bne.n	8008992 <HAL_TIM_PWM_Stop+0xa2>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2201      	movs	r2, #1
 800898c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008990:	e00b      	b.n	80089aa <HAL_TIM_PWM_Stop+0xba>
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	2b08      	cmp	r3, #8
 8008996:	d104      	bne.n	80089a2 <HAL_TIM_PWM_Stop+0xb2>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2201      	movs	r2, #1
 800899c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80089a0:	e003      	b.n	80089aa <HAL_TIM_PWM_Stop+0xba>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2201      	movs	r2, #1
 80089a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80089aa:	2300      	movs	r3, #0
 80089ac:	4618      	mov	r0, r3
 80089ae:	3708      	adds	r7, #8
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}
 80089b4:	40012c00 	.word	0x40012c00

080089b8 <HAL_TIM_IRQHandler>:
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	691b      	ldr	r3, [r3, #16]
 80089c6:	f003 0302 	and.w	r3, r3, #2
 80089ca:	2b02      	cmp	r3, #2
 80089cc:	d122      	bne.n	8008a14 <HAL_TIM_IRQHandler+0x5c>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	68db      	ldr	r3, [r3, #12]
 80089d4:	f003 0302 	and.w	r3, r3, #2
 80089d8:	2b02      	cmp	r3, #2
 80089da:	d11b      	bne.n	8008a14 <HAL_TIM_IRQHandler+0x5c>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f06f 0202 	mvn.w	r2, #2
 80089e4:	611a      	str	r2, [r3, #16]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2201      	movs	r2, #1
 80089ea:	771a      	strb	r2, [r3, #28]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	699b      	ldr	r3, [r3, #24]
 80089f2:	f003 0303 	and.w	r3, r3, #3
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d003      	beq.n	8008a02 <HAL_TIM_IRQHandler+0x4a>
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 fa6f 	bl	8008ede <HAL_TIM_IC_CaptureCallback>
 8008a00:	e005      	b.n	8008a0e <HAL_TIM_IRQHandler+0x56>
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 fa62 	bl	8008ecc <HAL_TIM_OC_DelayElapsedCallback>
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f000 fa71 	bl	8008ef0 <HAL_TIM_PWM_PulseFinishedCallback>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2200      	movs	r2, #0
 8008a12:	771a      	strb	r2, [r3, #28]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	691b      	ldr	r3, [r3, #16]
 8008a1a:	f003 0304 	and.w	r3, r3, #4
 8008a1e:	2b04      	cmp	r3, #4
 8008a20:	d122      	bne.n	8008a68 <HAL_TIM_IRQHandler+0xb0>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	68db      	ldr	r3, [r3, #12]
 8008a28:	f003 0304 	and.w	r3, r3, #4
 8008a2c:	2b04      	cmp	r3, #4
 8008a2e:	d11b      	bne.n	8008a68 <HAL_TIM_IRQHandler+0xb0>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f06f 0204 	mvn.w	r2, #4
 8008a38:	611a      	str	r2, [r3, #16]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2202      	movs	r2, #2
 8008a3e:	771a      	strb	r2, [r3, #28]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	699b      	ldr	r3, [r3, #24]
 8008a46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d003      	beq.n	8008a56 <HAL_TIM_IRQHandler+0x9e>
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 fa45 	bl	8008ede <HAL_TIM_IC_CaptureCallback>
 8008a54:	e005      	b.n	8008a62 <HAL_TIM_IRQHandler+0xaa>
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 fa38 	bl	8008ecc <HAL_TIM_OC_DelayElapsedCallback>
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 fa47 	bl	8008ef0 <HAL_TIM_PWM_PulseFinishedCallback>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2200      	movs	r2, #0
 8008a66:	771a      	strb	r2, [r3, #28]
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	691b      	ldr	r3, [r3, #16]
 8008a6e:	f003 0308 	and.w	r3, r3, #8
 8008a72:	2b08      	cmp	r3, #8
 8008a74:	d122      	bne.n	8008abc <HAL_TIM_IRQHandler+0x104>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	f003 0308 	and.w	r3, r3, #8
 8008a80:	2b08      	cmp	r3, #8
 8008a82:	d11b      	bne.n	8008abc <HAL_TIM_IRQHandler+0x104>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f06f 0208 	mvn.w	r2, #8
 8008a8c:	611a      	str	r2, [r3, #16]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2204      	movs	r2, #4
 8008a92:	771a      	strb	r2, [r3, #28]
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	69db      	ldr	r3, [r3, #28]
 8008a9a:	f003 0303 	and.w	r3, r3, #3
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d003      	beq.n	8008aaa <HAL_TIM_IRQHandler+0xf2>
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 fa1b 	bl	8008ede <HAL_TIM_IC_CaptureCallback>
 8008aa8:	e005      	b.n	8008ab6 <HAL_TIM_IRQHandler+0xfe>
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f000 fa0e 	bl	8008ecc <HAL_TIM_OC_DelayElapsedCallback>
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f000 fa1d 	bl	8008ef0 <HAL_TIM_PWM_PulseFinishedCallback>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	771a      	strb	r2, [r3, #28]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	691b      	ldr	r3, [r3, #16]
 8008ac2:	f003 0310 	and.w	r3, r3, #16
 8008ac6:	2b10      	cmp	r3, #16
 8008ac8:	d122      	bne.n	8008b10 <HAL_TIM_IRQHandler+0x158>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	68db      	ldr	r3, [r3, #12]
 8008ad0:	f003 0310 	and.w	r3, r3, #16
 8008ad4:	2b10      	cmp	r3, #16
 8008ad6:	d11b      	bne.n	8008b10 <HAL_TIM_IRQHandler+0x158>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f06f 0210 	mvn.w	r2, #16
 8008ae0:	611a      	str	r2, [r3, #16]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2208      	movs	r2, #8
 8008ae6:	771a      	strb	r2, [r3, #28]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	69db      	ldr	r3, [r3, #28]
 8008aee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d003      	beq.n	8008afe <HAL_TIM_IRQHandler+0x146>
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 f9f1 	bl	8008ede <HAL_TIM_IC_CaptureCallback>
 8008afc:	e005      	b.n	8008b0a <HAL_TIM_IRQHandler+0x152>
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 f9e4 	bl	8008ecc <HAL_TIM_OC_DelayElapsedCallback>
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f000 f9f3 	bl	8008ef0 <HAL_TIM_PWM_PulseFinishedCallback>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	771a      	strb	r2, [r3, #28]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	691b      	ldr	r3, [r3, #16]
 8008b16:	f003 0301 	and.w	r3, r3, #1
 8008b1a:	2b01      	cmp	r3, #1
 8008b1c:	d10e      	bne.n	8008b3c <HAL_TIM_IRQHandler+0x184>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	68db      	ldr	r3, [r3, #12]
 8008b24:	f003 0301 	and.w	r3, r3, #1
 8008b28:	2b01      	cmp	r3, #1
 8008b2a:	d107      	bne.n	8008b3c <HAL_TIM_IRQHandler+0x184>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f06f 0201 	mvn.w	r2, #1
 8008b34:	611a      	str	r2, [r3, #16]
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f7fb faca 	bl	80040d0 <HAL_TIM_PeriodElapsedCallback>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	691b      	ldr	r3, [r3, #16]
 8008b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b46:	2b80      	cmp	r3, #128	; 0x80
 8008b48:	d10e      	bne.n	8008b68 <HAL_TIM_IRQHandler+0x1b0>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	68db      	ldr	r3, [r3, #12]
 8008b50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b54:	2b80      	cmp	r3, #128	; 0x80
 8008b56:	d107      	bne.n	8008b68 <HAL_TIM_IRQHandler+0x1b0>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008b60:	611a      	str	r2, [r3, #16]
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 fce1 	bl	800952a <HAL_TIMEx_BreakCallback>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	691b      	ldr	r3, [r3, #16]
 8008b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b72:	2b40      	cmp	r3, #64	; 0x40
 8008b74:	d10e      	bne.n	8008b94 <HAL_TIM_IRQHandler+0x1dc>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	68db      	ldr	r3, [r3, #12]
 8008b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b80:	2b40      	cmp	r3, #64	; 0x40
 8008b82:	d107      	bne.n	8008b94 <HAL_TIM_IRQHandler+0x1dc>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008b8c:	611a      	str	r2, [r3, #16]
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f000 f9b7 	bl	8008f02 <HAL_TIM_TriggerCallback>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	691b      	ldr	r3, [r3, #16]
 8008b9a:	f003 0320 	and.w	r3, r3, #32
 8008b9e:	2b20      	cmp	r3, #32
 8008ba0:	d10e      	bne.n	8008bc0 <HAL_TIM_IRQHandler+0x208>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	68db      	ldr	r3, [r3, #12]
 8008ba8:	f003 0320 	and.w	r3, r3, #32
 8008bac:	2b20      	cmp	r3, #32
 8008bae:	d107      	bne.n	8008bc0 <HAL_TIM_IRQHandler+0x208>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f06f 0220 	mvn.w	r2, #32
 8008bb8:	611a      	str	r2, [r3, #16]
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 fcac 	bl	8009518 <HAL_TIMEx_CommutCallback>
 8008bc0:	bf00      	nop
 8008bc2:	3708      	adds	r7, #8
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <HAL_TIM_PWM_ConfigChannel>:
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b084      	sub	sp, #16
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	60f8      	str	r0, [r7, #12]
 8008bd0:	60b9      	str	r1, [r7, #8]
 8008bd2:	607a      	str	r2, [r7, #4]
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bda:	2b01      	cmp	r3, #1
 8008bdc:	d101      	bne.n	8008be2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008bde:	2302      	movs	r3, #2
 8008be0:	e0ac      	b.n	8008d3c <HAL_TIM_PWM_ConfigChannel+0x174>
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2201      	movs	r2, #1
 8008be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2b0c      	cmp	r3, #12
 8008bee:	f200 809f 	bhi.w	8008d30 <HAL_TIM_PWM_ConfigChannel+0x168>
 8008bf2:	a201      	add	r2, pc, #4	; (adr r2, 8008bf8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bf8:	08008c2d 	.word	0x08008c2d
 8008bfc:	08008d31 	.word	0x08008d31
 8008c00:	08008d31 	.word	0x08008d31
 8008c04:	08008d31 	.word	0x08008d31
 8008c08:	08008c6d 	.word	0x08008c6d
 8008c0c:	08008d31 	.word	0x08008d31
 8008c10:	08008d31 	.word	0x08008d31
 8008c14:	08008d31 	.word	0x08008d31
 8008c18:	08008caf 	.word	0x08008caf
 8008c1c:	08008d31 	.word	0x08008d31
 8008c20:	08008d31 	.word	0x08008d31
 8008c24:	08008d31 	.word	0x08008d31
 8008c28:	08008cef 	.word	0x08008cef
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	68b9      	ldr	r1, [r7, #8]
 8008c32:	4618      	mov	r0, r3
 8008c34:	f000 f9d0 	bl	8008fd8 <TIM_OC1_SetConfig>
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	699a      	ldr	r2, [r3, #24]
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f042 0208 	orr.w	r2, r2, #8
 8008c46:	619a      	str	r2, [r3, #24]
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	699a      	ldr	r2, [r3, #24]
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f022 0204 	bic.w	r2, r2, #4
 8008c56:	619a      	str	r2, [r3, #24]
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	6999      	ldr	r1, [r3, #24]
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	691a      	ldr	r2, [r3, #16]
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	430a      	orrs	r2, r1
 8008c68:	619a      	str	r2, [r3, #24]
 8008c6a:	e062      	b.n	8008d32 <HAL_TIM_PWM_ConfigChannel+0x16a>
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	68b9      	ldr	r1, [r7, #8]
 8008c72:	4618      	mov	r0, r3
 8008c74:	f000 fa16 	bl	80090a4 <TIM_OC2_SetConfig>
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	699a      	ldr	r2, [r3, #24]
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c86:	619a      	str	r2, [r3, #24]
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	699a      	ldr	r2, [r3, #24]
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c96:	619a      	str	r2, [r3, #24]
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	6999      	ldr	r1, [r3, #24]
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	691b      	ldr	r3, [r3, #16]
 8008ca2:	021a      	lsls	r2, r3, #8
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	430a      	orrs	r2, r1
 8008caa:	619a      	str	r2, [r3, #24]
 8008cac:	e041      	b.n	8008d32 <HAL_TIM_PWM_ConfigChannel+0x16a>
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	68b9      	ldr	r1, [r7, #8]
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f000 fa5f 	bl	8009178 <TIM_OC3_SetConfig>
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	69da      	ldr	r2, [r3, #28]
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f042 0208 	orr.w	r2, r2, #8
 8008cc8:	61da      	str	r2, [r3, #28]
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	69da      	ldr	r2, [r3, #28]
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f022 0204 	bic.w	r2, r2, #4
 8008cd8:	61da      	str	r2, [r3, #28]
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	69d9      	ldr	r1, [r3, #28]
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	691a      	ldr	r2, [r3, #16]
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	430a      	orrs	r2, r1
 8008cea:	61da      	str	r2, [r3, #28]
 8008cec:	e021      	b.n	8008d32 <HAL_TIM_PWM_ConfigChannel+0x16a>
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	68b9      	ldr	r1, [r7, #8]
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f000 faa9 	bl	800924c <TIM_OC4_SetConfig>
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	69da      	ldr	r2, [r3, #28]
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d08:	61da      	str	r2, [r3, #28]
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	69da      	ldr	r2, [r3, #28]
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d18:	61da      	str	r2, [r3, #28]
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	69d9      	ldr	r1, [r3, #28]
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	691b      	ldr	r3, [r3, #16]
 8008d24:	021a      	lsls	r2, r3, #8
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	430a      	orrs	r2, r1
 8008d2c:	61da      	str	r2, [r3, #28]
 8008d2e:	e000      	b.n	8008d32 <HAL_TIM_PWM_ConfigChannel+0x16a>
 8008d30:	bf00      	nop
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2200      	movs	r2, #0
 8008d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3710      	adds	r7, #16
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}

08008d44 <HAL_TIM_ConfigClockSource>:
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b084      	sub	sp, #16
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	6039      	str	r1, [r7, #0]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d101      	bne.n	8008d5c <HAL_TIM_ConfigClockSource+0x18>
 8008d58:	2302      	movs	r3, #2
 8008d5a:	e0b3      	b.n	8008ec4 <HAL_TIM_ConfigClockSource+0x180>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2201      	movs	r2, #1
 8008d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2202      	movs	r2, #2
 8008d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	689b      	ldr	r3, [r3, #8]
 8008d72:	60fb      	str	r3, [r7, #12]
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008d7a:	60fb      	str	r3, [r7, #12]
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d82:	60fb      	str	r3, [r7, #12]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	68fa      	ldr	r2, [r7, #12]
 8008d8a:	609a      	str	r2, [r3, #8]
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d94:	d03e      	beq.n	8008e14 <HAL_TIM_ConfigClockSource+0xd0>
 8008d96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d9a:	f200 8087 	bhi.w	8008eac <HAL_TIM_ConfigClockSource+0x168>
 8008d9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008da2:	f000 8085 	beq.w	8008eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8008da6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008daa:	d87f      	bhi.n	8008eac <HAL_TIM_ConfigClockSource+0x168>
 8008dac:	2b70      	cmp	r3, #112	; 0x70
 8008dae:	d01a      	beq.n	8008de6 <HAL_TIM_ConfigClockSource+0xa2>
 8008db0:	2b70      	cmp	r3, #112	; 0x70
 8008db2:	d87b      	bhi.n	8008eac <HAL_TIM_ConfigClockSource+0x168>
 8008db4:	2b60      	cmp	r3, #96	; 0x60
 8008db6:	d050      	beq.n	8008e5a <HAL_TIM_ConfigClockSource+0x116>
 8008db8:	2b60      	cmp	r3, #96	; 0x60
 8008dba:	d877      	bhi.n	8008eac <HAL_TIM_ConfigClockSource+0x168>
 8008dbc:	2b50      	cmp	r3, #80	; 0x50
 8008dbe:	d03c      	beq.n	8008e3a <HAL_TIM_ConfigClockSource+0xf6>
 8008dc0:	2b50      	cmp	r3, #80	; 0x50
 8008dc2:	d873      	bhi.n	8008eac <HAL_TIM_ConfigClockSource+0x168>
 8008dc4:	2b40      	cmp	r3, #64	; 0x40
 8008dc6:	d058      	beq.n	8008e7a <HAL_TIM_ConfigClockSource+0x136>
 8008dc8:	2b40      	cmp	r3, #64	; 0x40
 8008dca:	d86f      	bhi.n	8008eac <HAL_TIM_ConfigClockSource+0x168>
 8008dcc:	2b30      	cmp	r3, #48	; 0x30
 8008dce:	d064      	beq.n	8008e9a <HAL_TIM_ConfigClockSource+0x156>
 8008dd0:	2b30      	cmp	r3, #48	; 0x30
 8008dd2:	d86b      	bhi.n	8008eac <HAL_TIM_ConfigClockSource+0x168>
 8008dd4:	2b20      	cmp	r3, #32
 8008dd6:	d060      	beq.n	8008e9a <HAL_TIM_ConfigClockSource+0x156>
 8008dd8:	2b20      	cmp	r3, #32
 8008dda:	d867      	bhi.n	8008eac <HAL_TIM_ConfigClockSource+0x168>
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d05c      	beq.n	8008e9a <HAL_TIM_ConfigClockSource+0x156>
 8008de0:	2b10      	cmp	r3, #16
 8008de2:	d05a      	beq.n	8008e9a <HAL_TIM_ConfigClockSource+0x156>
 8008de4:	e062      	b.n	8008eac <HAL_TIM_ConfigClockSource+0x168>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6818      	ldr	r0, [r3, #0]
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	6899      	ldr	r1, [r3, #8]
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	685a      	ldr	r2, [r3, #4]
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	68db      	ldr	r3, [r3, #12]
 8008df6:	f000 faee 	bl	80093d6 <TIM_ETR_SetConfig>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	689b      	ldr	r3, [r3, #8]
 8008e00:	60fb      	str	r3, [r7, #12]
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008e08:	60fb      	str	r3, [r7, #12]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	68fa      	ldr	r2, [r7, #12]
 8008e10:	609a      	str	r2, [r3, #8]
 8008e12:	e04e      	b.n	8008eb2 <HAL_TIM_ConfigClockSource+0x16e>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6818      	ldr	r0, [r3, #0]
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	6899      	ldr	r1, [r3, #8]
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	685a      	ldr	r2, [r3, #4]
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	68db      	ldr	r3, [r3, #12]
 8008e24:	f000 fad7 	bl	80093d6 <TIM_ETR_SetConfig>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	689a      	ldr	r2, [r3, #8]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008e36:	609a      	str	r2, [r3, #8]
 8008e38:	e03b      	b.n	8008eb2 <HAL_TIM_ConfigClockSource+0x16e>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6818      	ldr	r0, [r3, #0]
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	6859      	ldr	r1, [r3, #4]
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	68db      	ldr	r3, [r3, #12]
 8008e46:	461a      	mov	r2, r3
 8008e48:	f000 fa4e 	bl	80092e8 <TIM_TI1_ConfigInputStage>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	2150      	movs	r1, #80	; 0x50
 8008e52:	4618      	mov	r0, r3
 8008e54:	f000 faa5 	bl	80093a2 <TIM_ITRx_SetConfig>
 8008e58:	e02b      	b.n	8008eb2 <HAL_TIM_ConfigClockSource+0x16e>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6818      	ldr	r0, [r3, #0]
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	6859      	ldr	r1, [r3, #4]
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	68db      	ldr	r3, [r3, #12]
 8008e66:	461a      	mov	r2, r3
 8008e68:	f000 fa6c 	bl	8009344 <TIM_TI2_ConfigInputStage>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	2160      	movs	r1, #96	; 0x60
 8008e72:	4618      	mov	r0, r3
 8008e74:	f000 fa95 	bl	80093a2 <TIM_ITRx_SetConfig>
 8008e78:	e01b      	b.n	8008eb2 <HAL_TIM_ConfigClockSource+0x16e>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6818      	ldr	r0, [r3, #0]
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	6859      	ldr	r1, [r3, #4]
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	68db      	ldr	r3, [r3, #12]
 8008e86:	461a      	mov	r2, r3
 8008e88:	f000 fa2e 	bl	80092e8 <TIM_TI1_ConfigInputStage>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	2140      	movs	r1, #64	; 0x40
 8008e92:	4618      	mov	r0, r3
 8008e94:	f000 fa85 	bl	80093a2 <TIM_ITRx_SetConfig>
 8008e98:	e00b      	b.n	8008eb2 <HAL_TIM_ConfigClockSource+0x16e>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681a      	ldr	r2, [r3, #0]
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4619      	mov	r1, r3
 8008ea4:	4610      	mov	r0, r2
 8008ea6:	f000 fa7c 	bl	80093a2 <TIM_ITRx_SetConfig>
 8008eaa:	e002      	b.n	8008eb2 <HAL_TIM_ConfigClockSource+0x16e>
 8008eac:	bf00      	nop
 8008eae:	e000      	b.n	8008eb2 <HAL_TIM_ConfigClockSource+0x16e>
 8008eb0:	bf00      	nop
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3710      	adds	r7, #16
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}

08008ecc <HAL_TIM_OC_DelayElapsedCallback>:
 8008ecc:	b480      	push	{r7}
 8008ece:	b083      	sub	sp, #12
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	bf00      	nop
 8008ed6:	370c      	adds	r7, #12
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bc80      	pop	{r7}
 8008edc:	4770      	bx	lr

08008ede <HAL_TIM_IC_CaptureCallback>:
 8008ede:	b480      	push	{r7}
 8008ee0:	b083      	sub	sp, #12
 8008ee2:	af00      	add	r7, sp, #0
 8008ee4:	6078      	str	r0, [r7, #4]
 8008ee6:	bf00      	nop
 8008ee8:	370c      	adds	r7, #12
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bc80      	pop	{r7}
 8008eee:	4770      	bx	lr

08008ef0 <HAL_TIM_PWM_PulseFinishedCallback>:
 8008ef0:	b480      	push	{r7}
 8008ef2:	b083      	sub	sp, #12
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	bf00      	nop
 8008efa:	370c      	adds	r7, #12
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bc80      	pop	{r7}
 8008f00:	4770      	bx	lr

08008f02 <HAL_TIM_TriggerCallback>:
 8008f02:	b480      	push	{r7}
 8008f04:	b083      	sub	sp, #12
 8008f06:	af00      	add	r7, sp, #0
 8008f08:	6078      	str	r0, [r7, #4]
 8008f0a:	bf00      	nop
 8008f0c:	370c      	adds	r7, #12
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bc80      	pop	{r7}
 8008f12:	4770      	bx	lr

08008f14 <TIM_Base_SetConfig>:
 8008f14:	b480      	push	{r7}
 8008f16:	b085      	sub	sp, #20
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	6039      	str	r1, [r7, #0]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	60fb      	str	r3, [r7, #12]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	4a29      	ldr	r2, [pc, #164]	; (8008fcc <TIM_Base_SetConfig+0xb8>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d00b      	beq.n	8008f44 <TIM_Base_SetConfig+0x30>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f32:	d007      	beq.n	8008f44 <TIM_Base_SetConfig+0x30>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	4a26      	ldr	r2, [pc, #152]	; (8008fd0 <TIM_Base_SetConfig+0xbc>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d003      	beq.n	8008f44 <TIM_Base_SetConfig+0x30>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	4a25      	ldr	r2, [pc, #148]	; (8008fd4 <TIM_Base_SetConfig+0xc0>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d108      	bne.n	8008f56 <TIM_Base_SetConfig+0x42>
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f4a:	60fb      	str	r3, [r7, #12]
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	68fa      	ldr	r2, [r7, #12]
 8008f52:	4313      	orrs	r3, r2
 8008f54:	60fb      	str	r3, [r7, #12]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	4a1c      	ldr	r2, [pc, #112]	; (8008fcc <TIM_Base_SetConfig+0xb8>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d00b      	beq.n	8008f76 <TIM_Base_SetConfig+0x62>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f64:	d007      	beq.n	8008f76 <TIM_Base_SetConfig+0x62>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	4a19      	ldr	r2, [pc, #100]	; (8008fd0 <TIM_Base_SetConfig+0xbc>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d003      	beq.n	8008f76 <TIM_Base_SetConfig+0x62>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	4a18      	ldr	r2, [pc, #96]	; (8008fd4 <TIM_Base_SetConfig+0xc0>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d108      	bne.n	8008f88 <TIM_Base_SetConfig+0x74>
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f7c:	60fb      	str	r3, [r7, #12]
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	68db      	ldr	r3, [r3, #12]
 8008f82:	68fa      	ldr	r2, [r7, #12]
 8008f84:	4313      	orrs	r3, r2
 8008f86:	60fb      	str	r3, [r7, #12]
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	695b      	ldr	r3, [r3, #20]
 8008f92:	4313      	orrs	r3, r2
 8008f94:	60fb      	str	r3, [r7, #12]
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	68fa      	ldr	r2, [r7, #12]
 8008f9a:	601a      	str	r2, [r3, #0]
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	689a      	ldr	r2, [r3, #8]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	62da      	str	r2, [r3, #44]	; 0x2c
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	681a      	ldr	r2, [r3, #0]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	629a      	str	r2, [r3, #40]	; 0x28
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	4a07      	ldr	r2, [pc, #28]	; (8008fcc <TIM_Base_SetConfig+0xb8>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d103      	bne.n	8008fbc <TIM_Base_SetConfig+0xa8>
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	691a      	ldr	r2, [r3, #16]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	631a      	str	r2, [r3, #48]	; 0x30
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	615a      	str	r2, [r3, #20]
 8008fc2:	bf00      	nop
 8008fc4:	3714      	adds	r7, #20
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bc80      	pop	{r7}
 8008fca:	4770      	bx	lr
 8008fcc:	40012c00 	.word	0x40012c00
 8008fd0:	40000400 	.word	0x40000400
 8008fd4:	40000800 	.word	0x40000800

08008fd8 <TIM_OC1_SetConfig>:
 8008fd8:	b480      	push	{r7}
 8008fda:	b087      	sub	sp, #28
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	6039      	str	r1, [r7, #0]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6a1b      	ldr	r3, [r3, #32]
 8008fe6:	f023 0201 	bic.w	r2, r3, #1
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	621a      	str	r2, [r3, #32]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6a1b      	ldr	r3, [r3, #32]
 8008ff2:	617b      	str	r3, [r7, #20]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	613b      	str	r3, [r7, #16]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	699b      	ldr	r3, [r3, #24]
 8008ffe:	60fb      	str	r3, [r7, #12]
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009006:	60fb      	str	r3, [r7, #12]
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f023 0303 	bic.w	r3, r3, #3
 800900e:	60fb      	str	r3, [r7, #12]
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	68fa      	ldr	r2, [r7, #12]
 8009016:	4313      	orrs	r3, r2
 8009018:	60fb      	str	r3, [r7, #12]
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	f023 0302 	bic.w	r3, r3, #2
 8009020:	617b      	str	r3, [r7, #20]
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	689b      	ldr	r3, [r3, #8]
 8009026:	697a      	ldr	r2, [r7, #20]
 8009028:	4313      	orrs	r3, r2
 800902a:	617b      	str	r3, [r7, #20]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	4a1c      	ldr	r2, [pc, #112]	; (80090a0 <TIM_OC1_SetConfig+0xc8>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d10c      	bne.n	800904e <TIM_OC1_SetConfig+0x76>
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	f023 0308 	bic.w	r3, r3, #8
 800903a:	617b      	str	r3, [r7, #20]
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	68db      	ldr	r3, [r3, #12]
 8009040:	697a      	ldr	r2, [r7, #20]
 8009042:	4313      	orrs	r3, r2
 8009044:	617b      	str	r3, [r7, #20]
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	f023 0304 	bic.w	r3, r3, #4
 800904c:	617b      	str	r3, [r7, #20]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	4a13      	ldr	r2, [pc, #76]	; (80090a0 <TIM_OC1_SetConfig+0xc8>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d111      	bne.n	800907a <TIM_OC1_SetConfig+0xa2>
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800905c:	613b      	str	r3, [r7, #16]
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009064:	613b      	str	r3, [r7, #16]
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	695b      	ldr	r3, [r3, #20]
 800906a:	693a      	ldr	r2, [r7, #16]
 800906c:	4313      	orrs	r3, r2
 800906e:	613b      	str	r3, [r7, #16]
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	699b      	ldr	r3, [r3, #24]
 8009074:	693a      	ldr	r2, [r7, #16]
 8009076:	4313      	orrs	r3, r2
 8009078:	613b      	str	r3, [r7, #16]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	693a      	ldr	r2, [r7, #16]
 800907e:	605a      	str	r2, [r3, #4]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	68fa      	ldr	r2, [r7, #12]
 8009084:	619a      	str	r2, [r3, #24]
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	685a      	ldr	r2, [r3, #4]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	635a      	str	r2, [r3, #52]	; 0x34
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	697a      	ldr	r2, [r7, #20]
 8009092:	621a      	str	r2, [r3, #32]
 8009094:	bf00      	nop
 8009096:	371c      	adds	r7, #28
 8009098:	46bd      	mov	sp, r7
 800909a:	bc80      	pop	{r7}
 800909c:	4770      	bx	lr
 800909e:	bf00      	nop
 80090a0:	40012c00 	.word	0x40012c00

080090a4 <TIM_OC2_SetConfig>:
 80090a4:	b480      	push	{r7}
 80090a6:	b087      	sub	sp, #28
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	6039      	str	r1, [r7, #0]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6a1b      	ldr	r3, [r3, #32]
 80090b2:	f023 0210 	bic.w	r2, r3, #16
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	621a      	str	r2, [r3, #32]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6a1b      	ldr	r3, [r3, #32]
 80090be:	617b      	str	r3, [r7, #20]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	613b      	str	r3, [r7, #16]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	699b      	ldr	r3, [r3, #24]
 80090ca:	60fb      	str	r3, [r7, #12]
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090d2:	60fb      	str	r3, [r7, #12]
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090da:	60fb      	str	r3, [r7, #12]
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	021b      	lsls	r3, r3, #8
 80090e2:	68fa      	ldr	r2, [r7, #12]
 80090e4:	4313      	orrs	r3, r2
 80090e6:	60fb      	str	r3, [r7, #12]
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	f023 0320 	bic.w	r3, r3, #32
 80090ee:	617b      	str	r3, [r7, #20]
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	689b      	ldr	r3, [r3, #8]
 80090f4:	011b      	lsls	r3, r3, #4
 80090f6:	697a      	ldr	r2, [r7, #20]
 80090f8:	4313      	orrs	r3, r2
 80090fa:	617b      	str	r3, [r7, #20]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	4a1d      	ldr	r2, [pc, #116]	; (8009174 <TIM_OC2_SetConfig+0xd0>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d10d      	bne.n	8009120 <TIM_OC2_SetConfig+0x7c>
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800910a:	617b      	str	r3, [r7, #20]
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	68db      	ldr	r3, [r3, #12]
 8009110:	011b      	lsls	r3, r3, #4
 8009112:	697a      	ldr	r2, [r7, #20]
 8009114:	4313      	orrs	r3, r2
 8009116:	617b      	str	r3, [r7, #20]
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800911e:	617b      	str	r3, [r7, #20]
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	4a14      	ldr	r2, [pc, #80]	; (8009174 <TIM_OC2_SetConfig+0xd0>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d113      	bne.n	8009150 <TIM_OC2_SetConfig+0xac>
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800912e:	613b      	str	r3, [r7, #16]
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009136:	613b      	str	r3, [r7, #16]
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	695b      	ldr	r3, [r3, #20]
 800913c:	009b      	lsls	r3, r3, #2
 800913e:	693a      	ldr	r2, [r7, #16]
 8009140:	4313      	orrs	r3, r2
 8009142:	613b      	str	r3, [r7, #16]
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	699b      	ldr	r3, [r3, #24]
 8009148:	009b      	lsls	r3, r3, #2
 800914a:	693a      	ldr	r2, [r7, #16]
 800914c:	4313      	orrs	r3, r2
 800914e:	613b      	str	r3, [r7, #16]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	693a      	ldr	r2, [r7, #16]
 8009154:	605a      	str	r2, [r3, #4]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	68fa      	ldr	r2, [r7, #12]
 800915a:	619a      	str	r2, [r3, #24]
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	685a      	ldr	r2, [r3, #4]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	639a      	str	r2, [r3, #56]	; 0x38
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	697a      	ldr	r2, [r7, #20]
 8009168:	621a      	str	r2, [r3, #32]
 800916a:	bf00      	nop
 800916c:	371c      	adds	r7, #28
 800916e:	46bd      	mov	sp, r7
 8009170:	bc80      	pop	{r7}
 8009172:	4770      	bx	lr
 8009174:	40012c00 	.word	0x40012c00

08009178 <TIM_OC3_SetConfig>:
 8009178:	b480      	push	{r7}
 800917a:	b087      	sub	sp, #28
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	6039      	str	r1, [r7, #0]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6a1b      	ldr	r3, [r3, #32]
 8009186:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	621a      	str	r2, [r3, #32]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6a1b      	ldr	r3, [r3, #32]
 8009192:	617b      	str	r3, [r7, #20]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	613b      	str	r3, [r7, #16]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	69db      	ldr	r3, [r3, #28]
 800919e:	60fb      	str	r3, [r7, #12]
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091a6:	60fb      	str	r3, [r7, #12]
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f023 0303 	bic.w	r3, r3, #3
 80091ae:	60fb      	str	r3, [r7, #12]
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	68fa      	ldr	r2, [r7, #12]
 80091b6:	4313      	orrs	r3, r2
 80091b8:	60fb      	str	r3, [r7, #12]
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80091c0:	617b      	str	r3, [r7, #20]
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	689b      	ldr	r3, [r3, #8]
 80091c6:	021b      	lsls	r3, r3, #8
 80091c8:	697a      	ldr	r2, [r7, #20]
 80091ca:	4313      	orrs	r3, r2
 80091cc:	617b      	str	r3, [r7, #20]
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	4a1d      	ldr	r2, [pc, #116]	; (8009248 <TIM_OC3_SetConfig+0xd0>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d10d      	bne.n	80091f2 <TIM_OC3_SetConfig+0x7a>
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80091dc:	617b      	str	r3, [r7, #20]
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	68db      	ldr	r3, [r3, #12]
 80091e2:	021b      	lsls	r3, r3, #8
 80091e4:	697a      	ldr	r2, [r7, #20]
 80091e6:	4313      	orrs	r3, r2
 80091e8:	617b      	str	r3, [r7, #20]
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80091f0:	617b      	str	r3, [r7, #20]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	4a14      	ldr	r2, [pc, #80]	; (8009248 <TIM_OC3_SetConfig+0xd0>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d113      	bne.n	8009222 <TIM_OC3_SetConfig+0xaa>
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009200:	613b      	str	r3, [r7, #16]
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009208:	613b      	str	r3, [r7, #16]
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	695b      	ldr	r3, [r3, #20]
 800920e:	011b      	lsls	r3, r3, #4
 8009210:	693a      	ldr	r2, [r7, #16]
 8009212:	4313      	orrs	r3, r2
 8009214:	613b      	str	r3, [r7, #16]
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	699b      	ldr	r3, [r3, #24]
 800921a:	011b      	lsls	r3, r3, #4
 800921c:	693a      	ldr	r2, [r7, #16]
 800921e:	4313      	orrs	r3, r2
 8009220:	613b      	str	r3, [r7, #16]
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	693a      	ldr	r2, [r7, #16]
 8009226:	605a      	str	r2, [r3, #4]
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	68fa      	ldr	r2, [r7, #12]
 800922c:	61da      	str	r2, [r3, #28]
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	685a      	ldr	r2, [r3, #4]
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	63da      	str	r2, [r3, #60]	; 0x3c
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	697a      	ldr	r2, [r7, #20]
 800923a:	621a      	str	r2, [r3, #32]
 800923c:	bf00      	nop
 800923e:	371c      	adds	r7, #28
 8009240:	46bd      	mov	sp, r7
 8009242:	bc80      	pop	{r7}
 8009244:	4770      	bx	lr
 8009246:	bf00      	nop
 8009248:	40012c00 	.word	0x40012c00

0800924c <TIM_OC4_SetConfig>:
 800924c:	b480      	push	{r7}
 800924e:	b087      	sub	sp, #28
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	6039      	str	r1, [r7, #0]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6a1b      	ldr	r3, [r3, #32]
 800925a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	621a      	str	r2, [r3, #32]
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6a1b      	ldr	r3, [r3, #32]
 8009266:	613b      	str	r3, [r7, #16]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	685b      	ldr	r3, [r3, #4]
 800926c:	617b      	str	r3, [r7, #20]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	69db      	ldr	r3, [r3, #28]
 8009272:	60fb      	str	r3, [r7, #12]
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800927a:	60fb      	str	r3, [r7, #12]
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009282:	60fb      	str	r3, [r7, #12]
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	021b      	lsls	r3, r3, #8
 800928a:	68fa      	ldr	r2, [r7, #12]
 800928c:	4313      	orrs	r3, r2
 800928e:	60fb      	str	r3, [r7, #12]
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009296:	613b      	str	r3, [r7, #16]
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	689b      	ldr	r3, [r3, #8]
 800929c:	031b      	lsls	r3, r3, #12
 800929e:	693a      	ldr	r2, [r7, #16]
 80092a0:	4313      	orrs	r3, r2
 80092a2:	613b      	str	r3, [r7, #16]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	4a0f      	ldr	r2, [pc, #60]	; (80092e4 <TIM_OC4_SetConfig+0x98>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d109      	bne.n	80092c0 <TIM_OC4_SetConfig+0x74>
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80092b2:	617b      	str	r3, [r7, #20]
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	695b      	ldr	r3, [r3, #20]
 80092b8:	019b      	lsls	r3, r3, #6
 80092ba:	697a      	ldr	r2, [r7, #20]
 80092bc:	4313      	orrs	r3, r2
 80092be:	617b      	str	r3, [r7, #20]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	697a      	ldr	r2, [r7, #20]
 80092c4:	605a      	str	r2, [r3, #4]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	68fa      	ldr	r2, [r7, #12]
 80092ca:	61da      	str	r2, [r3, #28]
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	685a      	ldr	r2, [r3, #4]
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	641a      	str	r2, [r3, #64]	; 0x40
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	693a      	ldr	r2, [r7, #16]
 80092d8:	621a      	str	r2, [r3, #32]
 80092da:	bf00      	nop
 80092dc:	371c      	adds	r7, #28
 80092de:	46bd      	mov	sp, r7
 80092e0:	bc80      	pop	{r7}
 80092e2:	4770      	bx	lr
 80092e4:	40012c00 	.word	0x40012c00

080092e8 <TIM_TI1_ConfigInputStage>:
 80092e8:	b480      	push	{r7}
 80092ea:	b087      	sub	sp, #28
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	60f8      	str	r0, [r7, #12]
 80092f0:	60b9      	str	r1, [r7, #8]
 80092f2:	607a      	str	r2, [r7, #4]
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	6a1b      	ldr	r3, [r3, #32]
 80092f8:	617b      	str	r3, [r7, #20]
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	6a1b      	ldr	r3, [r3, #32]
 80092fe:	f023 0201 	bic.w	r2, r3, #1
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	621a      	str	r2, [r3, #32]
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	699b      	ldr	r3, [r3, #24]
 800930a:	613b      	str	r3, [r7, #16]
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009312:	613b      	str	r3, [r7, #16]
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	011b      	lsls	r3, r3, #4
 8009318:	693a      	ldr	r2, [r7, #16]
 800931a:	4313      	orrs	r3, r2
 800931c:	613b      	str	r3, [r7, #16]
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	f023 030a 	bic.w	r3, r3, #10
 8009324:	617b      	str	r3, [r7, #20]
 8009326:	697a      	ldr	r2, [r7, #20]
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	4313      	orrs	r3, r2
 800932c:	617b      	str	r3, [r7, #20]
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	693a      	ldr	r2, [r7, #16]
 8009332:	619a      	str	r2, [r3, #24]
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	697a      	ldr	r2, [r7, #20]
 8009338:	621a      	str	r2, [r3, #32]
 800933a:	bf00      	nop
 800933c:	371c      	adds	r7, #28
 800933e:	46bd      	mov	sp, r7
 8009340:	bc80      	pop	{r7}
 8009342:	4770      	bx	lr

08009344 <TIM_TI2_ConfigInputStage>:
 8009344:	b480      	push	{r7}
 8009346:	b087      	sub	sp, #28
 8009348:	af00      	add	r7, sp, #0
 800934a:	60f8      	str	r0, [r7, #12]
 800934c:	60b9      	str	r1, [r7, #8]
 800934e:	607a      	str	r2, [r7, #4]
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	6a1b      	ldr	r3, [r3, #32]
 8009354:	f023 0210 	bic.w	r2, r3, #16
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	621a      	str	r2, [r3, #32]
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	699b      	ldr	r3, [r3, #24]
 8009360:	617b      	str	r3, [r7, #20]
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	6a1b      	ldr	r3, [r3, #32]
 8009366:	613b      	str	r3, [r7, #16]
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800936e:	617b      	str	r3, [r7, #20]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	031b      	lsls	r3, r3, #12
 8009374:	697a      	ldr	r2, [r7, #20]
 8009376:	4313      	orrs	r3, r2
 8009378:	617b      	str	r3, [r7, #20]
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009380:	613b      	str	r3, [r7, #16]
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	011b      	lsls	r3, r3, #4
 8009386:	693a      	ldr	r2, [r7, #16]
 8009388:	4313      	orrs	r3, r2
 800938a:	613b      	str	r3, [r7, #16]
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	697a      	ldr	r2, [r7, #20]
 8009390:	619a      	str	r2, [r3, #24]
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	693a      	ldr	r2, [r7, #16]
 8009396:	621a      	str	r2, [r3, #32]
 8009398:	bf00      	nop
 800939a:	371c      	adds	r7, #28
 800939c:	46bd      	mov	sp, r7
 800939e:	bc80      	pop	{r7}
 80093a0:	4770      	bx	lr

080093a2 <TIM_ITRx_SetConfig>:
 80093a2:	b480      	push	{r7}
 80093a4:	b085      	sub	sp, #20
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	6078      	str	r0, [r7, #4]
 80093aa:	6039      	str	r1, [r7, #0]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	689b      	ldr	r3, [r3, #8]
 80093b0:	60fb      	str	r3, [r7, #12]
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093b8:	60fb      	str	r3, [r7, #12]
 80093ba:	683a      	ldr	r2, [r7, #0]
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	4313      	orrs	r3, r2
 80093c0:	f043 0307 	orr.w	r3, r3, #7
 80093c4:	60fb      	str	r3, [r7, #12]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	68fa      	ldr	r2, [r7, #12]
 80093ca:	609a      	str	r2, [r3, #8]
 80093cc:	bf00      	nop
 80093ce:	3714      	adds	r7, #20
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bc80      	pop	{r7}
 80093d4:	4770      	bx	lr

080093d6 <TIM_ETR_SetConfig>:
 80093d6:	b480      	push	{r7}
 80093d8:	b087      	sub	sp, #28
 80093da:	af00      	add	r7, sp, #0
 80093dc:	60f8      	str	r0, [r7, #12]
 80093de:	60b9      	str	r1, [r7, #8]
 80093e0:	607a      	str	r2, [r7, #4]
 80093e2:	603b      	str	r3, [r7, #0]
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	689b      	ldr	r3, [r3, #8]
 80093e8:	617b      	str	r3, [r7, #20]
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80093f0:	617b      	str	r3, [r7, #20]
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	021a      	lsls	r2, r3, #8
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	431a      	orrs	r2, r3
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	4313      	orrs	r3, r2
 80093fe:	697a      	ldr	r2, [r7, #20]
 8009400:	4313      	orrs	r3, r2
 8009402:	617b      	str	r3, [r7, #20]
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	697a      	ldr	r2, [r7, #20]
 8009408:	609a      	str	r2, [r3, #8]
 800940a:	bf00      	nop
 800940c:	371c      	adds	r7, #28
 800940e:	46bd      	mov	sp, r7
 8009410:	bc80      	pop	{r7}
 8009412:	4770      	bx	lr

08009414 <TIM_CCxChannelCmd>:
 8009414:	b480      	push	{r7}
 8009416:	b087      	sub	sp, #28
 8009418:	af00      	add	r7, sp, #0
 800941a:	60f8      	str	r0, [r7, #12]
 800941c:	60b9      	str	r1, [r7, #8]
 800941e:	607a      	str	r2, [r7, #4]
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	f003 031f 	and.w	r3, r3, #31
 8009426:	2201      	movs	r2, #1
 8009428:	fa02 f303 	lsl.w	r3, r2, r3
 800942c:	617b      	str	r3, [r7, #20]
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	6a1a      	ldr	r2, [r3, #32]
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	43db      	mvns	r3, r3
 8009436:	401a      	ands	r2, r3
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	621a      	str	r2, [r3, #32]
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	6a1a      	ldr	r2, [r3, #32]
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	f003 031f 	and.w	r3, r3, #31
 8009446:	6879      	ldr	r1, [r7, #4]
 8009448:	fa01 f303 	lsl.w	r3, r1, r3
 800944c:	431a      	orrs	r2, r3
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	621a      	str	r2, [r3, #32]
 8009452:	bf00      	nop
 8009454:	371c      	adds	r7, #28
 8009456:	46bd      	mov	sp, r7
 8009458:	bc80      	pop	{r7}
 800945a:	4770      	bx	lr

0800945c <HAL_TIMEx_MasterConfigSynchronization>:
 800945c:	b480      	push	{r7}
 800945e:	b085      	sub	sp, #20
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	6039      	str	r1, [r7, #0]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800946c:	2b01      	cmp	r3, #1
 800946e:	d101      	bne.n	8009474 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009470:	2302      	movs	r3, #2
 8009472:	e046      	b.n	8009502 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2201      	movs	r2, #1
 8009478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2202      	movs	r2, #2
 8009480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	685b      	ldr	r3, [r3, #4]
 800948a:	60fb      	str	r3, [r7, #12]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	689b      	ldr	r3, [r3, #8]
 8009492:	60bb      	str	r3, [r7, #8]
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800949a:	60fb      	str	r3, [r7, #12]
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	68fa      	ldr	r2, [r7, #12]
 80094a2:	4313      	orrs	r3, r2
 80094a4:	60fb      	str	r3, [r7, #12]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	68fa      	ldr	r2, [r7, #12]
 80094ac:	605a      	str	r2, [r3, #4]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4a16      	ldr	r2, [pc, #88]	; (800950c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d00e      	beq.n	80094d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094c0:	d009      	beq.n	80094d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4a12      	ldr	r2, [pc, #72]	; (8009510 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d004      	beq.n	80094d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4a10      	ldr	r2, [pc, #64]	; (8009514 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d10c      	bne.n	80094f0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80094dc:	60bb      	str	r3, [r7, #8]
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	68ba      	ldr	r2, [r7, #8]
 80094e4:	4313      	orrs	r3, r2
 80094e6:	60bb      	str	r3, [r7, #8]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	68ba      	ldr	r2, [r7, #8]
 80094ee:	609a      	str	r2, [r3, #8]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2201      	movs	r2, #1
 80094f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2200      	movs	r2, #0
 80094fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009500:	2300      	movs	r3, #0
 8009502:	4618      	mov	r0, r3
 8009504:	3714      	adds	r7, #20
 8009506:	46bd      	mov	sp, r7
 8009508:	bc80      	pop	{r7}
 800950a:	4770      	bx	lr
 800950c:	40012c00 	.word	0x40012c00
 8009510:	40000400 	.word	0x40000400
 8009514:	40000800 	.word	0x40000800

08009518 <HAL_TIMEx_CommutCallback>:
 8009518:	b480      	push	{r7}
 800951a:	b083      	sub	sp, #12
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	bf00      	nop
 8009522:	370c      	adds	r7, #12
 8009524:	46bd      	mov	sp, r7
 8009526:	bc80      	pop	{r7}
 8009528:	4770      	bx	lr

0800952a <HAL_TIMEx_BreakCallback>:
 800952a:	b480      	push	{r7}
 800952c:	b083      	sub	sp, #12
 800952e:	af00      	add	r7, sp, #0
 8009530:	6078      	str	r0, [r7, #4]
 8009532:	bf00      	nop
 8009534:	370c      	adds	r7, #12
 8009536:	46bd      	mov	sp, r7
 8009538:	bc80      	pop	{r7}
 800953a:	4770      	bx	lr

0800953c <malloc>:
 800953c:	4b02      	ldr	r3, [pc, #8]	; (8009548 <malloc+0xc>)
 800953e:	4601      	mov	r1, r0
 8009540:	6818      	ldr	r0, [r3, #0]
 8009542:	f000 b82b 	b.w	800959c <_malloc_r>
 8009546:	bf00      	nop
 8009548:	20000294 	.word	0x20000294

0800954c <free>:
 800954c:	4b02      	ldr	r3, [pc, #8]	; (8009558 <free+0xc>)
 800954e:	4601      	mov	r1, r0
 8009550:	6818      	ldr	r0, [r3, #0]
 8009552:	f000 b909 	b.w	8009768 <_free_r>
 8009556:	bf00      	nop
 8009558:	20000294 	.word	0x20000294

0800955c <sbrk_aligned>:
 800955c:	b570      	push	{r4, r5, r6, lr}
 800955e:	4e0e      	ldr	r6, [pc, #56]	; (8009598 <sbrk_aligned+0x3c>)
 8009560:	460c      	mov	r4, r1
 8009562:	6831      	ldr	r1, [r6, #0]
 8009564:	4605      	mov	r5, r0
 8009566:	b911      	cbnz	r1, 800956e <sbrk_aligned+0x12>
 8009568:	f000 f8ac 	bl	80096c4 <_sbrk_r>
 800956c:	6030      	str	r0, [r6, #0]
 800956e:	4621      	mov	r1, r4
 8009570:	4628      	mov	r0, r5
 8009572:	f000 f8a7 	bl	80096c4 <_sbrk_r>
 8009576:	1c43      	adds	r3, r0, #1
 8009578:	d00a      	beq.n	8009590 <sbrk_aligned+0x34>
 800957a:	1cc4      	adds	r4, r0, #3
 800957c:	f024 0403 	bic.w	r4, r4, #3
 8009580:	42a0      	cmp	r0, r4
 8009582:	d007      	beq.n	8009594 <sbrk_aligned+0x38>
 8009584:	1a21      	subs	r1, r4, r0
 8009586:	4628      	mov	r0, r5
 8009588:	f000 f89c 	bl	80096c4 <_sbrk_r>
 800958c:	3001      	adds	r0, #1
 800958e:	d101      	bne.n	8009594 <sbrk_aligned+0x38>
 8009590:	f04f 34ff 	mov.w	r4, #4294967295
 8009594:	4620      	mov	r0, r4
 8009596:	bd70      	pop	{r4, r5, r6, pc}
 8009598:	2000079c 	.word	0x2000079c

0800959c <_malloc_r>:
 800959c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095a0:	1ccd      	adds	r5, r1, #3
 80095a2:	f025 0503 	bic.w	r5, r5, #3
 80095a6:	3508      	adds	r5, #8
 80095a8:	2d0c      	cmp	r5, #12
 80095aa:	bf38      	it	cc
 80095ac:	250c      	movcc	r5, #12
 80095ae:	2d00      	cmp	r5, #0
 80095b0:	4607      	mov	r7, r0
 80095b2:	db01      	blt.n	80095b8 <_malloc_r+0x1c>
 80095b4:	42a9      	cmp	r1, r5
 80095b6:	d905      	bls.n	80095c4 <_malloc_r+0x28>
 80095b8:	230c      	movs	r3, #12
 80095ba:	2600      	movs	r6, #0
 80095bc:	603b      	str	r3, [r7, #0]
 80095be:	4630      	mov	r0, r6
 80095c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009698 <_malloc_r+0xfc>
 80095c8:	f000 f868 	bl	800969c <__malloc_lock>
 80095cc:	f8d8 3000 	ldr.w	r3, [r8]
 80095d0:	461c      	mov	r4, r3
 80095d2:	bb5c      	cbnz	r4, 800962c <_malloc_r+0x90>
 80095d4:	4629      	mov	r1, r5
 80095d6:	4638      	mov	r0, r7
 80095d8:	f7ff ffc0 	bl	800955c <sbrk_aligned>
 80095dc:	1c43      	adds	r3, r0, #1
 80095de:	4604      	mov	r4, r0
 80095e0:	d155      	bne.n	800968e <_malloc_r+0xf2>
 80095e2:	f8d8 4000 	ldr.w	r4, [r8]
 80095e6:	4626      	mov	r6, r4
 80095e8:	2e00      	cmp	r6, #0
 80095ea:	d145      	bne.n	8009678 <_malloc_r+0xdc>
 80095ec:	2c00      	cmp	r4, #0
 80095ee:	d048      	beq.n	8009682 <_malloc_r+0xe6>
 80095f0:	6823      	ldr	r3, [r4, #0]
 80095f2:	4631      	mov	r1, r6
 80095f4:	4638      	mov	r0, r7
 80095f6:	eb04 0903 	add.w	r9, r4, r3
 80095fa:	f000 f863 	bl	80096c4 <_sbrk_r>
 80095fe:	4581      	cmp	r9, r0
 8009600:	d13f      	bne.n	8009682 <_malloc_r+0xe6>
 8009602:	6821      	ldr	r1, [r4, #0]
 8009604:	4638      	mov	r0, r7
 8009606:	1a6d      	subs	r5, r5, r1
 8009608:	4629      	mov	r1, r5
 800960a:	f7ff ffa7 	bl	800955c <sbrk_aligned>
 800960e:	3001      	adds	r0, #1
 8009610:	d037      	beq.n	8009682 <_malloc_r+0xe6>
 8009612:	6823      	ldr	r3, [r4, #0]
 8009614:	442b      	add	r3, r5
 8009616:	6023      	str	r3, [r4, #0]
 8009618:	f8d8 3000 	ldr.w	r3, [r8]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d038      	beq.n	8009692 <_malloc_r+0xf6>
 8009620:	685a      	ldr	r2, [r3, #4]
 8009622:	42a2      	cmp	r2, r4
 8009624:	d12b      	bne.n	800967e <_malloc_r+0xe2>
 8009626:	2200      	movs	r2, #0
 8009628:	605a      	str	r2, [r3, #4]
 800962a:	e00f      	b.n	800964c <_malloc_r+0xb0>
 800962c:	6822      	ldr	r2, [r4, #0]
 800962e:	1b52      	subs	r2, r2, r5
 8009630:	d41f      	bmi.n	8009672 <_malloc_r+0xd6>
 8009632:	2a0b      	cmp	r2, #11
 8009634:	d917      	bls.n	8009666 <_malloc_r+0xca>
 8009636:	1961      	adds	r1, r4, r5
 8009638:	42a3      	cmp	r3, r4
 800963a:	6025      	str	r5, [r4, #0]
 800963c:	bf18      	it	ne
 800963e:	6059      	strne	r1, [r3, #4]
 8009640:	6863      	ldr	r3, [r4, #4]
 8009642:	bf08      	it	eq
 8009644:	f8c8 1000 	streq.w	r1, [r8]
 8009648:	5162      	str	r2, [r4, r5]
 800964a:	604b      	str	r3, [r1, #4]
 800964c:	4638      	mov	r0, r7
 800964e:	f104 060b 	add.w	r6, r4, #11
 8009652:	f000 f829 	bl	80096a8 <__malloc_unlock>
 8009656:	f026 0607 	bic.w	r6, r6, #7
 800965a:	1d23      	adds	r3, r4, #4
 800965c:	1af2      	subs	r2, r6, r3
 800965e:	d0ae      	beq.n	80095be <_malloc_r+0x22>
 8009660:	1b9b      	subs	r3, r3, r6
 8009662:	50a3      	str	r3, [r4, r2]
 8009664:	e7ab      	b.n	80095be <_malloc_r+0x22>
 8009666:	42a3      	cmp	r3, r4
 8009668:	6862      	ldr	r2, [r4, #4]
 800966a:	d1dd      	bne.n	8009628 <_malloc_r+0x8c>
 800966c:	f8c8 2000 	str.w	r2, [r8]
 8009670:	e7ec      	b.n	800964c <_malloc_r+0xb0>
 8009672:	4623      	mov	r3, r4
 8009674:	6864      	ldr	r4, [r4, #4]
 8009676:	e7ac      	b.n	80095d2 <_malloc_r+0x36>
 8009678:	4634      	mov	r4, r6
 800967a:	6876      	ldr	r6, [r6, #4]
 800967c:	e7b4      	b.n	80095e8 <_malloc_r+0x4c>
 800967e:	4613      	mov	r3, r2
 8009680:	e7cc      	b.n	800961c <_malloc_r+0x80>
 8009682:	230c      	movs	r3, #12
 8009684:	4638      	mov	r0, r7
 8009686:	603b      	str	r3, [r7, #0]
 8009688:	f000 f80e 	bl	80096a8 <__malloc_unlock>
 800968c:	e797      	b.n	80095be <_malloc_r+0x22>
 800968e:	6025      	str	r5, [r4, #0]
 8009690:	e7dc      	b.n	800964c <_malloc_r+0xb0>
 8009692:	605b      	str	r3, [r3, #4]
 8009694:	deff      	udf	#255	; 0xff
 8009696:	bf00      	nop
 8009698:	20000798 	.word	0x20000798

0800969c <__malloc_lock>:
 800969c:	4801      	ldr	r0, [pc, #4]	; (80096a4 <__malloc_lock+0x8>)
 800969e:	f000 b84b 	b.w	8009738 <__retarget_lock_acquire_recursive>
 80096a2:	bf00      	nop
 80096a4:	200008dc 	.word	0x200008dc

080096a8 <__malloc_unlock>:
 80096a8:	4801      	ldr	r0, [pc, #4]	; (80096b0 <__malloc_unlock+0x8>)
 80096aa:	f000 b846 	b.w	800973a <__retarget_lock_release_recursive>
 80096ae:	bf00      	nop
 80096b0:	200008dc 	.word	0x200008dc

080096b4 <memset>:
 80096b4:	4603      	mov	r3, r0
 80096b6:	4402      	add	r2, r0
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d100      	bne.n	80096be <memset+0xa>
 80096bc:	4770      	bx	lr
 80096be:	f803 1b01 	strb.w	r1, [r3], #1
 80096c2:	e7f9      	b.n	80096b8 <memset+0x4>

080096c4 <_sbrk_r>:
 80096c4:	b538      	push	{r3, r4, r5, lr}
 80096c6:	2300      	movs	r3, #0
 80096c8:	4d05      	ldr	r5, [pc, #20]	; (80096e0 <_sbrk_r+0x1c>)
 80096ca:	4604      	mov	r4, r0
 80096cc:	4608      	mov	r0, r1
 80096ce:	602b      	str	r3, [r5, #0]
 80096d0:	f7fc f826 	bl	8005720 <_sbrk>
 80096d4:	1c43      	adds	r3, r0, #1
 80096d6:	d102      	bne.n	80096de <_sbrk_r+0x1a>
 80096d8:	682b      	ldr	r3, [r5, #0]
 80096da:	b103      	cbz	r3, 80096de <_sbrk_r+0x1a>
 80096dc:	6023      	str	r3, [r4, #0]
 80096de:	bd38      	pop	{r3, r4, r5, pc}
 80096e0:	200008d8 	.word	0x200008d8

080096e4 <__errno>:
 80096e4:	4b01      	ldr	r3, [pc, #4]	; (80096ec <__errno+0x8>)
 80096e6:	6818      	ldr	r0, [r3, #0]
 80096e8:	4770      	bx	lr
 80096ea:	bf00      	nop
 80096ec:	20000294 	.word	0x20000294

080096f0 <__libc_init_array>:
 80096f0:	b570      	push	{r4, r5, r6, lr}
 80096f2:	2600      	movs	r6, #0
 80096f4:	4d0c      	ldr	r5, [pc, #48]	; (8009728 <__libc_init_array+0x38>)
 80096f6:	4c0d      	ldr	r4, [pc, #52]	; (800972c <__libc_init_array+0x3c>)
 80096f8:	1b64      	subs	r4, r4, r5
 80096fa:	10a4      	asrs	r4, r4, #2
 80096fc:	42a6      	cmp	r6, r4
 80096fe:	d109      	bne.n	8009714 <__libc_init_array+0x24>
 8009700:	f000 f87a 	bl	80097f8 <_init>
 8009704:	2600      	movs	r6, #0
 8009706:	4d0a      	ldr	r5, [pc, #40]	; (8009730 <__libc_init_array+0x40>)
 8009708:	4c0a      	ldr	r4, [pc, #40]	; (8009734 <__libc_init_array+0x44>)
 800970a:	1b64      	subs	r4, r4, r5
 800970c:	10a4      	asrs	r4, r4, #2
 800970e:	42a6      	cmp	r6, r4
 8009710:	d105      	bne.n	800971e <__libc_init_array+0x2e>
 8009712:	bd70      	pop	{r4, r5, r6, pc}
 8009714:	f855 3b04 	ldr.w	r3, [r5], #4
 8009718:	4798      	blx	r3
 800971a:	3601      	adds	r6, #1
 800971c:	e7ee      	b.n	80096fc <__libc_init_array+0xc>
 800971e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009722:	4798      	blx	r3
 8009724:	3601      	adds	r6, #1
 8009726:	e7f2      	b.n	800970e <__libc_init_array+0x1e>
 8009728:	08009950 	.word	0x08009950
 800972c:	08009950 	.word	0x08009950
 8009730:	08009950 	.word	0x08009950
 8009734:	08009954 	.word	0x08009954

08009738 <__retarget_lock_acquire_recursive>:
 8009738:	4770      	bx	lr

0800973a <__retarget_lock_release_recursive>:
 800973a:	4770      	bx	lr

0800973c <strcpy>:
 800973c:	4603      	mov	r3, r0
 800973e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009742:	f803 2b01 	strb.w	r2, [r3], #1
 8009746:	2a00      	cmp	r2, #0
 8009748:	d1f9      	bne.n	800973e <strcpy+0x2>
 800974a:	4770      	bx	lr

0800974c <memcpy>:
 800974c:	440a      	add	r2, r1
 800974e:	4291      	cmp	r1, r2
 8009750:	f100 33ff 	add.w	r3, r0, #4294967295
 8009754:	d100      	bne.n	8009758 <memcpy+0xc>
 8009756:	4770      	bx	lr
 8009758:	b510      	push	{r4, lr}
 800975a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800975e:	4291      	cmp	r1, r2
 8009760:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009764:	d1f9      	bne.n	800975a <memcpy+0xe>
 8009766:	bd10      	pop	{r4, pc}

08009768 <_free_r>:
 8009768:	b538      	push	{r3, r4, r5, lr}
 800976a:	4605      	mov	r5, r0
 800976c:	2900      	cmp	r1, #0
 800976e:	d040      	beq.n	80097f2 <_free_r+0x8a>
 8009770:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009774:	1f0c      	subs	r4, r1, #4
 8009776:	2b00      	cmp	r3, #0
 8009778:	bfb8      	it	lt
 800977a:	18e4      	addlt	r4, r4, r3
 800977c:	f7ff ff8e 	bl	800969c <__malloc_lock>
 8009780:	4a1c      	ldr	r2, [pc, #112]	; (80097f4 <_free_r+0x8c>)
 8009782:	6813      	ldr	r3, [r2, #0]
 8009784:	b933      	cbnz	r3, 8009794 <_free_r+0x2c>
 8009786:	6063      	str	r3, [r4, #4]
 8009788:	6014      	str	r4, [r2, #0]
 800978a:	4628      	mov	r0, r5
 800978c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009790:	f7ff bf8a 	b.w	80096a8 <__malloc_unlock>
 8009794:	42a3      	cmp	r3, r4
 8009796:	d908      	bls.n	80097aa <_free_r+0x42>
 8009798:	6820      	ldr	r0, [r4, #0]
 800979a:	1821      	adds	r1, r4, r0
 800979c:	428b      	cmp	r3, r1
 800979e:	bf01      	itttt	eq
 80097a0:	6819      	ldreq	r1, [r3, #0]
 80097a2:	685b      	ldreq	r3, [r3, #4]
 80097a4:	1809      	addeq	r1, r1, r0
 80097a6:	6021      	streq	r1, [r4, #0]
 80097a8:	e7ed      	b.n	8009786 <_free_r+0x1e>
 80097aa:	461a      	mov	r2, r3
 80097ac:	685b      	ldr	r3, [r3, #4]
 80097ae:	b10b      	cbz	r3, 80097b4 <_free_r+0x4c>
 80097b0:	42a3      	cmp	r3, r4
 80097b2:	d9fa      	bls.n	80097aa <_free_r+0x42>
 80097b4:	6811      	ldr	r1, [r2, #0]
 80097b6:	1850      	adds	r0, r2, r1
 80097b8:	42a0      	cmp	r0, r4
 80097ba:	d10b      	bne.n	80097d4 <_free_r+0x6c>
 80097bc:	6820      	ldr	r0, [r4, #0]
 80097be:	4401      	add	r1, r0
 80097c0:	1850      	adds	r0, r2, r1
 80097c2:	4283      	cmp	r3, r0
 80097c4:	6011      	str	r1, [r2, #0]
 80097c6:	d1e0      	bne.n	800978a <_free_r+0x22>
 80097c8:	6818      	ldr	r0, [r3, #0]
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	4408      	add	r0, r1
 80097ce:	6010      	str	r0, [r2, #0]
 80097d0:	6053      	str	r3, [r2, #4]
 80097d2:	e7da      	b.n	800978a <_free_r+0x22>
 80097d4:	d902      	bls.n	80097dc <_free_r+0x74>
 80097d6:	230c      	movs	r3, #12
 80097d8:	602b      	str	r3, [r5, #0]
 80097da:	e7d6      	b.n	800978a <_free_r+0x22>
 80097dc:	6820      	ldr	r0, [r4, #0]
 80097de:	1821      	adds	r1, r4, r0
 80097e0:	428b      	cmp	r3, r1
 80097e2:	bf01      	itttt	eq
 80097e4:	6819      	ldreq	r1, [r3, #0]
 80097e6:	685b      	ldreq	r3, [r3, #4]
 80097e8:	1809      	addeq	r1, r1, r0
 80097ea:	6021      	streq	r1, [r4, #0]
 80097ec:	6063      	str	r3, [r4, #4]
 80097ee:	6054      	str	r4, [r2, #4]
 80097f0:	e7cb      	b.n	800978a <_free_r+0x22>
 80097f2:	bd38      	pop	{r3, r4, r5, pc}
 80097f4:	20000798 	.word	0x20000798

080097f8 <_init>:
 80097f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097fa:	bf00      	nop
 80097fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097fe:	bc08      	pop	{r3}
 8009800:	469e      	mov	lr, r3
 8009802:	4770      	bx	lr

08009804 <_fini>:
 8009804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009806:	bf00      	nop
 8009808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800980a:	bc08      	pop	{r3}
 800980c:	469e      	mov	lr, r3
 800980e:	4770      	bx	lr
