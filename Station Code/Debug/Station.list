
Station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e24  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08008f30  08008f30  00018f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009064  08009064  000204d8  2**0
                  CONTENTS
  4 .ARM          00000000  08009064  08009064  000204d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009064  08009064  000204d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009064  08009064  00019064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009068  08009068  00019068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004d8  20000000  0800906c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a8  200004d8  08009544  000204d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000b80  08009544  00020b80  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000204d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020501  2**0
                  CONTENTS, READONLY
 13 .debug_info   000143d8  00000000  00000000  00020544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036a1  00000000  00000000  0003491c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001490  00000000  00000000  00037fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ff3  00000000  00000000  00039450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a18d  00000000  00000000  0003a443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001944c  00000000  00000000  000545d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091591  00000000  00000000  0006da1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000059dc  00000000  00000000  000fefb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0010498c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200004d8 	.word	0x200004d8
 8000128:	00000000 	.word	0x00000000
 800012c:	08008f18 	.word	0x08008f18

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200004dc 	.word	0x200004dc
 8000148:	08008f18 	.word	0x08008f18

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	; 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	3a01      	subs	r2, #1
 8000216:	bf28      	it	cs
 8000218:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800021c:	d2ed      	bcs.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ca:	2afd      	cmp	r2, #253	; 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	; 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	; 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	; 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <__gesf2>:
 8000618:	f04f 3cff 	mov.w	ip, #4294967295
 800061c:	e006      	b.n	800062c <__cmpsf2+0x4>
 800061e:	bf00      	nop

08000620 <__lesf2>:
 8000620:	f04f 0c01 	mov.w	ip, #1
 8000624:	e002      	b.n	800062c <__cmpsf2+0x4>
 8000626:	bf00      	nop

08000628 <__cmpsf2>:
 8000628:	f04f 0c01 	mov.w	ip, #1
 800062c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000630:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000634:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000638:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800063c:	bf18      	it	ne
 800063e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000642:	d011      	beq.n	8000668 <__cmpsf2+0x40>
 8000644:	b001      	add	sp, #4
 8000646:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800064a:	bf18      	it	ne
 800064c:	ea90 0f01 	teqne	r0, r1
 8000650:	bf58      	it	pl
 8000652:	ebb2 0003 	subspl.w	r0, r2, r3
 8000656:	bf88      	it	hi
 8000658:	17c8      	asrhi	r0, r1, #31
 800065a:	bf38      	it	cc
 800065c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000660:	bf18      	it	ne
 8000662:	f040 0001 	orrne.w	r0, r0, #1
 8000666:	4770      	bx	lr
 8000668:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800066c:	d102      	bne.n	8000674 <__cmpsf2+0x4c>
 800066e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000672:	d105      	bne.n	8000680 <__cmpsf2+0x58>
 8000674:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000678:	d1e4      	bne.n	8000644 <__cmpsf2+0x1c>
 800067a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800067e:	d0e1      	beq.n	8000644 <__cmpsf2+0x1c>
 8000680:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <__aeabi_cfrcmple>:
 8000688:	4684      	mov	ip, r0
 800068a:	4608      	mov	r0, r1
 800068c:	4661      	mov	r1, ip
 800068e:	e7ff      	b.n	8000690 <__aeabi_cfcmpeq>

08000690 <__aeabi_cfcmpeq>:
 8000690:	b50f      	push	{r0, r1, r2, r3, lr}
 8000692:	f7ff ffc9 	bl	8000628 <__cmpsf2>
 8000696:	2800      	cmp	r0, #0
 8000698:	bf48      	it	mi
 800069a:	f110 0f00 	cmnmi.w	r0, #0
 800069e:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006a0 <__aeabi_fcmpeq>:
 80006a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a4:	f7ff fff4 	bl	8000690 <__aeabi_cfcmpeq>
 80006a8:	bf0c      	ite	eq
 80006aa:	2001      	moveq	r0, #1
 80006ac:	2000      	movne	r0, #0
 80006ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b2:	bf00      	nop

080006b4 <__aeabi_fcmplt>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff ffea 	bl	8000690 <__aeabi_cfcmpeq>
 80006bc:	bf34      	ite	cc
 80006be:	2001      	movcc	r0, #1
 80006c0:	2000      	movcs	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_fcmple>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffe0 	bl	8000690 <__aeabi_cfcmpeq>
 80006d0:	bf94      	ite	ls
 80006d2:	2001      	movls	r0, #1
 80006d4:	2000      	movhi	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_fcmpge>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffd2 	bl	8000688 <__aeabi_cfrcmple>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_fcmpgt>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffc8 	bl	8000688 <__aeabi_cfrcmple>
 80006f8:	bf34      	ite	cc
 80006fa:	2001      	movcc	r0, #1
 80006fc:	2000      	movcs	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_f2iz>:
 8000704:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000708:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800070c:	d30f      	bcc.n	800072e <__aeabi_f2iz+0x2a>
 800070e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000712:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000716:	d90d      	bls.n	8000734 <__aeabi_f2iz+0x30>
 8000718:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800071c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000720:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000724:	fa23 f002 	lsr.w	r0, r3, r2
 8000728:	bf18      	it	ne
 800072a:	4240      	negne	r0, r0
 800072c:	4770      	bx	lr
 800072e:	f04f 0000 	mov.w	r0, #0
 8000732:	4770      	bx	lr
 8000734:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000738:	d101      	bne.n	800073e <__aeabi_f2iz+0x3a>
 800073a:	0242      	lsls	r2, r0, #9
 800073c:	d105      	bne.n	800074a <__aeabi_f2iz+0x46>
 800073e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000742:	bf08      	it	eq
 8000744:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000748:	4770      	bx	lr
 800074a:	f04f 0000 	mov.w	r0, #0
 800074e:	4770      	bx	lr

08000750 <__aeabi_f2uiz>:
 8000750:	0042      	lsls	r2, r0, #1
 8000752:	d20e      	bcs.n	8000772 <__aeabi_f2uiz+0x22>
 8000754:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000758:	d30b      	bcc.n	8000772 <__aeabi_f2uiz+0x22>
 800075a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800075e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000762:	d409      	bmi.n	8000778 <__aeabi_f2uiz+0x28>
 8000764:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000768:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800076c:	fa23 f002 	lsr.w	r0, r3, r2
 8000770:	4770      	bx	lr
 8000772:	f04f 0000 	mov.w	r0, #0
 8000776:	4770      	bx	lr
 8000778:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800077c:	d101      	bne.n	8000782 <__aeabi_f2uiz+0x32>
 800077e:	0242      	lsls	r2, r0, #9
 8000780:	d102      	bne.n	8000788 <__aeabi_f2uiz+0x38>
 8000782:	f04f 30ff 	mov.w	r0, #4294967295
 8000786:	4770      	bx	lr
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop

08000790 <Incoder_Handler>:
 *
 *  Created on: Jul 30, 2024
 *      Author: I
 */
//---------------------------------------------------------------------------------
void Incoder_Handler(struct Incoder *self){
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
	if(self->Rotary_Switch.event){
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	7f5b      	ldrb	r3, [r3, #29]
 800079c:	f003 0302 	and.w	r3, r3, #2
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d029      	beq.n	80007fa <Incoder_Handler+0x6a>
		if(self->Rotary_Switch.Rotary_Switch_Direcion==Direct)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	7f9b      	ldrb	r3, [r3, #30]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d112      	bne.n	80007d4 <Incoder_Handler+0x44>
			if(self->Rotary_Switch.State){
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	7f5b      	ldrb	r3, [r3, #29]
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d005      	beq.n	80007c8 <Incoder_Handler+0x38>
				self->Incoder_Rotary_Switch_Buffer++;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007c0:	1c5a      	adds	r2, r3, #1
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	62da      	str	r2, [r3, #44]	; 0x2c
			self->Incoder_Button_State=Incoder_Button_Short;
		}else{
			self->Incoder_Button_State=Incoder_Button_long;
		}
	}
}
 80007c6:	e02c      	b.n	8000822 <Incoder_Handler+0x92>
				self->Incoder_Rotary_Switch_Buffer--;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007cc:	1e5a      	subs	r2, r3, #1
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80007d2:	e026      	b.n	8000822 <Incoder_Handler+0x92>
			if(self->Rotary_Switch.State){
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	7f5b      	ldrb	r3, [r3, #29]
 80007d8:	f003 0301 	and.w	r3, r3, #1
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d005      	beq.n	80007ee <Incoder_Handler+0x5e>
				self->Incoder_Rotary_Switch_Buffer--;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007e6:	1e5a      	subs	r2, r3, #1
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80007ec:	e019      	b.n	8000822 <Incoder_Handler+0x92>
				self->Incoder_Rotary_Switch_Buffer++;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007f2:	1c5a      	adds	r2, r3, #1
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80007f8:	e013      	b.n	8000822 <Incoder_Handler+0x92>
	}else if(self->Button.event){
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	7a9b      	ldrb	r3, [r3, #10]
 80007fe:	f003 0302 	and.w	r3, r3, #2
 8000802:	b2db      	uxtb	r3, r3
 8000804:	2b00      	cmp	r3, #0
 8000806:	d00c      	beq.n	8000822 <Incoder_Handler+0x92>
		if(self->Button.State==1){
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	7adb      	ldrb	r3, [r3, #11]
 800080c:	2b01      	cmp	r3, #1
 800080e:	d104      	bne.n	800081a <Incoder_Handler+0x8a>
			self->Incoder_Button_State=Incoder_Button_Short;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2202      	movs	r2, #2
 8000814:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 8000818:	e003      	b.n	8000822 <Incoder_Handler+0x92>
			self->Incoder_Button_State=Incoder_Button_long;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	2203      	movs	r2, #3
 800081e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 8000822:	bf00      	nop
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	bc80      	pop	{r7}
 800082a:	4770      	bx	lr

0800082c <Rotary_Switch_Handler>:
//---------------------------------------------------------------------------------
void Rotary_Switch_Handler(struct Rotary_Switch *self){
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
	self->event=1;
 8000834:	687a      	ldr	r2, [r7, #4]
 8000836:	7853      	ldrb	r3, [r2, #1]
 8000838:	f043 0302 	orr.w	r3, r3, #2
 800083c:	7053      	strb	r3, [r2, #1]
	Incoder_Handler(self->base);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	68db      	ldr	r3, [r3, #12]
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff ffa4 	bl	8000790 <Incoder_Handler>
	self->event=0;
 8000848:	687a      	ldr	r2, [r7, #4]
 800084a:	7853      	ldrb	r3, [r2, #1]
 800084c:	f36f 0341 	bfc	r3, #1, #1
 8000850:	7053      	strb	r3, [r2, #1]
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <Rotary_Switch_EXTI>:
//---------------------------------------------------------------------------------
void Rotary_Switch_EXTI(struct Rotary_Switch *self, uint16_t* GPIO){
 800085a:	b580      	push	{r7, lr}
 800085c:	b082      	sub	sp, #8
 800085e:	af00      	add	r7, sp, #0
 8000860:	6078      	str	r0, [r7, #4]
 8000862:	6039      	str	r1, [r7, #0]
	if(self->EXTI_PIN==*GPIO){
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	889a      	ldrh	r2, [r3, #4]
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	881b      	ldrh	r3, [r3, #0]
 800086c:	429a      	cmp	r2, r3
 800086e:	d113      	bne.n	8000898 <Rotary_Switch_EXTI+0x3e>
		self->State=HAL_GPIO_ReadPin(self->GPIO,self->PIN);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	689a      	ldr	r2, [r3, #8]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	88db      	ldrh	r3, [r3, #6]
 8000878:	4619      	mov	r1, r3
 800087a:	4610      	mov	r0, r2
 800087c:	f006 f800 	bl	8006880 <HAL_GPIO_ReadPin>
 8000880:	4603      	mov	r3, r0
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	b2d9      	uxtb	r1, r3
 8000888:	687a      	ldr	r2, [r7, #4]
 800088a:	7853      	ldrb	r3, [r2, #1]
 800088c:	f361 0300 	bfi	r3, r1, #0, #1
 8000890:	7053      	strb	r3, [r2, #1]
		Rotary_Switch_Handler(self);
 8000892:	6878      	ldr	r0, [r7, #4]
 8000894:	f7ff ffca 	bl	800082c <Rotary_Switch_Handler>
	}
}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <Button_EXTI>:
//---------------------------------------------------------------------------------
void Button_EXTI(struct Button* self,uint16_t* GPIO){
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	6039      	str	r1, [r7, #0]
	if(self->EXTI_PIN==*GPIO){
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	891a      	ldrh	r2, [r3, #8]
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	881b      	ldrh	r3, [r3, #0]
 80008b2:	429a      	cmp	r2, r3
 80008b4:	d10a      	bne.n	80008cc <Button_EXTI+0x2c>
		self->Flag=1;
 80008b6:	687a      	ldr	r2, [r7, #4]
 80008b8:	7993      	ldrb	r3, [r2, #6]
 80008ba:	f043 0301 	orr.w	r3, r3, #1
 80008be:	7193      	strb	r3, [r2, #6]
		self->count=0;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2200      	movs	r2, #0
 80008c4:	711a      	strb	r2, [r3, #4]
		self->Presed_counter=0;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	2200      	movs	r2, #0
 80008ca:	709a      	strb	r2, [r3, #2]
	}
}
 80008cc:	bf00      	nop
 80008ce:	370c      	adds	r7, #12
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bc80      	pop	{r7}
 80008d4:	4770      	bx	lr

080008d6 <Incoder_EXTI>:
//---------------------------------------------------------------------------------
void Incoder_EXTI(struct Incoder *self, uint16_t* GPIO){
 80008d6:	b580      	push	{r7, lr}
 80008d8:	b082      	sub	sp, #8
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6078      	str	r0, [r7, #4]
 80008de:	6039      	str	r1, [r7, #0]
	Rotary_Switch_EXTI(&(self->Rotary_Switch),  GPIO);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	331c      	adds	r3, #28
 80008e4:	6839      	ldr	r1, [r7, #0]
 80008e6:	4618      	mov	r0, r3
 80008e8:	f7ff ffb7 	bl	800085a <Rotary_Switch_EXTI>
	Button_EXTI(&(self->Button), GPIO);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	3304      	adds	r3, #4
 80008f0:	6839      	ldr	r1, [r7, #0]
 80008f2:	4618      	mov	r0, r3
 80008f4:	f7ff ffd4 	bl	80008a0 <Button_EXTI>
}
 80008f8:	bf00      	nop
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <Button_MODE_it>:
//---------------------------------------------------------------------------------
void Button_MODE_it(struct Button* self){
 8000900:	b590      	push	{r4, r7, lr}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
	switch (self->MODE){
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	7c1b      	ldrb	r3, [r3, #16]
 800090c:	2b02      	cmp	r3, #2
 800090e:	d06e      	beq.n	80009ee <Button_MODE_it+0xee>
 8000910:	2b02      	cmp	r3, #2
 8000912:	f300 80ce 	bgt.w	8000ab2 <Button_MODE_it+0x1b2>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d002      	beq.n	8000920 <Button_MODE_it+0x20>
 800091a:	2b01      	cmp	r3, #1
 800091c:	d027      	beq.n	800096e <Button_MODE_it+0x6e>
				self->Previos_Stable_State=self->Stable_State;
			}
			self->count=0;
		break;
	}
}
 800091e:	e0c8      	b.n	8000ab2 <Button_MODE_it+0x1b2>
			if(self->PIN_State==HAL_GPIO_ReadPin(self->GPIO,self->PIN)){
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	785b      	ldrb	r3, [r3, #1]
 8000924:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000928:	b2db      	uxtb	r3, r3
 800092a:	461c      	mov	r4, r3
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	68da      	ldr	r2, [r3, #12]
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	895b      	ldrh	r3, [r3, #10]
 8000934:	4619      	mov	r1, r3
 8000936:	4610      	mov	r0, r2
 8000938:	f005 ffa2 	bl	8006880 <HAL_GPIO_ReadPin>
 800093c:	4603      	mov	r3, r0
 800093e:	429c      	cmp	r4, r3
 8000940:	d10c      	bne.n	800095c <Button_MODE_it+0x5c>
				self->Stable_State=self->PIN_State;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	785b      	ldrb	r3, [r3, #1]
 8000946:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800094a:	b2d9      	uxtb	r1, r3
 800094c:	687a      	ldr	r2, [r7, #4]
 800094e:	7853      	ldrb	r3, [r2, #1]
 8000950:	f361 0382 	bfi	r3, r1, #2, #1
 8000954:	7053      	strb	r3, [r2, #1]
				Button_Handler(self);
 8000956:	6878      	ldr	r0, [r7, #4]
 8000958:	f001 fb3c 	bl	8001fd4 <Button_Handler>
			self->count=0;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	2200      	movs	r2, #0
 8000960:	711a      	strb	r2, [r3, #4]
			self->Flag=0;
 8000962:	687a      	ldr	r2, [r7, #4]
 8000964:	7993      	ldrb	r3, [r2, #6]
 8000966:	f36f 0300 	bfc	r3, #0, #1
 800096a:	7193      	strb	r3, [r2, #6]
		break;
 800096c:	e0a1      	b.n	8000ab2 <Button_MODE_it+0x1b2>
			if(self->PIN_State==HAL_GPIO_ReadPin(self->GPIO,self->PIN)){
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	785b      	ldrb	r3, [r3, #1]
 8000972:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000976:	b2db      	uxtb	r3, r3
 8000978:	461c      	mov	r4, r3
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	68da      	ldr	r2, [r3, #12]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	895b      	ldrh	r3, [r3, #10]
 8000982:	4619      	mov	r1, r3
 8000984:	4610      	mov	r0, r2
 8000986:	f005 ff7b 	bl	8006880 <HAL_GPIO_ReadPin>
 800098a:	4603      	mov	r3, r0
 800098c:	429c      	cmp	r4, r3
 800098e:	d12a      	bne.n	80009e6 <Button_MODE_it+0xe6>
				self->Stable_State=self->PIN_State;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	785b      	ldrb	r3, [r3, #1]
 8000994:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000998:	b2d9      	uxtb	r1, r3
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	7853      	ldrb	r3, [r2, #1]
 800099e:	f361 0382 	bfi	r3, r1, #2, #1
 80009a2:	7053      	strb	r3, [r2, #1]
				if(self->Stable_State!=self->Previos_Stable_State){
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	785b      	ldrb	r3, [r3, #1]
 80009a8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80009ac:	b2da      	uxtb	r2, r3
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	785b      	ldrb	r3, [r3, #1]
 80009b2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	429a      	cmp	r2, r3
 80009ba:	d00a      	beq.n	80009d2 <Button_MODE_it+0xd2>
					self->State=self->PIN_State;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	785b      	ldrb	r3, [r3, #1]
 80009c0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	461a      	mov	r2, r3
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	71da      	strb	r2, [r3, #7]
					Button_Handler(self);
 80009cc:	6878      	ldr	r0, [r7, #4]
 80009ce:	f001 fb01 	bl	8001fd4 <Button_Handler>
				self->Previos_Stable_State=self->Stable_State;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	785b      	ldrb	r3, [r3, #1]
 80009d6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80009da:	b2d9      	uxtb	r1, r3
 80009dc:	687a      	ldr	r2, [r7, #4]
 80009de:	7853      	ldrb	r3, [r2, #1]
 80009e0:	f361 03c3 	bfi	r3, r1, #3, #1
 80009e4:	7053      	strb	r3, [r2, #1]
			self->count=0;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	2200      	movs	r2, #0
 80009ea:	711a      	strb	r2, [r3, #4]
		break;
 80009ec:	e061      	b.n	8000ab2 <Button_MODE_it+0x1b2>
			if(self->PIN_State==HAL_GPIO_ReadPin(self->GPIO,self->PIN)){
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	785b      	ldrb	r3, [r3, #1]
 80009f2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	461c      	mov	r4, r3
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	68da      	ldr	r2, [r3, #12]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	895b      	ldrh	r3, [r3, #10]
 8000a02:	4619      	mov	r1, r3
 8000a04:	4610      	mov	r0, r2
 8000a06:	f005 ff3b 	bl	8006880 <HAL_GPIO_ReadPin>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	429c      	cmp	r4, r3
 8000a0e:	d14c      	bne.n	8000aaa <Button_MODE_it+0x1aa>
				self->Stable_State=self->PIN_State;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	785b      	ldrb	r3, [r3, #1]
 8000a14:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000a18:	b2d9      	uxtb	r1, r3
 8000a1a:	687a      	ldr	r2, [r7, #4]
 8000a1c:	7853      	ldrb	r3, [r2, #1]
 8000a1e:	f361 0382 	bfi	r3, r1, #2, #1
 8000a22:	7053      	strb	r3, [r2, #1]
				if(self->Stable_State==GPIO_PIN_RESET){
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	785b      	ldrb	r3, [r3, #1]
 8000a28:	f003 0304 	and.w	r3, r3, #4
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d106      	bne.n	8000a40 <Button_MODE_it+0x140>
					self->Presed_counter++;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	789b      	ldrb	r3, [r3, #2]
 8000a36:	3301      	adds	r3, #1
 8000a38:	b2da      	uxtb	r2, r3
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	709a      	strb	r2, [r3, #2]
 8000a3e:	e02a      	b.n	8000a96 <Button_MODE_it+0x196>
				else if(self->Previos_Stable_State==GPIO_PIN_RESET){
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	785b      	ldrb	r3, [r3, #1]
 8000a44:	f003 0308 	and.w	r3, r3, #8
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d123      	bne.n	8000a96 <Button_MODE_it+0x196>
					if(self->Presed_counter<self->Presed_counter_max)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	789a      	ldrb	r2, [r3, #2]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	78db      	ldrb	r3, [r3, #3]
 8000a56:	429a      	cmp	r2, r3
 8000a58:	d203      	bcs.n	8000a62 <Button_MODE_it+0x162>
						self->State=1;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	71da      	strb	r2, [r3, #7]
 8000a60:	e002      	b.n	8000a68 <Button_MODE_it+0x168>
						self->State=2;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2202      	movs	r2, #2
 8000a66:	71da      	strb	r2, [r3, #7]
					self->Presed_counter=0;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	709a      	strb	r2, [r3, #2]
					self->Flag=0;
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	7993      	ldrb	r3, [r2, #6]
 8000a72:	f36f 0300 	bfc	r3, #0, #1
 8000a76:	7193      	strb	r3, [r2, #6]
					self->event=1;
 8000a78:	687a      	ldr	r2, [r7, #4]
 8000a7a:	7993      	ldrb	r3, [r2, #6]
 8000a7c:	f043 0302 	orr.w	r3, r3, #2
 8000a80:	7193      	strb	r3, [r2, #6]
					Incoder_Handler(self->base);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	695b      	ldr	r3, [r3, #20]
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff fe82 	bl	8000790 <Incoder_Handler>
					self->event=0;
 8000a8c:	687a      	ldr	r2, [r7, #4]
 8000a8e:	7993      	ldrb	r3, [r2, #6]
 8000a90:	f36f 0341 	bfc	r3, #1, #1
 8000a94:	7193      	strb	r3, [r2, #6]
				self->Previos_Stable_State=self->Stable_State;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	785b      	ldrb	r3, [r3, #1]
 8000a9a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000a9e:	b2d9      	uxtb	r1, r3
 8000aa0:	687a      	ldr	r2, [r7, #4]
 8000aa2:	7853      	ldrb	r3, [r2, #1]
 8000aa4:	f361 03c3 	bfi	r3, r1, #3, #1
 8000aa8:	7053      	strb	r3, [r2, #1]
			self->count=0;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2200      	movs	r2, #0
 8000aae:	711a      	strb	r2, [r3, #4]
		break;
 8000ab0:	bf00      	nop
}
 8000ab2:	bf00      	nop
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd90      	pop	{r4, r7, pc}

08000aba <Button_it>:
//---------------------------------------------------------------------------------
void Button_it(struct Button* self){
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b082      	sub	sp, #8
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
	if(self->Flag==1){
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	799b      	ldrb	r3, [r3, #6]
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d024      	beq.n	8000b1a <Button_it+0x60>
		if(self->count==1){
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	791b      	ldrb	r3, [r3, #4]
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d111      	bne.n	8000afc <Button_it+0x42>
			self->PIN_State=HAL_GPIO_ReadPin(self->GPIO,self->PIN);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	68da      	ldr	r2, [r3, #12]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	895b      	ldrh	r3, [r3, #10]
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	f005 fecc 	bl	8006880 <HAL_GPIO_ReadPin>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	b2d9      	uxtb	r1, r3
 8000af0:	687a      	ldr	r2, [r7, #4]
 8000af2:	7853      	ldrb	r3, [r2, #1]
 8000af4:	f361 0300 	bfi	r3, r1, #0, #1
 8000af8:	7053      	strb	r3, [r2, #1]
 8000afa:	e008      	b.n	8000b0e <Button_it+0x54>
		}
		else if(self->count==self->count_max){
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	791a      	ldrb	r2, [r3, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	795b      	ldrb	r3, [r3, #5]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d102      	bne.n	8000b0e <Button_it+0x54>
			Button_MODE_it(self);
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	f7ff fef9 	bl	8000900 <Button_MODE_it>
		}
		self->count++;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	791b      	ldrb	r3, [r3, #4]
 8000b12:	3301      	adds	r3, #1
 8000b14:	b2da      	uxtb	r2, r3
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	711a      	strb	r2, [r3, #4]
	}
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <Incoder_it>:
//---------------------------------------------------------------------------------
void Incoder_it(struct Incoder *self){
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b082      	sub	sp, #8
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
	Button_it(&self->Button);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	3304      	adds	r3, #4
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff ffc3 	bl	8000aba <Button_it>
}
 8000b34:	bf00      	nop
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <Button_ini>:
//---------------------------------------------------------------------------------
void Button_ini(struct Button* self){
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
	self->count=0;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2200      	movs	r2, #0
 8000b48:	711a      	strb	r2, [r3, #4]
	self->Presed_counter=0;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	709a      	strb	r2, [r3, #2]
	self->Previos_Stable_State=1;
 8000b50:	687a      	ldr	r2, [r7, #4]
 8000b52:	7853      	ldrb	r3, [r2, #1]
 8000b54:	f043 0308 	orr.w	r3, r3, #8
 8000b58:	7053      	strb	r3, [r2, #1]
	self->event=0;
 8000b5a:	687a      	ldr	r2, [r7, #4]
 8000b5c:	7993      	ldrb	r3, [r2, #6]
 8000b5e:	f36f 0341 	bfc	r3, #1, #1
 8000b62:	7193      	strb	r3, [r2, #6]
	if(self->MODE==Button_Mode_Regular_Without_EXTI)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	7c1b      	ldrb	r3, [r3, #16]
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d105      	bne.n	8000b78 <Button_ini+0x3c>
		self->Flag=1;
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	7993      	ldrb	r3, [r2, #6]
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	7193      	strb	r3, [r2, #6]
	else
		self->Flag=0;
}
 8000b76:	e004      	b.n	8000b82 <Button_ini+0x46>
		self->Flag=0;
 8000b78:	687a      	ldr	r2, [r7, #4]
 8000b7a:	7993      	ldrb	r3, [r2, #6]
 8000b7c:	f36f 0300 	bfc	r3, #0, #1
 8000b80:	7193      	strb	r3, [r2, #6]
}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr

08000b8c <Button_Vector_Create>:
//---------------------------------------------------------------------------------
void Button_Vector_Create(struct Button_Vector *Vector, struct Button *Button){
 8000b8c:	b5b0      	push	{r4, r5, r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	6039      	str	r1, [r7, #0]
	Button_ini(Button);
 8000b96:	6838      	ldr	r0, [r7, #0]
 8000b98:	f7ff ffd0 	bl	8000b3c <Button_ini>
	struct Button *Bpr= malloc(sizeof(struct Button));
 8000b9c:	2018      	movs	r0, #24
 8000b9e:	f008 f8ad 	bl	8008cfc <malloc>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	613b      	str	r3, [r7, #16]
	*Bpr= *Button;
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	4614      	mov	r4, r2
 8000bac:	461d      	mov	r5, r3
 8000bae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000bb6:	e884 0003 	stmia.w	r4, {r0, r1}
	if(Vector->Button==NULL)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d103      	bne.n	8000bca <Button_Vector_Create+0x3e>
		Vector->Button=Bpr;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	693a      	ldr	r2, [r7, #16]
 8000bc6:	605a      	str	r2, [r3, #4]
		}
		Vpr->Button=Bpr;
		NOW->next=Vpr;
		NOW->next->next=NULL;
	}
}
 8000bc8:	e018      	b.n	8000bfc <Button_Vector_Create+0x70>
		struct Button_Vector *Vpr= malloc(sizeof(struct Button_Vector));
 8000bca:	2008      	movs	r0, #8
 8000bcc:	f008 f896 	bl	8008cfc <malloc>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	60fb      	str	r3, [r7, #12]
		struct Button_Vector *NOW=Vector;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	617b      	str	r3, [r7, #20]
		while(NOW->next!=NULL){
 8000bd8:	e002      	b.n	8000be0 <Button_Vector_Create+0x54>
			NOW=NOW->next;
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	617b      	str	r3, [r7, #20]
		while(NOW->next!=NULL){
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d1f8      	bne.n	8000bda <Button_Vector_Create+0x4e>
		Vpr->Button=Bpr;
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	605a      	str	r2, [r3, #4]
		NOW->next=Vpr;
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	68fa      	ldr	r2, [r7, #12]
 8000bf2:	601a      	str	r2, [r3, #0]
		NOW->next->next=NULL;
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
}
 8000bfc:	bf00      	nop
 8000bfe:	3718      	adds	r7, #24
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bdb0      	pop	{r4, r5, r7, pc}

08000c04 <Button_Vector_EXTI>:
//---------------------------------------------------------------------------------
void Button_Vector_EXTI(struct Button_Vector *self,uint16_t* GPIO){
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	6039      	str	r1, [r7, #0]
	struct Button_Vector *NOW=self;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	60fb      	str	r3, [r7, #12]
	do{
		Button_EXTI(NOW->Button,GPIO);
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	6839      	ldr	r1, [r7, #0]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff fe41 	bl	80008a0 <Button_EXTI>
		NOW=NOW->next;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	60fb      	str	r3, [r7, #12]
	}while(NOW!=NULL);
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d1f3      	bne.n	8000c12 <Button_Vector_EXTI+0xe>
}
 8000c2a:	bf00      	nop
 8000c2c:	bf00      	nop
 8000c2e:	3710      	adds	r7, #16
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <Button_Vector_it>:
//---------------------------------------------------------------------------------
void Button_Vector_it(struct Button_Vector *self){
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
	struct Button_Vector *NOW=self;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	60fb      	str	r3, [r7, #12]
	do{
		Button_it(NOW->Button);
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff ff38 	bl	8000aba <Button_it>
		NOW=NOW->next;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	60fb      	str	r3, [r7, #12]
	} while(NOW!=NULL);
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d1f4      	bne.n	8000c40 <Button_Vector_it+0xc>
}
 8000c56:	bf00      	nop
 8000c58:	bf00      	nop
 8000c5a:	3710      	adds	r7, #16
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <Button_Get_Pin_State>:
//---------------------------------------------------------------------------------
GPIO_PinState Button_Get_Pin_State(struct Button* self){
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
	return self->Stable_State;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	785b      	ldrb	r3, [r3, #1]
 8000c6c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000c70:	b2db      	uxtb	r3, r3
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bc80      	pop	{r7}
 8000c7a:	4770      	bx	lr

08000c7c <Incoder_Reset_Rotary_Switch_Buffer>:
//---------------------------------------------------------------------------------
void Incoder_Reset_Rotary_Switch_Buffer(struct Incoder *self){
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
	self->Incoder_Rotary_Switch_Buffer=0;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2200      	movs	r2, #0
 8000c88:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr

08000c94 <Incoder_Get_Rotary_Switch_Buffer>:
//---------------------------------------------------------------------------------
int Incoder_Get_Rotary_Switch_Buffer(struct Incoder *self){
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
	return  self->Incoder_Rotary_Switch_Buffer;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bc80      	pop	{r7}
 8000ca8:	4770      	bx	lr

08000caa <Incoder_Reset_Button_State>:
//---------------------------------------------------------------------------------
void Incoder_Reset_Button_State(struct Incoder *self){
 8000caa:	b480      	push	{r7}
 8000cac:	b083      	sub	sp, #12
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
	self->Incoder_Button_State=Incoder_Button_NotPressed;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 8000cba:	bf00      	nop
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bc80      	pop	{r7}
 8000cc2:	4770      	bx	lr

08000cc4 <Incoder_Get_Button_State>:
//---------------------------------------------------------------------------------
enum Incoder_Button_State Incoder_Get_Button_State(struct Incoder *self){
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
	return self->Incoder_Button_State;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bc80      	pop	{r7}
 8000cda:	4770      	bx	lr

08000cdc <Incoder_ini>:
//---------------------------------------------------------------------------------
void Rotary_Switch_ini(struct Rotary_Switch *self){

}
//---------------------------------------------------------------------------------
void Incoder_ini(struct Incoder *self){
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
	Button_ini(&(self->Button));
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	3304      	adds	r3, #4
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff ff27 	bl	8000b3c <Button_ini>
	self->Button.base=self;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	687a      	ldr	r2, [r7, #4]
 8000cf2:	619a      	str	r2, [r3, #24]
	self->Rotary_Switch.base=self;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	687a      	ldr	r2, [r7, #4]
 8000cf8:	629a      	str	r2, [r3, #40]	; 0x28
	self->Button.ID=self->ID;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	781a      	ldrb	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	711a      	strb	r2, [r3, #4]
	self->Rotary_Switch.ID=self->ID;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	781a      	ldrb	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	771a      	strb	r2, [r3, #28]
	self->Incoder_Button_State=Incoder_Button_NotPressed;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	self->Incoder_Rotary_Switch_Buffer=0;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2200      	movs	r2, #0
 8000d16:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <Filter_Mediana_3>:
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	80fb      	strh	r3, [r7, #6]
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	80bb      	strh	r3, [r7, #4]
 8000d2e:	4613      	mov	r3, r2
 8000d30:	807b      	strh	r3, [r7, #2]
 8000d32:	88fa      	ldrh	r2, [r7, #6]
 8000d34:	88bb      	ldrh	r3, [r7, #4]
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d80d      	bhi.n	8000d56 <Filter_Mediana_3+0x36>
 8000d3a:	88fa      	ldrh	r2, [r7, #6]
 8000d3c:	887b      	ldrh	r3, [r7, #2]
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	d807      	bhi.n	8000d52 <Filter_Mediana_3+0x32>
 8000d42:	88ba      	ldrh	r2, [r7, #4]
 8000d44:	887b      	ldrh	r3, [r7, #2]
 8000d46:	429a      	cmp	r2, r3
 8000d48:	d801      	bhi.n	8000d4e <Filter_Mediana_3+0x2e>
 8000d4a:	88bb      	ldrh	r3, [r7, #4]
 8000d4c:	e010      	b.n	8000d70 <Filter_Mediana_3+0x50>
 8000d4e:	887b      	ldrh	r3, [r7, #2]
 8000d50:	e00e      	b.n	8000d70 <Filter_Mediana_3+0x50>
 8000d52:	88fb      	ldrh	r3, [r7, #6]
 8000d54:	e00c      	b.n	8000d70 <Filter_Mediana_3+0x50>
 8000d56:	88fa      	ldrh	r2, [r7, #6]
 8000d58:	887b      	ldrh	r3, [r7, #2]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d801      	bhi.n	8000d62 <Filter_Mediana_3+0x42>
 8000d5e:	887b      	ldrh	r3, [r7, #2]
 8000d60:	e006      	b.n	8000d70 <Filter_Mediana_3+0x50>
 8000d62:	88ba      	ldrh	r2, [r7, #4]
 8000d64:	887b      	ldrh	r3, [r7, #2]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d801      	bhi.n	8000d6e <Filter_Mediana_3+0x4e>
 8000d6a:	887b      	ldrh	r3, [r7, #2]
 8000d6c:	e000      	b.n	8000d70 <Filter_Mediana_3+0x50>
 8000d6e:	88bb      	ldrh	r3, [r7, #4]
 8000d70:	4618      	mov	r0, r3
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bc80      	pop	{r7}
 8000d78:	4770      	bx	lr

08000d7a <Filter_Mediana_9>:
 8000d7a:	b5b0      	push	{r4, r5, r7, lr}
 8000d7c:	b082      	sub	sp, #8
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	8818      	ldrh	r0, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	3302      	adds	r3, #2
 8000d8a:	8819      	ldrh	r1, [r3, #0]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3304      	adds	r3, #4
 8000d90:	881b      	ldrh	r3, [r3, #0]
 8000d92:	461a      	mov	r2, r3
 8000d94:	f7ff ffc4 	bl	8000d20 <Filter_Mediana_3>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	461c      	mov	r4, r3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3306      	adds	r3, #6
 8000da0:	8818      	ldrh	r0, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	3308      	adds	r3, #8
 8000da6:	8819      	ldrh	r1, [r3, #0]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	330a      	adds	r3, #10
 8000dac:	881b      	ldrh	r3, [r3, #0]
 8000dae:	461a      	mov	r2, r3
 8000db0:	f7ff ffb6 	bl	8000d20 <Filter_Mediana_3>
 8000db4:	4603      	mov	r3, r0
 8000db6:	461d      	mov	r5, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	330c      	adds	r3, #12
 8000dbc:	8818      	ldrh	r0, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	330e      	adds	r3, #14
 8000dc2:	8819      	ldrh	r1, [r3, #0]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3310      	adds	r3, #16
 8000dc8:	881b      	ldrh	r3, [r3, #0]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	f7ff ffa8 	bl	8000d20 <Filter_Mediana_3>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	4629      	mov	r1, r5
 8000dd6:	4620      	mov	r0, r4
 8000dd8:	f7ff ffa2 	bl	8000d20 <Filter_Mediana_3>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	4618      	mov	r0, r3
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bdb0      	pop	{r4, r5, r7, pc}

08000de6 <Filter_ini>:
 8000de6:	b480      	push	{r7}
 8000de8:	b083      	sub	sp, #12
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f04f 0200 	mov.w	r2, #0
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	bf00      	nop
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bc80      	pop	{r7}
 8000dfe:	4770      	bx	lr

08000e00 <Filter_Exp_Mov_Average>:
 8000e00:	b590      	push	{r4, r7, lr}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	695b      	ldr	r3, [r3, #20]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff fc79 	bl	8000704 <__aeabi_f2iz>
 8000e12:	4603      	mov	r3, r0
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff fa5b 	bl	80002d0 <__aeabi_i2f>
 8000e1a:	4602      	mov	r2, r0
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	4619      	mov	r1, r3
 8000e22:	4610      	mov	r0, r2
 8000e24:	f7ff f99e 	bl	8000164 <__aeabi_fsub>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff fc6a 	bl	8000704 <__aeabi_f2iz>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	bfb8      	it	lt
 8000e36:	425b      	neglt	r3, r3
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff fa49 	bl	80002d0 <__aeabi_i2f>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	691b      	ldr	r3, [r3, #16]
 8000e44:	4619      	mov	r1, r3
 8000e46:	4610      	mov	r0, r2
 8000e48:	f7ff fc52 	bl	80006f0 <__aeabi_fcmpgt>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d004      	beq.n	8000e5c <Filter_Exp_Mov_Average+0x5c>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	689a      	ldr	r2, [r3, #8]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	e003      	b.n	8000e64 <Filter_Exp_Mov_Average+0x64>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	685a      	ldr	r2, [r3, #4]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	68dc      	ldr	r4, [r3, #12]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	695a      	ldr	r2, [r3, #20]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	4619      	mov	r1, r3
 8000e72:	4610      	mov	r0, r2
 8000e74:	f7ff f976 	bl	8000164 <__aeabi_fsub>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4619      	mov	r1, r3
 8000e82:	4610      	mov	r0, r2
 8000e84:	f7ff fa78 	bl	8000378 <__aeabi_fmul>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	f7ff f96b 	bl	8000168 <__addsf3>
 8000e92:	4603      	mov	r3, r0
 8000e94:	461a      	mov	r2, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	68db      	ldr	r3, [r3, #12]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff fc56 	bl	8000750 <__aeabi_f2uiz>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd90      	pop	{r4, r7, pc}

08000eb0 <Filter_Combined>:
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	7e1b      	ldrb	r3, [r3, #24]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d114      	bne.n	8000eea <Filter_Combined+0x3a>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	69db      	ldr	r3, [r3, #28]
 8000ec4:	8818      	ldrh	r0, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	69db      	ldr	r3, [r3, #28]
 8000eca:	3302      	adds	r3, #2
 8000ecc:	8819      	ldrh	r1, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	69db      	ldr	r3, [r3, #28]
 8000ed2:	3304      	adds	r3, #4
 8000ed4:	881b      	ldrh	r3, [r3, #0]
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	f7ff ff22 	bl	8000d20 <Filter_Mediana_3>
 8000edc:	4603      	mov	r3, r0
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff f9f2 	bl	80002c8 <__aeabi_ui2f>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	615a      	str	r2, [r3, #20]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	7e1b      	ldrb	r3, [r3, #24]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d10b      	bne.n	8000f0a <Filter_Combined+0x5a>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	69db      	ldr	r3, [r3, #28]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff ff3f 	bl	8000d7a <Filter_Mediana_9>
 8000efc:	4603      	mov	r3, r0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff f9e2 	bl	80002c8 <__aeabi_ui2f>
 8000f04:	4602      	mov	r2, r0
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	615a      	str	r2, [r3, #20]
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f7ff ff78 	bl	8000e00 <Filter_Exp_Mov_Average>
 8000f10:	4603      	mov	r3, r0
 8000f12:	4618      	mov	r0, r3
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <Flash_Erase>:
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b088      	sub	sp, #32
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
 8000f22:	460b      	mov	r3, r1
 8000f24:	807b      	strh	r3, [r7, #2]
 8000f26:	2300      	movs	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	b672      	cpsid	i
 8000f2c:	bf00      	nop
 8000f2e:	f005 f993 	bl	8006258 <HAL_FLASH_Unlock>
 8000f32:	2300      	movs	r3, #0
 8000f34:	613b      	str	r3, [r7, #16]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	61bb      	str	r3, [r7, #24]
 8000f3a:	887b      	ldrh	r3, [r7, #2]
 8000f3c:	0a9b      	lsrs	r3, r3, #10
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	3301      	adds	r3, #1
 8000f42:	61fb      	str	r3, [r7, #28]
 8000f44:	f107 020c 	add.w	r2, r7, #12
 8000f48:	f107 0310 	add.w	r3, r7, #16
 8000f4c:	4611      	mov	r1, r2
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f005 fa6a 	bl	8006428 <HAL_FLASHEx_Erase>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d005      	beq.n	8000f66 <Flash_Erase+0x4c>
 8000f5a:	f005 f9a3 	bl	80062a4 <HAL_FLASH_Lock>
 8000f5e:	b662      	cpsie	i
 8000f60:	bf00      	nop
 8000f62:	2301      	movs	r3, #1
 8000f64:	e004      	b.n	8000f70 <Flash_Erase+0x56>
 8000f66:	f005 f99d 	bl	80062a4 <HAL_FLASH_Lock>
 8000f6a:	b662      	cpsie	i
 8000f6c:	bf00      	nop
 8000f6e:	2300      	movs	r3, #0
 8000f70:	4618      	mov	r0, r3
 8000f72:	3720      	adds	r7, #32
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <Flash_Write>:
 8000f78:	b5b0      	push	{r4, r5, r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	4613      	mov	r3, r2
 8000f84:	80fb      	strh	r3, [r7, #6]
 8000f86:	b672      	cpsid	i
 8000f88:	bf00      	nop
 8000f8a:	f005 f965 	bl	8006258 <HAL_FLASH_Unlock>
 8000f8e:	2300      	movs	r3, #0
 8000f90:	75bb      	strb	r3, [r7, #22]
 8000f92:	e019      	b.n	8000fc8 <Flash_Write+0x50>
 8000f94:	7dbb      	ldrb	r3, [r7, #22]
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	68ba      	ldr	r2, [r7, #8]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	881b      	ldrh	r3, [r3, #0]
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	461c      	mov	r4, r3
 8000fa4:	4615      	mov	r5, r2
 8000fa6:	4622      	mov	r2, r4
 8000fa8:	462b      	mov	r3, r5
 8000faa:	68f9      	ldr	r1, [r7, #12]
 8000fac:	2001      	movs	r0, #1
 8000fae:	f004 ffed 	bl	8005f8c <HAL_FLASH_Program>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	7dfb      	ldrb	r3, [r7, #23]
 8000fb8:	4413      	add	r3, r2
 8000fba:	75fb      	strb	r3, [r7, #23]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	3302      	adds	r3, #2
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	7dbb      	ldrb	r3, [r7, #22]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	75bb      	strb	r3, [r7, #22]
 8000fc8:	7dbb      	ldrb	r3, [r7, #22]
 8000fca:	b29a      	uxth	r2, r3
 8000fcc:	88fb      	ldrh	r3, [r7, #6]
 8000fce:	085b      	lsrs	r3, r3, #1
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d3de      	bcc.n	8000f94 <Flash_Write+0x1c>
 8000fd6:	f005 f965 	bl	80062a4 <HAL_FLASH_Lock>
 8000fda:	b662      	cpsie	i
 8000fdc:	bf00      	nop
 8000fde:	7dfb      	ldrb	r3, [r7, #23]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <Flash_Write+0x70>
 8000fe4:	7dfb      	ldrb	r3, [r7, #23]
 8000fe6:	e000      	b.n	8000fea <Flash_Write+0x72>
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	4618      	mov	r0, r3
 8000fec:	3718      	adds	r7, #24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bdb0      	pop	{r4, r5, r7, pc}

08000ff2 <Flash_Read>:
 8000ff2:	b480      	push	{r7}
 8000ff4:	b087      	sub	sp, #28
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	60f8      	str	r0, [r7, #12]
 8000ffa:	60b9      	str	r1, [r7, #8]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	80fb      	strh	r3, [r7, #6]
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]
 8001004:	e00c      	b.n	8001020 <Flash_Read+0x2e>
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	6819      	ldr	r1, [r3, #0]
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	68ba      	ldr	r2, [r7, #8]
 800100e:	4413      	add	r3, r2
 8001010:	b2ca      	uxtb	r2, r1
 8001012:	701a      	strb	r2, [r3, #0]
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	3301      	adds	r3, #1
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	3301      	adds	r3, #1
 800101e:	617b      	str	r3, [r7, #20]
 8001020:	88fb      	ldrh	r3, [r7, #6]
 8001022:	697a      	ldr	r2, [r7, #20]
 8001024:	429a      	cmp	r2, r3
 8001026:	dbee      	blt.n	8001006 <Flash_Read+0x14>
 8001028:	bf00      	nop
 800102a:	bf00      	nop
 800102c:	371c      	adds	r7, #28
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr

08001034 <Menu_Parmetr_Drow>:

//--------------------------------------------------------------------------------------------------------------------------------------------------------


//--------------------------------------------------------------------------------------------------------------------------------------------------------
void Menu_Parmetr_Drow(void *num_void, uint8_t x,uint8_t y,enum Type mode){
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	4608      	mov	r0, r1
 800103e:	4611      	mov	r1, r2
 8001040:	461a      	mov	r2, r3
 8001042:	4603      	mov	r3, r0
 8001044:	70fb      	strb	r3, [r7, #3]
 8001046:	460b      	mov	r3, r1
 8001048:	70bb      	strb	r3, [r7, #2]
 800104a:	4613      	mov	r3, r2
 800104c:	707b      	strb	r3, [r7, #1]
	switch(mode){
 800104e:	787b      	ldrb	r3, [r7, #1]
 8001050:	2b03      	cmp	r3, #3
 8001052:	f200 8177 	bhi.w	8001344 <Menu_Parmetr_Drow+0x310>
 8001056:	a201      	add	r2, pc, #4	; (adr r2, 800105c <Menu_Parmetr_Drow+0x28>)
 8001058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800105c:	0800106d 	.word	0x0800106d
 8001060:	08001185 	.word	0x08001185
 8001064:	0800124d 	.word	0x0800124d
 8001068:	08001317 	.word	0x08001317
		case INT:
			int num_int=*(int*)num_void;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	617b      	str	r3, [r7, #20]
			if(num_int<0){
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	2b00      	cmp	r3, #0
 8001076:	da0c      	bge.n	8001092 <Menu_Parmetr_Drow+0x5e>
				OLED_Set_Char_Cursor(&OLED1,x-1,y);
 8001078:	78fb      	ldrb	r3, [r7, #3]
 800107a:	b29b      	uxth	r3, r3
 800107c:	3b01      	subs	r3, #1
 800107e:	b29b      	uxth	r3, r3
 8001080:	78ba      	ldrb	r2, [r7, #2]
 8001082:	4619      	mov	r1, r3
 8001084:	48b1      	ldr	r0, [pc, #708]	; (800134c <Menu_Parmetr_Drow+0x318>)
 8001086:	f001 fa66 	bl	8002556 <OLED_Set_Char_Cursor>
				OLED_Send_Char(&OLED1,'-');
 800108a:	212d      	movs	r1, #45	; 0x2d
 800108c:	48af      	ldr	r0, [pc, #700]	; (800134c <Menu_Parmetr_Drow+0x318>)
 800108e:	f001 fabb 	bl	8002608 <OLED_Send_Char>
			}
			OLED_Set_Char_Cursor(&OLED1,x-1,y);
 8001092:	78fb      	ldrb	r3, [r7, #3]
 8001094:	b29b      	uxth	r3, r3
 8001096:	3b01      	subs	r3, #1
 8001098:	b29b      	uxth	r3, r3
 800109a:	78ba      	ldrb	r2, [r7, #2]
 800109c:	4619      	mov	r1, r3
 800109e:	48ab      	ldr	r0, [pc, #684]	; (800134c <Menu_Parmetr_Drow+0x318>)
 80010a0:	f001 fa59 	bl	8002556 <OLED_Set_Char_Cursor>
			if(num_int<0){
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	da09      	bge.n	80010be <Menu_Parmetr_Drow+0x8a>
				OLED_Send_Char(&OLED1,'-');
 80010aa:	212d      	movs	r1, #45	; 0x2d
 80010ac:	48a7      	ldr	r0, [pc, #668]	; (800134c <Menu_Parmetr_Drow+0x318>)
 80010ae:	f001 faab 	bl	8002608 <OLED_Send_Char>
				num_int=abs(num_int);
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	bfb8      	it	lt
 80010b8:	425b      	neglt	r3, r3
 80010ba:	617b      	str	r3, [r7, #20]
 80010bc:	e003      	b.n	80010c6 <Menu_Parmetr_Drow+0x92>
			}
			else
				OLED_Send_Char(&OLED1,' ');
 80010be:	2120      	movs	r1, #32
 80010c0:	48a2      	ldr	r0, [pc, #648]	; (800134c <Menu_Parmetr_Drow+0x318>)
 80010c2:	f001 faa1 	bl	8002608 <OLED_Send_Char>
			OLED_Send_Char(&OLED1,(num_int/1000)%10+'0');
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	4aa1      	ldr	r2, [pc, #644]	; (8001350 <Menu_Parmetr_Drow+0x31c>)
 80010ca:	fb82 1203 	smull	r1, r2, r2, r3
 80010ce:	1192      	asrs	r2, r2, #6
 80010d0:	17db      	asrs	r3, r3, #31
 80010d2:	1ad2      	subs	r2, r2, r3
 80010d4:	4b9f      	ldr	r3, [pc, #636]	; (8001354 <Menu_Parmetr_Drow+0x320>)
 80010d6:	fb83 1302 	smull	r1, r3, r3, r2
 80010da:	1099      	asrs	r1, r3, #2
 80010dc:	17d3      	asrs	r3, r2, #31
 80010de:	1ac9      	subs	r1, r1, r3
 80010e0:	460b      	mov	r3, r1
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	440b      	add	r3, r1
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	1ad1      	subs	r1, r2, r3
 80010ea:	b2cb      	uxtb	r3, r1
 80010ec:	3330      	adds	r3, #48	; 0x30
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	4619      	mov	r1, r3
 80010f2:	4896      	ldr	r0, [pc, #600]	; (800134c <Menu_Parmetr_Drow+0x318>)
 80010f4:	f001 fa88 	bl	8002608 <OLED_Send_Char>
			OLED_Send_Char(&OLED1,(num_int/100)%10+'0');
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	4a97      	ldr	r2, [pc, #604]	; (8001358 <Menu_Parmetr_Drow+0x324>)
 80010fc:	fb82 1203 	smull	r1, r2, r2, r3
 8001100:	1152      	asrs	r2, r2, #5
 8001102:	17db      	asrs	r3, r3, #31
 8001104:	1ad2      	subs	r2, r2, r3
 8001106:	4b93      	ldr	r3, [pc, #588]	; (8001354 <Menu_Parmetr_Drow+0x320>)
 8001108:	fb83 1302 	smull	r1, r3, r3, r2
 800110c:	1099      	asrs	r1, r3, #2
 800110e:	17d3      	asrs	r3, r2, #31
 8001110:	1ac9      	subs	r1, r1, r3
 8001112:	460b      	mov	r3, r1
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	440b      	add	r3, r1
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	1ad1      	subs	r1, r2, r3
 800111c:	b2cb      	uxtb	r3, r1
 800111e:	3330      	adds	r3, #48	; 0x30
 8001120:	b2db      	uxtb	r3, r3
 8001122:	4619      	mov	r1, r3
 8001124:	4889      	ldr	r0, [pc, #548]	; (800134c <Menu_Parmetr_Drow+0x318>)
 8001126:	f001 fa6f 	bl	8002608 <OLED_Send_Char>
			OLED_Send_Char(&OLED1,(num_int/10)%10+'0');
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	4a89      	ldr	r2, [pc, #548]	; (8001354 <Menu_Parmetr_Drow+0x320>)
 800112e:	fb82 1203 	smull	r1, r2, r2, r3
 8001132:	1092      	asrs	r2, r2, #2
 8001134:	17db      	asrs	r3, r3, #31
 8001136:	1ad2      	subs	r2, r2, r3
 8001138:	4b86      	ldr	r3, [pc, #536]	; (8001354 <Menu_Parmetr_Drow+0x320>)
 800113a:	fb83 1302 	smull	r1, r3, r3, r2
 800113e:	1099      	asrs	r1, r3, #2
 8001140:	17d3      	asrs	r3, r2, #31
 8001142:	1ac9      	subs	r1, r1, r3
 8001144:	460b      	mov	r3, r1
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	440b      	add	r3, r1
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	1ad1      	subs	r1, r2, r3
 800114e:	b2cb      	uxtb	r3, r1
 8001150:	3330      	adds	r3, #48	; 0x30
 8001152:	b2db      	uxtb	r3, r3
 8001154:	4619      	mov	r1, r3
 8001156:	487d      	ldr	r0, [pc, #500]	; (800134c <Menu_Parmetr_Drow+0x318>)
 8001158:	f001 fa56 	bl	8002608 <OLED_Send_Char>
			OLED_Send_Char(&OLED1,(num_int)%10+'0');
 800115c:	697a      	ldr	r2, [r7, #20]
 800115e:	4b7d      	ldr	r3, [pc, #500]	; (8001354 <Menu_Parmetr_Drow+0x320>)
 8001160:	fb83 1302 	smull	r1, r3, r3, r2
 8001164:	1099      	asrs	r1, r3, #2
 8001166:	17d3      	asrs	r3, r2, #31
 8001168:	1ac9      	subs	r1, r1, r3
 800116a:	460b      	mov	r3, r1
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	440b      	add	r3, r1
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	1ad1      	subs	r1, r2, r3
 8001174:	b2cb      	uxtb	r3, r1
 8001176:	3330      	adds	r3, #48	; 0x30
 8001178:	b2db      	uxtb	r3, r3
 800117a:	4619      	mov	r1, r3
 800117c:	4873      	ldr	r0, [pc, #460]	; (800134c <Menu_Parmetr_Drow+0x318>)
 800117e:	f001 fa43 	bl	8002608 <OLED_Send_Char>
		break;
 8001182:	e0df      	b.n	8001344 <Menu_Parmetr_Drow+0x310>
		case UINT8:
			uint8_t *num_8=num_void;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	60bb      	str	r3, [r7, #8]
			OLED_Set_Char_Cursor(&OLED1,x,y);
 8001188:	78fb      	ldrb	r3, [r7, #3]
 800118a:	b29b      	uxth	r3, r3
 800118c:	78ba      	ldrb	r2, [r7, #2]
 800118e:	4619      	mov	r1, r3
 8001190:	486e      	ldr	r0, [pc, #440]	; (800134c <Menu_Parmetr_Drow+0x318>)
 8001192:	f001 f9e0 	bl	8002556 <OLED_Set_Char_Cursor>
			OLED_Send_Char(&OLED1,(*num_8/1000)%10+'0');
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	4a6d      	ldr	r2, [pc, #436]	; (8001350 <Menu_Parmetr_Drow+0x31c>)
 800119c:	fb82 1203 	smull	r1, r2, r2, r3
 80011a0:	1192      	asrs	r2, r2, #6
 80011a2:	17db      	asrs	r3, r3, #31
 80011a4:	1ad2      	subs	r2, r2, r3
 80011a6:	4b6b      	ldr	r3, [pc, #428]	; (8001354 <Menu_Parmetr_Drow+0x320>)
 80011a8:	fb83 1302 	smull	r1, r3, r3, r2
 80011ac:	1099      	asrs	r1, r3, #2
 80011ae:	17d3      	asrs	r3, r2, #31
 80011b0:	1ac9      	subs	r1, r1, r3
 80011b2:	460b      	mov	r3, r1
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	440b      	add	r3, r1
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	1ad1      	subs	r1, r2, r3
 80011bc:	b2cb      	uxtb	r3, r1
 80011be:	3330      	adds	r3, #48	; 0x30
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	4619      	mov	r1, r3
 80011c4:	4861      	ldr	r0, [pc, #388]	; (800134c <Menu_Parmetr_Drow+0x318>)
 80011c6:	f001 fa1f 	bl	8002608 <OLED_Send_Char>
			OLED_Send_Char(&OLED1,(*num_8/100)%10+'0');
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	4a62      	ldr	r2, [pc, #392]	; (8001358 <Menu_Parmetr_Drow+0x324>)
 80011d0:	fba2 2303 	umull	r2, r3, r2, r3
 80011d4:	095b      	lsrs	r3, r3, #5
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	4b60      	ldr	r3, [pc, #384]	; (800135c <Menu_Parmetr_Drow+0x328>)
 80011da:	fba3 1302 	umull	r1, r3, r3, r2
 80011de:	08d9      	lsrs	r1, r3, #3
 80011e0:	460b      	mov	r3, r1
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	440b      	add	r3, r1
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	3330      	adds	r3, #48	; 0x30
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	4619      	mov	r1, r3
 80011f2:	4856      	ldr	r0, [pc, #344]	; (800134c <Menu_Parmetr_Drow+0x318>)
 80011f4:	f001 fa08 	bl	8002608 <OLED_Send_Char>
			OLED_Send_Char(&OLED1,(*num_8/10)%10+'0');
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	4a57      	ldr	r2, [pc, #348]	; (800135c <Menu_Parmetr_Drow+0x328>)
 80011fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001202:	08db      	lsrs	r3, r3, #3
 8001204:	b2da      	uxtb	r2, r3
 8001206:	4b55      	ldr	r3, [pc, #340]	; (800135c <Menu_Parmetr_Drow+0x328>)
 8001208:	fba3 1302 	umull	r1, r3, r3, r2
 800120c:	08d9      	lsrs	r1, r3, #3
 800120e:	460b      	mov	r3, r1
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	440b      	add	r3, r1
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	b2db      	uxtb	r3, r3
 800121a:	3330      	adds	r3, #48	; 0x30
 800121c:	b2db      	uxtb	r3, r3
 800121e:	4619      	mov	r1, r3
 8001220:	484a      	ldr	r0, [pc, #296]	; (800134c <Menu_Parmetr_Drow+0x318>)
 8001222:	f001 f9f1 	bl	8002608 <OLED_Send_Char>
			OLED_Send_Char(&OLED1,(*num_8)%10+'0');
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	781a      	ldrb	r2, [r3, #0]
 800122a:	4b4c      	ldr	r3, [pc, #304]	; (800135c <Menu_Parmetr_Drow+0x328>)
 800122c:	fba3 1302 	umull	r1, r3, r3, r2
 8001230:	08d9      	lsrs	r1, r3, #3
 8001232:	460b      	mov	r3, r1
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	440b      	add	r3, r1
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	b2db      	uxtb	r3, r3
 800123e:	3330      	adds	r3, #48	; 0x30
 8001240:	b2db      	uxtb	r3, r3
 8001242:	4619      	mov	r1, r3
 8001244:	4841      	ldr	r0, [pc, #260]	; (800134c <Menu_Parmetr_Drow+0x318>)
 8001246:	f001 f9df 	bl	8002608 <OLED_Send_Char>
		break;
 800124a:	e07b      	b.n	8001344 <Menu_Parmetr_Drow+0x310>
		case UINT16:
			uint16_t *num_16=num_void;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	60fb      	str	r3, [r7, #12]
			OLED_Set_Char_Cursor(&OLED1,x,y);
 8001250:	78fb      	ldrb	r3, [r7, #3]
 8001252:	b29b      	uxth	r3, r3
 8001254:	78ba      	ldrb	r2, [r7, #2]
 8001256:	4619      	mov	r1, r3
 8001258:	483c      	ldr	r0, [pc, #240]	; (800134c <Menu_Parmetr_Drow+0x318>)
 800125a:	f001 f97c 	bl	8002556 <OLED_Set_Char_Cursor>
			OLED_Send_Char(&OLED1,(*num_16/1000)%10+'0');
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	881b      	ldrh	r3, [r3, #0]
 8001262:	4a3b      	ldr	r2, [pc, #236]	; (8001350 <Menu_Parmetr_Drow+0x31c>)
 8001264:	fba2 2303 	umull	r2, r3, r2, r3
 8001268:	099b      	lsrs	r3, r3, #6
 800126a:	b29a      	uxth	r2, r3
 800126c:	4b3b      	ldr	r3, [pc, #236]	; (800135c <Menu_Parmetr_Drow+0x328>)
 800126e:	fba3 1302 	umull	r1, r3, r3, r2
 8001272:	08d9      	lsrs	r1, r3, #3
 8001274:	460b      	mov	r3, r1
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	440b      	add	r3, r1
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	b29b      	uxth	r3, r3
 8001280:	b2db      	uxtb	r3, r3
 8001282:	3330      	adds	r3, #48	; 0x30
 8001284:	b2db      	uxtb	r3, r3
 8001286:	4619      	mov	r1, r3
 8001288:	4830      	ldr	r0, [pc, #192]	; (800134c <Menu_Parmetr_Drow+0x318>)
 800128a:	f001 f9bd 	bl	8002608 <OLED_Send_Char>
			OLED_Send_Char(&OLED1,(*num_16/100)%10+'0');
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	881b      	ldrh	r3, [r3, #0]
 8001292:	4a31      	ldr	r2, [pc, #196]	; (8001358 <Menu_Parmetr_Drow+0x324>)
 8001294:	fba2 2303 	umull	r2, r3, r2, r3
 8001298:	095b      	lsrs	r3, r3, #5
 800129a:	b29a      	uxth	r2, r3
 800129c:	4b2f      	ldr	r3, [pc, #188]	; (800135c <Menu_Parmetr_Drow+0x328>)
 800129e:	fba3 1302 	umull	r1, r3, r3, r2
 80012a2:	08d9      	lsrs	r1, r3, #3
 80012a4:	460b      	mov	r3, r1
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	440b      	add	r3, r1
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	3330      	adds	r3, #48	; 0x30
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	4619      	mov	r1, r3
 80012b8:	4824      	ldr	r0, [pc, #144]	; (800134c <Menu_Parmetr_Drow+0x318>)
 80012ba:	f001 f9a5 	bl	8002608 <OLED_Send_Char>
			OLED_Send_Char(&OLED1,(*num_16/10)%10+'0');
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	881b      	ldrh	r3, [r3, #0]
 80012c2:	4a26      	ldr	r2, [pc, #152]	; (800135c <Menu_Parmetr_Drow+0x328>)
 80012c4:	fba2 2303 	umull	r2, r3, r2, r3
 80012c8:	08db      	lsrs	r3, r3, #3
 80012ca:	b29a      	uxth	r2, r3
 80012cc:	4b23      	ldr	r3, [pc, #140]	; (800135c <Menu_Parmetr_Drow+0x328>)
 80012ce:	fba3 1302 	umull	r1, r3, r3, r2
 80012d2:	08d9      	lsrs	r1, r3, #3
 80012d4:	460b      	mov	r3, r1
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	440b      	add	r3, r1
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	b29b      	uxth	r3, r3
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	3330      	adds	r3, #48	; 0x30
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	4619      	mov	r1, r3
 80012e8:	4818      	ldr	r0, [pc, #96]	; (800134c <Menu_Parmetr_Drow+0x318>)
 80012ea:	f001 f98d 	bl	8002608 <OLED_Send_Char>
			OLED_Send_Char(&OLED1,(*num_16)%10+'0');
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	881a      	ldrh	r2, [r3, #0]
 80012f2:	4b1a      	ldr	r3, [pc, #104]	; (800135c <Menu_Parmetr_Drow+0x328>)
 80012f4:	fba3 1302 	umull	r1, r3, r3, r2
 80012f8:	08d9      	lsrs	r1, r3, #3
 80012fa:	460b      	mov	r3, r1
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	440b      	add	r3, r1
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	b29b      	uxth	r3, r3
 8001306:	b2db      	uxtb	r3, r3
 8001308:	3330      	adds	r3, #48	; 0x30
 800130a:	b2db      	uxtb	r3, r3
 800130c:	4619      	mov	r1, r3
 800130e:	480f      	ldr	r0, [pc, #60]	; (800134c <Menu_Parmetr_Drow+0x318>)
 8001310:	f001 f97a 	bl	8002608 <OLED_Send_Char>
		break;
 8001314:	e016      	b.n	8001344 <Menu_Parmetr_Drow+0x310>
		case BOOL:
			uint8_t *num=num_void;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	613b      	str	r3, [r7, #16]
			OLED_Set_Char_Cursor(&OLED1,x,y);
 800131a:	78fb      	ldrb	r3, [r7, #3]
 800131c:	b29b      	uxth	r3, r3
 800131e:	78ba      	ldrb	r2, [r7, #2]
 8001320:	4619      	mov	r1, r3
 8001322:	480a      	ldr	r0, [pc, #40]	; (800134c <Menu_Parmetr_Drow+0x318>)
 8001324:	f001 f917 	bl	8002556 <OLED_Set_Char_Cursor>
			if(*num==1){
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d104      	bne.n	800133a <Menu_Parmetr_Drow+0x306>
				OLED_Send_String(&OLED1,"ON ");
 8001330:	490b      	ldr	r1, [pc, #44]	; (8001360 <Menu_Parmetr_Drow+0x32c>)
 8001332:	4806      	ldr	r0, [pc, #24]	; (800134c <Menu_Parmetr_Drow+0x318>)
 8001334:	f001 f9c8 	bl	80026c8 <OLED_Send_String>
			}else
				OLED_Send_String(&OLED1,"OFF");
		break;
 8001338:	e003      	b.n	8001342 <Menu_Parmetr_Drow+0x30e>
				OLED_Send_String(&OLED1,"OFF");
 800133a:	490a      	ldr	r1, [pc, #40]	; (8001364 <Menu_Parmetr_Drow+0x330>)
 800133c:	4803      	ldr	r0, [pc, #12]	; (800134c <Menu_Parmetr_Drow+0x318>)
 800133e:	f001 f9c3 	bl	80026c8 <OLED_Send_String>
		break;
 8001342:	bf00      	nop
	}
}
 8001344:	bf00      	nop
 8001346:	3718      	adds	r7, #24
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000768 	.word	0x20000768
 8001350:	10624dd3 	.word	0x10624dd3
 8001354:	66666667 	.word	0x66666667
 8001358:	51eb851f 	.word	0x51eb851f
 800135c:	cccccccd 	.word	0xcccccccd
 8001360:	08008f30 	.word	0x08008f30
 8001364:	08008f34 	.word	0x08008f34

08001368 <Menu_String_Drow>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void Menu_String_Drow(char *str, uint8_t x, uint8_t y){
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	70fb      	strb	r3, [r7, #3]
 8001374:	4613      	mov	r3, r2
 8001376:	70bb      	strb	r3, [r7, #2]
	OLED_Set_Char_Cursor(&OLED1,x,y);
 8001378:	78fb      	ldrb	r3, [r7, #3]
 800137a:	b29b      	uxth	r3, r3
 800137c:	78ba      	ldrb	r2, [r7, #2]
 800137e:	4619      	mov	r1, r3
 8001380:	4805      	ldr	r0, [pc, #20]	; (8001398 <Menu_String_Drow+0x30>)
 8001382:	f001 f8e8 	bl	8002556 <OLED_Set_Char_Cursor>
	OLED_Send_String(&OLED1, str);
 8001386:	6879      	ldr	r1, [r7, #4]
 8001388:	4803      	ldr	r0, [pc, #12]	; (8001398 <Menu_String_Drow+0x30>)
 800138a:	f001 f99d 	bl	80026c8 <OLED_Send_String>

}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000768 	.word	0x20000768

0800139c <Menu_List_Element_Drow>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void Menu_List_Element_Drow(struct Menu_List_Element_Vector *self, uint8_t y){
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	460b      	mov	r3, r1
 80013a6:	70fb      	strb	r3, [r7, #3]
	OLED_Clear_Line(&OLED1,y);
 80013a8:	78fb      	ldrb	r3, [r7, #3]
 80013aa:	4619      	mov	r1, r3
 80013ac:	480a      	ldr	r0, [pc, #40]	; (80013d8 <Menu_List_Element_Drow+0x3c>)
 80013ae:	f001 f96d 	bl	800268c <OLED_Clear_Line>
	Menu_String_Drow(self->name, 1, y);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	78fa      	ldrb	r2, [r7, #3]
 80013b8:	2101      	movs	r1, #1
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff ffd4 	bl	8001368 <Menu_String_Drow>
	Menu_Parmetr_Drow(self->parametr, 16, y, self->mode);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6918      	ldr	r0, [r3, #16]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	7b1b      	ldrb	r3, [r3, #12]
 80013c8:	78fa      	ldrb	r2, [r7, #3]
 80013ca:	2110      	movs	r1, #16
 80013cc:	f7ff fe32 	bl	8001034 <Menu_Parmetr_Drow>
}
 80013d0:	bf00      	nop
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000768 	.word	0x20000768

080013dc <Menu_Center_String_Drow>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void Menu_Center_String_Drow(char *str, uint8_t y,uint8_t *mas){
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	460b      	mov	r3, r1
 80013e6:	607a      	str	r2, [r7, #4]
 80013e8:	72fb      	strb	r3, [r7, #11]
	if(mas!=NULL){
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d020      	beq.n	8001432 <Menu_Center_String_Drow+0x56>
		*mas =strlen(str);
 80013f0:	68f8      	ldr	r0, [r7, #12]
 80013f2:	f7fe feab 	bl	800014c <strlen>
 80013f6:	4603      	mov	r3, r0
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	701a      	strb	r2, [r3, #0]
		*(mas+1)=(21-*mas)/2;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	f1c3 0315 	rsb	r3, r3, #21
 8001406:	0fda      	lsrs	r2, r3, #31
 8001408:	4413      	add	r3, r2
 800140a:	105b      	asrs	r3, r3, #1
 800140c:	461a      	mov	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	3301      	adds	r3, #1
 8001412:	b2d2      	uxtb	r2, r2
 8001414:	701a      	strb	r2, [r3, #0]
		OLED_Clear_Line(&OLED1,y);
 8001416:	7afb      	ldrb	r3, [r7, #11]
 8001418:	4619      	mov	r1, r3
 800141a:	4811      	ldr	r0, [pc, #68]	; (8001460 <Menu_Center_String_Drow+0x84>)
 800141c:	f001 f936 	bl	800268c <OLED_Clear_Line>
		Menu_String_Drow(str, *(mas+1), y);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3301      	adds	r3, #1
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	7afa      	ldrb	r2, [r7, #11]
 8001428:	4619      	mov	r1, r3
 800142a:	68f8      	ldr	r0, [r7, #12]
 800142c:	f7ff ff9c 	bl	8001368 <Menu_String_Drow>
	}
	else{
		OLED_Clear_Line(&OLED1,y);
		Menu_String_Drow(str, (21-strlen(str))/2, y);
	}
}
 8001430:	e011      	b.n	8001456 <Menu_Center_String_Drow+0x7a>
		OLED_Clear_Line(&OLED1,y);
 8001432:	7afb      	ldrb	r3, [r7, #11]
 8001434:	4619      	mov	r1, r3
 8001436:	480a      	ldr	r0, [pc, #40]	; (8001460 <Menu_Center_String_Drow+0x84>)
 8001438:	f001 f928 	bl	800268c <OLED_Clear_Line>
		Menu_String_Drow(str, (21-strlen(str))/2, y);
 800143c:	68f8      	ldr	r0, [r7, #12]
 800143e:	f7fe fe85 	bl	800014c <strlen>
 8001442:	4603      	mov	r3, r0
 8001444:	f1c3 0315 	rsb	r3, r3, #21
 8001448:	085b      	lsrs	r3, r3, #1
 800144a:	b2db      	uxtb	r3, r3
 800144c:	7afa      	ldrb	r2, [r7, #11]
 800144e:	4619      	mov	r1, r3
 8001450:	68f8      	ldr	r0, [r7, #12]
 8001452:	f7ff ff89 	bl	8001368 <Menu_String_Drow>
}
 8001456:	bf00      	nop
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	20000768 	.word	0x20000768

08001464 <Menu_List_Element_Vector_Drow>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void Menu_List_Element_Vector_Drow(struct Menu_List_Element_Vector *self, uint8_t start_point, uint8_t quantity,uint8_t Ress){
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	4608      	mov	r0, r1
 800146e:	4611      	mov	r1, r2
 8001470:	461a      	mov	r2, r3
 8001472:	4603      	mov	r3, r0
 8001474:	70fb      	strb	r3, [r7, #3]
 8001476:	460b      	mov	r3, r1
 8001478:	70bb      	strb	r3, [r7, #2]
 800147a:	4613      	mov	r3, r2
 800147c:	707b      	strb	r3, [r7, #1]
	static uint8_t  PRW_Start_Point=254;
	if(Ress==1)
 800147e:	787b      	ldrb	r3, [r7, #1]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d102      	bne.n	800148a <Menu_List_Element_Vector_Drow+0x26>
		PRW_Start_Point=254;
 8001484:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <Menu_List_Element_Vector_Drow+0x90>)
 8001486:	22fe      	movs	r2, #254	; 0xfe
 8001488:	701a      	strb	r2, [r3, #0]
	if(start_point!=PRW_Start_Point){
 800148a:	4b1a      	ldr	r3, [pc, #104]	; (80014f4 <Menu_List_Element_Vector_Drow+0x90>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	78fa      	ldrb	r2, [r7, #3]
 8001490:	429a      	cmp	r2, r3
 8001492:	d02a      	beq.n	80014ea <Menu_List_Element_Vector_Drow+0x86>
		while(self->ID!=start_point)
 8001494:	e002      	b.n	800149c <Menu_List_Element_Vector_Drow+0x38>
			self=self->next;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	607b      	str	r3, [r7, #4]
		while(self->ID!=start_point)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	791b      	ldrb	r3, [r3, #4]
 80014a0:	78fa      	ldrb	r2, [r7, #3]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d1f7      	bne.n	8001496 <Menu_List_Element_Vector_Drow+0x32>
		for(uint8_t i=0;i<quantity;i++){
 80014a6:	2300      	movs	r3, #0
 80014a8:	73fb      	strb	r3, [r7, #15]
 80014aa:	e017      	b.n	80014dc <Menu_List_Element_Vector_Drow+0x78>
			if(self!=NULL){
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d00a      	beq.n	80014c8 <Menu_List_Element_Vector_Drow+0x64>
				Menu_List_Element_Drow(self, i+1);
 80014b2:	7bfb      	ldrb	r3, [r7, #15]
 80014b4:	3301      	adds	r3, #1
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	4619      	mov	r1, r3
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff ff6e 	bl	800139c <Menu_List_Element_Drow>
				self=self->next;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	607b      	str	r3, [r7, #4]
 80014c6:	e006      	b.n	80014d6 <Menu_List_Element_Vector_Drow+0x72>
			}
			else
				OLED_Clear_Line(&OLED1,i+1);
 80014c8:	7bfb      	ldrb	r3, [r7, #15]
 80014ca:	3301      	adds	r3, #1
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	4619      	mov	r1, r3
 80014d0:	4809      	ldr	r0, [pc, #36]	; (80014f8 <Menu_List_Element_Vector_Drow+0x94>)
 80014d2:	f001 f8db 	bl	800268c <OLED_Clear_Line>
		for(uint8_t i=0;i<quantity;i++){
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
 80014d8:	3301      	adds	r3, #1
 80014da:	73fb      	strb	r3, [r7, #15]
 80014dc:	7bfa      	ldrb	r2, [r7, #15]
 80014de:	78bb      	ldrb	r3, [r7, #2]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d3e3      	bcc.n	80014ac <Menu_List_Element_Vector_Drow+0x48>
		}
		PRW_Start_Point=start_point;
 80014e4:	4a03      	ldr	r2, [pc, #12]	; (80014f4 <Menu_List_Element_Vector_Drow+0x90>)
 80014e6:	78fb      	ldrb	r3, [r7, #3]
 80014e8:	7013      	strb	r3, [r2, #0]
	}

}
 80014ea:	bf00      	nop
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000000 	.word	0x20000000
 80014f8:	20000768 	.word	0x20000768

080014fc <Menu_List_Vector_Size>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
uint8_t Menu_List_Vector_Size(struct Menu_List_Element_Vector *self){
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
	uint8_t MAX_ID=0;
 8001504:	2300      	movs	r3, #0
 8001506:	73fb      	strb	r3, [r7, #15]
	while(self->next!=NULL){
 8001508:	e005      	b.n	8001516 <Menu_List_Vector_Size+0x1a>
			self=self->next;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	607b      	str	r3, [r7, #4]
			MAX_ID++;
 8001510:	7bfb      	ldrb	r3, [r7, #15]
 8001512:	3301      	adds	r3, #1
 8001514:	73fb      	strb	r3, [r7, #15]
	while(self->next!=NULL){
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1f5      	bne.n	800150a <Menu_List_Vector_Size+0xe>
	}
	return MAX_ID++;
 800151e:	7bfb      	ldrb	r3, [r7, #15]
 8001520:	1c5a      	adds	r2, r3, #1
 8001522:	73fa      	strb	r2, [r7, #15]
}
 8001524:	4618      	mov	r0, r3
 8001526:	3714      	adds	r7, #20
 8001528:	46bd      	mov	sp, r7
 800152a:	bc80      	pop	{r7}
 800152c:	4770      	bx	lr
	...

08001530 <OLED_Set_Menu_Cursor>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void OLED_Set_Menu_Cursor(struct OLED *self, uint8_t x, uint8_t y,uint8_t Ress){
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	4608      	mov	r0, r1
 800153a:	4611      	mov	r1, r2
 800153c:	461a      	mov	r2, r3
 800153e:	4603      	mov	r3, r0
 8001540:	70fb      	strb	r3, [r7, #3]
 8001542:	460b      	mov	r3, r1
 8001544:	70bb      	strb	r3, [r7, #2]
 8001546:	4613      	mov	r3, r2
 8001548:	707b      	strb	r3, [r7, #1]
	static uint8_t Prew_Pos_x=0,Prew_Pos_y=254;
	if(Ress==1)
 800154a:	787b      	ldrb	r3, [r7, #1]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d102      	bne.n	8001556 <OLED_Set_Menu_Cursor+0x26>
		Prew_Pos_y=254;
 8001550:	4b17      	ldr	r3, [pc, #92]	; (80015b0 <OLED_Set_Menu_Cursor+0x80>)
 8001552:	22fe      	movs	r2, #254	; 0xfe
 8001554:	701a      	strb	r2, [r3, #0]
	if(Prew_Pos_x!=x||Prew_Pos_y!=y){
 8001556:	4b17      	ldr	r3, [pc, #92]	; (80015b4 <OLED_Set_Menu_Cursor+0x84>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	78fa      	ldrb	r2, [r7, #3]
 800155c:	429a      	cmp	r2, r3
 800155e:	d104      	bne.n	800156a <OLED_Set_Menu_Cursor+0x3a>
 8001560:	4b13      	ldr	r3, [pc, #76]	; (80015b0 <OLED_Set_Menu_Cursor+0x80>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	78ba      	ldrb	r2, [r7, #2]
 8001566:	429a      	cmp	r2, r3
 8001568:	d01d      	beq.n	80015a6 <OLED_Set_Menu_Cursor+0x76>
		OLED_Set_Char_Cursor(&OLED1,Prew_Pos_x,Prew_Pos_y);
 800156a:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <OLED_Set_Menu_Cursor+0x84>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	b29b      	uxth	r3, r3
 8001570:	4a0f      	ldr	r2, [pc, #60]	; (80015b0 <OLED_Set_Menu_Cursor+0x80>)
 8001572:	7812      	ldrb	r2, [r2, #0]
 8001574:	4619      	mov	r1, r3
 8001576:	4810      	ldr	r0, [pc, #64]	; (80015b8 <OLED_Set_Menu_Cursor+0x88>)
 8001578:	f000 ffed 	bl	8002556 <OLED_Set_Char_Cursor>
		OLED_Send_Char(&OLED1,' ');
 800157c:	2120      	movs	r1, #32
 800157e:	480e      	ldr	r0, [pc, #56]	; (80015b8 <OLED_Set_Menu_Cursor+0x88>)
 8001580:	f001 f842 	bl	8002608 <OLED_Send_Char>
		OLED_Set_Char_Cursor(&OLED1,x,y);
 8001584:	78fb      	ldrb	r3, [r7, #3]
 8001586:	b29b      	uxth	r3, r3
 8001588:	78ba      	ldrb	r2, [r7, #2]
 800158a:	4619      	mov	r1, r3
 800158c:	480a      	ldr	r0, [pc, #40]	; (80015b8 <OLED_Set_Menu_Cursor+0x88>)
 800158e:	f000 ffe2 	bl	8002556 <OLED_Set_Char_Cursor>
		OLED_Send_Char(&OLED1,'>');
 8001592:	213e      	movs	r1, #62	; 0x3e
 8001594:	4808      	ldr	r0, [pc, #32]	; (80015b8 <OLED_Set_Menu_Cursor+0x88>)
 8001596:	f001 f837 	bl	8002608 <OLED_Send_Char>
		Prew_Pos_x=x;
 800159a:	4a06      	ldr	r2, [pc, #24]	; (80015b4 <OLED_Set_Menu_Cursor+0x84>)
 800159c:	78fb      	ldrb	r3, [r7, #3]
 800159e:	7013      	strb	r3, [r2, #0]
		Prew_Pos_y=y;
 80015a0:	4a03      	ldr	r2, [pc, #12]	; (80015b0 <OLED_Set_Menu_Cursor+0x80>)
 80015a2:	78bb      	ldrb	r3, [r7, #2]
 80015a4:	7013      	strb	r3, [r2, #0]
	}
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000001 	.word	0x20000001
 80015b4:	200004f4 	.word	0x200004f4
 80015b8:	20000768 	.word	0x20000768

080015bc <Value_Changing>:

void Value_Changing(void *parametr, uint8_t step, enum Type mode, uint16_t min, uint16_t max, struct Incoder *Incoder){
 80015bc:	b590      	push	{r4, r7, lr}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	4608      	mov	r0, r1
 80015c6:	4611      	mov	r1, r2
 80015c8:	461a      	mov	r2, r3
 80015ca:	4603      	mov	r3, r0
 80015cc:	70fb      	strb	r3, [r7, #3]
 80015ce:	460b      	mov	r3, r1
 80015d0:	70bb      	strb	r3, [r7, #2]
 80015d2:	4613      	mov	r3, r2
 80015d4:	803b      	strh	r3, [r7, #0]
	switch(mode){
 80015d6:	78bb      	ldrb	r3, [r7, #2]
 80015d8:	2b03      	cmp	r3, #3
 80015da:	f200 8098 	bhi.w	800170e <Value_Changing+0x152>
 80015de:	a201      	add	r2, pc, #4	; (adr r2, 80015e4 <Value_Changing+0x28>)
 80015e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015e4:	080015f5 	.word	0x080015f5
 80015e8:	0800160f 	.word	0x0800160f
 80015ec:	0800167d 	.word	0x0800167d
 80015f0:	080016e7 	.word	0x080016e7
		case INT:
			*(int*)parametr+=Incoder_Get_Rotary_Switch_Buffer(Incoder)*step;
 80015f4:	69f8      	ldr	r0, [r7, #28]
 80015f6:	f7ff fb4d 	bl	8000c94 <Incoder_Get_Rotary_Switch_Buffer>
 80015fa:	4602      	mov	r2, r0
 80015fc:	78fb      	ldrb	r3, [r7, #3]
 80015fe:	fb03 f202 	mul.w	r2, r3, r2
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	441a      	add	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	601a      	str	r2, [r3, #0]
		break;
 800160c:	e07f      	b.n	800170e <Value_Changing+0x152>
		case UINT8:
			if((*(uint8_t*)parametr+Incoder_Get_Rotary_Switch_Buffer(Incoder)*step)<min)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	461c      	mov	r4, r3
 8001614:	69f8      	ldr	r0, [r7, #28]
 8001616:	f7ff fb3d 	bl	8000c94 <Incoder_Get_Rotary_Switch_Buffer>
 800161a:	4602      	mov	r2, r0
 800161c:	78fb      	ldrb	r3, [r7, #3]
 800161e:	fb02 f303 	mul.w	r3, r2, r3
 8001622:	18e2      	adds	r2, r4, r3
 8001624:	883b      	ldrh	r3, [r7, #0]
 8001626:	429a      	cmp	r2, r3
 8001628:	da04      	bge.n	8001634 <Value_Changing+0x78>
				*(uint8_t*)parametr=(uint8_t)min;
 800162a:	883b      	ldrh	r3, [r7, #0]
 800162c:	b2da      	uxtb	r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	701a      	strb	r2, [r3, #0]
			else if ((*(uint8_t*)parametr+Incoder_Get_Rotary_Switch_Buffer(Incoder)*step)>max)
				*(uint8_t*)parametr=(uint8_t)max;
			else
				*(uint8_t*)parametr+=(uint8_t)Incoder_Get_Rotary_Switch_Buffer(Incoder)*step;
		break;
 8001632:	e06c      	b.n	800170e <Value_Changing+0x152>
			else if ((*(uint8_t*)parametr+Incoder_Get_Rotary_Switch_Buffer(Incoder)*step)>max)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	461c      	mov	r4, r3
 800163a:	69f8      	ldr	r0, [r7, #28]
 800163c:	f7ff fb2a 	bl	8000c94 <Incoder_Get_Rotary_Switch_Buffer>
 8001640:	4602      	mov	r2, r0
 8001642:	78fb      	ldrb	r3, [r7, #3]
 8001644:	fb02 f303 	mul.w	r3, r2, r3
 8001648:	18e2      	adds	r2, r4, r3
 800164a:	8b3b      	ldrh	r3, [r7, #24]
 800164c:	429a      	cmp	r2, r3
 800164e:	dd04      	ble.n	800165a <Value_Changing+0x9e>
				*(uint8_t*)parametr=(uint8_t)max;
 8001650:	8b3b      	ldrh	r3, [r7, #24]
 8001652:	b2da      	uxtb	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	701a      	strb	r2, [r3, #0]
		break;
 8001658:	e059      	b.n	800170e <Value_Changing+0x152>
				*(uint8_t*)parametr+=(uint8_t)Incoder_Get_Rotary_Switch_Buffer(Incoder)*step;
 800165a:	69f8      	ldr	r0, [r7, #28]
 800165c:	f7ff fb1a 	bl	8000c94 <Incoder_Get_Rotary_Switch_Buffer>
 8001660:	4603      	mov	r3, r0
 8001662:	b2db      	uxtb	r3, r3
 8001664:	461a      	mov	r2, r3
 8001666:	78fb      	ldrb	r3, [r7, #3]
 8001668:	fb03 f102 	mul.w	r1, r3, r2
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	781a      	ldrb	r2, [r3, #0]
 8001670:	b2cb      	uxtb	r3, r1
 8001672:	4413      	add	r3, r2
 8001674:	b2da      	uxtb	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	701a      	strb	r2, [r3, #0]
		break;
 800167a:	e048      	b.n	800170e <Value_Changing+0x152>
		case UINT16:
			if((*(uint16_t*)parametr+Incoder_Get_Rotary_Switch_Buffer(Incoder)*step)<min)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	881b      	ldrh	r3, [r3, #0]
 8001680:	461c      	mov	r4, r3
 8001682:	69f8      	ldr	r0, [r7, #28]
 8001684:	f7ff fb06 	bl	8000c94 <Incoder_Get_Rotary_Switch_Buffer>
 8001688:	4602      	mov	r2, r0
 800168a:	78fb      	ldrb	r3, [r7, #3]
 800168c:	fb02 f303 	mul.w	r3, r2, r3
 8001690:	18e2      	adds	r2, r4, r3
 8001692:	883b      	ldrh	r3, [r7, #0]
 8001694:	429a      	cmp	r2, r3
 8001696:	da03      	bge.n	80016a0 <Value_Changing+0xe4>
				*(uint16_t*)parametr=(uint16_t)min;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	883a      	ldrh	r2, [r7, #0]
 800169c:	801a      	strh	r2, [r3, #0]
			else if ((*(uint16_t*)parametr+Incoder_Get_Rotary_Switch_Buffer(Incoder)*step)>max)
				*(uint16_t*)parametr=(uint16_t)max;
			else
				*(uint16_t*)parametr+=(uint16_t)Incoder_Get_Rotary_Switch_Buffer(Incoder)*step;
		break;
 800169e:	e036      	b.n	800170e <Value_Changing+0x152>
			else if ((*(uint16_t*)parametr+Incoder_Get_Rotary_Switch_Buffer(Incoder)*step)>max)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	881b      	ldrh	r3, [r3, #0]
 80016a4:	461c      	mov	r4, r3
 80016a6:	69f8      	ldr	r0, [r7, #28]
 80016a8:	f7ff faf4 	bl	8000c94 <Incoder_Get_Rotary_Switch_Buffer>
 80016ac:	4602      	mov	r2, r0
 80016ae:	78fb      	ldrb	r3, [r7, #3]
 80016b0:	fb02 f303 	mul.w	r3, r2, r3
 80016b4:	18e2      	adds	r2, r4, r3
 80016b6:	8b3b      	ldrh	r3, [r7, #24]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	dd03      	ble.n	80016c4 <Value_Changing+0x108>
				*(uint16_t*)parametr=(uint16_t)max;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	8b3a      	ldrh	r2, [r7, #24]
 80016c0:	801a      	strh	r2, [r3, #0]
		break;
 80016c2:	e024      	b.n	800170e <Value_Changing+0x152>
				*(uint16_t*)parametr+=(uint16_t)Incoder_Get_Rotary_Switch_Buffer(Incoder)*step;
 80016c4:	69f8      	ldr	r0, [r7, #28]
 80016c6:	f7ff fae5 	bl	8000c94 <Incoder_Get_Rotary_Switch_Buffer>
 80016ca:	4603      	mov	r3, r0
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	461a      	mov	r2, r3
 80016d0:	78fb      	ldrb	r3, [r7, #3]
 80016d2:	fb03 f102 	mul.w	r1, r3, r2
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	881a      	ldrh	r2, [r3, #0]
 80016da:	b28b      	uxth	r3, r1
 80016dc:	4413      	add	r3, r2
 80016de:	b29a      	uxth	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	801a      	strh	r2, [r3, #0]
		break;
 80016e4:	e013      	b.n	800170e <Value_Changing+0x152>
		case BOOL:
			if(Incoder_Get_Rotary_Switch_Buffer(Incoder)>0)
 80016e6:	69f8      	ldr	r0, [r7, #28]
 80016e8:	f7ff fad4 	bl	8000c94 <Incoder_Get_Rotary_Switch_Buffer>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	dd03      	ble.n	80016fa <Value_Changing+0x13e>
				*(uint8_t*)parametr=1;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2201      	movs	r2, #1
 80016f6:	701a      	strb	r2, [r3, #0]
			else if(Incoder_Get_Rotary_Switch_Buffer(Incoder)<0)
				*(uint8_t*)parametr=0;
		break;
 80016f8:	e008      	b.n	800170c <Value_Changing+0x150>
			else if(Incoder_Get_Rotary_Switch_Buffer(Incoder)<0)
 80016fa:	69f8      	ldr	r0, [r7, #28]
 80016fc:	f7ff faca 	bl	8000c94 <Incoder_Get_Rotary_Switch_Buffer>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	da02      	bge.n	800170c <Value_Changing+0x150>
				*(uint8_t*)parametr=0;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	701a      	strb	r2, [r3, #0]
		break;
 800170c:	bf00      	nop
	}
	Incoder_Reset_Rotary_Switch_Buffer(Incoder);
 800170e:	69f8      	ldr	r0, [r7, #28]
 8001710:	f7ff fab4 	bl	8000c7c <Incoder_Reset_Rotary_Switch_Buffer>
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	bd90      	pop	{r4, r7, pc}

0800171c <Value_Change>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void Value_Change(void *parametr, uint8_t x, uint8_t y, uint8_t step, enum Type mode, uint16_t min, uint16_t max, struct Incoder *Incoder){
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af02      	add	r7, sp, #8
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	4608      	mov	r0, r1
 8001726:	4611      	mov	r1, r2
 8001728:	461a      	mov	r2, r3
 800172a:	4603      	mov	r3, r0
 800172c:	70fb      	strb	r3, [r7, #3]
 800172e:	460b      	mov	r3, r1
 8001730:	70bb      	strb	r3, [r7, #2]
 8001732:	4613      	mov	r3, r2
 8001734:	707b      	strb	r3, [r7, #1]

	Value_Changing(parametr, step, mode,  min, max, Incoder);
 8001736:	8ab8      	ldrh	r0, [r7, #20]
 8001738:	7c3a      	ldrb	r2, [r7, #16]
 800173a:	7879      	ldrb	r1, [r7, #1]
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	9301      	str	r3, [sp, #4]
 8001740:	8b3b      	ldrh	r3, [r7, #24]
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	4603      	mov	r3, r0
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff ff38 	bl	80015bc <Value_Changing>
	Menu_Parmetr_Drow(parametr, x, y,mode);
 800174c:	7c3b      	ldrb	r3, [r7, #16]
 800174e:	78ba      	ldrb	r2, [r7, #2]
 8001750:	78f9      	ldrb	r1, [r7, #3]
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff fc6e 	bl	8001034 <Menu_Parmetr_Drow>
}
 8001758:	bf00      	nop
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <Menu_List_Element_Value_Change>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void Menu_List_Element_Value_Change(struct Menu_List_Element_Vector *self, uint8_t y, struct Incoder *Incoder){
 8001760:	b590      	push	{r4, r7, lr}
 8001762:	b089      	sub	sp, #36	; 0x24
 8001764:	af04      	add	r7, sp, #16
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	460b      	mov	r3, r1
 800176a:	607a      	str	r2, [r7, #4]
 800176c:	72fb      	strb	r3, [r7, #11]
	Incoder_Reset_Button_State(Incoder);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f7ff fa9b 	bl	8000caa <Incoder_Reset_Button_State>
	OLED_Set_Menu_Cursor(&OLED1,15, y,0);
 8001774:	7afa      	ldrb	r2, [r7, #11]
 8001776:	2300      	movs	r3, #0
 8001778:	210f      	movs	r1, #15
 800177a:	4812      	ldr	r0, [pc, #72]	; (80017c4 <Menu_List_Element_Value_Change+0x64>)
 800177c:	f7ff fed8 	bl	8001530 <OLED_Set_Menu_Cursor>
	while(Incoder_Get_Button_State(Incoder)!=Incoder_Button_long){
 8001780:	e013      	b.n	80017aa <Menu_List_Element_Value_Change+0x4a>
		Value_Change(self->parametr, 16, y, self->step, self->mode, 0, 65535, Incoder);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	6918      	ldr	r0, [r3, #16]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	7b5c      	ldrb	r4, [r3, #13]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	7b1b      	ldrb	r3, [r3, #12]
 800178e:	7af9      	ldrb	r1, [r7, #11]
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	9203      	str	r2, [sp, #12]
 8001794:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001798:	9202      	str	r2, [sp, #8]
 800179a:	2200      	movs	r2, #0
 800179c:	9201      	str	r2, [sp, #4]
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	4623      	mov	r3, r4
 80017a2:	460a      	mov	r2, r1
 80017a4:	2110      	movs	r1, #16
 80017a6:	f7ff ffb9 	bl	800171c <Value_Change>
	while(Incoder_Get_Button_State(Incoder)!=Incoder_Button_long){
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f7ff fa8a 	bl	8000cc4 <Incoder_Get_Button_State>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b03      	cmp	r3, #3
 80017b4:	d1e5      	bne.n	8001782 <Menu_List_Element_Value_Change+0x22>
	}
	Incoder_Reset_Button_State(Incoder);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f7ff fa77 	bl	8000caa <Incoder_Reset_Button_State>

}
 80017bc:	bf00      	nop
 80017be:	3714      	adds	r7, #20
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd90      	pop	{r4, r7, pc}
 80017c4:	20000768 	.word	0x20000768

080017c8 <Menu_List_Element_Vector_it>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void Menu_List_Element_Vector_it(struct Menu_List_Element_Vector *self, struct Incoder *Incoder){
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
	int Menu_Count=0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	617b      	str	r3, [r7, #20]
	uint8_t MAX_ID=Menu_List_Vector_Size(self);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f7ff fe90 	bl	80014fc <Menu_List_Vector_Size>
 80017dc:	4603      	mov	r3, r0
 80017de:	73fb      	strb	r3, [r7, #15]
	Incoder_Reset_Button_State(Incoder);
 80017e0:	6838      	ldr	r0, [r7, #0]
 80017e2:	f7ff fa62 	bl	8000caa <Incoder_Reset_Button_State>
	Menu_List_Element_Vector_Drow(self, (uint8_t)(Menu_Count/DROW_LIMIT)*DROW_LIMIT, DROW_LIMIT,1);
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	4a55      	ldr	r2, [pc, #340]	; (8001940 <Menu_List_Element_Vector_it+0x178>)
 80017ea:	fb82 1203 	smull	r1, r2, r2, r3
 80017ee:	441a      	add	r2, r3
 80017f0:	1092      	asrs	r2, r2, #2
 80017f2:	17db      	asrs	r3, r3, #31
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	461a      	mov	r2, r3
 80017fa:	00d2      	lsls	r2, r2, #3
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	b2d9      	uxtb	r1, r3
 8001800:	2301      	movs	r3, #1
 8001802:	2207      	movs	r2, #7
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f7ff fe2d 	bl	8001464 <Menu_List_Element_Vector_Drow>
	OLED_Set_Menu_Cursor(&OLED1, 0, Menu_Count% DROW_LIMIT+1,1);
 800180a:	697a      	ldr	r2, [r7, #20]
 800180c:	4b4c      	ldr	r3, [pc, #304]	; (8001940 <Menu_List_Element_Vector_it+0x178>)
 800180e:	fb83 1302 	smull	r1, r3, r3, r2
 8001812:	4413      	add	r3, r2
 8001814:	1099      	asrs	r1, r3, #2
 8001816:	17d3      	asrs	r3, r2, #31
 8001818:	1ac9      	subs	r1, r1, r3
 800181a:	460b      	mov	r3, r1
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	1a5b      	subs	r3, r3, r1
 8001820:	1ad1      	subs	r1, r2, r3
 8001822:	b2cb      	uxtb	r3, r1
 8001824:	3301      	adds	r3, #1
 8001826:	b2da      	uxtb	r2, r3
 8001828:	2301      	movs	r3, #1
 800182a:	2100      	movs	r1, #0
 800182c:	4845      	ldr	r0, [pc, #276]	; (8001944 <Menu_List_Element_Vector_it+0x17c>)
 800182e:	f7ff fe7f 	bl	8001530 <OLED_Set_Menu_Cursor>

	while(Incoder_Get_Button_State(Incoder)!=Incoder_Button_long){
 8001832:	e079      	b.n	8001928 <Menu_List_Element_Vector_it+0x160>

		Menu_Count+= Incoder_Get_Rotary_Switch_Buffer(Incoder);
 8001834:	6838      	ldr	r0, [r7, #0]
 8001836:	f7ff fa2d 	bl	8000c94 <Incoder_Get_Rotary_Switch_Buffer>
 800183a:	4602      	mov	r2, r0
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	4413      	add	r3, r2
 8001840:	617b      	str	r3, [r7, #20]
		Incoder_Reset_Rotary_Switch_Buffer(Incoder);
 8001842:	6838      	ldr	r0, [r7, #0]
 8001844:	f7ff fa1a 	bl	8000c7c <Incoder_Reset_Rotary_Switch_Buffer>

		if(Menu_Count<0)
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	2b00      	cmp	r3, #0
 800184c:	da02      	bge.n	8001854 <Menu_List_Element_Vector_it+0x8c>
			Menu_Count=0;
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]
 8001852:	e005      	b.n	8001860 <Menu_List_Element_Vector_it+0x98>
		else if(Menu_Count>MAX_ID)
 8001854:	7bfb      	ldrb	r3, [r7, #15]
 8001856:	697a      	ldr	r2, [r7, #20]
 8001858:	429a      	cmp	r2, r3
 800185a:	dd01      	ble.n	8001860 <Menu_List_Element_Vector_it+0x98>
			Menu_Count=MAX_ID;
 800185c:	7bfb      	ldrb	r3, [r7, #15]
 800185e:	617b      	str	r3, [r7, #20]

		Menu_List_Element_Vector_Drow(self, (uint8_t)(Menu_Count/DROW_LIMIT)*DROW_LIMIT, DROW_LIMIT,0);
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	4a37      	ldr	r2, [pc, #220]	; (8001940 <Menu_List_Element_Vector_it+0x178>)
 8001864:	fb82 1203 	smull	r1, r2, r2, r3
 8001868:	441a      	add	r2, r3
 800186a:	1092      	asrs	r2, r2, #2
 800186c:	17db      	asrs	r3, r3, #31
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	b2db      	uxtb	r3, r3
 8001872:	461a      	mov	r2, r3
 8001874:	00d2      	lsls	r2, r2, #3
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	b2d9      	uxtb	r1, r3
 800187a:	2300      	movs	r3, #0
 800187c:	2207      	movs	r2, #7
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f7ff fdf0 	bl	8001464 <Menu_List_Element_Vector_Drow>
		OLED_Set_Menu_Cursor(&OLED1, 0, Menu_Count% DROW_LIMIT+1,0);
 8001884:	697a      	ldr	r2, [r7, #20]
 8001886:	4b2e      	ldr	r3, [pc, #184]	; (8001940 <Menu_List_Element_Vector_it+0x178>)
 8001888:	fb83 1302 	smull	r1, r3, r3, r2
 800188c:	4413      	add	r3, r2
 800188e:	1099      	asrs	r1, r3, #2
 8001890:	17d3      	asrs	r3, r2, #31
 8001892:	1ac9      	subs	r1, r1, r3
 8001894:	460b      	mov	r3, r1
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	1a5b      	subs	r3, r3, r1
 800189a:	1ad1      	subs	r1, r2, r3
 800189c:	b2cb      	uxtb	r3, r1
 800189e:	3301      	adds	r3, #1
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	2300      	movs	r3, #0
 80018a4:	2100      	movs	r1, #0
 80018a6:	4827      	ldr	r0, [pc, #156]	; (8001944 <Menu_List_Element_Vector_it+0x17c>)
 80018a8:	f7ff fe42 	bl	8001530 <OLED_Set_Menu_Cursor>

		if(Incoder_Get_Button_State(Incoder)==Incoder_Button_Short){
 80018ac:	6838      	ldr	r0, [r7, #0]
 80018ae:	f7ff fa09 	bl	8000cc4 <Incoder_Get_Button_State>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d137      	bne.n	8001928 <Menu_List_Element_Vector_it+0x160>
			struct Menu_List_Element_Vector *now;
			now=self;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	613b      	str	r3, [r7, #16]
			while(now->ID!=Menu_Count){
 80018bc:	e002      	b.n	80018c4 <Menu_List_Element_Vector_it+0xfc>
				now=now->next;
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	613b      	str	r3, [r7, #16]
			while(now->ID!=Menu_Count){
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	791b      	ldrb	r3, [r3, #4]
 80018c8:	461a      	mov	r2, r3
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d1f6      	bne.n	80018be <Menu_List_Element_Vector_it+0xf6>
			}
			Menu_List_Element_Value_Change(now,  now->ID% DROW_LIMIT+1,Incoder);
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	791a      	ldrb	r2, [r3, #4]
 80018d4:	4b1c      	ldr	r3, [pc, #112]	; (8001948 <Menu_List_Element_Vector_it+0x180>)
 80018d6:	fba3 1302 	umull	r1, r3, r3, r2
 80018da:	1ad1      	subs	r1, r2, r3
 80018dc:	0849      	lsrs	r1, r1, #1
 80018de:	440b      	add	r3, r1
 80018e0:	0899      	lsrs	r1, r3, #2
 80018e2:	460b      	mov	r3, r1
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	1a5b      	subs	r3, r3, r1
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	3301      	adds	r3, #1
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	4619      	mov	r1, r3
 80018f4:	6938      	ldr	r0, [r7, #16]
 80018f6:	f7ff ff33 	bl	8001760 <Menu_List_Element_Value_Change>
			OLED_Set_Menu_Cursor(&OLED1, 0, Menu_Count% DROW_LIMIT+1,1);
 80018fa:	697a      	ldr	r2, [r7, #20]
 80018fc:	4b10      	ldr	r3, [pc, #64]	; (8001940 <Menu_List_Element_Vector_it+0x178>)
 80018fe:	fb83 1302 	smull	r1, r3, r3, r2
 8001902:	4413      	add	r3, r2
 8001904:	1099      	asrs	r1, r3, #2
 8001906:	17d3      	asrs	r3, r2, #31
 8001908:	1ac9      	subs	r1, r1, r3
 800190a:	460b      	mov	r3, r1
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	1a5b      	subs	r3, r3, r1
 8001910:	1ad1      	subs	r1, r2, r3
 8001912:	b2cb      	uxtb	r3, r1
 8001914:	3301      	adds	r3, #1
 8001916:	b2da      	uxtb	r2, r3
 8001918:	2301      	movs	r3, #1
 800191a:	2100      	movs	r1, #0
 800191c:	4809      	ldr	r0, [pc, #36]	; (8001944 <Menu_List_Element_Vector_it+0x17c>)
 800191e:	f7ff fe07 	bl	8001530 <OLED_Set_Menu_Cursor>
			Incoder_Reset_Button_State(Incoder);
 8001922:	6838      	ldr	r0, [r7, #0]
 8001924:	f7ff f9c1 	bl	8000caa <Incoder_Reset_Button_State>
	while(Incoder_Get_Button_State(Incoder)!=Incoder_Button_long){
 8001928:	6838      	ldr	r0, [r7, #0]
 800192a:	f7ff f9cb 	bl	8000cc4 <Incoder_Get_Button_State>
 800192e:	4603      	mov	r3, r0
 8001930:	2b03      	cmp	r3, #3
 8001932:	f47f af7f 	bne.w	8001834 <Menu_List_Element_Vector_it+0x6c>
		}
	}
}
 8001936:	bf00      	nop
 8001938:	bf00      	nop
 800193a:	3718      	adds	r7, #24
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	92492493 	.word	0x92492493
 8001944:	20000768 	.word	0x20000768
 8001948:	24924925 	.word	0x24924925

0800194c <Menu_List_Element_Create>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void Menu_List_Element_Create(struct Menu_List_Element_Vector *head,struct Menu_List_Element_Vector *ini_element){
 800194c:	b5b0      	push	{r4, r5, r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
	char *st= malloc((sizeof(char)*(strlen(ini_element->name)+1)));
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	4618      	mov	r0, r3
 800195c:	f7fe fbf6 	bl	800014c <strlen>
 8001960:	4603      	mov	r3, r0
 8001962:	3301      	adds	r3, #1
 8001964:	4618      	mov	r0, r3
 8001966:	f007 f9c9 	bl	8008cfc <malloc>
 800196a:	4603      	mov	r3, r0
 800196c:	613b      	str	r3, [r7, #16]
	strcpy(st,ini_element->name);
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	4619      	mov	r1, r3
 8001974:	6938      	ldr	r0, [r7, #16]
 8001976:	f007 fab9 	bl	8008eec <strcpy>
	if(head->parametr==NULL){
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d10e      	bne.n	80019a0 <Menu_List_Element_Create+0x54>
		*head=*ini_element;
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	4614      	mov	r4, r2
 8001988:	461d      	mov	r5, r3
 800198a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800198c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800198e:	682b      	ldr	r3, [r5, #0]
 8001990:	6023      	str	r3, [r4, #0]
		head->ID=0;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	711a      	strb	r2, [r3, #4]
		head->next=NULL;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
			NEW_Element->ID++;
		}
		NEW_Element->ID++;
		now->next=NEW_Element;
	}
}
 800199e:	e02c      	b.n	80019fa <Menu_List_Element_Create+0xae>
		struct Menu_List_Element_Vector *now=head;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	617b      	str	r3, [r7, #20]
		struct Menu_List_Element_Vector *NEW_Element= malloc(sizeof(struct Menu_List_Element_Vector));
 80019a4:	2014      	movs	r0, #20
 80019a6:	f007 f9a9 	bl	8008cfc <malloc>
 80019aa:	4603      	mov	r3, r0
 80019ac:	60fb      	str	r3, [r7, #12]
		*NEW_Element=*ini_element;
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	4614      	mov	r4, r2
 80019b4:	461d      	mov	r5, r3
 80019b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019ba:	682b      	ldr	r3, [r5, #0]
 80019bc:	6023      	str	r3, [r4, #0]
		NEW_Element->ID=head->ID;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	791a      	ldrb	r2, [r3, #4]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	711a      	strb	r2, [r3, #4]
		NEW_Element->next=NULL;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
		while(now->next!=NULL){
 80019cc:	e008      	b.n	80019e0 <Menu_List_Element_Create+0x94>
			now=now->next;
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	617b      	str	r3, [r7, #20]
			NEW_Element->ID++;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	791b      	ldrb	r3, [r3, #4]
 80019d8:	3301      	adds	r3, #1
 80019da:	b2da      	uxtb	r2, r3
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	711a      	strb	r2, [r3, #4]
		while(now->next!=NULL){
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1f2      	bne.n	80019ce <Menu_List_Element_Create+0x82>
		NEW_Element->ID++;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	791b      	ldrb	r3, [r3, #4]
 80019ec:	3301      	adds	r3, #1
 80019ee:	b2da      	uxtb	r2, r3
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	711a      	strb	r2, [r3, #4]
		now->next=NEW_Element;
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	601a      	str	r2, [r3, #0]
}
 80019fa:	bf00      	nop
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bdb0      	pop	{r4, r5, r7, pc}

08001a02 <Menu_List_Size>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
uint8_t Menu_List_Size(struct Menu_List_Vector *self){
 8001a02:	b480      	push	{r7}
 8001a04:	b085      	sub	sp, #20
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
	uint8_t MAX_ID=0;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	73fb      	strb	r3, [r7, #15]
	while(self->next!=NULL){
 8001a0e:	e005      	b.n	8001a1c <Menu_List_Size+0x1a>
			self=self->next;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	607b      	str	r3, [r7, #4]
			MAX_ID++;
 8001a16:	7bfb      	ldrb	r3, [r7, #15]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	73fb      	strb	r3, [r7, #15]
	while(self->next!=NULL){
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d1f5      	bne.n	8001a10 <Menu_List_Size+0xe>
	}
	return MAX_ID++;
 8001a24:	7bfb      	ldrb	r3, [r7, #15]
 8001a26:	1c5a      	adds	r2, r3, #1
 8001a28:	73fa      	strb	r2, [r7, #15]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3714      	adds	r7, #20
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr

08001a34 <Menu_List_Vector_Drow>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void Menu_List_Vector_Drow(struct Menu_List_Vector *self, uint8_t start_point, uint8_t quantity,uint8_t Ress ,uint8_t *mas){
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	4608      	mov	r0, r1
 8001a3e:	4611      	mov	r1, r2
 8001a40:	461a      	mov	r2, r3
 8001a42:	4603      	mov	r3, r0
 8001a44:	70fb      	strb	r3, [r7, #3]
 8001a46:	460b      	mov	r3, r1
 8001a48:	70bb      	strb	r3, [r7, #2]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	707b      	strb	r3, [r7, #1]
	static uint8_t  PRW_Start_Point=254;
	if(Ress==1)
 8001a4e:	787b      	ldrb	r3, [r7, #1]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d102      	bne.n	8001a5a <Menu_List_Vector_Drow+0x26>
		PRW_Start_Point=254;
 8001a54:	4b1e      	ldr	r3, [pc, #120]	; (8001ad0 <Menu_List_Vector_Drow+0x9c>)
 8001a56:	22fe      	movs	r2, #254	; 0xfe
 8001a58:	701a      	strb	r2, [r3, #0]
	if(start_point!=PRW_Start_Point){
 8001a5a:	4b1d      	ldr	r3, [pc, #116]	; (8001ad0 <Menu_List_Vector_Drow+0x9c>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	78fa      	ldrb	r2, [r7, #3]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d030      	beq.n	8001ac6 <Menu_List_Vector_Drow+0x92>
		while(self->ID!=start_point)
 8001a64:	e002      	b.n	8001a6c <Menu_List_Vector_Drow+0x38>
			self=self->next;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	607b      	str	r3, [r7, #4]
		while(self->ID!=start_point)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	7a1b      	ldrb	r3, [r3, #8]
 8001a70:	78fa      	ldrb	r2, [r7, #3]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d1f7      	bne.n	8001a66 <Menu_List_Vector_Drow+0x32>
		for(uint8_t i=0;i<quantity;i++){
 8001a76:	2300      	movs	r3, #0
 8001a78:	73fb      	strb	r3, [r7, #15]
 8001a7a:	e01d      	b.n	8001ab8 <Menu_List_Vector_Drow+0x84>
			if(self!=NULL){
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d010      	beq.n	8001aa4 <Menu_List_Vector_Drow+0x70>
				Menu_Center_String_Drow(self->name, i+1, (mas+(i*2)));
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	68d8      	ldr	r0, [r3, #12]
 8001a86:	7bfb      	ldrb	r3, [r7, #15]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	b2d9      	uxtb	r1, r3
 8001a8c:	7bfb      	ldrb	r3, [r7, #15]
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	461a      	mov	r2, r3
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	4413      	add	r3, r2
 8001a96:	461a      	mov	r2, r3
 8001a98:	f7ff fca0 	bl	80013dc <Menu_Center_String_Drow>
				self=self->next;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	607b      	str	r3, [r7, #4]
 8001aa2:	e006      	b.n	8001ab2 <Menu_List_Vector_Drow+0x7e>
			}
			else
				OLED_Clear_Line(&OLED1,i+1);
 8001aa4:	7bfb      	ldrb	r3, [r7, #15]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4809      	ldr	r0, [pc, #36]	; (8001ad4 <Menu_List_Vector_Drow+0xa0>)
 8001aae:	f000 fded 	bl	800268c <OLED_Clear_Line>
		for(uint8_t i=0;i<quantity;i++){
 8001ab2:	7bfb      	ldrb	r3, [r7, #15]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	73fb      	strb	r3, [r7, #15]
 8001ab8:	7bfa      	ldrb	r2, [r7, #15]
 8001aba:	78bb      	ldrb	r3, [r7, #2]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d3dd      	bcc.n	8001a7c <Menu_List_Vector_Drow+0x48>
		}
		PRW_Start_Point=start_point;
 8001ac0:	4a03      	ldr	r2, [pc, #12]	; (8001ad0 <Menu_List_Vector_Drow+0x9c>)
 8001ac2:	78fb      	ldrb	r3, [r7, #3]
 8001ac4:	7013      	strb	r3, [r2, #0]
	}
}
 8001ac6:	bf00      	nop
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000002 	.word	0x20000002
 8001ad4:	20000768 	.word	0x20000768

08001ad8 <OLED_Set_Menu_List_Cursor>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void OLED_Set_Menu_List_Cursor(struct OLED *self, uint8_t x, uint8_t y,uint8_t Lens, uint8_t Ress){
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	4608      	mov	r0, r1
 8001ae2:	4611      	mov	r1, r2
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	70fb      	strb	r3, [r7, #3]
 8001aea:	460b      	mov	r3, r1
 8001aec:	70bb      	strb	r3, [r7, #2]
 8001aee:	4613      	mov	r3, r2
 8001af0:	707b      	strb	r3, [r7, #1]
	static uint8_t Prew_Pos_x=0,Prew_Pos_y=254, Prew_Lens=0;
	if(Ress==1)
 8001af2:	7c3b      	ldrb	r3, [r7, #16]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d102      	bne.n	8001afe <OLED_Set_Menu_List_Cursor+0x26>
		Prew_Pos_y=254;
 8001af8:	4b2d      	ldr	r3, [pc, #180]	; (8001bb0 <OLED_Set_Menu_List_Cursor+0xd8>)
 8001afa:	22fe      	movs	r2, #254	; 0xfe
 8001afc:	701a      	strb	r2, [r3, #0]
	if(Prew_Pos_x!=x||Prew_Pos_y!=y){
 8001afe:	4b2d      	ldr	r3, [pc, #180]	; (8001bb4 <OLED_Set_Menu_List_Cursor+0xdc>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	78fa      	ldrb	r2, [r7, #3]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d104      	bne.n	8001b12 <OLED_Set_Menu_List_Cursor+0x3a>
 8001b08:	4b29      	ldr	r3, [pc, #164]	; (8001bb0 <OLED_Set_Menu_List_Cursor+0xd8>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	78ba      	ldrb	r2, [r7, #2]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d049      	beq.n	8001ba6 <OLED_Set_Menu_List_Cursor+0xce>
		OLED_Set_Char_Cursor(&OLED1,Prew_Pos_x-2,Prew_Pos_y);
 8001b12:	4b28      	ldr	r3, [pc, #160]	; (8001bb4 <OLED_Set_Menu_List_Cursor+0xdc>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	3b02      	subs	r3, #2
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	4a24      	ldr	r2, [pc, #144]	; (8001bb0 <OLED_Set_Menu_List_Cursor+0xd8>)
 8001b1e:	7812      	ldrb	r2, [r2, #0]
 8001b20:	4619      	mov	r1, r3
 8001b22:	4825      	ldr	r0, [pc, #148]	; (8001bb8 <OLED_Set_Menu_List_Cursor+0xe0>)
 8001b24:	f000 fd17 	bl	8002556 <OLED_Set_Char_Cursor>
		OLED_Send_Char(&OLED1,' ');
 8001b28:	2120      	movs	r1, #32
 8001b2a:	4823      	ldr	r0, [pc, #140]	; (8001bb8 <OLED_Set_Menu_List_Cursor+0xe0>)
 8001b2c:	f000 fd6c 	bl	8002608 <OLED_Send_Char>
		if(Prew_Lens!=0);
		OLED_Set_Char_Cursor(&OLED1,Prew_Pos_x+Prew_Lens+1,Prew_Pos_y);
 8001b30:	4b20      	ldr	r3, [pc, #128]	; (8001bb4 <OLED_Set_Menu_List_Cursor+0xdc>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	4b21      	ldr	r3, [pc, #132]	; (8001bbc <OLED_Set_Menu_List_Cursor+0xe4>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	4413      	add	r3, r2
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	3301      	adds	r3, #1
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	4a1a      	ldr	r2, [pc, #104]	; (8001bb0 <OLED_Set_Menu_List_Cursor+0xd8>)
 8001b46:	7812      	ldrb	r2, [r2, #0]
 8001b48:	4619      	mov	r1, r3
 8001b4a:	481b      	ldr	r0, [pc, #108]	; (8001bb8 <OLED_Set_Menu_List_Cursor+0xe0>)
 8001b4c:	f000 fd03 	bl	8002556 <OLED_Set_Char_Cursor>
		OLED_Send_Char(&OLED1,' ');
 8001b50:	2120      	movs	r1, #32
 8001b52:	4819      	ldr	r0, [pc, #100]	; (8001bb8 <OLED_Set_Menu_List_Cursor+0xe0>)
 8001b54:	f000 fd58 	bl	8002608 <OLED_Send_Char>

		OLED_Set_Char_Cursor(&OLED1,x-2,y);
 8001b58:	78fb      	ldrb	r3, [r7, #3]
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	3b02      	subs	r3, #2
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	78ba      	ldrb	r2, [r7, #2]
 8001b62:	4619      	mov	r1, r3
 8001b64:	4814      	ldr	r0, [pc, #80]	; (8001bb8 <OLED_Set_Menu_List_Cursor+0xe0>)
 8001b66:	f000 fcf6 	bl	8002556 <OLED_Set_Char_Cursor>
		OLED_Send_Char(&OLED1,'>');
 8001b6a:	213e      	movs	r1, #62	; 0x3e
 8001b6c:	4812      	ldr	r0, [pc, #72]	; (8001bb8 <OLED_Set_Menu_List_Cursor+0xe0>)
 8001b6e:	f000 fd4b 	bl	8002608 <OLED_Send_Char>
		OLED_Set_Char_Cursor(&OLED1,x+Lens+1,y);
 8001b72:	78fb      	ldrb	r3, [r7, #3]
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	787b      	ldrb	r3, [r7, #1]
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	4413      	add	r3, r2
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	3301      	adds	r3, #1
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	78ba      	ldrb	r2, [r7, #2]
 8001b84:	4619      	mov	r1, r3
 8001b86:	480c      	ldr	r0, [pc, #48]	; (8001bb8 <OLED_Set_Menu_List_Cursor+0xe0>)
 8001b88:	f000 fce5 	bl	8002556 <OLED_Set_Char_Cursor>
		OLED_Send_Char(&OLED1,'<');
 8001b8c:	213c      	movs	r1, #60	; 0x3c
 8001b8e:	480a      	ldr	r0, [pc, #40]	; (8001bb8 <OLED_Set_Menu_List_Cursor+0xe0>)
 8001b90:	f000 fd3a 	bl	8002608 <OLED_Send_Char>

		Prew_Pos_x=x;
 8001b94:	4a07      	ldr	r2, [pc, #28]	; (8001bb4 <OLED_Set_Menu_List_Cursor+0xdc>)
 8001b96:	78fb      	ldrb	r3, [r7, #3]
 8001b98:	7013      	strb	r3, [r2, #0]
		Prew_Pos_y=y;
 8001b9a:	4a05      	ldr	r2, [pc, #20]	; (8001bb0 <OLED_Set_Menu_List_Cursor+0xd8>)
 8001b9c:	78bb      	ldrb	r3, [r7, #2]
 8001b9e:	7013      	strb	r3, [r2, #0]
		Prew_Lens=Lens;
 8001ba0:	4a06      	ldr	r2, [pc, #24]	; (8001bbc <OLED_Set_Menu_List_Cursor+0xe4>)
 8001ba2:	787b      	ldrb	r3, [r7, #1]
 8001ba4:	7013      	strb	r3, [r2, #0]
	}
}
 8001ba6:	bf00      	nop
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	20000003 	.word	0x20000003
 8001bb4:	200004f5 	.word	0x200004f5
 8001bb8:	20000768 	.word	0x20000768
 8001bbc:	200004f6 	.word	0x200004f6

08001bc0 <Menu_List_Vector_it>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void Menu_List_Vector_it(struct Menu_List_Vector *self, struct Incoder *Incoder){
 8001bc0:	b590      	push	{r4, r7, lr}
 8001bc2:	b08b      	sub	sp, #44	; 0x2c
 8001bc4:	af02      	add	r7, sp, #8
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
	int Menu_Count=0;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61fb      	str	r3, [r7, #28]
	uint8_t mas[15]; // 0 Length 1-st str; 1 start position 1-st str; 2 lenth 1-st str; 3 start postition 2-st str.......


	uint8_t MAX_ID=Menu_List_Size(self);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7ff ff17 	bl	8001a02 <Menu_List_Size>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	75fb      	strb	r3, [r7, #23]
	Incoder_Reset_Button_State(Incoder);
 8001bd8:	6838      	ldr	r0, [r7, #0]
 8001bda:	f7ff f866 	bl	8000caa <Incoder_Reset_Button_State>
	Menu_Center_String_Drow("MENU",0,NULL);
 8001bde:	2200      	movs	r2, #0
 8001be0:	2100      	movs	r1, #0
 8001be2:	488d      	ldr	r0, [pc, #564]	; (8001e18 <Menu_List_Vector_it+0x258>)
 8001be4:	f7ff fbfa 	bl	80013dc <Menu_Center_String_Drow>
	Menu_List_Vector_Drow(self, (uint8_t)(Menu_Count/DROW_LIMIT)*DROW_LIMIT, DROW_LIMIT,1, &mas[0]);
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	4a8c      	ldr	r2, [pc, #560]	; (8001e1c <Menu_List_Vector_it+0x25c>)
 8001bec:	fb82 1203 	smull	r1, r2, r2, r3
 8001bf0:	441a      	add	r2, r3
 8001bf2:	1092      	asrs	r2, r2, #2
 8001bf4:	17db      	asrs	r3, r3, #31
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	00d2      	lsls	r2, r2, #3
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	b2d9      	uxtb	r1, r3
 8001c02:	f107 0308 	add.w	r3, r7, #8
 8001c06:	9300      	str	r3, [sp, #0]
 8001c08:	2301      	movs	r3, #1
 8001c0a:	2207      	movs	r2, #7
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7ff ff11 	bl	8001a34 <Menu_List_Vector_Drow>
	OLED_Set_Menu_List_Cursor(&OLED1, mas[1], Menu_Count% DROW_LIMIT+1,mas[0],1);
 8001c12:	7a78      	ldrb	r0, [r7, #9]
 8001c14:	69fa      	ldr	r2, [r7, #28]
 8001c16:	4b81      	ldr	r3, [pc, #516]	; (8001e1c <Menu_List_Vector_it+0x25c>)
 8001c18:	fb83 1302 	smull	r1, r3, r3, r2
 8001c1c:	4413      	add	r3, r2
 8001c1e:	1099      	asrs	r1, r3, #2
 8001c20:	17d3      	asrs	r3, r2, #31
 8001c22:	1ac9      	subs	r1, r1, r3
 8001c24:	460b      	mov	r3, r1
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	1a5b      	subs	r3, r3, r1
 8001c2a:	1ad1      	subs	r1, r2, r3
 8001c2c:	b2cb      	uxtb	r3, r1
 8001c2e:	3301      	adds	r3, #1
 8001c30:	b2da      	uxtb	r2, r3
 8001c32:	7a3b      	ldrb	r3, [r7, #8]
 8001c34:	2101      	movs	r1, #1
 8001c36:	9100      	str	r1, [sp, #0]
 8001c38:	4601      	mov	r1, r0
 8001c3a:	4879      	ldr	r0, [pc, #484]	; (8001e20 <Menu_List_Vector_it+0x260>)
 8001c3c:	f7ff ff4c 	bl	8001ad8 <OLED_Set_Menu_List_Cursor>

	while(Incoder_Get_Button_State(Incoder)!=Incoder_Button_long){
 8001c40:	e0dd      	b.n	8001dfe <Menu_List_Vector_it+0x23e>

		Menu_Count+= Incoder_Get_Rotary_Switch_Buffer(Incoder);
 8001c42:	6838      	ldr	r0, [r7, #0]
 8001c44:	f7ff f826 	bl	8000c94 <Incoder_Get_Rotary_Switch_Buffer>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	61fb      	str	r3, [r7, #28]
		Incoder_Reset_Rotary_Switch_Buffer(Incoder);
 8001c50:	6838      	ldr	r0, [r7, #0]
 8001c52:	f7ff f813 	bl	8000c7c <Incoder_Reset_Rotary_Switch_Buffer>

		if(Menu_Count<0)
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	da02      	bge.n	8001c62 <Menu_List_Vector_it+0xa2>
			Menu_Count=0;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	61fb      	str	r3, [r7, #28]
 8001c60:	e005      	b.n	8001c6e <Menu_List_Vector_it+0xae>
		else if(Menu_Count>MAX_ID)
 8001c62:	7dfb      	ldrb	r3, [r7, #23]
 8001c64:	69fa      	ldr	r2, [r7, #28]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	dd01      	ble.n	8001c6e <Menu_List_Vector_it+0xae>
			Menu_Count=MAX_ID;
 8001c6a:	7dfb      	ldrb	r3, [r7, #23]
 8001c6c:	61fb      	str	r3, [r7, #28]

		Menu_List_Vector_Drow(self, (uint8_t)(Menu_Count/DROW_LIMIT)*DROW_LIMIT, DROW_LIMIT,0,&mas[0]);
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	4a6a      	ldr	r2, [pc, #424]	; (8001e1c <Menu_List_Vector_it+0x25c>)
 8001c72:	fb82 1203 	smull	r1, r2, r2, r3
 8001c76:	441a      	add	r2, r3
 8001c78:	1092      	asrs	r2, r2, #2
 8001c7a:	17db      	asrs	r3, r3, #31
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	461a      	mov	r2, r3
 8001c82:	00d2      	lsls	r2, r2, #3
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	b2d9      	uxtb	r1, r3
 8001c88:	f107 0308 	add.w	r3, r7, #8
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	2300      	movs	r3, #0
 8001c90:	2207      	movs	r2, #7
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f7ff fece 	bl	8001a34 <Menu_List_Vector_Drow>
		OLED_Set_Menu_List_Cursor(&OLED1, mas[(Menu_Count% DROW_LIMIT)*2+1], Menu_Count% DROW_LIMIT+1,mas[(Menu_Count% DROW_LIMIT)*2],0);
 8001c98:	69fa      	ldr	r2, [r7, #28]
 8001c9a:	4b60      	ldr	r3, [pc, #384]	; (8001e1c <Menu_List_Vector_it+0x25c>)
 8001c9c:	fb83 1302 	smull	r1, r3, r3, r2
 8001ca0:	4413      	add	r3, r2
 8001ca2:	1099      	asrs	r1, r3, #2
 8001ca4:	17d3      	asrs	r3, r2, #31
 8001ca6:	1ac9      	subs	r1, r1, r3
 8001ca8:	460b      	mov	r3, r1
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	1a5b      	subs	r3, r3, r1
 8001cae:	1ad1      	subs	r1, r2, r3
 8001cb0:	004b      	lsls	r3, r1, #1
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	3320      	adds	r3, #32
 8001cb6:	443b      	add	r3, r7
 8001cb8:	f813 0c18 	ldrb.w	r0, [r3, #-24]
 8001cbc:	69fa      	ldr	r2, [r7, #28]
 8001cbe:	4b57      	ldr	r3, [pc, #348]	; (8001e1c <Menu_List_Vector_it+0x25c>)
 8001cc0:	fb83 1302 	smull	r1, r3, r3, r2
 8001cc4:	4413      	add	r3, r2
 8001cc6:	1099      	asrs	r1, r3, #2
 8001cc8:	17d3      	asrs	r3, r2, #31
 8001cca:	1ac9      	subs	r1, r1, r3
 8001ccc:	460b      	mov	r3, r1
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	1a5b      	subs	r3, r3, r1
 8001cd2:	1ad1      	subs	r1, r2, r3
 8001cd4:	b2cb      	uxtb	r3, r1
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	b2dc      	uxtb	r4, r3
 8001cda:	69fa      	ldr	r2, [r7, #28]
 8001cdc:	4b4f      	ldr	r3, [pc, #316]	; (8001e1c <Menu_List_Vector_it+0x25c>)
 8001cde:	fb83 1302 	smull	r1, r3, r3, r2
 8001ce2:	4413      	add	r3, r2
 8001ce4:	1099      	asrs	r1, r3, #2
 8001ce6:	17d3      	asrs	r3, r2, #31
 8001ce8:	1ac9      	subs	r1, r1, r3
 8001cea:	460b      	mov	r3, r1
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	1a5b      	subs	r3, r3, r1
 8001cf0:	1ad1      	subs	r1, r2, r3
 8001cf2:	004b      	lsls	r3, r1, #1
 8001cf4:	3320      	adds	r3, #32
 8001cf6:	443b      	add	r3, r7
 8001cf8:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	9200      	str	r2, [sp, #0]
 8001d00:	4622      	mov	r2, r4
 8001d02:	4601      	mov	r1, r0
 8001d04:	4846      	ldr	r0, [pc, #280]	; (8001e20 <Menu_List_Vector_it+0x260>)
 8001d06:	f7ff fee7 	bl	8001ad8 <OLED_Set_Menu_List_Cursor>

		if(Incoder_Get_Button_State(Incoder)==Incoder_Button_Short){   								//Element select
 8001d0a:	6838      	ldr	r0, [r7, #0]
 8001d0c:	f7fe ffda 	bl	8000cc4 <Incoder_Get_Button_State>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d173      	bne.n	8001dfe <Menu_List_Vector_it+0x23e>
			struct Menu_List_Vector *now;
			now=self;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	61bb      	str	r3, [r7, #24]
			while(now->ID!=Menu_Count){
 8001d1a:	e002      	b.n	8001d22 <Menu_List_Vector_it+0x162>
				now=now->next;																//Shift Element pointer to select element
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	61bb      	str	r3, [r7, #24]
			while(now->ID!=Menu_Count){
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	7a1b      	ldrb	r3, [r3, #8]
 8001d26:	461a      	mov	r2, r3
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d1f6      	bne.n	8001d1c <Menu_List_Vector_it+0x15c>
			}

			Menu_Center_String_Drow(now->name,0,NULL);										//Draw name of element menu
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	2200      	movs	r2, #0
 8001d34:	2100      	movs	r1, #0
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff fb50 	bl	80013dc <Menu_Center_String_Drow>
			Menu_List_Element_Vector_it(now->Menu_List_Element_Vector, Incoder);						//Transceive control to Menu_List_Element_Vector menu
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	6839      	ldr	r1, [r7, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff fd40 	bl	80017c8 <Menu_List_Element_Vector_it>
																							//Area after resceive control start

			Soldering_Station_Write_Struct(&Soldering_Iron, &Soldering_Heat_Gun, &Soldering_Separator);
 8001d48:	4a36      	ldr	r2, [pc, #216]	; (8001e24 <Menu_List_Vector_it+0x264>)
 8001d4a:	4937      	ldr	r1, [pc, #220]	; (8001e28 <Menu_List_Vector_it+0x268>)
 8001d4c:	4837      	ldr	r0, [pc, #220]	; (8001e2c <Menu_List_Vector_it+0x26c>)
 8001d4e:	f001 fc27 	bl	80035a0 <Soldering_Station_Write_Struct>

			Menu_Center_String_Drow("MENU",0,NULL);
 8001d52:	2200      	movs	r2, #0
 8001d54:	2100      	movs	r1, #0
 8001d56:	4830      	ldr	r0, [pc, #192]	; (8001e18 <Menu_List_Vector_it+0x258>)
 8001d58:	f7ff fb40 	bl	80013dc <Menu_Center_String_Drow>
			Menu_List_Vector_Drow(self, (uint8_t)(Menu_Count/DROW_LIMIT)*DROW_LIMIT, DROW_LIMIT,1, &mas[0]);
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	4a2f      	ldr	r2, [pc, #188]	; (8001e1c <Menu_List_Vector_it+0x25c>)
 8001d60:	fb82 1203 	smull	r1, r2, r2, r3
 8001d64:	441a      	add	r2, r3
 8001d66:	1092      	asrs	r2, r2, #2
 8001d68:	17db      	asrs	r3, r3, #31
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	461a      	mov	r2, r3
 8001d70:	00d2      	lsls	r2, r2, #3
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	b2d9      	uxtb	r1, r3
 8001d76:	f107 0308 	add.w	r3, r7, #8
 8001d7a:	9300      	str	r3, [sp, #0]
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	2207      	movs	r2, #7
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f7ff fe57 	bl	8001a34 <Menu_List_Vector_Drow>
			OLED_Set_Menu_List_Cursor(&OLED1, mas[(Menu_Count% DROW_LIMIT)*2+1], Menu_Count% DROW_LIMIT+1,mas[(Menu_Count% DROW_LIMIT)*2],1);
 8001d86:	69fa      	ldr	r2, [r7, #28]
 8001d88:	4b24      	ldr	r3, [pc, #144]	; (8001e1c <Menu_List_Vector_it+0x25c>)
 8001d8a:	fb83 1302 	smull	r1, r3, r3, r2
 8001d8e:	4413      	add	r3, r2
 8001d90:	1099      	asrs	r1, r3, #2
 8001d92:	17d3      	asrs	r3, r2, #31
 8001d94:	1ac9      	subs	r1, r1, r3
 8001d96:	460b      	mov	r3, r1
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	1a5b      	subs	r3, r3, r1
 8001d9c:	1ad1      	subs	r1, r2, r3
 8001d9e:	004b      	lsls	r3, r1, #1
 8001da0:	3301      	adds	r3, #1
 8001da2:	3320      	adds	r3, #32
 8001da4:	443b      	add	r3, r7
 8001da6:	f813 0c18 	ldrb.w	r0, [r3, #-24]
 8001daa:	69fa      	ldr	r2, [r7, #28]
 8001dac:	4b1b      	ldr	r3, [pc, #108]	; (8001e1c <Menu_List_Vector_it+0x25c>)
 8001dae:	fb83 1302 	smull	r1, r3, r3, r2
 8001db2:	4413      	add	r3, r2
 8001db4:	1099      	asrs	r1, r3, #2
 8001db6:	17d3      	asrs	r3, r2, #31
 8001db8:	1ac9      	subs	r1, r1, r3
 8001dba:	460b      	mov	r3, r1
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	1a5b      	subs	r3, r3, r1
 8001dc0:	1ad1      	subs	r1, r2, r3
 8001dc2:	b2cb      	uxtb	r3, r1
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	b2dc      	uxtb	r4, r3
 8001dc8:	69fa      	ldr	r2, [r7, #28]
 8001dca:	4b14      	ldr	r3, [pc, #80]	; (8001e1c <Menu_List_Vector_it+0x25c>)
 8001dcc:	fb83 1302 	smull	r1, r3, r3, r2
 8001dd0:	4413      	add	r3, r2
 8001dd2:	1099      	asrs	r1, r3, #2
 8001dd4:	17d3      	asrs	r3, r2, #31
 8001dd6:	1ac9      	subs	r1, r1, r3
 8001dd8:	460b      	mov	r3, r1
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	1a5b      	subs	r3, r3, r1
 8001dde:	1ad1      	subs	r1, r2, r3
 8001de0:	004b      	lsls	r3, r1, #1
 8001de2:	3320      	adds	r3, #32
 8001de4:	443b      	add	r3, r7
 8001de6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001dea:	2201      	movs	r2, #1
 8001dec:	9200      	str	r2, [sp, #0]
 8001dee:	4622      	mov	r2, r4
 8001df0:	4601      	mov	r1, r0
 8001df2:	480b      	ldr	r0, [pc, #44]	; (8001e20 <Menu_List_Vector_it+0x260>)
 8001df4:	f7ff fe70 	bl	8001ad8 <OLED_Set_Menu_List_Cursor>
			Incoder_Reset_Button_State(Incoder);
 8001df8:	6838      	ldr	r0, [r7, #0]
 8001dfa:	f7fe ff56 	bl	8000caa <Incoder_Reset_Button_State>
	while(Incoder_Get_Button_State(Incoder)!=Incoder_Button_long){
 8001dfe:	6838      	ldr	r0, [r7, #0]
 8001e00:	f7fe ff60 	bl	8000cc4 <Incoder_Get_Button_State>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b03      	cmp	r3, #3
 8001e08:	f47f af1b 	bne.w	8001c42 <Menu_List_Vector_it+0x82>
																							//Area after resceive control end
		}
	}
}
 8001e0c:	bf00      	nop
 8001e0e:	bf00      	nop
 8001e10:	3724      	adds	r7, #36	; 0x24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd90      	pop	{r4, r7, pc}
 8001e16:	bf00      	nop
 8001e18:	08008f38 	.word	0x08008f38
 8001e1c:	92492493 	.word	0x92492493
 8001e20:	20000768 	.word	0x20000768
 8001e24:	20000954 	.word	0x20000954
 8001e28:	200008c8 	.word	0x200008c8
 8001e2c:	2000082c 	.word	0x2000082c

08001e30 <Menu_List_Create>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void Menu_List_Create(struct Menu_List_Vector *List_Vector,struct Menu_List_Element_Vector *List_Element_Vector, char *str){
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b088      	sub	sp, #32
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
	char *st= malloc((sizeof(char)*(strlen(str)+1)));
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f7fe f985 	bl	800014c <strlen>
 8001e42:	4603      	mov	r3, r0
 8001e44:	3301      	adds	r3, #1
 8001e46:	4618      	mov	r0, r3
 8001e48:	f006 ff58 	bl	8008cfc <malloc>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	61bb      	str	r3, [r7, #24]
	strcpy(st,str);
 8001e50:	6879      	ldr	r1, [r7, #4]
 8001e52:	69b8      	ldr	r0, [r7, #24]
 8001e54:	f007 f84a 	bl	8008eec <strcpy>
	if(List_Vector->Menu_List_Element_Vector==NULL){
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d109      	bne.n	8001e74 <Menu_List_Create+0x44>
		List_Vector->ID=0;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2200      	movs	r2, #0
 8001e64:	721a      	strb	r2, [r3, #8]
		List_Vector->name=st;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	60da      	str	r2, [r3, #12]
		List_Vector->Menu_List_Element_Vector=List_Element_Vector;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	68ba      	ldr	r2, [r7, #8]
 8001e70:	605a      	str	r2, [r3, #4]
			NEW_Element->ID++;
		}
		NEW_Element->ID++;
		now->next=NEW_Element;
	}
}
 8001e72:	e02a      	b.n	8001eca <Menu_List_Create+0x9a>
		struct Menu_List_Vector *now=List_Vector;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	61fb      	str	r3, [r7, #28]
		struct Menu_List_Vector *NEW_Element=malloc(sizeof(struct Menu_List_Vector));
 8001e78:	2010      	movs	r0, #16
 8001e7a:	f006 ff3f 	bl	8008cfc <malloc>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	617b      	str	r3, [r7, #20]
		NEW_Element->ID=List_Vector->ID;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	7a1a      	ldrb	r2, [r3, #8]
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	721a      	strb	r2, [r3, #8]
		NEW_Element->next=NULL;
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
		NEW_Element->name=st;
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	60da      	str	r2, [r3, #12]
		NEW_Element->Menu_List_Element_Vector=List_Element_Vector;
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	68ba      	ldr	r2, [r7, #8]
 8001e9a:	605a      	str	r2, [r3, #4]
		while(now->next!=NULL){
 8001e9c:	e008      	b.n	8001eb0 <Menu_List_Create+0x80>
			now=now->next;
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	61fb      	str	r3, [r7, #28]
			NEW_Element->ID++;
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	7a1b      	ldrb	r3, [r3, #8]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	b2da      	uxtb	r2, r3
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	721a      	strb	r2, [r3, #8]
		while(now->next!=NULL){
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d1f2      	bne.n	8001e9e <Menu_List_Create+0x6e>
		NEW_Element->ID++;
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	7a1b      	ldrb	r3, [r3, #8]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	b2da      	uxtb	r2, r3
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	721a      	strb	r2, [r3, #8]
		now->next=NEW_Element;
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	601a      	str	r2, [r3, #0]
}
 8001eca:	bf00      	nop
 8001ecc:	3720      	adds	r7, #32
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
	...

08001ed4 <start_Page_Drow>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void start_Page_Drow(){
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
	OLED_Clear_Line(&OLED1,0);
 8001ed8:	2100      	movs	r1, #0
 8001eda:	4834      	ldr	r0, [pc, #208]	; (8001fac <start_Page_Drow+0xd8>)
 8001edc:	f000 fbd6 	bl	800268c <OLED_Clear_Line>
	Menu_String_Drow("SoldIron", 1, 0);
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	4832      	ldr	r0, [pc, #200]	; (8001fb0 <start_Page_Drow+0xdc>)
 8001ee6:	f7ff fa3f 	bl	8001368 <Menu_String_Drow>
	OLED_Clear_Line(&OLED1,1);
 8001eea:	2101      	movs	r1, #1
 8001eec:	482f      	ldr	r0, [pc, #188]	; (8001fac <start_Page_Drow+0xd8>)
 8001eee:	f000 fbcd 	bl	800268c <OLED_Clear_Line>
	Menu_String_Drow("State: ", 0, 1);
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	482f      	ldr	r0, [pc, #188]	; (8001fb4 <start_Page_Drow+0xe0>)
 8001ef8:	f7ff fa36 	bl	8001368 <Menu_String_Drow>
	OLED_Clear_Line(&OLED1,2);
 8001efc:	2102      	movs	r1, #2
 8001efe:	482b      	ldr	r0, [pc, #172]	; (8001fac <start_Page_Drow+0xd8>)
 8001f00:	f000 fbc4 	bl	800268c <OLED_Clear_Line>
	Menu_String_Drow("TSetC:", 0, 2);
 8001f04:	2202      	movs	r2, #2
 8001f06:	2100      	movs	r1, #0
 8001f08:	482b      	ldr	r0, [pc, #172]	; (8001fb8 <start_Page_Drow+0xe4>)
 8001f0a:	f7ff fa2d 	bl	8001368 <Menu_String_Drow>
	OLED_Clear_Line(&OLED1,3);
 8001f0e:	2103      	movs	r1, #3
 8001f10:	4826      	ldr	r0, [pc, #152]	; (8001fac <start_Page_Drow+0xd8>)
 8001f12:	f000 fbbb 	bl	800268c <OLED_Clear_Line>
	Menu_String_Drow("TNowC:", 0, 3);
 8001f16:	2203      	movs	r2, #3
 8001f18:	2100      	movs	r1, #0
 8001f1a:	4828      	ldr	r0, [pc, #160]	; (8001fbc <start_Page_Drow+0xe8>)
 8001f1c:	f7ff fa24 	bl	8001368 <Menu_String_Drow>
	OLED_Clear_Line(&OLED1,4);
 8001f20:	2104      	movs	r1, #4
 8001f22:	4822      	ldr	r0, [pc, #136]	; (8001fac <start_Page_Drow+0xd8>)
 8001f24:	f000 fbb2 	bl	800268c <OLED_Clear_Line>
	Menu_String_Drow("AdPow:", 0, 4);
 8001f28:	2204      	movs	r2, #4
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	4824      	ldr	r0, [pc, #144]	; (8001fc0 <start_Page_Drow+0xec>)
 8001f2e:	f7ff fa1b 	bl	8001368 <Menu_String_Drow>
	OLED_Clear_Line(&OLED1,5);
 8001f32:	2105      	movs	r1, #5
 8001f34:	481d      	ldr	r0, [pc, #116]	; (8001fac <start_Page_Drow+0xd8>)
 8001f36:	f000 fba9 	bl	800268c <OLED_Clear_Line>


	Menu_String_Drow("Freq:", 0, 5);
 8001f3a:	2205      	movs	r2, #5
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	4821      	ldr	r0, [pc, #132]	; (8001fc4 <start_Page_Drow+0xf0>)
 8001f40:	f7ff fa12 	bl	8001368 <Menu_String_Drow>
	OLED_Clear_Line(&OLED1,6);
 8001f44:	2106      	movs	r1, #6
 8001f46:	4819      	ldr	r0, [pc, #100]	; (8001fac <start_Page_Drow+0xd8>)
 8001f48:	f000 fba0 	bl	800268c <OLED_Clear_Line>
	Menu_String_Drow("Count:", 0, 6);
 8001f4c:	2206      	movs	r2, #6
 8001f4e:	2100      	movs	r1, #0
 8001f50:	481d      	ldr	r0, [pc, #116]	; (8001fc8 <start_Page_Drow+0xf4>)
 8001f52:	f7ff fa09 	bl	8001368 <Menu_String_Drow>


	Menu_String_Drow("SoldFAN", 12, 0);
 8001f56:	2200      	movs	r2, #0
 8001f58:	210c      	movs	r1, #12
 8001f5a:	481c      	ldr	r0, [pc, #112]	; (8001fcc <start_Page_Drow+0xf8>)
 8001f5c:	f7ff fa04 	bl	8001368 <Menu_String_Drow>
	Menu_String_Drow("State: ", 11, 1);
 8001f60:	2201      	movs	r2, #1
 8001f62:	210b      	movs	r1, #11
 8001f64:	4813      	ldr	r0, [pc, #76]	; (8001fb4 <start_Page_Drow+0xe0>)
 8001f66:	f7ff f9ff 	bl	8001368 <Menu_String_Drow>
	Menu_String_Drow("TSetC:", 11, 2);
 8001f6a:	2202      	movs	r2, #2
 8001f6c:	210b      	movs	r1, #11
 8001f6e:	4812      	ldr	r0, [pc, #72]	; (8001fb8 <start_Page_Drow+0xe4>)
 8001f70:	f7ff f9fa 	bl	8001368 <Menu_String_Drow>
	Menu_String_Drow("TNowC:", 11, 3);
 8001f74:	2203      	movs	r2, #3
 8001f76:	210b      	movs	r1, #11
 8001f78:	4810      	ldr	r0, [pc, #64]	; (8001fbc <start_Page_Drow+0xe8>)
 8001f7a:	f7ff f9f5 	bl	8001368 <Menu_String_Drow>

	Menu_String_Drow("Separator", 12, 4);
 8001f7e:	2204      	movs	r2, #4
 8001f80:	210c      	movs	r1, #12
 8001f82:	4813      	ldr	r0, [pc, #76]	; (8001fd0 <start_Page_Drow+0xfc>)
 8001f84:	f7ff f9f0 	bl	8001368 <Menu_String_Drow>
	Menu_String_Drow("State: ", 11, 5);
 8001f88:	2205      	movs	r2, #5
 8001f8a:	210b      	movs	r1, #11
 8001f8c:	4809      	ldr	r0, [pc, #36]	; (8001fb4 <start_Page_Drow+0xe0>)
 8001f8e:	f7ff f9eb 	bl	8001368 <Menu_String_Drow>
	Menu_String_Drow("TSetC:", 11, 6);
 8001f92:	2206      	movs	r2, #6
 8001f94:	210b      	movs	r1, #11
 8001f96:	4808      	ldr	r0, [pc, #32]	; (8001fb8 <start_Page_Drow+0xe4>)
 8001f98:	f7ff f9e6 	bl	8001368 <Menu_String_Drow>
	Menu_String_Drow("TNowC:", 11, 7);
 8001f9c:	2207      	movs	r2, #7
 8001f9e:	210b      	movs	r1, #11
 8001fa0:	4806      	ldr	r0, [pc, #24]	; (8001fbc <start_Page_Drow+0xe8>)
 8001fa2:	f7ff f9e1 	bl	8001368 <Menu_String_Drow>

}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20000768 	.word	0x20000768
 8001fb0:	08008f40 	.word	0x08008f40
 8001fb4:	08008f4c 	.word	0x08008f4c
 8001fb8:	08008f54 	.word	0x08008f54
 8001fbc:	08008f5c 	.word	0x08008f5c
 8001fc0:	08008f64 	.word	0x08008f64
 8001fc4:	08008f6c 	.word	0x08008f6c
 8001fc8:	08008f74 	.word	0x08008f74
 8001fcc:	08008f7c 	.word	0x08008f7c
 8001fd0:	08008f84 	.word	0x08008f84

08001fd4 <Button_Handler>:
//---------------------------------------------------------------------------------Button_Handler
void Button_Handler(struct Button* self){
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
	switch(self->ID){
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	2b07      	cmp	r3, #7
 8001fe2:	f200 809f 	bhi.w	8002124 <Button_Handler+0x150>
 8001fe6:	a201      	add	r2, pc, #4	; (adr r2, 8001fec <Button_Handler+0x18>)
 8001fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fec:	0800200d 	.word	0x0800200d
 8001ff0:	08002033 	.word	0x08002033
 8001ff4:	08002049 	.word	0x08002049
 8001ff8:	0800205f 	.word	0x0800205f
 8001ffc:	08002085 	.word	0x08002085
 8002000:	0800209b 	.word	0x0800209b
 8002004:	080020b1 	.word	0x080020b1
 8002008:	080020cd 	.word	0x080020cd
		case Button_ID_E2B1:
			if((Button_Get_Pin_State(self)==GPIO_PIN_RESET)&&(Soldering_Iron.State==1)){
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f7fe fe27 	bl	8000c60 <Button_Get_Pin_State>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d178      	bne.n	800210a <Button_Handler+0x136>
 8002018:	4b44      	ldr	r3, [pc, #272]	; (800212c <Button_Handler+0x158>)
 800201a:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800201e:	2b01      	cmp	r3, #1
 8002020:	d173      	bne.n	800210a <Button_Handler+0x136>
				Solder_Iron_Sleep_Time_Resset(&Soldering_Iron);
 8002022:	4842      	ldr	r0, [pc, #264]	; (800212c <Button_Handler+0x158>)
 8002024:	f000 ff0a 	bl	8002e3c <Solder_Iron_Sleep_Time_Resset>
				Solder_Iron_Set_Temperature(&Soldering_Iron,PRESSET2);
 8002028:	2102      	movs	r1, #2
 800202a:	4840      	ldr	r0, [pc, #256]	; (800212c <Button_Handler+0x158>)
 800202c:	f000 ffa5 	bl	8002f7a <Solder_Iron_Set_Temperature>
			}
			break;
 8002030:	e06b      	b.n	800210a <Button_Handler+0x136>
		case Button_ID_E2B2:
			if(Button_Get_Pin_State(self)==GPIO_PIN_RESET){
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7fe fe14 	bl	8000c60 <Button_Get_Pin_State>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d167      	bne.n	800210e <Button_Handler+0x13a>
				Soldering_Heat_Gun_Set_Temperature(&Soldering_Heat_Gun,PRESSET2);
 800203e:	2102      	movs	r1, #2
 8002040:	483b      	ldr	r0, [pc, #236]	; (8002130 <Button_Handler+0x15c>)
 8002042:	f001 f8d4 	bl	80031ee <Soldering_Heat_Gun_Set_Temperature>
			}

			break;
 8002046:	e062      	b.n	800210e <Button_Handler+0x13a>
		case Button_ID_E2B3:
			if(Button_Get_Pin_State(self)==GPIO_PIN_RESET)
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f7fe fe09 	bl	8000c60 <Button_Get_Pin_State>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d15e      	bne.n	8002112 <Button_Handler+0x13e>
				Soldering_Separator_Set_Temperature(&Soldering_Separator, PRESSET2);
 8002054:	2102      	movs	r1, #2
 8002056:	4837      	ldr	r0, [pc, #220]	; (8002134 <Button_Handler+0x160>)
 8002058:	f001 f9d2 	bl	8003400 <Soldering_Separator_Set_Temperature>

			break;
 800205c:	e059      	b.n	8002112 <Button_Handler+0x13e>
		case Button_ID_E1B1:
			if((Button_Get_Pin_State(self)==GPIO_PIN_RESET)&&(Soldering_Iron.State==1)){
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f7fe fdfe 	bl	8000c60 <Button_Get_Pin_State>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d155      	bne.n	8002116 <Button_Handler+0x142>
 800206a:	4b30      	ldr	r3, [pc, #192]	; (800212c <Button_Handler+0x158>)
 800206c:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002070:	2b01      	cmp	r3, #1
 8002072:	d150      	bne.n	8002116 <Button_Handler+0x142>
				Solder_Iron_Sleep_Time_Resset(&Soldering_Iron);
 8002074:	482d      	ldr	r0, [pc, #180]	; (800212c <Button_Handler+0x158>)
 8002076:	f000 fee1 	bl	8002e3c <Solder_Iron_Sleep_Time_Resset>
				Solder_Iron_Set_Temperature(&Soldering_Iron, PRESSET1);
 800207a:	2101      	movs	r1, #1
 800207c:	482b      	ldr	r0, [pc, #172]	; (800212c <Button_Handler+0x158>)
 800207e:	f000 ff7c 	bl	8002f7a <Solder_Iron_Set_Temperature>
			}
			break;
 8002082:	e048      	b.n	8002116 <Button_Handler+0x142>
		case Button_ID_E1B2:
			if(Button_Get_Pin_State(self)==GPIO_PIN_RESET){
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f7fe fdeb 	bl	8000c60 <Button_Get_Pin_State>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d144      	bne.n	800211a <Button_Handler+0x146>
				Soldering_Heat_Gun_Set_Temperature(&Soldering_Heat_Gun, PRESSET1);
 8002090:	2101      	movs	r1, #1
 8002092:	4827      	ldr	r0, [pc, #156]	; (8002130 <Button_Handler+0x15c>)
 8002094:	f001 f8ab 	bl	80031ee <Soldering_Heat_Gun_Set_Temperature>
			}

			break;
 8002098:	e03f      	b.n	800211a <Button_Handler+0x146>
		case Button_ID_E1B3:
			if(Button_Get_Pin_State(self)==GPIO_PIN_RESET)
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7fe fde0 	bl	8000c60 <Button_Get_Pin_State>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d13b      	bne.n	800211e <Button_Handler+0x14a>
				Soldering_Separator_Set_Temperature(&Soldering_Separator, PRESSET1);
 80020a6:	2101      	movs	r1, #1
 80020a8:	4822      	ldr	r0, [pc, #136]	; (8002134 <Button_Handler+0x160>)
 80020aa:	f001 f9a9 	bl	8003400 <Soldering_Separator_Set_Temperature>
			break;
 80020ae:	e036      	b.n	800211e <Button_Handler+0x14a>
		case Button_Gerkon_ID:
			if(Button_Get_Pin_State(self)==GPIO_PIN_RESET)
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f7fe fdd5 	bl	8000c60 <Button_Get_Pin_State>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d103      	bne.n	80020c4 <Button_Handler+0xf0>
				Soldering_Heat_Gun_OFF(&Soldering_Heat_Gun);
 80020bc:	481c      	ldr	r0, [pc, #112]	; (8002130 <Button_Handler+0x15c>)
 80020be:	f001 f86e 	bl	800319e <Soldering_Heat_Gun_OFF>
			else
				Soldering_Heat_Gun_ON(&Soldering_Heat_Gun);

			break;
 80020c2:	e02f      	b.n	8002124 <Button_Handler+0x150>
				Soldering_Heat_Gun_ON(&Soldering_Heat_Gun);
 80020c4:	481a      	ldr	r0, [pc, #104]	; (8002130 <Button_Handler+0x15c>)
 80020c6:	f001 f83a 	bl	800313e <Soldering_Heat_Gun_ON>
			break;
 80020ca:	e02b      	b.n	8002124 <Button_Handler+0x150>
		case Full_Power_Button_ID:
			if(Soldering_Iron.State==1){
 80020cc:	4b17      	ldr	r3, [pc, #92]	; (800212c <Button_Handler+0x158>)
 80020ce:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d125      	bne.n	8002122 <Button_Handler+0x14e>
				if(Button_Get_Pin_State(self)==GPIO_PIN_RESET){
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f7fe fdc2 	bl	8000c60 <Button_Get_Pin_State>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d104      	bne.n	80020ec <Button_Handler+0x118>
					Soldering_Iron.Full_Power_State=1;
 80020e2:	4b12      	ldr	r3, [pc, #72]	; (800212c <Button_Handler+0x158>)
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
 80020ea:	e003      	b.n	80020f4 <Button_Handler+0x120>
				}else{
					Soldering_Iron.Full_Power_State=0;
 80020ec:	4b0f      	ldr	r3, [pc, #60]	; (800212c <Button_Handler+0x158>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
				}
				Solder_Iron_Sleep_Time_Resset(&Soldering_Iron);
 80020f4:	480d      	ldr	r0, [pc, #52]	; (800212c <Button_Handler+0x158>)
 80020f6:	f000 fea1 	bl	8002e3c <Solder_Iron_Sleep_Time_Resset>
				Solder_Iron_Set_Temperature(&Soldering_Iron, Soldering_Iron.MODE);
 80020fa:	4b0c      	ldr	r3, [pc, #48]	; (800212c <Button_Handler+0x158>)
 80020fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002100:	4619      	mov	r1, r3
 8002102:	480a      	ldr	r0, [pc, #40]	; (800212c <Button_Handler+0x158>)
 8002104:	f000 ff39 	bl	8002f7a <Solder_Iron_Set_Temperature>
			}
			break;
 8002108:	e00b      	b.n	8002122 <Button_Handler+0x14e>
			break;
 800210a:	bf00      	nop
 800210c:	e00a      	b.n	8002124 <Button_Handler+0x150>
			break;
 800210e:	bf00      	nop
 8002110:	e008      	b.n	8002124 <Button_Handler+0x150>
			break;
 8002112:	bf00      	nop
 8002114:	e006      	b.n	8002124 <Button_Handler+0x150>
			break;
 8002116:	bf00      	nop
 8002118:	e004      	b.n	8002124 <Button_Handler+0x150>
			break;
 800211a:	bf00      	nop
 800211c:	e002      	b.n	8002124 <Button_Handler+0x150>
			break;
 800211e:	bf00      	nop
 8002120:	e000      	b.n	8002124 <Button_Handler+0x150>
			break;
 8002122:	bf00      	nop
	}
}
 8002124:	bf00      	nop
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	2000082c 	.word	0x2000082c
 8002130:	200008c8 	.word	0x200008c8
 8002134:	20000954 	.word	0x20000954

08002138 <Menu_it>:

//--------------------------------------------------------------------------------------------------------------------------------------------------------
void Menu_it(struct Menu_List_Vector *self, struct Incoder *Incoder_P1, struct Incoder *Incoder_P2){
 8002138:	b580      	push	{r7, lr}
 800213a:	b088      	sub	sp, #32
 800213c:	af02      	add	r7, sp, #8
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
	enum {
		Interface_Contoll_Soldering_Heat_Gun,
		Interface_Contoll_Soldering_Separator
	}Interface_Contoll;

	Interface_Contoll=Interface_Contoll_Soldering_Heat_Gun;
 8002144:	2300      	movs	r3, #0
 8002146:	75fb      	strb	r3, [r7, #23]
	start_Page_Drow();
 8002148:	f7ff fec4 	bl	8001ed4 <start_Page_Drow>

	while(1){

		if(Incoder_Get_Button_State(Incoder_P2)==Incoder_Button_long){
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f7fe fdb9 	bl	8000cc4 <Incoder_Get_Button_State>
 8002152:	4603      	mov	r3, r0
 8002154:	2b03      	cmp	r3, #3
 8002156:	d111      	bne.n	800217c <Menu_it+0x44>

			Solder_Iron_OFF(&Soldering_Iron);
 8002158:	4897      	ldr	r0, [pc, #604]	; (80023b8 <Menu_it+0x280>)
 800215a:	f000 fefc 	bl	8002f56 <Solder_Iron_OFF>
			Soldering_Heat_Gun_OFF(&Soldering_Heat_Gun);
 800215e:	4897      	ldr	r0, [pc, #604]	; (80023bc <Menu_it+0x284>)
 8002160:	f001 f81d 	bl	800319e <Soldering_Heat_Gun_OFF>
			Soldering_Separator_OFF(&Soldering_Separator);
 8002164:	4896      	ldr	r0, [pc, #600]	; (80023c0 <Menu_it+0x288>)
 8002166:	f001 f936 	bl	80033d6 <Soldering_Separator_OFF>

			Menu_List_Vector_it(self, Incoder_P2);
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	68f8      	ldr	r0, [r7, #12]
 800216e:	f7ff fd27 	bl	8001bc0 <Menu_List_Vector_it>
			Incoder_Reset_Button_State(Incoder_P2);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f7fe fd99 	bl	8000caa <Incoder_Reset_Button_State>
			start_Page_Drow();
 8002178:	f7ff feac 	bl	8001ed4 <start_Page_Drow>
		}
		if(Incoder_Get_Button_State(Incoder_P1)==Incoder_Button_long){
 800217c:	68b8      	ldr	r0, [r7, #8]
 800217e:	f7fe fda1 	bl	8000cc4 <Incoder_Get_Button_State>
 8002182:	4603      	mov	r3, r0
 8002184:	2b03      	cmp	r3, #3
 8002186:	d10a      	bne.n	800219e <Menu_it+0x66>
			Incoder_Reset_Button_State(Incoder_P1);
 8002188:	68b8      	ldr	r0, [r7, #8]
 800218a:	f7fe fd8e 	bl	8000caa <Incoder_Reset_Button_State>
			if(Interface_Contoll==Interface_Contoll_Soldering_Heat_Gun)
 800218e:	7dfb      	ldrb	r3, [r7, #23]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d102      	bne.n	800219a <Menu_it+0x62>
				Interface_Contoll=Interface_Contoll_Soldering_Separator;
 8002194:	2301      	movs	r3, #1
 8002196:	75fb      	strb	r3, [r7, #23]
 8002198:	e001      	b.n	800219e <Menu_it+0x66>
			else
				Interface_Contoll=Interface_Contoll_Soldering_Heat_Gun;
 800219a:	2300      	movs	r3, #0
 800219c:	75fb      	strb	r3, [r7, #23]
		}

		Value_Changing(&Soldering_Iron.Temperature_Pressets.Manual, 100, UINT16, 800, MAX_ADC_Value, Incoder_P2);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	9301      	str	r3, [sp, #4]
 80021a2:	f640 63d8 	movw	r3, #3800	; 0xed8
 80021a6:	9300      	str	r3, [sp, #0]
 80021a8:	f44f 7348 	mov.w	r3, #800	; 0x320
 80021ac:	2202      	movs	r2, #2
 80021ae:	2164      	movs	r1, #100	; 0x64
 80021b0:	4884      	ldr	r0, [pc, #528]	; (80023c4 <Menu_it+0x28c>)
 80021b2:	f7ff fa03 	bl	80015bc <Value_Changing>
		if(Interface_Contoll==Interface_Contoll_Soldering_Heat_Gun)
 80021b6:	7dfb      	ldrb	r3, [r7, #23]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d10c      	bne.n	80021d6 <Menu_it+0x9e>
			Value_Changing(&Soldering_Heat_Gun.Temperature_Pressets.Manual, 100, UINT16, 400, MAX_ADC_Value, Incoder_P1);
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	9301      	str	r3, [sp, #4]
 80021c0:	f640 63d8 	movw	r3, #3800	; 0xed8
 80021c4:	9300      	str	r3, [sp, #0]
 80021c6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80021ca:	2202      	movs	r2, #2
 80021cc:	2164      	movs	r1, #100	; 0x64
 80021ce:	487e      	ldr	r0, [pc, #504]	; (80023c8 <Menu_it+0x290>)
 80021d0:	f7ff f9f4 	bl	80015bc <Value_Changing>
 80021d4:	e00b      	b.n	80021ee <Menu_it+0xb6>
		else
			Value_Changing(&Soldering_Separator.Temperature_Pressets.Manual, 100, UINT16, 400, MAX_ADC_Value, Incoder_P1);
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	9301      	str	r3, [sp, #4]
 80021da:	f640 63d8 	movw	r3, #3800	; 0xed8
 80021de:	9300      	str	r3, [sp, #0]
 80021e0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80021e4:	2202      	movs	r2, #2
 80021e6:	2164      	movs	r1, #100	; 0x64
 80021e8:	4878      	ldr	r0, [pc, #480]	; (80023cc <Menu_it+0x294>)
 80021ea:	f7ff f9e7 	bl	80015bc <Value_Changing>



		Menu_Parmetr_Drow(&Soldering_Iron.State, 6, 1, BOOL);
 80021ee:	2303      	movs	r3, #3
 80021f0:	2201      	movs	r2, #1
 80021f2:	2106      	movs	r1, #6
 80021f4:	4876      	ldr	r0, [pc, #472]	; (80023d0 <Menu_it+0x298>)
 80021f6:	f7fe ff1d 	bl	8001034 <Menu_Parmetr_Drow>
		Menu_Parmetr_Drow(&Soldering_Iron.Temperature_Set, 6, 2, UINT16);
 80021fa:	2302      	movs	r3, #2
 80021fc:	2202      	movs	r2, #2
 80021fe:	2106      	movs	r1, #6
 8002200:	4874      	ldr	r0, [pc, #464]	; (80023d4 <Menu_it+0x29c>)
 8002202:	f7fe ff17 	bl	8001034 <Menu_Parmetr_Drow>
		Menu_Parmetr_Drow(&Soldering_Iron.Temperature, 6, 3, UINT16);
 8002206:	2302      	movs	r3, #2
 8002208:	2203      	movs	r2, #3
 800220a:	2106      	movs	r1, #6
 800220c:	4872      	ldr	r0, [pc, #456]	; (80023d8 <Menu_it+0x2a0>)
 800220e:	f7fe ff11 	bl	8001034 <Menu_Parmetr_Drow>
		Menu_Parmetr_Drow(&Soldering_Iron.Full_Power_State, 6, 4, BOOL);
 8002212:	2303      	movs	r3, #3
 8002214:	2204      	movs	r2, #4
 8002216:	2106      	movs	r1, #6
 8002218:	4870      	ldr	r0, [pc, #448]	; (80023dc <Menu_it+0x2a4>)
 800221a:	f7fe ff0b 	bl	8001034 <Menu_Parmetr_Drow>
		Menu_Parmetr_Drow(&ZCD.Frequency, 6, 5, UINT8);
 800221e:	2301      	movs	r3, #1
 8002220:	2205      	movs	r2, #5
 8002222:	2106      	movs	r1, #6
 8002224:	486e      	ldr	r0, [pc, #440]	; (80023e0 <Menu_it+0x2a8>)
 8002226:	f7fe ff05 	bl	8001034 <Menu_Parmetr_Drow>
		Menu_Parmetr_Drow(&Soldering_Heat_Gun.PID.MAX_Control, 6, 6, UINT16);
 800222a:	2302      	movs	r3, #2
 800222c:	2206      	movs	r2, #6
 800222e:	2106      	movs	r1, #6
 8002230:	486c      	ldr	r0, [pc, #432]	; (80023e4 <Menu_it+0x2ac>)
 8002232:	f7fe feff 	bl	8001034 <Menu_Parmetr_Drow>
		Menu_Parmetr_Drow(&Soldering_Heat_Gun.PAC_Control->Control_Value, 6, 7, UINT16);
 8002236:	4b61      	ldr	r3, [pc, #388]	; (80023bc <Menu_it+0x284>)
 8002238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800223a:	f103 000c 	add.w	r0, r3, #12
 800223e:	2302      	movs	r3, #2
 8002240:	2207      	movs	r2, #7
 8002242:	2106      	movs	r1, #6
 8002244:	f7fe fef6 	bl	8001034 <Menu_Parmetr_Drow>


		Menu_Parmetr_Drow(&Soldering_Heat_Gun.State, 17, 1, BOOL);
 8002248:	2303      	movs	r3, #3
 800224a:	2201      	movs	r2, #1
 800224c:	2111      	movs	r1, #17
 800224e:	4866      	ldr	r0, [pc, #408]	; (80023e8 <Menu_it+0x2b0>)
 8002250:	f7fe fef0 	bl	8001034 <Menu_Parmetr_Drow>
		Menu_Parmetr_Drow(&Soldering_Heat_Gun.Temperature_Set, 17, 2, UINT16);
 8002254:	2302      	movs	r3, #2
 8002256:	2202      	movs	r2, #2
 8002258:	2111      	movs	r1, #17
 800225a:	4864      	ldr	r0, [pc, #400]	; (80023ec <Menu_it+0x2b4>)
 800225c:	f7fe feea 	bl	8001034 <Menu_Parmetr_Drow>
		Menu_Parmetr_Drow(&Soldering_Heat_Gun.Temperature, 17, 3, UINT16);
 8002260:	2302      	movs	r3, #2
 8002262:	2203      	movs	r2, #3
 8002264:	2111      	movs	r1, #17
 8002266:	4862      	ldr	r0, [pc, #392]	; (80023f0 <Menu_it+0x2b8>)
 8002268:	f7fe fee4 	bl	8001034 <Menu_Parmetr_Drow>

		Menu_Parmetr_Drow(&Soldering_Separator.State, 17, 5, BOOL);
 800226c:	2303      	movs	r3, #3
 800226e:	2205      	movs	r2, #5
 8002270:	2111      	movs	r1, #17
 8002272:	4860      	ldr	r0, [pc, #384]	; (80023f4 <Menu_it+0x2bc>)
 8002274:	f7fe fede 	bl	8001034 <Menu_Parmetr_Drow>
		Menu_Parmetr_Drow(&Soldering_Separator.Temperature_Set, 17, 6, UINT16);
 8002278:	2302      	movs	r3, #2
 800227a:	2206      	movs	r2, #6
 800227c:	2111      	movs	r1, #17
 800227e:	485e      	ldr	r0, [pc, #376]	; (80023f8 <Menu_it+0x2c0>)
 8002280:	f7fe fed8 	bl	8001034 <Menu_Parmetr_Drow>
		Menu_Parmetr_Drow(&Soldering_Separator.Temperature, 17, 7, UINT16);
 8002284:	2302      	movs	r3, #2
 8002286:	2207      	movs	r2, #7
 8002288:	2111      	movs	r1, #17
 800228a:	485c      	ldr	r0, [pc, #368]	; (80023fc <Menu_it+0x2c4>)
 800228c:	f7fe fed2 	bl	8001034 <Menu_Parmetr_Drow>
		Menu_Parmetr_Drow(&Soldering_Separator.PAC_Control->Control_Value, 1, 7, UINT16);
 8002290:	4b4b      	ldr	r3, [pc, #300]	; (80023c0 <Menu_it+0x288>)
 8002292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002294:	f103 000c 	add.w	r0, r3, #12
 8002298:	2302      	movs	r3, #2
 800229a:	2207      	movs	r2, #7
 800229c:	2101      	movs	r1, #1
 800229e:	f7fe fec9 	bl	8001034 <Menu_Parmetr_Drow>



		if(Incoder_Get_Button_State(Incoder_P2)==Incoder_Button_Short){                 //Solder_Iron_ON/OFF
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7fe fd0e 	bl	8000cc4 <Incoder_Get_Button_State>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d10e      	bne.n	80022cc <Menu_it+0x194>
			Incoder_Reset_Button_State(Incoder_P2);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7fe fcfb 	bl	8000caa <Incoder_Reset_Button_State>
			if(Soldering_Iron.State==0){
 80022b4:	4b40      	ldr	r3, [pc, #256]	; (80023b8 <Menu_it+0x280>)
 80022b6:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d103      	bne.n	80022c6 <Menu_it+0x18e>
				Solder_Iron_ON(&Soldering_Iron);
 80022be:	483e      	ldr	r0, [pc, #248]	; (80023b8 <Menu_it+0x280>)
 80022c0:	f000 fe33 	bl	8002f2a <Solder_Iron_ON>
 80022c4:	e002      	b.n	80022cc <Menu_it+0x194>
			}else{
				Solder_Iron_OFF(&Soldering_Iron);
 80022c6:	483c      	ldr	r0, [pc, #240]	; (80023b8 <Menu_it+0x280>)
 80022c8:	f000 fe45 	bl	8002f56 <Solder_Iron_OFF>
			}
		}

		if(Incoder_Get_Button_State(Incoder_P1)==Incoder_Button_Short&&Interface_Contoll==Interface_Contoll_Soldering_Heat_Gun){		//Soldering_Heat_Gun_ON/OFF
 80022cc:	68b8      	ldr	r0, [r7, #8]
 80022ce:	f7fe fcf9 	bl	8000cc4 <Incoder_Get_Button_State>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d112      	bne.n	80022fe <Menu_it+0x1c6>
 80022d8:	7dfb      	ldrb	r3, [r7, #23]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10f      	bne.n	80022fe <Menu_it+0x1c6>
			Incoder_Reset_Button_State(Incoder_P1);
 80022de:	68b8      	ldr	r0, [r7, #8]
 80022e0:	f7fe fce3 	bl	8000caa <Incoder_Reset_Button_State>
			if(Soldering_Heat_Gun.State!=Heat_Gun_ON)
 80022e4:	4b35      	ldr	r3, [pc, #212]	; (80023bc <Menu_it+0x284>)
 80022e6:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d003      	beq.n	80022f6 <Menu_it+0x1be>
				Soldering_Heat_Gun_ON(&Soldering_Heat_Gun);
 80022ee:	4833      	ldr	r0, [pc, #204]	; (80023bc <Menu_it+0x284>)
 80022f0:	f000 ff25 	bl	800313e <Soldering_Heat_Gun_ON>
			if(Soldering_Heat_Gun.State!=Heat_Gun_ON)
 80022f4:	e01b      	b.n	800232e <Menu_it+0x1f6>
			else
				Soldering_Heat_Gun_OFF(&Soldering_Heat_Gun);
 80022f6:	4831      	ldr	r0, [pc, #196]	; (80023bc <Menu_it+0x284>)
 80022f8:	f000 ff51 	bl	800319e <Soldering_Heat_Gun_OFF>
			if(Soldering_Heat_Gun.State!=Heat_Gun_ON)
 80022fc:	e017      	b.n	800232e <Menu_it+0x1f6>
		}
		else if(Incoder_Get_Button_State(Incoder_P1)==Incoder_Button_Short&&Interface_Contoll==Interface_Contoll_Soldering_Separator){
 80022fe:	68b8      	ldr	r0, [r7, #8]
 8002300:	f7fe fce0 	bl	8000cc4 <Incoder_Get_Button_State>
 8002304:	4603      	mov	r3, r0
 8002306:	2b02      	cmp	r3, #2
 8002308:	d111      	bne.n	800232e <Menu_it+0x1f6>
 800230a:	7dfb      	ldrb	r3, [r7, #23]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d10e      	bne.n	800232e <Menu_it+0x1f6>
			Incoder_Reset_Button_State(Incoder_P1);															//Soldering_Separator_ON/OFF
 8002310:	68b8      	ldr	r0, [r7, #8]
 8002312:	f7fe fcca 	bl	8000caa <Incoder_Reset_Button_State>
				if(Soldering_Separator.State!=Separator_ON)
 8002316:	4b2a      	ldr	r3, [pc, #168]	; (80023c0 <Menu_it+0x288>)
 8002318:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800231c:	2b01      	cmp	r3, #1
 800231e:	d003      	beq.n	8002328 <Menu_it+0x1f0>
					Soldering_Separator_ON(&Soldering_Separator);
 8002320:	4827      	ldr	r0, [pc, #156]	; (80023c0 <Menu_it+0x288>)
 8002322:	f001 f83a 	bl	800339a <Soldering_Separator_ON>
 8002326:	e002      	b.n	800232e <Menu_it+0x1f6>
				else
					Soldering_Separator_OFF(&Soldering_Separator);
 8002328:	4825      	ldr	r0, [pc, #148]	; (80023c0 <Menu_it+0x288>)
 800232a:	f001 f854 	bl	80033d6 <Soldering_Separator_OFF>
		}



		if(Soldering_Iron.Temperature_Set_Prew!=Soldering_Iron.Temperature_Pressets.Manual){
 800232e:	4b22      	ldr	r3, [pc, #136]	; (80023b8 <Menu_it+0x280>)
 8002330:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 8002334:	4b20      	ldr	r3, [pc, #128]	; (80023b8 <Menu_it+0x280>)
 8002336:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800233a:	429a      	cmp	r2, r3
 800233c:	d00f      	beq.n	800235e <Menu_it+0x226>
			Soldering_Iron.Temperature_Set_Prew=Soldering_Iron.Temperature_Pressets.Manual;
 800233e:	4b1e      	ldr	r3, [pc, #120]	; (80023b8 <Menu_it+0x280>)
 8002340:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 8002344:	4b1c      	ldr	r3, [pc, #112]	; (80023b8 <Menu_it+0x280>)
 8002346:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
			Solder_Iron_Sleep_Time_Resset(&Soldering_Iron);
 800234a:	481b      	ldr	r0, [pc, #108]	; (80023b8 <Menu_it+0x280>)
 800234c:	f000 fd76 	bl	8002e3c <Solder_Iron_Sleep_Time_Resset>
			Solder_Iron_Set_Temperature(&Soldering_Iron, MANUAL);
 8002350:	2100      	movs	r1, #0
 8002352:	4819      	ldr	r0, [pc, #100]	; (80023b8 <Menu_it+0x280>)
 8002354:	f000 fe11 	bl	8002f7a <Solder_Iron_Set_Temperature>
			Solder_Iron_Flash_Reset_Rewrite_Timer(&Soldering_Iron);
 8002358:	4817      	ldr	r0, [pc, #92]	; (80023b8 <Menu_it+0x280>)
 800235a:	f000 fecd 	bl	80030f8 <Solder_Iron_Flash_Reset_Rewrite_Timer>
		}
		if(Soldering_Heat_Gun.Temperature_Set_Prew!=Soldering_Heat_Gun.Temperature_Pressets.Manual){
 800235e:	4b17      	ldr	r3, [pc, #92]	; (80023bc <Menu_it+0x284>)
 8002360:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 8002364:	4b15      	ldr	r3, [pc, #84]	; (80023bc <Menu_it+0x284>)
 8002366:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800236a:	429a      	cmp	r2, r3
 800236c:	d00c      	beq.n	8002388 <Menu_it+0x250>
			Soldering_Heat_Gun.Temperature_Set_Prew=Soldering_Heat_Gun.Temperature_Pressets.Manual;
 800236e:	4b13      	ldr	r3, [pc, #76]	; (80023bc <Menu_it+0x284>)
 8002370:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 8002374:	4b11      	ldr	r3, [pc, #68]	; (80023bc <Menu_it+0x284>)
 8002376:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
			Soldering_Heat_Gun_Set_Temperature(&Soldering_Heat_Gun, MANUAL);
 800237a:	2100      	movs	r1, #0
 800237c:	480f      	ldr	r0, [pc, #60]	; (80023bc <Menu_it+0x284>)
 800237e:	f000 ff36 	bl	80031ee <Soldering_Heat_Gun_Set_Temperature>
			Soldering_Heat_Gun_Flash_Reset_Rewrite_Timer(&Soldering_Heat_Gun);
 8002382:	480e      	ldr	r0, [pc, #56]	; (80023bc <Menu_it+0x284>)
 8002384:	f000 ffe6 	bl	8003354 <Soldering_Heat_Gun_Flash_Reset_Rewrite_Timer>
		}
		if(Soldering_Separator.Temperature_Set_Prew!=Soldering_Separator.Temperature_Pressets.Manual){
 8002388:	4b0d      	ldr	r3, [pc, #52]	; (80023c0 <Menu_it+0x288>)
 800238a:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 800238e:	4b0c      	ldr	r3, [pc, #48]	; (80023c0 <Menu_it+0x288>)
 8002390:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002394:	429a      	cmp	r2, r3
 8002396:	f43f aed9 	beq.w	800214c <Menu_it+0x14>
			Soldering_Separator.Temperature_Set_Prew=Soldering_Separator.Temperature_Pressets.Manual;
 800239a:	4b09      	ldr	r3, [pc, #36]	; (80023c0 <Menu_it+0x288>)
 800239c:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 80023a0:	4b07      	ldr	r3, [pc, #28]	; (80023c0 <Menu_it+0x288>)
 80023a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
			Soldering_Separator_Set_Temperature(&Soldering_Separator, MANUAL);
 80023a6:	2100      	movs	r1, #0
 80023a8:	4805      	ldr	r0, [pc, #20]	; (80023c0 <Menu_it+0x288>)
 80023aa:	f001 f829 	bl	8003400 <Soldering_Separator_Set_Temperature>
			Soldering_Separator_Flash_Reset_Rewrite_Timer(&Soldering_Separator);
 80023ae:	4804      	ldr	r0, [pc, #16]	; (80023c0 <Menu_it+0x288>)
 80023b0:	f001 f8b6 	bl	8003520 <Soldering_Separator_Flash_Reset_Rewrite_Timer>
		if(Incoder_Get_Button_State(Incoder_P2)==Incoder_Button_long){
 80023b4:	e6ca      	b.n	800214c <Menu_it+0x14>
 80023b6:	bf00      	nop
 80023b8:	2000082c 	.word	0x2000082c
 80023bc:	200008c8 	.word	0x200008c8
 80023c0:	20000954 	.word	0x20000954
 80023c4:	20000872 	.word	0x20000872
 80023c8:	2000090e 	.word	0x2000090e
 80023cc:	2000099a 	.word	0x2000099a
 80023d0:	200008be 	.word	0x200008be
 80023d4:	200008b0 	.word	0x200008b0
 80023d8:	200008b4 	.word	0x200008b4
 80023dc:	200008ae 	.word	0x200008ae
 80023e0:	200009d2 	.word	0x200009d2
 80023e4:	200008d8 	.word	0x200008d8
 80023e8:	2000094a 	.word	0x2000094a
 80023ec:	2000092e 	.word	0x2000092e
 80023f0:	20000934 	.word	0x20000934
 80023f4:	200009c4 	.word	0x200009c4
 80023f8:	200009ba 	.word	0x200009ba
 80023fc:	200009c0 	.word	0x200009c0

08002400 <OLED_Send_Comand>:
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af02      	add	r7, sp, #8
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	460b      	mov	r3, r1
 800240a:	70fb      	strb	r3, [r7, #3]
 800240c:	2300      	movs	r3, #0
 800240e:	733b      	strb	r3, [r7, #12]
 8002410:	2380      	movs	r3, #128	; 0x80
 8002412:	733b      	strb	r3, [r7, #12]
 8002414:	78fb      	ldrb	r3, [r7, #3]
 8002416:	737b      	strb	r3, [r7, #13]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6818      	ldr	r0, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	8899      	ldrh	r1, [r3, #4]
 8002420:	f107 020c 	add.w	r2, r7, #12
 8002424:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	2302      	movs	r3, #2
 800242c:	f004 fbb4 	bl	8006b98 <HAL_I2C_Master_Transmit>
 8002430:	bf00      	nop
 8002432:	3710      	adds	r7, #16
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <OLED_Search_Adress>:
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	2300      	movs	r3, #0
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	e012      	b.n	800246c <OLED_Search_Adress+0x34>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6818      	ldr	r0, [r3, #0]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	b299      	uxth	r1, r3
 800244e:	2302      	movs	r3, #2
 8002450:	220a      	movs	r2, #10
 8002452:	f004 fc9f 	bl	8006d94 <HAL_I2C_IsDeviceReady>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d104      	bne.n	8002466 <OLED_Search_Adress+0x2e>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	b29a      	uxth	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	809a      	strh	r2, [r3, #4]
 8002464:	e006      	b.n	8002474 <OLED_Search_Adress+0x3c>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	3301      	adds	r3, #1
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2bff      	cmp	r3, #255	; 0xff
 8002470:	dde9      	ble.n	8002446 <OLED_Search_Adress+0xe>
 8002472:	bf00      	nop
 8002474:	bf00      	nop
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <OLED_ini>:
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	21af      	movs	r1, #175	; 0xaf
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f7ff ffba 	bl	8002400 <OLED_Send_Comand>
 800248c:	21a6      	movs	r1, #166	; 0xa6
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7ff ffb6 	bl	8002400 <OLED_Send_Comand>
 8002494:	2120      	movs	r1, #32
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7ff ffb2 	bl	8002400 <OLED_Send_Comand>
 800249c:	2100      	movs	r1, #0
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f7ff ffae 	bl	8002400 <OLED_Send_Comand>
 80024a4:	218d      	movs	r1, #141	; 0x8d
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7ff ffaa 	bl	8002400 <OLED_Send_Comand>
 80024ac:	21a4      	movs	r1, #164	; 0xa4
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f7ff ffa6 	bl	8002400 <OLED_Send_Comand>
 80024b4:	21a0      	movs	r1, #160	; 0xa0
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f7ff ffa2 	bl	8002400 <OLED_Send_Comand>
 80024bc:	21c7      	movs	r1, #199	; 0xc7
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f7ff ff9e 	bl	8002400 <OLED_Send_Comand>
 80024c4:	2121      	movs	r1, #33	; 0x21
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f7ff ff9a 	bl	8002400 <OLED_Send_Comand>
 80024cc:	2100      	movs	r1, #0
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f7ff ff96 	bl	8002400 <OLED_Send_Comand>
 80024d4:	217d      	movs	r1, #125	; 0x7d
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f7ff ff92 	bl	8002400 <OLED_Send_Comand>
 80024dc:	2122      	movs	r1, #34	; 0x22
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f7ff ff8e 	bl	8002400 <OLED_Send_Comand>
 80024e4:	2100      	movs	r1, #0
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f7ff ff8a 	bl	8002400 <OLED_Send_Comand>
 80024ec:	2107      	movs	r1, #7
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f7ff ff86 	bl	8002400 <OLED_Send_Comand>
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f000 f85f 	bl	80025b8 <OLED_Clear_Display>
 80024fa:	bf00      	nop
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <OLED_Set_Cursor>:
 8002502:	b580      	push	{r7, lr}
 8002504:	b082      	sub	sp, #8
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
 800250a:	460b      	mov	r3, r1
 800250c:	807b      	strh	r3, [r7, #2]
 800250e:	4613      	mov	r3, r2
 8002510:	707b      	strb	r3, [r7, #1]
 8002512:	787b      	ldrb	r3, [r7, #1]
 8002514:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8002518:	b2db      	uxtb	r3, r3
 800251a:	4619      	mov	r1, r3
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f7ff ff6f 	bl	8002400 <OLED_Send_Comand>
 8002522:	887b      	ldrh	r3, [r7, #2]
 8002524:	b2db      	uxtb	r3, r3
 8002526:	f003 030f 	and.w	r3, r3, #15
 800252a:	b2db      	uxtb	r3, r3
 800252c:	4619      	mov	r1, r3
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f7ff ff66 	bl	8002400 <OLED_Send_Comand>
 8002534:	887b      	ldrh	r3, [r7, #2]
 8002536:	091b      	lsrs	r3, r3, #4
 8002538:	b29b      	uxth	r3, r3
 800253a:	b2db      	uxtb	r3, r3
 800253c:	f003 030f 	and.w	r3, r3, #15
 8002540:	b2db      	uxtb	r3, r3
 8002542:	3310      	adds	r3, #16
 8002544:	b2db      	uxtb	r3, r3
 8002546:	4619      	mov	r1, r3
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f7ff ff59 	bl	8002400 <OLED_Send_Comand>
 800254e:	bf00      	nop
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <OLED_Set_Char_Cursor>:
 8002556:	b580      	push	{r7, lr}
 8002558:	b082      	sub	sp, #8
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
 800255e:	460b      	mov	r3, r1
 8002560:	807b      	strh	r3, [r7, #2]
 8002562:	4613      	mov	r3, r2
 8002564:	707b      	strb	r3, [r7, #1]
 8002566:	887b      	ldrh	r3, [r7, #2]
 8002568:	461a      	mov	r2, r3
 800256a:	0052      	lsls	r2, r2, #1
 800256c:	4413      	add	r3, r2
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	807b      	strh	r3, [r7, #2]
 8002572:	787b      	ldrb	r3, [r7, #1]
 8002574:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8002578:	b2db      	uxtb	r3, r3
 800257a:	4619      	mov	r1, r3
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f7ff ff3f 	bl	8002400 <OLED_Send_Comand>
 8002582:	887b      	ldrh	r3, [r7, #2]
 8002584:	b2db      	uxtb	r3, r3
 8002586:	f003 030f 	and.w	r3, r3, #15
 800258a:	b2db      	uxtb	r3, r3
 800258c:	4619      	mov	r1, r3
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f7ff ff36 	bl	8002400 <OLED_Send_Comand>
 8002594:	887b      	ldrh	r3, [r7, #2]
 8002596:	091b      	lsrs	r3, r3, #4
 8002598:	b29b      	uxth	r3, r3
 800259a:	b2db      	uxtb	r3, r3
 800259c:	f003 030f 	and.w	r3, r3, #15
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	3310      	adds	r3, #16
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	4619      	mov	r1, r3
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f7ff ff29 	bl	8002400 <OLED_Send_Comand>
 80025ae:	bf00      	nop
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
	...

080025b8 <OLED_Clear_Display>:
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af02      	add	r7, sp, #8
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	4b10      	ldr	r3, [pc, #64]	; (8002604 <OLED_Clear_Display+0x4c>)
 80025c2:	2240      	movs	r2, #64	; 0x40
 80025c4:	701a      	strb	r2, [r3, #0]
 80025c6:	2300      	movs	r3, #0
 80025c8:	73fb      	strb	r3, [r7, #15]
 80025ca:	e013      	b.n	80025f4 <OLED_Clear_Display+0x3c>
 80025cc:	7bfb      	ldrb	r3, [r7, #15]
 80025ce:	461a      	mov	r2, r3
 80025d0:	2100      	movs	r1, #0
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7ff ff95 	bl	8002502 <OLED_Set_Cursor>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6818      	ldr	r0, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	8899      	ldrh	r1, [r3, #4]
 80025e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025e4:	9300      	str	r3, [sp, #0]
 80025e6:	2381      	movs	r3, #129	; 0x81
 80025e8:	4a06      	ldr	r2, [pc, #24]	; (8002604 <OLED_Clear_Display+0x4c>)
 80025ea:	f004 fad5 	bl	8006b98 <HAL_I2C_Master_Transmit>
 80025ee:	7bfb      	ldrb	r3, [r7, #15]
 80025f0:	3301      	adds	r3, #1
 80025f2:	73fb      	strb	r3, [r7, #15]
 80025f4:	7bfb      	ldrb	r3, [r7, #15]
 80025f6:	2b07      	cmp	r3, #7
 80025f8:	d9e8      	bls.n	80025cc <OLED_Clear_Display+0x14>
 80025fa:	bf00      	nop
 80025fc:	bf00      	nop
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	200004f8 	.word	0x200004f8

08002608 <OLED_Send_Char>:
 8002608:	b580      	push	{r7, lr}
 800260a:	b088      	sub	sp, #32
 800260c:	af02      	add	r7, sp, #8
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	70fb      	strb	r3, [r7, #3]
 8002614:	2300      	movs	r3, #0
 8002616:	60bb      	str	r3, [r7, #8]
 8002618:	f107 030c 	add.w	r3, r7, #12
 800261c:	2100      	movs	r1, #0
 800261e:	460a      	mov	r2, r1
 8002620:	801a      	strh	r2, [r3, #0]
 8002622:	460a      	mov	r2, r1
 8002624:	709a      	strb	r2, [r3, #2]
 8002626:	2340      	movs	r3, #64	; 0x40
 8002628:	723b      	strb	r3, [r7, #8]
 800262a:	78fb      	ldrb	r3, [r7, #3]
 800262c:	f1a3 0220 	sub.w	r2, r3, #32
 8002630:	4613      	mov	r3, r2
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	4413      	add	r3, r2
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	613b      	str	r3, [r7, #16]
 800263a:	2301      	movs	r3, #1
 800263c:	617b      	str	r3, [r7, #20]
 800263e:	e010      	b.n	8002662 <OLED_Send_Char+0x5a>
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	4413      	add	r3, r2
 8002646:	3b01      	subs	r3, #1
 8002648:	4a0f      	ldr	r2, [pc, #60]	; (8002688 <OLED_Send_Char+0x80>)
 800264a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800264e:	b2d9      	uxtb	r1, r3
 8002650:	f107 0208 	add.w	r2, r7, #8
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	4413      	add	r3, r2
 8002658:	460a      	mov	r2, r1
 800265a:	701a      	strb	r2, [r3, #0]
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	3301      	adds	r3, #1
 8002660:	617b      	str	r3, [r7, #20]
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	2b06      	cmp	r3, #6
 8002666:	ddeb      	ble.n	8002640 <OLED_Send_Char+0x38>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6818      	ldr	r0, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	8899      	ldrh	r1, [r3, #4]
 8002670:	f107 0208 	add.w	r2, r7, #8
 8002674:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002678:	9300      	str	r3, [sp, #0]
 800267a:	2307      	movs	r3, #7
 800267c:	f004 fa8c 	bl	8006b98 <HAL_I2C_Master_Transmit>
 8002680:	bf00      	nop
 8002682:	3718      	adds	r7, #24
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	20000004 	.word	0x20000004

0800268c <OLED_Clear_Line>:
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af02      	add	r7, sp, #8
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	460b      	mov	r3, r1
 8002696:	70fb      	strb	r3, [r7, #3]
 8002698:	78fb      	ldrb	r3, [r7, #3]
 800269a:	461a      	mov	r2, r3
 800269c:	2100      	movs	r1, #0
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f7ff ff2f 	bl	8002502 <OLED_Set_Cursor>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6818      	ldr	r0, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	8899      	ldrh	r1, [r3, #4]
 80026ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	2381      	movs	r3, #129	; 0x81
 80026b4:	4a03      	ldr	r2, [pc, #12]	; (80026c4 <OLED_Clear_Line+0x38>)
 80026b6:	f004 fa6f 	bl	8006b98 <HAL_I2C_Master_Transmit>
 80026ba:	bf00      	nop
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	200004f8 	.word	0x200004f8

080026c8 <OLED_Send_String>:
 80026c8:	b590      	push	{r4, r7, lr}
 80026ca:	b0a9      	sub	sp, #164	; 0xa4
 80026cc:	af02      	add	r7, sp, #8
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
 80026d2:	2300      	movs	r3, #0
 80026d4:	60bb      	str	r3, [r7, #8]
 80026d6:	f107 030c 	add.w	r3, r7, #12
 80026da:	227b      	movs	r2, #123	; 0x7b
 80026dc:	2100      	movs	r1, #0
 80026de:	4618      	mov	r0, r3
 80026e0:	f006 fbc0 	bl	8008e64 <memset>
 80026e4:	2340      	movs	r3, #64	; 0x40
 80026e6:	723b      	strb	r3, [r7, #8]
 80026e8:	2300      	movs	r3, #0
 80026ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80026ee:	2300      	movs	r3, #0
 80026f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80026f4:	2300      	movs	r3, #0
 80026f6:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 80026fa:	e076      	b.n	80027ea <OLED_Send_String+0x122>
 80026fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	4413      	add	r3, r2
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	2b0d      	cmp	r3, #13
 8002708:	d006      	beq.n	8002718 <OLED_Send_String+0x50>
 800270a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	4413      	add	r3, r2
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	2b0a      	cmp	r3, #10
 8002716:	d105      	bne.n	8002724 <OLED_Send_String+0x5c>
 8002718:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800271c:	3301      	adds	r3, #1
 800271e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002722:	e062      	b.n	80027ea <OLED_Send_String+0x122>
 8002724:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	4413      	add	r3, r2
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	f1a3 0220 	sub.w	r2, r3, #32
 8002732:	4613      	mov	r3, r2
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	4413      	add	r3, r2
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800273e:	2300      	movs	r3, #0
 8002740:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8002744:	e01b      	b.n	800277e <OLED_Send_String+0xb6>
 8002746:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 800274a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800274e:	4413      	add	r3, r2
 8002750:	4a36      	ldr	r2, [pc, #216]	; (800282c <OLED_Send_String+0x164>)
 8002752:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8002756:	f897 108f 	ldrb.w	r1, [r7, #143]	; 0x8f
 800275a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800275e:	4613      	mov	r3, r2
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	4413      	add	r3, r2
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	440b      	add	r3, r1
 8002768:	3301      	adds	r3, #1
 800276a:	b2c2      	uxtb	r2, r0
 800276c:	3398      	adds	r3, #152	; 0x98
 800276e:	443b      	add	r3, r7
 8002770:	f803 2c90 	strb.w	r2, [r3, #-144]
 8002774:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8002778:	3301      	adds	r3, #1
 800277a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800277e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8002782:	2b05      	cmp	r3, #5
 8002784:	d9df      	bls.n	8002746 <OLED_Send_String+0x7e>
 8002786:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800278a:	3301      	adds	r3, #1
 800278c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002790:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002794:	3301      	adds	r3, #1
 8002796:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800279a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800279e:	2b14      	cmp	r3, #20
 80027a0:	dd23      	ble.n	80027ea <OLED_Send_String+0x122>
 80027a2:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80027a6:	461a      	mov	r2, r3
 80027a8:	2100      	movs	r1, #0
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7ff fea9 	bl	8002502 <OLED_Set_Cursor>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6818      	ldr	r0, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	8899      	ldrh	r1, [r3, #4]
 80027b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80027bc:	b29b      	uxth	r3, r3
 80027be:	461a      	mov	r2, r3
 80027c0:	0052      	lsls	r2, r2, #1
 80027c2:	4413      	add	r3, r2
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	3301      	adds	r3, #1
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	f107 0208 	add.w	r2, r7, #8
 80027d0:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80027d4:	9400      	str	r4, [sp, #0]
 80027d6:	f004 f9df 	bl	8006b98 <HAL_I2C_Master_Transmit>
 80027da:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80027de:	3301      	adds	r3, #1
 80027e0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 80027e4:	2300      	movs	r3, #0
 80027e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80027ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	4413      	add	r3, r2
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d181      	bne.n	80026fc <OLED_Send_String+0x34>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6818      	ldr	r0, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	8899      	ldrh	r1, [r3, #4]
 8002800:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002804:	b29b      	uxth	r3, r3
 8002806:	461a      	mov	r2, r3
 8002808:	0052      	lsls	r2, r2, #1
 800280a:	4413      	add	r3, r2
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	b29b      	uxth	r3, r3
 8002810:	3301      	adds	r3, #1
 8002812:	b29b      	uxth	r3, r3
 8002814:	f107 0208 	add.w	r2, r7, #8
 8002818:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800281c:	9400      	str	r4, [sp, #0]
 800281e:	f004 f9bb 	bl	8006b98 <HAL_I2C_Master_Transmit>
 8002822:	bf00      	nop
 8002824:	379c      	adds	r7, #156	; 0x9c
 8002826:	46bd      	mov	sp, r7
 8002828:	bd90      	pop	{r4, r7, pc}
 800282a:	bf00      	nop
 800282c:	20000004 	.word	0x20000004

08002830 <PAC_Control_Vector_Create>:
 *      Author: I
 */
#include "PAC.h"

//---------------------------------------------------------------------------------
struct PAC_Control_Vector *PAC_Control_Vector_Create(struct PAC *self, struct PAC_Control_Vector *element){
 8002830:	b590      	push	{r4, r7, lr}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
	struct PAC_Control_Vector *NEW_Element= malloc(sizeof(struct PAC_Control_Vector));
 800283a:	2010      	movs	r0, #16
 800283c:	f006 fa5e 	bl	8008cfc <malloc>
 8002840:	4603      	mov	r3, r0
 8002842:	60bb      	str	r3, [r7, #8]
	*NEW_Element=*element;
 8002844:	68ba      	ldr	r2, [r7, #8]
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	4614      	mov	r4, r2
 800284a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800284c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	NEW_Element->next=NULL;
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	2200      	movs	r2, #0
 8002854:	601a      	str	r2, [r3, #0]
	if(self->PAC_Control_Vector_Head==NULL){
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d103      	bne.n	8002866 <PAC_Control_Vector_Create+0x36>
		self->PAC_Control_Vector_Head=NEW_Element;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68ba      	ldr	r2, [r7, #8]
 8002862:	605a      	str	r2, [r3, #4]
 8002864:	e00d      	b.n	8002882 <PAC_Control_Vector_Create+0x52>
	}else{
		struct PAC_Control_Vector *now=self->PAC_Control_Vector_Head;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	60fb      	str	r3, [r7, #12]
		while(now->next!=NULL){
 800286c:	e002      	b.n	8002874 <PAC_Control_Vector_Create+0x44>
			now=now->next;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	60fb      	str	r3, [r7, #12]
		while(now->next!=NULL){
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1f8      	bne.n	800286e <PAC_Control_Vector_Create+0x3e>
		}
		now->next=NEW_Element;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	68ba      	ldr	r2, [r7, #8]
 8002880:	601a      	str	r2, [r3, #0]
	}
	return NEW_Element;
 8002882:	68bb      	ldr	r3, [r7, #8]
}
 8002884:	4618      	mov	r0, r3
 8002886:	3714      	adds	r7, #20
 8002888:	46bd      	mov	sp, r7
 800288a:	bd90      	pop	{r4, r7, pc}

0800288c <PAC_Control_Vector_PIN_Reset>:
//---------------------------------------------------------------------------------
void PAC_Control_Vector_PIN_Reset(struct PAC_Control_Vector *self){
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
	while(self!=NULL){
 8002894:	e00a      	b.n	80028ac <PAC_Control_Vector_PIN_Reset+0x20>
		HAL_GPIO_WritePin(self->GPIO, self->PIN, GPIO_PIN_RESET);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6898      	ldr	r0, [r3, #8]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	889b      	ldrh	r3, [r3, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	4619      	mov	r1, r3
 80028a2:	f004 f804 	bl	80068ae <HAL_GPIO_WritePin>
		self=self->next;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	607b      	str	r3, [r7, #4]
	while(self!=NULL){
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1f1      	bne.n	8002896 <PAC_Control_Vector_PIN_Reset+0xa>
	}
}
 80028b2:	bf00      	nop
 80028b4:	bf00      	nop
 80028b6:	3708      	adds	r7, #8
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <PAC_Controll_Callback>:
//---------------------------------------------------------------------------------
void PAC_Controll_Callback(struct PAC *self){
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
	struct PAC_Control_Vector *now=self->PAC_Control_Vector_Head;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	60fb      	str	r3, [r7, #12]
	do{
		if(now->State==PAC_Control_ON){
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	7b9b      	ldrb	r3, [r3, #14]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d125      	bne.n	800291e <PAC_Controll_Callback+0x62>
			if(self->ZCD->TIM_Counter==(self->ZCD->MAX_TIM_Counter-now->Control_Value)){
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	889b      	ldrh	r3, [r3, #4]
 80028d8:	461a      	mov	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	88db      	ldrh	r3, [r3, #6]
 80028e0:	4619      	mov	r1, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	899b      	ldrh	r3, [r3, #12]
 80028e6:	1acb      	subs	r3, r1, r3
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d108      	bne.n	80028fe <PAC_Controll_Callback+0x42>
				HAL_GPIO_WritePin(now->GPIO, now->PIN, GPIO_PIN_SET);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6898      	ldr	r0, [r3, #8]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	889b      	ldrh	r3, [r3, #4]
 80028f4:	2201      	movs	r2, #1
 80028f6:	4619      	mov	r1, r3
 80028f8:	f003 ffd9 	bl	80068ae <HAL_GPIO_WritePin>
 80028fc:	e00f      	b.n	800291e <PAC_Controll_Callback+0x62>
			}else if(self->ZCD->TIM_Counter>=self->ZCD->MAX_TIM_Counter){
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	889a      	ldrh	r2, [r3, #4]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	88db      	ldrh	r3, [r3, #6]
 800290a:	429a      	cmp	r2, r3
 800290c:	d307      	bcc.n	800291e <PAC_Controll_Callback+0x62>
				HAL_GPIO_WritePin(now->GPIO, now->PIN, GPIO_PIN_RESET);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6898      	ldr	r0, [r3, #8]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	889b      	ldrh	r3, [r3, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	4619      	mov	r1, r3
 800291a:	f003 ffc8 	bl	80068ae <HAL_GPIO_WritePin>
			}
		}
		now=now->next;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	60fb      	str	r3, [r7, #12]
	}while(now!=NULL);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1cf      	bne.n	80028ca <PAC_Controll_Callback+0xe>
}
 800292a:	bf00      	nop
 800292c:	bf00      	nop
 800292e:	3710      	adds	r7, #16
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <ZCD_Falling_Adge_Callback>:
//---------------------------------------------------------------------------------
void ZCD_Falling_Adge_Callback(struct PAC *self){
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
	if(self->ZCD->State==ZCD_STATE_SETUP){
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	785b      	ldrb	r3, [r3, #1]
 8002942:	2b02      	cmp	r3, #2
 8002944:	d105      	bne.n	8002952 <ZCD_Falling_Adge_Callback+0x1e>
		self->ZCD->Frequency_Counter++;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	78da      	ldrb	r2, [r3, #3]
 800294c:	3201      	adds	r2, #1
 800294e:	b2d2      	uxtb	r2, r2
 8002950:	70da      	strb	r2, [r3, #3]
	}
	self->ZCD->TIM_Counter=0;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2200      	movs	r2, #0
 8002958:	809a      	strh	r2, [r3, #4]
}
 800295a:	bf00      	nop
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	bc80      	pop	{r7}
 8002962:	4770      	bx	lr

08002964 <ZCD_Rising_Adge_Callback>:
//---------------------------------------------------------------------------------
void ZCD_Rising_Adge_Callback(struct PAC *self){
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
	if(self->ZCD->State==ZCD_STATE_SETUP){
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	785b      	ldrb	r3, [r3, #1]
 8002972:	2b02      	cmp	r3, #2
 8002974:	d115      	bne.n	80029a2 <ZCD_Rising_Adge_Callback+0x3e>
		if(self->ZCD->Frequency!=0){
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	789b      	ldrb	r3, [r3, #2]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d010      	beq.n	80029a2 <ZCD_Rising_Adge_Callback+0x3e>
			self->ZCD->MAX_TIM_Counter=self->ZCD->TIM_Counter-3;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	889a      	ldrh	r2, [r3, #4]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	3a03      	subs	r2, #3
 800298c:	b292      	uxth	r2, r2
 800298e:	80da      	strh	r2, [r3, #6]
			ZCD_ON_Callback(self->ZCD);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4618      	mov	r0, r3
 8002996:	f000 ff01 	bl	800379c <ZCD_ON_Callback>
			self->ZCD->State=ZCD_STATE_ON;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2201      	movs	r2, #1
 80029a0:	705a      	strb	r2, [r3, #1]
		}
	}
	PAC_Control_Vector_PIN_Reset(self->PAC_Control_Vector_Head);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7ff ff70 	bl	800288c <PAC_Control_Vector_PIN_Reset>
}
 80029ac:	bf00      	nop
 80029ae:	3708      	adds	r7, #8
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <ZCD_ini>:
//---------------------------------------------------------------------------------
void ZCD_ini(struct ZCD *self){
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
	self->Pin_State_Now=0;
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	7813      	ldrb	r3, [r2, #0]
 80029c0:	f36f 0300 	bfc	r3, #0, #1
 80029c4:	7013      	strb	r3, [r2, #0]
	self->Pin_State_Prew=0;
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	7813      	ldrb	r3, [r2, #0]
 80029ca:	f36f 0341 	bfc	r3, #1, #1
 80029ce:	7013      	strb	r3, [r2, #0]
	self->Frequency=0;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	709a      	strb	r2, [r3, #2]
	self->MAX_TIM_Counter=0;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	80da      	strh	r2, [r3, #6]
	self->TIM_Counter=0;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	809a      	strh	r2, [r3, #4]
}
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc80      	pop	{r7}
 80029ea:	4770      	bx	lr

080029ec <ZCD_OFF>:
//---------------------------------------------------------------------------------
void ZCD_OFF(struct ZCD *self){
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
	self->State=ZCD_STATE_OFF;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	705a      	strb	r2, [r3, #1]
	self->Frequency=0;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	709a      	strb	r2, [r3, #2]
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bc80      	pop	{r7}
 8002a08:	4770      	bx	lr

08002a0a <ZCD_ON>:
//---------------------------------------------------------------------------------
void ZCD_ON(struct ZCD *self){
 8002a0a:	b480      	push	{r7}
 8002a0c:	b083      	sub	sp, #12
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
	self->State=ZCD_STATE_SETUP;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2202      	movs	r2, #2
 8002a16:	705a      	strb	r2, [r3, #1]
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bc80      	pop	{r7}
 8002a20:	4770      	bx	lr

08002a22 <PAC_ON>:
//---------------------------------------------------------------------------------
void PAC_ON(struct PAC *self){
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b082      	sub	sp, #8
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
	if(self->ZCD->State==ZCD_STATE_OFF){
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	785b      	ldrb	r3, [r3, #1]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d109      	bne.n	8002a48 <PAC_ON+0x26>
		ZCD_ini(self->ZCD);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff ffbb 	bl	80029b4 <ZCD_ini>
		ZCD_ON(self->ZCD);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff ffe1 	bl	8002a0a <ZCD_ON>
	}
}
 8002a48:	bf00      	nop
 8002a4a:	3708      	adds	r7, #8
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <PAC_OFF>:
//---------------------------------------------------------------------------------
void PAC_OFF(struct PAC *self){
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]

	struct PAC_Control_Vector *now;
	uint8_t State=0;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	72fb      	strb	r3, [r7, #11]
	now=self->PAC_Control_Vector_Head;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	60fb      	str	r3, [r7, #12]

	while(now!=NULL){
 8002a62:	e013      	b.n	8002a8c <PAC_OFF+0x3c>
		State|=now->State;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	7b9a      	ldrb	r2, [r3, #14]
 8002a68:	7afb      	ldrb	r3, [r7, #11]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	72fb      	strb	r3, [r7, #11]
		if(now->State==PAC_Control_OFF)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	7b9b      	ldrb	r3, [r3, #14]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d107      	bne.n	8002a86 <PAC_OFF+0x36>
			HAL_GPIO_WritePin(now->GPIO, now->PIN, GPIO_PIN_RESET);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6898      	ldr	r0, [r3, #8]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	889b      	ldrh	r3, [r3, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	4619      	mov	r1, r3
 8002a82:	f003 ff14 	bl	80068ae <HAL_GPIO_WritePin>
		now=now->next;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	60fb      	str	r3, [r7, #12]
	while(now!=NULL){
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1e8      	bne.n	8002a64 <PAC_OFF+0x14>
	}
	if(State==PAC_Control_OFF){
 8002a92:	7afb      	ldrb	r3, [r7, #11]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d104      	bne.n	8002aa2 <PAC_OFF+0x52>
		ZCD_OFF(self->ZCD);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7ff ffa5 	bl	80029ec <ZCD_OFF>
	}

}
 8002aa2:	bf00      	nop
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <PAC_EXTI>:
//---------------------------------------------------------------------------------
uint8_t PAC_EXTI(struct PAC *self,uint16_t *GPIO){
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b082      	sub	sp, #8
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
 8002ab2:	6039      	str	r1, [r7, #0]
	if(self->ZCD->State!=ZCD_STATE_OFF){
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	785b      	ldrb	r3, [r3, #1]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d047      	beq.n	8002b4e <PAC_EXTI+0xa4>
		if(*GPIO==self->ZCD->EXTI_PIN){
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	881a      	ldrh	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	891b      	ldrh	r3, [r3, #8]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d140      	bne.n	8002b4e <PAC_EXTI+0xa4>
			self->ZCD->Pin_State_Now=HAL_GPIO_ReadPin(self->ZCD->GPIO,self->ZCD->EXTI_PIN);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68da      	ldr	r2, [r3, #12]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	891b      	ldrh	r3, [r3, #8]
 8002ad8:	4619      	mov	r1, r3
 8002ada:	4610      	mov	r0, r2
 8002adc:	f003 fed0 	bl	8006880 <HAL_GPIO_ReadPin>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	460b      	mov	r3, r1
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	b2d9      	uxtb	r1, r3
 8002af0:	7813      	ldrb	r3, [r2, #0]
 8002af2:	f361 0300 	bfi	r3, r1, #0, #1
 8002af6:	7013      	strb	r3, [r2, #0]
			if(self->ZCD->Pin_State_Now!=self->ZCD->Pin_State_Prew){
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002b02:	b2da      	uxtb	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d00e      	beq.n	8002b32 <PAC_EXTI+0x88>
				if(self->ZCD->Pin_State_Now==GPIO_PIN_RESET){
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d103      	bne.n	8002b2c <PAC_EXTI+0x82>
					ZCD_Falling_Adge_Callback(self);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f7ff ff05 	bl	8002934 <ZCD_Falling_Adge_Callback>
 8002b2a:	e002      	b.n	8002b32 <PAC_EXTI+0x88>
				}
				else{
					ZCD_Rising_Adge_Callback(self);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f7ff ff19 	bl	8002964 <ZCD_Rising_Adge_Callback>
				}
			}
			self->ZCD->Pin_State_Prew=self->ZCD->Pin_State_Now;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	6812      	ldr	r2, [r2, #0]
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002b40:	b2d9      	uxtb	r1, r3
 8002b42:	7813      	ldrb	r3, [r2, #0]
 8002b44:	f361 0341 	bfi	r3, r1, #1, #1
 8002b48:	7013      	strb	r3, [r2, #0]
			return 1;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e000      	b.n	8002b50 <PAC_EXTI+0xa6>
		}
	}
	return 0;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3708      	adds	r7, #8
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <PAC_it>:
//---------------------------------------------------------------------------------
void PAC_it(struct PAC *self){
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
	static uint16_t count=0;
	if(self->ZCD->State!=ZCD_STATE_OFF){
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	785b      	ldrb	r3, [r3, #1]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d025      	beq.n	8002bb6 <PAC_it+0x5e>
		if(self->ZCD->State==ZCD_STATE_SETUP){
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	785b      	ldrb	r3, [r3, #1]
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d117      	bne.n	8002ba4 <PAC_it+0x4c>
			if(count++==9999){
 8002b74:	4b12      	ldr	r3, [pc, #72]	; (8002bc0 <PAC_it+0x68>)
 8002b76:	881b      	ldrh	r3, [r3, #0]
 8002b78:	1c5a      	adds	r2, r3, #1
 8002b7a:	b291      	uxth	r1, r2
 8002b7c:	4a10      	ldr	r2, [pc, #64]	; (8002bc0 <PAC_it+0x68>)
 8002b7e:	8011      	strh	r1, [r2, #0]
 8002b80:	f242 720f 	movw	r2, #9999	; 0x270f
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d110      	bne.n	8002baa <PAC_it+0x52>
				self->ZCD->Frequency=self->ZCD->Frequency_Counter;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	78d2      	ldrb	r2, [r2, #3]
 8002b92:	709a      	strb	r2, [r3, #2]
				self->ZCD->Frequency_Counter=0;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	70da      	strb	r2, [r3, #3]
				count=0;
 8002b9c:	4b08      	ldr	r3, [pc, #32]	; (8002bc0 <PAC_it+0x68>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	801a      	strh	r2, [r3, #0]
 8002ba2:	e002      	b.n	8002baa <PAC_it+0x52>
			}
		}else{
			PAC_Controll_Callback(self);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f7ff fe89 	bl	80028bc <PAC_Controll_Callback>
		}
		self->ZCD->TIM_Counter++;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	889a      	ldrh	r2, [r3, #4]
 8002bb0:	3201      	adds	r2, #1
 8002bb2:	b292      	uxth	r2, r2
 8002bb4:	809a      	strh	r2, [r3, #4]
	}
}
 8002bb6:	bf00      	nop
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	2000057a 	.word	0x2000057a

08002bc4 <PID_ini>:
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f04f 0200 	mov.w	r2, #0
 8002bd2:	619a      	str	r2, [r3, #24]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f04f 0200 	mov.w	r2, #0
 8002bda:	615a      	str	r2, [r3, #20]
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bc80      	pop	{r7}
 8002be4:	4770      	bx	lr
	...

08002be8 <PID_it>:
 8002be8:	b590      	push	{r4, r7, lr}
 8002bea:	b087      	sub	sp, #28
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	69da      	ldr	r2, [r3, #28]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4610      	mov	r0, r2
 8002bfc:	f7fd fab2 	bl	8000164 <__aeabi_fsub>
 8002c00:	4603      	mov	r3, r0
 8002c02:	617b      	str	r3, [r7, #20]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	695c      	ldr	r4, [r3, #20]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	6979      	ldr	r1, [r7, #20]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7fd fbb2 	bl	8000378 <__aeabi_fmul>
 8002c14:	4603      	mov	r3, r0
 8002c16:	4619      	mov	r1, r3
 8002c18:	4620      	mov	r0, r4
 8002c1a:	f7fd faa5 	bl	8000168 <__addsf3>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	461a      	mov	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	615a      	str	r2, [r3, #20]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	6978      	ldr	r0, [r7, #20]
 8002c2e:	f7fd fa99 	bl	8000164 <__aeabi_fsub>
 8002c32:	4603      	mov	r3, r0
 8002c34:	461a      	mov	r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	4610      	mov	r0, r2
 8002c3e:	f7fd fc4f 	bl	80004e0 <__aeabi_fdiv>
 8002c42:	4603      	mov	r3, r0
 8002c44:	613b      	str	r3, [r7, #16]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	697a      	ldr	r2, [r7, #20]
 8002c4a:	619a      	str	r2, [r3, #24]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6979      	ldr	r1, [r7, #20]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7fd fb90 	bl	8000378 <__aeabi_fmul>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	461c      	mov	r4, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	695a      	ldr	r2, [r3, #20]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	4619      	mov	r1, r3
 8002c66:	4610      	mov	r0, r2
 8002c68:	f7fd fb86 	bl	8000378 <__aeabi_fmul>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	4619      	mov	r1, r3
 8002c70:	4620      	mov	r0, r4
 8002c72:	f7fd fa79 	bl	8000168 <__addsf3>
 8002c76:	4603      	mov	r3, r0
 8002c78:	461c      	mov	r4, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	6939      	ldr	r1, [r7, #16]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7fd fb79 	bl	8000378 <__aeabi_fmul>
 8002c86:	4603      	mov	r3, r0
 8002c88:	4619      	mov	r1, r3
 8002c8a:	4620      	mov	r0, r4
 8002c8c:	f7fd fa6c 	bl	8000168 <__addsf3>
 8002c90:	4603      	mov	r3, r0
 8002c92:	60fb      	str	r3, [r7, #12]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a1a      	ldr	r2, [r3, #32]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	69db      	ldr	r3, [r3, #28]
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	4610      	mov	r0, r2
 8002ca0:	f7fd fa60 	bl	8000164 <__aeabi_fsub>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	4916      	ldr	r1, [pc, #88]	; (8002d00 <PID_it+0x118>)
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7fd fd21 	bl	80006f0 <__aeabi_fcmpgt>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d002      	beq.n	8002cba <PID_it+0xd2>
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f7ff ff85 	bl	8002bc4 <PID_ini>
 8002cba:	f04f 0100 	mov.w	r1, #0
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f7fd fcf8 	bl	80006b4 <__aeabi_fcmplt>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <PID_it+0xe6>
 8002cca:	2300      	movs	r3, #0
 8002ccc:	e013      	b.n	8002cf6 <PID_it+0x10e>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	8a1b      	ldrh	r3, [r3, #16]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7fd fafc 	bl	80002d0 <__aeabi_i2f>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	4619      	mov	r1, r3
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f7fd fcf3 	bl	80006c8 <__aeabi_fcmple>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d004      	beq.n	8002cf2 <PID_it+0x10a>
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f7fd fd31 	bl	8000750 <__aeabi_f2uiz>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	e001      	b.n	8002cf6 <PID_it+0x10e>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	8a1b      	ldrh	r3, [r3, #16]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	371c      	adds	r7, #28
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd90      	pop	{r4, r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	42c80000 	.word	0x42c80000

08002d04 <PID_Set_Point>:
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
 8002d0e:	6838      	ldr	r0, [r7, #0]
 8002d10:	f7fd fade 	bl	80002d0 <__aeabi_i2f>
 8002d14:	4602      	mov	r2, r0
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	61da      	str	r2, [r3, #28]
 8002d1a:	bf00      	nop
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <PID_Set_Point_Now>:
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b082      	sub	sp, #8
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
 8002d2a:	6039      	str	r1, [r7, #0]
 8002d2c:	6838      	ldr	r0, [r7, #0]
 8002d2e:	f7fd facf 	bl	80002d0 <__aeabi_i2f>
 8002d32:	4602      	mov	r2, r0
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	621a      	str	r2, [r3, #32]
 8002d38:	bf00      	nop
 8002d3a:	3708      	adds	r7, #8
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <Set_Temperature>:
#include "Soldering_Station.h"
//---------------------------------------------------------------------------------
uint16_t Set_Temperature(uint16_t *Temperature_Set, enum MODE *MODE,struct Temperature_Pressets *Temperature_Pressets, struct Temperature_Corection *Temperature_Corection){
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
 8002d4c:	603b      	str	r3, [r7, #0]
	 * Temperature_Setresul value;
	 * MODE - MANUAL PRESSET1 PRESSET2 SLEEP
	 * struct Temperature_Pressets *Temperature_Pressets struct wich contain all MODE presets;
	 */

	switch(*MODE){
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	2b03      	cmp	r3, #3
 8002d54:	d835      	bhi.n	8002dc2 <Set_Temperature+0x82>
 8002d56:	a201      	add	r2, pc, #4	; (adr r2, 8002d5c <Set_Temperature+0x1c>)
 8002d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d5c:	08002d6d 	.word	0x08002d6d
 8002d60:	08002d85 	.word	0x08002d85
 8002d64:	08002d9d 	.word	0x08002d9d
 8002d68:	08002db5 	.word	0x08002db5
			case MANUAL:
				*Temperature_Set=Temperature_Pressets->Manual;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	881a      	ldrh	r2, [r3, #0]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	801a      	strh	r2, [r3, #0]
				return (uint16_t)*Temperature_Set+Temperature_Corection->Manual;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	881a      	ldrh	r2, [r3, #0]
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	4413      	add	r3, r2
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	e01f      	b.n	8002dc4 <Set_Temperature+0x84>
				break;
			case PRESSET1:
				*Temperature_Set=Temperature_Pressets->Presset1;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	885a      	ldrh	r2, [r3, #2]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	801a      	strh	r2, [r3, #0]
				return (uint16_t)*Temperature_Set+Temperature_Corection->Presset1;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	881a      	ldrh	r2, [r3, #0]
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	4413      	add	r3, r2
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	e013      	b.n	8002dc4 <Set_Temperature+0x84>
				break;
			case PRESSET2:
				*Temperature_Set=Temperature_Pressets->Presset2;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	889a      	ldrh	r2, [r3, #4]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	801a      	strh	r2, [r3, #0]
				return (uint16_t)*Temperature_Set+Temperature_Corection->Presset2;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	881a      	ldrh	r2, [r3, #0]
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	4413      	add	r3, r2
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	e007      	b.n	8002dc4 <Set_Temperature+0x84>
				break;
			case SLEEP:
				*Temperature_Set=Temperature_Pressets->Sleep;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	88da      	ldrh	r2, [r3, #6]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	801a      	strh	r2, [r3, #0]
				return (uint16_t)*Temperature_Set;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	881b      	ldrh	r3, [r3, #0]
 8002dc0:	e000      	b.n	8002dc4 <Set_Temperature+0x84>
				break;
		}
	return 0;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3714      	adds	r7, #20
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bc80      	pop	{r7}
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop

08002dd0 <Solder_Iron_it>:
//---------------------------------------------------------------------------------
void Vibration_Sensor_it(struct Soldering_Iron *self);
//---------------------------------------------------------------------------------
void Solder_Iron_it(struct Soldering_Iron *self){
 8002dd0:	b590      	push	{r4, r7, lr}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
	/**
	 * PID and Filter iteration for Soldering_Iron
	 */
	Vibration_Sensor_it(self);			// We can read state of Vibration Sensor only when PWM is stopped
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f000 f91c 	bl	8003016 <Vibration_Sensor_it>
	Button_it(&self->Full_Power_Button); // We can read state of button only when PWM is stopped
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	3364      	adds	r3, #100	; 0x64
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7fd fe69 	bl	8000aba <Button_it>
	if(self->State==1){
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d120      	bne.n	8002e34 <Solder_Iron_it+0x64>
	  HAL_TIM_PWM_Start(self->PWM_htim, TIM_CHANNEL_4);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002df6:	210c      	movs	r1, #12
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f005 f8b7 	bl	8007f6c <HAL_TIM_PWM_Start>
	  PID_Set_Point_Now(&self->PID,(int)(self->Temperature=Filter_Combined(&self->Filter))); //PID it
 8002dfe:	687c      	ldr	r4, [r7, #4]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	3324      	adds	r3, #36	; 0x24
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7fe f853 	bl	8000eb0 <Filter_Combined>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	4620      	mov	r0, r4
 8002e1e:	f7ff ff80 	bl	8002d22 <PID_Set_Point_Now>
	  self->PWM_htim->Instance->CCR4=PID_it(&self->PID);
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e28:	681c      	ldr	r4, [r3, #0]
 8002e2a:	4610      	mov	r0, r2
 8002e2c:	f7ff fedc 	bl	8002be8 <PID_it>
 8002e30:	4603      	mov	r3, r0
 8002e32:	6423      	str	r3, [r4, #64]	; 0x40
	}
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd90      	pop	{r4, r7, pc}

08002e3c <Solder_Iron_Sleep_Time_Resset>:
//---------------------------------------------------------------------------------
void Solder_Iron_Sleep_Time_Resset(struct Soldering_Iron *self){
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
	/**
	 * Reset sleep mode timer and if last mode was Sleep Set previous mode;
	 */
	if(self->MODE==SLEEP)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e4a:	2b03      	cmp	r3, #3
 8002e4c:	d105      	bne.n	8002e5a <Solder_Iron_Sleep_Time_Resset+0x1e>
		self->MODE=self->PREW_MODE;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	self->Timer=0;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
}
 8002e62:	bf00      	nop
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bc80      	pop	{r7}
 8002e6a:	4770      	bx	lr

08002e6c <Solder_Iron_tim_it>:
//---------------------------------------------------------------------------------
void Solder_Iron_tim_it(struct Soldering_Iron *self){
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
	 * Solder_Iron_tim_it Main purples ones a second create Button event for full power button and sleep Mode management
	 */
	static uint8_t Button_prescaler=0;
	static uint8_t TIM_prescaler=0;

	if(TIM_prescaler++==10){
 8002e74:	4b1e      	ldr	r3, [pc, #120]	; (8002ef0 <Solder_Iron_tim_it+0x84>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	1c5a      	adds	r2, r3, #1
 8002e7a:	b2d1      	uxtb	r1, r2
 8002e7c:	4a1c      	ldr	r2, [pc, #112]	; (8002ef0 <Solder_Iron_tim_it+0x84>)
 8002e7e:	7011      	strb	r1, [r2, #0]
 8002e80:	2b0a      	cmp	r3, #10
 8002e82:	d131      	bne.n	8002ee8 <Solder_Iron_tim_it+0x7c>
		if(self->State){
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d029      	beq.n	8002ee2 <Solder_Iron_tim_it+0x76>
			if(self->Timer++==self->Sleep_time){						//if Time more than Sleep time value set sleep mode
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8002e94:	1c5a      	adds	r2, r3, #1
 8002e96:	b291      	uxth	r1, r2
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	f8a2 108c 	strh.w	r1, [r2, #140]	; 0x8c
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	f892 208e 	ldrb.w	r2, [r2, #142]	; 0x8e
 8002ea4:	b292      	uxth	r2, r2
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d10a      	bne.n	8002ec0 <Solder_Iron_tim_it+0x54>
				self->PREW_MODE=self->MODE;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
				Solder_Iron_Set_Temperature(self, SLEEP);						//Set Sleep Mode Temperature preset
 8002eb6:	2103      	movs	r1, #3
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 f85e 	bl	8002f7a <Solder_Iron_Set_Temperature>
 8002ebe:	e010      	b.n	8002ee2 <Solder_Iron_tim_it+0x76>
			}else if(self->Timer==self->Disable_time+self->Sleep_time)//if time more than Disable_time+Sleep_time Turn OFF Soldering_Iron
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 8002ece:	4619      	mov	r1, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8002ed6:	440b      	add	r3, r1
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d102      	bne.n	8002ee2 <Solder_Iron_tim_it+0x76>
				Solder_Iron_OFF(self);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f000 f83a 	bl	8002f56 <Solder_Iron_OFF>
		}
		TIM_prescaler=0;
 8002ee2:	4b03      	ldr	r3, [pc, #12]	; (8002ef0 <Solder_Iron_tim_it+0x84>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	701a      	strb	r2, [r3, #0]
	}
}
 8002ee8:	bf00      	nop
 8002eea:	3708      	adds	r7, #8
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	2000057c 	.word	0x2000057c

08002ef4 <Solder_Iron_ini>:

//---------------------------------------------------------------------------------
void Solder_Iron_ini(struct Soldering_Iron *self){
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
	/**
	 * Basic initialization of all part for starting all processes
	 */
	PID_ini(&self->PID);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7ff fe60 	bl	8002bc4 <PID_ini>
	Filter_ini(&self->Filter);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	3324      	adds	r3, #36	; 0x24
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7fd ff6c 	bl	8000de6 <Filter_ini>
	Button_ini(&self->Full_Power_Button);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	3364      	adds	r3, #100	; 0x64
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7fd fe12 	bl	8000b3c <Button_ini>
	Flash_Rewrite_Timer_ini(&self->Flash_Rewrite_Timer);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3394      	adds	r3, #148	; 0x94
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f000 fc2d 	bl	800377c <Flash_Rewrite_Timer_ini>
}
 8002f22:	bf00      	nop
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <Solder_Iron_ON>:

//---------------------------------------------------------------------------------
void Solder_Iron_ON(struct Soldering_Iron *self){
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b082      	sub	sp, #8
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
	Solder_Iron_Sleep_Time_Resset(self);  	//Reset Sleep_timer
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f7ff ff82 	bl	8002e3c <Solder_Iron_Sleep_Time_Resset>
	Solder_Iron_Set_Temperature(self,self->MODE);		//Set Temperature
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f3e:	4619      	mov	r1, r3
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 f81a 	bl	8002f7a <Solder_Iron_Set_Temperature>
	self->State=Soldering_Iron_ON;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
}
 8002f4e:	bf00      	nop
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <Solder_Iron_OFF>:
//---------------------------------------------------------------------------------
void Solder_Iron_OFF(struct Soldering_Iron *self){
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b082      	sub	sp, #8
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
	self->State=Soldering_Iron_OFF;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	Solder_Iron_Sleep_Time_Resset(self); 	//Reset Sleep_timer
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f7ff ff68 	bl	8002e3c <Solder_Iron_Sleep_Time_Resset>
	Solder_Iron_ini(self);					//Reset All Spldering Iron parameters
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f7ff ffc1 	bl	8002ef4 <Solder_Iron_ini>
}
 8002f72:	bf00      	nop
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <Solder_Iron_Set_Temperature>:
//---------------------------------------------------------------------------------
void Solder_Iron_Set_Temperature(struct Soldering_Iron *self, enum MODE MODE){
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b084      	sub	sp, #16
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
 8002f82:	460b      	mov	r3, r1
 8002f84:	70fb      	strb	r3, [r7, #3]
	/**
	 * Solder_Iron_Set_Temperature based on MODE and Full_Power_Button
	 * Set Point for PID
	 */
	uint16_t Temperature_Corected;
	self->MODE=MODE;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	78fa      	ldrb	r2, [r7, #3]
 8002f8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	Temperature_Corected=Set_Temperature(&self->Temperature_Set, &self->MODE,&self->Temperature_Pressets, &self->Temperature_Corection);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f103 0084 	add.w	r0, r3, #132	; 0x84
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f103 0144 	add.w	r1, r3, #68	; 0x44
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f103 0246 	add.w	r2, r3, #70	; 0x46
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	3350      	adds	r3, #80	; 0x50
 8002fa4:	f7ff fecc 	bl	8002d40 <Set_Temperature>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	81fb      	strh	r3, [r7, #14]
	if(self->Full_Power_State==1){
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d125      	bne.n	8003002 <Solder_Iron_Set_Temperature+0x88>
		if((self->Temperature_Set+self->Add_Temperature)<MAX_ADC_Value){
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8002fc4:	4413      	add	r3, r2
 8002fc6:	f640 62d7 	movw	r2, #3799	; 0xed7
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	dc11      	bgt.n	8002ff2 <Solder_Iron_Set_Temperature+0x78>
			self->Temperature_Set+=self->Add_Temperature;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8002fda:	4413      	add	r3, r2
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
			Temperature_Corected+=self->Add_Temperature;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f8b3 2080 	ldrh.w	r2, [r3, #128]	; 0x80
 8002fea:	89fb      	ldrh	r3, [r7, #14]
 8002fec:	4413      	add	r3, r2
 8002fee:	81fb      	strh	r3, [r7, #14]
 8002ff0:	e007      	b.n	8003002 <Solder_Iron_Set_Temperature+0x88>
		}
		else{
			self->Temperature_Set=MAX_ADC_Value;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f640 62d8 	movw	r2, #3800	; 0xed8
 8002ff8:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
			Temperature_Corected=MAX_ADC_Value;
 8002ffc:	f640 63d8 	movw	r3, #3800	; 0xed8
 8003000:	81fb      	strh	r3, [r7, #14]
		}
	}
	PID_Set_Point(&self->PID, Temperature_Corected);				//Set Point for PID
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	89fa      	ldrh	r2, [r7, #14]
 8003006:	4611      	mov	r1, r2
 8003008:	4618      	mov	r0, r3
 800300a:	f7ff fe7b 	bl	8002d04 <PID_Set_Point>
}
 800300e:	bf00      	nop
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <Vibration_Sensor_it>:
//---------------------------------------------------------------------------------
void Vibration_Sensor_it(struct Soldering_Iron *self){
 8003016:	b580      	push	{r7, lr}
 8003018:	b082      	sub	sp, #8
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
	/**
	 * Vibration sensor have not any check
	 * Main function reset Sleep timer when rising / falling edge
	 */
	self->VS.State=HAL_GPIO_ReadPin(self->VS.GPIO,self->VS.EXTI_PIN);					//Read Pin State
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003028:	4619      	mov	r1, r3
 800302a:	4610      	mov	r0, r2
 800302c:	f003 fc28 	bl	8006880 <HAL_GPIO_ReadPin>
 8003030:	4603      	mov	r3, r0
 8003032:	461a      	mov	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
		if(self->VS.State!=self->VS.Prew_State){											//IF ReadState!=Prew_Stae
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f893 2062 	ldrb.w	r2, [r3, #98]	; 0x62
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 8003046:	429a      	cmp	r2, r3
 8003048:	d009      	beq.n	800305e <Vibration_Sensor_it+0x48>
			Solder_Iron_Sleep_Time_Resset(self);											//Sleep Timer Reset and current MODE(sleep) set previous mode(Manual/Preset1/Preset2)
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f7ff fef6 	bl	8002e3c <Solder_Iron_Sleep_Time_Resset>
			Solder_Iron_Set_Temperature(self,self->MODE);												//Set previous mode temperature before sleep mode temperature;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003056:	4619      	mov	r1, r3
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f7ff ff8e 	bl	8002f7a <Solder_Iron_Set_Temperature>
		}
		self->VS.Prew_State=self->VS.State;												//Prew State = Read State
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f893 2062 	ldrb.w	r2, [r3, #98]	; 0x62
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
}
 800306a:	bf00      	nop
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <Solder_Iron_Flash_Write_Struct>:
//---------------------------------------------------------------------------------				// Solder_Iron Flash
uint32_t Solder_Iron_Flash_Write_Struct(struct Soldering_Iron *self,uint32_t addr){
 8003072:	b580      	push	{r7, lr}
 8003074:	b082      	sub	sp, #8
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
 800307a:	6039      	str	r1, [r7, #0]
	/**
	 * Using to write main structure Soldering_Iron into Flash Memory for an address
	 * return address of the end of writing
	 */
	return Flash_Write (addr, self, sizeof(*self));
 800307c:	229c      	movs	r2, #156	; 0x9c
 800307e:	6879      	ldr	r1, [r7, #4]
 8003080:	6838      	ldr	r0, [r7, #0]
 8003082:	f7fd ff79 	bl	8000f78 <Flash_Write>
 8003086:	4603      	mov	r3, r0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3708      	adds	r7, #8
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <Solder_Iron_Flash_Read_Struct>:
//---------------------------------------------------------------------------------
uint8_t Solder_Iron_Flash_Read_Struct(struct Soldering_Iron *self,uint32_t addr){
 8003090:	b580      	push	{r7, lr}
 8003092:	b0aa      	sub	sp, #168	; 0xa8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
	 * Using to read main structure Soldering_Iron from Flash Memory for an address
	 * return HAL_OK is read  struct was successful  and HAL_ERROR if not
	 * If reading is correct function write all data into a structure
	 */
	struct Soldering_Iron Read_Struct;
	Flash_Read (addr, &Read_Struct, sizeof(*self));			//Read struct into copy
 800309a:	f107 030c 	add.w	r3, r7, #12
 800309e:	229c      	movs	r2, #156	; 0x9c
 80030a0:	4619      	mov	r1, r3
 80030a2:	6838      	ldr	r0, [r7, #0]
 80030a4:	f7fd ffa5 	bl	8000ff2 <Flash_Read>
	if(Read_Struct.Flash_Key==Soldering_Iron_Struct_Key){	//Check if wrote data is a struct
 80030a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80030ac:	4a08      	ldr	r2, [pc, #32]	; (80030d0 <Solder_Iron_Flash_Read_Struct+0x40>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d109      	bne.n	80030c6 <Solder_Iron_Flash_Read_Struct+0x36>
		*self=Read_Struct;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f107 030c 	add.w	r3, r7, #12
 80030ba:	229c      	movs	r2, #156	; 0x9c
 80030bc:	4619      	mov	r1, r3
 80030be:	f005 ff1d 	bl	8008efc <memcpy>
		return HAL_OK;
 80030c2:	2300      	movs	r3, #0
 80030c4:	e000      	b.n	80030c8 <Solder_Iron_Flash_Read_Struct+0x38>
	}else
		return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	37a8      	adds	r7, #168	; 0xa8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	0801f802 	.word	0x0801f802

080030d4 <Solder_Iron_Flash_Read_Manual_Temperature>:
//---------------------------------------------------------------------------------
uint8_t Solder_Iron_Flash_Read_Manual_Temperature(struct Soldering_Iron *self){
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
	/**
	 * Using to read structure Temperature_Pressets from Flash Memory for an Page
	 * return HAL_OK or HAL_ERROR
	 */
	return Flash_Read_Manual_Temperature(&self->Temperature_Pressets, Soldering_Iron_Manual_Temperature_Flash_Key, Soldering_Iron_Manual_Temperature_Flash_Page);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	3346      	adds	r3, #70	; 0x46
 80030e0:	227d      	movs	r2, #125	; 0x7d
 80030e2:	4904      	ldr	r1, [pc, #16]	; (80030f4 <Solder_Iron_Flash_Read_Manual_Temperature+0x20>)
 80030e4:	4618      	mov	r0, r3
 80030e6:	f000 fabe 	bl	8003666 <Flash_Read_Manual_Temperature>
 80030ea:	4603      	mov	r3, r0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3708      	adds	r7, #8
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	0801f806 	.word	0x0801f806

080030f8 <Solder_Iron_Flash_Reset_Rewrite_Timer>:
//---------------------------------------------------------------------------------
void Solder_Iron_Flash_Reset_Rewrite_Timer(struct Soldering_Iron *self){
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
	/**
	 * This function reset rewrite timer.
	 */
	Flash_Reset_Rewrite_Timer(&self->Flash_Rewrite_Timer);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	3394      	adds	r3, #148	; 0x94
 8003104:	4618      	mov	r0, r3
 8003106:	f000 fadb 	bl	80036c0 <Flash_Reset_Rewrite_Timer>
}
 800310a:	bf00      	nop
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <Soldering_Heat_Gun_ini>:
//-----------------------------------------------------------------------------------------------------------------------------------// Heat gun
void Soldering_Heat_Gun_ini(struct Soldering_Heat_Gun *self){
 8003112:	b580      	push	{r7, lr}
 8003114:	b082      	sub	sp, #8
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
	/**
	 * Basic initialization of all part for starting all processes
	 */
	PID_ini(&self->PID);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4618      	mov	r0, r3
 800311e:	f7ff fd51 	bl	8002bc4 <PID_ini>
	Filter_ini(&self->Filter);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	3324      	adds	r3, #36	; 0x24
 8003126:	4618      	mov	r0, r3
 8003128:	f7fd fe5d 	bl	8000de6 <Filter_ini>
	Flash_Rewrite_Timer_ini(&self->Flash_Rewrite_Timer);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	3384      	adds	r3, #132	; 0x84
 8003130:	4618      	mov	r0, r3
 8003132:	f000 fb23 	bl	800377c <Flash_Rewrite_Timer_ini>
}
 8003136:	bf00      	nop
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <Soldering_Heat_Gun_ON>:
//---------------------------------------------------------------------------------
void Soldering_Heat_Gun_ON(struct Soldering_Heat_Gun *self){
 800313e:	b580      	push	{r7, lr}
 8003140:	b082      	sub	sp, #8
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
	/**
	 * Turn ON Heat Gun
	 */
	PAC_ON(self->PAC);							//Turn ON Phase Angle Control
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800314a:	4618      	mov	r0, r3
 800314c:	f7ff fc69 	bl	8002a22 <PAC_ON>
	self->PAC_Control->State=PAC_Control_ON;	//Turn ON Control value for Phase Angle Control
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003154:	2201      	movs	r2, #1
 8003156:	739a      	strb	r2, [r3, #14]
	PID_ini(&self->PID);						//Reset PID
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4618      	mov	r0, r3
 800315c:	f7ff fd32 	bl	8002bc4 <PID_ini>
	Filter_ini(&self->Filter);					//Reset Filter
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	3324      	adds	r3, #36	; 0x24
 8003164:	4618      	mov	r0, r3
 8003166:	f7fd fe3e 	bl	8000de6 <Filter_ini>

	HAL_GPIO_WritePin(self->OFF_GPIO, self->OFF_PIN, GPIO_PIN_RESET);		//Set manual mode to FAN rotating speed controll
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8003174:	2200      	movs	r2, #0
 8003176:	4619      	mov	r1, r3
 8003178:	f003 fb99 	bl	80068ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(self->MANUAL_GPIO, self->MANUAL_PIN, GPIO_PIN_SET);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8003186:	2201      	movs	r2, #1
 8003188:	4619      	mov	r1, r3
 800318a:	f003 fb90 	bl	80068ae <HAL_GPIO_WritePin>

	self->State=Heat_Gun_ON;					//Set turn ON State
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 8003196:	bf00      	nop
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <Soldering_Heat_Gun_OFF>:
//---------------------------------------------------------------------------------
void Soldering_Heat_Gun_OFF(struct Soldering_Heat_Gun *self){
 800319e:	b580      	push	{r7, lr}
 80031a0:	b082      	sub	sp, #8
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
	/**
	 * Turn OFF Heat Gun
	 */
	self->State=Heat_Gun_COOLING;					//Set COOLING State. It needs to cool heat gun to Temperature_Coolling. After set Turn OFF state
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2202      	movs	r2, #2
 80031aa:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	self->PAC_Control->State=PAC_Control_OFF;		//Turn OFF Control value for Phase Angle Control
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b2:	2200      	movs	r2, #0
 80031b4:	739a      	strb	r2, [r3, #14]
	PAC_OFF(self->PAC);								// Turn OFF Phase Angle Control
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7ff fc48 	bl	8002a50 <PAC_OFF>
	HAL_GPIO_WritePin(self->PAC_Control->GPIO, self->PAC_Control->PIN, GPIO_PIN_RESET); //Turn ON Full Speed FAN rotation
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c4:	6898      	ldr	r0, [r3, #8]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ca:	889b      	ldrh	r3, [r3, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	4619      	mov	r1, r3
 80031d0:	f003 fb6d 	bl	80068ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(self->MANUAL_GPIO, self->MANUAL_PIN, GPIO_PIN_RESET);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 80031de:	2200      	movs	r2, #0
 80031e0:	4619      	mov	r1, r3
 80031e2:	f003 fb64 	bl	80068ae <HAL_GPIO_WritePin>
}
 80031e6:	bf00      	nop
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <Soldering_Heat_Gun_Set_Temperature>:
//---------------------------------------------------------------------------------
void Soldering_Heat_Gun_Set_Temperature(struct Soldering_Heat_Gun *self,enum MODE MODE){
 80031ee:	b590      	push	{r4, r7, lr}
 80031f0:	b083      	sub	sp, #12
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
 80031f6:	460b      	mov	r3, r1
 80031f8:	70fb      	strb	r3, [r7, #3]
	/**
	 * Heat_Gun set temperature for PID based on mode
	 * Needs set mode struct.mode(MANUAL/PRESET1..) Before use
	 */
	self->MODE=MODE;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	78fa      	ldrb	r2, [r7, #3]
 80031fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	PID_Set_Point(&self->PID, Set_Temperature(&self->Temperature_Set, &self->MODE,&self->Temperature_Pressets, &self->Temperature_Corection));
 8003202:	687c      	ldr	r4, [r7, #4]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f103 0066 	add.w	r0, r3, #102	; 0x66
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f103 0144 	add.w	r1, r3, #68	; 0x44
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f103 0246 	add.w	r2, r3, #70	; 0x46
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	3350      	adds	r3, #80	; 0x50
 800321a:	f7ff fd91 	bl	8002d40 <Set_Temperature>
 800321e:	4603      	mov	r3, r0
 8003220:	4619      	mov	r1, r3
 8003222:	4620      	mov	r0, r4
 8003224:	f7ff fd6e 	bl	8002d04 <PID_Set_Point>
}
 8003228:	bf00      	nop
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	bd90      	pop	{r4, r7, pc}

08003230 <Soldering_Heat_Gun_it>:

//---------------------------------------------------------------------------------
void Soldering_Heat_Gun_it(struct Soldering_Heat_Gun *self){
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
	/**
	 * Main function PID and Filter iteration for Soldering_Heat_Gun
	 * Secondary Cooling Heat GUN
	 */
	if(self->State==Heat_Gun_ON&&self->PAC->ZCD->State==ZCD_STATE_ON){									//if Heat GUN turn ON && ZCD ON
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800323e:	2b01      	cmp	r3, #1
 8003240:	d11f      	bne.n	8003282 <Soldering_Heat_Gun_it+0x52>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	785b      	ldrb	r3, [r3, #1]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d119      	bne.n	8003282 <Soldering_Heat_Gun_it+0x52>
		self->Temperature=Filter_Combined(&self->Filter);												//Filter and set current Temperature
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	3324      	adds	r3, #36	; 0x24
 8003252:	4618      	mov	r0, r3
 8003254:	f7fd fe2c 	bl	8000eb0 <Filter_Combined>
 8003258:	4603      	mov	r3, r0
 800325a:	461a      	mov	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	66da      	str	r2, [r3, #108]	; 0x6c
		PID_Set_Point_Now(&self->PID,(int)(self->Temperature));											//Heat_Gun PID IT;
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003266:	4619      	mov	r1, r3
 8003268:	4610      	mov	r0, r2
 800326a:	f7ff fd5a 	bl	8002d22 <PID_Set_Point_Now>
		self->PAC_Control->Control_Value=(uint16_t)PID_it(&self->PID);									//Set PAC control value
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff fcb9 	bl	8002be8 <PID_it>
 8003276:	4602      	mov	r2, r0
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800327c:	b292      	uxth	r2, r2
 800327e:	819a      	strh	r2, [r3, #12]
		if(self->Temperature<=self->Temperature_Coolling){												//if the current temperature is less than  Temperature_Coolling
			self->State=Heat_Gun_OFF;																	//Turn off heat gun
			HAL_GPIO_WritePin(self->OFF_GPIO, self->OFF_PIN, GPIO_PIN_SET);								// Turn OF FAN rotating
		}
	}
}
 8003280:	e021      	b.n	80032c6 <Soldering_Heat_Gun_it+0x96>
	}else if(self->State==Heat_Gun_COOLING){															//if Heat GUN Cooling
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8003288:	2b02      	cmp	r3, #2
 800328a:	d11c      	bne.n	80032c6 <Soldering_Heat_Gun_it+0x96>
		self->Temperature=Filter_Combined(&self->Filter);												//and set current Temperature
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	3324      	adds	r3, #36	; 0x24
 8003290:	4618      	mov	r0, r3
 8003292:	f7fd fe0d 	bl	8000eb0 <Filter_Combined>
 8003296:	4603      	mov	r3, r0
 8003298:	461a      	mov	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	66da      	str	r2, [r3, #108]	; 0x6c
		if(self->Temperature<=self->Temperature_Coolling){												//if the current temperature is less than  Temperature_Coolling
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	f8b2 2080 	ldrh.w	r2, [r2, #128]	; 0x80
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d80c      	bhi.n	80032c6 <Soldering_Heat_Gun_it+0x96>
			self->State=Heat_Gun_OFF;																	//Turn off heat gun
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
			HAL_GPIO_WritePin(self->OFF_GPIO, self->OFF_PIN, GPIO_PIN_SET);								// Turn OF FAN rotating
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 80032be:	2201      	movs	r2, #1
 80032c0:	4619      	mov	r1, r3
 80032c2:	f003 faf4 	bl	80068ae <HAL_GPIO_WritePin>
}
 80032c6:	bf00      	nop
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <Soldering_Heat_Gun_Flash_Write_Struct>:
//---------------------------------------------------------------------------------						// Heat_Gun Flash
uint32_t Soldering_Heat_Gun_Flash_Write_Struct(struct Soldering_Heat_Gun *self,uint32_t addr){
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b082      	sub	sp, #8
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
 80032d6:	6039      	str	r1, [r7, #0]
	/**
	 * Using to write main structure Soldering_Heat_Gun into Flash Memory for an address
	 * return address of the end of writing
	 */
	return Flash_Write (addr, self, sizeof(*self));
 80032d8:	228c      	movs	r2, #140	; 0x8c
 80032da:	6879      	ldr	r1, [r7, #4]
 80032dc:	6838      	ldr	r0, [r7, #0]
 80032de:	f7fd fe4b 	bl	8000f78 <Flash_Write>
 80032e2:	4603      	mov	r3, r0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3708      	adds	r7, #8
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <Soldering_Heat_Gun_Flash_Read_Struct>:
//---------------------------------------------------------------------------------
uint8_t Soldering_Heat_Gun_Flash_Read_Struct(struct Soldering_Heat_Gun *self,uint32_t addr){
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b0a6      	sub	sp, #152	; 0x98
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
	 * Using to read main structure Soldering_Heat_Gun from Flash Memory for an address
	 * return HAL_OK is read  struct was successful  and HAL_ERROR if not
	 * If reading is correct function write all data into a structure
	 */
	struct Soldering_Heat_Gun Read_Struct;
	Flash_Read (addr, &Read_Struct, sizeof(*self));						//Read struct into copy
 80032f6:	f107 030c 	add.w	r3, r7, #12
 80032fa:	228c      	movs	r2, #140	; 0x8c
 80032fc:	4619      	mov	r1, r3
 80032fe:	6838      	ldr	r0, [r7, #0]
 8003300:	f7fd fe77 	bl	8000ff2 <Flash_Read>
	if(Read_Struct.Flash_Key==Soldering_Heat_Gun_Struct_Key){			//Check if wrote data is a struct
 8003304:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003308:	4a08      	ldr	r2, [pc, #32]	; (800332c <Soldering_Heat_Gun_Flash_Read_Struct+0x40>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d109      	bne.n	8003322 <Soldering_Heat_Gun_Flash_Read_Struct+0x36>
		*self=Read_Struct;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4618      	mov	r0, r3
 8003312:	f107 030c 	add.w	r3, r7, #12
 8003316:	228c      	movs	r2, #140	; 0x8c
 8003318:	4619      	mov	r1, r3
 800331a:	f005 fdef 	bl	8008efc <memcpy>
		return HAL_OK;
 800331e:	2300      	movs	r3, #0
 8003320:	e000      	b.n	8003324 <Soldering_Heat_Gun_Flash_Read_Struct+0x38>
	}else
		return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
}
 8003324:	4618      	mov	r0, r3
 8003326:	3798      	adds	r7, #152	; 0x98
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	0801f804 	.word	0x0801f804

08003330 <Soldering_Heat_Gun_Flash_Read_Manual_Temperature>:
//---------------------------------------------------------------------------------
uint8_t Soldering_Heat_Gun_Flash_Read_Manual_Temperature(struct Soldering_Heat_Gun *self){
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
	/**
	 * Using to read structure Temperature_Pressets from Flash Memory for an Page
	 * return HAL_OK or HAL_ERROR
	 */
	return Flash_Read_Manual_Temperature(&self->Temperature_Pressets, Soldering_Heat_Gun_Manual_Temperature_Flash_Key, Soldering_Heat_Gun_Manual_Temperature_Flash_Page);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3346      	adds	r3, #70	; 0x46
 800333c:	227c      	movs	r2, #124	; 0x7c
 800333e:	4904      	ldr	r1, [pc, #16]	; (8003350 <Soldering_Heat_Gun_Flash_Read_Manual_Temperature+0x20>)
 8003340:	4618      	mov	r0, r3
 8003342:	f000 f990 	bl	8003666 <Flash_Read_Manual_Temperature>
 8003346:	4603      	mov	r3, r0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3708      	adds	r7, #8
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	0801f808 	.word	0x0801f808

08003354 <Soldering_Heat_Gun_Flash_Reset_Rewrite_Timer>:
//---------------------------------------------------------------------------------
void Soldering_Heat_Gun_Flash_Reset_Rewrite_Timer(struct Soldering_Heat_Gun *self){
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
	/**
	 * This function reset rewrite timer.
	 */
	Flash_Reset_Rewrite_Timer(&self->Flash_Rewrite_Timer);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	3384      	adds	r3, #132	; 0x84
 8003360:	4618      	mov	r0, r3
 8003362:	f000 f9ad 	bl	80036c0 <Flash_Reset_Rewrite_Timer>
}
 8003366:	bf00      	nop
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <Soldering_Separator_ini>:
//---------------------------------------------------------------------------------------------------------------------------------//Soldering_Separator
void Soldering_Separator_ini(struct Soldering_Separator *self){
 800336e:	b580      	push	{r7, lr}
 8003370:	b082      	sub	sp, #8
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
	/**
	 * Basic initialization of all part for starting all processes
	 */
	PID_ini(&self->PID);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff fc23 	bl	8002bc4 <PID_ini>
	Filter_ini(&self->Filter);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	3324      	adds	r3, #36	; 0x24
 8003382:	4618      	mov	r0, r3
 8003384:	f7fd fd2f 	bl	8000de6 <Filter_ini>
	Flash_Rewrite_Timer_ini(&self->Flash_Rewrite_Timer);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	3372      	adds	r3, #114	; 0x72
 800338c:	4618      	mov	r0, r3
 800338e:	f000 f9f5 	bl	800377c <Flash_Rewrite_Timer_ini>
}
 8003392:	bf00      	nop
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <Soldering_Separator_ON>:
//---------------------------------------------------------------------------------
void Soldering_Separator_ON(struct Soldering_Separator *self){
 800339a:	b580      	push	{r7, lr}
 800339c:	b082      	sub	sp, #8
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
	/**
	 * Turn ON Soldering_Separator
	 */
	PAC_ON(self->PAC);								//Turn ON Phase Angle Control
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7ff fb3b 	bl	8002a22 <PAC_ON>
	self->PAC_Control->State=PAC_Control_ON;		//Turn ON Control value for Phase Angle Control
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b0:	2201      	movs	r2, #1
 80033b2:	739a      	strb	r2, [r3, #14]
	PID_ini(&self->PID);							//Reset PID
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7ff fc04 	bl	8002bc4 <PID_ini>
	Filter_ini(&self->Filter);						//Reset Filter
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	3324      	adds	r3, #36	; 0x24
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7fd fd10 	bl	8000de6 <Filter_ini>
	self->State=Separator_ON;						//Set Turn ON State
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
}
 80033ce:	bf00      	nop
 80033d0:	3708      	adds	r7, #8
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <Soldering_Separator_OFF>:
//---------------------------------------------------------------------------------
void Soldering_Separator_OFF(struct Soldering_Separator *self){
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b082      	sub	sp, #8
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
	/**
	 * Turn OFF Soldering Separator
	 */
	self->PAC_Control->State=PAC_Control_OFF; 		//Turn OFF Control value for Phase Angle Control
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e2:	2200      	movs	r2, #0
 80033e4:	739a      	strb	r2, [r3, #14]
	PAC_OFF(self->PAC);								// Turn OFF Phase Angle Control
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7ff fb30 	bl	8002a50 <PAC_OFF>
	self->State=Separator_OFF;						// Set Soldering_Separator Turn OFF State
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
}
 80033f8:	bf00      	nop
 80033fa:	3708      	adds	r7, #8
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <Soldering_Separator_Set_Temperature>:
//---------------------------------------------------------------------------------
void Soldering_Separator_Set_Temperature(struct Soldering_Separator *self, enum MODE MODE){
 8003400:	b590      	push	{r4, r7, lr}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	460b      	mov	r3, r1
 800340a:	70fb      	strb	r3, [r7, #3]
	/**
	 * Soldering_Separator set temperature for PID based on mode
	 * Needs set mode struct.mode(MANUAL/PRESET1..) Before use
	 */
	self->MODE=MODE;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	78fa      	ldrb	r2, [r7, #3]
 8003410:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	PID_Set_Point(&self->PID, Set_Temperature(&self->Temperature_Set, &self->MODE,&self->Temperature_Pressets, &self->Temperature_Corection));
 8003414:	687c      	ldr	r4, [r7, #4]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f103 0066 	add.w	r0, r3, #102	; 0x66
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f103 0144 	add.w	r1, r3, #68	; 0x44
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f103 0246 	add.w	r2, r3, #70	; 0x46
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	3350      	adds	r3, #80	; 0x50
 800342c:	f7ff fc88 	bl	8002d40 <Set_Temperature>
 8003430:	4603      	mov	r3, r0
 8003432:	4619      	mov	r1, r3
 8003434:	4620      	mov	r0, r4
 8003436:	f7ff fc65 	bl	8002d04 <PID_Set_Point>
}
 800343a:	bf00      	nop
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	bd90      	pop	{r4, r7, pc}

08003442 <Soldering_Separator_it>:

//---------------------------------------------------------------------------------
void Soldering_Separator_it(struct Soldering_Separator *self){
 8003442:	b580      	push	{r7, lr}
 8003444:	b082      	sub	sp, #8
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
	/**
	 * Main function PID and Filter iteration for Soldering_Separator
	 *
	 */
	if(self->State==Separator_ON&&self->PAC->ZCD->State==ZCD_STATE_ON){				//if Heat GUN turn ON && ZCD ON
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003450:	2b01      	cmp	r3, #1
 8003452:	d11e      	bne.n	8003492 <Soldering_Separator_it+0x50>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	785b      	ldrb	r3, [r3, #1]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d118      	bne.n	8003492 <Soldering_Separator_it+0x50>
		self->Temperature=Filter_Combined(&self->Filter);							//Filter and set current Temperature
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3324      	adds	r3, #36	; 0x24
 8003464:	4618      	mov	r0, r3
 8003466:	f7fd fd23 	bl	8000eb0 <Filter_Combined>
 800346a:	4603      	mov	r3, r0
 800346c:	461a      	mov	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	66da      	str	r2, [r3, #108]	; 0x6c
		PID_Set_Point_Now(&self->PID,(int)(self->Temperature));						//Soldering_Separator PID IT;
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003478:	4619      	mov	r1, r3
 800347a:	4610      	mov	r0, r2
 800347c:	f7ff fc51 	bl	8002d22 <PID_Set_Point_Now>
		self->PAC_Control->Control_Value=(uint16_t)PID_it(&self->PID);				//Set PAC control value
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4618      	mov	r0, r3
 8003484:	f7ff fbb0 	bl	8002be8 <PID_it>
 8003488:	4602      	mov	r2, r0
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800348e:	b292      	uxth	r2, r2
 8003490:	819a      	strh	r2, [r3, #12]
	}
}
 8003492:	bf00      	nop
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <Soldering_Separator_Flash_Write_Struct>:
//---------------------------------------------------------------------------------						// Soldering_Separator Flash
uint32_t Soldering_Separator_Flash_Write_Struct(struct Soldering_Separator *self,uint32_t addr){
 800349a:	b580      	push	{r7, lr}
 800349c:	b082      	sub	sp, #8
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
 80034a2:	6039      	str	r1, [r7, #0]
	return Flash_Write (addr, self, sizeof(*self));
 80034a4:	227c      	movs	r2, #124	; 0x7c
 80034a6:	6879      	ldr	r1, [r7, #4]
 80034a8:	6838      	ldr	r0, [r7, #0]
 80034aa:	f7fd fd65 	bl	8000f78 <Flash_Write>
 80034ae:	4603      	mov	r3, r0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3708      	adds	r7, #8
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <Soldering_Separator_Flash_Read_Struct>:
//---------------------------------------------------------------------------------
uint8_t Soldering_Separator_Flash_Read_Struct(struct Soldering_Separator *self,uint32_t addr){
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b0a2      	sub	sp, #136	; 0x88
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
	struct Soldering_Separator Read_Struct;
	Flash_Read (addr, &Read_Struct, sizeof(*self));
 80034c2:	f107 030c 	add.w	r3, r7, #12
 80034c6:	227c      	movs	r2, #124	; 0x7c
 80034c8:	4619      	mov	r1, r3
 80034ca:	6838      	ldr	r0, [r7, #0]
 80034cc:	f7fd fd91 	bl	8000ff2 <Flash_Read>
	if(Read_Struct.Flash_Key==Soldering_Separator_Struct_Key){
 80034d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034d4:	4a08      	ldr	r2, [pc, #32]	; (80034f8 <Soldering_Separator_Flash_Read_Struct+0x40>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d109      	bne.n	80034ee <Soldering_Separator_Flash_Read_Struct+0x36>
		*self=Read_Struct;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4618      	mov	r0, r3
 80034de:	f107 030c 	add.w	r3, r7, #12
 80034e2:	227c      	movs	r2, #124	; 0x7c
 80034e4:	4619      	mov	r1, r3
 80034e6:	f005 fd09 	bl	8008efc <memcpy>
		return HAL_OK;
 80034ea:	2300      	movs	r3, #0
 80034ec:	e000      	b.n	80034f0 <Soldering_Separator_Flash_Read_Struct+0x38>
	}else
		return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3788      	adds	r7, #136	; 0x88
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	1801f804 	.word	0x1801f804

080034fc <Soldering_Separator_Flash_Read_Manual_Temperature>:
//---------------------------------------------------------------------------------
uint32_t Soldering_Separator_Flash_Write_Manual_Temperature(struct Soldering_Separator *self){
	return Write_Manual_Temperature(&self->Temperature_Pressets, Soldering_Separator_Manual_Temperature_Flash_Key, Soldering_Separator_Manual_Temperature_Flash_Page);
}
//---------------------------------------------------------------------------------
uint8_t Soldering_Separator_Flash_Read_Manual_Temperature(struct Soldering_Separator *self){
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
	return Flash_Read_Manual_Temperature(&self->Temperature_Pressets, Soldering_Separator_Manual_Temperature_Flash_Key, Soldering_Separator_Manual_Temperature_Flash_Page);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	3346      	adds	r3, #70	; 0x46
 8003508:	227b      	movs	r2, #123	; 0x7b
 800350a:	4904      	ldr	r1, [pc, #16]	; (800351c <Soldering_Separator_Flash_Read_Manual_Temperature+0x20>)
 800350c:	4618      	mov	r0, r3
 800350e:	f000 f8aa 	bl	8003666 <Flash_Read_Manual_Temperature>
 8003512:	4603      	mov	r3, r0
}
 8003514:	4618      	mov	r0, r3
 8003516:	3708      	adds	r7, #8
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	1801f808 	.word	0x1801f808

08003520 <Soldering_Separator_Flash_Reset_Rewrite_Timer>:
//---------------------------------------------------------------------------------
void Soldering_Separator_Flash_Reset_Rewrite_Timer(struct Soldering_Separator *self){
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
	Flash_Reset_Rewrite_Timer(&self->Flash_Rewrite_Timer);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	3372      	adds	r3, #114	; 0x72
 800352c:	4618      	mov	r0, r3
 800352e:	f000 f8c7 	bl	80036c0 <Flash_Reset_Rewrite_Timer>
}
 8003532:	bf00      	nop
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
	...

0800353c <Soldering_Station_Read_Struct>:
//---------------------------------------------------------------------------------------------------------------------------------//FLASH Read ALL_Struct
uint8_t Soldering_Station_Read_Struct(struct Soldering_Iron *Soldering_Iron, struct Soldering_Heat_Gun *Soldering_Heat_Gun, struct Soldering_Separator *Soldering_Separator){
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]

	uint8_t Status=HAL_OK;
 8003548:	2300      	movs	r3, #0
 800354a:	75fb      	strb	r3, [r7, #23]
	uint32_t addr = Flash_Base_Addr + Flash_Addr_Page_Size*Soldering_Station_ALL_Struct_Flash_Page;
 800354c:	4b13      	ldr	r3, [pc, #76]	; (800359c <Soldering_Station_Read_Struct+0x60>)
 800354e:	613b      	str	r3, [r7, #16]
	Status|=Solder_Iron_Flash_Read_Struct(Soldering_Iron,addr);
 8003550:	6939      	ldr	r1, [r7, #16]
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	f7ff fd9c 	bl	8003090 <Solder_Iron_Flash_Read_Struct>
 8003558:	4603      	mov	r3, r0
 800355a:	461a      	mov	r2, r3
 800355c:	7dfb      	ldrb	r3, [r7, #23]
 800355e:	4313      	orrs	r3, r2
 8003560:	75fb      	strb	r3, [r7, #23]
	addr+=sizeof(*Soldering_Iron)+2;
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	339e      	adds	r3, #158	; 0x9e
 8003566:	613b      	str	r3, [r7, #16]
	Status|=Soldering_Heat_Gun_Flash_Read_Struct(Soldering_Heat_Gun,addr);
 8003568:	6939      	ldr	r1, [r7, #16]
 800356a:	68b8      	ldr	r0, [r7, #8]
 800356c:	f7ff febe 	bl	80032ec <Soldering_Heat_Gun_Flash_Read_Struct>
 8003570:	4603      	mov	r3, r0
 8003572:	461a      	mov	r2, r3
 8003574:	7dfb      	ldrb	r3, [r7, #23]
 8003576:	4313      	orrs	r3, r2
 8003578:	75fb      	strb	r3, [r7, #23]
	addr+=sizeof(*Soldering_Heat_Gun)+2;
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	338e      	adds	r3, #142	; 0x8e
 800357e:	613b      	str	r3, [r7, #16]
	Status|=Soldering_Separator_Flash_Read_Struct(Soldering_Separator,addr);
 8003580:	6939      	ldr	r1, [r7, #16]
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f7ff ff98 	bl	80034b8 <Soldering_Separator_Flash_Read_Struct>
 8003588:	4603      	mov	r3, r0
 800358a:	461a      	mov	r2, r3
 800358c:	7dfb      	ldrb	r3, [r7, #23]
 800358e:	4313      	orrs	r3, r2
 8003590:	75fb      	strb	r3, [r7, #23]

	return Status;
 8003592:	7dfb      	ldrb	r3, [r7, #23]
}
 8003594:	4618      	mov	r0, r3
 8003596:	3718      	adds	r7, #24
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	0801f800 	.word	0x0801f800

080035a0 <Soldering_Station_Write_Struct>:
//---------------------------------------------------------------------------------
uint8_t Soldering_Station_Write_Struct(struct Soldering_Iron *Soldering_Iron, struct Soldering_Heat_Gun *Soldering_Heat_Gun, struct Soldering_Separator *Soldering_Separator){
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]

	uint8_t Status=HAL_OK;
 80035ac:	2300      	movs	r3, #0
 80035ae:	75fb      	strb	r3, [r7, #23]

	uint32_t addr = Flash_Base_Addr + Flash_Addr_Page_Size*Soldering_Station_ALL_Struct_Flash_Page;
 80035b0:	4b19      	ldr	r3, [pc, #100]	; (8003618 <Soldering_Station_Write_Struct+0x78>)
 80035b2:	613b      	str	r3, [r7, #16]

	Flash_Erase (addr,sizeof(*Soldering_Iron)+2+sizeof(*Soldering_Heat_Gun)+2+sizeof(*Soldering_Separator));
 80035b4:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 80035b8:	6938      	ldr	r0, [r7, #16]
 80035ba:	f7fd fcae 	bl	8000f1a <Flash_Erase>

	if(Solder_Iron_Flash_Write_Struct(Soldering_Iron,addr)==HAL_ERROR)
 80035be:	6939      	ldr	r1, [r7, #16]
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	f7ff fd56 	bl	8003072 <Solder_Iron_Flash_Write_Struct>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d103      	bne.n	80035d4 <Soldering_Station_Write_Struct+0x34>
		Status|=HAL_ERROR;
 80035cc:	7dfb      	ldrb	r3, [r7, #23]
 80035ce:	f043 0301 	orr.w	r3, r3, #1
 80035d2:	75fb      	strb	r3, [r7, #23]
	addr+=sizeof(*Soldering_Iron)+2;
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	339e      	adds	r3, #158	; 0x9e
 80035d8:	613b      	str	r3, [r7, #16]
	if(Soldering_Heat_Gun_Flash_Write_Struct(Soldering_Heat_Gun,addr)==HAL_ERROR)
 80035da:	6939      	ldr	r1, [r7, #16]
 80035dc:	68b8      	ldr	r0, [r7, #8]
 80035de:	f7ff fe76 	bl	80032ce <Soldering_Heat_Gun_Flash_Write_Struct>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d103      	bne.n	80035f0 <Soldering_Station_Write_Struct+0x50>
		Status|=HAL_ERROR;
 80035e8:	7dfb      	ldrb	r3, [r7, #23]
 80035ea:	f043 0301 	orr.w	r3, r3, #1
 80035ee:	75fb      	strb	r3, [r7, #23]
	addr+=sizeof(*Soldering_Heat_Gun)+2;
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	338e      	adds	r3, #142	; 0x8e
 80035f4:	613b      	str	r3, [r7, #16]
	if(Soldering_Separator_Flash_Write_Struct(Soldering_Separator,addr)==HAL_ERROR)
 80035f6:	6939      	ldr	r1, [r7, #16]
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f7ff ff4e 	bl	800349a <Soldering_Separator_Flash_Write_Struct>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b01      	cmp	r3, #1
 8003602:	d103      	bne.n	800360c <Soldering_Station_Write_Struct+0x6c>
		Status|=HAL_ERROR;
 8003604:	7dfb      	ldrb	r3, [r7, #23]
 8003606:	f043 0301 	orr.w	r3, r3, #1
 800360a:	75fb      	strb	r3, [r7, #23]

	return Status;
 800360c:	7dfb      	ldrb	r3, [r7, #23]
}
 800360e:	4618      	mov	r0, r3
 8003610:	3718      	adds	r7, #24
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	0801f800 	.word	0x0801f800

0800361c <Write_Manual_Temperature>:
//---------------------------------------------------------------------------------
uint32_t Write_Manual_Temperature(struct Temperature_Pressets *self, uint32_t Flash_Key, uint8_t Flash_Page){
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	4613      	mov	r3, r2
 8003628:	71fb      	strb	r3, [r7, #7]

	uint32_t addr = Flash_Base_Addr + Flash_Addr_Page_Size*Flash_Page;
 800362a:	79fb      	ldrb	r3, [r7, #7]
 800362c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8003630:	029b      	lsls	r3, r3, #10
 8003632:	617b      	str	r3, [r7, #20]

	Flash_Erase (addr,sizeof(self->Manual)+sizeof(Flash_Key));
 8003634:	2106      	movs	r1, #6
 8003636:	6978      	ldr	r0, [r7, #20]
 8003638:	f7fd fc6f 	bl	8000f1a <Flash_Erase>

	Flash_Write (addr,&self->Manual, sizeof(self->Manual));
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2202      	movs	r2, #2
 8003640:	4619      	mov	r1, r3
 8003642:	6978      	ldr	r0, [r7, #20]
 8003644:	f7fd fc98 	bl	8000f78 <Flash_Write>

	addr+=sizeof(self->Manual)+2;
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	3304      	adds	r3, #4
 800364c:	617b      	str	r3, [r7, #20]

	return Flash_Write (addr,&Flash_Key, sizeof(Flash_Key));
 800364e:	f107 0308 	add.w	r3, r7, #8
 8003652:	2204      	movs	r2, #4
 8003654:	4619      	mov	r1, r3
 8003656:	6978      	ldr	r0, [r7, #20]
 8003658:	f7fd fc8e 	bl	8000f78 <Flash_Write>
 800365c:	4603      	mov	r3, r0

}
 800365e:	4618      	mov	r0, r3
 8003660:	3718      	adds	r7, #24
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <Flash_Read_Manual_Temperature>:
//---------------------------------------------------------------------------------
uint8_t Flash_Read_Manual_Temperature(struct Temperature_Pressets *self, uint32_t Flash_Key, uint8_t Flash_Page){
 8003666:	b580      	push	{r7, lr}
 8003668:	b088      	sub	sp, #32
 800366a:	af00      	add	r7, sp, #0
 800366c:	60f8      	str	r0, [r7, #12]
 800366e:	60b9      	str	r1, [r7, #8]
 8003670:	4613      	mov	r3, r2
 8003672:	71fb      	strb	r3, [r7, #7]
	uint32_t addr = Flash_Base_Addr + Flash_Addr_Page_Size*Flash_Page;
 8003674:	79fb      	ldrb	r3, [r7, #7]
 8003676:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800367a:	029b      	lsls	r3, r3, #10
 800367c:	61fb      	str	r3, [r7, #28]
	uint32_t Flash_Read_Key=0;
 800367e:	2300      	movs	r3, #0
 8003680:	61bb      	str	r3, [r7, #24]
	uint16_t Temperature;

	Flash_Read (addr, &Temperature, sizeof(self->Manual));
 8003682:	f107 0316 	add.w	r3, r7, #22
 8003686:	2202      	movs	r2, #2
 8003688:	4619      	mov	r1, r3
 800368a:	69f8      	ldr	r0, [r7, #28]
 800368c:	f7fd fcb1 	bl	8000ff2 <Flash_Read>
	addr+=sizeof(self->Manual)+2;
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	3304      	adds	r3, #4
 8003694:	61fb      	str	r3, [r7, #28]
	Flash_Read (addr, &Flash_Read_Key,  sizeof(Flash_Read_Key));
 8003696:	f107 0318 	add.w	r3, r7, #24
 800369a:	2204      	movs	r2, #4
 800369c:	4619      	mov	r1, r3
 800369e:	69f8      	ldr	r0, [r7, #28]
 80036a0:	f7fd fca7 	bl	8000ff2 <Flash_Read>

	if(Flash_Read_Key==Flash_Key){
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	68ba      	ldr	r2, [r7, #8]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d104      	bne.n	80036b6 <Flash_Read_Manual_Temperature+0x50>
		self->Manual=Temperature;
 80036ac:	8afa      	ldrh	r2, [r7, #22]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	801a      	strh	r2, [r3, #0]
		return HAL_OK;
 80036b2:	2300      	movs	r3, #0
 80036b4:	e000      	b.n	80036b8 <Flash_Read_Manual_Temperature+0x52>
	}
	else
		return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3720      	adds	r7, #32
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <Flash_Reset_Rewrite_Timer>:
//---------------------------------------------------------------------------------
void Flash_Reset_Rewrite_Timer(struct Flash_Rewrite_Timer *self){
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
	self->Flash_Timer_Count=0;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	801a      	strh	r2, [r3, #0]
	self->Flash_Timer_State=Flash_Timer_State_ON;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	709a      	strb	r2, [r3, #2]
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	bc80      	pop	{r7}
 80036dc:	4770      	bx	lr

080036de <Flash_Rewrite_Timer_it>:
//---------------------------------------------------------------------------------
void Flash_Rewrite_Timer_it(struct Flash_Rewrite_Timer *Flash_Rewrite_Timer, struct Temperature_Pressets *Temperature_Pressets,uint32_t Flash_Key, uint8_t Flash_Page){
 80036de:	b580      	push	{r7, lr}
 80036e0:	b084      	sub	sp, #16
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	60f8      	str	r0, [r7, #12]
 80036e6:	60b9      	str	r1, [r7, #8]
 80036e8:	607a      	str	r2, [r7, #4]
 80036ea:	70fb      	strb	r3, [r7, #3]
	if(Flash_Rewrite_Timer->Flash_Timer_State==Flash_Timer_State_ON){
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	789b      	ldrb	r3, [r3, #2]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d110      	bne.n	8003716 <Flash_Rewrite_Timer_it+0x38>
		if(Flash_Rewrite_Timer->Flash_Timer_Count++==Flash_Rewrite_Timer_Max_Count){
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	881b      	ldrh	r3, [r3, #0]
 80036f8:	1c5a      	adds	r2, r3, #1
 80036fa:	b291      	uxth	r1, r2
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	8011      	strh	r1, [r2, #0]
 8003700:	2bc8      	cmp	r3, #200	; 0xc8
 8003702:	d108      	bne.n	8003716 <Flash_Rewrite_Timer_it+0x38>
			Write_Manual_Temperature(Temperature_Pressets, Flash_Key, Flash_Page);
 8003704:	78fb      	ldrb	r3, [r7, #3]
 8003706:	461a      	mov	r2, r3
 8003708:	6879      	ldr	r1, [r7, #4]
 800370a:	68b8      	ldr	r0, [r7, #8]
 800370c:	f7ff ff86 	bl	800361c <Write_Manual_Temperature>
			Flash_Rewrite_Timer->Flash_Timer_State=Flash_Timer_State_OFF;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	709a      	strb	r2, [r3, #2]
		}
	}
}
 8003716:	bf00      	nop
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
	...

08003720 <Flash_Rewrite_Timer_tim_it>:
//---------------------------------------------------------------------------------
void Flash_Rewrite_Timer_tim_it(struct Soldering_Iron *Soldering_Iron, struct Soldering_Heat_Gun *Soldering_Heat_Gun, struct Soldering_Separator *Soldering_Separator){
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
	Flash_Rewrite_Timer_it(&Soldering_Iron->Flash_Rewrite_Timer, &Soldering_Iron->Temperature_Pressets, Soldering_Iron_Manual_Temperature_Flash_Key, Soldering_Iron_Manual_Temperature_Flash_Page);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f103 0094 	add.w	r0, r3, #148	; 0x94
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f103 0146 	add.w	r1, r3, #70	; 0x46
 8003738:	237d      	movs	r3, #125	; 0x7d
 800373a:	4a0d      	ldr	r2, [pc, #52]	; (8003770 <Flash_Rewrite_Timer_tim_it+0x50>)
 800373c:	f7ff ffcf 	bl	80036de <Flash_Rewrite_Timer_it>
	Flash_Rewrite_Timer_it(&Soldering_Heat_Gun->Flash_Rewrite_Timer, &Soldering_Heat_Gun->Temperature_Pressets, Soldering_Heat_Gun_Manual_Temperature_Flash_Key, Soldering_Heat_Gun_Manual_Temperature_Flash_Page);
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	f103 0084 	add.w	r0, r3, #132	; 0x84
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	f103 0146 	add.w	r1, r3, #70	; 0x46
 800374c:	237c      	movs	r3, #124	; 0x7c
 800374e:	4a09      	ldr	r2, [pc, #36]	; (8003774 <Flash_Rewrite_Timer_tim_it+0x54>)
 8003750:	f7ff ffc5 	bl	80036de <Flash_Rewrite_Timer_it>
	Flash_Rewrite_Timer_it(&Soldering_Separator->Flash_Rewrite_Timer, &Soldering_Separator->Temperature_Pressets, Soldering_Separator_Manual_Temperature_Flash_Key, Soldering_Separator_Manual_Temperature_Flash_Page);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f103 0072 	add.w	r0, r3, #114	; 0x72
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f103 0146 	add.w	r1, r3, #70	; 0x46
 8003760:	237b      	movs	r3, #123	; 0x7b
 8003762:	4a05      	ldr	r2, [pc, #20]	; (8003778 <Flash_Rewrite_Timer_tim_it+0x58>)
 8003764:	f7ff ffbb 	bl	80036de <Flash_Rewrite_Timer_it>
}
 8003768:	bf00      	nop
 800376a:	3710      	adds	r7, #16
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	0801f806 	.word	0x0801f806
 8003774:	0801f808 	.word	0x0801f808
 8003778:	1801f808 	.word	0x1801f808

0800377c <Flash_Rewrite_Timer_ini>:
//---------------------------------------------------------------------------------
void Flash_Rewrite_Timer_ini(struct Flash_Rewrite_Timer *self){
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
	self->Flash_Timer_Count=0;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	801a      	strh	r2, [r3, #0]
	self->Flash_Timer_State=Flash_Timer_State_OFF;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	709a      	strb	r2, [r3, #2]
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	bc80      	pop	{r7}
 8003798:	4770      	bx	lr
	...

0800379c <ZCD_ON_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//---------------------------------------------------------------------------------
void ZCD_ON_Callback(struct ZCD *self){
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
	Soldering_Heat_Gun.PID.MAX_Control=ZCD.MAX_TIM_Counter;
 80037a4:	4b06      	ldr	r3, [pc, #24]	; (80037c0 <ZCD_ON_Callback+0x24>)
 80037a6:	88da      	ldrh	r2, [r3, #6]
 80037a8:	4b06      	ldr	r3, [pc, #24]	; (80037c4 <ZCD_ON_Callback+0x28>)
 80037aa:	821a      	strh	r2, [r3, #16]
	Soldering_Separator.PID.MAX_Control=ZCD.MAX_TIM_Counter;
 80037ac:	4b04      	ldr	r3, [pc, #16]	; (80037c0 <ZCD_ON_Callback+0x24>)
 80037ae:	88da      	ldrh	r2, [r3, #6]
 80037b0:	4b05      	ldr	r3, [pc, #20]	; (80037c8 <ZCD_ON_Callback+0x2c>)
 80037b2:	821a      	strh	r2, [r3, #16]
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bc80      	pop	{r7}
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	200009d0 	.word	0x200009d0
 80037c4:	200008c8 	.word	0x200008c8
 80037c8:	20000954 	.word	0x20000954

080037cc <HAL_ADC_ConvCpltCallback>:
//--------------------------------------------------------------------------------- ADC_Callback
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
	Solder_Iron_it(&Soldering_Iron);				//PID_IT
 80037d4:	4806      	ldr	r0, [pc, #24]	; (80037f0 <HAL_ADC_ConvCpltCallback+0x24>)
 80037d6:	f7ff fafb 	bl	8002dd0 <Solder_Iron_it>
	Soldering_Heat_Gun_it(&Soldering_Heat_Gun);		//PID_IT
 80037da:	4806      	ldr	r0, [pc, #24]	; (80037f4 <HAL_ADC_ConvCpltCallback+0x28>)
 80037dc:	f7ff fd28 	bl	8003230 <Soldering_Heat_Gun_it>
	Soldering_Separator_it(&Soldering_Separator);
 80037e0:	4805      	ldr	r0, [pc, #20]	; (80037f8 <HAL_ADC_ConvCpltCallback+0x2c>)
 80037e2:	f7ff fe2e 	bl	8003442 <Soldering_Separator_it>
}
 80037e6:	bf00      	nop
 80037e8:	3708      	adds	r7, #8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	2000082c 	.word	0x2000082c
 80037f4:	200008c8 	.word	0x200008c8
 80037f8:	20000954 	.word	0x20000954

080037fc <HAL_GPIO_EXTI_Callback>:
//--------------------------------------------------------------------------------- EXTI
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	4603      	mov	r3, r0
 8003804:	80fb      	strh	r3, [r7, #6]
	if(PAC_EXTI(&PAC,&GPIO_PIN)!=1){
 8003806:	1dbb      	adds	r3, r7, #6
 8003808:	4619      	mov	r1, r3
 800380a:	480c      	ldr	r0, [pc, #48]	; (800383c <HAL_GPIO_EXTI_Callback+0x40>)
 800380c:	f7ff f94d 	bl	8002aaa <PAC_EXTI>
 8003810:	4603      	mov	r3, r0
 8003812:	2b01      	cmp	r3, #1
 8003814:	d00e      	beq.n	8003834 <HAL_GPIO_EXTI_Callback+0x38>
		Button_Vector_EXTI(&Button_Vector,&GPIO_PIN);
 8003816:	1dbb      	adds	r3, r7, #6
 8003818:	4619      	mov	r1, r3
 800381a:	4809      	ldr	r0, [pc, #36]	; (8003840 <HAL_GPIO_EXTI_Callback+0x44>)
 800381c:	f7fd f9f2 	bl	8000c04 <Button_Vector_EXTI>
		Incoder_EXTI(&Incoder_P2, &GPIO_PIN);
 8003820:	1dbb      	adds	r3, r7, #6
 8003822:	4619      	mov	r1, r3
 8003824:	4807      	ldr	r0, [pc, #28]	; (8003844 <HAL_GPIO_EXTI_Callback+0x48>)
 8003826:	f7fd f856 	bl	80008d6 <Incoder_EXTI>
		Incoder_EXTI(&Incoder_P1, &GPIO_PIN);
 800382a:	1dbb      	adds	r3, r7, #6
 800382c:	4619      	mov	r1, r3
 800382e:	4806      	ldr	r0, [pc, #24]	; (8003848 <HAL_GPIO_EXTI_Callback+0x4c>)
 8003830:	f7fd f851 	bl	80008d6 <Incoder_EXTI>
	}
}
 8003834:	bf00      	nop
 8003836:	3708      	adds	r7, #8
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	200009e0 	.word	0x200009e0
 8003840:	200007d8 	.word	0x200007d8
 8003844:	20000770 	.word	0x20000770
 8003848:	200007a4 	.word	0x200007a4

0800384c <HAL_TIM_PeriodElapsedCallback>:
//---------------------------------------------------------------------------------TIM_Callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
	static uint8_t prescaler=1;


        if(htim->Instance == TIM1) //check if the interrupt comes from TIM1									//ADC DMA
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a1d      	ldr	r2, [pc, #116]	; (80038d0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d114      	bne.n	8003888 <HAL_TIM_PeriodElapsedCallback+0x3c>
        {
        	if(prescaler==1){
 800385e:	4b1d      	ldr	r3, [pc, #116]	; (80038d4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d107      	bne.n	8003876 <HAL_TIM_PeriodElapsedCallback+0x2a>
        		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 8003866:	210c      	movs	r1, #12
 8003868:	481b      	ldr	r0, [pc, #108]	; (80038d8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800386a:	f004 fc21 	bl	80080b0 <HAL_TIM_PWM_Stop>
        		prescaler=0;
 800386e:	4b19      	ldr	r3, [pc, #100]	; (80038d4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003870:	2200      	movs	r2, #0
 8003872:	701a      	strb	r2, [r3, #0]
        	Incoder_it(&Incoder_P1);
        	Incoder_it(&Incoder_P2);
        }else if(htim->Instance == TIM4){
        	PAC_it(&PAC);
        }
}
 8003874:	e027      	b.n	80038c6 <HAL_TIM_PeriodElapsedCallback+0x7a>
        		HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&ADC_Data[0],(uint32_t)16);
 8003876:	2210      	movs	r2, #16
 8003878:	4918      	ldr	r1, [pc, #96]	; (80038dc <HAL_TIM_PeriodElapsedCallback+0x90>)
 800387a:	4819      	ldr	r0, [pc, #100]	; (80038e0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800387c:	f001 fccc 	bl	8005218 <HAL_ADC_Start_DMA>
        		prescaler=1;
 8003880:	4b14      	ldr	r3, [pc, #80]	; (80038d4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003882:	2201      	movs	r2, #1
 8003884:	701a      	strb	r2, [r3, #0]
}
 8003886:	e01e      	b.n	80038c6 <HAL_TIM_PeriodElapsedCallback+0x7a>
        }else if(htim->Instance == TIM3){																	//Service  TIM3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a15      	ldr	r2, [pc, #84]	; (80038e4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d111      	bne.n	80038b6 <HAL_TIM_PeriodElapsedCallback+0x6a>
        	Flash_Rewrite_Timer_tim_it(&Soldering_Iron, &Soldering_Heat_Gun, &Soldering_Separator);
 8003892:	4a15      	ldr	r2, [pc, #84]	; (80038e8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8003894:	4915      	ldr	r1, [pc, #84]	; (80038ec <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003896:	4816      	ldr	r0, [pc, #88]	; (80038f0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8003898:	f7ff ff42 	bl	8003720 <Flash_Rewrite_Timer_tim_it>
        	Solder_Iron_tim_it(&Soldering_Iron);
 800389c:	4814      	ldr	r0, [pc, #80]	; (80038f0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800389e:	f7ff fae5 	bl	8002e6c <Solder_Iron_tim_it>
        	Button_Vector_it(&Button_Vector);
 80038a2:	4814      	ldr	r0, [pc, #80]	; (80038f4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80038a4:	f7fd f9c6 	bl	8000c34 <Button_Vector_it>
        	Incoder_it(&Incoder_P1);
 80038a8:	4813      	ldr	r0, [pc, #76]	; (80038f8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80038aa:	f7fd f93a 	bl	8000b22 <Incoder_it>
        	Incoder_it(&Incoder_P2);
 80038ae:	4813      	ldr	r0, [pc, #76]	; (80038fc <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80038b0:	f7fd f937 	bl	8000b22 <Incoder_it>
}
 80038b4:	e007      	b.n	80038c6 <HAL_TIM_PeriodElapsedCallback+0x7a>
        }else if(htim->Instance == TIM4){
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a11      	ldr	r2, [pc, #68]	; (8003900 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d102      	bne.n	80038c6 <HAL_TIM_PeriodElapsedCallback+0x7a>
        	PAC_it(&PAC);
 80038c0:	4810      	ldr	r0, [pc, #64]	; (8003904 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80038c2:	f7ff f949 	bl	8002b58 <PAC_it>
}
 80038c6:	bf00      	nop
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	40012c00 	.word	0x40012c00
 80038d4:	20000478 	.word	0x20000478
 80038d8:	20000690 	.word	0x20000690
 80038dc:	200009e8 	.word	0x200009e8
 80038e0:	20000580 	.word	0x20000580
 80038e4:	40000400 	.word	0x40000400
 80038e8:	20000954 	.word	0x20000954
 80038ec:	200008c8 	.word	0x200008c8
 80038f0:	2000082c 	.word	0x2000082c
 80038f4:	200007d8 	.word	0x200007d8
 80038f8:	200007a4 	.word	0x200007a4
 80038fc:	20000770 	.word	0x20000770
 8003900:	40000800 	.word	0x40000800
 8003904:	200009e0 	.word	0x200009e0

08003908 <BUTTON_INI>:
//--------------------------------------------------------------------------------- INI Blocks
void BUTTON_INI(void){
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af00      	add	r7, sp, #0
	struct Button Button_ini;

	Button_ini.ID=Button_ID_E2B1;
 800390e:	2300      	movs	r3, #0
 8003910:	703b      	strb	r3, [r7, #0]
	Button_ini.count_max=2;
 8003912:	2302      	movs	r3, #2
 8003914:	717b      	strb	r3, [r7, #5]
	Button_ini.EXTI_PIN=GPIO_PIN_14;
 8003916:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800391a:	813b      	strh	r3, [r7, #8]
	Button_ini.PIN=GPIO_PIN_8;
 800391c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003920:	817b      	strh	r3, [r7, #10]
	Button_ini.GPIO=GPIOA;
 8003922:	4b3c      	ldr	r3, [pc, #240]	; (8003a14 <BUTTON_INI+0x10c>)
 8003924:	60fb      	str	r3, [r7, #12]
	Button_ini.MODE=Button_Mode_Regular_With_EXTI;
 8003926:	2300      	movs	r3, #0
 8003928:	743b      	strb	r3, [r7, #16]
	Button_Vector_Create(&Button_Vector,&Button_ini);
 800392a:	463b      	mov	r3, r7
 800392c:	4619      	mov	r1, r3
 800392e:	483a      	ldr	r0, [pc, #232]	; (8003a18 <BUTTON_INI+0x110>)
 8003930:	f7fd f92c 	bl	8000b8c <Button_Vector_Create>

	Button_ini.ID=Button_ID_E2B2;
 8003934:	2301      	movs	r3, #1
 8003936:	703b      	strb	r3, [r7, #0]
	Button_ini.count_max=2;
 8003938:	2302      	movs	r3, #2
 800393a:	717b      	strb	r3, [r7, #5]
	Button_ini.EXTI_PIN=GPIO_PIN_14;
 800393c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003940:	813b      	strh	r3, [r7, #8]
	Button_ini.PIN=GPIO_PIN_9;
 8003942:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003946:	817b      	strh	r3, [r7, #10]
	Button_ini.GPIO=GPIOA;
 8003948:	4b32      	ldr	r3, [pc, #200]	; (8003a14 <BUTTON_INI+0x10c>)
 800394a:	60fb      	str	r3, [r7, #12]
	Button_ini.MODE=Button_Mode_Regular_With_EXTI;
 800394c:	2300      	movs	r3, #0
 800394e:	743b      	strb	r3, [r7, #16]
	Button_Vector_Create(&Button_Vector,&Button_ini);
 8003950:	463b      	mov	r3, r7
 8003952:	4619      	mov	r1, r3
 8003954:	4830      	ldr	r0, [pc, #192]	; (8003a18 <BUTTON_INI+0x110>)
 8003956:	f7fd f919 	bl	8000b8c <Button_Vector_Create>

	Button_ini.ID=Button_ID_E2B3;
 800395a:	2302      	movs	r3, #2
 800395c:	703b      	strb	r3, [r7, #0]
	Button_ini.count_max=2;
 800395e:	2302      	movs	r3, #2
 8003960:	717b      	strb	r3, [r7, #5]
	Button_ini.EXTI_PIN=GPIO_PIN_14;
 8003962:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003966:	813b      	strh	r3, [r7, #8]
	Button_ini.PIN=GPIO_PIN_10;
 8003968:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800396c:	817b      	strh	r3, [r7, #10]
	Button_ini.GPIO=GPIOA;
 800396e:	4b29      	ldr	r3, [pc, #164]	; (8003a14 <BUTTON_INI+0x10c>)
 8003970:	60fb      	str	r3, [r7, #12]
	Button_ini.MODE=Button_Mode_Regular_With_EXTI;
 8003972:	2300      	movs	r3, #0
 8003974:	743b      	strb	r3, [r7, #16]
	Button_Vector_Create(&Button_Vector,&Button_ini);
 8003976:	463b      	mov	r3, r7
 8003978:	4619      	mov	r1, r3
 800397a:	4827      	ldr	r0, [pc, #156]	; (8003a18 <BUTTON_INI+0x110>)
 800397c:	f7fd f906 	bl	8000b8c <Button_Vector_Create>

	Button_ini.ID=Button_ID_E1B1;
 8003980:	2303      	movs	r3, #3
 8003982:	703b      	strb	r3, [r7, #0]
	Button_ini.count_max=2;
 8003984:	2302      	movs	r3, #2
 8003986:	717b      	strb	r3, [r7, #5]
	Button_ini.EXTI_PIN=GPIO_PIN_3;
 8003988:	2308      	movs	r3, #8
 800398a:	813b      	strh	r3, [r7, #8]
	Button_ini.PIN=GPIO_PIN_4;
 800398c:	2310      	movs	r3, #16
 800398e:	817b      	strh	r3, [r7, #10]
	Button_ini.GPIO=GPIOB;
 8003990:	4b22      	ldr	r3, [pc, #136]	; (8003a1c <BUTTON_INI+0x114>)
 8003992:	60fb      	str	r3, [r7, #12]
	Button_ini.MODE=Button_Mode_Regular_With_EXTI;
 8003994:	2300      	movs	r3, #0
 8003996:	743b      	strb	r3, [r7, #16]
	Button_Vector_Create(&Button_Vector,&Button_ini);
 8003998:	463b      	mov	r3, r7
 800399a:	4619      	mov	r1, r3
 800399c:	481e      	ldr	r0, [pc, #120]	; (8003a18 <BUTTON_INI+0x110>)
 800399e:	f7fd f8f5 	bl	8000b8c <Button_Vector_Create>

	Button_ini.ID=Button_ID_E1B2;
 80039a2:	2304      	movs	r3, #4
 80039a4:	703b      	strb	r3, [r7, #0]
	Button_ini.count_max=2;
 80039a6:	2302      	movs	r3, #2
 80039a8:	717b      	strb	r3, [r7, #5]
	Button_ini.EXTI_PIN=GPIO_PIN_3;
 80039aa:	2308      	movs	r3, #8
 80039ac:	813b      	strh	r3, [r7, #8]
	Button_ini.PIN=GPIO_PIN_5;
 80039ae:	2320      	movs	r3, #32
 80039b0:	817b      	strh	r3, [r7, #10]
	Button_ini.GPIO=GPIOB;
 80039b2:	4b1a      	ldr	r3, [pc, #104]	; (8003a1c <BUTTON_INI+0x114>)
 80039b4:	60fb      	str	r3, [r7, #12]
	Button_ini.MODE=Button_Mode_Regular_With_EXTI;
 80039b6:	2300      	movs	r3, #0
 80039b8:	743b      	strb	r3, [r7, #16]
	Button_Vector_Create(&Button_Vector,&Button_ini);
 80039ba:	463b      	mov	r3, r7
 80039bc:	4619      	mov	r1, r3
 80039be:	4816      	ldr	r0, [pc, #88]	; (8003a18 <BUTTON_INI+0x110>)
 80039c0:	f7fd f8e4 	bl	8000b8c <Button_Vector_Create>

	Button_ini.ID=Button_ID_E1B3;
 80039c4:	2305      	movs	r3, #5
 80039c6:	703b      	strb	r3, [r7, #0]
	Button_ini.count_max=2;
 80039c8:	2302      	movs	r3, #2
 80039ca:	717b      	strb	r3, [r7, #5]
	Button_ini.EXTI_PIN=GPIO_PIN_3;
 80039cc:	2308      	movs	r3, #8
 80039ce:	813b      	strh	r3, [r7, #8]
	Button_ini.PIN=GPIO_PIN_8;
 80039d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039d4:	817b      	strh	r3, [r7, #10]
	Button_ini.GPIO=GPIOB;
 80039d6:	4b11      	ldr	r3, [pc, #68]	; (8003a1c <BUTTON_INI+0x114>)
 80039d8:	60fb      	str	r3, [r7, #12]
	Button_ini.MODE=Button_Mode_Regular_With_EXTI;
 80039da:	2300      	movs	r3, #0
 80039dc:	743b      	strb	r3, [r7, #16]
	Button_Vector_Create(&Button_Vector,&Button_ini);
 80039de:	463b      	mov	r3, r7
 80039e0:	4619      	mov	r1, r3
 80039e2:	480d      	ldr	r0, [pc, #52]	; (8003a18 <BUTTON_INI+0x110>)
 80039e4:	f7fd f8d2 	bl	8000b8c <Button_Vector_Create>

	Button_ini.ID=Button_Gerkon_ID;
 80039e8:	2306      	movs	r3, #6
 80039ea:	703b      	strb	r3, [r7, #0]
	Button_ini.count_max=2;
 80039ec:	2302      	movs	r3, #2
 80039ee:	717b      	strb	r3, [r7, #5]
	Button_ini.EXTI_PIN=GPIO_PIN_2;
 80039f0:	2304      	movs	r3, #4
 80039f2:	813b      	strh	r3, [r7, #8]
	Button_ini.PIN=GPIO_PIN_2;
 80039f4:	2304      	movs	r3, #4
 80039f6:	817b      	strh	r3, [r7, #10]
	Button_ini.GPIO=GPIOA;
 80039f8:	4b06      	ldr	r3, [pc, #24]	; (8003a14 <BUTTON_INI+0x10c>)
 80039fa:	60fb      	str	r3, [r7, #12]
	Button_ini.MODE=Button_Mode_Regular_With_EXTI;
 80039fc:	2300      	movs	r3, #0
 80039fe:	743b      	strb	r3, [r7, #16]
	Button_Vector_Create(&Button_Vector,&Button_ini);
 8003a00:	463b      	mov	r3, r7
 8003a02:	4619      	mov	r1, r3
 8003a04:	4804      	ldr	r0, [pc, #16]	; (8003a18 <BUTTON_INI+0x110>)
 8003a06:	f7fd f8c1 	bl	8000b8c <Button_Vector_Create>


}
 8003a0a:	bf00      	nop
 8003a0c:	3718      	adds	r7, #24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	40010800 	.word	0x40010800
 8003a18:	200007d8 	.word	0x200007d8
 8003a1c:	40010c00 	.word	0x40010c00

08003a20 <INCODER_INI>:
//---------------------------------------------------------------------------------
void INCODER_INI(void){
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
	Incoder_P2.ID=Incoder_ID_P2;
 8003a24:	4b2d      	ldr	r3, [pc, #180]	; (8003adc <INCODER_INI+0xbc>)
 8003a26:	2201      	movs	r2, #1
 8003a28:	701a      	strb	r2, [r3, #0]
	Incoder_P2.Button.count_max=2;
 8003a2a:	4b2c      	ldr	r3, [pc, #176]	; (8003adc <INCODER_INI+0xbc>)
 8003a2c:	2202      	movs	r2, #2
 8003a2e:	725a      	strb	r2, [r3, #9]
	Incoder_P2.Button.EXTI_PIN=GPIO_PIN_14;
 8003a30:	4b2a      	ldr	r3, [pc, #168]	; (8003adc <INCODER_INI+0xbc>)
 8003a32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003a36:	819a      	strh	r2, [r3, #12]
	Incoder_P2.Button.PIN=GPIO_PIN_15;
 8003a38:	4b28      	ldr	r3, [pc, #160]	; (8003adc <INCODER_INI+0xbc>)
 8003a3a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003a3e:	81da      	strh	r2, [r3, #14]
	Incoder_P2.Button.GPIO=GPIOB;
 8003a40:	4b26      	ldr	r3, [pc, #152]	; (8003adc <INCODER_INI+0xbc>)
 8003a42:	4a27      	ldr	r2, [pc, #156]	; (8003ae0 <INCODER_INI+0xc0>)
 8003a44:	611a      	str	r2, [r3, #16]
	Incoder_P2.Button.Presed_counter_max=3;
 8003a46:	4b25      	ldr	r3, [pc, #148]	; (8003adc <INCODER_INI+0xbc>)
 8003a48:	2203      	movs	r2, #3
 8003a4a:	71da      	strb	r2, [r3, #7]
	Incoder_P2.Button.MODE=Button_Mode_Incoder;
 8003a4c:	4b23      	ldr	r3, [pc, #140]	; (8003adc <INCODER_INI+0xbc>)
 8003a4e:	2202      	movs	r2, #2
 8003a50:	751a      	strb	r2, [r3, #20]

	Incoder_P2.Rotary_Switch.State=0;
 8003a52:	4a22      	ldr	r2, [pc, #136]	; (8003adc <INCODER_INI+0xbc>)
 8003a54:	7f53      	ldrb	r3, [r2, #29]
 8003a56:	f36f 0300 	bfc	r3, #0, #1
 8003a5a:	7753      	strb	r3, [r2, #29]
	Incoder_P2.Rotary_Switch.EXTI_PIN=GPIO_PIN_12;
 8003a5c:	4b1f      	ldr	r3, [pc, #124]	; (8003adc <INCODER_INI+0xbc>)
 8003a5e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a62:	841a      	strh	r2, [r3, #32]
	Incoder_P2.Rotary_Switch.PIN=GPIO_PIN_13;
 8003a64:	4b1d      	ldr	r3, [pc, #116]	; (8003adc <INCODER_INI+0xbc>)
 8003a66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a6a:	845a      	strh	r2, [r3, #34]	; 0x22
	Incoder_P2.Rotary_Switch.GPIO=GPIOB;
 8003a6c:	4b1b      	ldr	r3, [pc, #108]	; (8003adc <INCODER_INI+0xbc>)
 8003a6e:	4a1c      	ldr	r2, [pc, #112]	; (8003ae0 <INCODER_INI+0xc0>)
 8003a70:	625a      	str	r2, [r3, #36]	; 0x24
	Incoder_P2.Rotary_Switch.Rotary_Switch_Direcion=Reverse;
 8003a72:	4b1a      	ldr	r3, [pc, #104]	; (8003adc <INCODER_INI+0xbc>)
 8003a74:	2201      	movs	r2, #1
 8003a76:	779a      	strb	r2, [r3, #30]

	Incoder_ini(&Incoder_P2);
 8003a78:	4818      	ldr	r0, [pc, #96]	; (8003adc <INCODER_INI+0xbc>)
 8003a7a:	f7fd f92f 	bl	8000cdc <Incoder_ini>


	Incoder_P1.ID=Incoder_ID_P1;
 8003a7e:	4b19      	ldr	r3, [pc, #100]	; (8003ae4 <INCODER_INI+0xc4>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	701a      	strb	r2, [r3, #0]
	Incoder_P1.Button.count_max=2;
 8003a84:	4b17      	ldr	r3, [pc, #92]	; (8003ae4 <INCODER_INI+0xc4>)
 8003a86:	2202      	movs	r2, #2
 8003a88:	725a      	strb	r2, [r3, #9]
	Incoder_P1.Button.EXTI_PIN=GPIO_PIN_3;
 8003a8a:	4b16      	ldr	r3, [pc, #88]	; (8003ae4 <INCODER_INI+0xc4>)
 8003a8c:	2208      	movs	r2, #8
 8003a8e:	819a      	strh	r2, [r3, #12]
	Incoder_P1.Button.PIN=GPIO_PIN_12;
 8003a90:	4b14      	ldr	r3, [pc, #80]	; (8003ae4 <INCODER_INI+0xc4>)
 8003a92:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a96:	81da      	strh	r2, [r3, #14]
	Incoder_P1.Button.GPIO=GPIOA;
 8003a98:	4b12      	ldr	r3, [pc, #72]	; (8003ae4 <INCODER_INI+0xc4>)
 8003a9a:	4a13      	ldr	r2, [pc, #76]	; (8003ae8 <INCODER_INI+0xc8>)
 8003a9c:	611a      	str	r2, [r3, #16]
	Incoder_P1.Button.Presed_counter_max=3;
 8003a9e:	4b11      	ldr	r3, [pc, #68]	; (8003ae4 <INCODER_INI+0xc4>)
 8003aa0:	2203      	movs	r2, #3
 8003aa2:	71da      	strb	r2, [r3, #7]
	Incoder_P1.Button.MODE=Button_Mode_Incoder;
 8003aa4:	4b0f      	ldr	r3, [pc, #60]	; (8003ae4 <INCODER_INI+0xc4>)
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	751a      	strb	r2, [r3, #20]

	Incoder_P1.Rotary_Switch.State=0;
 8003aaa:	4a0e      	ldr	r2, [pc, #56]	; (8003ae4 <INCODER_INI+0xc4>)
 8003aac:	7f53      	ldrb	r3, [r2, #29]
 8003aae:	f36f 0300 	bfc	r3, #0, #1
 8003ab2:	7753      	strb	r3, [r2, #29]
	Incoder_P1.Rotary_Switch.EXTI_PIN=GPIO_PIN_15;
 8003ab4:	4b0b      	ldr	r3, [pc, #44]	; (8003ae4 <INCODER_INI+0xc4>)
 8003ab6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003aba:	841a      	strh	r2, [r3, #32]
	Incoder_P1.Rotary_Switch.PIN=GPIO_PIN_11;
 8003abc:	4b09      	ldr	r3, [pc, #36]	; (8003ae4 <INCODER_INI+0xc4>)
 8003abe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ac2:	845a      	strh	r2, [r3, #34]	; 0x22
	Incoder_P1.Rotary_Switch.GPIO=GPIOA;
 8003ac4:	4b07      	ldr	r3, [pc, #28]	; (8003ae4 <INCODER_INI+0xc4>)
 8003ac6:	4a08      	ldr	r2, [pc, #32]	; (8003ae8 <INCODER_INI+0xc8>)
 8003ac8:	625a      	str	r2, [r3, #36]	; 0x24
	Incoder_P1.Rotary_Switch.Rotary_Switch_Direcion=Direct;
 8003aca:	4b06      	ldr	r3, [pc, #24]	; (8003ae4 <INCODER_INI+0xc4>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	779a      	strb	r2, [r3, #30]

	Incoder_ini(&Incoder_P1);
 8003ad0:	4804      	ldr	r0, [pc, #16]	; (8003ae4 <INCODER_INI+0xc4>)
 8003ad2:	f7fd f903 	bl	8000cdc <Incoder_ini>

}
 8003ad6:	bf00      	nop
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	20000770 	.word	0x20000770
 8003ae0:	40010c00 	.word	0x40010c00
 8003ae4:	200007a4 	.word	0x200007a4
 8003ae8:	40010800 	.word	0x40010800

08003aec <MENU_INI>:
//----------------------------------------------------------------------------
void MENU_INI(void){
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0

	struct Menu_List_Element_Vector Menu_List_Element_Vector_ini;


	Menu_List_Element_Vector_ini.name="T_Corect_Manual";
 8003af2:	4b8b      	ldr	r3, [pc, #556]	; (8003d20 <MENU_INI+0x234>)
 8003af4:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Iron.Temperature_Corection.Manual;
 8003af6:	4b8b      	ldr	r3, [pc, #556]	; (8003d24 <MENU_INI+0x238>)
 8003af8:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=INT;
 8003afa:	2300      	movs	r3, #0
 8003afc:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 8003afe:	2301      	movs	r3, #1
 8003b00:	747b      	strb	r3, [r7, #17]
	Menu_List_Element_Create(&Soldering_Iron_Menu_Vector,&Menu_List_Element_Vector_ini);
 8003b02:	1d3b      	adds	r3, r7, #4
 8003b04:	4619      	mov	r1, r3
 8003b06:	4888      	ldr	r0, [pc, #544]	; (8003d28 <MENU_INI+0x23c>)
 8003b08:	f7fd ff20 	bl	800194c <Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="Preset1";
 8003b0c:	4b87      	ldr	r3, [pc, #540]	; (8003d2c <MENU_INI+0x240>)
 8003b0e:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Iron.Temperature_Pressets.Presset1;
 8003b10:	4b87      	ldr	r3, [pc, #540]	; (8003d30 <MENU_INI+0x244>)
 8003b12:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=UINT16;
 8003b14:	2302      	movs	r3, #2
 8003b16:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	747b      	strb	r3, [r7, #17]
	Menu_List_Element_Create(&Soldering_Iron_Menu_Vector,&Menu_List_Element_Vector_ini);
 8003b1c:	1d3b      	adds	r3, r7, #4
 8003b1e:	4619      	mov	r1, r3
 8003b20:	4881      	ldr	r0, [pc, #516]	; (8003d28 <MENU_INI+0x23c>)
 8003b22:	f7fd ff13 	bl	800194c <Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="T_Corect_Pres1";
 8003b26:	4b83      	ldr	r3, [pc, #524]	; (8003d34 <MENU_INI+0x248>)
 8003b28:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Iron.Temperature_Corection.Presset1;
 8003b2a:	4b83      	ldr	r3, [pc, #524]	; (8003d38 <MENU_INI+0x24c>)
 8003b2c:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=INT;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 8003b32:	2301      	movs	r3, #1
 8003b34:	747b      	strb	r3, [r7, #17]
	Menu_List_Element_Create(&Soldering_Iron_Menu_Vector,&Menu_List_Element_Vector_ini);
 8003b36:	1d3b      	adds	r3, r7, #4
 8003b38:	4619      	mov	r1, r3
 8003b3a:	487b      	ldr	r0, [pc, #492]	; (8003d28 <MENU_INI+0x23c>)
 8003b3c:	f7fd ff06 	bl	800194c <Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="Preset2";
 8003b40:	4b7e      	ldr	r3, [pc, #504]	; (8003d3c <MENU_INI+0x250>)
 8003b42:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Iron.Temperature_Pressets.Presset2;
 8003b44:	4b7e      	ldr	r3, [pc, #504]	; (8003d40 <MENU_INI+0x254>)
 8003b46:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=UINT16;
 8003b48:	2302      	movs	r3, #2
 8003b4a:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	747b      	strb	r3, [r7, #17]
	Menu_List_Element_Create(&Soldering_Iron_Menu_Vector,&Menu_List_Element_Vector_ini);
 8003b50:	1d3b      	adds	r3, r7, #4
 8003b52:	4619      	mov	r1, r3
 8003b54:	4874      	ldr	r0, [pc, #464]	; (8003d28 <MENU_INI+0x23c>)
 8003b56:	f7fd fef9 	bl	800194c <Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="T_Corect_Pres2";
 8003b5a:	4b7a      	ldr	r3, [pc, #488]	; (8003d44 <MENU_INI+0x258>)
 8003b5c:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Iron.Temperature_Corection.Presset2;
 8003b5e:	4b7a      	ldr	r3, [pc, #488]	; (8003d48 <MENU_INI+0x25c>)
 8003b60:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=INT;
 8003b62:	2300      	movs	r3, #0
 8003b64:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 8003b66:	2301      	movs	r3, #1
 8003b68:	747b      	strb	r3, [r7, #17]
	Menu_List_Element_Create(&Soldering_Iron_Menu_Vector,&Menu_List_Element_Vector_ini);
 8003b6a:	1d3b      	adds	r3, r7, #4
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	486e      	ldr	r0, [pc, #440]	; (8003d28 <MENU_INI+0x23c>)
 8003b70:	f7fd feec 	bl	800194c <Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="Sleep_mode_T";
 8003b74:	4b75      	ldr	r3, [pc, #468]	; (8003d4c <MENU_INI+0x260>)
 8003b76:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Iron.Temperature_Pressets.Sleep;
 8003b78:	4b75      	ldr	r3, [pc, #468]	; (8003d50 <MENU_INI+0x264>)
 8003b7a:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=UINT16;
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 8003b80:	2301      	movs	r3, #1
 8003b82:	747b      	strb	r3, [r7, #17]
	Menu_List_Element_Create(&Soldering_Iron_Menu_Vector,&Menu_List_Element_Vector_ini);
 8003b84:	1d3b      	adds	r3, r7, #4
 8003b86:	4619      	mov	r1, r3
 8003b88:	4867      	ldr	r0, [pc, #412]	; (8003d28 <MENU_INI+0x23c>)
 8003b8a:	f7fd fedf 	bl	800194c <Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="Sleep_timer";
 8003b8e:	4b71      	ldr	r3, [pc, #452]	; (8003d54 <MENU_INI+0x268>)
 8003b90:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Iron.Sleep_time;
 8003b92:	4b71      	ldr	r3, [pc, #452]	; (8003d58 <MENU_INI+0x26c>)
 8003b94:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=UINT8;
 8003b96:	2301      	movs	r3, #1
 8003b98:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	747b      	strb	r3, [r7, #17]
	Menu_List_Element_Create(&Soldering_Iron_Menu_Vector,&Menu_List_Element_Vector_ini);
 8003b9e:	1d3b      	adds	r3, r7, #4
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	4861      	ldr	r0, [pc, #388]	; (8003d28 <MENU_INI+0x23c>)
 8003ba4:	f7fd fed2 	bl	800194c <Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="Disable_timer";
 8003ba8:	4b6c      	ldr	r3, [pc, #432]	; (8003d5c <MENU_INI+0x270>)
 8003baa:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Iron.Disable_time;
 8003bac:	4b6c      	ldr	r3, [pc, #432]	; (8003d60 <MENU_INI+0x274>)
 8003bae:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=UINT16;
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	747b      	strb	r3, [r7, #17]
	Menu_List_Element_Create(&Soldering_Iron_Menu_Vector,&Menu_List_Element_Vector_ini);
 8003bb8:	1d3b      	adds	r3, r7, #4
 8003bba:	4619      	mov	r1, r3
 8003bbc:	485a      	ldr	r0, [pc, #360]	; (8003d28 <MENU_INI+0x23c>)
 8003bbe:	f7fd fec5 	bl	800194c <Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="Add_Temperature";
 8003bc2:	4b68      	ldr	r3, [pc, #416]	; (8003d64 <MENU_INI+0x278>)
 8003bc4:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Iron.Add_Temperature;
 8003bc6:	4b68      	ldr	r3, [pc, #416]	; (8003d68 <MENU_INI+0x27c>)
 8003bc8:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=UINT16;
 8003bca:	2302      	movs	r3, #2
 8003bcc:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	747b      	strb	r3, [r7, #17]
	Menu_List_Element_Create(&Soldering_Iron_Menu_Vector,&Menu_List_Element_Vector_ini);
 8003bd2:	1d3b      	adds	r3, r7, #4
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	4854      	ldr	r0, [pc, #336]	; (8003d28 <MENU_INI+0x23c>)
 8003bd8:	f7fd feb8 	bl	800194c <Menu_List_Element_Create>


	Menu_List_Element_Vector_ini.name="State";
 8003bdc:	4b63      	ldr	r3, [pc, #396]	; (8003d6c <MENU_INI+0x280>)
 8003bde:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Iron.State;
 8003be0:	4b63      	ldr	r3, [pc, #396]	; (8003d70 <MENU_INI+0x284>)
 8003be2:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=BOOL;
 8003be4:	2303      	movs	r3, #3
 8003be6:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 8003be8:	2301      	movs	r3, #1
 8003bea:	747b      	strb	r3, [r7, #17]
	Menu_List_Element_Create(&Soldering_Iron_Menu_Vector,&Menu_List_Element_Vector_ini);
 8003bec:	1d3b      	adds	r3, r7, #4
 8003bee:	4619      	mov	r1, r3
 8003bf0:	484d      	ldr	r0, [pc, #308]	; (8003d28 <MENU_INI+0x23c>)
 8003bf2:	f7fd feab 	bl	800194c <Menu_List_Element_Create>


	Menu_List_Create(&Menu_List_Vector,&Soldering_Iron_Menu_Vector, "Soldering_Iron");
 8003bf6:	4a5f      	ldr	r2, [pc, #380]	; (8003d74 <MENU_INI+0x288>)
 8003bf8:	494b      	ldr	r1, [pc, #300]	; (8003d28 <MENU_INI+0x23c>)
 8003bfa:	485f      	ldr	r0, [pc, #380]	; (8003d78 <MENU_INI+0x28c>)
 8003bfc:	f7fe f918 	bl	8001e30 <Menu_List_Create>


	Menu_List_Element_Vector_ini.name="T_Corect_Manual";
 8003c00:	4b47      	ldr	r3, [pc, #284]	; (8003d20 <MENU_INI+0x234>)
 8003c02:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Heat_Gun.Temperature_Corection.Manual;
 8003c04:	4b5d      	ldr	r3, [pc, #372]	; (8003d7c <MENU_INI+0x290>)
 8003c06:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=INT;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	747b      	strb	r3, [r7, #17]
	Menu_List_Element_Create(&Soldering_Heat_Gun_Menu_Vector,&Menu_List_Element_Vector_ini);
 8003c10:	1d3b      	adds	r3, r7, #4
 8003c12:	4619      	mov	r1, r3
 8003c14:	485a      	ldr	r0, [pc, #360]	; (8003d80 <MENU_INI+0x294>)
 8003c16:	f7fd fe99 	bl	800194c <Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="Preset1";
 8003c1a:	4b44      	ldr	r3, [pc, #272]	; (8003d2c <MENU_INI+0x240>)
 8003c1c:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Heat_Gun.Temperature_Pressets.Presset1;
 8003c1e:	4b59      	ldr	r3, [pc, #356]	; (8003d84 <MENU_INI+0x298>)
 8003c20:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=UINT16;
 8003c22:	2302      	movs	r3, #2
 8003c24:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 8003c26:	2301      	movs	r3, #1
 8003c28:	747b      	strb	r3, [r7, #17]
	Menu_List_Element_Create(&Soldering_Heat_Gun_Menu_Vector,&Menu_List_Element_Vector_ini);
 8003c2a:	1d3b      	adds	r3, r7, #4
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	4854      	ldr	r0, [pc, #336]	; (8003d80 <MENU_INI+0x294>)
 8003c30:	f7fd fe8c 	bl	800194c <Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="T_Corect_Pres1";
 8003c34:	4b3f      	ldr	r3, [pc, #252]	; (8003d34 <MENU_INI+0x248>)
 8003c36:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Heat_Gun.Temperature_Corection.Presset1;
 8003c38:	4b53      	ldr	r3, [pc, #332]	; (8003d88 <MENU_INI+0x29c>)
 8003c3a:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=INT;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 8003c40:	2301      	movs	r3, #1
 8003c42:	747b      	strb	r3, [r7, #17]
	Menu_List_Element_Create(&Soldering_Heat_Gun_Menu_Vector,&Menu_List_Element_Vector_ini);
 8003c44:	1d3b      	adds	r3, r7, #4
 8003c46:	4619      	mov	r1, r3
 8003c48:	484d      	ldr	r0, [pc, #308]	; (8003d80 <MENU_INI+0x294>)
 8003c4a:	f7fd fe7f 	bl	800194c <Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="Preset2";
 8003c4e:	4b3b      	ldr	r3, [pc, #236]	; (8003d3c <MENU_INI+0x250>)
 8003c50:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Heat_Gun.Temperature_Pressets.Presset2;
 8003c52:	4b4e      	ldr	r3, [pc, #312]	; (8003d8c <MENU_INI+0x2a0>)
 8003c54:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=UINT16;
 8003c56:	2302      	movs	r3, #2
 8003c58:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	747b      	strb	r3, [r7, #17]
	Menu_List_Element_Create(&Soldering_Heat_Gun_Menu_Vector,&Menu_List_Element_Vector_ini);
 8003c5e:	1d3b      	adds	r3, r7, #4
 8003c60:	4619      	mov	r1, r3
 8003c62:	4847      	ldr	r0, [pc, #284]	; (8003d80 <MENU_INI+0x294>)
 8003c64:	f7fd fe72 	bl	800194c <Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="T_Corect_Pres2";
 8003c68:	4b36      	ldr	r3, [pc, #216]	; (8003d44 <MENU_INI+0x258>)
 8003c6a:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Heat_Gun.Temperature_Corection.Presset2;
 8003c6c:	4b48      	ldr	r3, [pc, #288]	; (8003d90 <MENU_INI+0x2a4>)
 8003c6e:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=INT;
 8003c70:	2300      	movs	r3, #0
 8003c72:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 8003c74:	2301      	movs	r3, #1
 8003c76:	747b      	strb	r3, [r7, #17]
	Menu_List_Element_Create(&Soldering_Heat_Gun_Menu_Vector,&Menu_List_Element_Vector_ini);
 8003c78:	1d3b      	adds	r3, r7, #4
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	4840      	ldr	r0, [pc, #256]	; (8003d80 <MENU_INI+0x294>)
 8003c7e:	f7fd fe65 	bl	800194c <Menu_List_Element_Create>




	Menu_List_Create(&Menu_List_Vector,&Soldering_Heat_Gun_Menu_Vector, "Heat_Gun");
 8003c82:	4a44      	ldr	r2, [pc, #272]	; (8003d94 <MENU_INI+0x2a8>)
 8003c84:	493e      	ldr	r1, [pc, #248]	; (8003d80 <MENU_INI+0x294>)
 8003c86:	483c      	ldr	r0, [pc, #240]	; (8003d78 <MENU_INI+0x28c>)
 8003c88:	f7fe f8d2 	bl	8001e30 <Menu_List_Create>



	Menu_List_Element_Vector_ini.name="T_Corect_Manual";
 8003c8c:	4b24      	ldr	r3, [pc, #144]	; (8003d20 <MENU_INI+0x234>)
 8003c8e:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Separator.Temperature_Corection.Manual;
 8003c90:	4b41      	ldr	r3, [pc, #260]	; (8003d98 <MENU_INI+0x2ac>)
 8003c92:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=INT;
 8003c94:	2300      	movs	r3, #0
 8003c96:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	747b      	strb	r3, [r7, #17]
	Menu_List_Element_Create(&Soldering_Separator_Menu_Vector, &Menu_List_Element_Vector_ini);
 8003c9c:	1d3b      	adds	r3, r7, #4
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	483e      	ldr	r0, [pc, #248]	; (8003d9c <MENU_INI+0x2b0>)
 8003ca2:	f7fd fe53 	bl	800194c <Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="Preset1";
 8003ca6:	4b21      	ldr	r3, [pc, #132]	; (8003d2c <MENU_INI+0x240>)
 8003ca8:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Separator.Temperature_Pressets.Presset1;
 8003caa:	4b3d      	ldr	r3, [pc, #244]	; (8003da0 <MENU_INI+0x2b4>)
 8003cac:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=UINT16;
 8003cae:	2302      	movs	r3, #2
 8003cb0:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	747b      	strb	r3, [r7, #17]
	Menu_List_Element_Create(&Soldering_Separator_Menu_Vector, &Menu_List_Element_Vector_ini);
 8003cb6:	1d3b      	adds	r3, r7, #4
 8003cb8:	4619      	mov	r1, r3
 8003cba:	4838      	ldr	r0, [pc, #224]	; (8003d9c <MENU_INI+0x2b0>)
 8003cbc:	f7fd fe46 	bl	800194c <Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="T_Corect_Pres1";
 8003cc0:	4b1c      	ldr	r3, [pc, #112]	; (8003d34 <MENU_INI+0x248>)
 8003cc2:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Separator.Temperature_Corection.Presset1;
 8003cc4:	4b37      	ldr	r3, [pc, #220]	; (8003da4 <MENU_INI+0x2b8>)
 8003cc6:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=INT;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	747b      	strb	r3, [r7, #17]
	Menu_List_Element_Create(&Soldering_Separator_Menu_Vector, &Menu_List_Element_Vector_ini);
 8003cd0:	1d3b      	adds	r3, r7, #4
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	4831      	ldr	r0, [pc, #196]	; (8003d9c <MENU_INI+0x2b0>)
 8003cd6:	f7fd fe39 	bl	800194c <Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="Preset2";
 8003cda:	4b18      	ldr	r3, [pc, #96]	; (8003d3c <MENU_INI+0x250>)
 8003cdc:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Separator.Temperature_Pressets.Presset2;
 8003cde:	4b32      	ldr	r3, [pc, #200]	; (8003da8 <MENU_INI+0x2bc>)
 8003ce0:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=UINT16;
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	747b      	strb	r3, [r7, #17]
	Menu_List_Element_Create(&Soldering_Separator_Menu_Vector,&Menu_List_Element_Vector_ini);
 8003cea:	1d3b      	adds	r3, r7, #4
 8003cec:	4619      	mov	r1, r3
 8003cee:	482b      	ldr	r0, [pc, #172]	; (8003d9c <MENU_INI+0x2b0>)
 8003cf0:	f7fd fe2c 	bl	800194c <Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="T_Corect_Pres2";
 8003cf4:	4b13      	ldr	r3, [pc, #76]	; (8003d44 <MENU_INI+0x258>)
 8003cf6:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Separator.Temperature_Corection.Presset2;
 8003cf8:	4b2c      	ldr	r3, [pc, #176]	; (8003dac <MENU_INI+0x2c0>)
 8003cfa:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=INT;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 8003d00:	2301      	movs	r3, #1
 8003d02:	747b      	strb	r3, [r7, #17]
	Menu_List_Element_Create(&Soldering_Separator_Menu_Vector, &Menu_List_Element_Vector_ini);
 8003d04:	1d3b      	adds	r3, r7, #4
 8003d06:	4619      	mov	r1, r3
 8003d08:	4824      	ldr	r0, [pc, #144]	; (8003d9c <MENU_INI+0x2b0>)
 8003d0a:	f7fd fe1f 	bl	800194c <Menu_List_Element_Create>


	Menu_List_Create(&Menu_List_Vector,&Soldering_Separator_Menu_Vector, "Separator");
 8003d0e:	4a28      	ldr	r2, [pc, #160]	; (8003db0 <MENU_INI+0x2c4>)
 8003d10:	4922      	ldr	r1, [pc, #136]	; (8003d9c <MENU_INI+0x2b0>)
 8003d12:	4819      	ldr	r0, [pc, #100]	; (8003d78 <MENU_INI+0x28c>)
 8003d14:	f7fe f88c 	bl	8001e30 <Menu_List_Create>

}
 8003d18:	bf00      	nop
 8003d1a:	3718      	adds	r7, #24
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	08008f90 	.word	0x08008f90
 8003d24:	2000087c 	.word	0x2000087c
 8003d28:	200007e0 	.word	0x200007e0
 8003d2c:	08008fa0 	.word	0x08008fa0
 8003d30:	20000874 	.word	0x20000874
 8003d34:	08008fa8 	.word	0x08008fa8
 8003d38:	20000880 	.word	0x20000880
 8003d3c:	08008fb8 	.word	0x08008fb8
 8003d40:	20000876 	.word	0x20000876
 8003d44:	08008fc0 	.word	0x08008fc0
 8003d48:	20000884 	.word	0x20000884
 8003d4c:	08008fd0 	.word	0x08008fd0
 8003d50:	20000878 	.word	0x20000878
 8003d54:	08008fe0 	.word	0x08008fe0
 8003d58:	200008ba 	.word	0x200008ba
 8003d5c:	08008fec 	.word	0x08008fec
 8003d60:	200008bc 	.word	0x200008bc
 8003d64:	08008ffc 	.word	0x08008ffc
 8003d68:	200008ac 	.word	0x200008ac
 8003d6c:	0800900c 	.word	0x0800900c
 8003d70:	200008be 	.word	0x200008be
 8003d74:	08009014 	.word	0x08009014
 8003d78:	2000081c 	.word	0x2000081c
 8003d7c:	20000918 	.word	0x20000918
 8003d80:	200007f4 	.word	0x200007f4
 8003d84:	20000910 	.word	0x20000910
 8003d88:	2000091c 	.word	0x2000091c
 8003d8c:	20000912 	.word	0x20000912
 8003d90:	20000920 	.word	0x20000920
 8003d94:	08009024 	.word	0x08009024
 8003d98:	200009a4 	.word	0x200009a4
 8003d9c:	20000808 	.word	0x20000808
 8003da0:	2000099c 	.word	0x2000099c
 8003da4:	200009a8 	.word	0x200009a8
 8003da8:	2000099e 	.word	0x2000099e
 8003dac:	200009ac 	.word	0x200009ac
 8003db0:	08009030 	.word	0x08009030

08003db4 <OLED_INI>:
//----------------------------------------------------------------------------
void OLED_INI(void){
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0
	  OLED1.hi2c=&hi2c1;
 8003db8:	4b05      	ldr	r3, [pc, #20]	; (8003dd0 <OLED_INI+0x1c>)
 8003dba:	4a06      	ldr	r2, [pc, #24]	; (8003dd4 <OLED_INI+0x20>)
 8003dbc:	601a      	str	r2, [r3, #0]
	  OLED_Search_Adress(&OLED1);
 8003dbe:	4804      	ldr	r0, [pc, #16]	; (8003dd0 <OLED_INI+0x1c>)
 8003dc0:	f7fe fb3a 	bl	8002438 <OLED_Search_Adress>
	  OLED_ini(&OLED1);
 8003dc4:	4802      	ldr	r0, [pc, #8]	; (8003dd0 <OLED_INI+0x1c>)
 8003dc6:	f7fe fb59 	bl	800247c <OLED_ini>
}
 8003dca:	bf00      	nop
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	20000768 	.word	0x20000768
 8003dd4:	200005f4 	.word	0x200005f4

08003dd8 <Soldering_Iron_INI>:
//----------------------------------------------------------------------------
void Soldering_Iron_INI(uint8_t Flash_Read_Status){
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	4603      	mov	r3, r0
 8003de0:	71fb      	strb	r3, [r7, #7]

	Soldering_Iron.PID.KP=5;
 8003de2:	4b40      	ldr	r3, [pc, #256]	; (8003ee4 <Soldering_Iron_INI+0x10c>)
 8003de4:	4a40      	ldr	r2, [pc, #256]	; (8003ee8 <Soldering_Iron_INI+0x110>)
 8003de6:	601a      	str	r2, [r3, #0]
	Soldering_Iron.PID.KI=0.05;//0.03
 8003de8:	4b3e      	ldr	r3, [pc, #248]	; (8003ee4 <Soldering_Iron_INI+0x10c>)
 8003dea:	4a40      	ldr	r2, [pc, #256]	; (8003eec <Soldering_Iron_INI+0x114>)
 8003dec:	605a      	str	r2, [r3, #4]
	Soldering_Iron.PID.KD=1;
 8003dee:	4b3d      	ldr	r3, [pc, #244]	; (8003ee4 <Soldering_Iron_INI+0x10c>)
 8003df0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003df4:	609a      	str	r2, [r3, #8]
	Soldering_Iron.PID.dt=0.1;
 8003df6:	4b3b      	ldr	r3, [pc, #236]	; (8003ee4 <Soldering_Iron_INI+0x10c>)
 8003df8:	4a3d      	ldr	r2, [pc, #244]	; (8003ef0 <Soldering_Iron_INI+0x118>)
 8003dfa:	60da      	str	r2, [r3, #12]
	Soldering_Iron.PID.MAX_Control=350;
 8003dfc:	4b39      	ldr	r3, [pc, #228]	; (8003ee4 <Soldering_Iron_INI+0x10c>)
 8003dfe:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8003e02:	821a      	strh	r2, [r3, #16]

	Soldering_Iron.Filter.Filter_Mode=Nine_Samples;
 8003e04:	4b37      	ldr	r3, [pc, #220]	; (8003ee4 <Soldering_Iron_INI+0x10c>)
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Soldering_Iron.Filter.k_min=0.01;
 8003e0c:	4b35      	ldr	r3, [pc, #212]	; (8003ee4 <Soldering_Iron_INI+0x10c>)
 8003e0e:	4a39      	ldr	r2, [pc, #228]	; (8003ef4 <Soldering_Iron_INI+0x11c>)
 8003e10:	629a      	str	r2, [r3, #40]	; 0x28
	Soldering_Iron.Filter.k_max=0.8;
 8003e12:	4b34      	ldr	r3, [pc, #208]	; (8003ee4 <Soldering_Iron_INI+0x10c>)
 8003e14:	4a38      	ldr	r2, [pc, #224]	; (8003ef8 <Soldering_Iron_INI+0x120>)
 8003e16:	62da      	str	r2, [r3, #44]	; 0x2c
	Soldering_Iron.Filter.Val_Delata=30;
 8003e18:	4b32      	ldr	r3, [pc, #200]	; (8003ee4 <Soldering_Iron_INI+0x10c>)
 8003e1a:	4a38      	ldr	r2, [pc, #224]	; (8003efc <Soldering_Iron_INI+0x124>)
 8003e1c:	635a      	str	r2, [r3, #52]	; 0x34
	Soldering_Iron.Filter.mass=&ADC_Data[4];
 8003e1e:	4b31      	ldr	r3, [pc, #196]	; (8003ee4 <Soldering_Iron_INI+0x10c>)
 8003e20:	4a37      	ldr	r2, [pc, #220]	; (8003f00 <Soldering_Iron_INI+0x128>)
 8003e22:	641a      	str	r2, [r3, #64]	; 0x40

	Soldering_Iron.PWM_htim=&htim2;
 8003e24:	4b2f      	ldr	r3, [pc, #188]	; (8003ee4 <Soldering_Iron_INI+0x10c>)
 8003e26:	4a37      	ldr	r2, [pc, #220]	; (8003f04 <Soldering_Iron_INI+0x12c>)
 8003e28:	67da      	str	r2, [r3, #124]	; 0x7c

	Soldering_Iron.Full_Power_Button.ID=Full_Power_Button_ID;
 8003e2a:	4b2e      	ldr	r3, [pc, #184]	; (8003ee4 <Soldering_Iron_INI+0x10c>)
 8003e2c:	2207      	movs	r2, #7
 8003e2e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	Soldering_Iron.Full_Power_Button.count_max=2;
 8003e32:	4b2c      	ldr	r3, [pc, #176]	; (8003ee4 <Soldering_Iron_INI+0x10c>)
 8003e34:	2202      	movs	r2, #2
 8003e36:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	Soldering_Iron.Full_Power_Button.EXTI_PIN=GPIO_PIN_4;
 8003e3a:	4b2a      	ldr	r3, [pc, #168]	; (8003ee4 <Soldering_Iron_INI+0x10c>)
 8003e3c:	2210      	movs	r2, #16
 8003e3e:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	Soldering_Iron.Full_Power_Button.PIN=GPIO_PIN_4;
 8003e42:	4b28      	ldr	r3, [pc, #160]	; (8003ee4 <Soldering_Iron_INI+0x10c>)
 8003e44:	2210      	movs	r2, #16
 8003e46:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	Soldering_Iron.Full_Power_Button.GPIO=GPIOA;
 8003e4a:	4b26      	ldr	r3, [pc, #152]	; (8003ee4 <Soldering_Iron_INI+0x10c>)
 8003e4c:	4a2e      	ldr	r2, [pc, #184]	; (8003f08 <Soldering_Iron_INI+0x130>)
 8003e4e:	671a      	str	r2, [r3, #112]	; 0x70
	Soldering_Iron.Full_Power_Button.MODE=Button_Mode_Regular_Without_EXTI;
 8003e50:	4b24      	ldr	r3, [pc, #144]	; (8003ee4 <Soldering_Iron_INI+0x10c>)
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

	Soldering_Iron.VS.EXTI_PIN=GPIO_PIN_5;
 8003e58:	4b22      	ldr	r3, [pc, #136]	; (8003ee4 <Soldering_Iron_INI+0x10c>)
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	Soldering_Iron.VS.GPIO=GPIOA;
 8003e60:	4b20      	ldr	r3, [pc, #128]	; (8003ee4 <Soldering_Iron_INI+0x10c>)
 8003e62:	4a29      	ldr	r2, [pc, #164]	; (8003f08 <Soldering_Iron_INI+0x130>)
 8003e64:	65da      	str	r2, [r3, #92]	; 0x5c
	Soldering_Iron.VS.State=3;
 8003e66:	4b1f      	ldr	r3, [pc, #124]	; (8003ee4 <Soldering_Iron_INI+0x10c>)
 8003e68:	2203      	movs	r2, #3
 8003e6a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	Soldering_Iron.VS.Prew_State=4;
 8003e6e:	4b1d      	ldr	r3, [pc, #116]	; (8003ee4 <Soldering_Iron_INI+0x10c>)
 8003e70:	2204      	movs	r2, #4
 8003e72:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63

	Soldering_Iron.MODE=MANUAL;
 8003e76:	4b1b      	ldr	r3, [pc, #108]	; (8003ee4 <Soldering_Iron_INI+0x10c>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

	if(Flash_Read_Status!=HAL_OK){
 8003e7e:	79fb      	ldrb	r3, [r7, #7]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d025      	beq.n	8003ed0 <Soldering_Iron_INI+0xf8>
		Soldering_Iron.Temperature_Pressets.Manual=1200;
 8003e84:	4b17      	ldr	r3, [pc, #92]	; (8003ee4 <Soldering_Iron_INI+0x10c>)
 8003e86:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8003e8a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		Soldering_Iron. Temperature_Pressets.Presset1=1000;
 8003e8e:	4b15      	ldr	r3, [pc, #84]	; (8003ee4 <Soldering_Iron_INI+0x10c>)
 8003e90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e94:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		Soldering_Iron. Temperature_Pressets.Presset2=1500;
 8003e98:	4b12      	ldr	r3, [pc, #72]	; (8003ee4 <Soldering_Iron_INI+0x10c>)
 8003e9a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003e9e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

		Soldering_Iron.Add_Temperature=1000;
 8003ea2:	4b10      	ldr	r3, [pc, #64]	; (8003ee4 <Soldering_Iron_INI+0x10c>)
 8003ea4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ea8:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

		Soldering_Iron.Temperature_Pressets.Sleep=800;
 8003eac:	4b0d      	ldr	r3, [pc, #52]	; (8003ee4 <Soldering_Iron_INI+0x10c>)
 8003eae:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003eb2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		Soldering_Iron.Sleep_time=200;
 8003eb6:	4b0b      	ldr	r3, [pc, #44]	; (8003ee4 <Soldering_Iron_INI+0x10c>)
 8003eb8:	22c8      	movs	r2, #200	; 0xc8
 8003eba:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
		Soldering_Iron.Disable_time=400;
 8003ebe:	4b09      	ldr	r3, [pc, #36]	; (8003ee4 <Soldering_Iron_INI+0x10c>)
 8003ec0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003ec4:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90

		Soldering_Iron.Flash_Key=0x0801F802;
 8003ec8:	4b06      	ldr	r3, [pc, #24]	; (8003ee4 <Soldering_Iron_INI+0x10c>)
 8003eca:	4a10      	ldr	r2, [pc, #64]	; (8003f0c <Soldering_Iron_INI+0x134>)
 8003ecc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	}
	Solder_Iron_Flash_Read_Manual_Temperature(&Soldering_Iron);
 8003ed0:	4804      	ldr	r0, [pc, #16]	; (8003ee4 <Soldering_Iron_INI+0x10c>)
 8003ed2:	f7ff f8ff 	bl	80030d4 <Solder_Iron_Flash_Read_Manual_Temperature>
	Solder_Iron_ini(&Soldering_Iron);
 8003ed6:	4803      	ldr	r0, [pc, #12]	; (8003ee4 <Soldering_Iron_INI+0x10c>)
 8003ed8:	f7ff f80c 	bl	8002ef4 <Solder_Iron_ini>
}
 8003edc:	bf00      	nop
 8003ede:	3708      	adds	r7, #8
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	2000082c 	.word	0x2000082c
 8003ee8:	40a00000 	.word	0x40a00000
 8003eec:	3d4ccccd 	.word	0x3d4ccccd
 8003ef0:	3dcccccd 	.word	0x3dcccccd
 8003ef4:	3c23d70a 	.word	0x3c23d70a
 8003ef8:	3f4ccccd 	.word	0x3f4ccccd
 8003efc:	41f00000 	.word	0x41f00000
 8003f00:	200009f0 	.word	0x200009f0
 8003f04:	20000690 	.word	0x20000690
 8003f08:	40010800 	.word	0x40010800
 8003f0c:	0801f802 	.word	0x0801f802

08003f10 <PAC_INI>:
//----------------------------------------------------------------------------
void PAC_INI(){
 8003f10:	b580      	push	{r7, lr}
 8003f12:	af00      	add	r7, sp, #0
	PAC.ZCD=&ZCD;
 8003f14:	4b06      	ldr	r3, [pc, #24]	; (8003f30 <PAC_INI+0x20>)
 8003f16:	4a07      	ldr	r2, [pc, #28]	; (8003f34 <PAC_INI+0x24>)
 8003f18:	601a      	str	r2, [r3, #0]

	ZCD.EXTI_PIN=GPIO_PIN_1;
 8003f1a:	4b06      	ldr	r3, [pc, #24]	; (8003f34 <PAC_INI+0x24>)
 8003f1c:	2202      	movs	r2, #2
 8003f1e:	811a      	strh	r2, [r3, #8]
	ZCD.GPIO=GPIOB;
 8003f20:	4b04      	ldr	r3, [pc, #16]	; (8003f34 <PAC_INI+0x24>)
 8003f22:	4a05      	ldr	r2, [pc, #20]	; (8003f38 <PAC_INI+0x28>)
 8003f24:	60da      	str	r2, [r3, #12]
	ZCD_ini(&ZCD);
 8003f26:	4803      	ldr	r0, [pc, #12]	; (8003f34 <PAC_INI+0x24>)
 8003f28:	f7fe fd44 	bl	80029b4 <ZCD_ini>

}
 8003f2c:	bf00      	nop
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	200009e0 	.word	0x200009e0
 8003f34:	200009d0 	.word	0x200009d0
 8003f38:	40010c00 	.word	0x40010c00

08003f3c <Soldering_Heat_Gun_INI>:
//----------------------------------------------------------------------------
void Soldering_Heat_Gun_INI(uint8_t Flash_Read_Status){
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b086      	sub	sp, #24
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	4603      	mov	r3, r0
 8003f44:	71fb      	strb	r3, [r7, #7]
	Soldering_Heat_Gun.PID.KP=0.2;
 8003f46:	4b35      	ldr	r3, [pc, #212]	; (800401c <Soldering_Heat_Gun_INI+0xe0>)
 8003f48:	4a35      	ldr	r2, [pc, #212]	; (8004020 <Soldering_Heat_Gun_INI+0xe4>)
 8003f4a:	601a      	str	r2, [r3, #0]
	Soldering_Heat_Gun.PID.KI=0.01;//0.03;//0.03
 8003f4c:	4b33      	ldr	r3, [pc, #204]	; (800401c <Soldering_Heat_Gun_INI+0xe0>)
 8003f4e:	4a35      	ldr	r2, [pc, #212]	; (8004024 <Soldering_Heat_Gun_INI+0xe8>)
 8003f50:	605a      	str	r2, [r3, #4]
	Soldering_Heat_Gun.PID.KD=0.4;//1.5;
 8003f52:	4b32      	ldr	r3, [pc, #200]	; (800401c <Soldering_Heat_Gun_INI+0xe0>)
 8003f54:	4a34      	ldr	r2, [pc, #208]	; (8004028 <Soldering_Heat_Gun_INI+0xec>)
 8003f56:	609a      	str	r2, [r3, #8]
	Soldering_Heat_Gun.PID.dt=0.1;
 8003f58:	4b30      	ldr	r3, [pc, #192]	; (800401c <Soldering_Heat_Gun_INI+0xe0>)
 8003f5a:	4a34      	ldr	r2, [pc, #208]	; (800402c <Soldering_Heat_Gun_INI+0xf0>)
 8003f5c:	60da      	str	r2, [r3, #12]
	Soldering_Heat_Gun.PID.MAX_Control=350;
 8003f5e:	4b2f      	ldr	r3, [pc, #188]	; (800401c <Soldering_Heat_Gun_INI+0xe0>)
 8003f60:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8003f64:	821a      	strh	r2, [r3, #16]


	Soldering_Heat_Gun.Filter.Filter_Mode=Three_Samples;
 8003f66:	4b2d      	ldr	r3, [pc, #180]	; (800401c <Soldering_Heat_Gun_INI+0xe0>)
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Soldering_Heat_Gun.Filter.k_min=0.03;
 8003f6e:	4b2b      	ldr	r3, [pc, #172]	; (800401c <Soldering_Heat_Gun_INI+0xe0>)
 8003f70:	4a2f      	ldr	r2, [pc, #188]	; (8004030 <Soldering_Heat_Gun_INI+0xf4>)
 8003f72:	629a      	str	r2, [r3, #40]	; 0x28
	Soldering_Heat_Gun.Filter.k_max=0.8;
 8003f74:	4b29      	ldr	r3, [pc, #164]	; (800401c <Soldering_Heat_Gun_INI+0xe0>)
 8003f76:	4a2f      	ldr	r2, [pc, #188]	; (8004034 <Soldering_Heat_Gun_INI+0xf8>)
 8003f78:	62da      	str	r2, [r3, #44]	; 0x2c
	Soldering_Heat_Gun.Filter.Val_Delata=60;
 8003f7a:	4b28      	ldr	r3, [pc, #160]	; (800401c <Soldering_Heat_Gun_INI+0xe0>)
 8003f7c:	4a2e      	ldr	r2, [pc, #184]	; (8004038 <Soldering_Heat_Gun_INI+0xfc>)
 8003f7e:	635a      	str	r2, [r3, #52]	; 0x34
	Soldering_Heat_Gun.Filter.mass=&ADC_Data[1];
 8003f80:	4b26      	ldr	r3, [pc, #152]	; (800401c <Soldering_Heat_Gun_INI+0xe0>)
 8003f82:	4a2e      	ldr	r2, [pc, #184]	; (800403c <Soldering_Heat_Gun_INI+0x100>)
 8003f84:	641a      	str	r2, [r3, #64]	; 0x40


	Soldering_Heat_Gun.MODE=MANUAL;
 8003f86:	4b25      	ldr	r3, [pc, #148]	; (800401c <Soldering_Heat_Gun_INI+0xe0>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

	Soldering_Heat_Gun.OFF_PIN=GPIO_PIN_15;
 8003f8e:	4b23      	ldr	r3, [pc, #140]	; (800401c <Soldering_Heat_Gun_INI+0xe0>)
 8003f90:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003f94:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
	Soldering_Heat_Gun.OFF_GPIO=GPIOC;
 8003f98:	4b20      	ldr	r3, [pc, #128]	; (800401c <Soldering_Heat_Gun_INI+0xe0>)
 8003f9a:	4a29      	ldr	r2, [pc, #164]	; (8004040 <Soldering_Heat_Gun_INI+0x104>)
 8003f9c:	675a      	str	r2, [r3, #116]	; 0x74
	Soldering_Heat_Gun.MANUAL_PIN=GPIO_PIN_9;
 8003f9e:	4b1f      	ldr	r3, [pc, #124]	; (800401c <Soldering_Heat_Gun_INI+0xe0>)
 8003fa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fa4:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	Soldering_Heat_Gun.MANUAL_GPIO=GPIOB;
 8003fa8:	4b1c      	ldr	r3, [pc, #112]	; (800401c <Soldering_Heat_Gun_INI+0xe0>)
 8003faa:	4a26      	ldr	r2, [pc, #152]	; (8004044 <Soldering_Heat_Gun_INI+0x108>)
 8003fac:	67da      	str	r2, [r3, #124]	; 0x7c

	Soldering_Heat_Gun.PAC = &PAC;
 8003fae:	4b1b      	ldr	r3, [pc, #108]	; (800401c <Soldering_Heat_Gun_INI+0xe0>)
 8003fb0:	4a25      	ldr	r2, [pc, #148]	; (8004048 <Soldering_Heat_Gun_INI+0x10c>)
 8003fb2:	661a      	str	r2, [r3, #96]	; 0x60

	struct PAC_Control_Vector element_ini;

	element_ini.GPIO=GPIOB;
 8003fb4:	4b23      	ldr	r3, [pc, #140]	; (8004044 <Soldering_Heat_Gun_INI+0x108>)
 8003fb6:	613b      	str	r3, [r7, #16]
	element_ini.PIN=GPIO_PIN_11;
 8003fb8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003fbc:	81bb      	strh	r3, [r7, #12]

	Soldering_Heat_Gun.PAC_Control=PAC_Control_Vector_Create(&PAC, &element_ini);
 8003fbe:	f107 0308 	add.w	r3, r7, #8
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	4820      	ldr	r0, [pc, #128]	; (8004048 <Soldering_Heat_Gun_INI+0x10c>)
 8003fc6:	f7fe fc33 	bl	8002830 <PAC_Control_Vector_Create>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	4a13      	ldr	r2, [pc, #76]	; (800401c <Soldering_Heat_Gun_INI+0xe0>)
 8003fce:	65d3      	str	r3, [r2, #92]	; 0x5c

	Soldering_Heat_Gun.PAC_Control->Control_Value=25;
 8003fd0:	4b12      	ldr	r3, [pc, #72]	; (800401c <Soldering_Heat_Gun_INI+0xe0>)
 8003fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd4:	2219      	movs	r2, #25
 8003fd6:	819a      	strh	r2, [r3, #12]


	if(Flash_Read_Status!=HAL_OK){
 8003fd8:	79fb      	ldrb	r3, [r7, #7]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d011      	beq.n	8004002 <Soldering_Heat_Gun_INI+0xc6>
		Soldering_Heat_Gun.Temperature_Pressets.Presset1=1000;
 8003fde:	4b0f      	ldr	r3, [pc, #60]	; (800401c <Soldering_Heat_Gun_INI+0xe0>)
 8003fe0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003fe4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		Soldering_Heat_Gun.Temperature_Pressets.Presset2=1500;
 8003fe8:	4b0c      	ldr	r3, [pc, #48]	; (800401c <Soldering_Heat_Gun_INI+0xe0>)
 8003fea:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003fee:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
		Soldering_Heat_Gun.Temperature_Coolling=100;
 8003ff2:	4b0a      	ldr	r3, [pc, #40]	; (800401c <Soldering_Heat_Gun_INI+0xe0>)
 8003ff4:	2264      	movs	r2, #100	; 0x64
 8003ff6:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		Soldering_Heat_Gun.Flash_Key=Soldering_Heat_Gun_Struct_Key;
 8003ffa:	4b08      	ldr	r3, [pc, #32]	; (800401c <Soldering_Heat_Gun_INI+0xe0>)
 8003ffc:	4a13      	ldr	r2, [pc, #76]	; (800404c <Soldering_Heat_Gun_INI+0x110>)
 8003ffe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	}

	Soldering_Heat_Gun_Flash_Read_Manual_Temperature(&Soldering_Heat_Gun);
 8004002:	4806      	ldr	r0, [pc, #24]	; (800401c <Soldering_Heat_Gun_INI+0xe0>)
 8004004:	f7ff f994 	bl	8003330 <Soldering_Heat_Gun_Flash_Read_Manual_Temperature>

	Soldering_Heat_Gun_ini(&Soldering_Heat_Gun);
 8004008:	4804      	ldr	r0, [pc, #16]	; (800401c <Soldering_Heat_Gun_INI+0xe0>)
 800400a:	f7ff f882 	bl	8003112 <Soldering_Heat_Gun_ini>

	Soldering_Heat_Gun_OFF(&Soldering_Heat_Gun);
 800400e:	4803      	ldr	r0, [pc, #12]	; (800401c <Soldering_Heat_Gun_INI+0xe0>)
 8004010:	f7ff f8c5 	bl	800319e <Soldering_Heat_Gun_OFF>


}
 8004014:	bf00      	nop
 8004016:	3718      	adds	r7, #24
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	200008c8 	.word	0x200008c8
 8004020:	3e4ccccd 	.word	0x3e4ccccd
 8004024:	3c23d70a 	.word	0x3c23d70a
 8004028:	3ecccccd 	.word	0x3ecccccd
 800402c:	3dcccccd 	.word	0x3dcccccd
 8004030:	3cf5c28f 	.word	0x3cf5c28f
 8004034:	3f4ccccd 	.word	0x3f4ccccd
 8004038:	42700000 	.word	0x42700000
 800403c:	200009ea 	.word	0x200009ea
 8004040:	40011000 	.word	0x40011000
 8004044:	40010c00 	.word	0x40010c00
 8004048:	200009e0 	.word	0x200009e0
 800404c:	0801f804 	.word	0x0801f804

08004050 <Soldering_Separator_INI>:
//----------------------------------------------------------------------------
void Soldering_Separator_INI(uint8_t Flash_Read_Status){
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af00      	add	r7, sp, #0
 8004056:	4603      	mov	r3, r0
 8004058:	71fb      	strb	r3, [r7, #7]
	Soldering_Separator.PID.KP=0.15;
 800405a:	4b2a      	ldr	r3, [pc, #168]	; (8004104 <Soldering_Separator_INI+0xb4>)
 800405c:	4a2a      	ldr	r2, [pc, #168]	; (8004108 <Soldering_Separator_INI+0xb8>)
 800405e:	601a      	str	r2, [r3, #0]
	Soldering_Separator.PID.KI=0.0005;//0.03;//0.03
 8004060:	4b28      	ldr	r3, [pc, #160]	; (8004104 <Soldering_Separator_INI+0xb4>)
 8004062:	4a2a      	ldr	r2, [pc, #168]	; (800410c <Soldering_Separator_INI+0xbc>)
 8004064:	605a      	str	r2, [r3, #4]
	Soldering_Separator.PID.KD=0.1;//1.5;
 8004066:	4b27      	ldr	r3, [pc, #156]	; (8004104 <Soldering_Separator_INI+0xb4>)
 8004068:	4a29      	ldr	r2, [pc, #164]	; (8004110 <Soldering_Separator_INI+0xc0>)
 800406a:	609a      	str	r2, [r3, #8]
	Soldering_Separator.PID.dt=0.1;
 800406c:	4b25      	ldr	r3, [pc, #148]	; (8004104 <Soldering_Separator_INI+0xb4>)
 800406e:	4a28      	ldr	r2, [pc, #160]	; (8004110 <Soldering_Separator_INI+0xc0>)
 8004070:	60da      	str	r2, [r3, #12]
	Soldering_Separator.PID.MAX_Control=350;
 8004072:	4b24      	ldr	r3, [pc, #144]	; (8004104 <Soldering_Separator_INI+0xb4>)
 8004074:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8004078:	821a      	strh	r2, [r3, #16]


	Soldering_Separator.Filter.Filter_Mode=Three_Samples;
 800407a:	4b22      	ldr	r3, [pc, #136]	; (8004104 <Soldering_Separator_INI+0xb4>)
 800407c:	2201      	movs	r2, #1
 800407e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Soldering_Separator.Filter.k_min=0.1;
 8004082:	4b20      	ldr	r3, [pc, #128]	; (8004104 <Soldering_Separator_INI+0xb4>)
 8004084:	4a22      	ldr	r2, [pc, #136]	; (8004110 <Soldering_Separator_INI+0xc0>)
 8004086:	629a      	str	r2, [r3, #40]	; 0x28
	Soldering_Separator.Filter.k_max=0.3;
 8004088:	4b1e      	ldr	r3, [pc, #120]	; (8004104 <Soldering_Separator_INI+0xb4>)
 800408a:	4a22      	ldr	r2, [pc, #136]	; (8004114 <Soldering_Separator_INI+0xc4>)
 800408c:	62da      	str	r2, [r3, #44]	; 0x2c
	Soldering_Separator.Filter.Val_Delata=60;
 800408e:	4b1d      	ldr	r3, [pc, #116]	; (8004104 <Soldering_Separator_INI+0xb4>)
 8004090:	4a21      	ldr	r2, [pc, #132]	; (8004118 <Soldering_Separator_INI+0xc8>)
 8004092:	635a      	str	r2, [r3, #52]	; 0x34
	Soldering_Separator.Filter.mass=&ADC_Data[13];
 8004094:	4b1b      	ldr	r3, [pc, #108]	; (8004104 <Soldering_Separator_INI+0xb4>)
 8004096:	4a21      	ldr	r2, [pc, #132]	; (800411c <Soldering_Separator_INI+0xcc>)
 8004098:	641a      	str	r2, [r3, #64]	; 0x40


	Soldering_Separator.MODE=MANUAL;
 800409a:	4b1a      	ldr	r3, [pc, #104]	; (8004104 <Soldering_Separator_INI+0xb4>)
 800409c:	2200      	movs	r2, #0
 800409e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

	Soldering_Separator.PAC = &PAC;
 80040a2:	4b18      	ldr	r3, [pc, #96]	; (8004104 <Soldering_Separator_INI+0xb4>)
 80040a4:	4a1e      	ldr	r2, [pc, #120]	; (8004120 <Soldering_Separator_INI+0xd0>)
 80040a6:	661a      	str	r2, [r3, #96]	; 0x60

	struct PAC_Control_Vector element_ini;

	element_ini.GPIO=GPIOB;
 80040a8:	4b1e      	ldr	r3, [pc, #120]	; (8004124 <Soldering_Separator_INI+0xd4>)
 80040aa:	613b      	str	r3, [r7, #16]
	element_ini.PIN=GPIO_PIN_0;
 80040ac:	2301      	movs	r3, #1
 80040ae:	81bb      	strh	r3, [r7, #12]

	Soldering_Separator.PAC_Control=PAC_Control_Vector_Create(&PAC, &element_ini);
 80040b0:	f107 0308 	add.w	r3, r7, #8
 80040b4:	4619      	mov	r1, r3
 80040b6:	481a      	ldr	r0, [pc, #104]	; (8004120 <Soldering_Separator_INI+0xd0>)
 80040b8:	f7fe fbba 	bl	8002830 <PAC_Control_Vector_Create>
 80040bc:	4603      	mov	r3, r0
 80040be:	4a11      	ldr	r2, [pc, #68]	; (8004104 <Soldering_Separator_INI+0xb4>)
 80040c0:	65d3      	str	r3, [r2, #92]	; 0x5c

	Soldering_Separator.PAC_Control->Control_Value=25;
 80040c2:	4b10      	ldr	r3, [pc, #64]	; (8004104 <Soldering_Separator_INI+0xb4>)
 80040c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c6:	2219      	movs	r2, #25
 80040c8:	819a      	strh	r2, [r3, #12]


	if(Flash_Read_Status!=HAL_OK){
 80040ca:	79fb      	ldrb	r3, [r7, #7]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00c      	beq.n	80040ea <Soldering_Separator_INI+0x9a>
		Soldering_Separator.Temperature_Pressets.Presset1=1000;
 80040d0:	4b0c      	ldr	r3, [pc, #48]	; (8004104 <Soldering_Separator_INI+0xb4>)
 80040d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80040d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		Soldering_Separator.Temperature_Pressets.Presset2=1500;
 80040da:	4b0a      	ldr	r3, [pc, #40]	; (8004104 <Soldering_Separator_INI+0xb4>)
 80040dc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80040e0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
		Soldering_Separator.Flash_Key=Soldering_Separator_Struct_Key;
 80040e4:	4b07      	ldr	r3, [pc, #28]	; (8004104 <Soldering_Separator_INI+0xb4>)
 80040e6:	4a10      	ldr	r2, [pc, #64]	; (8004128 <Soldering_Separator_INI+0xd8>)
 80040e8:	679a      	str	r2, [r3, #120]	; 0x78
	}

	Soldering_Separator_Flash_Read_Manual_Temperature(&Soldering_Separator);
 80040ea:	4806      	ldr	r0, [pc, #24]	; (8004104 <Soldering_Separator_INI+0xb4>)
 80040ec:	f7ff fa06 	bl	80034fc <Soldering_Separator_Flash_Read_Manual_Temperature>

	Soldering_Separator_ini(&Soldering_Separator);
 80040f0:	4804      	ldr	r0, [pc, #16]	; (8004104 <Soldering_Separator_INI+0xb4>)
 80040f2:	f7ff f93c 	bl	800336e <Soldering_Separator_ini>

	Soldering_Separator_OFF(&Soldering_Separator);
 80040f6:	4803      	ldr	r0, [pc, #12]	; (8004104 <Soldering_Separator_INI+0xb4>)
 80040f8:	f7ff f96d 	bl	80033d6 <Soldering_Separator_OFF>


}
 80040fc:	bf00      	nop
 80040fe:	3718      	adds	r7, #24
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	20000954 	.word	0x20000954
 8004108:	3e19999a 	.word	0x3e19999a
 800410c:	3a03126f 	.word	0x3a03126f
 8004110:	3dcccccd 	.word	0x3dcccccd
 8004114:	3e99999a 	.word	0x3e99999a
 8004118:	42700000 	.word	0x42700000
 800411c:	20000a02 	.word	0x20000a02
 8004120:	200009e0 	.word	0x200009e0
 8004124:	40010c00 	.word	0x40010c00
 8004128:	1801f804 	.word	0x1801f804

0800412c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004132:	f000 ff13 	bl	8004f5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004136:	f000 f879 	bl	800422c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800413a:	f000 fb6f 	bl	800481c <MX_GPIO_Init>
  MX_DMA_Init();
 800413e:	f000 fb4f 	bl	80047e0 <MX_DMA_Init>
  MX_ADC1_Init();
 8004142:	f000 f8c3 	bl	80042cc <MX_ADC1_Init>
  MX_I2C1_Init();
 8004146:	f000 f9bb 	bl	80044c0 <MX_I2C1_Init>
  MX_TIM2_Init();
 800414a:	f000 fa39 	bl	80045c0 <MX_TIM2_Init>
  MX_TIM1_Init();
 800414e:	f000 f9e5 	bl	800451c <MX_TIM1_Init>
  MX_TIM3_Init();
 8004152:	f000 faab 	bl	80046ac <MX_TIM3_Init>
  MX_TIM4_Init();
 8004156:	f000 faf7 	bl	8004748 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  //---------------------------------------------------------------------------------
  uint8_t Flash_Read_Status;

  Flash_Read_Status=Soldering_Station_Read_Struct(&Soldering_Iron, &Soldering_Heat_Gun, &Soldering_Separator);
 800415a:	4a2a      	ldr	r2, [pc, #168]	; (8004204 <main+0xd8>)
 800415c:	492a      	ldr	r1, [pc, #168]	; (8004208 <main+0xdc>)
 800415e:	482b      	ldr	r0, [pc, #172]	; (800420c <main+0xe0>)
 8004160:	f7ff f9ec 	bl	800353c <Soldering_Station_Read_Struct>
 8004164:	4603      	mov	r3, r0
 8004166:	71fb      	strb	r3, [r7, #7]


  BUTTON_INI();
 8004168:	f7ff fbce 	bl	8003908 <BUTTON_INI>
  INCODER_INI();
 800416c:	f7ff fc58 	bl	8003a20 <INCODER_INI>
  MENU_INI();
 8004170:	f7ff fcbc 	bl	8003aec <MENU_INI>
  OLED_INI();
 8004174:	f7ff fe1e 	bl	8003db4 <OLED_INI>
  PAC_INI();
 8004178:	f7ff feca 	bl	8003f10 <PAC_INI>
  Soldering_Iron_INI(Flash_Read_Status);
 800417c:	79fb      	ldrb	r3, [r7, #7]
 800417e:	4618      	mov	r0, r3
 8004180:	f7ff fe2a 	bl	8003dd8 <Soldering_Iron_INI>
  Soldering_Heat_Gun_INI(Flash_Read_Status);
 8004184:	79fb      	ldrb	r3, [r7, #7]
 8004186:	4618      	mov	r0, r3
 8004188:	f7ff fed8 	bl	8003f3c <Soldering_Heat_Gun_INI>
  Soldering_Separator_INI(Flash_Read_Status);
 800418c:	79fb      	ldrb	r3, [r7, #7]
 800418e:	4618      	mov	r0, r3
 8004190:	f7ff ff5e 	bl	8004050 <Soldering_Separator_INI>

  if(Flash_Read_Status!=HAL_OK)
 8004194:	79fb      	ldrb	r3, [r7, #7]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d004      	beq.n	80041a4 <main+0x78>
	  Soldering_Station_Write_Struct(&Soldering_Iron, &Soldering_Heat_Gun, &Soldering_Separator);
 800419a:	4a1a      	ldr	r2, [pc, #104]	; (8004204 <main+0xd8>)
 800419c:	491a      	ldr	r1, [pc, #104]	; (8004208 <main+0xdc>)
 800419e:	481b      	ldr	r0, [pc, #108]	; (800420c <main+0xe0>)
 80041a0:	f7ff f9fe 	bl	80035a0 <Soldering_Station_Write_Struct>




  //---------------------------------------------------------------------------------TIM
	__HAL_TIM_CLEAR_FLAG(&htim1, TIM_SR_UIF);
 80041a4:	4b1a      	ldr	r3, [pc, #104]	; (8004210 <main+0xe4>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f06f 0201 	mvn.w	r2, #1
 80041ac:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&htim1);
 80041ae:	4818      	ldr	r0, [pc, #96]	; (8004210 <main+0xe4>)
 80041b0:	f003 fe32 	bl	8007e18 <HAL_TIM_Base_Start_IT>
	__HAL_TIM_CLEAR_FLAG(&htim2, TIM_SR_UIF);
 80041b4:	4b17      	ldr	r3, [pc, #92]	; (8004214 <main+0xe8>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f06f 0201 	mvn.w	r2, #1
 80041bc:	611a      	str	r2, [r3, #16]
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80041be:	210c      	movs	r1, #12
 80041c0:	4814      	ldr	r0, [pc, #80]	; (8004214 <main+0xe8>)
 80041c2:	f003 fed3 	bl	8007f6c <HAL_TIM_PWM_Start>

	__HAL_TIM_CLEAR_FLAG(&htim3, TIM_SR_UIF);
 80041c6:	4b14      	ldr	r3, [pc, #80]	; (8004218 <main+0xec>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f06f 0201 	mvn.w	r2, #1
 80041ce:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&htim3);
 80041d0:	4811      	ldr	r0, [pc, #68]	; (8004218 <main+0xec>)
 80041d2:	f003 fe21 	bl	8007e18 <HAL_TIM_Base_Start_IT>

	__HAL_TIM_CLEAR_FLAG(&htim4, TIM_SR_UIF);
 80041d6:	4b11      	ldr	r3, [pc, #68]	; (800421c <main+0xf0>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f06f 0201 	mvn.w	r2, #1
 80041de:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&htim4);
 80041e0:	480e      	ldr	r0, [pc, #56]	; (800421c <main+0xf0>)
 80041e2:	f003 fe19 	bl	8007e18 <HAL_TIM_Base_Start_IT>

    PID_Set_Point(&Soldering_Heat_Gun.PID, 2300);
 80041e6:	f640 01fc 	movw	r1, #2300	; 0x8fc
 80041ea:	4807      	ldr	r0, [pc, #28]	; (8004208 <main+0xdc>)
 80041ec:	f7fe fd8a 	bl	8002d04 <PID_Set_Point>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(100);
 80041f0:	2064      	movs	r0, #100	; 0x64
 80041f2:	f000 ff15 	bl	8005020 <HAL_Delay>


	  Menu_it(&Menu_List_Vector, &Incoder_P1, &Incoder_P2);
 80041f6:	4a0a      	ldr	r2, [pc, #40]	; (8004220 <main+0xf4>)
 80041f8:	490a      	ldr	r1, [pc, #40]	; (8004224 <main+0xf8>)
 80041fa:	480b      	ldr	r0, [pc, #44]	; (8004228 <main+0xfc>)
 80041fc:	f7fd ff9c 	bl	8002138 <Menu_it>
	  HAL_Delay(100);
 8004200:	e7f6      	b.n	80041f0 <main+0xc4>
 8004202:	bf00      	nop
 8004204:	20000954 	.word	0x20000954
 8004208:	200008c8 	.word	0x200008c8
 800420c:	2000082c 	.word	0x2000082c
 8004210:	20000648 	.word	0x20000648
 8004214:	20000690 	.word	0x20000690
 8004218:	200006d8 	.word	0x200006d8
 800421c:	20000720 	.word	0x20000720
 8004220:	20000770 	.word	0x20000770
 8004224:	200007a4 	.word	0x200007a4
 8004228:	2000081c 	.word	0x2000081c

0800422c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b094      	sub	sp, #80	; 0x50
 8004230:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004232:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004236:	2228      	movs	r2, #40	; 0x28
 8004238:	2100      	movs	r1, #0
 800423a:	4618      	mov	r0, r3
 800423c:	f004 fe12 	bl	8008e64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004240:	f107 0314 	add.w	r3, r7, #20
 8004244:	2200      	movs	r2, #0
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	605a      	str	r2, [r3, #4]
 800424a:	609a      	str	r2, [r3, #8]
 800424c:	60da      	str	r2, [r3, #12]
 800424e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004250:	1d3b      	adds	r3, r7, #4
 8004252:	2200      	movs	r2, #0
 8004254:	601a      	str	r2, [r3, #0]
 8004256:	605a      	str	r2, [r3, #4]
 8004258:	609a      	str	r2, [r3, #8]
 800425a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800425c:	2302      	movs	r3, #2
 800425e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004260:	2301      	movs	r3, #1
 8004262:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004264:	2310      	movs	r3, #16
 8004266:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004268:	2300      	movs	r3, #0
 800426a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800426c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004270:	4618      	mov	r0, r3
 8004272:	f003 f8c5 	bl	8007400 <HAL_RCC_OscConfig>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d001      	beq.n	8004280 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800427c:	f000 fbd4 	bl	8004a28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004280:	230f      	movs	r3, #15
 8004282:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8004284:	2300      	movs	r3, #0
 8004286:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004288:	2300      	movs	r3, #0
 800428a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800428c:	2300      	movs	r3, #0
 800428e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004290:	2300      	movs	r3, #0
 8004292:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004294:	f107 0314 	add.w	r3, r7, #20
 8004298:	2100      	movs	r1, #0
 800429a:	4618      	mov	r0, r3
 800429c:	f003 fb32 	bl	8007904 <HAL_RCC_ClockConfig>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d001      	beq.n	80042aa <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80042a6:	f000 fbbf 	bl	8004a28 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80042aa:	2302      	movs	r3, #2
 80042ac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80042ae:	2300      	movs	r3, #0
 80042b0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80042b2:	1d3b      	adds	r3, r7, #4
 80042b4:	4618      	mov	r0, r3
 80042b6:	f003 fca9 	bl	8007c0c <HAL_RCCEx_PeriphCLKConfig>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d001      	beq.n	80042c4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80042c0:	f000 fbb2 	bl	8004a28 <Error_Handler>
  }
}
 80042c4:	bf00      	nop
 80042c6:	3750      	adds	r7, #80	; 0x50
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80042d2:	1d3b      	adds	r3, r7, #4
 80042d4:	2200      	movs	r2, #0
 80042d6:	601a      	str	r2, [r3, #0]
 80042d8:	605a      	str	r2, [r3, #4]
 80042da:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80042dc:	4b76      	ldr	r3, [pc, #472]	; (80044b8 <MX_ADC1_Init+0x1ec>)
 80042de:	4a77      	ldr	r2, [pc, #476]	; (80044bc <MX_ADC1_Init+0x1f0>)
 80042e0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80042e2:	4b75      	ldr	r3, [pc, #468]	; (80044b8 <MX_ADC1_Init+0x1ec>)
 80042e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80042e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80042ea:	4b73      	ldr	r3, [pc, #460]	; (80044b8 <MX_ADC1_Init+0x1ec>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80042f0:	4b71      	ldr	r3, [pc, #452]	; (80044b8 <MX_ADC1_Init+0x1ec>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80042f6:	4b70      	ldr	r3, [pc, #448]	; (80044b8 <MX_ADC1_Init+0x1ec>)
 80042f8:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80042fc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80042fe:	4b6e      	ldr	r3, [pc, #440]	; (80044b8 <MX_ADC1_Init+0x1ec>)
 8004300:	2200      	movs	r2, #0
 8004302:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 16;
 8004304:	4b6c      	ldr	r3, [pc, #432]	; (80044b8 <MX_ADC1_Init+0x1ec>)
 8004306:	2210      	movs	r2, #16
 8004308:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800430a:	486b      	ldr	r0, [pc, #428]	; (80044b8 <MX_ADC1_Init+0x1ec>)
 800430c:	f000 feac 	bl	8005068 <HAL_ADC_Init>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d001      	beq.n	800431a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8004316:	f000 fb87 	bl	8004a28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800431a:	2300      	movs	r3, #0
 800431c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800431e:	2301      	movs	r3, #1
 8004320:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8004322:	2305      	movs	r3, #5
 8004324:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004326:	1d3b      	adds	r3, r7, #4
 8004328:	4619      	mov	r1, r3
 800432a:	4863      	ldr	r0, [pc, #396]	; (80044b8 <MX_ADC1_Init+0x1ec>)
 800432c:	f001 f930 	bl	8005590 <HAL_ADC_ConfigChannel>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8004336:	f000 fb77 	bl	8004a28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800433a:	2301      	movs	r3, #1
 800433c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800433e:	2302      	movs	r3, #2
 8004340:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004342:	1d3b      	adds	r3, r7, #4
 8004344:	4619      	mov	r1, r3
 8004346:	485c      	ldr	r0, [pc, #368]	; (80044b8 <MX_ADC1_Init+0x1ec>)
 8004348:	f001 f922 	bl	8005590 <HAL_ADC_ConfigChannel>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d001      	beq.n	8004356 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8004352:	f000 fb69 	bl	8004a28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8004356:	2303      	movs	r3, #3
 8004358:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800435a:	1d3b      	adds	r3, r7, #4
 800435c:	4619      	mov	r1, r3
 800435e:	4856      	ldr	r0, [pc, #344]	; (80044b8 <MX_ADC1_Init+0x1ec>)
 8004360:	f001 f916 	bl	8005590 <HAL_ADC_ConfigChannel>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d001      	beq.n	800436e <MX_ADC1_Init+0xa2>
  {
    Error_Handler();
 800436a:	f000 fb5d 	bl	8004a28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800436e:	2304      	movs	r3, #4
 8004370:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004372:	1d3b      	adds	r3, r7, #4
 8004374:	4619      	mov	r1, r3
 8004376:	4850      	ldr	r0, [pc, #320]	; (80044b8 <MX_ADC1_Init+0x1ec>)
 8004378:	f001 f90a 	bl	8005590 <HAL_ADC_ConfigChannel>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 8004382:	f000 fb51 	bl	8004a28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8004386:	2306      	movs	r3, #6
 8004388:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800438a:	2305      	movs	r3, #5
 800438c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800438e:	1d3b      	adds	r3, r7, #4
 8004390:	4619      	mov	r1, r3
 8004392:	4849      	ldr	r0, [pc, #292]	; (80044b8 <MX_ADC1_Init+0x1ec>)
 8004394:	f001 f8fc 	bl	8005590 <HAL_ADC_ConfigChannel>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d001      	beq.n	80043a2 <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 800439e:	f000 fb43 	bl	8004a28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80043a2:	2306      	movs	r3, #6
 80043a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80043a6:	1d3b      	adds	r3, r7, #4
 80043a8:	4619      	mov	r1, r3
 80043aa:	4843      	ldr	r0, [pc, #268]	; (80044b8 <MX_ADC1_Init+0x1ec>)
 80043ac:	f001 f8f0 	bl	8005590 <HAL_ADC_ConfigChannel>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d001      	beq.n	80043ba <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 80043b6:	f000 fb37 	bl	8004a28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80043ba:	2307      	movs	r3, #7
 80043bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80043be:	1d3b      	adds	r3, r7, #4
 80043c0:	4619      	mov	r1, r3
 80043c2:	483d      	ldr	r0, [pc, #244]	; (80044b8 <MX_ADC1_Init+0x1ec>)
 80043c4:	f001 f8e4 	bl	8005590 <HAL_ADC_ConfigChannel>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 80043ce:	f000 fb2b 	bl	8004a28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80043d2:	2308      	movs	r3, #8
 80043d4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80043d6:	1d3b      	adds	r3, r7, #4
 80043d8:	4619      	mov	r1, r3
 80043da:	4837      	ldr	r0, [pc, #220]	; (80044b8 <MX_ADC1_Init+0x1ec>)
 80043dc:	f001 f8d8 	bl	8005590 <HAL_ADC_ConfigChannel>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d001      	beq.n	80043ea <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 80043e6:	f000 fb1f 	bl	8004a28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80043ea:	2309      	movs	r3, #9
 80043ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80043ee:	1d3b      	adds	r3, r7, #4
 80043f0:	4619      	mov	r1, r3
 80043f2:	4831      	ldr	r0, [pc, #196]	; (80044b8 <MX_ADC1_Init+0x1ec>)
 80043f4:	f001 f8cc 	bl	8005590 <HAL_ADC_ConfigChannel>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 80043fe:	f000 fb13 	bl	8004a28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8004402:	230a      	movs	r3, #10
 8004404:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004406:	1d3b      	adds	r3, r7, #4
 8004408:	4619      	mov	r1, r3
 800440a:	482b      	ldr	r0, [pc, #172]	; (80044b8 <MX_ADC1_Init+0x1ec>)
 800440c:	f001 f8c0 	bl	8005590 <HAL_ADC_ConfigChannel>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 8004416:	f000 fb07 	bl	8004a28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_11;
 800441a:	230b      	movs	r3, #11
 800441c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800441e:	1d3b      	adds	r3, r7, #4
 8004420:	4619      	mov	r1, r3
 8004422:	4825      	ldr	r0, [pc, #148]	; (80044b8 <MX_ADC1_Init+0x1ec>)
 8004424:	f001 f8b4 	bl	8005590 <HAL_ADC_ConfigChannel>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d001      	beq.n	8004432 <MX_ADC1_Init+0x166>
  {
    Error_Handler();
 800442e:	f000 fafb 	bl	8004a28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8004432:	230c      	movs	r3, #12
 8004434:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004436:	1d3b      	adds	r3, r7, #4
 8004438:	4619      	mov	r1, r3
 800443a:	481f      	ldr	r0, [pc, #124]	; (80044b8 <MX_ADC1_Init+0x1ec>)
 800443c:	f001 f8a8 	bl	8005590 <HAL_ADC_ConfigChannel>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <MX_ADC1_Init+0x17e>
  {
    Error_Handler();
 8004446:	f000 faef 	bl	8004a28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_13;
 800444a:	230d      	movs	r3, #13
 800444c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800444e:	1d3b      	adds	r3, r7, #4
 8004450:	4619      	mov	r1, r3
 8004452:	4819      	ldr	r0, [pc, #100]	; (80044b8 <MX_ADC1_Init+0x1ec>)
 8004454:	f001 f89c 	bl	8005590 <HAL_ADC_ConfigChannel>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <MX_ADC1_Init+0x196>
  {
    Error_Handler();
 800445e:	f000 fae3 	bl	8004a28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8004462:	2307      	movs	r3, #7
 8004464:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 8004466:	230e      	movs	r3, #14
 8004468:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800446a:	1d3b      	adds	r3, r7, #4
 800446c:	4619      	mov	r1, r3
 800446e:	4812      	ldr	r0, [pc, #72]	; (80044b8 <MX_ADC1_Init+0x1ec>)
 8004470:	f001 f88e 	bl	8005590 <HAL_ADC_ConfigChannel>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d001      	beq.n	800447e <MX_ADC1_Init+0x1b2>
  {
    Error_Handler();
 800447a:	f000 fad5 	bl	8004a28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_15;
 800447e:	230f      	movs	r3, #15
 8004480:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004482:	1d3b      	adds	r3, r7, #4
 8004484:	4619      	mov	r1, r3
 8004486:	480c      	ldr	r0, [pc, #48]	; (80044b8 <MX_ADC1_Init+0x1ec>)
 8004488:	f001 f882 	bl	8005590 <HAL_ADC_ConfigChannel>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 8004492:	f000 fac9 	bl	8004a28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_16;
 8004496:	2310      	movs	r3, #16
 8004498:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800449a:	1d3b      	adds	r3, r7, #4
 800449c:	4619      	mov	r1, r3
 800449e:	4806      	ldr	r0, [pc, #24]	; (80044b8 <MX_ADC1_Init+0x1ec>)
 80044a0:	f001 f876 	bl	8005590 <HAL_ADC_ConfigChannel>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d001      	beq.n	80044ae <MX_ADC1_Init+0x1e2>
  {
    Error_Handler();
 80044aa:	f000 fabd 	bl	8004a28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80044ae:	bf00      	nop
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	20000580 	.word	0x20000580
 80044bc:	40012400 	.word	0x40012400

080044c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80044c4:	4b12      	ldr	r3, [pc, #72]	; (8004510 <MX_I2C1_Init+0x50>)
 80044c6:	4a13      	ldr	r2, [pc, #76]	; (8004514 <MX_I2C1_Init+0x54>)
 80044c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80044ca:	4b11      	ldr	r3, [pc, #68]	; (8004510 <MX_I2C1_Init+0x50>)
 80044cc:	4a12      	ldr	r2, [pc, #72]	; (8004518 <MX_I2C1_Init+0x58>)
 80044ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80044d0:	4b0f      	ldr	r3, [pc, #60]	; (8004510 <MX_I2C1_Init+0x50>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80044d6:	4b0e      	ldr	r3, [pc, #56]	; (8004510 <MX_I2C1_Init+0x50>)
 80044d8:	2200      	movs	r2, #0
 80044da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80044dc:	4b0c      	ldr	r3, [pc, #48]	; (8004510 <MX_I2C1_Init+0x50>)
 80044de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80044e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80044e4:	4b0a      	ldr	r3, [pc, #40]	; (8004510 <MX_I2C1_Init+0x50>)
 80044e6:	2200      	movs	r2, #0
 80044e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80044ea:	4b09      	ldr	r3, [pc, #36]	; (8004510 <MX_I2C1_Init+0x50>)
 80044ec:	2200      	movs	r2, #0
 80044ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80044f0:	4b07      	ldr	r3, [pc, #28]	; (8004510 <MX_I2C1_Init+0x50>)
 80044f2:	2200      	movs	r2, #0
 80044f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80044f6:	4b06      	ldr	r3, [pc, #24]	; (8004510 <MX_I2C1_Init+0x50>)
 80044f8:	2200      	movs	r2, #0
 80044fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80044fc:	4804      	ldr	r0, [pc, #16]	; (8004510 <MX_I2C1_Init+0x50>)
 80044fe:	f002 fa07 	bl	8006910 <HAL_I2C_Init>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d001      	beq.n	800450c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004508:	f000 fa8e 	bl	8004a28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800450c:	bf00      	nop
 800450e:	bd80      	pop	{r7, pc}
 8004510:	200005f4 	.word	0x200005f4
 8004514:	40005400 	.word	0x40005400
 8004518:	00061a80 	.word	0x00061a80

0800451c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b086      	sub	sp, #24
 8004520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004522:	f107 0308 	add.w	r3, r7, #8
 8004526:	2200      	movs	r2, #0
 8004528:	601a      	str	r2, [r3, #0]
 800452a:	605a      	str	r2, [r3, #4]
 800452c:	609a      	str	r2, [r3, #8]
 800452e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004530:	463b      	mov	r3, r7
 8004532:	2200      	movs	r2, #0
 8004534:	601a      	str	r2, [r3, #0]
 8004536:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004538:	4b1f      	ldr	r3, [pc, #124]	; (80045b8 <MX_TIM1_Init+0x9c>)
 800453a:	4a20      	ldr	r2, [pc, #128]	; (80045bc <MX_TIM1_Init+0xa0>)
 800453c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 799;
 800453e:	4b1e      	ldr	r3, [pc, #120]	; (80045b8 <MX_TIM1_Init+0x9c>)
 8004540:	f240 321f 	movw	r2, #799	; 0x31f
 8004544:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004546:	4b1c      	ldr	r3, [pc, #112]	; (80045b8 <MX_TIM1_Init+0x9c>)
 8004548:	2200      	movs	r2, #0
 800454a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 499;
 800454c:	4b1a      	ldr	r3, [pc, #104]	; (80045b8 <MX_TIM1_Init+0x9c>)
 800454e:	f240 12f3 	movw	r2, #499	; 0x1f3
 8004552:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004554:	4b18      	ldr	r3, [pc, #96]	; (80045b8 <MX_TIM1_Init+0x9c>)
 8004556:	2200      	movs	r2, #0
 8004558:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800455a:	4b17      	ldr	r3, [pc, #92]	; (80045b8 <MX_TIM1_Init+0x9c>)
 800455c:	2200      	movs	r2, #0
 800455e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004560:	4b15      	ldr	r3, [pc, #84]	; (80045b8 <MX_TIM1_Init+0x9c>)
 8004562:	2200      	movs	r2, #0
 8004564:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004566:	4814      	ldr	r0, [pc, #80]	; (80045b8 <MX_TIM1_Init+0x9c>)
 8004568:	f003 fc06 	bl	8007d78 <HAL_TIM_Base_Init>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d001      	beq.n	8004576 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8004572:	f000 fa59 	bl	8004a28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004576:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800457a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800457c:	f107 0308 	add.w	r3, r7, #8
 8004580:	4619      	mov	r1, r3
 8004582:	480d      	ldr	r0, [pc, #52]	; (80045b8 <MX_TIM1_Init+0x9c>)
 8004584:	f003 ffbe 	bl	8008504 <HAL_TIM_ConfigClockSource>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d001      	beq.n	8004592 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800458e:	f000 fa4b 	bl	8004a28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004592:	2300      	movs	r3, #0
 8004594:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004596:	2300      	movs	r3, #0
 8004598:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800459a:	463b      	mov	r3, r7
 800459c:	4619      	mov	r1, r3
 800459e:	4806      	ldr	r0, [pc, #24]	; (80045b8 <MX_TIM1_Init+0x9c>)
 80045a0:	f004 fb3c 	bl	8008c1c <HAL_TIMEx_MasterConfigSynchronization>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d001      	beq.n	80045ae <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80045aa:	f000 fa3d 	bl	8004a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80045ae:	bf00      	nop
 80045b0:	3718      	adds	r7, #24
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	20000648 	.word	0x20000648
 80045bc:	40012c00 	.word	0x40012c00

080045c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b08e      	sub	sp, #56	; 0x38
 80045c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80045c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80045ca:	2200      	movs	r2, #0
 80045cc:	601a      	str	r2, [r3, #0]
 80045ce:	605a      	str	r2, [r3, #4]
 80045d0:	609a      	str	r2, [r3, #8]
 80045d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045d4:	f107 0320 	add.w	r3, r7, #32
 80045d8:	2200      	movs	r2, #0
 80045da:	601a      	str	r2, [r3, #0]
 80045dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80045de:	1d3b      	adds	r3, r7, #4
 80045e0:	2200      	movs	r2, #0
 80045e2:	601a      	str	r2, [r3, #0]
 80045e4:	605a      	str	r2, [r3, #4]
 80045e6:	609a      	str	r2, [r3, #8]
 80045e8:	60da      	str	r2, [r3, #12]
 80045ea:	611a      	str	r2, [r3, #16]
 80045ec:	615a      	str	r2, [r3, #20]
 80045ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80045f0:	4b2d      	ldr	r3, [pc, #180]	; (80046a8 <MX_TIM2_Init+0xe8>)
 80045f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80045f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80045f8:	4b2b      	ldr	r3, [pc, #172]	; (80046a8 <MX_TIM2_Init+0xe8>)
 80045fa:	2200      	movs	r2, #0
 80045fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045fe:	4b2a      	ldr	r3, [pc, #168]	; (80046a8 <MX_TIM2_Init+0xe8>)
 8004600:	2200      	movs	r2, #0
 8004602:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 399;
 8004604:	4b28      	ldr	r3, [pc, #160]	; (80046a8 <MX_TIM2_Init+0xe8>)
 8004606:	f240 128f 	movw	r2, #399	; 0x18f
 800460a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800460c:	4b26      	ldr	r3, [pc, #152]	; (80046a8 <MX_TIM2_Init+0xe8>)
 800460e:	2200      	movs	r2, #0
 8004610:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004612:	4b25      	ldr	r3, [pc, #148]	; (80046a8 <MX_TIM2_Init+0xe8>)
 8004614:	2200      	movs	r2, #0
 8004616:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004618:	4823      	ldr	r0, [pc, #140]	; (80046a8 <MX_TIM2_Init+0xe8>)
 800461a:	f003 fbad 	bl	8007d78 <HAL_TIM_Base_Init>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d001      	beq.n	8004628 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8004624:	f000 fa00 	bl	8004a28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004628:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800462c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800462e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004632:	4619      	mov	r1, r3
 8004634:	481c      	ldr	r0, [pc, #112]	; (80046a8 <MX_TIM2_Init+0xe8>)
 8004636:	f003 ff65 	bl	8008504 <HAL_TIM_ConfigClockSource>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d001      	beq.n	8004644 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8004640:	f000 f9f2 	bl	8004a28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004644:	4818      	ldr	r0, [pc, #96]	; (80046a8 <MX_TIM2_Init+0xe8>)
 8004646:	f003 fc39 	bl	8007ebc <HAL_TIM_PWM_Init>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d001      	beq.n	8004654 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8004650:	f000 f9ea 	bl	8004a28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004654:	2300      	movs	r3, #0
 8004656:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004658:	2300      	movs	r3, #0
 800465a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800465c:	f107 0320 	add.w	r3, r7, #32
 8004660:	4619      	mov	r1, r3
 8004662:	4811      	ldr	r0, [pc, #68]	; (80046a8 <MX_TIM2_Init+0xe8>)
 8004664:	f004 fada 	bl	8008c1c <HAL_TIMEx_MasterConfigSynchronization>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800466e:	f000 f9db 	bl	8004a28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004672:	2360      	movs	r3, #96	; 0x60
 8004674:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004676:	2300      	movs	r3, #0
 8004678:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800467a:	2300      	movs	r3, #0
 800467c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800467e:	2300      	movs	r3, #0
 8004680:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004682:	1d3b      	adds	r3, r7, #4
 8004684:	220c      	movs	r2, #12
 8004686:	4619      	mov	r1, r3
 8004688:	4807      	ldr	r0, [pc, #28]	; (80046a8 <MX_TIM2_Init+0xe8>)
 800468a:	f003 fe7d 	bl	8008388 <HAL_TIM_PWM_ConfigChannel>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d001      	beq.n	8004698 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8004694:	f000 f9c8 	bl	8004a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004698:	4803      	ldr	r0, [pc, #12]	; (80046a8 <MX_TIM2_Init+0xe8>)
 800469a:	f000 fb35 	bl	8004d08 <HAL_TIM_MspPostInit>

}
 800469e:	bf00      	nop
 80046a0:	3738      	adds	r7, #56	; 0x38
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	20000690 	.word	0x20000690

080046ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80046b2:	f107 0308 	add.w	r3, r7, #8
 80046b6:	2200      	movs	r2, #0
 80046b8:	601a      	str	r2, [r3, #0]
 80046ba:	605a      	str	r2, [r3, #4]
 80046bc:	609a      	str	r2, [r3, #8]
 80046be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046c0:	463b      	mov	r3, r7
 80046c2:	2200      	movs	r2, #0
 80046c4:	601a      	str	r2, [r3, #0]
 80046c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80046c8:	4b1d      	ldr	r3, [pc, #116]	; (8004740 <MX_TIM3_Init+0x94>)
 80046ca:	4a1e      	ldr	r2, [pc, #120]	; (8004744 <MX_TIM3_Init+0x98>)
 80046cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 799;
 80046ce:	4b1c      	ldr	r3, [pc, #112]	; (8004740 <MX_TIM3_Init+0x94>)
 80046d0:	f240 321f 	movw	r2, #799	; 0x31f
 80046d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046d6:	4b1a      	ldr	r3, [pc, #104]	; (8004740 <MX_TIM3_Init+0x94>)
 80046d8:	2200      	movs	r2, #0
 80046da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 80046dc:	4b18      	ldr	r3, [pc, #96]	; (8004740 <MX_TIM3_Init+0x94>)
 80046de:	f240 12f3 	movw	r2, #499	; 0x1f3
 80046e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80046e4:	4b16      	ldr	r3, [pc, #88]	; (8004740 <MX_TIM3_Init+0x94>)
 80046e6:	2200      	movs	r2, #0
 80046e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80046ea:	4b15      	ldr	r3, [pc, #84]	; (8004740 <MX_TIM3_Init+0x94>)
 80046ec:	2200      	movs	r2, #0
 80046ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80046f0:	4813      	ldr	r0, [pc, #76]	; (8004740 <MX_TIM3_Init+0x94>)
 80046f2:	f003 fb41 	bl	8007d78 <HAL_TIM_Base_Init>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d001      	beq.n	8004700 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80046fc:	f000 f994 	bl	8004a28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004700:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004704:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004706:	f107 0308 	add.w	r3, r7, #8
 800470a:	4619      	mov	r1, r3
 800470c:	480c      	ldr	r0, [pc, #48]	; (8004740 <MX_TIM3_Init+0x94>)
 800470e:	f003 fef9 	bl	8008504 <HAL_TIM_ConfigClockSource>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d001      	beq.n	800471c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8004718:	f000 f986 	bl	8004a28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800471c:	2300      	movs	r3, #0
 800471e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004720:	2300      	movs	r3, #0
 8004722:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004724:	463b      	mov	r3, r7
 8004726:	4619      	mov	r1, r3
 8004728:	4805      	ldr	r0, [pc, #20]	; (8004740 <MX_TIM3_Init+0x94>)
 800472a:	f004 fa77 	bl	8008c1c <HAL_TIMEx_MasterConfigSynchronization>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d001      	beq.n	8004738 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8004734:	f000 f978 	bl	8004a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004738:	bf00      	nop
 800473a:	3718      	adds	r7, #24
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	200006d8 	.word	0x200006d8
 8004744:	40000400 	.word	0x40000400

08004748 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b086      	sub	sp, #24
 800474c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800474e:	f107 0308 	add.w	r3, r7, #8
 8004752:	2200      	movs	r2, #0
 8004754:	601a      	str	r2, [r3, #0]
 8004756:	605a      	str	r2, [r3, #4]
 8004758:	609a      	str	r2, [r3, #8]
 800475a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800475c:	463b      	mov	r3, r7
 800475e:	2200      	movs	r2, #0
 8004760:	601a      	str	r2, [r3, #0]
 8004762:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004764:	4b1c      	ldr	r3, [pc, #112]	; (80047d8 <MX_TIM4_Init+0x90>)
 8004766:	4a1d      	ldr	r2, [pc, #116]	; (80047dc <MX_TIM4_Init+0x94>)
 8004768:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 800476a:	4b1b      	ldr	r3, [pc, #108]	; (80047d8 <MX_TIM4_Init+0x90>)
 800476c:	224f      	movs	r2, #79	; 0x4f
 800476e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004770:	4b19      	ldr	r3, [pc, #100]	; (80047d8 <MX_TIM4_Init+0x90>)
 8004772:	2200      	movs	r2, #0
 8004774:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9;
 8004776:	4b18      	ldr	r3, [pc, #96]	; (80047d8 <MX_TIM4_Init+0x90>)
 8004778:	2209      	movs	r2, #9
 800477a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800477c:	4b16      	ldr	r3, [pc, #88]	; (80047d8 <MX_TIM4_Init+0x90>)
 800477e:	2200      	movs	r2, #0
 8004780:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004782:	4b15      	ldr	r3, [pc, #84]	; (80047d8 <MX_TIM4_Init+0x90>)
 8004784:	2200      	movs	r2, #0
 8004786:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004788:	4813      	ldr	r0, [pc, #76]	; (80047d8 <MX_TIM4_Init+0x90>)
 800478a:	f003 faf5 	bl	8007d78 <HAL_TIM_Base_Init>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d001      	beq.n	8004798 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8004794:	f000 f948 	bl	8004a28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004798:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800479c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800479e:	f107 0308 	add.w	r3, r7, #8
 80047a2:	4619      	mov	r1, r3
 80047a4:	480c      	ldr	r0, [pc, #48]	; (80047d8 <MX_TIM4_Init+0x90>)
 80047a6:	f003 fead 	bl	8008504 <HAL_TIM_ConfigClockSource>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d001      	beq.n	80047b4 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 80047b0:	f000 f93a 	bl	8004a28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80047b4:	2300      	movs	r3, #0
 80047b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80047b8:	2300      	movs	r3, #0
 80047ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80047bc:	463b      	mov	r3, r7
 80047be:	4619      	mov	r1, r3
 80047c0:	4805      	ldr	r0, [pc, #20]	; (80047d8 <MX_TIM4_Init+0x90>)
 80047c2:	f004 fa2b 	bl	8008c1c <HAL_TIMEx_MasterConfigSynchronization>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d001      	beq.n	80047d0 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 80047cc:	f000 f92c 	bl	8004a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80047d0:	bf00      	nop
 80047d2:	3718      	adds	r7, #24
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	20000720 	.word	0x20000720
 80047dc:	40000800 	.word	0x40000800

080047e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80047e6:	4b0c      	ldr	r3, [pc, #48]	; (8004818 <MX_DMA_Init+0x38>)
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	4a0b      	ldr	r2, [pc, #44]	; (8004818 <MX_DMA_Init+0x38>)
 80047ec:	f043 0301 	orr.w	r3, r3, #1
 80047f0:	6153      	str	r3, [r2, #20]
 80047f2:	4b09      	ldr	r3, [pc, #36]	; (8004818 <MX_DMA_Init+0x38>)
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	607b      	str	r3, [r7, #4]
 80047fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80047fe:	2200      	movs	r2, #0
 8004800:	2100      	movs	r1, #0
 8004802:	200b      	movs	r0, #11
 8004804:	f001 f99d 	bl	8005b42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004808:	200b      	movs	r0, #11
 800480a:	f001 f9b6 	bl	8005b7a <HAL_NVIC_EnableIRQ>

}
 800480e:	bf00      	nop
 8004810:	3708      	adds	r7, #8
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	40021000 	.word	0x40021000

0800481c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b088      	sub	sp, #32
 8004820:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004822:	f107 0310 	add.w	r3, r7, #16
 8004826:	2200      	movs	r2, #0
 8004828:	601a      	str	r2, [r3, #0]
 800482a:	605a      	str	r2, [r3, #4]
 800482c:	609a      	str	r2, [r3, #8]
 800482e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004830:	4b76      	ldr	r3, [pc, #472]	; (8004a0c <MX_GPIO_Init+0x1f0>)
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	4a75      	ldr	r2, [pc, #468]	; (8004a0c <MX_GPIO_Init+0x1f0>)
 8004836:	f043 0310 	orr.w	r3, r3, #16
 800483a:	6193      	str	r3, [r2, #24]
 800483c:	4b73      	ldr	r3, [pc, #460]	; (8004a0c <MX_GPIO_Init+0x1f0>)
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	f003 0310 	and.w	r3, r3, #16
 8004844:	60fb      	str	r3, [r7, #12]
 8004846:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004848:	4b70      	ldr	r3, [pc, #448]	; (8004a0c <MX_GPIO_Init+0x1f0>)
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	4a6f      	ldr	r2, [pc, #444]	; (8004a0c <MX_GPIO_Init+0x1f0>)
 800484e:	f043 0320 	orr.w	r3, r3, #32
 8004852:	6193      	str	r3, [r2, #24]
 8004854:	4b6d      	ldr	r3, [pc, #436]	; (8004a0c <MX_GPIO_Init+0x1f0>)
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	f003 0320 	and.w	r3, r3, #32
 800485c:	60bb      	str	r3, [r7, #8]
 800485e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004860:	4b6a      	ldr	r3, [pc, #424]	; (8004a0c <MX_GPIO_Init+0x1f0>)
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	4a69      	ldr	r2, [pc, #420]	; (8004a0c <MX_GPIO_Init+0x1f0>)
 8004866:	f043 0304 	orr.w	r3, r3, #4
 800486a:	6193      	str	r3, [r2, #24]
 800486c:	4b67      	ldr	r3, [pc, #412]	; (8004a0c <MX_GPIO_Init+0x1f0>)
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	f003 0304 	and.w	r3, r3, #4
 8004874:	607b      	str	r3, [r7, #4]
 8004876:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004878:	4b64      	ldr	r3, [pc, #400]	; (8004a0c <MX_GPIO_Init+0x1f0>)
 800487a:	699b      	ldr	r3, [r3, #24]
 800487c:	4a63      	ldr	r2, [pc, #396]	; (8004a0c <MX_GPIO_Init+0x1f0>)
 800487e:	f043 0308 	orr.w	r3, r3, #8
 8004882:	6193      	str	r3, [r2, #24]
 8004884:	4b61      	ldr	r3, [pc, #388]	; (8004a0c <MX_GPIO_Init+0x1f0>)
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	f003 0308 	and.w	r3, r3, #8
 800488c:	603b      	str	r3, [r7, #0]
 800488e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8004890:	2200      	movs	r2, #0
 8004892:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004896:	485e      	ldr	r0, [pc, #376]	; (8004a10 <MX_GPIO_Init+0x1f4>)
 8004898:	f002 f809 	bl	80068ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_9, GPIO_PIN_RESET);
 800489c:	2200      	movs	r2, #0
 800489e:	f640 6101 	movw	r1, #3585	; 0xe01
 80048a2:	485c      	ldr	r0, [pc, #368]	; (8004a14 <MX_GPIO_Init+0x1f8>)
 80048a4:	f002 f803 	bl	80068ae <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80048a8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80048ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80048ae:	2300      	movs	r3, #0
 80048b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048b2:	2300      	movs	r3, #0
 80048b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048b6:	f107 0310 	add.w	r3, r7, #16
 80048ba:	4619      	mov	r1, r3
 80048bc:	4854      	ldr	r0, [pc, #336]	; (8004a10 <MX_GPIO_Init+0x1f4>)
 80048be:	f001 fe5b 	bl	8006578 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80048c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048c8:	2301      	movs	r3, #1
 80048ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048cc:	2300      	movs	r3, #0
 80048ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048d0:	2302      	movs	r3, #2
 80048d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048d4:	f107 0310 	add.w	r3, r7, #16
 80048d8:	4619      	mov	r1, r3
 80048da:	484d      	ldr	r0, [pc, #308]	; (8004a10 <MX_GPIO_Init+0x1f4>)
 80048dc:	f001 fe4c 	bl	8006578 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80048e0:	23c2      	movs	r3, #194	; 0xc2
 80048e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80048e4:	2303      	movs	r3, #3
 80048e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048e8:	f107 0310 	add.w	r3, r7, #16
 80048ec:	4619      	mov	r1, r3
 80048ee:	484a      	ldr	r0, [pc, #296]	; (8004a18 <MX_GPIO_Init+0x1fc>)
 80048f0:	f001 fe42 	bl	8006578 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80048f4:	2304      	movs	r3, #4
 80048f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80048f8:	4b48      	ldr	r3, [pc, #288]	; (8004a1c <MX_GPIO_Init+0x200>)
 80048fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048fc:	2300      	movs	r3, #0
 80048fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004900:	f107 0310 	add.w	r3, r7, #16
 8004904:	4619      	mov	r1, r3
 8004906:	4844      	ldr	r0, [pc, #272]	; (8004a18 <MX_GPIO_Init+0x1fc>)
 8004908:	f001 fe36 	bl	8006578 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA8 PA9
                           PA10 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9
 800490c:	f241 7330 	movw	r3, #5936	; 0x1730
 8004910:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_10|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004912:	2300      	movs	r3, #0
 8004914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004916:	2300      	movs	r3, #0
 8004918:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800491a:	f107 0310 	add.w	r3, r7, #16
 800491e:	4619      	mov	r1, r3
 8004920:	483d      	ldr	r0, [pc, #244]	; (8004a18 <MX_GPIO_Init+0x1fc>)
 8004922:	f001 fe29 	bl	8006578 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB11 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_9;
 8004926:	f640 6301 	movw	r3, #3585	; 0xe01
 800492a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800492c:	2301      	movs	r3, #1
 800492e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004930:	2300      	movs	r3, #0
 8004932:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004934:	2302      	movs	r3, #2
 8004936:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004938:	f107 0310 	add.w	r3, r7, #16
 800493c:	4619      	mov	r1, r3
 800493e:	4835      	ldr	r0, [pc, #212]	; (8004a14 <MX_GPIO_Init+0x1f8>)
 8004940:	f001 fe1a 	bl	8006578 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004944:	2302      	movs	r3, #2
 8004946:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004948:	4b34      	ldr	r3, [pc, #208]	; (8004a1c <MX_GPIO_Init+0x200>)
 800494a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800494c:	2300      	movs	r3, #0
 800494e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004950:	f107 0310 	add.w	r3, r7, #16
 8004954:	4619      	mov	r1, r3
 8004956:	482f      	ldr	r0, [pc, #188]	; (8004a14 <MX_GPIO_Init+0x1f8>)
 8004958:	f001 fe0e 	bl	8006578 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB14 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_3;
 800495c:	f245 0308 	movw	r3, #20488	; 0x5008
 8004960:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004962:	4b2f      	ldr	r3, [pc, #188]	; (8004a20 <MX_GPIO_Init+0x204>)
 8004964:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004966:	2300      	movs	r3, #0
 8004968:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800496a:	f107 0310 	add.w	r3, r7, #16
 800496e:	4619      	mov	r1, r3
 8004970:	4828      	ldr	r0, [pc, #160]	; (8004a14 <MX_GPIO_Init+0x1f8>)
 8004972:	f001 fe01 	bl	8006578 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB15 PB4 PB5
                           PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5
 8004976:	f24a 1330 	movw	r3, #41264	; 0xa130
 800497a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800497c:	2300      	movs	r3, #0
 800497e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004980:	2300      	movs	r3, #0
 8004982:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004984:	f107 0310 	add.w	r3, r7, #16
 8004988:	4619      	mov	r1, r3
 800498a:	4822      	ldr	r0, [pc, #136]	; (8004a14 <MX_GPIO_Init+0x1f8>)
 800498c:	f001 fdf4 	bl	8006578 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004990:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004994:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004996:	4b23      	ldr	r3, [pc, #140]	; (8004a24 <MX_GPIO_Init+0x208>)
 8004998:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800499a:	2300      	movs	r3, #0
 800499c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800499e:	f107 0310 	add.w	r3, r7, #16
 80049a2:	4619      	mov	r1, r3
 80049a4:	481c      	ldr	r0, [pc, #112]	; (8004a18 <MX_GPIO_Init+0x1fc>)
 80049a6:	f001 fde7 	bl	8006578 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80049aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80049b0:	4b1b      	ldr	r3, [pc, #108]	; (8004a20 <MX_GPIO_Init+0x204>)
 80049b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049b4:	2300      	movs	r3, #0
 80049b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049b8:	f107 0310 	add.w	r3, r7, #16
 80049bc:	4619      	mov	r1, r3
 80049be:	4816      	ldr	r0, [pc, #88]	; (8004a18 <MX_GPIO_Init+0x1fc>)
 80049c0:	f001 fdda 	bl	8006578 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 3, 0);
 80049c4:	2200      	movs	r2, #0
 80049c6:	2103      	movs	r1, #3
 80049c8:	2007      	movs	r0, #7
 80049ca:	f001 f8ba 	bl	8005b42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80049ce:	2007      	movs	r0, #7
 80049d0:	f001 f8d3 	bl	8005b7a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 3, 0);
 80049d4:	2200      	movs	r2, #0
 80049d6:	2103      	movs	r1, #3
 80049d8:	2008      	movs	r0, #8
 80049da:	f001 f8b2 	bl	8005b42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80049de:	2008      	movs	r0, #8
 80049e0:	f001 f8cb 	bl	8005b7a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 3, 0);
 80049e4:	2200      	movs	r2, #0
 80049e6:	2103      	movs	r1, #3
 80049e8:	2009      	movs	r0, #9
 80049ea:	f001 f8aa 	bl	8005b42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80049ee:	2009      	movs	r0, #9
 80049f0:	f001 f8c3 	bl	8005b7a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80049f4:	2200      	movs	r2, #0
 80049f6:	2100      	movs	r1, #0
 80049f8:	2028      	movs	r0, #40	; 0x28
 80049fa:	f001 f8a2 	bl	8005b42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80049fe:	2028      	movs	r0, #40	; 0x28
 8004a00:	f001 f8bb 	bl	8005b7a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004a04:	bf00      	nop
 8004a06:	3720      	adds	r7, #32
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	40021000 	.word	0x40021000
 8004a10:	40011000 	.word	0x40011000
 8004a14:	40010c00 	.word	0x40010c00
 8004a18:	40010800 	.word	0x40010800
 8004a1c:	10310000 	.word	0x10310000
 8004a20:	10210000 	.word	0x10210000
 8004a24:	10110000 	.word	0x10110000

08004a28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004a2c:	b672      	cpsid	i
}
 8004a2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004a30:	e7fe      	b.n	8004a30 <Error_Handler+0x8>
	...

08004a34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004a3a:	4b1d      	ldr	r3, [pc, #116]	; (8004ab0 <HAL_MspInit+0x7c>)
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	4a1c      	ldr	r2, [pc, #112]	; (8004ab0 <HAL_MspInit+0x7c>)
 8004a40:	f043 0301 	orr.w	r3, r3, #1
 8004a44:	6193      	str	r3, [r2, #24]
 8004a46:	4b1a      	ldr	r3, [pc, #104]	; (8004ab0 <HAL_MspInit+0x7c>)
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	f003 0301 	and.w	r3, r3, #1
 8004a4e:	60bb      	str	r3, [r7, #8]
 8004a50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a52:	4b17      	ldr	r3, [pc, #92]	; (8004ab0 <HAL_MspInit+0x7c>)
 8004a54:	69db      	ldr	r3, [r3, #28]
 8004a56:	4a16      	ldr	r2, [pc, #88]	; (8004ab0 <HAL_MspInit+0x7c>)
 8004a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a5c:	61d3      	str	r3, [r2, #28]
 8004a5e:	4b14      	ldr	r3, [pc, #80]	; (8004ab0 <HAL_MspInit+0x7c>)
 8004a60:	69db      	ldr	r3, [r3, #28]
 8004a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a66:	607b      	str	r3, [r7, #4]
 8004a68:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	2100      	movs	r1, #0
 8004a6e:	2004      	movs	r0, #4
 8004a70:	f001 f867 	bl	8005b42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8004a74:	2004      	movs	r0, #4
 8004a76:	f001 f880 	bl	8005b7a <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	2100      	movs	r1, #0
 8004a7e:	2005      	movs	r0, #5
 8004a80:	f001 f85f 	bl	8005b42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8004a84:	2005      	movs	r0, #5
 8004a86:	f001 f878 	bl	8005b7a <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004a8a:	4b0a      	ldr	r3, [pc, #40]	; (8004ab4 <HAL_MspInit+0x80>)
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	60fb      	str	r3, [r7, #12]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004a96:	60fb      	str	r3, [r7, #12]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004a9e:	60fb      	str	r3, [r7, #12]
 8004aa0:	4a04      	ldr	r2, [pc, #16]	; (8004ab4 <HAL_MspInit+0x80>)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004aa6:	bf00      	nop
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	40021000 	.word	0x40021000
 8004ab4:	40010000 	.word	0x40010000

08004ab8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b088      	sub	sp, #32
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ac0:	f107 0310 	add.w	r3, r7, #16
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	601a      	str	r2, [r3, #0]
 8004ac8:	605a      	str	r2, [r3, #4]
 8004aca:	609a      	str	r2, [r3, #8]
 8004acc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a2d      	ldr	r2, [pc, #180]	; (8004b88 <HAL_ADC_MspInit+0xd0>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d152      	bne.n	8004b7e <HAL_ADC_MspInit+0xc6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004ad8:	4b2c      	ldr	r3, [pc, #176]	; (8004b8c <HAL_ADC_MspInit+0xd4>)
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	4a2b      	ldr	r2, [pc, #172]	; (8004b8c <HAL_ADC_MspInit+0xd4>)
 8004ade:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ae2:	6193      	str	r3, [r2, #24]
 8004ae4:	4b29      	ldr	r3, [pc, #164]	; (8004b8c <HAL_ADC_MspInit+0xd4>)
 8004ae6:	699b      	ldr	r3, [r3, #24]
 8004ae8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004aec:	60fb      	str	r3, [r7, #12]
 8004aee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004af0:	4b26      	ldr	r3, [pc, #152]	; (8004b8c <HAL_ADC_MspInit+0xd4>)
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	4a25      	ldr	r2, [pc, #148]	; (8004b8c <HAL_ADC_MspInit+0xd4>)
 8004af6:	f043 0304 	orr.w	r3, r3, #4
 8004afa:	6193      	str	r3, [r2, #24]
 8004afc:	4b23      	ldr	r3, [pc, #140]	; (8004b8c <HAL_ADC_MspInit+0xd4>)
 8004afe:	699b      	ldr	r3, [r3, #24]
 8004b00:	f003 0304 	and.w	r3, r3, #4
 8004b04:	60bb      	str	r3, [r7, #8]
 8004b06:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8004b08:	23c3      	movs	r3, #195	; 0xc3
 8004b0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b10:	f107 0310 	add.w	r3, r7, #16
 8004b14:	4619      	mov	r1, r3
 8004b16:	481e      	ldr	r0, [pc, #120]	; (8004b90 <HAL_ADC_MspInit+0xd8>)
 8004b18:	f001 fd2e 	bl	8006578 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004b1c:	4b1d      	ldr	r3, [pc, #116]	; (8004b94 <HAL_ADC_MspInit+0xdc>)
 8004b1e:	4a1e      	ldr	r2, [pc, #120]	; (8004b98 <HAL_ADC_MspInit+0xe0>)
 8004b20:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004b22:	4b1c      	ldr	r3, [pc, #112]	; (8004b94 <HAL_ADC_MspInit+0xdc>)
 8004b24:	2200      	movs	r2, #0
 8004b26:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b28:	4b1a      	ldr	r3, [pc, #104]	; (8004b94 <HAL_ADC_MspInit+0xdc>)
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004b2e:	4b19      	ldr	r3, [pc, #100]	; (8004b94 <HAL_ADC_MspInit+0xdc>)
 8004b30:	2280      	movs	r2, #128	; 0x80
 8004b32:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004b34:	4b17      	ldr	r3, [pc, #92]	; (8004b94 <HAL_ADC_MspInit+0xdc>)
 8004b36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b3a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004b3c:	4b15      	ldr	r3, [pc, #84]	; (8004b94 <HAL_ADC_MspInit+0xdc>)
 8004b3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004b42:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8004b44:	4b13      	ldr	r3, [pc, #76]	; (8004b94 <HAL_ADC_MspInit+0xdc>)
 8004b46:	2200      	movs	r2, #0
 8004b48:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004b4a:	4b12      	ldr	r3, [pc, #72]	; (8004b94 <HAL_ADC_MspInit+0xdc>)
 8004b4c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8004b50:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004b52:	4810      	ldr	r0, [pc, #64]	; (8004b94 <HAL_ADC_MspInit+0xdc>)
 8004b54:	f001 f82c 	bl	8005bb0 <HAL_DMA_Init>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d001      	beq.n	8004b62 <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 8004b5e:	f7ff ff63 	bl	8004a28 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a0b      	ldr	r2, [pc, #44]	; (8004b94 <HAL_ADC_MspInit+0xdc>)
 8004b66:	621a      	str	r2, [r3, #32]
 8004b68:	4a0a      	ldr	r2, [pc, #40]	; (8004b94 <HAL_ADC_MspInit+0xdc>)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8004b6e:	2200      	movs	r2, #0
 8004b70:	2100      	movs	r1, #0
 8004b72:	2012      	movs	r0, #18
 8004b74:	f000 ffe5 	bl	8005b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8004b78:	2012      	movs	r0, #18
 8004b7a:	f000 fffe 	bl	8005b7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004b7e:	bf00      	nop
 8004b80:	3720      	adds	r7, #32
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	40012400 	.word	0x40012400
 8004b8c:	40021000 	.word	0x40021000
 8004b90:	40010800 	.word	0x40010800
 8004b94:	200005b0 	.word	0x200005b0
 8004b98:	40020008 	.word	0x40020008

08004b9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b088      	sub	sp, #32
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ba4:	f107 0310 	add.w	r3, r7, #16
 8004ba8:	2200      	movs	r2, #0
 8004baa:	601a      	str	r2, [r3, #0]
 8004bac:	605a      	str	r2, [r3, #4]
 8004bae:	609a      	str	r2, [r3, #8]
 8004bb0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a15      	ldr	r2, [pc, #84]	; (8004c0c <HAL_I2C_MspInit+0x70>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d123      	bne.n	8004c04 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bbc:	4b14      	ldr	r3, [pc, #80]	; (8004c10 <HAL_I2C_MspInit+0x74>)
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	4a13      	ldr	r2, [pc, #76]	; (8004c10 <HAL_I2C_MspInit+0x74>)
 8004bc2:	f043 0308 	orr.w	r3, r3, #8
 8004bc6:	6193      	str	r3, [r2, #24]
 8004bc8:	4b11      	ldr	r3, [pc, #68]	; (8004c10 <HAL_I2C_MspInit+0x74>)
 8004bca:	699b      	ldr	r3, [r3, #24]
 8004bcc:	f003 0308 	and.w	r3, r3, #8
 8004bd0:	60fb      	str	r3, [r7, #12]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004bd4:	23c0      	movs	r3, #192	; 0xc0
 8004bd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004bd8:	2312      	movs	r3, #18
 8004bda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004be0:	f107 0310 	add.w	r3, r7, #16
 8004be4:	4619      	mov	r1, r3
 8004be6:	480b      	ldr	r0, [pc, #44]	; (8004c14 <HAL_I2C_MspInit+0x78>)
 8004be8:	f001 fcc6 	bl	8006578 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004bec:	4b08      	ldr	r3, [pc, #32]	; (8004c10 <HAL_I2C_MspInit+0x74>)
 8004bee:	69db      	ldr	r3, [r3, #28]
 8004bf0:	4a07      	ldr	r2, [pc, #28]	; (8004c10 <HAL_I2C_MspInit+0x74>)
 8004bf2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004bf6:	61d3      	str	r3, [r2, #28]
 8004bf8:	4b05      	ldr	r3, [pc, #20]	; (8004c10 <HAL_I2C_MspInit+0x74>)
 8004bfa:	69db      	ldr	r3, [r3, #28]
 8004bfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c00:	60bb      	str	r3, [r7, #8]
 8004c02:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004c04:	bf00      	nop
 8004c06:	3720      	adds	r7, #32
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	40005400 	.word	0x40005400
 8004c10:	40021000 	.word	0x40021000
 8004c14:	40010c00 	.word	0x40010c00

08004c18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b086      	sub	sp, #24
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a34      	ldr	r2, [pc, #208]	; (8004cf8 <HAL_TIM_Base_MspInit+0xe0>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d114      	bne.n	8004c54 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004c2a:	4b34      	ldr	r3, [pc, #208]	; (8004cfc <HAL_TIM_Base_MspInit+0xe4>)
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	4a33      	ldr	r2, [pc, #204]	; (8004cfc <HAL_TIM_Base_MspInit+0xe4>)
 8004c30:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004c34:	6193      	str	r3, [r2, #24]
 8004c36:	4b31      	ldr	r3, [pc, #196]	; (8004cfc <HAL_TIM_Base_MspInit+0xe4>)
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c3e:	617b      	str	r3, [r7, #20]
 8004c40:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8004c42:	2200      	movs	r2, #0
 8004c44:	2100      	movs	r1, #0
 8004c46:	2019      	movs	r0, #25
 8004c48:	f000 ff7b 	bl	8005b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8004c4c:	2019      	movs	r0, #25
 8004c4e:	f000 ff94 	bl	8005b7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004c52:	e04c      	b.n	8004cee <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM2)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c5c:	d114      	bne.n	8004c88 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004c5e:	4b27      	ldr	r3, [pc, #156]	; (8004cfc <HAL_TIM_Base_MspInit+0xe4>)
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	4a26      	ldr	r2, [pc, #152]	; (8004cfc <HAL_TIM_Base_MspInit+0xe4>)
 8004c64:	f043 0301 	orr.w	r3, r3, #1
 8004c68:	61d3      	str	r3, [r2, #28]
 8004c6a:	4b24      	ldr	r3, [pc, #144]	; (8004cfc <HAL_TIM_Base_MspInit+0xe4>)
 8004c6c:	69db      	ldr	r3, [r3, #28]
 8004c6e:	f003 0301 	and.w	r3, r3, #1
 8004c72:	613b      	str	r3, [r7, #16]
 8004c74:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8004c76:	2200      	movs	r2, #0
 8004c78:	2103      	movs	r1, #3
 8004c7a:	201c      	movs	r0, #28
 8004c7c:	f000 ff61 	bl	8005b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004c80:	201c      	movs	r0, #28
 8004c82:	f000 ff7a 	bl	8005b7a <HAL_NVIC_EnableIRQ>
}
 8004c86:	e032      	b.n	8004cee <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM3)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a1c      	ldr	r2, [pc, #112]	; (8004d00 <HAL_TIM_Base_MspInit+0xe8>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d114      	bne.n	8004cbc <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004c92:	4b1a      	ldr	r3, [pc, #104]	; (8004cfc <HAL_TIM_Base_MspInit+0xe4>)
 8004c94:	69db      	ldr	r3, [r3, #28]
 8004c96:	4a19      	ldr	r2, [pc, #100]	; (8004cfc <HAL_TIM_Base_MspInit+0xe4>)
 8004c98:	f043 0302 	orr.w	r3, r3, #2
 8004c9c:	61d3      	str	r3, [r2, #28]
 8004c9e:	4b17      	ldr	r3, [pc, #92]	; (8004cfc <HAL_TIM_Base_MspInit+0xe4>)
 8004ca0:	69db      	ldr	r3, [r3, #28]
 8004ca2:	f003 0302 	and.w	r3, r3, #2
 8004ca6:	60fb      	str	r3, [r7, #12]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 8004caa:	2200      	movs	r2, #0
 8004cac:	2103      	movs	r1, #3
 8004cae:	201d      	movs	r0, #29
 8004cb0:	f000 ff47 	bl	8005b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004cb4:	201d      	movs	r0, #29
 8004cb6:	f000 ff60 	bl	8005b7a <HAL_NVIC_EnableIRQ>
}
 8004cba:	e018      	b.n	8004cee <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM4)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a10      	ldr	r2, [pc, #64]	; (8004d04 <HAL_TIM_Base_MspInit+0xec>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d113      	bne.n	8004cee <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004cc6:	4b0d      	ldr	r3, [pc, #52]	; (8004cfc <HAL_TIM_Base_MspInit+0xe4>)
 8004cc8:	69db      	ldr	r3, [r3, #28]
 8004cca:	4a0c      	ldr	r2, [pc, #48]	; (8004cfc <HAL_TIM_Base_MspInit+0xe4>)
 8004ccc:	f043 0304 	orr.w	r3, r3, #4
 8004cd0:	61d3      	str	r3, [r2, #28]
 8004cd2:	4b0a      	ldr	r3, [pc, #40]	; (8004cfc <HAL_TIM_Base_MspInit+0xe4>)
 8004cd4:	69db      	ldr	r3, [r3, #28]
 8004cd6:	f003 0304 	and.w	r3, r3, #4
 8004cda:	60bb      	str	r3, [r7, #8]
 8004cdc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8004cde:	2200      	movs	r2, #0
 8004ce0:	2101      	movs	r1, #1
 8004ce2:	201e      	movs	r0, #30
 8004ce4:	f000 ff2d 	bl	8005b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004ce8:	201e      	movs	r0, #30
 8004cea:	f000 ff46 	bl	8005b7a <HAL_NVIC_EnableIRQ>
}
 8004cee:	bf00      	nop
 8004cf0:	3718      	adds	r7, #24
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	40012c00 	.word	0x40012c00
 8004cfc:	40021000 	.word	0x40021000
 8004d00:	40000400 	.word	0x40000400
 8004d04:	40000800 	.word	0x40000800

08004d08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b088      	sub	sp, #32
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d10:	f107 0310 	add.w	r3, r7, #16
 8004d14:	2200      	movs	r2, #0
 8004d16:	601a      	str	r2, [r3, #0]
 8004d18:	605a      	str	r2, [r3, #4]
 8004d1a:	609a      	str	r2, [r3, #8]
 8004d1c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d26:	d117      	bne.n	8004d58 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d28:	4b0d      	ldr	r3, [pc, #52]	; (8004d60 <HAL_TIM_MspPostInit+0x58>)
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	4a0c      	ldr	r2, [pc, #48]	; (8004d60 <HAL_TIM_MspPostInit+0x58>)
 8004d2e:	f043 0304 	orr.w	r3, r3, #4
 8004d32:	6193      	str	r3, [r2, #24]
 8004d34:	4b0a      	ldr	r3, [pc, #40]	; (8004d60 <HAL_TIM_MspPostInit+0x58>)
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	f003 0304 	and.w	r3, r3, #4
 8004d3c:	60fb      	str	r3, [r7, #12]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004d40:	2308      	movs	r3, #8
 8004d42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d44:	2302      	movs	r3, #2
 8004d46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d4c:	f107 0310 	add.w	r3, r7, #16
 8004d50:	4619      	mov	r1, r3
 8004d52:	4804      	ldr	r0, [pc, #16]	; (8004d64 <HAL_TIM_MspPostInit+0x5c>)
 8004d54:	f001 fc10 	bl	8006578 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004d58:	bf00      	nop
 8004d5a:	3720      	adds	r7, #32
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	40021000 	.word	0x40021000
 8004d64:	40010800 	.word	0x40010800

08004d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004d6c:	e7fe      	b.n	8004d6c <NMI_Handler+0x4>

08004d6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d72:	e7fe      	b.n	8004d72 <HardFault_Handler+0x4>

08004d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d74:	b480      	push	{r7}
 8004d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004d78:	e7fe      	b.n	8004d78 <MemManage_Handler+0x4>

08004d7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d7a:	b480      	push	{r7}
 8004d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004d7e:	e7fe      	b.n	8004d7e <BusFault_Handler+0x4>

08004d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d80:	b480      	push	{r7}
 8004d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004d84:	e7fe      	b.n	8004d84 <UsageFault_Handler+0x4>

08004d86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004d86:	b480      	push	{r7}
 8004d88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004d8a:	bf00      	nop
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bc80      	pop	{r7}
 8004d90:	4770      	bx	lr

08004d92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004d92:	b480      	push	{r7}
 8004d94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004d96:	bf00      	nop
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bc80      	pop	{r7}
 8004d9c:	4770      	bx	lr

08004d9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004d9e:	b480      	push	{r7}
 8004da0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004da2:	bf00      	nop
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bc80      	pop	{r7}
 8004da8:	4770      	bx	lr

08004daa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004daa:	b580      	push	{r7, lr}
 8004dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004dae:	f000 f91b 	bl	8004fe8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004db2:	bf00      	nop
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8004db6:	b580      	push	{r7, lr}
 8004db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8004dba:	f001 f957 	bl	800606c <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8004dbe:	bf00      	nop
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8004dc2:	b480      	push	{r7}
 8004dc4:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8004dc6:	bf00      	nop
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bc80      	pop	{r7}
 8004dcc:	4770      	bx	lr

08004dce <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004dce:	b580      	push	{r7, lr}
 8004dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8004dd2:	2002      	movs	r0, #2
 8004dd4:	f001 fd84 	bl	80068e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004dd8:	bf00      	nop
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8004de0:	2004      	movs	r0, #4
 8004de2:	f001 fd7d 	bl	80068e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8004de6:	bf00      	nop
 8004de8:	bd80      	pop	{r7, pc}

08004dea <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004dea:	b580      	push	{r7, lr}
 8004dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8004dee:	2008      	movs	r0, #8
 8004df0:	f001 fd76 	bl	80068e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004df4:	bf00      	nop
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004dfc:	4802      	ldr	r0, [pc, #8]	; (8004e08 <DMA1_Channel1_IRQHandler+0x10>)
 8004dfe:	f000 ff91 	bl	8005d24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004e02:	bf00      	nop
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	200005b0 	.word	0x200005b0

08004e0c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004e10:	4802      	ldr	r0, [pc, #8]	; (8004e1c <ADC1_2_IRQHandler+0x10>)
 8004e12:	f000 fadf 	bl	80053d4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8004e16:	bf00      	nop
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	20000580 	.word	0x20000580

08004e20 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004e24:	4802      	ldr	r0, [pc, #8]	; (8004e30 <TIM1_UP_IRQHandler+0x10>)
 8004e26:	f003 f9a7 	bl	8008178 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8004e2a:	bf00      	nop
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	20000648 	.word	0x20000648

08004e34 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004e38:	4802      	ldr	r0, [pc, #8]	; (8004e44 <TIM2_IRQHandler+0x10>)
 8004e3a:	f003 f99d 	bl	8008178 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004e3e:	bf00      	nop
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	20000690 	.word	0x20000690

08004e48 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004e4c:	4802      	ldr	r0, [pc, #8]	; (8004e58 <TIM3_IRQHandler+0x10>)
 8004e4e:	f003 f993 	bl	8008178 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004e52:	bf00      	nop
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	200006d8 	.word	0x200006d8

08004e5c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004e60:	4802      	ldr	r0, [pc, #8]	; (8004e6c <TIM4_IRQHandler+0x10>)
 8004e62:	f003 f989 	bl	8008178 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004e66:	bf00      	nop
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	20000720 	.word	0x20000720

08004e70 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8004e74:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004e78:	f001 fd32 	bl	80068e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8004e7c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004e80:	f001 fd2e 	bl	80068e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8004e84:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004e88:	f001 fd2a 	bl	80068e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004e8c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004e90:	f001 fd26 	bl	80068e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004e94:	bf00      	nop
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <_sbrk>:
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b086      	sub	sp, #24
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	4a14      	ldr	r2, [pc, #80]	; (8004ef4 <_sbrk+0x5c>)
 8004ea2:	4b15      	ldr	r3, [pc, #84]	; (8004ef8 <_sbrk+0x60>)
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	617b      	str	r3, [r7, #20]
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	613b      	str	r3, [r7, #16]
 8004eac:	4b13      	ldr	r3, [pc, #76]	; (8004efc <_sbrk+0x64>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d102      	bne.n	8004eba <_sbrk+0x22>
 8004eb4:	4b11      	ldr	r3, [pc, #68]	; (8004efc <_sbrk+0x64>)
 8004eb6:	4a12      	ldr	r2, [pc, #72]	; (8004f00 <_sbrk+0x68>)
 8004eb8:	601a      	str	r2, [r3, #0]
 8004eba:	4b10      	ldr	r3, [pc, #64]	; (8004efc <_sbrk+0x64>)
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	693a      	ldr	r2, [r7, #16]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d207      	bcs.n	8004ed8 <_sbrk+0x40>
 8004ec8:	f003 ffe4 	bl	8008e94 <__errno>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	220c      	movs	r2, #12
 8004ed0:	601a      	str	r2, [r3, #0]
 8004ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ed6:	e009      	b.n	8004eec <_sbrk+0x54>
 8004ed8:	4b08      	ldr	r3, [pc, #32]	; (8004efc <_sbrk+0x64>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	60fb      	str	r3, [r7, #12]
 8004ede:	4b07      	ldr	r3, [pc, #28]	; (8004efc <_sbrk+0x64>)
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	4a05      	ldr	r2, [pc, #20]	; (8004efc <_sbrk+0x64>)
 8004ee8:	6013      	str	r3, [r2, #0]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	4618      	mov	r0, r3
 8004eee:	3718      	adds	r7, #24
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	20005000 	.word	0x20005000
 8004ef8:	00000400 	.word	0x00000400
 8004efc:	20000a0c 	.word	0x20000a0c
 8004f00:	20000b80 	.word	0x20000b80

08004f04 <SystemInit>:
 8004f04:	b480      	push	{r7}
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	bf00      	nop
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bc80      	pop	{r7}
 8004f0e:	4770      	bx	lr

08004f10 <Reset_Handler>:
 8004f10:	f7ff fff8 	bl	8004f04 <SystemInit>
 8004f14:	480b      	ldr	r0, [pc, #44]	; (8004f44 <LoopFillZerobss+0xe>)
 8004f16:	490c      	ldr	r1, [pc, #48]	; (8004f48 <LoopFillZerobss+0x12>)
 8004f18:	4a0c      	ldr	r2, [pc, #48]	; (8004f4c <LoopFillZerobss+0x16>)
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	e002      	b.n	8004f24 <LoopCopyDataInit>

08004f1e <CopyDataInit>:
 8004f1e:	58d4      	ldr	r4, [r2, r3]
 8004f20:	50c4      	str	r4, [r0, r3]
 8004f22:	3304      	adds	r3, #4

08004f24 <LoopCopyDataInit>:
 8004f24:	18c4      	adds	r4, r0, r3
 8004f26:	428c      	cmp	r4, r1
 8004f28:	d3f9      	bcc.n	8004f1e <CopyDataInit>
 8004f2a:	4a09      	ldr	r2, [pc, #36]	; (8004f50 <LoopFillZerobss+0x1a>)
 8004f2c:	4c09      	ldr	r4, [pc, #36]	; (8004f54 <LoopFillZerobss+0x1e>)
 8004f2e:	2300      	movs	r3, #0
 8004f30:	e001      	b.n	8004f36 <LoopFillZerobss>

08004f32 <FillZerobss>:
 8004f32:	6013      	str	r3, [r2, #0]
 8004f34:	3204      	adds	r2, #4

08004f36 <LoopFillZerobss>:
 8004f36:	42a2      	cmp	r2, r4
 8004f38:	d3fb      	bcc.n	8004f32 <FillZerobss>
 8004f3a:	f003 ffb1 	bl	8008ea0 <__libc_init_array>
 8004f3e:	f7ff f8f5 	bl	800412c <main>
 8004f42:	4770      	bx	lr
 8004f44:	20000000 	.word	0x20000000
 8004f48:	200004d8 	.word	0x200004d8
 8004f4c:	0800906c 	.word	0x0800906c
 8004f50:	200004d8 	.word	0x200004d8
 8004f54:	20000b80 	.word	0x20000b80

08004f58 <CAN1_RX1_IRQHandler>:
 8004f58:	e7fe      	b.n	8004f58 <CAN1_RX1_IRQHandler>
	...

08004f5c <HAL_Init>:
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	4b08      	ldr	r3, [pc, #32]	; (8004f84 <HAL_Init+0x28>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a07      	ldr	r2, [pc, #28]	; (8004f84 <HAL_Init+0x28>)
 8004f66:	f043 0310 	orr.w	r3, r3, #16
 8004f6a:	6013      	str	r3, [r2, #0]
 8004f6c:	2003      	movs	r0, #3
 8004f6e:	f000 fddd 	bl	8005b2c <HAL_NVIC_SetPriorityGrouping>
 8004f72:	200f      	movs	r0, #15
 8004f74:	f000 f808 	bl	8004f88 <HAL_InitTick>
 8004f78:	f7ff fd5c 	bl	8004a34 <HAL_MspInit>
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	4618      	mov	r0, r3
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	40022000 	.word	0x40022000

08004f88 <HAL_InitTick>:
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	4b12      	ldr	r3, [pc, #72]	; (8004fdc <HAL_InitTick+0x54>)
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	4b12      	ldr	r3, [pc, #72]	; (8004fe0 <HAL_InitTick+0x58>)
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	4619      	mov	r1, r3
 8004f9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f000 fdf5 	bl	8005b96 <HAL_SYSTICK_Config>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d001      	beq.n	8004fb6 <HAL_InitTick+0x2e>
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e00e      	b.n	8004fd4 <HAL_InitTick+0x4c>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2b0f      	cmp	r3, #15
 8004fba:	d80a      	bhi.n	8004fd2 <HAL_InitTick+0x4a>
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	6879      	ldr	r1, [r7, #4]
 8004fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fc4:	f000 fdbd 	bl	8005b42 <HAL_NVIC_SetPriority>
 8004fc8:	4a06      	ldr	r2, [pc, #24]	; (8004fe4 <HAL_InitTick+0x5c>)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6013      	str	r3, [r2, #0]
 8004fce:	2300      	movs	r3, #0
 8004fd0:	e000      	b.n	8004fd4 <HAL_InitTick+0x4c>
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3708      	adds	r7, #8
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	2000047c 	.word	0x2000047c
 8004fe0:	20000484 	.word	0x20000484
 8004fe4:	20000480 	.word	0x20000480

08004fe8 <HAL_IncTick>:
 8004fe8:	b480      	push	{r7}
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	4b05      	ldr	r3, [pc, #20]	; (8005004 <HAL_IncTick+0x1c>)
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	4b05      	ldr	r3, [pc, #20]	; (8005008 <HAL_IncTick+0x20>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4413      	add	r3, r2
 8004ff8:	4a03      	ldr	r2, [pc, #12]	; (8005008 <HAL_IncTick+0x20>)
 8004ffa:	6013      	str	r3, [r2, #0]
 8004ffc:	bf00      	nop
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bc80      	pop	{r7}
 8005002:	4770      	bx	lr
 8005004:	20000484 	.word	0x20000484
 8005008:	20000a10 	.word	0x20000a10

0800500c <HAL_GetTick>:
 800500c:	b480      	push	{r7}
 800500e:	af00      	add	r7, sp, #0
 8005010:	4b02      	ldr	r3, [pc, #8]	; (800501c <HAL_GetTick+0x10>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4618      	mov	r0, r3
 8005016:	46bd      	mov	sp, r7
 8005018:	bc80      	pop	{r7}
 800501a:	4770      	bx	lr
 800501c:	20000a10 	.word	0x20000a10

08005020 <HAL_Delay>:
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	f7ff fff0 	bl	800500c <HAL_GetTick>
 800502c:	60b8      	str	r0, [r7, #8]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	60fb      	str	r3, [r7, #12]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005038:	d005      	beq.n	8005046 <HAL_Delay+0x26>
 800503a:	4b0a      	ldr	r3, [pc, #40]	; (8005064 <HAL_Delay+0x44>)
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	461a      	mov	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	4413      	add	r3, r2
 8005044:	60fb      	str	r3, [r7, #12]
 8005046:	bf00      	nop
 8005048:	f7ff ffe0 	bl	800500c <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	429a      	cmp	r2, r3
 8005056:	d8f7      	bhi.n	8005048 <HAL_Delay+0x28>
 8005058:	bf00      	nop
 800505a:	bf00      	nop
 800505c:	3710      	adds	r7, #16
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	20000484 	.word	0x20000484

08005068 <HAL_ADC_Init>:
 8005068:	b580      	push	{r7, lr}
 800506a:	b086      	sub	sp, #24
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	2300      	movs	r3, #0
 8005072:	75fb      	strb	r3, [r7, #23]
 8005074:	2300      	movs	r3, #0
 8005076:	613b      	str	r3, [r7, #16]
 8005078:	2300      	movs	r3, #0
 800507a:	60bb      	str	r3, [r7, #8]
 800507c:	2300      	movs	r3, #0
 800507e:	60fb      	str	r3, [r7, #12]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <HAL_ADC_Init+0x22>
 8005086:	2301      	movs	r3, #1
 8005088:	e0be      	b.n	8005208 <HAL_ADC_Init+0x1a0>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	2b00      	cmp	r3, #0
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005094:	2b00      	cmp	r3, #0
 8005096:	d109      	bne.n	80050ac <HAL_ADC_Init+0x44>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	62da      	str	r2, [r3, #44]	; 0x2c
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f7ff fd06 	bl	8004ab8 <HAL_ADC_MspInit>
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 fbc1 	bl	8005834 <ADC_ConversionStop_Disable>
 80050b2:	4603      	mov	r3, r0
 80050b4:	75fb      	strb	r3, [r7, #23]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ba:	f003 0310 	and.w	r3, r3, #16
 80050be:	2b00      	cmp	r3, #0
 80050c0:	f040 8099 	bne.w	80051f6 <HAL_ADC_Init+0x18e>
 80050c4:	7dfb      	ldrb	r3, [r7, #23]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	f040 8095 	bne.w	80051f6 <HAL_ADC_Init+0x18e>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80050d4:	f023 0302 	bic.w	r3, r3, #2
 80050d8:	f043 0202 	orr.w	r2, r3, #2
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	629a      	str	r2, [r3, #40]	; 0x28
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685a      	ldr	r2, [r3, #4]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	69db      	ldr	r3, [r3, #28]
 80050e8:	431a      	orrs	r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	7b1b      	ldrb	r3, [r3, #12]
 80050ee:	005b      	lsls	r3, r3, #1
 80050f0:	4313      	orrs	r3, r2
 80050f2:	68ba      	ldr	r2, [r7, #8]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	60bb      	str	r3, [r7, #8]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005100:	d003      	beq.n	800510a <HAL_ADC_Init+0xa2>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	2b01      	cmp	r3, #1
 8005108:	d102      	bne.n	8005110 <HAL_ADC_Init+0xa8>
 800510a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800510e:	e000      	b.n	8005112 <HAL_ADC_Init+0xaa>
 8005110:	2300      	movs	r3, #0
 8005112:	693a      	ldr	r2, [r7, #16]
 8005114:	4313      	orrs	r3, r2
 8005116:	613b      	str	r3, [r7, #16]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	7d1b      	ldrb	r3, [r3, #20]
 800511c:	2b01      	cmp	r3, #1
 800511e:	d119      	bne.n	8005154 <HAL_ADC_Init+0xec>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	7b1b      	ldrb	r3, [r3, #12]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d109      	bne.n	800513c <HAL_ADC_Init+0xd4>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	3b01      	subs	r3, #1
 800512e:	035a      	lsls	r2, r3, #13
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	4313      	orrs	r3, r2
 8005134:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005138:	613b      	str	r3, [r7, #16]
 800513a:	e00b      	b.n	8005154 <HAL_ADC_Init+0xec>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005140:	f043 0220 	orr.w	r2, r3, #32
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	629a      	str	r2, [r3, #40]	; 0x28
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800514c:	f043 0201 	orr.w	r2, r3, #1
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	62da      	str	r2, [r3, #44]	; 0x2c
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	430a      	orrs	r2, r1
 8005166:	605a      	str	r2, [r3, #4]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	689a      	ldr	r2, [r3, #8]
 800516e:	4b28      	ldr	r3, [pc, #160]	; (8005210 <HAL_ADC_Init+0x1a8>)
 8005170:	4013      	ands	r3, r2
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	6812      	ldr	r2, [r2, #0]
 8005176:	68b9      	ldr	r1, [r7, #8]
 8005178:	430b      	orrs	r3, r1
 800517a:	6093      	str	r3, [r2, #8]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005184:	d003      	beq.n	800518e <HAL_ADC_Init+0x126>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	2b01      	cmp	r3, #1
 800518c:	d104      	bne.n	8005198 <HAL_ADC_Init+0x130>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	3b01      	subs	r3, #1
 8005194:	051b      	lsls	r3, r3, #20
 8005196:	60fb      	str	r3, [r7, #12]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	430a      	orrs	r2, r1
 80051aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	689a      	ldr	r2, [r3, #8]
 80051b2:	4b18      	ldr	r3, [pc, #96]	; (8005214 <HAL_ADC_Init+0x1ac>)
 80051b4:	4013      	ands	r3, r2
 80051b6:	68ba      	ldr	r2, [r7, #8]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d10b      	bne.n	80051d4 <HAL_ADC_Init+0x16c>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c6:	f023 0303 	bic.w	r3, r3, #3
 80051ca:	f043 0201 	orr.w	r2, r3, #1
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	629a      	str	r2, [r3, #40]	; 0x28
 80051d2:	e018      	b.n	8005206 <HAL_ADC_Init+0x19e>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d8:	f023 0312 	bic.w	r3, r3, #18
 80051dc:	f043 0210 	orr.w	r2, r3, #16
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	629a      	str	r2, [r3, #40]	; 0x28
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e8:	f043 0201 	orr.w	r2, r3, #1
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80051f0:	2301      	movs	r3, #1
 80051f2:	75fb      	strb	r3, [r7, #23]
 80051f4:	e007      	b.n	8005206 <HAL_ADC_Init+0x19e>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051fa:	f043 0210 	orr.w	r2, r3, #16
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	629a      	str	r2, [r3, #40]	; 0x28
 8005202:	2301      	movs	r3, #1
 8005204:	75fb      	strb	r3, [r7, #23]
 8005206:	7dfb      	ldrb	r3, [r7, #23]
 8005208:	4618      	mov	r0, r3
 800520a:	3718      	adds	r7, #24
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	ffe1f7fd 	.word	0xffe1f7fd
 8005214:	ff1f0efe 	.word	0xff1f0efe

08005218 <HAL_ADC_Start_DMA>:
 8005218:	b580      	push	{r7, lr}
 800521a:	b086      	sub	sp, #24
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
 8005224:	2300      	movs	r3, #0
 8005226:	75fb      	strb	r3, [r7, #23]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a64      	ldr	r2, [pc, #400]	; (80053c0 <HAL_ADC_Start_DMA+0x1a8>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d004      	beq.n	800523c <HAL_ADC_Start_DMA+0x24>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a63      	ldr	r2, [pc, #396]	; (80053c4 <HAL_ADC_Start_DMA+0x1ac>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d106      	bne.n	800524a <HAL_ADC_Start_DMA+0x32>
 800523c:	4b60      	ldr	r3, [pc, #384]	; (80053c0 <HAL_ADC_Start_DMA+0x1a8>)
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8005244:	2b00      	cmp	r3, #0
 8005246:	f040 80b3 	bne.w	80053b0 <HAL_ADC_Start_DMA+0x198>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005250:	2b01      	cmp	r3, #1
 8005252:	d101      	bne.n	8005258 <HAL_ADC_Start_DMA+0x40>
 8005254:	2302      	movs	r3, #2
 8005256:	e0ae      	b.n	80053b6 <HAL_ADC_Start_DMA+0x19e>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005260:	68f8      	ldr	r0, [r7, #12]
 8005262:	f000 fa8d 	bl	8005780 <ADC_Enable>
 8005266:	4603      	mov	r3, r0
 8005268:	75fb      	strb	r3, [r7, #23]
 800526a:	7dfb      	ldrb	r3, [r7, #23]
 800526c:	2b00      	cmp	r3, #0
 800526e:	f040 809a 	bne.w	80053a6 <HAL_ADC_Start_DMA+0x18e>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005276:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800527a:	f023 0301 	bic.w	r3, r3, #1
 800527e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	629a      	str	r2, [r3, #40]	; 0x28
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a4e      	ldr	r2, [pc, #312]	; (80053c4 <HAL_ADC_Start_DMA+0x1ac>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d105      	bne.n	800529c <HAL_ADC_Start_DMA+0x84>
 8005290:	4b4b      	ldr	r3, [pc, #300]	; (80053c0 <HAL_ADC_Start_DMA+0x1a8>)
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d115      	bne.n	80052c8 <HAL_ADC_Start_DMA+0xb0>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	629a      	str	r2, [r3, #40]	; 0x28
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d026      	beq.n	8005304 <HAL_ADC_Start_DMA+0xec>
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80052be:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	629a      	str	r2, [r3, #40]	; 0x28
 80052c6:	e01d      	b.n	8005304 <HAL_ADC_Start_DMA+0xec>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052cc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	629a      	str	r2, [r3, #40]	; 0x28
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a39      	ldr	r2, [pc, #228]	; (80053c0 <HAL_ADC_Start_DMA+0x1a8>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d004      	beq.n	80052e8 <HAL_ADC_Start_DMA+0xd0>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a38      	ldr	r2, [pc, #224]	; (80053c4 <HAL_ADC_Start_DMA+0x1ac>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d10d      	bne.n	8005304 <HAL_ADC_Start_DMA+0xec>
 80052e8:	4b35      	ldr	r3, [pc, #212]	; (80053c0 <HAL_ADC_Start_DMA+0x1a8>)
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d007      	beq.n	8005304 <HAL_ADC_Start_DMA+0xec>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80052fc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	629a      	str	r2, [r3, #40]	; 0x28
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005308:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d006      	beq.n	800531e <HAL_ADC_Start_DMA+0x106>
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005314:	f023 0206 	bic.w	r2, r3, #6
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	62da      	str	r2, [r3, #44]	; 0x2c
 800531c:	e002      	b.n	8005324 <HAL_ADC_Start_DMA+0x10c>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2200      	movs	r2, #0
 8005322:	62da      	str	r2, [r3, #44]	; 0x2c
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6a1b      	ldr	r3, [r3, #32]
 8005330:	4a25      	ldr	r2, [pc, #148]	; (80053c8 <HAL_ADC_Start_DMA+0x1b0>)
 8005332:	629a      	str	r2, [r3, #40]	; 0x28
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6a1b      	ldr	r3, [r3, #32]
 8005338:	4a24      	ldr	r2, [pc, #144]	; (80053cc <HAL_ADC_Start_DMA+0x1b4>)
 800533a:	62da      	str	r2, [r3, #44]	; 0x2c
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6a1b      	ldr	r3, [r3, #32]
 8005340:	4a23      	ldr	r2, [pc, #140]	; (80053d0 <HAL_ADC_Start_DMA+0x1b8>)
 8005342:	631a      	str	r2, [r3, #48]	; 0x30
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f06f 0202 	mvn.w	r2, #2
 800534c:	601a      	str	r2, [r3, #0]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	689a      	ldr	r2, [r3, #8]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800535c:	609a      	str	r2, [r3, #8]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6a18      	ldr	r0, [r3, #32]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	334c      	adds	r3, #76	; 0x4c
 8005368:	4619      	mov	r1, r3
 800536a:	68ba      	ldr	r2, [r7, #8]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f000 fc79 	bl	8005c64 <HAL_DMA_Start_IT>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800537c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8005380:	d108      	bne.n	8005394 <HAL_ADC_Start_DMA+0x17c>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	689a      	ldr	r2, [r3, #8]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8005390:	609a      	str	r2, [r3, #8]
 8005392:	e00f      	b.n	80053b4 <HAL_ADC_Start_DMA+0x19c>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	689a      	ldr	r2, [r3, #8]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80053a2:	609a      	str	r2, [r3, #8]
 80053a4:	e006      	b.n	80053b4 <HAL_ADC_Start_DMA+0x19c>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80053ae:	e001      	b.n	80053b4 <HAL_ADC_Start_DMA+0x19c>
 80053b0:	2301      	movs	r3, #1
 80053b2:	75fb      	strb	r3, [r7, #23]
 80053b4:	7dfb      	ldrb	r3, [r7, #23]
 80053b6:	4618      	mov	r0, r3
 80053b8:	3718      	adds	r7, #24
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	40012400 	.word	0x40012400
 80053c4:	40012800 	.word	0x40012800
 80053c8:	080058b7 	.word	0x080058b7
 80053cc:	08005933 	.word	0x08005933
 80053d0:	0800594f 	.word	0x0800594f

080053d4 <HAL_ADC_IRQHandler>:
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f003 0320 	and.w	r3, r3, #32
 80053e6:	2b20      	cmp	r3, #32
 80053e8:	d140      	bne.n	800546c <HAL_ADC_IRQHandler+0x98>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0302 	and.w	r3, r3, #2
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d139      	bne.n	800546c <HAL_ADC_IRQHandler+0x98>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053fc:	f003 0310 	and.w	r3, r3, #16
 8005400:	2b00      	cmp	r3, #0
 8005402:	d105      	bne.n	8005410 <HAL_ADC_IRQHandler+0x3c>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005408:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	629a      	str	r2, [r3, #40]	; 0x28
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800541a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800541e:	d11d      	bne.n	800545c <HAL_ADC_IRQHandler+0x88>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	7b1b      	ldrb	r3, [r3, #12]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d119      	bne.n	800545c <HAL_ADC_IRQHandler+0x88>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	685a      	ldr	r2, [r3, #4]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f022 0220 	bic.w	r2, r2, #32
 8005436:	605a      	str	r2, [r3, #4]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800543c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	629a      	str	r2, [r3, #40]	; 0x28
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005448:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800544c:	2b00      	cmp	r3, #0
 800544e:	d105      	bne.n	800545c <HAL_ADC_IRQHandler+0x88>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005454:	f043 0201 	orr.w	r2, r3, #1
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	629a      	str	r2, [r3, #40]	; 0x28
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f7fe f9b5 	bl	80037cc <HAL_ADC_ConvCpltCallback>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f06f 0212 	mvn.w	r2, #18
 800546a:	601a      	str	r2, [r3, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005476:	2b80      	cmp	r3, #128	; 0x80
 8005478:	d14f      	bne.n	800551a <HAL_ADC_IRQHandler+0x146>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0304 	and.w	r3, r3, #4
 8005484:	2b04      	cmp	r3, #4
 8005486:	d148      	bne.n	800551a <HAL_ADC_IRQHandler+0x146>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800548c:	f003 0310 	and.w	r3, r3, #16
 8005490:	2b00      	cmp	r3, #0
 8005492:	d105      	bne.n	80054a0 <HAL_ADC_IRQHandler+0xcc>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005498:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	629a      	str	r2, [r3, #40]	; 0x28
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80054aa:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80054ae:	d012      	beq.n	80054d6 <HAL_ADC_IRQHandler+0x102>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d125      	bne.n	800550a <HAL_ADC_IRQHandler+0x136>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80054c8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80054cc:	d11d      	bne.n	800550a <HAL_ADC_IRQHandler+0x136>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	7b1b      	ldrb	r3, [r3, #12]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d119      	bne.n	800550a <HAL_ADC_IRQHandler+0x136>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	685a      	ldr	r2, [r3, #4]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054e4:	605a      	str	r2, [r3, #4]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	629a      	str	r2, [r3, #40]	; 0x28
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d105      	bne.n	800550a <HAL_ADC_IRQHandler+0x136>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005502:	f043 0201 	orr.w	r2, r3, #1
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	629a      	str	r2, [r3, #40]	; 0x28
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 fa39 	bl	8005982 <HAL_ADCEx_InjectedConvCpltCallback>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f06f 020c 	mvn.w	r2, #12
 8005518:	601a      	str	r2, [r3, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005524:	2b40      	cmp	r3, #64	; 0x40
 8005526:	d114      	bne.n	8005552 <HAL_ADC_IRQHandler+0x17e>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0301 	and.w	r3, r3, #1
 8005532:	2b01      	cmp	r3, #1
 8005534:	d10d      	bne.n	8005552 <HAL_ADC_IRQHandler+0x17e>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800553a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	629a      	str	r2, [r3, #40]	; 0x28
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 f812 	bl	800556c <HAL_ADC_LevelOutOfWindowCallback>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f06f 0201 	mvn.w	r2, #1
 8005550:	601a      	str	r2, [r3, #0]
 8005552:	bf00      	nop
 8005554:	3708      	adds	r7, #8
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <HAL_ADC_ConvHalfCpltCallback>:
 800555a:	b480      	push	{r7}
 800555c:	b083      	sub	sp, #12
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
 8005562:	bf00      	nop
 8005564:	370c      	adds	r7, #12
 8005566:	46bd      	mov	sp, r7
 8005568:	bc80      	pop	{r7}
 800556a:	4770      	bx	lr

0800556c <HAL_ADC_LevelOutOfWindowCallback>:
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	bf00      	nop
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	bc80      	pop	{r7}
 800557c:	4770      	bx	lr

0800557e <HAL_ADC_ErrorCallback>:
 800557e:	b480      	push	{r7}
 8005580:	b083      	sub	sp, #12
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
 8005586:	bf00      	nop
 8005588:	370c      	adds	r7, #12
 800558a:	46bd      	mov	sp, r7
 800558c:	bc80      	pop	{r7}
 800558e:	4770      	bx	lr

08005590 <HAL_ADC_ConfigChannel>:
 8005590:	b480      	push	{r7}
 8005592:	b085      	sub	sp, #20
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
 800559a:	2300      	movs	r3, #0
 800559c:	73fb      	strb	r3, [r7, #15]
 800559e:	2300      	movs	r3, #0
 80055a0:	60bb      	str	r3, [r7, #8]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d101      	bne.n	80055b0 <HAL_ADC_ConfigChannel+0x20>
 80055ac:	2302      	movs	r3, #2
 80055ae:	e0dc      	b.n	800576a <HAL_ADC_ConfigChannel+0x1da>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	2b06      	cmp	r3, #6
 80055be:	d81c      	bhi.n	80055fa <HAL_ADC_ConfigChannel+0x6a>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	685a      	ldr	r2, [r3, #4]
 80055ca:	4613      	mov	r3, r2
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	4413      	add	r3, r2
 80055d0:	3b05      	subs	r3, #5
 80055d2:	221f      	movs	r2, #31
 80055d4:	fa02 f303 	lsl.w	r3, r2, r3
 80055d8:	43db      	mvns	r3, r3
 80055da:	4019      	ands	r1, r3
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	6818      	ldr	r0, [r3, #0]
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	685a      	ldr	r2, [r3, #4]
 80055e4:	4613      	mov	r3, r2
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	4413      	add	r3, r2
 80055ea:	3b05      	subs	r3, #5
 80055ec:	fa00 f203 	lsl.w	r2, r0, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	430a      	orrs	r2, r1
 80055f6:	635a      	str	r2, [r3, #52]	; 0x34
 80055f8:	e03c      	b.n	8005674 <HAL_ADC_ConfigChannel+0xe4>
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	2b0c      	cmp	r3, #12
 8005600:	d81c      	bhi.n	800563c <HAL_ADC_ConfigChannel+0xac>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	685a      	ldr	r2, [r3, #4]
 800560c:	4613      	mov	r3, r2
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	4413      	add	r3, r2
 8005612:	3b23      	subs	r3, #35	; 0x23
 8005614:	221f      	movs	r2, #31
 8005616:	fa02 f303 	lsl.w	r3, r2, r3
 800561a:	43db      	mvns	r3, r3
 800561c:	4019      	ands	r1, r3
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	6818      	ldr	r0, [r3, #0]
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	685a      	ldr	r2, [r3, #4]
 8005626:	4613      	mov	r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	4413      	add	r3, r2
 800562c:	3b23      	subs	r3, #35	; 0x23
 800562e:	fa00 f203 	lsl.w	r2, r0, r3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	430a      	orrs	r2, r1
 8005638:	631a      	str	r2, [r3, #48]	; 0x30
 800563a:	e01b      	b.n	8005674 <HAL_ADC_ConfigChannel+0xe4>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	685a      	ldr	r2, [r3, #4]
 8005646:	4613      	mov	r3, r2
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	4413      	add	r3, r2
 800564c:	3b41      	subs	r3, #65	; 0x41
 800564e:	221f      	movs	r2, #31
 8005650:	fa02 f303 	lsl.w	r3, r2, r3
 8005654:	43db      	mvns	r3, r3
 8005656:	4019      	ands	r1, r3
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	6818      	ldr	r0, [r3, #0]
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	685a      	ldr	r2, [r3, #4]
 8005660:	4613      	mov	r3, r2
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	4413      	add	r3, r2
 8005666:	3b41      	subs	r3, #65	; 0x41
 8005668:	fa00 f203 	lsl.w	r2, r0, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	430a      	orrs	r2, r1
 8005672:	62da      	str	r2, [r3, #44]	; 0x2c
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2b09      	cmp	r3, #9
 800567a:	d91c      	bls.n	80056b6 <HAL_ADC_ConfigChannel+0x126>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68d9      	ldr	r1, [r3, #12]
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	4613      	mov	r3, r2
 8005688:	005b      	lsls	r3, r3, #1
 800568a:	4413      	add	r3, r2
 800568c:	3b1e      	subs	r3, #30
 800568e:	2207      	movs	r2, #7
 8005690:	fa02 f303 	lsl.w	r3, r2, r3
 8005694:	43db      	mvns	r3, r3
 8005696:	4019      	ands	r1, r3
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	6898      	ldr	r0, [r3, #8]
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	4613      	mov	r3, r2
 80056a2:	005b      	lsls	r3, r3, #1
 80056a4:	4413      	add	r3, r2
 80056a6:	3b1e      	subs	r3, #30
 80056a8:	fa00 f203 	lsl.w	r2, r0, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	430a      	orrs	r2, r1
 80056b2:	60da      	str	r2, [r3, #12]
 80056b4:	e019      	b.n	80056ea <HAL_ADC_ConfigChannel+0x15a>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	6919      	ldr	r1, [r3, #16]
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	4613      	mov	r3, r2
 80056c2:	005b      	lsls	r3, r3, #1
 80056c4:	4413      	add	r3, r2
 80056c6:	2207      	movs	r2, #7
 80056c8:	fa02 f303 	lsl.w	r3, r2, r3
 80056cc:	43db      	mvns	r3, r3
 80056ce:	4019      	ands	r1, r3
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	6898      	ldr	r0, [r3, #8]
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	4613      	mov	r3, r2
 80056da:	005b      	lsls	r3, r3, #1
 80056dc:	4413      	add	r3, r2
 80056de:	fa00 f203 	lsl.w	r2, r0, r3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	430a      	orrs	r2, r1
 80056e8:	611a      	str	r2, [r3, #16]
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2b10      	cmp	r3, #16
 80056f0:	d003      	beq.n	80056fa <HAL_ADC_ConfigChannel+0x16a>
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2b11      	cmp	r3, #17
 80056f8:	d132      	bne.n	8005760 <HAL_ADC_ConfigChannel+0x1d0>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a1d      	ldr	r2, [pc, #116]	; (8005774 <HAL_ADC_ConfigChannel+0x1e4>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d125      	bne.n	8005750 <HAL_ADC_ConfigChannel+0x1c0>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d126      	bne.n	8005760 <HAL_ADC_ConfigChannel+0x1d0>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	689a      	ldr	r2, [r3, #8]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005720:	609a      	str	r2, [r3, #8]
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2b10      	cmp	r3, #16
 8005728:	d11a      	bne.n	8005760 <HAL_ADC_ConfigChannel+0x1d0>
 800572a:	4b13      	ldr	r3, [pc, #76]	; (8005778 <HAL_ADC_ConfigChannel+0x1e8>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a13      	ldr	r2, [pc, #76]	; (800577c <HAL_ADC_ConfigChannel+0x1ec>)
 8005730:	fba2 2303 	umull	r2, r3, r2, r3
 8005734:	0c9a      	lsrs	r2, r3, #18
 8005736:	4613      	mov	r3, r2
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	4413      	add	r3, r2
 800573c:	005b      	lsls	r3, r3, #1
 800573e:	60bb      	str	r3, [r7, #8]
 8005740:	e002      	b.n	8005748 <HAL_ADC_ConfigChannel+0x1b8>
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	3b01      	subs	r3, #1
 8005746:	60bb      	str	r3, [r7, #8]
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1f9      	bne.n	8005742 <HAL_ADC_ConfigChannel+0x1b2>
 800574e:	e007      	b.n	8005760 <HAL_ADC_ConfigChannel+0x1d0>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005754:	f043 0220 	orr.w	r2, r3, #32
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	629a      	str	r2, [r3, #40]	; 0x28
 800575c:	2301      	movs	r3, #1
 800575e:	73fb      	strb	r3, [r7, #15]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005768:	7bfb      	ldrb	r3, [r7, #15]
 800576a:	4618      	mov	r0, r3
 800576c:	3714      	adds	r7, #20
 800576e:	46bd      	mov	sp, r7
 8005770:	bc80      	pop	{r7}
 8005772:	4770      	bx	lr
 8005774:	40012400 	.word	0x40012400
 8005778:	2000047c 	.word	0x2000047c
 800577c:	431bde83 	.word	0x431bde83

08005780 <ADC_Enable>:
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	2300      	movs	r3, #0
 800578a:	60fb      	str	r3, [r7, #12]
 800578c:	2300      	movs	r3, #0
 800578e:	60bb      	str	r3, [r7, #8]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f003 0301 	and.w	r3, r3, #1
 800579a:	2b01      	cmp	r3, #1
 800579c:	d040      	beq.n	8005820 <ADC_Enable+0xa0>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	689a      	ldr	r2, [r3, #8]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f042 0201 	orr.w	r2, r2, #1
 80057ac:	609a      	str	r2, [r3, #8]
 80057ae:	4b1f      	ldr	r3, [pc, #124]	; (800582c <ADC_Enable+0xac>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a1f      	ldr	r2, [pc, #124]	; (8005830 <ADC_Enable+0xb0>)
 80057b4:	fba2 2303 	umull	r2, r3, r2, r3
 80057b8:	0c9b      	lsrs	r3, r3, #18
 80057ba:	60bb      	str	r3, [r7, #8]
 80057bc:	e002      	b.n	80057c4 <ADC_Enable+0x44>
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	3b01      	subs	r3, #1
 80057c2:	60bb      	str	r3, [r7, #8]
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1f9      	bne.n	80057be <ADC_Enable+0x3e>
 80057ca:	f7ff fc1f 	bl	800500c <HAL_GetTick>
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	e01f      	b.n	8005812 <ADC_Enable+0x92>
 80057d2:	f7ff fc1b 	bl	800500c <HAL_GetTick>
 80057d6:	4602      	mov	r2, r0
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	2b02      	cmp	r3, #2
 80057de:	d918      	bls.n	8005812 <ADC_Enable+0x92>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	f003 0301 	and.w	r3, r3, #1
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d011      	beq.n	8005812 <ADC_Enable+0x92>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f2:	f043 0210 	orr.w	r2, r3, #16
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	629a      	str	r2, [r3, #40]	; 0x28
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fe:	f043 0201 	orr.w	r2, r3, #1
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	62da      	str	r2, [r3, #44]	; 0x2c
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800580e:	2301      	movs	r3, #1
 8005810:	e007      	b.n	8005822 <ADC_Enable+0xa2>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	f003 0301 	and.w	r3, r3, #1
 800581c:	2b01      	cmp	r3, #1
 800581e:	d1d8      	bne.n	80057d2 <ADC_Enable+0x52>
 8005820:	2300      	movs	r3, #0
 8005822:	4618      	mov	r0, r3
 8005824:	3710      	adds	r7, #16
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	2000047c 	.word	0x2000047c
 8005830:	431bde83 	.word	0x431bde83

08005834 <ADC_ConversionStop_Disable>:
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	2300      	movs	r3, #0
 800583e:	60fb      	str	r3, [r7, #12]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	f003 0301 	and.w	r3, r3, #1
 800584a:	2b01      	cmp	r3, #1
 800584c:	d12e      	bne.n	80058ac <ADC_ConversionStop_Disable+0x78>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	689a      	ldr	r2, [r3, #8]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f022 0201 	bic.w	r2, r2, #1
 800585c:	609a      	str	r2, [r3, #8]
 800585e:	f7ff fbd5 	bl	800500c <HAL_GetTick>
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	e01b      	b.n	800589e <ADC_ConversionStop_Disable+0x6a>
 8005866:	f7ff fbd1 	bl	800500c <HAL_GetTick>
 800586a:	4602      	mov	r2, r0
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	2b02      	cmp	r3, #2
 8005872:	d914      	bls.n	800589e <ADC_ConversionStop_Disable+0x6a>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	f003 0301 	and.w	r3, r3, #1
 800587e:	2b01      	cmp	r3, #1
 8005880:	d10d      	bne.n	800589e <ADC_ConversionStop_Disable+0x6a>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005886:	f043 0210 	orr.w	r2, r3, #16
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	629a      	str	r2, [r3, #40]	; 0x28
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005892:	f043 0201 	orr.w	r2, r3, #1
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	62da      	str	r2, [r3, #44]	; 0x2c
 800589a:	2301      	movs	r3, #1
 800589c:	e007      	b.n	80058ae <ADC_ConversionStop_Disable+0x7a>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f003 0301 	and.w	r3, r3, #1
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d0dc      	beq.n	8005866 <ADC_ConversionStop_Disable+0x32>
 80058ac:	2300      	movs	r3, #0
 80058ae:	4618      	mov	r0, r3
 80058b0:	3710      	adds	r7, #16
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}

080058b6 <ADC_DMAConvCplt>:
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b084      	sub	sp, #16
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c2:	60fb      	str	r3, [r7, #12]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d127      	bne.n	8005920 <ADC_DMAConvCplt+0x6a>
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	629a      	str	r2, [r3, #40]	; 0x28
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80058e6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80058ea:	d115      	bne.n	8005918 <ADC_DMAConvCplt+0x62>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	7b1b      	ldrb	r3, [r3, #12]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d111      	bne.n	8005918 <ADC_DMAConvCplt+0x62>
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	629a      	str	r2, [r3, #40]	; 0x28
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005904:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005908:	2b00      	cmp	r3, #0
 800590a:	d105      	bne.n	8005918 <ADC_DMAConvCplt+0x62>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005910:	f043 0201 	orr.w	r2, r3, #1
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	629a      	str	r2, [r3, #40]	; 0x28
 8005918:	68f8      	ldr	r0, [r7, #12]
 800591a:	f7fd ff57 	bl	80037cc <HAL_ADC_ConvCpltCallback>
 800591e:	e004      	b.n	800592a <ADC_DMAConvCplt+0x74>
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6a1b      	ldr	r3, [r3, #32]
 8005924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	4798      	blx	r3
 800592a:	bf00      	nop
 800592c:	3710      	adds	r7, #16
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}

08005932 <ADC_DMAHalfConvCplt>:
 8005932:	b580      	push	{r7, lr}
 8005934:	b084      	sub	sp, #16
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593e:	60fb      	str	r3, [r7, #12]
 8005940:	68f8      	ldr	r0, [r7, #12]
 8005942:	f7ff fe0a 	bl	800555a <HAL_ADC_ConvHalfCpltCallback>
 8005946:	bf00      	nop
 8005948:	3710      	adds	r7, #16
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}

0800594e <ADC_DMAError>:
 800594e:	b580      	push	{r7, lr}
 8005950:	b084      	sub	sp, #16
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595a:	60fb      	str	r3, [r7, #12]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005960:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	629a      	str	r2, [r3, #40]	; 0x28
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596c:	f043 0204 	orr.w	r2, r3, #4
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	62da      	str	r2, [r3, #44]	; 0x2c
 8005974:	68f8      	ldr	r0, [r7, #12]
 8005976:	f7ff fe02 	bl	800557e <HAL_ADC_ErrorCallback>
 800597a:	bf00      	nop
 800597c:	3710      	adds	r7, #16
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}

08005982 <HAL_ADCEx_InjectedConvCpltCallback>:
 8005982:	b480      	push	{r7}
 8005984:	b083      	sub	sp, #12
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
 800598a:	bf00      	nop
 800598c:	370c      	adds	r7, #12
 800598e:	46bd      	mov	sp, r7
 8005990:	bc80      	pop	{r7}
 8005992:	4770      	bx	lr

08005994 <__NVIC_SetPriorityGrouping>:
 8005994:	b480      	push	{r7}
 8005996:	b085      	sub	sp, #20
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f003 0307 	and.w	r3, r3, #7
 80059a2:	60fb      	str	r3, [r7, #12]
 80059a4:	4b0c      	ldr	r3, [pc, #48]	; (80059d8 <__NVIC_SetPriorityGrouping+0x44>)
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	60bb      	str	r3, [r7, #8]
 80059aa:	68ba      	ldr	r2, [r7, #8]
 80059ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80059b0:	4013      	ands	r3, r2
 80059b2:	60bb      	str	r3, [r7, #8]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	021a      	lsls	r2, r3, #8
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80059c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059c4:	60bb      	str	r3, [r7, #8]
 80059c6:	4a04      	ldr	r2, [pc, #16]	; (80059d8 <__NVIC_SetPriorityGrouping+0x44>)
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	60d3      	str	r3, [r2, #12]
 80059cc:	bf00      	nop
 80059ce:	3714      	adds	r7, #20
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bc80      	pop	{r7}
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	e000ed00 	.word	0xe000ed00

080059dc <__NVIC_GetPriorityGrouping>:
 80059dc:	b480      	push	{r7}
 80059de:	af00      	add	r7, sp, #0
 80059e0:	4b04      	ldr	r3, [pc, #16]	; (80059f4 <__NVIC_GetPriorityGrouping+0x18>)
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	0a1b      	lsrs	r3, r3, #8
 80059e6:	f003 0307 	and.w	r3, r3, #7
 80059ea:	4618      	mov	r0, r3
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bc80      	pop	{r7}
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	e000ed00 	.word	0xe000ed00

080059f8 <__NVIC_EnableIRQ>:
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	4603      	mov	r3, r0
 8005a00:	71fb      	strb	r3, [r7, #7]
 8005a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	db0b      	blt.n	8005a22 <__NVIC_EnableIRQ+0x2a>
 8005a0a:	79fb      	ldrb	r3, [r7, #7]
 8005a0c:	f003 021f 	and.w	r2, r3, #31
 8005a10:	4906      	ldr	r1, [pc, #24]	; (8005a2c <__NVIC_EnableIRQ+0x34>)
 8005a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a16:	095b      	lsrs	r3, r3, #5
 8005a18:	2001      	movs	r0, #1
 8005a1a:	fa00 f202 	lsl.w	r2, r0, r2
 8005a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005a22:	bf00      	nop
 8005a24:	370c      	adds	r7, #12
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bc80      	pop	{r7}
 8005a2a:	4770      	bx	lr
 8005a2c:	e000e100 	.word	0xe000e100

08005a30 <__NVIC_SetPriority>:
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	4603      	mov	r3, r0
 8005a38:	6039      	str	r1, [r7, #0]
 8005a3a:	71fb      	strb	r3, [r7, #7]
 8005a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	db0a      	blt.n	8005a5a <__NVIC_SetPriority+0x2a>
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	b2da      	uxtb	r2, r3
 8005a48:	490c      	ldr	r1, [pc, #48]	; (8005a7c <__NVIC_SetPriority+0x4c>)
 8005a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a4e:	0112      	lsls	r2, r2, #4
 8005a50:	b2d2      	uxtb	r2, r2
 8005a52:	440b      	add	r3, r1
 8005a54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8005a58:	e00a      	b.n	8005a70 <__NVIC_SetPriority+0x40>
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	b2da      	uxtb	r2, r3
 8005a5e:	4908      	ldr	r1, [pc, #32]	; (8005a80 <__NVIC_SetPriority+0x50>)
 8005a60:	79fb      	ldrb	r3, [r7, #7]
 8005a62:	f003 030f 	and.w	r3, r3, #15
 8005a66:	3b04      	subs	r3, #4
 8005a68:	0112      	lsls	r2, r2, #4
 8005a6a:	b2d2      	uxtb	r2, r2
 8005a6c:	440b      	add	r3, r1
 8005a6e:	761a      	strb	r2, [r3, #24]
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bc80      	pop	{r7}
 8005a78:	4770      	bx	lr
 8005a7a:	bf00      	nop
 8005a7c:	e000e100 	.word	0xe000e100
 8005a80:	e000ed00 	.word	0xe000ed00

08005a84 <NVIC_EncodePriority>:
 8005a84:	b480      	push	{r7}
 8005a86:	b089      	sub	sp, #36	; 0x24
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	607a      	str	r2, [r7, #4]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f003 0307 	and.w	r3, r3, #7
 8005a96:	61fb      	str	r3, [r7, #28]
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	f1c3 0307 	rsb	r3, r3, #7
 8005a9e:	2b04      	cmp	r3, #4
 8005aa0:	bf28      	it	cs
 8005aa2:	2304      	movcs	r3, #4
 8005aa4:	61bb      	str	r3, [r7, #24]
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	3304      	adds	r3, #4
 8005aaa:	2b06      	cmp	r3, #6
 8005aac:	d902      	bls.n	8005ab4 <NVIC_EncodePriority+0x30>
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	3b03      	subs	r3, #3
 8005ab2:	e000      	b.n	8005ab6 <NVIC_EncodePriority+0x32>
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	617b      	str	r3, [r7, #20]
 8005ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac2:	43da      	mvns	r2, r3
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	401a      	ands	r2, r3
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	409a      	lsls	r2, r3
 8005acc:	f04f 31ff 	mov.w	r1, #4294967295
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ad6:	43d9      	mvns	r1, r3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	400b      	ands	r3, r1
 8005adc:	4313      	orrs	r3, r2
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3724      	adds	r7, #36	; 0x24
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bc80      	pop	{r7}
 8005ae6:	4770      	bx	lr

08005ae8 <SysTick_Config>:
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	3b01      	subs	r3, #1
 8005af4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005af8:	d301      	bcc.n	8005afe <SysTick_Config+0x16>
 8005afa:	2301      	movs	r3, #1
 8005afc:	e00f      	b.n	8005b1e <SysTick_Config+0x36>
 8005afe:	4a0a      	ldr	r2, [pc, #40]	; (8005b28 <SysTick_Config+0x40>)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	3b01      	subs	r3, #1
 8005b04:	6053      	str	r3, [r2, #4]
 8005b06:	210f      	movs	r1, #15
 8005b08:	f04f 30ff 	mov.w	r0, #4294967295
 8005b0c:	f7ff ff90 	bl	8005a30 <__NVIC_SetPriority>
 8005b10:	4b05      	ldr	r3, [pc, #20]	; (8005b28 <SysTick_Config+0x40>)
 8005b12:	2200      	movs	r2, #0
 8005b14:	609a      	str	r2, [r3, #8]
 8005b16:	4b04      	ldr	r3, [pc, #16]	; (8005b28 <SysTick_Config+0x40>)
 8005b18:	2207      	movs	r2, #7
 8005b1a:	601a      	str	r2, [r3, #0]
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3708      	adds	r7, #8
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	e000e010 	.word	0xe000e010

08005b2c <HAL_NVIC_SetPriorityGrouping>:
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f7ff ff2d 	bl	8005994 <__NVIC_SetPriorityGrouping>
 8005b3a:	bf00      	nop
 8005b3c:	3708      	adds	r7, #8
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <HAL_NVIC_SetPriority>:
 8005b42:	b580      	push	{r7, lr}
 8005b44:	b086      	sub	sp, #24
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	4603      	mov	r3, r0
 8005b4a:	60b9      	str	r1, [r7, #8]
 8005b4c:	607a      	str	r2, [r7, #4]
 8005b4e:	73fb      	strb	r3, [r7, #15]
 8005b50:	2300      	movs	r3, #0
 8005b52:	617b      	str	r3, [r7, #20]
 8005b54:	f7ff ff42 	bl	80059dc <__NVIC_GetPriorityGrouping>
 8005b58:	6178      	str	r0, [r7, #20]
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	68b9      	ldr	r1, [r7, #8]
 8005b5e:	6978      	ldr	r0, [r7, #20]
 8005b60:	f7ff ff90 	bl	8005a84 <NVIC_EncodePriority>
 8005b64:	4602      	mov	r2, r0
 8005b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b6a:	4611      	mov	r1, r2
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f7ff ff5f 	bl	8005a30 <__NVIC_SetPriority>
 8005b72:	bf00      	nop
 8005b74:	3718      	adds	r7, #24
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}

08005b7a <HAL_NVIC_EnableIRQ>:
 8005b7a:	b580      	push	{r7, lr}
 8005b7c:	b082      	sub	sp, #8
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	4603      	mov	r3, r0
 8005b82:	71fb      	strb	r3, [r7, #7]
 8005b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f7ff ff35 	bl	80059f8 <__NVIC_EnableIRQ>
 8005b8e:	bf00      	nop
 8005b90:	3708      	adds	r7, #8
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}

08005b96 <HAL_SYSTICK_Config>:
 8005b96:	b580      	push	{r7, lr}
 8005b98:	b082      	sub	sp, #8
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f7ff ffa2 	bl	8005ae8 <SysTick_Config>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3708      	adds	r7, #8
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
	...

08005bb0 <HAL_DMA_Init>:
 8005bb0:	b480      	push	{r7}
 8005bb2:	b085      	sub	sp, #20
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	2300      	movs	r3, #0
 8005bba:	60fb      	str	r3, [r7, #12]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d101      	bne.n	8005bc6 <HAL_DMA_Init+0x16>
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e043      	b.n	8005c4e <HAL_DMA_Init+0x9e>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	461a      	mov	r2, r3
 8005bcc:	4b22      	ldr	r3, [pc, #136]	; (8005c58 <HAL_DMA_Init+0xa8>)
 8005bce:	4413      	add	r3, r2
 8005bd0:	4a22      	ldr	r2, [pc, #136]	; (8005c5c <HAL_DMA_Init+0xac>)
 8005bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd6:	091b      	lsrs	r3, r3, #4
 8005bd8:	009a      	lsls	r2, r3, #2
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	641a      	str	r2, [r3, #64]	; 0x40
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a1f      	ldr	r2, [pc, #124]	; (8005c60 <HAL_DMA_Init+0xb0>)
 8005be2:	63da      	str	r2, [r3, #60]	; 0x3c
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2202      	movs	r2, #2
 8005be8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	60fb      	str	r3, [r7, #12]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005bfa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005bfe:	60fb      	str	r3, [r7, #12]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685a      	ldr	r2, [r3, #4]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	431a      	orrs	r2, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	431a      	orrs	r2, r3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	431a      	orrs	r2, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	695b      	ldr	r3, [r3, #20]
 8005c1a:	431a      	orrs	r2, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	699b      	ldr	r3, [r3, #24]
 8005c20:	431a      	orrs	r2, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	69db      	ldr	r3, [r3, #28]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	60fb      	str	r3, [r7, #12]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	601a      	str	r2, [r3, #0]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	639a      	str	r2, [r3, #56]	; 0x38
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 2020 	strb.w	r2, [r3, #32]
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3714      	adds	r7, #20
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bc80      	pop	{r7}
 8005c56:	4770      	bx	lr
 8005c58:	bffdfff8 	.word	0xbffdfff8
 8005c5c:	cccccccd 	.word	0xcccccccd
 8005c60:	40020000 	.word	0x40020000

08005c64 <HAL_DMA_Start_IT>:
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b086      	sub	sp, #24
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	607a      	str	r2, [r7, #4]
 8005c70:	603b      	str	r3, [r7, #0]
 8005c72:	2300      	movs	r3, #0
 8005c74:	75fb      	strb	r3, [r7, #23]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d101      	bne.n	8005c84 <HAL_DMA_Start_IT+0x20>
 8005c80:	2302      	movs	r3, #2
 8005c82:	e04a      	b.n	8005d1a <HAL_DMA_Start_IT+0xb6>
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 2020 	strb.w	r2, [r3, #32]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d13a      	bne.n	8005d0c <HAL_DMA_Start_IT+0xa8>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2202      	movs	r2, #2
 8005c9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	639a      	str	r2, [r3, #56]	; 0x38
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f022 0201 	bic.w	r2, r2, #1
 8005cb2:	601a      	str	r2, [r3, #0]
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	68b9      	ldr	r1, [r7, #8]
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f000 f938 	bl	8005f30 <DMA_SetConfig>
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d008      	beq.n	8005cda <HAL_DMA_Start_IT+0x76>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f042 020e 	orr.w	r2, r2, #14
 8005cd6:	601a      	str	r2, [r3, #0]
 8005cd8:	e00f      	b.n	8005cfa <HAL_DMA_Start_IT+0x96>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f022 0204 	bic.w	r2, r2, #4
 8005ce8:	601a      	str	r2, [r3, #0]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f042 020a 	orr.w	r2, r2, #10
 8005cf8:	601a      	str	r2, [r3, #0]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f042 0201 	orr.w	r2, r2, #1
 8005d08:	601a      	str	r2, [r3, #0]
 8005d0a:	e005      	b.n	8005d18 <HAL_DMA_Start_IT+0xb4>
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 2020 	strb.w	r2, [r3, #32]
 8005d14:	2302      	movs	r3, #2
 8005d16:	75fb      	strb	r3, [r7, #23]
 8005d18:	7dfb      	ldrb	r3, [r7, #23]
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3718      	adds	r7, #24
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
	...

08005d24 <HAL_DMA_IRQHandler>:
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	60fb      	str	r3, [r7, #12]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	60bb      	str	r3, [r7, #8]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d40:	2204      	movs	r2, #4
 8005d42:	409a      	lsls	r2, r3
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	4013      	ands	r3, r2
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d04f      	beq.n	8005dec <HAL_DMA_IRQHandler+0xc8>
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	f003 0304 	and.w	r3, r3, #4
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d04a      	beq.n	8005dec <HAL_DMA_IRQHandler+0xc8>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 0320 	and.w	r3, r3, #32
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d107      	bne.n	8005d74 <HAL_DMA_IRQHandler+0x50>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f022 0204 	bic.w	r2, r2, #4
 8005d72:	601a      	str	r2, [r3, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a66      	ldr	r2, [pc, #408]	; (8005f14 <HAL_DMA_IRQHandler+0x1f0>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d029      	beq.n	8005dd2 <HAL_DMA_IRQHandler+0xae>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a65      	ldr	r2, [pc, #404]	; (8005f18 <HAL_DMA_IRQHandler+0x1f4>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d022      	beq.n	8005dce <HAL_DMA_IRQHandler+0xaa>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a63      	ldr	r2, [pc, #396]	; (8005f1c <HAL_DMA_IRQHandler+0x1f8>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d01a      	beq.n	8005dc8 <HAL_DMA_IRQHandler+0xa4>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a62      	ldr	r2, [pc, #392]	; (8005f20 <HAL_DMA_IRQHandler+0x1fc>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d012      	beq.n	8005dc2 <HAL_DMA_IRQHandler+0x9e>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a60      	ldr	r2, [pc, #384]	; (8005f24 <HAL_DMA_IRQHandler+0x200>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d00a      	beq.n	8005dbc <HAL_DMA_IRQHandler+0x98>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a5f      	ldr	r2, [pc, #380]	; (8005f28 <HAL_DMA_IRQHandler+0x204>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d102      	bne.n	8005db6 <HAL_DMA_IRQHandler+0x92>
 8005db0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005db4:	e00e      	b.n	8005dd4 <HAL_DMA_IRQHandler+0xb0>
 8005db6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005dba:	e00b      	b.n	8005dd4 <HAL_DMA_IRQHandler+0xb0>
 8005dbc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005dc0:	e008      	b.n	8005dd4 <HAL_DMA_IRQHandler+0xb0>
 8005dc2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005dc6:	e005      	b.n	8005dd4 <HAL_DMA_IRQHandler+0xb0>
 8005dc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005dcc:	e002      	b.n	8005dd4 <HAL_DMA_IRQHandler+0xb0>
 8005dce:	2340      	movs	r3, #64	; 0x40
 8005dd0:	e000      	b.n	8005dd4 <HAL_DMA_IRQHandler+0xb0>
 8005dd2:	2304      	movs	r3, #4
 8005dd4:	4a55      	ldr	r2, [pc, #340]	; (8005f2c <HAL_DMA_IRQHandler+0x208>)
 8005dd6:	6053      	str	r3, [r2, #4]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	f000 8094 	beq.w	8005f0a <HAL_DMA_IRQHandler+0x1e6>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	4798      	blx	r3
 8005dea:	e08e      	b.n	8005f0a <HAL_DMA_IRQHandler+0x1e6>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df0:	2202      	movs	r2, #2
 8005df2:	409a      	lsls	r2, r3
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	4013      	ands	r3, r2
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d056      	beq.n	8005eaa <HAL_DMA_IRQHandler+0x186>
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	f003 0302 	and.w	r3, r3, #2
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d051      	beq.n	8005eaa <HAL_DMA_IRQHandler+0x186>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 0320 	and.w	r3, r3, #32
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d10b      	bne.n	8005e2c <HAL_DMA_IRQHandler+0x108>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f022 020a 	bic.w	r2, r2, #10
 8005e22:	601a      	str	r2, [r3, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a38      	ldr	r2, [pc, #224]	; (8005f14 <HAL_DMA_IRQHandler+0x1f0>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d029      	beq.n	8005e8a <HAL_DMA_IRQHandler+0x166>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a37      	ldr	r2, [pc, #220]	; (8005f18 <HAL_DMA_IRQHandler+0x1f4>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d022      	beq.n	8005e86 <HAL_DMA_IRQHandler+0x162>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a35      	ldr	r2, [pc, #212]	; (8005f1c <HAL_DMA_IRQHandler+0x1f8>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d01a      	beq.n	8005e80 <HAL_DMA_IRQHandler+0x15c>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a34      	ldr	r2, [pc, #208]	; (8005f20 <HAL_DMA_IRQHandler+0x1fc>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d012      	beq.n	8005e7a <HAL_DMA_IRQHandler+0x156>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a32      	ldr	r2, [pc, #200]	; (8005f24 <HAL_DMA_IRQHandler+0x200>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d00a      	beq.n	8005e74 <HAL_DMA_IRQHandler+0x150>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a31      	ldr	r2, [pc, #196]	; (8005f28 <HAL_DMA_IRQHandler+0x204>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d102      	bne.n	8005e6e <HAL_DMA_IRQHandler+0x14a>
 8005e68:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005e6c:	e00e      	b.n	8005e8c <HAL_DMA_IRQHandler+0x168>
 8005e6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e72:	e00b      	b.n	8005e8c <HAL_DMA_IRQHandler+0x168>
 8005e74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e78:	e008      	b.n	8005e8c <HAL_DMA_IRQHandler+0x168>
 8005e7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e7e:	e005      	b.n	8005e8c <HAL_DMA_IRQHandler+0x168>
 8005e80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e84:	e002      	b.n	8005e8c <HAL_DMA_IRQHandler+0x168>
 8005e86:	2320      	movs	r3, #32
 8005e88:	e000      	b.n	8005e8c <HAL_DMA_IRQHandler+0x168>
 8005e8a:	2302      	movs	r3, #2
 8005e8c:	4a27      	ldr	r2, [pc, #156]	; (8005f2c <HAL_DMA_IRQHandler+0x208>)
 8005e8e:	6053      	str	r3, [r2, #4]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	f883 2020 	strb.w	r2, [r3, #32]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d034      	beq.n	8005f0a <HAL_DMA_IRQHandler+0x1e6>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	4798      	blx	r3
 8005ea8:	e02f      	b.n	8005f0a <HAL_DMA_IRQHandler+0x1e6>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eae:	2208      	movs	r2, #8
 8005eb0:	409a      	lsls	r2, r3
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d028      	beq.n	8005f0c <HAL_DMA_IRQHandler+0x1e8>
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	f003 0308 	and.w	r3, r3, #8
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d023      	beq.n	8005f0c <HAL_DMA_IRQHandler+0x1e8>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f022 020e 	bic.w	r2, r2, #14
 8005ed2:	601a      	str	r2, [r3, #0]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005edc:	2101      	movs	r1, #1
 8005ede:	fa01 f202 	lsl.w	r2, r1, r2
 8005ee2:	605a      	str	r2, [r3, #4]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	639a      	str	r2, [r3, #56]	; 0x38
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2201      	movs	r2, #1
 8005eee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 2020 	strb.w	r2, [r3, #32]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d004      	beq.n	8005f0c <HAL_DMA_IRQHandler+0x1e8>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	4798      	blx	r3
 8005f0a:	bf00      	nop
 8005f0c:	bf00      	nop
 8005f0e:	3710      	adds	r7, #16
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	40020008 	.word	0x40020008
 8005f18:	4002001c 	.word	0x4002001c
 8005f1c:	40020030 	.word	0x40020030
 8005f20:	40020044 	.word	0x40020044
 8005f24:	40020058 	.word	0x40020058
 8005f28:	4002006c 	.word	0x4002006c
 8005f2c:	40020000 	.word	0x40020000

08005f30 <DMA_SetConfig>:
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	607a      	str	r2, [r7, #4]
 8005f3c:	603b      	str	r3, [r7, #0]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f46:	2101      	movs	r1, #1
 8005f48:	fa01 f202 	lsl.w	r2, r1, r2
 8005f4c:	605a      	str	r2, [r3, #4]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	683a      	ldr	r2, [r7, #0]
 8005f54:	605a      	str	r2, [r3, #4]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	2b10      	cmp	r3, #16
 8005f5c:	d108      	bne.n	8005f70 <DMA_SetConfig+0x40>
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	609a      	str	r2, [r3, #8]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68ba      	ldr	r2, [r7, #8]
 8005f6c:	60da      	str	r2, [r3, #12]
 8005f6e:	e007      	b.n	8005f80 <DMA_SetConfig+0x50>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68ba      	ldr	r2, [r7, #8]
 8005f76:	609a      	str	r2, [r3, #8]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	60da      	str	r2, [r3, #12]
 8005f80:	bf00      	nop
 8005f82:	3714      	adds	r7, #20
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bc80      	pop	{r7}
 8005f88:	4770      	bx	lr
	...

08005f8c <HAL_FLASH_Program>:
 8005f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f8e:	b087      	sub	sp, #28
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	e9c7 2300 	strd	r2, r3, [r7]
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	75fb      	strb	r3, [r7, #23]
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	75bb      	strb	r3, [r7, #22]
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	757b      	strb	r3, [r7, #21]
 8005fa6:	4b2f      	ldr	r3, [pc, #188]	; (8006064 <HAL_FLASH_Program+0xd8>)
 8005fa8:	7e1b      	ldrb	r3, [r3, #24]
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d101      	bne.n	8005fb2 <HAL_FLASH_Program+0x26>
 8005fae:	2302      	movs	r3, #2
 8005fb0:	e054      	b.n	800605c <HAL_FLASH_Program+0xd0>
 8005fb2:	4b2c      	ldr	r3, [pc, #176]	; (8006064 <HAL_FLASH_Program+0xd8>)
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	761a      	strb	r2, [r3, #24]
 8005fb8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005fbc:	f000 f99e 	bl	80062fc <FLASH_WaitForLastOperation>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	75fb      	strb	r3, [r7, #23]
 8005fc4:	7dfb      	ldrb	r3, [r7, #23]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d144      	bne.n	8006054 <HAL_FLASH_Program+0xc8>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d102      	bne.n	8005fd6 <HAL_FLASH_Program+0x4a>
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	757b      	strb	r3, [r7, #21]
 8005fd4:	e007      	b.n	8005fe6 <HAL_FLASH_Program+0x5a>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2b02      	cmp	r3, #2
 8005fda:	d102      	bne.n	8005fe2 <HAL_FLASH_Program+0x56>
 8005fdc:	2302      	movs	r3, #2
 8005fde:	757b      	strb	r3, [r7, #21]
 8005fe0:	e001      	b.n	8005fe6 <HAL_FLASH_Program+0x5a>
 8005fe2:	2304      	movs	r3, #4
 8005fe4:	757b      	strb	r3, [r7, #21]
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	75bb      	strb	r3, [r7, #22]
 8005fea:	e02d      	b.n	8006048 <HAL_FLASH_Program+0xbc>
 8005fec:	7dbb      	ldrb	r3, [r7, #22]
 8005fee:	005a      	lsls	r2, r3, #1
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	eb02 0c03 	add.w	ip, r2, r3
 8005ff6:	7dbb      	ldrb	r3, [r7, #22]
 8005ff8:	0119      	lsls	r1, r3, #4
 8005ffa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ffe:	f1c1 0620 	rsb	r6, r1, #32
 8006002:	f1a1 0020 	sub.w	r0, r1, #32
 8006006:	fa22 f401 	lsr.w	r4, r2, r1
 800600a:	fa03 f606 	lsl.w	r6, r3, r6
 800600e:	4334      	orrs	r4, r6
 8006010:	fa23 f000 	lsr.w	r0, r3, r0
 8006014:	4304      	orrs	r4, r0
 8006016:	fa23 f501 	lsr.w	r5, r3, r1
 800601a:	b2a3      	uxth	r3, r4
 800601c:	4619      	mov	r1, r3
 800601e:	4660      	mov	r0, ip
 8006020:	f000 f950 	bl	80062c4 <FLASH_Program_HalfWord>
 8006024:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006028:	f000 f968 	bl	80062fc <FLASH_WaitForLastOperation>
 800602c:	4603      	mov	r3, r0
 800602e:	75fb      	strb	r3, [r7, #23]
 8006030:	4b0d      	ldr	r3, [pc, #52]	; (8006068 <HAL_FLASH_Program+0xdc>)
 8006032:	691b      	ldr	r3, [r3, #16]
 8006034:	4a0c      	ldr	r2, [pc, #48]	; (8006068 <HAL_FLASH_Program+0xdc>)
 8006036:	f023 0301 	bic.w	r3, r3, #1
 800603a:	6113      	str	r3, [r2, #16]
 800603c:	7dfb      	ldrb	r3, [r7, #23]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d107      	bne.n	8006052 <HAL_FLASH_Program+0xc6>
 8006042:	7dbb      	ldrb	r3, [r7, #22]
 8006044:	3301      	adds	r3, #1
 8006046:	75bb      	strb	r3, [r7, #22]
 8006048:	7dba      	ldrb	r2, [r7, #22]
 800604a:	7d7b      	ldrb	r3, [r7, #21]
 800604c:	429a      	cmp	r2, r3
 800604e:	d3cd      	bcc.n	8005fec <HAL_FLASH_Program+0x60>
 8006050:	e000      	b.n	8006054 <HAL_FLASH_Program+0xc8>
 8006052:	bf00      	nop
 8006054:	4b03      	ldr	r3, [pc, #12]	; (8006064 <HAL_FLASH_Program+0xd8>)
 8006056:	2200      	movs	r2, #0
 8006058:	761a      	strb	r2, [r3, #24]
 800605a:	7dfb      	ldrb	r3, [r7, #23]
 800605c:	4618      	mov	r0, r3
 800605e:	371c      	adds	r7, #28
 8006060:	46bd      	mov	sp, r7
 8006062:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006064:	20000a18 	.word	0x20000a18
 8006068:	40022000 	.word	0x40022000

0800606c <HAL_FLASH_IRQHandler>:
 800606c:	b580      	push	{r7, lr}
 800606e:	b082      	sub	sp, #8
 8006070:	af00      	add	r7, sp, #0
 8006072:	2300      	movs	r3, #0
 8006074:	607b      	str	r3, [r7, #4]
 8006076:	4b6d      	ldr	r3, [pc, #436]	; (800622c <HAL_FLASH_IRQHandler+0x1c0>)
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	f003 0310 	and.w	r3, r3, #16
 800607e:	2b00      	cmp	r3, #0
 8006080:	d105      	bne.n	800608e <HAL_FLASH_IRQHandler+0x22>
 8006082:	4b6a      	ldr	r3, [pc, #424]	; (800622c <HAL_FLASH_IRQHandler+0x1c0>)
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	f003 0304 	and.w	r3, r3, #4
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00e      	beq.n	80060ac <HAL_FLASH_IRQHandler+0x40>
 800608e:	4b68      	ldr	r3, [pc, #416]	; (8006230 <HAL_FLASH_IRQHandler+0x1c4>)
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	607b      	str	r3, [r7, #4]
 8006094:	4b66      	ldr	r3, [pc, #408]	; (8006230 <HAL_FLASH_IRQHandler+0x1c4>)
 8006096:	f04f 32ff 	mov.w	r2, #4294967295
 800609a:	609a      	str	r2, [r3, #8]
 800609c:	f000 f974 	bl	8006388 <FLASH_SetErrorCode>
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 f8d0 	bl	8006246 <HAL_FLASH_OperationErrorCallback>
 80060a6:	4b62      	ldr	r3, [pc, #392]	; (8006230 <HAL_FLASH_IRQHandler+0x1c4>)
 80060a8:	2200      	movs	r2, #0
 80060aa:	701a      	strb	r2, [r3, #0]
 80060ac:	4b5f      	ldr	r3, [pc, #380]	; (800622c <HAL_FLASH_IRQHandler+0x1c0>)
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	f003 0320 	and.w	r3, r3, #32
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f000 80a0 	beq.w	80061fa <HAL_FLASH_IRQHandler+0x18e>
 80060ba:	4b5c      	ldr	r3, [pc, #368]	; (800622c <HAL_FLASH_IRQHandler+0x1c0>)
 80060bc:	2220      	movs	r2, #32
 80060be:	60da      	str	r2, [r3, #12]
 80060c0:	4b5b      	ldr	r3, [pc, #364]	; (8006230 <HAL_FLASH_IRQHandler+0x1c4>)
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	f000 8097 	beq.w	80061fa <HAL_FLASH_IRQHandler+0x18e>
 80060cc:	4b58      	ldr	r3, [pc, #352]	; (8006230 <HAL_FLASH_IRQHandler+0x1c4>)
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d12d      	bne.n	8006132 <HAL_FLASH_IRQHandler+0xc6>
 80060d6:	4b56      	ldr	r3, [pc, #344]	; (8006230 <HAL_FLASH_IRQHandler+0x1c4>)
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	3b01      	subs	r3, #1
 80060dc:	4a54      	ldr	r2, [pc, #336]	; (8006230 <HAL_FLASH_IRQHandler+0x1c4>)
 80060de:	6053      	str	r3, [r2, #4]
 80060e0:	4b53      	ldr	r3, [pc, #332]	; (8006230 <HAL_FLASH_IRQHandler+0x1c4>)
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d017      	beq.n	8006118 <HAL_FLASH_IRQHandler+0xac>
 80060e8:	4b51      	ldr	r3, [pc, #324]	; (8006230 <HAL_FLASH_IRQHandler+0x1c4>)
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	607b      	str	r3, [r7, #4]
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 f8a0 	bl	8006234 <HAL_FLASH_EndOfOperationCallback>
 80060f4:	4b4e      	ldr	r3, [pc, #312]	; (8006230 <HAL_FLASH_IRQHandler+0x1c4>)
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060fc:	607b      	str	r3, [r7, #4]
 80060fe:	4a4c      	ldr	r2, [pc, #304]	; (8006230 <HAL_FLASH_IRQHandler+0x1c4>)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6093      	str	r3, [r2, #8]
 8006104:	4b49      	ldr	r3, [pc, #292]	; (800622c <HAL_FLASH_IRQHandler+0x1c0>)
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	4a48      	ldr	r2, [pc, #288]	; (800622c <HAL_FLASH_IRQHandler+0x1c0>)
 800610a:	f023 0302 	bic.w	r3, r3, #2
 800610e:	6113      	str	r3, [r2, #16]
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 fa11 	bl	8006538 <FLASH_PageErase>
 8006116:	e070      	b.n	80061fa <HAL_FLASH_IRQHandler+0x18e>
 8006118:	f04f 33ff 	mov.w	r3, #4294967295
 800611c:	607b      	str	r3, [r7, #4]
 800611e:	4a44      	ldr	r2, [pc, #272]	; (8006230 <HAL_FLASH_IRQHandler+0x1c4>)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6093      	str	r3, [r2, #8]
 8006124:	4b42      	ldr	r3, [pc, #264]	; (8006230 <HAL_FLASH_IRQHandler+0x1c4>)
 8006126:	2200      	movs	r2, #0
 8006128:	701a      	strb	r2, [r3, #0]
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 f882 	bl	8006234 <HAL_FLASH_EndOfOperationCallback>
 8006130:	e063      	b.n	80061fa <HAL_FLASH_IRQHandler+0x18e>
 8006132:	4b3f      	ldr	r3, [pc, #252]	; (8006230 <HAL_FLASH_IRQHandler+0x1c4>)
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	b2db      	uxtb	r3, r3
 8006138:	2b02      	cmp	r3, #2
 800613a:	d10c      	bne.n	8006156 <HAL_FLASH_IRQHandler+0xea>
 800613c:	4b3b      	ldr	r3, [pc, #236]	; (800622c <HAL_FLASH_IRQHandler+0x1c0>)
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	4a3a      	ldr	r2, [pc, #232]	; (800622c <HAL_FLASH_IRQHandler+0x1c0>)
 8006142:	f023 0304 	bic.w	r3, r3, #4
 8006146:	6113      	str	r3, [r2, #16]
 8006148:	2000      	movs	r0, #0
 800614a:	f000 f873 	bl	8006234 <HAL_FLASH_EndOfOperationCallback>
 800614e:	4b38      	ldr	r3, [pc, #224]	; (8006230 <HAL_FLASH_IRQHandler+0x1c4>)
 8006150:	2200      	movs	r2, #0
 8006152:	701a      	strb	r2, [r3, #0]
 8006154:	e051      	b.n	80061fa <HAL_FLASH_IRQHandler+0x18e>
 8006156:	4b36      	ldr	r3, [pc, #216]	; (8006230 <HAL_FLASH_IRQHandler+0x1c4>)
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	3b01      	subs	r3, #1
 800615c:	4a34      	ldr	r2, [pc, #208]	; (8006230 <HAL_FLASH_IRQHandler+0x1c4>)
 800615e:	6053      	str	r3, [r2, #4]
 8006160:	4b33      	ldr	r3, [pc, #204]	; (8006230 <HAL_FLASH_IRQHandler+0x1c4>)
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d024      	beq.n	80061b2 <HAL_FLASH_IRQHandler+0x146>
 8006168:	4b31      	ldr	r3, [pc, #196]	; (8006230 <HAL_FLASH_IRQHandler+0x1c4>)
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	3302      	adds	r3, #2
 800616e:	4a30      	ldr	r2, [pc, #192]	; (8006230 <HAL_FLASH_IRQHandler+0x1c4>)
 8006170:	6093      	str	r3, [r2, #8]
 8006172:	4b2f      	ldr	r3, [pc, #188]	; (8006230 <HAL_FLASH_IRQHandler+0x1c4>)
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	607b      	str	r3, [r7, #4]
 8006178:	4b2d      	ldr	r3, [pc, #180]	; (8006230 <HAL_FLASH_IRQHandler+0x1c4>)
 800617a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800617e:	f04f 0200 	mov.w	r2, #0
 8006182:	f04f 0300 	mov.w	r3, #0
 8006186:	0c02      	lsrs	r2, r0, #16
 8006188:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800618c:	0c0b      	lsrs	r3, r1, #16
 800618e:	4928      	ldr	r1, [pc, #160]	; (8006230 <HAL_FLASH_IRQHandler+0x1c4>)
 8006190:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8006194:	4b25      	ldr	r3, [pc, #148]	; (800622c <HAL_FLASH_IRQHandler+0x1c0>)
 8006196:	691b      	ldr	r3, [r3, #16]
 8006198:	4a24      	ldr	r2, [pc, #144]	; (800622c <HAL_FLASH_IRQHandler+0x1c0>)
 800619a:	f023 0301 	bic.w	r3, r3, #1
 800619e:	6113      	str	r3, [r2, #16]
 80061a0:	4b23      	ldr	r3, [pc, #140]	; (8006230 <HAL_FLASH_IRQHandler+0x1c4>)
 80061a2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80061a6:	b293      	uxth	r3, r2
 80061a8:	4619      	mov	r1, r3
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 f88a 	bl	80062c4 <FLASH_Program_HalfWord>
 80061b0:	e023      	b.n	80061fa <HAL_FLASH_IRQHandler+0x18e>
 80061b2:	4b1f      	ldr	r3, [pc, #124]	; (8006230 <HAL_FLASH_IRQHandler+0x1c4>)
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	2b03      	cmp	r3, #3
 80061ba:	d105      	bne.n	80061c8 <HAL_FLASH_IRQHandler+0x15c>
 80061bc:	4b1c      	ldr	r3, [pc, #112]	; (8006230 <HAL_FLASH_IRQHandler+0x1c4>)
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	4618      	mov	r0, r3
 80061c2:	f000 f837 	bl	8006234 <HAL_FLASH_EndOfOperationCallback>
 80061c6:	e011      	b.n	80061ec <HAL_FLASH_IRQHandler+0x180>
 80061c8:	4b19      	ldr	r3, [pc, #100]	; (8006230 <HAL_FLASH_IRQHandler+0x1c4>)
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	2b04      	cmp	r3, #4
 80061d0:	d106      	bne.n	80061e0 <HAL_FLASH_IRQHandler+0x174>
 80061d2:	4b17      	ldr	r3, [pc, #92]	; (8006230 <HAL_FLASH_IRQHandler+0x1c4>)
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	3b02      	subs	r3, #2
 80061d8:	4618      	mov	r0, r3
 80061da:	f000 f82b 	bl	8006234 <HAL_FLASH_EndOfOperationCallback>
 80061de:	e005      	b.n	80061ec <HAL_FLASH_IRQHandler+0x180>
 80061e0:	4b13      	ldr	r3, [pc, #76]	; (8006230 <HAL_FLASH_IRQHandler+0x1c4>)
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	3b06      	subs	r3, #6
 80061e6:	4618      	mov	r0, r3
 80061e8:	f000 f824 	bl	8006234 <HAL_FLASH_EndOfOperationCallback>
 80061ec:	4b10      	ldr	r3, [pc, #64]	; (8006230 <HAL_FLASH_IRQHandler+0x1c4>)
 80061ee:	f04f 32ff 	mov.w	r2, #4294967295
 80061f2:	609a      	str	r2, [r3, #8]
 80061f4:	4b0e      	ldr	r3, [pc, #56]	; (8006230 <HAL_FLASH_IRQHandler+0x1c4>)
 80061f6:	2200      	movs	r2, #0
 80061f8:	701a      	strb	r2, [r3, #0]
 80061fa:	4b0d      	ldr	r3, [pc, #52]	; (8006230 <HAL_FLASH_IRQHandler+0x1c4>)
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	2b00      	cmp	r3, #0
 8006202:	d10e      	bne.n	8006222 <HAL_FLASH_IRQHandler+0x1b6>
 8006204:	4b09      	ldr	r3, [pc, #36]	; (800622c <HAL_FLASH_IRQHandler+0x1c0>)
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	4a08      	ldr	r2, [pc, #32]	; (800622c <HAL_FLASH_IRQHandler+0x1c0>)
 800620a:	f023 0307 	bic.w	r3, r3, #7
 800620e:	6113      	str	r3, [r2, #16]
 8006210:	4b06      	ldr	r3, [pc, #24]	; (800622c <HAL_FLASH_IRQHandler+0x1c0>)
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	4a05      	ldr	r2, [pc, #20]	; (800622c <HAL_FLASH_IRQHandler+0x1c0>)
 8006216:	f423 53a0 	bic.w	r3, r3, #5120	; 0x1400
 800621a:	6113      	str	r3, [r2, #16]
 800621c:	4b04      	ldr	r3, [pc, #16]	; (8006230 <HAL_FLASH_IRQHandler+0x1c4>)
 800621e:	2200      	movs	r2, #0
 8006220:	761a      	strb	r2, [r3, #24]
 8006222:	bf00      	nop
 8006224:	3708      	adds	r7, #8
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	40022000 	.word	0x40022000
 8006230:	20000a18 	.word	0x20000a18

08006234 <HAL_FLASH_EndOfOperationCallback>:
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	bf00      	nop
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	bc80      	pop	{r7}
 8006244:	4770      	bx	lr

08006246 <HAL_FLASH_OperationErrorCallback>:
 8006246:	b480      	push	{r7}
 8006248:	b083      	sub	sp, #12
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
 800624e:	bf00      	nop
 8006250:	370c      	adds	r7, #12
 8006252:	46bd      	mov	sp, r7
 8006254:	bc80      	pop	{r7}
 8006256:	4770      	bx	lr

08006258 <HAL_FLASH_Unlock>:
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	2300      	movs	r3, #0
 8006260:	71fb      	strb	r3, [r7, #7]
 8006262:	4b0d      	ldr	r3, [pc, #52]	; (8006298 <HAL_FLASH_Unlock+0x40>)
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800626a:	2b00      	cmp	r3, #0
 800626c:	d00d      	beq.n	800628a <HAL_FLASH_Unlock+0x32>
 800626e:	4b0a      	ldr	r3, [pc, #40]	; (8006298 <HAL_FLASH_Unlock+0x40>)
 8006270:	4a0a      	ldr	r2, [pc, #40]	; (800629c <HAL_FLASH_Unlock+0x44>)
 8006272:	605a      	str	r2, [r3, #4]
 8006274:	4b08      	ldr	r3, [pc, #32]	; (8006298 <HAL_FLASH_Unlock+0x40>)
 8006276:	4a0a      	ldr	r2, [pc, #40]	; (80062a0 <HAL_FLASH_Unlock+0x48>)
 8006278:	605a      	str	r2, [r3, #4]
 800627a:	4b07      	ldr	r3, [pc, #28]	; (8006298 <HAL_FLASH_Unlock+0x40>)
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006282:	2b00      	cmp	r3, #0
 8006284:	d001      	beq.n	800628a <HAL_FLASH_Unlock+0x32>
 8006286:	2301      	movs	r3, #1
 8006288:	71fb      	strb	r3, [r7, #7]
 800628a:	79fb      	ldrb	r3, [r7, #7]
 800628c:	4618      	mov	r0, r3
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	bc80      	pop	{r7}
 8006294:	4770      	bx	lr
 8006296:	bf00      	nop
 8006298:	40022000 	.word	0x40022000
 800629c:	45670123 	.word	0x45670123
 80062a0:	cdef89ab 	.word	0xcdef89ab

080062a4 <HAL_FLASH_Lock>:
 80062a4:	b480      	push	{r7}
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	4b05      	ldr	r3, [pc, #20]	; (80062c0 <HAL_FLASH_Lock+0x1c>)
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	4a04      	ldr	r2, [pc, #16]	; (80062c0 <HAL_FLASH_Lock+0x1c>)
 80062ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062b2:	6113      	str	r3, [r2, #16]
 80062b4:	2300      	movs	r3, #0
 80062b6:	4618      	mov	r0, r3
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bc80      	pop	{r7}
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	40022000 	.word	0x40022000

080062c4 <FLASH_Program_HalfWord>:
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	460b      	mov	r3, r1
 80062ce:	807b      	strh	r3, [r7, #2]
 80062d0:	4b08      	ldr	r3, [pc, #32]	; (80062f4 <FLASH_Program_HalfWord+0x30>)
 80062d2:	2200      	movs	r2, #0
 80062d4:	61da      	str	r2, [r3, #28]
 80062d6:	4b08      	ldr	r3, [pc, #32]	; (80062f8 <FLASH_Program_HalfWord+0x34>)
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	4a07      	ldr	r2, [pc, #28]	; (80062f8 <FLASH_Program_HalfWord+0x34>)
 80062dc:	f043 0301 	orr.w	r3, r3, #1
 80062e0:	6113      	str	r3, [r2, #16]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	887a      	ldrh	r2, [r7, #2]
 80062e6:	801a      	strh	r2, [r3, #0]
 80062e8:	bf00      	nop
 80062ea:	370c      	adds	r7, #12
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bc80      	pop	{r7}
 80062f0:	4770      	bx	lr
 80062f2:	bf00      	nop
 80062f4:	20000a18 	.word	0x20000a18
 80062f8:	40022000 	.word	0x40022000

080062fc <FLASH_WaitForLastOperation>:
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	f7fe fe82 	bl	800500c <HAL_GetTick>
 8006308:	60f8      	str	r0, [r7, #12]
 800630a:	e010      	b.n	800632e <FLASH_WaitForLastOperation+0x32>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006312:	d00c      	beq.n	800632e <FLASH_WaitForLastOperation+0x32>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d007      	beq.n	800632a <FLASH_WaitForLastOperation+0x2e>
 800631a:	f7fe fe77 	bl	800500c <HAL_GetTick>
 800631e:	4602      	mov	r2, r0
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	1ad3      	subs	r3, r2, r3
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	429a      	cmp	r2, r3
 8006328:	d201      	bcs.n	800632e <FLASH_WaitForLastOperation+0x32>
 800632a:	2303      	movs	r3, #3
 800632c:	e025      	b.n	800637a <FLASH_WaitForLastOperation+0x7e>
 800632e:	4b15      	ldr	r3, [pc, #84]	; (8006384 <FLASH_WaitForLastOperation+0x88>)
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	f003 0301 	and.w	r3, r3, #1
 8006336:	2b00      	cmp	r3, #0
 8006338:	d1e8      	bne.n	800630c <FLASH_WaitForLastOperation+0x10>
 800633a:	4b12      	ldr	r3, [pc, #72]	; (8006384 <FLASH_WaitForLastOperation+0x88>)
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	f003 0320 	and.w	r3, r3, #32
 8006342:	2b00      	cmp	r3, #0
 8006344:	d002      	beq.n	800634c <FLASH_WaitForLastOperation+0x50>
 8006346:	4b0f      	ldr	r3, [pc, #60]	; (8006384 <FLASH_WaitForLastOperation+0x88>)
 8006348:	2220      	movs	r2, #32
 800634a:	60da      	str	r2, [r3, #12]
 800634c:	4b0d      	ldr	r3, [pc, #52]	; (8006384 <FLASH_WaitForLastOperation+0x88>)
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	f003 0310 	and.w	r3, r3, #16
 8006354:	2b00      	cmp	r3, #0
 8006356:	d10b      	bne.n	8006370 <FLASH_WaitForLastOperation+0x74>
 8006358:	4b0a      	ldr	r3, [pc, #40]	; (8006384 <FLASH_WaitForLastOperation+0x88>)
 800635a:	69db      	ldr	r3, [r3, #28]
 800635c:	f003 0301 	and.w	r3, r3, #1
 8006360:	2b00      	cmp	r3, #0
 8006362:	d105      	bne.n	8006370 <FLASH_WaitForLastOperation+0x74>
 8006364:	4b07      	ldr	r3, [pc, #28]	; (8006384 <FLASH_WaitForLastOperation+0x88>)
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	f003 0304 	and.w	r3, r3, #4
 800636c:	2b00      	cmp	r3, #0
 800636e:	d003      	beq.n	8006378 <FLASH_WaitForLastOperation+0x7c>
 8006370:	f000 f80a 	bl	8006388 <FLASH_SetErrorCode>
 8006374:	2301      	movs	r3, #1
 8006376:	e000      	b.n	800637a <FLASH_WaitForLastOperation+0x7e>
 8006378:	2300      	movs	r3, #0
 800637a:	4618      	mov	r0, r3
 800637c:	3710      	adds	r7, #16
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	40022000 	.word	0x40022000

08006388 <FLASH_SetErrorCode>:
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	2300      	movs	r3, #0
 8006390:	607b      	str	r3, [r7, #4]
 8006392:	4b23      	ldr	r3, [pc, #140]	; (8006420 <FLASH_SetErrorCode+0x98>)
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	f003 0310 	and.w	r3, r3, #16
 800639a:	2b00      	cmp	r3, #0
 800639c:	d009      	beq.n	80063b2 <FLASH_SetErrorCode+0x2a>
 800639e:	4b21      	ldr	r3, [pc, #132]	; (8006424 <FLASH_SetErrorCode+0x9c>)
 80063a0:	69db      	ldr	r3, [r3, #28]
 80063a2:	f043 0302 	orr.w	r3, r3, #2
 80063a6:	4a1f      	ldr	r2, [pc, #124]	; (8006424 <FLASH_SetErrorCode+0x9c>)
 80063a8:	61d3      	str	r3, [r2, #28]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f043 0310 	orr.w	r3, r3, #16
 80063b0:	607b      	str	r3, [r7, #4]
 80063b2:	4b1b      	ldr	r3, [pc, #108]	; (8006420 <FLASH_SetErrorCode+0x98>)
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	f003 0304 	and.w	r3, r3, #4
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d009      	beq.n	80063d2 <FLASH_SetErrorCode+0x4a>
 80063be:	4b19      	ldr	r3, [pc, #100]	; (8006424 <FLASH_SetErrorCode+0x9c>)
 80063c0:	69db      	ldr	r3, [r3, #28]
 80063c2:	f043 0301 	orr.w	r3, r3, #1
 80063c6:	4a17      	ldr	r2, [pc, #92]	; (8006424 <FLASH_SetErrorCode+0x9c>)
 80063c8:	61d3      	str	r3, [r2, #28]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f043 0304 	orr.w	r3, r3, #4
 80063d0:	607b      	str	r3, [r7, #4]
 80063d2:	4b13      	ldr	r3, [pc, #76]	; (8006420 <FLASH_SetErrorCode+0x98>)
 80063d4:	69db      	ldr	r3, [r3, #28]
 80063d6:	f003 0301 	and.w	r3, r3, #1
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00b      	beq.n	80063f6 <FLASH_SetErrorCode+0x6e>
 80063de:	4b11      	ldr	r3, [pc, #68]	; (8006424 <FLASH_SetErrorCode+0x9c>)
 80063e0:	69db      	ldr	r3, [r3, #28]
 80063e2:	f043 0304 	orr.w	r3, r3, #4
 80063e6:	4a0f      	ldr	r2, [pc, #60]	; (8006424 <FLASH_SetErrorCode+0x9c>)
 80063e8:	61d3      	str	r3, [r2, #28]
 80063ea:	4b0d      	ldr	r3, [pc, #52]	; (8006420 <FLASH_SetErrorCode+0x98>)
 80063ec:	69db      	ldr	r3, [r3, #28]
 80063ee:	4a0c      	ldr	r2, [pc, #48]	; (8006420 <FLASH_SetErrorCode+0x98>)
 80063f0:	f023 0301 	bic.w	r3, r3, #1
 80063f4:	61d3      	str	r3, [r2, #28]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f240 1201 	movw	r2, #257	; 0x101
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d106      	bne.n	800640e <FLASH_SetErrorCode+0x86>
 8006400:	4b07      	ldr	r3, [pc, #28]	; (8006420 <FLASH_SetErrorCode+0x98>)
 8006402:	69db      	ldr	r3, [r3, #28]
 8006404:	4a06      	ldr	r2, [pc, #24]	; (8006420 <FLASH_SetErrorCode+0x98>)
 8006406:	f023 0301 	bic.w	r3, r3, #1
 800640a:	61d3      	str	r3, [r2, #28]
 800640c:	e002      	b.n	8006414 <FLASH_SetErrorCode+0x8c>
 800640e:	4a04      	ldr	r2, [pc, #16]	; (8006420 <FLASH_SetErrorCode+0x98>)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	60d3      	str	r3, [r2, #12]
 8006414:	bf00      	nop
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	bc80      	pop	{r7}
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	40022000 	.word	0x40022000
 8006424:	20000a18 	.word	0x20000a18

08006428 <HAL_FLASHEx_Erase>:
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
 8006432:	2301      	movs	r3, #1
 8006434:	73fb      	strb	r3, [r7, #15]
 8006436:	2300      	movs	r3, #0
 8006438:	60bb      	str	r3, [r7, #8]
 800643a:	4b2f      	ldr	r3, [pc, #188]	; (80064f8 <HAL_FLASHEx_Erase+0xd0>)
 800643c:	7e1b      	ldrb	r3, [r3, #24]
 800643e:	2b01      	cmp	r3, #1
 8006440:	d101      	bne.n	8006446 <HAL_FLASHEx_Erase+0x1e>
 8006442:	2302      	movs	r3, #2
 8006444:	e053      	b.n	80064ee <HAL_FLASHEx_Erase+0xc6>
 8006446:	4b2c      	ldr	r3, [pc, #176]	; (80064f8 <HAL_FLASHEx_Erase+0xd0>)
 8006448:	2201      	movs	r2, #1
 800644a:	761a      	strb	r2, [r3, #24]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2b02      	cmp	r3, #2
 8006452:	d116      	bne.n	8006482 <HAL_FLASHEx_Erase+0x5a>
 8006454:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006458:	f7ff ff50 	bl	80062fc <FLASH_WaitForLastOperation>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d141      	bne.n	80064e6 <HAL_FLASHEx_Erase+0xbe>
 8006462:	2001      	movs	r0, #1
 8006464:	f000 f84c 	bl	8006500 <FLASH_MassErase>
 8006468:	f24c 3050 	movw	r0, #50000	; 0xc350
 800646c:	f7ff ff46 	bl	80062fc <FLASH_WaitForLastOperation>
 8006470:	4603      	mov	r3, r0
 8006472:	73fb      	strb	r3, [r7, #15]
 8006474:	4b21      	ldr	r3, [pc, #132]	; (80064fc <HAL_FLASHEx_Erase+0xd4>)
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	4a20      	ldr	r2, [pc, #128]	; (80064fc <HAL_FLASHEx_Erase+0xd4>)
 800647a:	f023 0304 	bic.w	r3, r3, #4
 800647e:	6113      	str	r3, [r2, #16]
 8006480:	e031      	b.n	80064e6 <HAL_FLASHEx_Erase+0xbe>
 8006482:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006486:	f7ff ff39 	bl	80062fc <FLASH_WaitForLastOperation>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d12a      	bne.n	80064e6 <HAL_FLASHEx_Erase+0xbe>
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	f04f 32ff 	mov.w	r2, #4294967295
 8006496:	601a      	str	r2, [r3, #0]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	60bb      	str	r3, [r7, #8]
 800649e:	e019      	b.n	80064d4 <HAL_FLASHEx_Erase+0xac>
 80064a0:	68b8      	ldr	r0, [r7, #8]
 80064a2:	f000 f849 	bl	8006538 <FLASH_PageErase>
 80064a6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80064aa:	f7ff ff27 	bl	80062fc <FLASH_WaitForLastOperation>
 80064ae:	4603      	mov	r3, r0
 80064b0:	73fb      	strb	r3, [r7, #15]
 80064b2:	4b12      	ldr	r3, [pc, #72]	; (80064fc <HAL_FLASHEx_Erase+0xd4>)
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	4a11      	ldr	r2, [pc, #68]	; (80064fc <HAL_FLASHEx_Erase+0xd4>)
 80064b8:	f023 0302 	bic.w	r3, r3, #2
 80064bc:	6113      	str	r3, [r2, #16]
 80064be:	7bfb      	ldrb	r3, [r7, #15]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d003      	beq.n	80064cc <HAL_FLASHEx_Erase+0xa4>
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	68ba      	ldr	r2, [r7, #8]
 80064c8:	601a      	str	r2, [r3, #0]
 80064ca:	e00c      	b.n	80064e6 <HAL_FLASHEx_Erase+0xbe>
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064d2:	60bb      	str	r3, [r7, #8]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	029a      	lsls	r2, r3, #10
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	4413      	add	r3, r2
 80064e0:	68ba      	ldr	r2, [r7, #8]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d3dc      	bcc.n	80064a0 <HAL_FLASHEx_Erase+0x78>
 80064e6:	4b04      	ldr	r3, [pc, #16]	; (80064f8 <HAL_FLASHEx_Erase+0xd0>)
 80064e8:	2200      	movs	r2, #0
 80064ea:	761a      	strb	r2, [r3, #24]
 80064ec:	7bfb      	ldrb	r3, [r7, #15]
 80064ee:	4618      	mov	r0, r3
 80064f0:	3710      	adds	r7, #16
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	20000a18 	.word	0x20000a18
 80064fc:	40022000 	.word	0x40022000

08006500 <FLASH_MassErase>:
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	4b09      	ldr	r3, [pc, #36]	; (8006530 <FLASH_MassErase+0x30>)
 800650a:	2200      	movs	r2, #0
 800650c:	61da      	str	r2, [r3, #28]
 800650e:	4b09      	ldr	r3, [pc, #36]	; (8006534 <FLASH_MassErase+0x34>)
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	4a08      	ldr	r2, [pc, #32]	; (8006534 <FLASH_MassErase+0x34>)
 8006514:	f043 0304 	orr.w	r3, r3, #4
 8006518:	6113      	str	r3, [r2, #16]
 800651a:	4b06      	ldr	r3, [pc, #24]	; (8006534 <FLASH_MassErase+0x34>)
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	4a05      	ldr	r2, [pc, #20]	; (8006534 <FLASH_MassErase+0x34>)
 8006520:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006524:	6113      	str	r3, [r2, #16]
 8006526:	bf00      	nop
 8006528:	370c      	adds	r7, #12
 800652a:	46bd      	mov	sp, r7
 800652c:	bc80      	pop	{r7}
 800652e:	4770      	bx	lr
 8006530:	20000a18 	.word	0x20000a18
 8006534:	40022000 	.word	0x40022000

08006538 <FLASH_PageErase>:
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	4b0b      	ldr	r3, [pc, #44]	; (8006570 <FLASH_PageErase+0x38>)
 8006542:	2200      	movs	r2, #0
 8006544:	61da      	str	r2, [r3, #28]
 8006546:	4b0b      	ldr	r3, [pc, #44]	; (8006574 <FLASH_PageErase+0x3c>)
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	4a0a      	ldr	r2, [pc, #40]	; (8006574 <FLASH_PageErase+0x3c>)
 800654c:	f043 0302 	orr.w	r3, r3, #2
 8006550:	6113      	str	r3, [r2, #16]
 8006552:	4a08      	ldr	r2, [pc, #32]	; (8006574 <FLASH_PageErase+0x3c>)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6153      	str	r3, [r2, #20]
 8006558:	4b06      	ldr	r3, [pc, #24]	; (8006574 <FLASH_PageErase+0x3c>)
 800655a:	691b      	ldr	r3, [r3, #16]
 800655c:	4a05      	ldr	r2, [pc, #20]	; (8006574 <FLASH_PageErase+0x3c>)
 800655e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006562:	6113      	str	r3, [r2, #16]
 8006564:	bf00      	nop
 8006566:	370c      	adds	r7, #12
 8006568:	46bd      	mov	sp, r7
 800656a:	bc80      	pop	{r7}
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop
 8006570:	20000a18 	.word	0x20000a18
 8006574:	40022000 	.word	0x40022000

08006578 <HAL_GPIO_Init>:
 8006578:	b480      	push	{r7}
 800657a:	b08b      	sub	sp, #44	; 0x2c
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
 8006582:	2300      	movs	r3, #0
 8006584:	627b      	str	r3, [r7, #36]	; 0x24
 8006586:	2300      	movs	r3, #0
 8006588:	623b      	str	r3, [r7, #32]
 800658a:	e169      	b.n	8006860 <HAL_GPIO_Init+0x2e8>
 800658c:	2201      	movs	r2, #1
 800658e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006590:	fa02 f303 	lsl.w	r3, r2, r3
 8006594:	61fb      	str	r3, [r7, #28]
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	69fa      	ldr	r2, [r7, #28]
 800659c:	4013      	ands	r3, r2
 800659e:	61bb      	str	r3, [r7, #24]
 80065a0:	69ba      	ldr	r2, [r7, #24]
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	f040 8158 	bne.w	800685a <HAL_GPIO_Init+0x2e2>
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	4a9a      	ldr	r2, [pc, #616]	; (8006818 <HAL_GPIO_Init+0x2a0>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d05e      	beq.n	8006672 <HAL_GPIO_Init+0xfa>
 80065b4:	4a98      	ldr	r2, [pc, #608]	; (8006818 <HAL_GPIO_Init+0x2a0>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d875      	bhi.n	80066a6 <HAL_GPIO_Init+0x12e>
 80065ba:	4a98      	ldr	r2, [pc, #608]	; (800681c <HAL_GPIO_Init+0x2a4>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d058      	beq.n	8006672 <HAL_GPIO_Init+0xfa>
 80065c0:	4a96      	ldr	r2, [pc, #600]	; (800681c <HAL_GPIO_Init+0x2a4>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d86f      	bhi.n	80066a6 <HAL_GPIO_Init+0x12e>
 80065c6:	4a96      	ldr	r2, [pc, #600]	; (8006820 <HAL_GPIO_Init+0x2a8>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d052      	beq.n	8006672 <HAL_GPIO_Init+0xfa>
 80065cc:	4a94      	ldr	r2, [pc, #592]	; (8006820 <HAL_GPIO_Init+0x2a8>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d869      	bhi.n	80066a6 <HAL_GPIO_Init+0x12e>
 80065d2:	4a94      	ldr	r2, [pc, #592]	; (8006824 <HAL_GPIO_Init+0x2ac>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d04c      	beq.n	8006672 <HAL_GPIO_Init+0xfa>
 80065d8:	4a92      	ldr	r2, [pc, #584]	; (8006824 <HAL_GPIO_Init+0x2ac>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d863      	bhi.n	80066a6 <HAL_GPIO_Init+0x12e>
 80065de:	4a92      	ldr	r2, [pc, #584]	; (8006828 <HAL_GPIO_Init+0x2b0>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d046      	beq.n	8006672 <HAL_GPIO_Init+0xfa>
 80065e4:	4a90      	ldr	r2, [pc, #576]	; (8006828 <HAL_GPIO_Init+0x2b0>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d85d      	bhi.n	80066a6 <HAL_GPIO_Init+0x12e>
 80065ea:	2b12      	cmp	r3, #18
 80065ec:	d82a      	bhi.n	8006644 <HAL_GPIO_Init+0xcc>
 80065ee:	2b12      	cmp	r3, #18
 80065f0:	d859      	bhi.n	80066a6 <HAL_GPIO_Init+0x12e>
 80065f2:	a201      	add	r2, pc, #4	; (adr r2, 80065f8 <HAL_GPIO_Init+0x80>)
 80065f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f8:	08006673 	.word	0x08006673
 80065fc:	0800664d 	.word	0x0800664d
 8006600:	0800665f 	.word	0x0800665f
 8006604:	080066a1 	.word	0x080066a1
 8006608:	080066a7 	.word	0x080066a7
 800660c:	080066a7 	.word	0x080066a7
 8006610:	080066a7 	.word	0x080066a7
 8006614:	080066a7 	.word	0x080066a7
 8006618:	080066a7 	.word	0x080066a7
 800661c:	080066a7 	.word	0x080066a7
 8006620:	080066a7 	.word	0x080066a7
 8006624:	080066a7 	.word	0x080066a7
 8006628:	080066a7 	.word	0x080066a7
 800662c:	080066a7 	.word	0x080066a7
 8006630:	080066a7 	.word	0x080066a7
 8006634:	080066a7 	.word	0x080066a7
 8006638:	080066a7 	.word	0x080066a7
 800663c:	08006655 	.word	0x08006655
 8006640:	08006669 	.word	0x08006669
 8006644:	4a79      	ldr	r2, [pc, #484]	; (800682c <HAL_GPIO_Init+0x2b4>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d013      	beq.n	8006672 <HAL_GPIO_Init+0xfa>
 800664a:	e02c      	b.n	80066a6 <HAL_GPIO_Init+0x12e>
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	623b      	str	r3, [r7, #32]
 8006652:	e029      	b.n	80066a8 <HAL_GPIO_Init+0x130>
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	3304      	adds	r3, #4
 800665a:	623b      	str	r3, [r7, #32]
 800665c:	e024      	b.n	80066a8 <HAL_GPIO_Init+0x130>
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	3308      	adds	r3, #8
 8006664:	623b      	str	r3, [r7, #32]
 8006666:	e01f      	b.n	80066a8 <HAL_GPIO_Init+0x130>
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	330c      	adds	r3, #12
 800666e:	623b      	str	r3, [r7, #32]
 8006670:	e01a      	b.n	80066a8 <HAL_GPIO_Init+0x130>
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d102      	bne.n	8006680 <HAL_GPIO_Init+0x108>
 800667a:	2304      	movs	r3, #4
 800667c:	623b      	str	r3, [r7, #32]
 800667e:	e013      	b.n	80066a8 <HAL_GPIO_Init+0x130>
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	2b01      	cmp	r3, #1
 8006686:	d105      	bne.n	8006694 <HAL_GPIO_Init+0x11c>
 8006688:	2308      	movs	r3, #8
 800668a:	623b      	str	r3, [r7, #32]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	69fa      	ldr	r2, [r7, #28]
 8006690:	611a      	str	r2, [r3, #16]
 8006692:	e009      	b.n	80066a8 <HAL_GPIO_Init+0x130>
 8006694:	2308      	movs	r3, #8
 8006696:	623b      	str	r3, [r7, #32]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	69fa      	ldr	r2, [r7, #28]
 800669c:	615a      	str	r2, [r3, #20]
 800669e:	e003      	b.n	80066a8 <HAL_GPIO_Init+0x130>
 80066a0:	2300      	movs	r3, #0
 80066a2:	623b      	str	r3, [r7, #32]
 80066a4:	e000      	b.n	80066a8 <HAL_GPIO_Init+0x130>
 80066a6:	bf00      	nop
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	2bff      	cmp	r3, #255	; 0xff
 80066ac:	d801      	bhi.n	80066b2 <HAL_GPIO_Init+0x13a>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	e001      	b.n	80066b6 <HAL_GPIO_Init+0x13e>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	3304      	adds	r3, #4
 80066b6:	617b      	str	r3, [r7, #20]
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	2bff      	cmp	r3, #255	; 0xff
 80066bc:	d802      	bhi.n	80066c4 <HAL_GPIO_Init+0x14c>
 80066be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	e002      	b.n	80066ca <HAL_GPIO_Init+0x152>
 80066c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c6:	3b08      	subs	r3, #8
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	613b      	str	r3, [r7, #16]
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	210f      	movs	r1, #15
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	fa01 f303 	lsl.w	r3, r1, r3
 80066d8:	43db      	mvns	r3, r3
 80066da:	401a      	ands	r2, r3
 80066dc:	6a39      	ldr	r1, [r7, #32]
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	fa01 f303 	lsl.w	r3, r1, r3
 80066e4:	431a      	orrs	r2, r3
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	601a      	str	r2, [r3, #0]
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	f000 80b1 	beq.w	800685a <HAL_GPIO_Init+0x2e2>
 80066f8:	4b4d      	ldr	r3, [pc, #308]	; (8006830 <HAL_GPIO_Init+0x2b8>)
 80066fa:	699b      	ldr	r3, [r3, #24]
 80066fc:	4a4c      	ldr	r2, [pc, #304]	; (8006830 <HAL_GPIO_Init+0x2b8>)
 80066fe:	f043 0301 	orr.w	r3, r3, #1
 8006702:	6193      	str	r3, [r2, #24]
 8006704:	4b4a      	ldr	r3, [pc, #296]	; (8006830 <HAL_GPIO_Init+0x2b8>)
 8006706:	699b      	ldr	r3, [r3, #24]
 8006708:	f003 0301 	and.w	r3, r3, #1
 800670c:	60bb      	str	r3, [r7, #8]
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	4a48      	ldr	r2, [pc, #288]	; (8006834 <HAL_GPIO_Init+0x2bc>)
 8006712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006714:	089b      	lsrs	r3, r3, #2
 8006716:	3302      	adds	r3, #2
 8006718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800671c:	60fb      	str	r3, [r7, #12]
 800671e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006720:	f003 0303 	and.w	r3, r3, #3
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	220f      	movs	r2, #15
 8006728:	fa02 f303 	lsl.w	r3, r2, r3
 800672c:	43db      	mvns	r3, r3
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	4013      	ands	r3, r2
 8006732:	60fb      	str	r3, [r7, #12]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	4a40      	ldr	r2, [pc, #256]	; (8006838 <HAL_GPIO_Init+0x2c0>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d013      	beq.n	8006764 <HAL_GPIO_Init+0x1ec>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	4a3f      	ldr	r2, [pc, #252]	; (800683c <HAL_GPIO_Init+0x2c4>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d00d      	beq.n	8006760 <HAL_GPIO_Init+0x1e8>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4a3e      	ldr	r2, [pc, #248]	; (8006840 <HAL_GPIO_Init+0x2c8>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d007      	beq.n	800675c <HAL_GPIO_Init+0x1e4>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a3d      	ldr	r2, [pc, #244]	; (8006844 <HAL_GPIO_Init+0x2cc>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d101      	bne.n	8006758 <HAL_GPIO_Init+0x1e0>
 8006754:	2303      	movs	r3, #3
 8006756:	e006      	b.n	8006766 <HAL_GPIO_Init+0x1ee>
 8006758:	2304      	movs	r3, #4
 800675a:	e004      	b.n	8006766 <HAL_GPIO_Init+0x1ee>
 800675c:	2302      	movs	r3, #2
 800675e:	e002      	b.n	8006766 <HAL_GPIO_Init+0x1ee>
 8006760:	2301      	movs	r3, #1
 8006762:	e000      	b.n	8006766 <HAL_GPIO_Init+0x1ee>
 8006764:	2300      	movs	r3, #0
 8006766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006768:	f002 0203 	and.w	r2, r2, #3
 800676c:	0092      	lsls	r2, r2, #2
 800676e:	4093      	lsls	r3, r2
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	4313      	orrs	r3, r2
 8006774:	60fb      	str	r3, [r7, #12]
 8006776:	492f      	ldr	r1, [pc, #188]	; (8006834 <HAL_GPIO_Init+0x2bc>)
 8006778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677a:	089b      	lsrs	r3, r3, #2
 800677c:	3302      	adds	r3, #2
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800678c:	2b00      	cmp	r3, #0
 800678e:	d006      	beq.n	800679e <HAL_GPIO_Init+0x226>
 8006790:	4b2d      	ldr	r3, [pc, #180]	; (8006848 <HAL_GPIO_Init+0x2d0>)
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	492c      	ldr	r1, [pc, #176]	; (8006848 <HAL_GPIO_Init+0x2d0>)
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	4313      	orrs	r3, r2
 800679a:	600b      	str	r3, [r1, #0]
 800679c:	e006      	b.n	80067ac <HAL_GPIO_Init+0x234>
 800679e:	4b2a      	ldr	r3, [pc, #168]	; (8006848 <HAL_GPIO_Init+0x2d0>)
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	43db      	mvns	r3, r3
 80067a6:	4928      	ldr	r1, [pc, #160]	; (8006848 <HAL_GPIO_Init+0x2d0>)
 80067a8:	4013      	ands	r3, r2
 80067aa:	600b      	str	r3, [r1, #0]
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d006      	beq.n	80067c6 <HAL_GPIO_Init+0x24e>
 80067b8:	4b23      	ldr	r3, [pc, #140]	; (8006848 <HAL_GPIO_Init+0x2d0>)
 80067ba:	685a      	ldr	r2, [r3, #4]
 80067bc:	4922      	ldr	r1, [pc, #136]	; (8006848 <HAL_GPIO_Init+0x2d0>)
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	604b      	str	r3, [r1, #4]
 80067c4:	e006      	b.n	80067d4 <HAL_GPIO_Init+0x25c>
 80067c6:	4b20      	ldr	r3, [pc, #128]	; (8006848 <HAL_GPIO_Init+0x2d0>)
 80067c8:	685a      	ldr	r2, [r3, #4]
 80067ca:	69bb      	ldr	r3, [r7, #24]
 80067cc:	43db      	mvns	r3, r3
 80067ce:	491e      	ldr	r1, [pc, #120]	; (8006848 <HAL_GPIO_Init+0x2d0>)
 80067d0:	4013      	ands	r3, r2
 80067d2:	604b      	str	r3, [r1, #4]
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d006      	beq.n	80067ee <HAL_GPIO_Init+0x276>
 80067e0:	4b19      	ldr	r3, [pc, #100]	; (8006848 <HAL_GPIO_Init+0x2d0>)
 80067e2:	689a      	ldr	r2, [r3, #8]
 80067e4:	4918      	ldr	r1, [pc, #96]	; (8006848 <HAL_GPIO_Init+0x2d0>)
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	608b      	str	r3, [r1, #8]
 80067ec:	e006      	b.n	80067fc <HAL_GPIO_Init+0x284>
 80067ee:	4b16      	ldr	r3, [pc, #88]	; (8006848 <HAL_GPIO_Init+0x2d0>)
 80067f0:	689a      	ldr	r2, [r3, #8]
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	43db      	mvns	r3, r3
 80067f6:	4914      	ldr	r1, [pc, #80]	; (8006848 <HAL_GPIO_Init+0x2d0>)
 80067f8:	4013      	ands	r3, r2
 80067fa:	608b      	str	r3, [r1, #8]
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006804:	2b00      	cmp	r3, #0
 8006806:	d021      	beq.n	800684c <HAL_GPIO_Init+0x2d4>
 8006808:	4b0f      	ldr	r3, [pc, #60]	; (8006848 <HAL_GPIO_Init+0x2d0>)
 800680a:	68da      	ldr	r2, [r3, #12]
 800680c:	490e      	ldr	r1, [pc, #56]	; (8006848 <HAL_GPIO_Init+0x2d0>)
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	4313      	orrs	r3, r2
 8006812:	60cb      	str	r3, [r1, #12]
 8006814:	e021      	b.n	800685a <HAL_GPIO_Init+0x2e2>
 8006816:	bf00      	nop
 8006818:	10320000 	.word	0x10320000
 800681c:	10310000 	.word	0x10310000
 8006820:	10220000 	.word	0x10220000
 8006824:	10210000 	.word	0x10210000
 8006828:	10120000 	.word	0x10120000
 800682c:	10110000 	.word	0x10110000
 8006830:	40021000 	.word	0x40021000
 8006834:	40010000 	.word	0x40010000
 8006838:	40010800 	.word	0x40010800
 800683c:	40010c00 	.word	0x40010c00
 8006840:	40011000 	.word	0x40011000
 8006844:	40011400 	.word	0x40011400
 8006848:	40010400 	.word	0x40010400
 800684c:	4b0b      	ldr	r3, [pc, #44]	; (800687c <HAL_GPIO_Init+0x304>)
 800684e:	68da      	ldr	r2, [r3, #12]
 8006850:	69bb      	ldr	r3, [r7, #24]
 8006852:	43db      	mvns	r3, r3
 8006854:	4909      	ldr	r1, [pc, #36]	; (800687c <HAL_GPIO_Init+0x304>)
 8006856:	4013      	ands	r3, r2
 8006858:	60cb      	str	r3, [r1, #12]
 800685a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685c:	3301      	adds	r3, #1
 800685e:	627b      	str	r3, [r7, #36]	; 0x24
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006866:	fa22 f303 	lsr.w	r3, r2, r3
 800686a:	2b00      	cmp	r3, #0
 800686c:	f47f ae8e 	bne.w	800658c <HAL_GPIO_Init+0x14>
 8006870:	bf00      	nop
 8006872:	bf00      	nop
 8006874:	372c      	adds	r7, #44	; 0x2c
 8006876:	46bd      	mov	sp, r7
 8006878:	bc80      	pop	{r7}
 800687a:	4770      	bx	lr
 800687c:	40010400 	.word	0x40010400

08006880 <HAL_GPIO_ReadPin>:
 8006880:	b480      	push	{r7}
 8006882:	b085      	sub	sp, #20
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	460b      	mov	r3, r1
 800688a:	807b      	strh	r3, [r7, #2]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	689a      	ldr	r2, [r3, #8]
 8006890:	887b      	ldrh	r3, [r7, #2]
 8006892:	4013      	ands	r3, r2
 8006894:	2b00      	cmp	r3, #0
 8006896:	d002      	beq.n	800689e <HAL_GPIO_ReadPin+0x1e>
 8006898:	2301      	movs	r3, #1
 800689a:	73fb      	strb	r3, [r7, #15]
 800689c:	e001      	b.n	80068a2 <HAL_GPIO_ReadPin+0x22>
 800689e:	2300      	movs	r3, #0
 80068a0:	73fb      	strb	r3, [r7, #15]
 80068a2:	7bfb      	ldrb	r3, [r7, #15]
 80068a4:	4618      	mov	r0, r3
 80068a6:	3714      	adds	r7, #20
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bc80      	pop	{r7}
 80068ac:	4770      	bx	lr

080068ae <HAL_GPIO_WritePin>:
 80068ae:	b480      	push	{r7}
 80068b0:	b083      	sub	sp, #12
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
 80068b6:	460b      	mov	r3, r1
 80068b8:	807b      	strh	r3, [r7, #2]
 80068ba:	4613      	mov	r3, r2
 80068bc:	707b      	strb	r3, [r7, #1]
 80068be:	787b      	ldrb	r3, [r7, #1]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d003      	beq.n	80068cc <HAL_GPIO_WritePin+0x1e>
 80068c4:	887a      	ldrh	r2, [r7, #2]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	611a      	str	r2, [r3, #16]
 80068ca:	e003      	b.n	80068d4 <HAL_GPIO_WritePin+0x26>
 80068cc:	887b      	ldrh	r3, [r7, #2]
 80068ce:	041a      	lsls	r2, r3, #16
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	611a      	str	r2, [r3, #16]
 80068d4:	bf00      	nop
 80068d6:	370c      	adds	r7, #12
 80068d8:	46bd      	mov	sp, r7
 80068da:	bc80      	pop	{r7}
 80068dc:	4770      	bx	lr
	...

080068e0 <HAL_GPIO_EXTI_IRQHandler>:
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	4603      	mov	r3, r0
 80068e8:	80fb      	strh	r3, [r7, #6]
 80068ea:	4b08      	ldr	r3, [pc, #32]	; (800690c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80068ec:	695a      	ldr	r2, [r3, #20]
 80068ee:	88fb      	ldrh	r3, [r7, #6]
 80068f0:	4013      	ands	r3, r2
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d006      	beq.n	8006904 <HAL_GPIO_EXTI_IRQHandler+0x24>
 80068f6:	4a05      	ldr	r2, [pc, #20]	; (800690c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80068f8:	88fb      	ldrh	r3, [r7, #6]
 80068fa:	6153      	str	r3, [r2, #20]
 80068fc:	88fb      	ldrh	r3, [r7, #6]
 80068fe:	4618      	mov	r0, r3
 8006900:	f7fc ff7c 	bl	80037fc <HAL_GPIO_EXTI_Callback>
 8006904:	bf00      	nop
 8006906:	3708      	adds	r7, #8
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}
 800690c:	40010400 	.word	0x40010400

08006910 <HAL_I2C_Init>:
 8006910:	b580      	push	{r7, lr}
 8006912:	b084      	sub	sp, #16
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d101      	bne.n	8006922 <HAL_I2C_Init+0x12>
 800691e:	2301      	movs	r3, #1
 8006920:	e12b      	b.n	8006b7a <HAL_I2C_Init+0x26a>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006928:	b2db      	uxtb	r3, r3
 800692a:	2b00      	cmp	r3, #0
 800692c:	d106      	bne.n	800693c <HAL_I2C_Init+0x2c>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f7fe f930 	bl	8004b9c <HAL_I2C_MspInit>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2224      	movs	r2, #36	; 0x24
 8006940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f022 0201 	bic.w	r2, r2, #1
 8006952:	601a      	str	r2, [r3, #0]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006962:	601a      	str	r2, [r3, #0]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006972:	601a      	str	r2, [r3, #0]
 8006974:	f001 f918 	bl	8007ba8 <HAL_RCC_GetPCLK1Freq>
 8006978:	60f8      	str	r0, [r7, #12]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	4a81      	ldr	r2, [pc, #516]	; (8006b84 <HAL_I2C_Init+0x274>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d807      	bhi.n	8006994 <HAL_I2C_Init+0x84>
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	4a80      	ldr	r2, [pc, #512]	; (8006b88 <HAL_I2C_Init+0x278>)
 8006988:	4293      	cmp	r3, r2
 800698a:	bf94      	ite	ls
 800698c:	2301      	movls	r3, #1
 800698e:	2300      	movhi	r3, #0
 8006990:	b2db      	uxtb	r3, r3
 8006992:	e006      	b.n	80069a2 <HAL_I2C_Init+0x92>
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	4a7d      	ldr	r2, [pc, #500]	; (8006b8c <HAL_I2C_Init+0x27c>)
 8006998:	4293      	cmp	r3, r2
 800699a:	bf94      	ite	ls
 800699c:	2301      	movls	r3, #1
 800699e:	2300      	movhi	r3, #0
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d001      	beq.n	80069aa <HAL_I2C_Init+0x9a>
 80069a6:	2301      	movs	r3, #1
 80069a8:	e0e7      	b.n	8006b7a <HAL_I2C_Init+0x26a>
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	4a78      	ldr	r2, [pc, #480]	; (8006b90 <HAL_I2C_Init+0x280>)
 80069ae:	fba2 2303 	umull	r2, r3, r2, r3
 80069b2:	0c9b      	lsrs	r3, r3, #18
 80069b4:	60bb      	str	r3, [r7, #8]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	68ba      	ldr	r2, [r7, #8]
 80069c6:	430a      	orrs	r2, r1
 80069c8:	605a      	str	r2, [r3, #4]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	6a1b      	ldr	r3, [r3, #32]
 80069d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	4a6a      	ldr	r2, [pc, #424]	; (8006b84 <HAL_I2C_Init+0x274>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d802      	bhi.n	80069e4 <HAL_I2C_Init+0xd4>
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	3301      	adds	r3, #1
 80069e2:	e009      	b.n	80069f8 <HAL_I2C_Init+0xe8>
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80069ea:	fb02 f303 	mul.w	r3, r2, r3
 80069ee:	4a69      	ldr	r2, [pc, #420]	; (8006b94 <HAL_I2C_Init+0x284>)
 80069f0:	fba2 2303 	umull	r2, r3, r2, r3
 80069f4:	099b      	lsrs	r3, r3, #6
 80069f6:	3301      	adds	r3, #1
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	6812      	ldr	r2, [r2, #0]
 80069fc:	430b      	orrs	r3, r1
 80069fe:	6213      	str	r3, [r2, #32]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	69db      	ldr	r3, [r3, #28]
 8006a06:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006a0a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	495c      	ldr	r1, [pc, #368]	; (8006b84 <HAL_I2C_Init+0x274>)
 8006a14:	428b      	cmp	r3, r1
 8006a16:	d819      	bhi.n	8006a4c <HAL_I2C_Init+0x13c>
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	1e59      	subs	r1, r3, #1
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	005b      	lsls	r3, r3, #1
 8006a22:	fbb1 f3f3 	udiv	r3, r1, r3
 8006a26:	1c59      	adds	r1, r3, #1
 8006a28:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006a2c:	400b      	ands	r3, r1
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00a      	beq.n	8006a48 <HAL_I2C_Init+0x138>
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	1e59      	subs	r1, r3, #1
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	005b      	lsls	r3, r3, #1
 8006a3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006a40:	3301      	adds	r3, #1
 8006a42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a46:	e051      	b.n	8006aec <HAL_I2C_Init+0x1dc>
 8006a48:	2304      	movs	r3, #4
 8006a4a:	e04f      	b.n	8006aec <HAL_I2C_Init+0x1dc>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d111      	bne.n	8006a78 <HAL_I2C_Init+0x168>
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	1e58      	subs	r0, r3, #1
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6859      	ldr	r1, [r3, #4]
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	005b      	lsls	r3, r3, #1
 8006a60:	440b      	add	r3, r1
 8006a62:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a66:	3301      	adds	r3, #1
 8006a68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	bf0c      	ite	eq
 8006a70:	2301      	moveq	r3, #1
 8006a72:	2300      	movne	r3, #0
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	e012      	b.n	8006a9e <HAL_I2C_Init+0x18e>
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	1e58      	subs	r0, r3, #1
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6859      	ldr	r1, [r3, #4]
 8006a80:	460b      	mov	r3, r1
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	440b      	add	r3, r1
 8006a86:	0099      	lsls	r1, r3, #2
 8006a88:	440b      	add	r3, r1
 8006a8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a8e:	3301      	adds	r3, #1
 8006a90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	bf0c      	ite	eq
 8006a98:	2301      	moveq	r3, #1
 8006a9a:	2300      	movne	r3, #0
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d001      	beq.n	8006aa6 <HAL_I2C_Init+0x196>
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e022      	b.n	8006aec <HAL_I2C_Init+0x1dc>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d10e      	bne.n	8006acc <HAL_I2C_Init+0x1bc>
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	1e58      	subs	r0, r3, #1
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6859      	ldr	r1, [r3, #4]
 8006ab6:	460b      	mov	r3, r1
 8006ab8:	005b      	lsls	r3, r3, #1
 8006aba:	440b      	add	r3, r1
 8006abc:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ac0:	3301      	adds	r3, #1
 8006ac2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aca:	e00f      	b.n	8006aec <HAL_I2C_Init+0x1dc>
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	1e58      	subs	r0, r3, #1
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6859      	ldr	r1, [r3, #4]
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	440b      	add	r3, r1
 8006ada:	0099      	lsls	r1, r3, #2
 8006adc:	440b      	add	r3, r1
 8006ade:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ae8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006aec:	6879      	ldr	r1, [r7, #4]
 8006aee:	6809      	ldr	r1, [r1, #0]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	61cb      	str	r3, [r1, #28]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	69da      	ldr	r2, [r3, #28]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a1b      	ldr	r3, [r3, #32]
 8006b06:	431a      	orrs	r2, r3
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	430a      	orrs	r2, r1
 8006b0e:	601a      	str	r2, [r3, #0]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006b1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	6911      	ldr	r1, [r2, #16]
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	68d2      	ldr	r2, [r2, #12]
 8006b26:	4311      	orrs	r1, r2
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	6812      	ldr	r2, [r2, #0]
 8006b2c:	430b      	orrs	r3, r1
 8006b2e:	6093      	str	r3, [r2, #8]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	695a      	ldr	r2, [r3, #20]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	699b      	ldr	r3, [r3, #24]
 8006b42:	431a      	orrs	r2, r3
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	430a      	orrs	r2, r1
 8006b4a:	60da      	str	r2, [r3, #12]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f042 0201 	orr.w	r2, r2, #1
 8006b5a:	601a      	str	r2, [r3, #0]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	641a      	str	r2, [r3, #64]	; 0x40
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2220      	movs	r2, #32
 8006b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	631a      	str	r2, [r3, #48]	; 0x30
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b78:	2300      	movs	r3, #0
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3710      	adds	r7, #16
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	bf00      	nop
 8006b84:	000186a0 	.word	0x000186a0
 8006b88:	001e847f 	.word	0x001e847f
 8006b8c:	003d08ff 	.word	0x003d08ff
 8006b90:	431bde83 	.word	0x431bde83
 8006b94:	10624dd3 	.word	0x10624dd3

08006b98 <HAL_I2C_Master_Transmit>:
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b088      	sub	sp, #32
 8006b9c:	af02      	add	r7, sp, #8
 8006b9e:	60f8      	str	r0, [r7, #12]
 8006ba0:	607a      	str	r2, [r7, #4]
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	817b      	strh	r3, [r7, #10]
 8006ba8:	4613      	mov	r3, r2
 8006baa:	813b      	strh	r3, [r7, #8]
 8006bac:	f7fe fa2e 	bl	800500c <HAL_GetTick>
 8006bb0:	6178      	str	r0, [r7, #20]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	2b20      	cmp	r3, #32
 8006bbc:	f040 80e0 	bne.w	8006d80 <HAL_I2C_Master_Transmit+0x1e8>
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	9300      	str	r3, [sp, #0]
 8006bc4:	2319      	movs	r3, #25
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	4970      	ldr	r1, [pc, #448]	; (8006d8c <HAL_I2C_Master_Transmit+0x1f4>)
 8006bca:	68f8      	ldr	r0, [r7, #12]
 8006bcc:	f000 fa92 	bl	80070f4 <I2C_WaitOnFlagUntilTimeout>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d001      	beq.n	8006bda <HAL_I2C_Master_Transmit+0x42>
 8006bd6:	2302      	movs	r3, #2
 8006bd8:	e0d3      	b.n	8006d82 <HAL_I2C_Master_Transmit+0x1ea>
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d101      	bne.n	8006be8 <HAL_I2C_Master_Transmit+0x50>
 8006be4:	2302      	movs	r3, #2
 8006be6:	e0cc      	b.n	8006d82 <HAL_I2C_Master_Transmit+0x1ea>
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 0301 	and.w	r3, r3, #1
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d007      	beq.n	8006c0e <HAL_I2C_Master_Transmit+0x76>
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f042 0201 	orr.w	r2, r2, #1
 8006c0c:	601a      	str	r2, [r3, #0]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c1c:	601a      	str	r2, [r3, #0]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2221      	movs	r2, #33	; 0x21
 8006c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2210      	movs	r2, #16
 8006c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2200      	movs	r2, #0
 8006c32:	641a      	str	r2, [r3, #64]	; 0x40
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	625a      	str	r2, [r3, #36]	; 0x24
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	893a      	ldrh	r2, [r7, #8]
 8006c3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c44:	b29a      	uxth	r2, r3
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	851a      	strh	r2, [r3, #40]	; 0x28
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	4a50      	ldr	r2, [pc, #320]	; (8006d90 <HAL_I2C_Master_Transmit+0x1f8>)
 8006c4e:	62da      	str	r2, [r3, #44]	; 0x2c
 8006c50:	8979      	ldrh	r1, [r7, #10]
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	6a3a      	ldr	r2, [r7, #32]
 8006c56:	68f8      	ldr	r0, [r7, #12]
 8006c58:	f000 f9ca 	bl	8006ff0 <I2C_MasterRequestWrite>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d001      	beq.n	8006c66 <HAL_I2C_Master_Transmit+0xce>
 8006c62:	2301      	movs	r3, #1
 8006c64:	e08d      	b.n	8006d82 <HAL_I2C_Master_Transmit+0x1ea>
 8006c66:	2300      	movs	r3, #0
 8006c68:	613b      	str	r3, [r7, #16]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	695b      	ldr	r3, [r3, #20]
 8006c70:	613b      	str	r3, [r7, #16]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	699b      	ldr	r3, [r3, #24]
 8006c78:	613b      	str	r3, [r7, #16]
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	e066      	b.n	8006d4c <HAL_I2C_Master_Transmit+0x1b4>
 8006c7e:	697a      	ldr	r2, [r7, #20]
 8006c80:	6a39      	ldr	r1, [r7, #32]
 8006c82:	68f8      	ldr	r0, [r7, #12]
 8006c84:	f000 fb0c 	bl	80072a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00d      	beq.n	8006caa <HAL_I2C_Master_Transmit+0x112>
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c92:	2b04      	cmp	r3, #4
 8006c94:	d107      	bne.n	8006ca6 <HAL_I2C_Master_Transmit+0x10e>
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ca4:	601a      	str	r2, [r3, #0]
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e06b      	b.n	8006d82 <HAL_I2C_Master_Transmit+0x1ea>
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cae:	781a      	ldrb	r2, [r3, #0]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	611a      	str	r2, [r3, #16]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cba:	1c5a      	adds	r2, r3, #1
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	625a      	str	r2, [r3, #36]	; 0x24
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	3b01      	subs	r3, #1
 8006cc8:	b29a      	uxth	r2, r3
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cd2:	3b01      	subs	r3, #1
 8006cd4:	b29a      	uxth	r2, r3
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	851a      	strh	r2, [r3, #40]	; 0x28
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	695b      	ldr	r3, [r3, #20]
 8006ce0:	f003 0304 	and.w	r3, r3, #4
 8006ce4:	2b04      	cmp	r3, #4
 8006ce6:	d11b      	bne.n	8006d20 <HAL_I2C_Master_Transmit+0x188>
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d017      	beq.n	8006d20 <HAL_I2C_Master_Transmit+0x188>
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf4:	781a      	ldrb	r2, [r3, #0]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	611a      	str	r2, [r3, #16]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d00:	1c5a      	adds	r2, r3, #1
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	625a      	str	r2, [r3, #36]	; 0x24
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	3b01      	subs	r3, #1
 8006d0e:	b29a      	uxth	r2, r3
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d18:	3b01      	subs	r3, #1
 8006d1a:	b29a      	uxth	r2, r3
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	851a      	strh	r2, [r3, #40]	; 0x28
 8006d20:	697a      	ldr	r2, [r7, #20]
 8006d22:	6a39      	ldr	r1, [r7, #32]
 8006d24:	68f8      	ldr	r0, [r7, #12]
 8006d26:	f000 fafc 	bl	8007322 <I2C_WaitOnBTFFlagUntilTimeout>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d00d      	beq.n	8006d4c <HAL_I2C_Master_Transmit+0x1b4>
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d34:	2b04      	cmp	r3, #4
 8006d36:	d107      	bne.n	8006d48 <HAL_I2C_Master_Transmit+0x1b0>
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d46:	601a      	str	r2, [r3, #0]
 8006d48:	2301      	movs	r3, #1
 8006d4a:	e01a      	b.n	8006d82 <HAL_I2C_Master_Transmit+0x1ea>
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d194      	bne.n	8006c7e <HAL_I2C_Master_Transmit+0xe6>
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d62:	601a      	str	r2, [r3, #0]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2220      	movs	r2, #32
 8006d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	e000      	b.n	8006d82 <HAL_I2C_Master_Transmit+0x1ea>
 8006d80:	2302      	movs	r3, #2
 8006d82:	4618      	mov	r0, r3
 8006d84:	3718      	adds	r7, #24
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	00100002 	.word	0x00100002
 8006d90:	ffff0000 	.word	0xffff0000

08006d94 <HAL_I2C_IsDeviceReady>:
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b08a      	sub	sp, #40	; 0x28
 8006d98:	af02      	add	r7, sp, #8
 8006d9a:	60f8      	str	r0, [r7, #12]
 8006d9c:	607a      	str	r2, [r7, #4]
 8006d9e:	603b      	str	r3, [r7, #0]
 8006da0:	460b      	mov	r3, r1
 8006da2:	817b      	strh	r3, [r7, #10]
 8006da4:	f7fe f932 	bl	800500c <HAL_GetTick>
 8006da8:	61f8      	str	r0, [r7, #28]
 8006daa:	2301      	movs	r3, #1
 8006dac:	61bb      	str	r3, [r7, #24]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	2b20      	cmp	r3, #32
 8006db8:	f040 8111 	bne.w	8006fde <HAL_I2C_IsDeviceReady+0x24a>
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	9300      	str	r3, [sp, #0]
 8006dc0:	2319      	movs	r3, #25
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	4988      	ldr	r1, [pc, #544]	; (8006fe8 <HAL_I2C_IsDeviceReady+0x254>)
 8006dc6:	68f8      	ldr	r0, [r7, #12]
 8006dc8:	f000 f994 	bl	80070f4 <I2C_WaitOnFlagUntilTimeout>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d001      	beq.n	8006dd6 <HAL_I2C_IsDeviceReady+0x42>
 8006dd2:	2302      	movs	r3, #2
 8006dd4:	e104      	b.n	8006fe0 <HAL_I2C_IsDeviceReady+0x24c>
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d101      	bne.n	8006de4 <HAL_I2C_IsDeviceReady+0x50>
 8006de0:	2302      	movs	r3, #2
 8006de2:	e0fd      	b.n	8006fe0 <HAL_I2C_IsDeviceReady+0x24c>
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f003 0301 	and.w	r3, r3, #1
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d007      	beq.n	8006e0a <HAL_I2C_IsDeviceReady+0x76>
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f042 0201 	orr.w	r2, r2, #1
 8006e08:	601a      	str	r2, [r3, #0]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e18:	601a      	str	r2, [r3, #0]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2224      	movs	r2, #36	; 0x24
 8006e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2200      	movs	r2, #0
 8006e26:	641a      	str	r2, [r3, #64]	; 0x40
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	4a70      	ldr	r2, [pc, #448]	; (8006fec <HAL_I2C_IsDeviceReady+0x258>)
 8006e2c:	62da      	str	r2, [r3, #44]	; 0x2c
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e3c:	601a      	str	r2, [r3, #0]
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	9300      	str	r3, [sp, #0]
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006e4a:	68f8      	ldr	r0, [r7, #12]
 8006e4c:	f000 f952 	bl	80070f4 <I2C_WaitOnFlagUntilTimeout>
 8006e50:	4603      	mov	r3, r0
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d00d      	beq.n	8006e72 <HAL_I2C_IsDeviceReady+0xde>
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e64:	d103      	bne.n	8006e6e <HAL_I2C_IsDeviceReady+0xda>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e6c:	641a      	str	r2, [r3, #64]	; 0x40
 8006e6e:	2303      	movs	r3, #3
 8006e70:	e0b6      	b.n	8006fe0 <HAL_I2C_IsDeviceReady+0x24c>
 8006e72:	897b      	ldrh	r3, [r7, #10]
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	461a      	mov	r2, r3
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006e80:	611a      	str	r2, [r3, #16]
 8006e82:	f7fe f8c3 	bl	800500c <HAL_GetTick>
 8006e86:	61f8      	str	r0, [r7, #28]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	695b      	ldr	r3, [r3, #20]
 8006e8e:	f003 0302 	and.w	r3, r3, #2
 8006e92:	2b02      	cmp	r3, #2
 8006e94:	bf0c      	ite	eq
 8006e96:	2301      	moveq	r3, #1
 8006e98:	2300      	movne	r3, #0
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	75fb      	strb	r3, [r7, #23]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	695b      	ldr	r3, [r3, #20]
 8006ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ea8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006eac:	bf0c      	ite	eq
 8006eae:	2301      	moveq	r3, #1
 8006eb0:	2300      	movne	r3, #0
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	75bb      	strb	r3, [r7, #22]
 8006eb6:	e025      	b.n	8006f04 <HAL_I2C_IsDeviceReady+0x170>
 8006eb8:	f7fe f8a8 	bl	800500c <HAL_GetTick>
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	1ad3      	subs	r3, r2, r3
 8006ec2:	683a      	ldr	r2, [r7, #0]
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d302      	bcc.n	8006ece <HAL_I2C_IsDeviceReady+0x13a>
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d103      	bne.n	8006ed6 <HAL_I2C_IsDeviceReady+0x142>
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	22a0      	movs	r2, #160	; 0xa0
 8006ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	695b      	ldr	r3, [r3, #20]
 8006edc:	f003 0302 	and.w	r3, r3, #2
 8006ee0:	2b02      	cmp	r3, #2
 8006ee2:	bf0c      	ite	eq
 8006ee4:	2301      	moveq	r3, #1
 8006ee6:	2300      	movne	r3, #0
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	75fb      	strb	r3, [r7, #23]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	695b      	ldr	r3, [r3, #20]
 8006ef2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ef6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006efa:	bf0c      	ite	eq
 8006efc:	2301      	moveq	r3, #1
 8006efe:	2300      	movne	r3, #0
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	75bb      	strb	r3, [r7, #22]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	2ba0      	cmp	r3, #160	; 0xa0
 8006f0e:	d005      	beq.n	8006f1c <HAL_I2C_IsDeviceReady+0x188>
 8006f10:	7dfb      	ldrb	r3, [r7, #23]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d102      	bne.n	8006f1c <HAL_I2C_IsDeviceReady+0x188>
 8006f16:	7dbb      	ldrb	r3, [r7, #22]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d0cd      	beq.n	8006eb8 <HAL_I2C_IsDeviceReady+0x124>
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2220      	movs	r2, #32
 8006f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	695b      	ldr	r3, [r3, #20]
 8006f2a:	f003 0302 	and.w	r3, r3, #2
 8006f2e:	2b02      	cmp	r3, #2
 8006f30:	d129      	bne.n	8006f86 <HAL_I2C_IsDeviceReady+0x1f2>
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f40:	601a      	str	r2, [r3, #0]
 8006f42:	2300      	movs	r3, #0
 8006f44:	613b      	str	r3, [r7, #16]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	695b      	ldr	r3, [r3, #20]
 8006f4c:	613b      	str	r3, [r7, #16]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	699b      	ldr	r3, [r3, #24]
 8006f54:	613b      	str	r3, [r7, #16]
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	69fb      	ldr	r3, [r7, #28]
 8006f5a:	9300      	str	r3, [sp, #0]
 8006f5c:	2319      	movs	r3, #25
 8006f5e:	2201      	movs	r2, #1
 8006f60:	4921      	ldr	r1, [pc, #132]	; (8006fe8 <HAL_I2C_IsDeviceReady+0x254>)
 8006f62:	68f8      	ldr	r0, [r7, #12]
 8006f64:	f000 f8c6 	bl	80070f4 <I2C_WaitOnFlagUntilTimeout>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d001      	beq.n	8006f72 <HAL_I2C_IsDeviceReady+0x1de>
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e036      	b.n	8006fe0 <HAL_I2C_IsDeviceReady+0x24c>
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2220      	movs	r2, #32
 8006f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006f82:	2300      	movs	r3, #0
 8006f84:	e02c      	b.n	8006fe0 <HAL_I2C_IsDeviceReady+0x24c>
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f94:	601a      	str	r2, [r3, #0]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006f9e:	615a      	str	r2, [r3, #20]
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	9300      	str	r3, [sp, #0]
 8006fa4:	2319      	movs	r3, #25
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	490f      	ldr	r1, [pc, #60]	; (8006fe8 <HAL_I2C_IsDeviceReady+0x254>)
 8006faa:	68f8      	ldr	r0, [r7, #12]
 8006fac:	f000 f8a2 	bl	80070f4 <I2C_WaitOnFlagUntilTimeout>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d001      	beq.n	8006fba <HAL_I2C_IsDeviceReady+0x226>
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e012      	b.n	8006fe0 <HAL_I2C_IsDeviceReady+0x24c>
 8006fba:	69bb      	ldr	r3, [r7, #24]
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	61bb      	str	r3, [r7, #24]
 8006fc0:	69ba      	ldr	r2, [r7, #24]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	f4ff af32 	bcc.w	8006e2e <HAL_I2C_IsDeviceReady+0x9a>
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2220      	movs	r2, #32
 8006fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e000      	b.n	8006fe0 <HAL_I2C_IsDeviceReady+0x24c>
 8006fde:	2302      	movs	r3, #2
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3720      	adds	r7, #32
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	00100002 	.word	0x00100002
 8006fec:	ffff0000 	.word	0xffff0000

08006ff0 <I2C_MasterRequestWrite>:
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b088      	sub	sp, #32
 8006ff4:	af02      	add	r7, sp, #8
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	607a      	str	r2, [r7, #4]
 8006ffa:	603b      	str	r3, [r7, #0]
 8006ffc:	460b      	mov	r3, r1
 8006ffe:	817b      	strh	r3, [r7, #10]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007004:	617b      	str	r3, [r7, #20]
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	2b08      	cmp	r3, #8
 800700a:	d006      	beq.n	800701a <I2C_MasterRequestWrite+0x2a>
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	2b01      	cmp	r3, #1
 8007010:	d003      	beq.n	800701a <I2C_MasterRequestWrite+0x2a>
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007018:	d108      	bne.n	800702c <I2C_MasterRequestWrite+0x3c>
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007028:	601a      	str	r2, [r3, #0]
 800702a:	e00b      	b.n	8007044 <I2C_MasterRequestWrite+0x54>
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007030:	2b12      	cmp	r3, #18
 8007032:	d107      	bne.n	8007044 <I2C_MasterRequestWrite+0x54>
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007042:	601a      	str	r2, [r3, #0]
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	9300      	str	r3, [sp, #0]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007050:	68f8      	ldr	r0, [r7, #12]
 8007052:	f000 f84f 	bl	80070f4 <I2C_WaitOnFlagUntilTimeout>
 8007056:	4603      	mov	r3, r0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d00d      	beq.n	8007078 <I2C_MasterRequestWrite+0x88>
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007066:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800706a:	d103      	bne.n	8007074 <I2C_MasterRequestWrite+0x84>
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007072:	641a      	str	r2, [r3, #64]	; 0x40
 8007074:	2303      	movs	r3, #3
 8007076:	e035      	b.n	80070e4 <I2C_MasterRequestWrite+0xf4>
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	691b      	ldr	r3, [r3, #16]
 800707c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007080:	d108      	bne.n	8007094 <I2C_MasterRequestWrite+0xa4>
 8007082:	897b      	ldrh	r3, [r7, #10]
 8007084:	b2db      	uxtb	r3, r3
 8007086:	461a      	mov	r2, r3
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007090:	611a      	str	r2, [r3, #16]
 8007092:	e01b      	b.n	80070cc <I2C_MasterRequestWrite+0xdc>
 8007094:	897b      	ldrh	r3, [r7, #10]
 8007096:	11db      	asrs	r3, r3, #7
 8007098:	b2db      	uxtb	r3, r3
 800709a:	f003 0306 	and.w	r3, r3, #6
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	f063 030f 	orn	r3, r3, #15
 80070a4:	b2da      	uxtb	r2, r3
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	611a      	str	r2, [r3, #16]
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	490e      	ldr	r1, [pc, #56]	; (80070ec <I2C_MasterRequestWrite+0xfc>)
 80070b2:	68f8      	ldr	r0, [r7, #12]
 80070b4:	f000 f875 	bl	80071a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d001      	beq.n	80070c2 <I2C_MasterRequestWrite+0xd2>
 80070be:	2301      	movs	r3, #1
 80070c0:	e010      	b.n	80070e4 <I2C_MasterRequestWrite+0xf4>
 80070c2:	897b      	ldrh	r3, [r7, #10]
 80070c4:	b2da      	uxtb	r2, r3
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	611a      	str	r2, [r3, #16]
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	4907      	ldr	r1, [pc, #28]	; (80070f0 <I2C_MasterRequestWrite+0x100>)
 80070d2:	68f8      	ldr	r0, [r7, #12]
 80070d4:	f000 f865 	bl	80071a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80070d8:	4603      	mov	r3, r0
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d001      	beq.n	80070e2 <I2C_MasterRequestWrite+0xf2>
 80070de:	2301      	movs	r3, #1
 80070e0:	e000      	b.n	80070e4 <I2C_MasterRequestWrite+0xf4>
 80070e2:	2300      	movs	r3, #0
 80070e4:	4618      	mov	r0, r3
 80070e6:	3718      	adds	r7, #24
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	00010008 	.word	0x00010008
 80070f0:	00010002 	.word	0x00010002

080070f4 <I2C_WaitOnFlagUntilTimeout>:
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	603b      	str	r3, [r7, #0]
 8007100:	4613      	mov	r3, r2
 8007102:	71fb      	strb	r3, [r7, #7]
 8007104:	e025      	b.n	8007152 <I2C_WaitOnFlagUntilTimeout+0x5e>
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800710c:	d021      	beq.n	8007152 <I2C_WaitOnFlagUntilTimeout+0x5e>
 800710e:	f7fd ff7d 	bl	800500c <HAL_GetTick>
 8007112:	4602      	mov	r2, r0
 8007114:	69bb      	ldr	r3, [r7, #24]
 8007116:	1ad3      	subs	r3, r2, r3
 8007118:	683a      	ldr	r2, [r7, #0]
 800711a:	429a      	cmp	r2, r3
 800711c:	d302      	bcc.n	8007124 <I2C_WaitOnFlagUntilTimeout+0x30>
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d116      	bne.n	8007152 <I2C_WaitOnFlagUntilTimeout+0x5e>
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2200      	movs	r2, #0
 8007128:	631a      	str	r2, [r3, #48]	; 0x30
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2220      	movs	r2, #32
 800712e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2200      	movs	r2, #0
 8007136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800713e:	f043 0220 	orr.w	r2, r3, #32
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	641a      	str	r2, [r3, #64]	; 0x40
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2200      	movs	r2, #0
 800714a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800714e:	2301      	movs	r3, #1
 8007150:	e023      	b.n	800719a <I2C_WaitOnFlagUntilTimeout+0xa6>
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	0c1b      	lsrs	r3, r3, #16
 8007156:	b2db      	uxtb	r3, r3
 8007158:	2b01      	cmp	r3, #1
 800715a:	d10d      	bne.n	8007178 <I2C_WaitOnFlagUntilTimeout+0x84>
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	695b      	ldr	r3, [r3, #20]
 8007162:	43da      	mvns	r2, r3
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	4013      	ands	r3, r2
 8007168:	b29b      	uxth	r3, r3
 800716a:	2b00      	cmp	r3, #0
 800716c:	bf0c      	ite	eq
 800716e:	2301      	moveq	r3, #1
 8007170:	2300      	movne	r3, #0
 8007172:	b2db      	uxtb	r3, r3
 8007174:	461a      	mov	r2, r3
 8007176:	e00c      	b.n	8007192 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	699b      	ldr	r3, [r3, #24]
 800717e:	43da      	mvns	r2, r3
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	4013      	ands	r3, r2
 8007184:	b29b      	uxth	r3, r3
 8007186:	2b00      	cmp	r3, #0
 8007188:	bf0c      	ite	eq
 800718a:	2301      	moveq	r3, #1
 800718c:	2300      	movne	r3, #0
 800718e:	b2db      	uxtb	r3, r3
 8007190:	461a      	mov	r2, r3
 8007192:	79fb      	ldrb	r3, [r7, #7]
 8007194:	429a      	cmp	r2, r3
 8007196:	d0b6      	beq.n	8007106 <I2C_WaitOnFlagUntilTimeout+0x12>
 8007198:	2300      	movs	r3, #0
 800719a:	4618      	mov	r0, r3
 800719c:	3710      	adds	r7, #16
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}

080071a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 80071a2:	b580      	push	{r7, lr}
 80071a4:	b084      	sub	sp, #16
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	60f8      	str	r0, [r7, #12]
 80071aa:	60b9      	str	r1, [r7, #8]
 80071ac:	607a      	str	r2, [r7, #4]
 80071ae:	603b      	str	r3, [r7, #0]
 80071b0:	e051      	b.n	8007256 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	695b      	ldr	r3, [r3, #20]
 80071b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071c0:	d123      	bne.n	800720a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071d0:	601a      	str	r2, [r3, #0]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80071da:	615a      	str	r2, [r3, #20]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2200      	movs	r2, #0
 80071e0:	631a      	str	r2, [r3, #48]	; 0x30
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2220      	movs	r2, #32
 80071e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2200      	movs	r2, #0
 80071ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f6:	f043 0204 	orr.w	r2, r3, #4
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	641a      	str	r2, [r3, #64]	; 0x40
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2200      	movs	r2, #0
 8007202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007206:	2301      	movs	r3, #1
 8007208:	e046      	b.n	8007298 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007210:	d021      	beq.n	8007256 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8007212:	f7fd fefb 	bl	800500c <HAL_GetTick>
 8007216:	4602      	mov	r2, r0
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	1ad3      	subs	r3, r2, r3
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	429a      	cmp	r2, r3
 8007220:	d302      	bcc.n	8007228 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d116      	bne.n	8007256 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2200      	movs	r2, #0
 800722c:	631a      	str	r2, [r3, #48]	; 0x30
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2220      	movs	r2, #32
 8007232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2200      	movs	r2, #0
 800723a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007242:	f043 0220 	orr.w	r2, r3, #32
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	641a      	str	r2, [r3, #64]	; 0x40
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2200      	movs	r2, #0
 800724e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007252:	2301      	movs	r3, #1
 8007254:	e020      	b.n	8007298 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	0c1b      	lsrs	r3, r3, #16
 800725a:	b2db      	uxtb	r3, r3
 800725c:	2b01      	cmp	r3, #1
 800725e:	d10c      	bne.n	800727a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	695b      	ldr	r3, [r3, #20]
 8007266:	43da      	mvns	r2, r3
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	4013      	ands	r3, r2
 800726c:	b29b      	uxth	r3, r3
 800726e:	2b00      	cmp	r3, #0
 8007270:	bf14      	ite	ne
 8007272:	2301      	movne	r3, #1
 8007274:	2300      	moveq	r3, #0
 8007276:	b2db      	uxtb	r3, r3
 8007278:	e00b      	b.n	8007292 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	699b      	ldr	r3, [r3, #24]
 8007280:	43da      	mvns	r2, r3
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	4013      	ands	r3, r2
 8007286:	b29b      	uxth	r3, r3
 8007288:	2b00      	cmp	r3, #0
 800728a:	bf14      	ite	ne
 800728c:	2301      	movne	r3, #1
 800728e:	2300      	moveq	r3, #0
 8007290:	b2db      	uxtb	r3, r3
 8007292:	2b00      	cmp	r3, #0
 8007294:	d18d      	bne.n	80071b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8007296:	2300      	movs	r3, #0
 8007298:	4618      	mov	r0, r3
 800729a:	3710      	adds	r7, #16
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <I2C_WaitOnTXEFlagUntilTimeout>:
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	607a      	str	r2, [r7, #4]
 80072ac:	e02d      	b.n	800730a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 80072ae:	68f8      	ldr	r0, [r7, #12]
 80072b0:	f000 f878 	bl	80073a4 <I2C_IsAcknowledgeFailed>
 80072b4:	4603      	mov	r3, r0
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d001      	beq.n	80072be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
 80072ba:	2301      	movs	r3, #1
 80072bc:	e02d      	b.n	800731a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072c4:	d021      	beq.n	800730a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 80072c6:	f7fd fea1 	bl	800500c <HAL_GetTick>
 80072ca:	4602      	mov	r2, r0
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	1ad3      	subs	r3, r2, r3
 80072d0:	68ba      	ldr	r2, [r7, #8]
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d302      	bcc.n	80072dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d116      	bne.n	800730a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2200      	movs	r2, #0
 80072e0:	631a      	str	r2, [r3, #48]	; 0x30
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2220      	movs	r2, #32
 80072e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2200      	movs	r2, #0
 80072ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f6:	f043 0220 	orr.w	r2, r3, #32
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	641a      	str	r2, [r3, #64]	; 0x40
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2200      	movs	r2, #0
 8007302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007306:	2301      	movs	r3, #1
 8007308:	e007      	b.n	800731a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	695b      	ldr	r3, [r3, #20]
 8007310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007314:	2b80      	cmp	r3, #128	; 0x80
 8007316:	d1ca      	bne.n	80072ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
 8007318:	2300      	movs	r3, #0
 800731a:	4618      	mov	r0, r3
 800731c:	3710      	adds	r7, #16
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}

08007322 <I2C_WaitOnBTFFlagUntilTimeout>:
 8007322:	b580      	push	{r7, lr}
 8007324:	b084      	sub	sp, #16
 8007326:	af00      	add	r7, sp, #0
 8007328:	60f8      	str	r0, [r7, #12]
 800732a:	60b9      	str	r1, [r7, #8]
 800732c:	607a      	str	r2, [r7, #4]
 800732e:	e02d      	b.n	800738c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8007330:	68f8      	ldr	r0, [r7, #12]
 8007332:	f000 f837 	bl	80073a4 <I2C_IsAcknowledgeFailed>
 8007336:	4603      	mov	r3, r0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d001      	beq.n	8007340 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
 800733c:	2301      	movs	r3, #1
 800733e:	e02d      	b.n	800739c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007346:	d021      	beq.n	800738c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8007348:	f7fd fe60 	bl	800500c <HAL_GetTick>
 800734c:	4602      	mov	r2, r0
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	1ad3      	subs	r3, r2, r3
 8007352:	68ba      	ldr	r2, [r7, #8]
 8007354:	429a      	cmp	r2, r3
 8007356:	d302      	bcc.n	800735e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d116      	bne.n	800738c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2200      	movs	r2, #0
 8007362:	631a      	str	r2, [r3, #48]	; 0x30
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2220      	movs	r2, #32
 8007368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2200      	movs	r2, #0
 8007370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007378:	f043 0220 	orr.w	r2, r3, #32
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	641a      	str	r2, [r3, #64]	; 0x40
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2200      	movs	r2, #0
 8007384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007388:	2301      	movs	r3, #1
 800738a:	e007      	b.n	800739c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	695b      	ldr	r3, [r3, #20]
 8007392:	f003 0304 	and.w	r3, r3, #4
 8007396:	2b04      	cmp	r3, #4
 8007398:	d1ca      	bne.n	8007330 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
 800739a:	2300      	movs	r3, #0
 800739c:	4618      	mov	r0, r3
 800739e:	3710      	adds	r7, #16
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <I2C_IsAcknowledgeFailed>:
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	695b      	ldr	r3, [r3, #20]
 80073b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073ba:	d11b      	bne.n	80073f4 <I2C_IsAcknowledgeFailed+0x50>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80073c4:	615a      	str	r2, [r3, #20]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	631a      	str	r2, [r3, #48]	; 0x30
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2220      	movs	r2, #32
 80073d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e0:	f043 0204 	orr.w	r2, r3, #4
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	641a      	str	r2, [r3, #64]	; 0x40
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80073f0:	2301      	movs	r3, #1
 80073f2:	e000      	b.n	80073f6 <I2C_IsAcknowledgeFailed+0x52>
 80073f4:	2300      	movs	r3, #0
 80073f6:	4618      	mov	r0, r3
 80073f8:	370c      	adds	r7, #12
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bc80      	pop	{r7}
 80073fe:	4770      	bx	lr

08007400 <HAL_RCC_OscConfig>:
 8007400:	b580      	push	{r7, lr}
 8007402:	b086      	sub	sp, #24
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d101      	bne.n	8007412 <HAL_RCC_OscConfig+0x12>
 800740e:	2301      	movs	r3, #1
 8007410:	e272      	b.n	80078f8 <HAL_RCC_OscConfig+0x4f8>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f003 0301 	and.w	r3, r3, #1
 800741a:	2b00      	cmp	r3, #0
 800741c:	f000 8087 	beq.w	800752e <HAL_RCC_OscConfig+0x12e>
 8007420:	4b92      	ldr	r3, [pc, #584]	; (800766c <HAL_RCC_OscConfig+0x26c>)
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	f003 030c 	and.w	r3, r3, #12
 8007428:	2b04      	cmp	r3, #4
 800742a:	d00c      	beq.n	8007446 <HAL_RCC_OscConfig+0x46>
 800742c:	4b8f      	ldr	r3, [pc, #572]	; (800766c <HAL_RCC_OscConfig+0x26c>)
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	f003 030c 	and.w	r3, r3, #12
 8007434:	2b08      	cmp	r3, #8
 8007436:	d112      	bne.n	800745e <HAL_RCC_OscConfig+0x5e>
 8007438:	4b8c      	ldr	r3, [pc, #560]	; (800766c <HAL_RCC_OscConfig+0x26c>)
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007444:	d10b      	bne.n	800745e <HAL_RCC_OscConfig+0x5e>
 8007446:	4b89      	ldr	r3, [pc, #548]	; (800766c <HAL_RCC_OscConfig+0x26c>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800744e:	2b00      	cmp	r3, #0
 8007450:	d06c      	beq.n	800752c <HAL_RCC_OscConfig+0x12c>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d168      	bne.n	800752c <HAL_RCC_OscConfig+0x12c>
 800745a:	2301      	movs	r3, #1
 800745c:	e24c      	b.n	80078f8 <HAL_RCC_OscConfig+0x4f8>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007466:	d106      	bne.n	8007476 <HAL_RCC_OscConfig+0x76>
 8007468:	4b80      	ldr	r3, [pc, #512]	; (800766c <HAL_RCC_OscConfig+0x26c>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a7f      	ldr	r2, [pc, #508]	; (800766c <HAL_RCC_OscConfig+0x26c>)
 800746e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007472:	6013      	str	r3, [r2, #0]
 8007474:	e02e      	b.n	80074d4 <HAL_RCC_OscConfig+0xd4>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d10c      	bne.n	8007498 <HAL_RCC_OscConfig+0x98>
 800747e:	4b7b      	ldr	r3, [pc, #492]	; (800766c <HAL_RCC_OscConfig+0x26c>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a7a      	ldr	r2, [pc, #488]	; (800766c <HAL_RCC_OscConfig+0x26c>)
 8007484:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007488:	6013      	str	r3, [r2, #0]
 800748a:	4b78      	ldr	r3, [pc, #480]	; (800766c <HAL_RCC_OscConfig+0x26c>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a77      	ldr	r2, [pc, #476]	; (800766c <HAL_RCC_OscConfig+0x26c>)
 8007490:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007494:	6013      	str	r3, [r2, #0]
 8007496:	e01d      	b.n	80074d4 <HAL_RCC_OscConfig+0xd4>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80074a0:	d10c      	bne.n	80074bc <HAL_RCC_OscConfig+0xbc>
 80074a2:	4b72      	ldr	r3, [pc, #456]	; (800766c <HAL_RCC_OscConfig+0x26c>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a71      	ldr	r2, [pc, #452]	; (800766c <HAL_RCC_OscConfig+0x26c>)
 80074a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80074ac:	6013      	str	r3, [r2, #0]
 80074ae:	4b6f      	ldr	r3, [pc, #444]	; (800766c <HAL_RCC_OscConfig+0x26c>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a6e      	ldr	r2, [pc, #440]	; (800766c <HAL_RCC_OscConfig+0x26c>)
 80074b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074b8:	6013      	str	r3, [r2, #0]
 80074ba:	e00b      	b.n	80074d4 <HAL_RCC_OscConfig+0xd4>
 80074bc:	4b6b      	ldr	r3, [pc, #428]	; (800766c <HAL_RCC_OscConfig+0x26c>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a6a      	ldr	r2, [pc, #424]	; (800766c <HAL_RCC_OscConfig+0x26c>)
 80074c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074c6:	6013      	str	r3, [r2, #0]
 80074c8:	4b68      	ldr	r3, [pc, #416]	; (800766c <HAL_RCC_OscConfig+0x26c>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a67      	ldr	r2, [pc, #412]	; (800766c <HAL_RCC_OscConfig+0x26c>)
 80074ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80074d2:	6013      	str	r3, [r2, #0]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d013      	beq.n	8007504 <HAL_RCC_OscConfig+0x104>
 80074dc:	f7fd fd96 	bl	800500c <HAL_GetTick>
 80074e0:	6138      	str	r0, [r7, #16]
 80074e2:	e008      	b.n	80074f6 <HAL_RCC_OscConfig+0xf6>
 80074e4:	f7fd fd92 	bl	800500c <HAL_GetTick>
 80074e8:	4602      	mov	r2, r0
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	1ad3      	subs	r3, r2, r3
 80074ee:	2b64      	cmp	r3, #100	; 0x64
 80074f0:	d901      	bls.n	80074f6 <HAL_RCC_OscConfig+0xf6>
 80074f2:	2303      	movs	r3, #3
 80074f4:	e200      	b.n	80078f8 <HAL_RCC_OscConfig+0x4f8>
 80074f6:	4b5d      	ldr	r3, [pc, #372]	; (800766c <HAL_RCC_OscConfig+0x26c>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d0f0      	beq.n	80074e4 <HAL_RCC_OscConfig+0xe4>
 8007502:	e014      	b.n	800752e <HAL_RCC_OscConfig+0x12e>
 8007504:	f7fd fd82 	bl	800500c <HAL_GetTick>
 8007508:	6138      	str	r0, [r7, #16]
 800750a:	e008      	b.n	800751e <HAL_RCC_OscConfig+0x11e>
 800750c:	f7fd fd7e 	bl	800500c <HAL_GetTick>
 8007510:	4602      	mov	r2, r0
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	1ad3      	subs	r3, r2, r3
 8007516:	2b64      	cmp	r3, #100	; 0x64
 8007518:	d901      	bls.n	800751e <HAL_RCC_OscConfig+0x11e>
 800751a:	2303      	movs	r3, #3
 800751c:	e1ec      	b.n	80078f8 <HAL_RCC_OscConfig+0x4f8>
 800751e:	4b53      	ldr	r3, [pc, #332]	; (800766c <HAL_RCC_OscConfig+0x26c>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007526:	2b00      	cmp	r3, #0
 8007528:	d1f0      	bne.n	800750c <HAL_RCC_OscConfig+0x10c>
 800752a:	e000      	b.n	800752e <HAL_RCC_OscConfig+0x12e>
 800752c:	bf00      	nop
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f003 0302 	and.w	r3, r3, #2
 8007536:	2b00      	cmp	r3, #0
 8007538:	d063      	beq.n	8007602 <HAL_RCC_OscConfig+0x202>
 800753a:	4b4c      	ldr	r3, [pc, #304]	; (800766c <HAL_RCC_OscConfig+0x26c>)
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	f003 030c 	and.w	r3, r3, #12
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00b      	beq.n	800755e <HAL_RCC_OscConfig+0x15e>
 8007546:	4b49      	ldr	r3, [pc, #292]	; (800766c <HAL_RCC_OscConfig+0x26c>)
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	f003 030c 	and.w	r3, r3, #12
 800754e:	2b08      	cmp	r3, #8
 8007550:	d11c      	bne.n	800758c <HAL_RCC_OscConfig+0x18c>
 8007552:	4b46      	ldr	r3, [pc, #280]	; (800766c <HAL_RCC_OscConfig+0x26c>)
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800755a:	2b00      	cmp	r3, #0
 800755c:	d116      	bne.n	800758c <HAL_RCC_OscConfig+0x18c>
 800755e:	4b43      	ldr	r3, [pc, #268]	; (800766c <HAL_RCC_OscConfig+0x26c>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f003 0302 	and.w	r3, r3, #2
 8007566:	2b00      	cmp	r3, #0
 8007568:	d005      	beq.n	8007576 <HAL_RCC_OscConfig+0x176>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	691b      	ldr	r3, [r3, #16]
 800756e:	2b01      	cmp	r3, #1
 8007570:	d001      	beq.n	8007576 <HAL_RCC_OscConfig+0x176>
 8007572:	2301      	movs	r3, #1
 8007574:	e1c0      	b.n	80078f8 <HAL_RCC_OscConfig+0x4f8>
 8007576:	4b3d      	ldr	r3, [pc, #244]	; (800766c <HAL_RCC_OscConfig+0x26c>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	695b      	ldr	r3, [r3, #20]
 8007582:	00db      	lsls	r3, r3, #3
 8007584:	4939      	ldr	r1, [pc, #228]	; (800766c <HAL_RCC_OscConfig+0x26c>)
 8007586:	4313      	orrs	r3, r2
 8007588:	600b      	str	r3, [r1, #0]
 800758a:	e03a      	b.n	8007602 <HAL_RCC_OscConfig+0x202>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	691b      	ldr	r3, [r3, #16]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d020      	beq.n	80075d6 <HAL_RCC_OscConfig+0x1d6>
 8007594:	4b36      	ldr	r3, [pc, #216]	; (8007670 <HAL_RCC_OscConfig+0x270>)
 8007596:	2201      	movs	r2, #1
 8007598:	601a      	str	r2, [r3, #0]
 800759a:	f7fd fd37 	bl	800500c <HAL_GetTick>
 800759e:	6138      	str	r0, [r7, #16]
 80075a0:	e008      	b.n	80075b4 <HAL_RCC_OscConfig+0x1b4>
 80075a2:	f7fd fd33 	bl	800500c <HAL_GetTick>
 80075a6:	4602      	mov	r2, r0
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	1ad3      	subs	r3, r2, r3
 80075ac:	2b02      	cmp	r3, #2
 80075ae:	d901      	bls.n	80075b4 <HAL_RCC_OscConfig+0x1b4>
 80075b0:	2303      	movs	r3, #3
 80075b2:	e1a1      	b.n	80078f8 <HAL_RCC_OscConfig+0x4f8>
 80075b4:	4b2d      	ldr	r3, [pc, #180]	; (800766c <HAL_RCC_OscConfig+0x26c>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f003 0302 	and.w	r3, r3, #2
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d0f0      	beq.n	80075a2 <HAL_RCC_OscConfig+0x1a2>
 80075c0:	4b2a      	ldr	r3, [pc, #168]	; (800766c <HAL_RCC_OscConfig+0x26c>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	695b      	ldr	r3, [r3, #20]
 80075cc:	00db      	lsls	r3, r3, #3
 80075ce:	4927      	ldr	r1, [pc, #156]	; (800766c <HAL_RCC_OscConfig+0x26c>)
 80075d0:	4313      	orrs	r3, r2
 80075d2:	600b      	str	r3, [r1, #0]
 80075d4:	e015      	b.n	8007602 <HAL_RCC_OscConfig+0x202>
 80075d6:	4b26      	ldr	r3, [pc, #152]	; (8007670 <HAL_RCC_OscConfig+0x270>)
 80075d8:	2200      	movs	r2, #0
 80075da:	601a      	str	r2, [r3, #0]
 80075dc:	f7fd fd16 	bl	800500c <HAL_GetTick>
 80075e0:	6138      	str	r0, [r7, #16]
 80075e2:	e008      	b.n	80075f6 <HAL_RCC_OscConfig+0x1f6>
 80075e4:	f7fd fd12 	bl	800500c <HAL_GetTick>
 80075e8:	4602      	mov	r2, r0
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	1ad3      	subs	r3, r2, r3
 80075ee:	2b02      	cmp	r3, #2
 80075f0:	d901      	bls.n	80075f6 <HAL_RCC_OscConfig+0x1f6>
 80075f2:	2303      	movs	r3, #3
 80075f4:	e180      	b.n	80078f8 <HAL_RCC_OscConfig+0x4f8>
 80075f6:	4b1d      	ldr	r3, [pc, #116]	; (800766c <HAL_RCC_OscConfig+0x26c>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f003 0302 	and.w	r3, r3, #2
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d1f0      	bne.n	80075e4 <HAL_RCC_OscConfig+0x1e4>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f003 0308 	and.w	r3, r3, #8
 800760a:	2b00      	cmp	r3, #0
 800760c:	d03a      	beq.n	8007684 <HAL_RCC_OscConfig+0x284>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	699b      	ldr	r3, [r3, #24]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d019      	beq.n	800764a <HAL_RCC_OscConfig+0x24a>
 8007616:	4b17      	ldr	r3, [pc, #92]	; (8007674 <HAL_RCC_OscConfig+0x274>)
 8007618:	2201      	movs	r2, #1
 800761a:	601a      	str	r2, [r3, #0]
 800761c:	f7fd fcf6 	bl	800500c <HAL_GetTick>
 8007620:	6138      	str	r0, [r7, #16]
 8007622:	e008      	b.n	8007636 <HAL_RCC_OscConfig+0x236>
 8007624:	f7fd fcf2 	bl	800500c <HAL_GetTick>
 8007628:	4602      	mov	r2, r0
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	1ad3      	subs	r3, r2, r3
 800762e:	2b02      	cmp	r3, #2
 8007630:	d901      	bls.n	8007636 <HAL_RCC_OscConfig+0x236>
 8007632:	2303      	movs	r3, #3
 8007634:	e160      	b.n	80078f8 <HAL_RCC_OscConfig+0x4f8>
 8007636:	4b0d      	ldr	r3, [pc, #52]	; (800766c <HAL_RCC_OscConfig+0x26c>)
 8007638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763a:	f003 0302 	and.w	r3, r3, #2
 800763e:	2b00      	cmp	r3, #0
 8007640:	d0f0      	beq.n	8007624 <HAL_RCC_OscConfig+0x224>
 8007642:	2001      	movs	r0, #1
 8007644:	f000 fac4 	bl	8007bd0 <RCC_Delay>
 8007648:	e01c      	b.n	8007684 <HAL_RCC_OscConfig+0x284>
 800764a:	4b0a      	ldr	r3, [pc, #40]	; (8007674 <HAL_RCC_OscConfig+0x274>)
 800764c:	2200      	movs	r2, #0
 800764e:	601a      	str	r2, [r3, #0]
 8007650:	f7fd fcdc 	bl	800500c <HAL_GetTick>
 8007654:	6138      	str	r0, [r7, #16]
 8007656:	e00f      	b.n	8007678 <HAL_RCC_OscConfig+0x278>
 8007658:	f7fd fcd8 	bl	800500c <HAL_GetTick>
 800765c:	4602      	mov	r2, r0
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	1ad3      	subs	r3, r2, r3
 8007662:	2b02      	cmp	r3, #2
 8007664:	d908      	bls.n	8007678 <HAL_RCC_OscConfig+0x278>
 8007666:	2303      	movs	r3, #3
 8007668:	e146      	b.n	80078f8 <HAL_RCC_OscConfig+0x4f8>
 800766a:	bf00      	nop
 800766c:	40021000 	.word	0x40021000
 8007670:	42420000 	.word	0x42420000
 8007674:	42420480 	.word	0x42420480
 8007678:	4b92      	ldr	r3, [pc, #584]	; (80078c4 <HAL_RCC_OscConfig+0x4c4>)
 800767a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767c:	f003 0302 	and.w	r3, r3, #2
 8007680:	2b00      	cmp	r3, #0
 8007682:	d1e9      	bne.n	8007658 <HAL_RCC_OscConfig+0x258>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f003 0304 	and.w	r3, r3, #4
 800768c:	2b00      	cmp	r3, #0
 800768e:	f000 80a6 	beq.w	80077de <HAL_RCC_OscConfig+0x3de>
 8007692:	2300      	movs	r3, #0
 8007694:	75fb      	strb	r3, [r7, #23]
 8007696:	4b8b      	ldr	r3, [pc, #556]	; (80078c4 <HAL_RCC_OscConfig+0x4c4>)
 8007698:	69db      	ldr	r3, [r3, #28]
 800769a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d10d      	bne.n	80076be <HAL_RCC_OscConfig+0x2be>
 80076a2:	4b88      	ldr	r3, [pc, #544]	; (80078c4 <HAL_RCC_OscConfig+0x4c4>)
 80076a4:	69db      	ldr	r3, [r3, #28]
 80076a6:	4a87      	ldr	r2, [pc, #540]	; (80078c4 <HAL_RCC_OscConfig+0x4c4>)
 80076a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076ac:	61d3      	str	r3, [r2, #28]
 80076ae:	4b85      	ldr	r3, [pc, #532]	; (80078c4 <HAL_RCC_OscConfig+0x4c4>)
 80076b0:	69db      	ldr	r3, [r3, #28]
 80076b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076b6:	60bb      	str	r3, [r7, #8]
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	2301      	movs	r3, #1
 80076bc:	75fb      	strb	r3, [r7, #23]
 80076be:	4b82      	ldr	r3, [pc, #520]	; (80078c8 <HAL_RCC_OscConfig+0x4c8>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d118      	bne.n	80076fc <HAL_RCC_OscConfig+0x2fc>
 80076ca:	4b7f      	ldr	r3, [pc, #508]	; (80078c8 <HAL_RCC_OscConfig+0x4c8>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a7e      	ldr	r2, [pc, #504]	; (80078c8 <HAL_RCC_OscConfig+0x4c8>)
 80076d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076d4:	6013      	str	r3, [r2, #0]
 80076d6:	f7fd fc99 	bl	800500c <HAL_GetTick>
 80076da:	6138      	str	r0, [r7, #16]
 80076dc:	e008      	b.n	80076f0 <HAL_RCC_OscConfig+0x2f0>
 80076de:	f7fd fc95 	bl	800500c <HAL_GetTick>
 80076e2:	4602      	mov	r2, r0
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	1ad3      	subs	r3, r2, r3
 80076e8:	2b64      	cmp	r3, #100	; 0x64
 80076ea:	d901      	bls.n	80076f0 <HAL_RCC_OscConfig+0x2f0>
 80076ec:	2303      	movs	r3, #3
 80076ee:	e103      	b.n	80078f8 <HAL_RCC_OscConfig+0x4f8>
 80076f0:	4b75      	ldr	r3, [pc, #468]	; (80078c8 <HAL_RCC_OscConfig+0x4c8>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d0f0      	beq.n	80076de <HAL_RCC_OscConfig+0x2de>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	2b01      	cmp	r3, #1
 8007702:	d106      	bne.n	8007712 <HAL_RCC_OscConfig+0x312>
 8007704:	4b6f      	ldr	r3, [pc, #444]	; (80078c4 <HAL_RCC_OscConfig+0x4c4>)
 8007706:	6a1b      	ldr	r3, [r3, #32]
 8007708:	4a6e      	ldr	r2, [pc, #440]	; (80078c4 <HAL_RCC_OscConfig+0x4c4>)
 800770a:	f043 0301 	orr.w	r3, r3, #1
 800770e:	6213      	str	r3, [r2, #32]
 8007710:	e02d      	b.n	800776e <HAL_RCC_OscConfig+0x36e>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	68db      	ldr	r3, [r3, #12]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d10c      	bne.n	8007734 <HAL_RCC_OscConfig+0x334>
 800771a:	4b6a      	ldr	r3, [pc, #424]	; (80078c4 <HAL_RCC_OscConfig+0x4c4>)
 800771c:	6a1b      	ldr	r3, [r3, #32]
 800771e:	4a69      	ldr	r2, [pc, #420]	; (80078c4 <HAL_RCC_OscConfig+0x4c4>)
 8007720:	f023 0301 	bic.w	r3, r3, #1
 8007724:	6213      	str	r3, [r2, #32]
 8007726:	4b67      	ldr	r3, [pc, #412]	; (80078c4 <HAL_RCC_OscConfig+0x4c4>)
 8007728:	6a1b      	ldr	r3, [r3, #32]
 800772a:	4a66      	ldr	r2, [pc, #408]	; (80078c4 <HAL_RCC_OscConfig+0x4c4>)
 800772c:	f023 0304 	bic.w	r3, r3, #4
 8007730:	6213      	str	r3, [r2, #32]
 8007732:	e01c      	b.n	800776e <HAL_RCC_OscConfig+0x36e>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	2b05      	cmp	r3, #5
 800773a:	d10c      	bne.n	8007756 <HAL_RCC_OscConfig+0x356>
 800773c:	4b61      	ldr	r3, [pc, #388]	; (80078c4 <HAL_RCC_OscConfig+0x4c4>)
 800773e:	6a1b      	ldr	r3, [r3, #32]
 8007740:	4a60      	ldr	r2, [pc, #384]	; (80078c4 <HAL_RCC_OscConfig+0x4c4>)
 8007742:	f043 0304 	orr.w	r3, r3, #4
 8007746:	6213      	str	r3, [r2, #32]
 8007748:	4b5e      	ldr	r3, [pc, #376]	; (80078c4 <HAL_RCC_OscConfig+0x4c4>)
 800774a:	6a1b      	ldr	r3, [r3, #32]
 800774c:	4a5d      	ldr	r2, [pc, #372]	; (80078c4 <HAL_RCC_OscConfig+0x4c4>)
 800774e:	f043 0301 	orr.w	r3, r3, #1
 8007752:	6213      	str	r3, [r2, #32]
 8007754:	e00b      	b.n	800776e <HAL_RCC_OscConfig+0x36e>
 8007756:	4b5b      	ldr	r3, [pc, #364]	; (80078c4 <HAL_RCC_OscConfig+0x4c4>)
 8007758:	6a1b      	ldr	r3, [r3, #32]
 800775a:	4a5a      	ldr	r2, [pc, #360]	; (80078c4 <HAL_RCC_OscConfig+0x4c4>)
 800775c:	f023 0301 	bic.w	r3, r3, #1
 8007760:	6213      	str	r3, [r2, #32]
 8007762:	4b58      	ldr	r3, [pc, #352]	; (80078c4 <HAL_RCC_OscConfig+0x4c4>)
 8007764:	6a1b      	ldr	r3, [r3, #32]
 8007766:	4a57      	ldr	r2, [pc, #348]	; (80078c4 <HAL_RCC_OscConfig+0x4c4>)
 8007768:	f023 0304 	bic.w	r3, r3, #4
 800776c:	6213      	str	r3, [r2, #32]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	68db      	ldr	r3, [r3, #12]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d015      	beq.n	80077a2 <HAL_RCC_OscConfig+0x3a2>
 8007776:	f7fd fc49 	bl	800500c <HAL_GetTick>
 800777a:	6138      	str	r0, [r7, #16]
 800777c:	e00a      	b.n	8007794 <HAL_RCC_OscConfig+0x394>
 800777e:	f7fd fc45 	bl	800500c <HAL_GetTick>
 8007782:	4602      	mov	r2, r0
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	1ad3      	subs	r3, r2, r3
 8007788:	f241 3288 	movw	r2, #5000	; 0x1388
 800778c:	4293      	cmp	r3, r2
 800778e:	d901      	bls.n	8007794 <HAL_RCC_OscConfig+0x394>
 8007790:	2303      	movs	r3, #3
 8007792:	e0b1      	b.n	80078f8 <HAL_RCC_OscConfig+0x4f8>
 8007794:	4b4b      	ldr	r3, [pc, #300]	; (80078c4 <HAL_RCC_OscConfig+0x4c4>)
 8007796:	6a1b      	ldr	r3, [r3, #32]
 8007798:	f003 0302 	and.w	r3, r3, #2
 800779c:	2b00      	cmp	r3, #0
 800779e:	d0ee      	beq.n	800777e <HAL_RCC_OscConfig+0x37e>
 80077a0:	e014      	b.n	80077cc <HAL_RCC_OscConfig+0x3cc>
 80077a2:	f7fd fc33 	bl	800500c <HAL_GetTick>
 80077a6:	6138      	str	r0, [r7, #16]
 80077a8:	e00a      	b.n	80077c0 <HAL_RCC_OscConfig+0x3c0>
 80077aa:	f7fd fc2f 	bl	800500c <HAL_GetTick>
 80077ae:	4602      	mov	r2, r0
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	1ad3      	subs	r3, r2, r3
 80077b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d901      	bls.n	80077c0 <HAL_RCC_OscConfig+0x3c0>
 80077bc:	2303      	movs	r3, #3
 80077be:	e09b      	b.n	80078f8 <HAL_RCC_OscConfig+0x4f8>
 80077c0:	4b40      	ldr	r3, [pc, #256]	; (80078c4 <HAL_RCC_OscConfig+0x4c4>)
 80077c2:	6a1b      	ldr	r3, [r3, #32]
 80077c4:	f003 0302 	and.w	r3, r3, #2
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d1ee      	bne.n	80077aa <HAL_RCC_OscConfig+0x3aa>
 80077cc:	7dfb      	ldrb	r3, [r7, #23]
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d105      	bne.n	80077de <HAL_RCC_OscConfig+0x3de>
 80077d2:	4b3c      	ldr	r3, [pc, #240]	; (80078c4 <HAL_RCC_OscConfig+0x4c4>)
 80077d4:	69db      	ldr	r3, [r3, #28]
 80077d6:	4a3b      	ldr	r2, [pc, #236]	; (80078c4 <HAL_RCC_OscConfig+0x4c4>)
 80077d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077dc:	61d3      	str	r3, [r2, #28]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	69db      	ldr	r3, [r3, #28]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	f000 8087 	beq.w	80078f6 <HAL_RCC_OscConfig+0x4f6>
 80077e8:	4b36      	ldr	r3, [pc, #216]	; (80078c4 <HAL_RCC_OscConfig+0x4c4>)
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	f003 030c 	and.w	r3, r3, #12
 80077f0:	2b08      	cmp	r3, #8
 80077f2:	d061      	beq.n	80078b8 <HAL_RCC_OscConfig+0x4b8>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	69db      	ldr	r3, [r3, #28]
 80077f8:	2b02      	cmp	r3, #2
 80077fa:	d146      	bne.n	800788a <HAL_RCC_OscConfig+0x48a>
 80077fc:	4b33      	ldr	r3, [pc, #204]	; (80078cc <HAL_RCC_OscConfig+0x4cc>)
 80077fe:	2200      	movs	r2, #0
 8007800:	601a      	str	r2, [r3, #0]
 8007802:	f7fd fc03 	bl	800500c <HAL_GetTick>
 8007806:	6138      	str	r0, [r7, #16]
 8007808:	e008      	b.n	800781c <HAL_RCC_OscConfig+0x41c>
 800780a:	f7fd fbff 	bl	800500c <HAL_GetTick>
 800780e:	4602      	mov	r2, r0
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	1ad3      	subs	r3, r2, r3
 8007814:	2b02      	cmp	r3, #2
 8007816:	d901      	bls.n	800781c <HAL_RCC_OscConfig+0x41c>
 8007818:	2303      	movs	r3, #3
 800781a:	e06d      	b.n	80078f8 <HAL_RCC_OscConfig+0x4f8>
 800781c:	4b29      	ldr	r3, [pc, #164]	; (80078c4 <HAL_RCC_OscConfig+0x4c4>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007824:	2b00      	cmp	r3, #0
 8007826:	d1f0      	bne.n	800780a <HAL_RCC_OscConfig+0x40a>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6a1b      	ldr	r3, [r3, #32]
 800782c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007830:	d108      	bne.n	8007844 <HAL_RCC_OscConfig+0x444>
 8007832:	4b24      	ldr	r3, [pc, #144]	; (80078c4 <HAL_RCC_OscConfig+0x4c4>)
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	4921      	ldr	r1, [pc, #132]	; (80078c4 <HAL_RCC_OscConfig+0x4c4>)
 8007840:	4313      	orrs	r3, r2
 8007842:	604b      	str	r3, [r1, #4]
 8007844:	4b1f      	ldr	r3, [pc, #124]	; (80078c4 <HAL_RCC_OscConfig+0x4c4>)
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6a19      	ldr	r1, [r3, #32]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007854:	430b      	orrs	r3, r1
 8007856:	491b      	ldr	r1, [pc, #108]	; (80078c4 <HAL_RCC_OscConfig+0x4c4>)
 8007858:	4313      	orrs	r3, r2
 800785a:	604b      	str	r3, [r1, #4]
 800785c:	4b1b      	ldr	r3, [pc, #108]	; (80078cc <HAL_RCC_OscConfig+0x4cc>)
 800785e:	2201      	movs	r2, #1
 8007860:	601a      	str	r2, [r3, #0]
 8007862:	f7fd fbd3 	bl	800500c <HAL_GetTick>
 8007866:	6138      	str	r0, [r7, #16]
 8007868:	e008      	b.n	800787c <HAL_RCC_OscConfig+0x47c>
 800786a:	f7fd fbcf 	bl	800500c <HAL_GetTick>
 800786e:	4602      	mov	r2, r0
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	1ad3      	subs	r3, r2, r3
 8007874:	2b02      	cmp	r3, #2
 8007876:	d901      	bls.n	800787c <HAL_RCC_OscConfig+0x47c>
 8007878:	2303      	movs	r3, #3
 800787a:	e03d      	b.n	80078f8 <HAL_RCC_OscConfig+0x4f8>
 800787c:	4b11      	ldr	r3, [pc, #68]	; (80078c4 <HAL_RCC_OscConfig+0x4c4>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007884:	2b00      	cmp	r3, #0
 8007886:	d0f0      	beq.n	800786a <HAL_RCC_OscConfig+0x46a>
 8007888:	e035      	b.n	80078f6 <HAL_RCC_OscConfig+0x4f6>
 800788a:	4b10      	ldr	r3, [pc, #64]	; (80078cc <HAL_RCC_OscConfig+0x4cc>)
 800788c:	2200      	movs	r2, #0
 800788e:	601a      	str	r2, [r3, #0]
 8007890:	f7fd fbbc 	bl	800500c <HAL_GetTick>
 8007894:	6138      	str	r0, [r7, #16]
 8007896:	e008      	b.n	80078aa <HAL_RCC_OscConfig+0x4aa>
 8007898:	f7fd fbb8 	bl	800500c <HAL_GetTick>
 800789c:	4602      	mov	r2, r0
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	1ad3      	subs	r3, r2, r3
 80078a2:	2b02      	cmp	r3, #2
 80078a4:	d901      	bls.n	80078aa <HAL_RCC_OscConfig+0x4aa>
 80078a6:	2303      	movs	r3, #3
 80078a8:	e026      	b.n	80078f8 <HAL_RCC_OscConfig+0x4f8>
 80078aa:	4b06      	ldr	r3, [pc, #24]	; (80078c4 <HAL_RCC_OscConfig+0x4c4>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d1f0      	bne.n	8007898 <HAL_RCC_OscConfig+0x498>
 80078b6:	e01e      	b.n	80078f6 <HAL_RCC_OscConfig+0x4f6>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	69db      	ldr	r3, [r3, #28]
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d107      	bne.n	80078d0 <HAL_RCC_OscConfig+0x4d0>
 80078c0:	2301      	movs	r3, #1
 80078c2:	e019      	b.n	80078f8 <HAL_RCC_OscConfig+0x4f8>
 80078c4:	40021000 	.word	0x40021000
 80078c8:	40007000 	.word	0x40007000
 80078cc:	42420060 	.word	0x42420060
 80078d0:	4b0b      	ldr	r3, [pc, #44]	; (8007900 <HAL_RCC_OscConfig+0x500>)
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	60fb      	str	r3, [r7, #12]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6a1b      	ldr	r3, [r3, #32]
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d106      	bne.n	80078f2 <HAL_RCC_OscConfig+0x4f2>
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d001      	beq.n	80078f6 <HAL_RCC_OscConfig+0x4f6>
 80078f2:	2301      	movs	r3, #1
 80078f4:	e000      	b.n	80078f8 <HAL_RCC_OscConfig+0x4f8>
 80078f6:	2300      	movs	r3, #0
 80078f8:	4618      	mov	r0, r3
 80078fa:	3718      	adds	r7, #24
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}
 8007900:	40021000 	.word	0x40021000

08007904 <HAL_RCC_ClockConfig>:
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	6039      	str	r1, [r7, #0]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d101      	bne.n	8007918 <HAL_RCC_ClockConfig+0x14>
 8007914:	2301      	movs	r3, #1
 8007916:	e0d0      	b.n	8007aba <HAL_RCC_ClockConfig+0x1b6>
 8007918:	4b6a      	ldr	r3, [pc, #424]	; (8007ac4 <HAL_RCC_ClockConfig+0x1c0>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f003 0307 	and.w	r3, r3, #7
 8007920:	683a      	ldr	r2, [r7, #0]
 8007922:	429a      	cmp	r2, r3
 8007924:	d910      	bls.n	8007948 <HAL_RCC_ClockConfig+0x44>
 8007926:	4b67      	ldr	r3, [pc, #412]	; (8007ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f023 0207 	bic.w	r2, r3, #7
 800792e:	4965      	ldr	r1, [pc, #404]	; (8007ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	4313      	orrs	r3, r2
 8007934:	600b      	str	r3, [r1, #0]
 8007936:	4b63      	ldr	r3, [pc, #396]	; (8007ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f003 0307 	and.w	r3, r3, #7
 800793e:	683a      	ldr	r2, [r7, #0]
 8007940:	429a      	cmp	r2, r3
 8007942:	d001      	beq.n	8007948 <HAL_RCC_ClockConfig+0x44>
 8007944:	2301      	movs	r3, #1
 8007946:	e0b8      	b.n	8007aba <HAL_RCC_ClockConfig+0x1b6>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f003 0302 	and.w	r3, r3, #2
 8007950:	2b00      	cmp	r3, #0
 8007952:	d020      	beq.n	8007996 <HAL_RCC_ClockConfig+0x92>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f003 0304 	and.w	r3, r3, #4
 800795c:	2b00      	cmp	r3, #0
 800795e:	d005      	beq.n	800796c <HAL_RCC_ClockConfig+0x68>
 8007960:	4b59      	ldr	r3, [pc, #356]	; (8007ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	4a58      	ldr	r2, [pc, #352]	; (8007ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8007966:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800796a:	6053      	str	r3, [r2, #4]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f003 0308 	and.w	r3, r3, #8
 8007974:	2b00      	cmp	r3, #0
 8007976:	d005      	beq.n	8007984 <HAL_RCC_ClockConfig+0x80>
 8007978:	4b53      	ldr	r3, [pc, #332]	; (8007ac8 <HAL_RCC_ClockConfig+0x1c4>)
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	4a52      	ldr	r2, [pc, #328]	; (8007ac8 <HAL_RCC_ClockConfig+0x1c4>)
 800797e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007982:	6053      	str	r3, [r2, #4]
 8007984:	4b50      	ldr	r3, [pc, #320]	; (8007ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	494d      	ldr	r1, [pc, #308]	; (8007ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8007992:	4313      	orrs	r3, r2
 8007994:	604b      	str	r3, [r1, #4]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f003 0301 	and.w	r3, r3, #1
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d040      	beq.n	8007a24 <HAL_RCC_ClockConfig+0x120>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	2b01      	cmp	r3, #1
 80079a8:	d107      	bne.n	80079ba <HAL_RCC_ClockConfig+0xb6>
 80079aa:	4b47      	ldr	r3, [pc, #284]	; (8007ac8 <HAL_RCC_ClockConfig+0x1c4>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d115      	bne.n	80079e2 <HAL_RCC_ClockConfig+0xde>
 80079b6:	2301      	movs	r3, #1
 80079b8:	e07f      	b.n	8007aba <HAL_RCC_ClockConfig+0x1b6>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	2b02      	cmp	r3, #2
 80079c0:	d107      	bne.n	80079d2 <HAL_RCC_ClockConfig+0xce>
 80079c2:	4b41      	ldr	r3, [pc, #260]	; (8007ac8 <HAL_RCC_ClockConfig+0x1c4>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d109      	bne.n	80079e2 <HAL_RCC_ClockConfig+0xde>
 80079ce:	2301      	movs	r3, #1
 80079d0:	e073      	b.n	8007aba <HAL_RCC_ClockConfig+0x1b6>
 80079d2:	4b3d      	ldr	r3, [pc, #244]	; (8007ac8 <HAL_RCC_ClockConfig+0x1c4>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f003 0302 	and.w	r3, r3, #2
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d101      	bne.n	80079e2 <HAL_RCC_ClockConfig+0xde>
 80079de:	2301      	movs	r3, #1
 80079e0:	e06b      	b.n	8007aba <HAL_RCC_ClockConfig+0x1b6>
 80079e2:	4b39      	ldr	r3, [pc, #228]	; (8007ac8 <HAL_RCC_ClockConfig+0x1c4>)
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	f023 0203 	bic.w	r2, r3, #3
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	4936      	ldr	r1, [pc, #216]	; (8007ac8 <HAL_RCC_ClockConfig+0x1c4>)
 80079f0:	4313      	orrs	r3, r2
 80079f2:	604b      	str	r3, [r1, #4]
 80079f4:	f7fd fb0a 	bl	800500c <HAL_GetTick>
 80079f8:	60f8      	str	r0, [r7, #12]
 80079fa:	e00a      	b.n	8007a12 <HAL_RCC_ClockConfig+0x10e>
 80079fc:	f7fd fb06 	bl	800500c <HAL_GetTick>
 8007a00:	4602      	mov	r2, r0
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	1ad3      	subs	r3, r2, r3
 8007a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d901      	bls.n	8007a12 <HAL_RCC_ClockConfig+0x10e>
 8007a0e:	2303      	movs	r3, #3
 8007a10:	e053      	b.n	8007aba <HAL_RCC_ClockConfig+0x1b6>
 8007a12:	4b2d      	ldr	r3, [pc, #180]	; (8007ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	f003 020c 	and.w	r2, r3, #12
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d1eb      	bne.n	80079fc <HAL_RCC_ClockConfig+0xf8>
 8007a24:	4b27      	ldr	r3, [pc, #156]	; (8007ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f003 0307 	and.w	r3, r3, #7
 8007a2c:	683a      	ldr	r2, [r7, #0]
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d210      	bcs.n	8007a54 <HAL_RCC_ClockConfig+0x150>
 8007a32:	4b24      	ldr	r3, [pc, #144]	; (8007ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f023 0207 	bic.w	r2, r3, #7
 8007a3a:	4922      	ldr	r1, [pc, #136]	; (8007ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	600b      	str	r3, [r1, #0]
 8007a42:	4b20      	ldr	r3, [pc, #128]	; (8007ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f003 0307 	and.w	r3, r3, #7
 8007a4a:	683a      	ldr	r2, [r7, #0]
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d001      	beq.n	8007a54 <HAL_RCC_ClockConfig+0x150>
 8007a50:	2301      	movs	r3, #1
 8007a52:	e032      	b.n	8007aba <HAL_RCC_ClockConfig+0x1b6>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f003 0304 	and.w	r3, r3, #4
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d008      	beq.n	8007a72 <HAL_RCC_ClockConfig+0x16e>
 8007a60:	4b19      	ldr	r3, [pc, #100]	; (8007ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	68db      	ldr	r3, [r3, #12]
 8007a6c:	4916      	ldr	r1, [pc, #88]	; (8007ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	604b      	str	r3, [r1, #4]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f003 0308 	and.w	r3, r3, #8
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d009      	beq.n	8007a92 <HAL_RCC_ClockConfig+0x18e>
 8007a7e:	4b12      	ldr	r3, [pc, #72]	; (8007ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	691b      	ldr	r3, [r3, #16]
 8007a8a:	00db      	lsls	r3, r3, #3
 8007a8c:	490e      	ldr	r1, [pc, #56]	; (8007ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	604b      	str	r3, [r1, #4]
 8007a92:	f000 f821 	bl	8007ad8 <HAL_RCC_GetSysClockFreq>
 8007a96:	4602      	mov	r2, r0
 8007a98:	4b0b      	ldr	r3, [pc, #44]	; (8007ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	091b      	lsrs	r3, r3, #4
 8007a9e:	f003 030f 	and.w	r3, r3, #15
 8007aa2:	490a      	ldr	r1, [pc, #40]	; (8007acc <HAL_RCC_ClockConfig+0x1c8>)
 8007aa4:	5ccb      	ldrb	r3, [r1, r3]
 8007aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8007aaa:	4a09      	ldr	r2, [pc, #36]	; (8007ad0 <HAL_RCC_ClockConfig+0x1cc>)
 8007aac:	6013      	str	r3, [r2, #0]
 8007aae:	4b09      	ldr	r3, [pc, #36]	; (8007ad4 <HAL_RCC_ClockConfig+0x1d0>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f7fd fa68 	bl	8004f88 <HAL_InitTick>
 8007ab8:	2300      	movs	r3, #0
 8007aba:	4618      	mov	r0, r3
 8007abc:	3710      	adds	r7, #16
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	40022000 	.word	0x40022000
 8007ac8:	40021000 	.word	0x40021000
 8007acc:	0800904c 	.word	0x0800904c
 8007ad0:	2000047c 	.word	0x2000047c
 8007ad4:	20000480 	.word	0x20000480

08007ad8 <HAL_RCC_GetSysClockFreq>:
 8007ad8:	b490      	push	{r4, r7}
 8007ada:	b08a      	sub	sp, #40	; 0x28
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	4b29      	ldr	r3, [pc, #164]	; (8007b84 <HAL_RCC_GetSysClockFreq+0xac>)
 8007ae0:	1d3c      	adds	r4, r7, #4
 8007ae2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007ae4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007ae8:	f240 2301 	movw	r3, #513	; 0x201
 8007aec:	803b      	strh	r3, [r7, #0]
 8007aee:	2300      	movs	r3, #0
 8007af0:	61fb      	str	r3, [r7, #28]
 8007af2:	2300      	movs	r3, #0
 8007af4:	61bb      	str	r3, [r7, #24]
 8007af6:	2300      	movs	r3, #0
 8007af8:	627b      	str	r3, [r7, #36]	; 0x24
 8007afa:	2300      	movs	r3, #0
 8007afc:	617b      	str	r3, [r7, #20]
 8007afe:	2300      	movs	r3, #0
 8007b00:	623b      	str	r3, [r7, #32]
 8007b02:	4b21      	ldr	r3, [pc, #132]	; (8007b88 <HAL_RCC_GetSysClockFreq+0xb0>)
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	61fb      	str	r3, [r7, #28]
 8007b08:	69fb      	ldr	r3, [r7, #28]
 8007b0a:	f003 030c 	and.w	r3, r3, #12
 8007b0e:	2b04      	cmp	r3, #4
 8007b10:	d002      	beq.n	8007b18 <HAL_RCC_GetSysClockFreq+0x40>
 8007b12:	2b08      	cmp	r3, #8
 8007b14:	d003      	beq.n	8007b1e <HAL_RCC_GetSysClockFreq+0x46>
 8007b16:	e02b      	b.n	8007b70 <HAL_RCC_GetSysClockFreq+0x98>
 8007b18:	4b1c      	ldr	r3, [pc, #112]	; (8007b8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8007b1a:	623b      	str	r3, [r7, #32]
 8007b1c:	e02b      	b.n	8007b76 <HAL_RCC_GetSysClockFreq+0x9e>
 8007b1e:	69fb      	ldr	r3, [r7, #28]
 8007b20:	0c9b      	lsrs	r3, r3, #18
 8007b22:	f003 030f 	and.w	r3, r3, #15
 8007b26:	3328      	adds	r3, #40	; 0x28
 8007b28:	443b      	add	r3, r7
 8007b2a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007b2e:	617b      	str	r3, [r7, #20]
 8007b30:	69fb      	ldr	r3, [r7, #28]
 8007b32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d012      	beq.n	8007b60 <HAL_RCC_GetSysClockFreq+0x88>
 8007b3a:	4b13      	ldr	r3, [pc, #76]	; (8007b88 <HAL_RCC_GetSysClockFreq+0xb0>)
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	0c5b      	lsrs	r3, r3, #17
 8007b40:	f003 0301 	and.w	r3, r3, #1
 8007b44:	3328      	adds	r3, #40	; 0x28
 8007b46:	443b      	add	r3, r7
 8007b48:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007b4c:	61bb      	str	r3, [r7, #24]
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	4a0e      	ldr	r2, [pc, #56]	; (8007b8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8007b52:	fb03 f202 	mul.w	r2, r3, r2
 8007b56:	69bb      	ldr	r3, [r7, #24]
 8007b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8007b5e:	e004      	b.n	8007b6a <HAL_RCC_GetSysClockFreq+0x92>
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	4a0b      	ldr	r2, [pc, #44]	; (8007b90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007b64:	fb02 f303 	mul.w	r3, r2, r3
 8007b68:	627b      	str	r3, [r7, #36]	; 0x24
 8007b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b6c:	623b      	str	r3, [r7, #32]
 8007b6e:	e002      	b.n	8007b76 <HAL_RCC_GetSysClockFreq+0x9e>
 8007b70:	4b06      	ldr	r3, [pc, #24]	; (8007b8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8007b72:	623b      	str	r3, [r7, #32]
 8007b74:	bf00      	nop
 8007b76:	6a3b      	ldr	r3, [r7, #32]
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3728      	adds	r7, #40	; 0x28
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bc90      	pop	{r4, r7}
 8007b80:	4770      	bx	lr
 8007b82:	bf00      	nop
 8007b84:	0800903c 	.word	0x0800903c
 8007b88:	40021000 	.word	0x40021000
 8007b8c:	007a1200 	.word	0x007a1200
 8007b90:	003d0900 	.word	0x003d0900

08007b94 <HAL_RCC_GetHCLKFreq>:
 8007b94:	b480      	push	{r7}
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	4b02      	ldr	r3, [pc, #8]	; (8007ba4 <HAL_RCC_GetHCLKFreq+0x10>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bc80      	pop	{r7}
 8007ba2:	4770      	bx	lr
 8007ba4:	2000047c 	.word	0x2000047c

08007ba8 <HAL_RCC_GetPCLK1Freq>:
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	f7ff fff2 	bl	8007b94 <HAL_RCC_GetHCLKFreq>
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	4b05      	ldr	r3, [pc, #20]	; (8007bc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	0a1b      	lsrs	r3, r3, #8
 8007bb8:	f003 0307 	and.w	r3, r3, #7
 8007bbc:	4903      	ldr	r1, [pc, #12]	; (8007bcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8007bbe:	5ccb      	ldrb	r3, [r1, r3]
 8007bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	bd80      	pop	{r7, pc}
 8007bc8:	40021000 	.word	0x40021000
 8007bcc:	0800905c 	.word	0x0800905c

08007bd0 <RCC_Delay>:
 8007bd0:	b480      	push	{r7}
 8007bd2:	b085      	sub	sp, #20
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	4b0a      	ldr	r3, [pc, #40]	; (8007c04 <RCC_Delay+0x34>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a0a      	ldr	r2, [pc, #40]	; (8007c08 <RCC_Delay+0x38>)
 8007bde:	fba2 2303 	umull	r2, r3, r2, r3
 8007be2:	0a5b      	lsrs	r3, r3, #9
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	fb02 f303 	mul.w	r3, r2, r3
 8007bea:	60fb      	str	r3, [r7, #12]
 8007bec:	bf00      	nop
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	1e5a      	subs	r2, r3, #1
 8007bf2:	60fa      	str	r2, [r7, #12]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d1f9      	bne.n	8007bec <RCC_Delay+0x1c>
 8007bf8:	bf00      	nop
 8007bfa:	bf00      	nop
 8007bfc:	3714      	adds	r7, #20
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bc80      	pop	{r7}
 8007c02:	4770      	bx	lr
 8007c04:	2000047c 	.word	0x2000047c
 8007c08:	10624dd3 	.word	0x10624dd3

08007c0c <HAL_RCCEx_PeriphCLKConfig>:
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b086      	sub	sp, #24
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	2300      	movs	r3, #0
 8007c16:	613b      	str	r3, [r7, #16]
 8007c18:	2300      	movs	r3, #0
 8007c1a:	60fb      	str	r3, [r7, #12]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f003 0301 	and.w	r3, r3, #1
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d07d      	beq.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8007c28:	2300      	movs	r3, #0
 8007c2a:	75fb      	strb	r3, [r7, #23]
 8007c2c:	4b4f      	ldr	r3, [pc, #316]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c2e:	69db      	ldr	r3, [r3, #28]
 8007c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d10d      	bne.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8007c38:	4b4c      	ldr	r3, [pc, #304]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c3a:	69db      	ldr	r3, [r3, #28]
 8007c3c:	4a4b      	ldr	r2, [pc, #300]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c42:	61d3      	str	r3, [r2, #28]
 8007c44:	4b49      	ldr	r3, [pc, #292]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c46:	69db      	ldr	r3, [r3, #28]
 8007c48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c4c:	60bb      	str	r3, [r7, #8]
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	2301      	movs	r3, #1
 8007c52:	75fb      	strb	r3, [r7, #23]
 8007c54:	4b46      	ldr	r3, [pc, #280]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d118      	bne.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0x86>
 8007c60:	4b43      	ldr	r3, [pc, #268]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a42      	ldr	r2, [pc, #264]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007c66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c6a:	6013      	str	r3, [r2, #0]
 8007c6c:	f7fd f9ce 	bl	800500c <HAL_GetTick>
 8007c70:	6138      	str	r0, [r7, #16]
 8007c72:	e008      	b.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007c74:	f7fd f9ca 	bl	800500c <HAL_GetTick>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	1ad3      	subs	r3, r2, r3
 8007c7e:	2b64      	cmp	r3, #100	; 0x64
 8007c80:	d901      	bls.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007c82:	2303      	movs	r3, #3
 8007c84:	e06d      	b.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x156>
 8007c86:	4b3a      	ldr	r3, [pc, #232]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d0f0      	beq.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8007c92:	4b36      	ldr	r3, [pc, #216]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c94:	6a1b      	ldr	r3, [r3, #32]
 8007c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c9a:	60fb      	str	r3, [r7, #12]
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d02e      	beq.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007caa:	68fa      	ldr	r2, [r7, #12]
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d027      	beq.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007cb0:	4b2e      	ldr	r3, [pc, #184]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007cb2:	6a1b      	ldr	r3, [r3, #32]
 8007cb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cb8:	60fb      	str	r3, [r7, #12]
 8007cba:	4b2e      	ldr	r3, [pc, #184]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	601a      	str	r2, [r3, #0]
 8007cc0:	4b2c      	ldr	r3, [pc, #176]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	601a      	str	r2, [r3, #0]
 8007cc6:	4a29      	ldr	r2, [pc, #164]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	6213      	str	r3, [r2, #32]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f003 0301 	and.w	r3, r3, #1
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d014      	beq.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007cd6:	f7fd f999 	bl	800500c <HAL_GetTick>
 8007cda:	6138      	str	r0, [r7, #16]
 8007cdc:	e00a      	b.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8007cde:	f7fd f995 	bl	800500c <HAL_GetTick>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	1ad3      	subs	r3, r2, r3
 8007ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d901      	bls.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8007cf0:	2303      	movs	r3, #3
 8007cf2:	e036      	b.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x156>
 8007cf4:	4b1d      	ldr	r3, [pc, #116]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007cf6:	6a1b      	ldr	r3, [r3, #32]
 8007cf8:	f003 0302 	and.w	r3, r3, #2
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d0ee      	beq.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0xd2>
 8007d00:	4b1a      	ldr	r3, [pc, #104]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d02:	6a1b      	ldr	r3, [r3, #32]
 8007d04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	4917      	ldr	r1, [pc, #92]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	620b      	str	r3, [r1, #32]
 8007d12:	7dfb      	ldrb	r3, [r7, #23]
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d105      	bne.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8007d18:	4b14      	ldr	r3, [pc, #80]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d1a:	69db      	ldr	r3, [r3, #28]
 8007d1c:	4a13      	ldr	r2, [pc, #76]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d22:	61d3      	str	r3, [r2, #28]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f003 0302 	and.w	r3, r3, #2
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d008      	beq.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007d30:	4b0e      	ldr	r3, [pc, #56]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	490b      	ldr	r1, [pc, #44]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	604b      	str	r3, [r1, #4]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f003 0310 	and.w	r3, r3, #16
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d008      	beq.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8007d4e:	4b07      	ldr	r3, [pc, #28]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	68db      	ldr	r3, [r3, #12]
 8007d5a:	4904      	ldr	r1, [pc, #16]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	604b      	str	r3, [r1, #4]
 8007d60:	2300      	movs	r3, #0
 8007d62:	4618      	mov	r0, r3
 8007d64:	3718      	adds	r7, #24
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
 8007d6a:	bf00      	nop
 8007d6c:	40021000 	.word	0x40021000
 8007d70:	40007000 	.word	0x40007000
 8007d74:	42420440 	.word	0x42420440

08007d78 <HAL_TIM_Base_Init>:
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b082      	sub	sp, #8
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d101      	bne.n	8007d8a <HAL_TIM_Base_Init+0x12>
 8007d86:	2301      	movs	r3, #1
 8007d88:	e041      	b.n	8007e0e <HAL_TIM_Base_Init+0x96>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d90:	b2db      	uxtb	r3, r3
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d106      	bne.n	8007da4 <HAL_TIM_Base_Init+0x2c>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f7fc ff3a 	bl	8004c18 <HAL_TIM_Base_MspInit>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2202      	movs	r2, #2
 8007da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	3304      	adds	r3, #4
 8007db4:	4619      	mov	r1, r3
 8007db6:	4610      	mov	r0, r2
 8007db8:	f000 fc8c 	bl	80086d4 <TIM_Base_SetConfig>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2201      	movs	r2, #1
 8007de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2201      	movs	r2, #1
 8007de8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2201      	movs	r2, #1
 8007df0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2201      	movs	r2, #1
 8007df8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2201      	movs	r2, #1
 8007e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3708      	adds	r7, #8
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
	...

08007e18 <HAL_TIM_Base_Start_IT>:
 8007e18:	b480      	push	{r7}
 8007e1a:	b085      	sub	sp, #20
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d001      	beq.n	8007e30 <HAL_TIM_Base_Start_IT+0x18>
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	e03a      	b.n	8007ea6 <HAL_TIM_Base_Start_IT+0x8e>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2202      	movs	r2, #2
 8007e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	68da      	ldr	r2, [r3, #12]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f042 0201 	orr.w	r2, r2, #1
 8007e46:	60da      	str	r2, [r3, #12]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a18      	ldr	r2, [pc, #96]	; (8007eb0 <HAL_TIM_Base_Start_IT+0x98>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d00e      	beq.n	8007e70 <HAL_TIM_Base_Start_IT+0x58>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e5a:	d009      	beq.n	8007e70 <HAL_TIM_Base_Start_IT+0x58>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a14      	ldr	r2, [pc, #80]	; (8007eb4 <HAL_TIM_Base_Start_IT+0x9c>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d004      	beq.n	8007e70 <HAL_TIM_Base_Start_IT+0x58>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a13      	ldr	r2, [pc, #76]	; (8007eb8 <HAL_TIM_Base_Start_IT+0xa0>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d111      	bne.n	8007e94 <HAL_TIM_Base_Start_IT+0x7c>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	f003 0307 	and.w	r3, r3, #7
 8007e7a:	60fb      	str	r3, [r7, #12]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2b06      	cmp	r3, #6
 8007e80:	d010      	beq.n	8007ea4 <HAL_TIM_Base_Start_IT+0x8c>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f042 0201 	orr.w	r2, r2, #1
 8007e90:	601a      	str	r2, [r3, #0]
 8007e92:	e007      	b.n	8007ea4 <HAL_TIM_Base_Start_IT+0x8c>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f042 0201 	orr.w	r2, r2, #1
 8007ea2:	601a      	str	r2, [r3, #0]
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3714      	adds	r7, #20
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bc80      	pop	{r7}
 8007eae:	4770      	bx	lr
 8007eb0:	40012c00 	.word	0x40012c00
 8007eb4:	40000400 	.word	0x40000400
 8007eb8:	40000800 	.word	0x40000800

08007ebc <HAL_TIM_PWM_Init>:
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b082      	sub	sp, #8
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d101      	bne.n	8007ece <HAL_TIM_PWM_Init+0x12>
 8007eca:	2301      	movs	r3, #1
 8007ecc:	e041      	b.n	8007f52 <HAL_TIM_PWM_Init+0x96>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d106      	bne.n	8007ee8 <HAL_TIM_PWM_Init+0x2c>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2200      	movs	r2, #0
 8007ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 f839 	bl	8007f5a <HAL_TIM_PWM_MspInit>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2202      	movs	r2, #2
 8007eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	3304      	adds	r3, #4
 8007ef8:	4619      	mov	r1, r3
 8007efa:	4610      	mov	r0, r2
 8007efc:	f000 fbea 	bl	80086d4 <TIM_Base_SetConfig>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2201      	movs	r2, #1
 8007f04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2201      	movs	r2, #1
 8007f14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2201      	movs	r2, #1
 8007f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2201      	movs	r2, #1
 8007f34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2201      	movs	r2, #1
 8007f44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007f50:	2300      	movs	r3, #0
 8007f52:	4618      	mov	r0, r3
 8007f54:	3708      	adds	r7, #8
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}

08007f5a <HAL_TIM_PWM_MspInit>:
 8007f5a:	b480      	push	{r7}
 8007f5c:	b083      	sub	sp, #12
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
 8007f62:	bf00      	nop
 8007f64:	370c      	adds	r7, #12
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bc80      	pop	{r7}
 8007f6a:	4770      	bx	lr

08007f6c <HAL_TIM_PWM_Start>:
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	6039      	str	r1, [r7, #0]
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d109      	bne.n	8007f90 <HAL_TIM_PWM_Start+0x24>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	bf14      	ite	ne
 8007f88:	2301      	movne	r3, #1
 8007f8a:	2300      	moveq	r3, #0
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	e022      	b.n	8007fd6 <HAL_TIM_PWM_Start+0x6a>
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	2b04      	cmp	r3, #4
 8007f94:	d109      	bne.n	8007faa <HAL_TIM_PWM_Start+0x3e>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	2b01      	cmp	r3, #1
 8007fa0:	bf14      	ite	ne
 8007fa2:	2301      	movne	r3, #1
 8007fa4:	2300      	moveq	r3, #0
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	e015      	b.n	8007fd6 <HAL_TIM_PWM_Start+0x6a>
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	2b08      	cmp	r3, #8
 8007fae:	d109      	bne.n	8007fc4 <HAL_TIM_PWM_Start+0x58>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	bf14      	ite	ne
 8007fbc:	2301      	movne	r3, #1
 8007fbe:	2300      	moveq	r3, #0
 8007fc0:	b2db      	uxtb	r3, r3
 8007fc2:	e008      	b.n	8007fd6 <HAL_TIM_PWM_Start+0x6a>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	bf14      	ite	ne
 8007fd0:	2301      	movne	r3, #1
 8007fd2:	2300      	moveq	r3, #0
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d001      	beq.n	8007fde <HAL_TIM_PWM_Start+0x72>
 8007fda:	2301      	movs	r3, #1
 8007fdc:	e05e      	b.n	800809c <HAL_TIM_PWM_Start+0x130>
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d104      	bne.n	8007fee <HAL_TIM_PWM_Start+0x82>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2202      	movs	r2, #2
 8007fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007fec:	e013      	b.n	8008016 <HAL_TIM_PWM_Start+0xaa>
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	2b04      	cmp	r3, #4
 8007ff2:	d104      	bne.n	8007ffe <HAL_TIM_PWM_Start+0x92>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2202      	movs	r2, #2
 8007ff8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ffc:	e00b      	b.n	8008016 <HAL_TIM_PWM_Start+0xaa>
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	2b08      	cmp	r3, #8
 8008002:	d104      	bne.n	800800e <HAL_TIM_PWM_Start+0xa2>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2202      	movs	r2, #2
 8008008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800800c:	e003      	b.n	8008016 <HAL_TIM_PWM_Start+0xaa>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2202      	movs	r2, #2
 8008012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	2201      	movs	r2, #1
 800801c:	6839      	ldr	r1, [r7, #0]
 800801e:	4618      	mov	r0, r3
 8008020:	f000 fdd8 	bl	8008bd4 <TIM_CCxChannelCmd>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a1e      	ldr	r2, [pc, #120]	; (80080a4 <HAL_TIM_PWM_Start+0x138>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d107      	bne.n	800803e <HAL_TIM_PWM_Start+0xd2>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800803c:	645a      	str	r2, [r3, #68]	; 0x44
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a18      	ldr	r2, [pc, #96]	; (80080a4 <HAL_TIM_PWM_Start+0x138>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d00e      	beq.n	8008066 <HAL_TIM_PWM_Start+0xfa>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008050:	d009      	beq.n	8008066 <HAL_TIM_PWM_Start+0xfa>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4a14      	ldr	r2, [pc, #80]	; (80080a8 <HAL_TIM_PWM_Start+0x13c>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d004      	beq.n	8008066 <HAL_TIM_PWM_Start+0xfa>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a12      	ldr	r2, [pc, #72]	; (80080ac <HAL_TIM_PWM_Start+0x140>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d111      	bne.n	800808a <HAL_TIM_PWM_Start+0x11e>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	f003 0307 	and.w	r3, r3, #7
 8008070:	60fb      	str	r3, [r7, #12]
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2b06      	cmp	r3, #6
 8008076:	d010      	beq.n	800809a <HAL_TIM_PWM_Start+0x12e>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f042 0201 	orr.w	r2, r2, #1
 8008086:	601a      	str	r2, [r3, #0]
 8008088:	e007      	b.n	800809a <HAL_TIM_PWM_Start+0x12e>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f042 0201 	orr.w	r2, r2, #1
 8008098:	601a      	str	r2, [r3, #0]
 800809a:	2300      	movs	r3, #0
 800809c:	4618      	mov	r0, r3
 800809e:	3710      	adds	r7, #16
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}
 80080a4:	40012c00 	.word	0x40012c00
 80080a8:	40000400 	.word	0x40000400
 80080ac:	40000800 	.word	0x40000800

080080b0 <HAL_TIM_PWM_Stop>:
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b082      	sub	sp, #8
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	6039      	str	r1, [r7, #0]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	2200      	movs	r2, #0
 80080c0:	6839      	ldr	r1, [r7, #0]
 80080c2:	4618      	mov	r0, r3
 80080c4:	f000 fd86 	bl	8008bd4 <TIM_CCxChannelCmd>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a29      	ldr	r2, [pc, #164]	; (8008174 <HAL_TIM_PWM_Stop+0xc4>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d117      	bne.n	8008102 <HAL_TIM_PWM_Stop+0x52>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	6a1a      	ldr	r2, [r3, #32]
 80080d8:	f241 1311 	movw	r3, #4369	; 0x1111
 80080dc:	4013      	ands	r3, r2
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d10f      	bne.n	8008102 <HAL_TIM_PWM_Stop+0x52>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	6a1a      	ldr	r2, [r3, #32]
 80080e8:	f240 4344 	movw	r3, #1092	; 0x444
 80080ec:	4013      	ands	r3, r2
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d107      	bne.n	8008102 <HAL_TIM_PWM_Stop+0x52>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008100:	645a      	str	r2, [r3, #68]	; 0x44
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	6a1a      	ldr	r2, [r3, #32]
 8008108:	f241 1311 	movw	r3, #4369	; 0x1111
 800810c:	4013      	ands	r3, r2
 800810e:	2b00      	cmp	r3, #0
 8008110:	d10f      	bne.n	8008132 <HAL_TIM_PWM_Stop+0x82>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	6a1a      	ldr	r2, [r3, #32]
 8008118:	f240 4344 	movw	r3, #1092	; 0x444
 800811c:	4013      	ands	r3, r2
 800811e:	2b00      	cmp	r3, #0
 8008120:	d107      	bne.n	8008132 <HAL_TIM_PWM_Stop+0x82>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f022 0201 	bic.w	r2, r2, #1
 8008130:	601a      	str	r2, [r3, #0]
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d104      	bne.n	8008142 <HAL_TIM_PWM_Stop+0x92>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2201      	movs	r2, #1
 800813c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008140:	e013      	b.n	800816a <HAL_TIM_PWM_Stop+0xba>
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	2b04      	cmp	r3, #4
 8008146:	d104      	bne.n	8008152 <HAL_TIM_PWM_Stop+0xa2>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2201      	movs	r2, #1
 800814c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008150:	e00b      	b.n	800816a <HAL_TIM_PWM_Stop+0xba>
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	2b08      	cmp	r3, #8
 8008156:	d104      	bne.n	8008162 <HAL_TIM_PWM_Stop+0xb2>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2201      	movs	r2, #1
 800815c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008160:	e003      	b.n	800816a <HAL_TIM_PWM_Stop+0xba>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2201      	movs	r2, #1
 8008166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800816a:	2300      	movs	r3, #0
 800816c:	4618      	mov	r0, r3
 800816e:	3708      	adds	r7, #8
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}
 8008174:	40012c00 	.word	0x40012c00

08008178 <HAL_TIM_IRQHandler>:
 8008178:	b580      	push	{r7, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	691b      	ldr	r3, [r3, #16]
 8008186:	f003 0302 	and.w	r3, r3, #2
 800818a:	2b02      	cmp	r3, #2
 800818c:	d122      	bne.n	80081d4 <HAL_TIM_IRQHandler+0x5c>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	68db      	ldr	r3, [r3, #12]
 8008194:	f003 0302 	and.w	r3, r3, #2
 8008198:	2b02      	cmp	r3, #2
 800819a:	d11b      	bne.n	80081d4 <HAL_TIM_IRQHandler+0x5c>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f06f 0202 	mvn.w	r2, #2
 80081a4:	611a      	str	r2, [r3, #16]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2201      	movs	r2, #1
 80081aa:	771a      	strb	r2, [r3, #28]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	699b      	ldr	r3, [r3, #24]
 80081b2:	f003 0303 	and.w	r3, r3, #3
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d003      	beq.n	80081c2 <HAL_TIM_IRQHandler+0x4a>
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 fa6f 	bl	800869e <HAL_TIM_IC_CaptureCallback>
 80081c0:	e005      	b.n	80081ce <HAL_TIM_IRQHandler+0x56>
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 fa62 	bl	800868c <HAL_TIM_OC_DelayElapsedCallback>
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f000 fa71 	bl	80086b0 <HAL_TIM_PWM_PulseFinishedCallback>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	771a      	strb	r2, [r3, #28]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	691b      	ldr	r3, [r3, #16]
 80081da:	f003 0304 	and.w	r3, r3, #4
 80081de:	2b04      	cmp	r3, #4
 80081e0:	d122      	bne.n	8008228 <HAL_TIM_IRQHandler+0xb0>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	68db      	ldr	r3, [r3, #12]
 80081e8:	f003 0304 	and.w	r3, r3, #4
 80081ec:	2b04      	cmp	r3, #4
 80081ee:	d11b      	bne.n	8008228 <HAL_TIM_IRQHandler+0xb0>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f06f 0204 	mvn.w	r2, #4
 80081f8:	611a      	str	r2, [r3, #16]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2202      	movs	r2, #2
 80081fe:	771a      	strb	r2, [r3, #28]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	699b      	ldr	r3, [r3, #24]
 8008206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800820a:	2b00      	cmp	r3, #0
 800820c:	d003      	beq.n	8008216 <HAL_TIM_IRQHandler+0x9e>
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f000 fa45 	bl	800869e <HAL_TIM_IC_CaptureCallback>
 8008214:	e005      	b.n	8008222 <HAL_TIM_IRQHandler+0xaa>
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 fa38 	bl	800868c <HAL_TIM_OC_DelayElapsedCallback>
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f000 fa47 	bl	80086b0 <HAL_TIM_PWM_PulseFinishedCallback>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	771a      	strb	r2, [r3, #28]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	691b      	ldr	r3, [r3, #16]
 800822e:	f003 0308 	and.w	r3, r3, #8
 8008232:	2b08      	cmp	r3, #8
 8008234:	d122      	bne.n	800827c <HAL_TIM_IRQHandler+0x104>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	68db      	ldr	r3, [r3, #12]
 800823c:	f003 0308 	and.w	r3, r3, #8
 8008240:	2b08      	cmp	r3, #8
 8008242:	d11b      	bne.n	800827c <HAL_TIM_IRQHandler+0x104>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f06f 0208 	mvn.w	r2, #8
 800824c:	611a      	str	r2, [r3, #16]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2204      	movs	r2, #4
 8008252:	771a      	strb	r2, [r3, #28]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	69db      	ldr	r3, [r3, #28]
 800825a:	f003 0303 	and.w	r3, r3, #3
 800825e:	2b00      	cmp	r3, #0
 8008260:	d003      	beq.n	800826a <HAL_TIM_IRQHandler+0xf2>
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 fa1b 	bl	800869e <HAL_TIM_IC_CaptureCallback>
 8008268:	e005      	b.n	8008276 <HAL_TIM_IRQHandler+0xfe>
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 fa0e 	bl	800868c <HAL_TIM_OC_DelayElapsedCallback>
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 fa1d 	bl	80086b0 <HAL_TIM_PWM_PulseFinishedCallback>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2200      	movs	r2, #0
 800827a:	771a      	strb	r2, [r3, #28]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	691b      	ldr	r3, [r3, #16]
 8008282:	f003 0310 	and.w	r3, r3, #16
 8008286:	2b10      	cmp	r3, #16
 8008288:	d122      	bne.n	80082d0 <HAL_TIM_IRQHandler+0x158>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	f003 0310 	and.w	r3, r3, #16
 8008294:	2b10      	cmp	r3, #16
 8008296:	d11b      	bne.n	80082d0 <HAL_TIM_IRQHandler+0x158>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f06f 0210 	mvn.w	r2, #16
 80082a0:	611a      	str	r2, [r3, #16]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2208      	movs	r2, #8
 80082a6:	771a      	strb	r2, [r3, #28]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	69db      	ldr	r3, [r3, #28]
 80082ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d003      	beq.n	80082be <HAL_TIM_IRQHandler+0x146>
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 f9f1 	bl	800869e <HAL_TIM_IC_CaptureCallback>
 80082bc:	e005      	b.n	80082ca <HAL_TIM_IRQHandler+0x152>
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 f9e4 	bl	800868c <HAL_TIM_OC_DelayElapsedCallback>
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 f9f3 	bl	80086b0 <HAL_TIM_PWM_PulseFinishedCallback>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2200      	movs	r2, #0
 80082ce:	771a      	strb	r2, [r3, #28]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	691b      	ldr	r3, [r3, #16]
 80082d6:	f003 0301 	and.w	r3, r3, #1
 80082da:	2b01      	cmp	r3, #1
 80082dc:	d10e      	bne.n	80082fc <HAL_TIM_IRQHandler+0x184>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	68db      	ldr	r3, [r3, #12]
 80082e4:	f003 0301 	and.w	r3, r3, #1
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	d107      	bne.n	80082fc <HAL_TIM_IRQHandler+0x184>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f06f 0201 	mvn.w	r2, #1
 80082f4:	611a      	str	r2, [r3, #16]
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f7fb faa8 	bl	800384c <HAL_TIM_PeriodElapsedCallback>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	691b      	ldr	r3, [r3, #16]
 8008302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008306:	2b80      	cmp	r3, #128	; 0x80
 8008308:	d10e      	bne.n	8008328 <HAL_TIM_IRQHandler+0x1b0>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	68db      	ldr	r3, [r3, #12]
 8008310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008314:	2b80      	cmp	r3, #128	; 0x80
 8008316:	d107      	bne.n	8008328 <HAL_TIM_IRQHandler+0x1b0>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008320:	611a      	str	r2, [r3, #16]
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 fce1 	bl	8008cea <HAL_TIMEx_BreakCallback>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	691b      	ldr	r3, [r3, #16]
 800832e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008332:	2b40      	cmp	r3, #64	; 0x40
 8008334:	d10e      	bne.n	8008354 <HAL_TIM_IRQHandler+0x1dc>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	68db      	ldr	r3, [r3, #12]
 800833c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008340:	2b40      	cmp	r3, #64	; 0x40
 8008342:	d107      	bne.n	8008354 <HAL_TIM_IRQHandler+0x1dc>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800834c:	611a      	str	r2, [r3, #16]
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 f9b7 	bl	80086c2 <HAL_TIM_TriggerCallback>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	691b      	ldr	r3, [r3, #16]
 800835a:	f003 0320 	and.w	r3, r3, #32
 800835e:	2b20      	cmp	r3, #32
 8008360:	d10e      	bne.n	8008380 <HAL_TIM_IRQHandler+0x208>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	68db      	ldr	r3, [r3, #12]
 8008368:	f003 0320 	and.w	r3, r3, #32
 800836c:	2b20      	cmp	r3, #32
 800836e:	d107      	bne.n	8008380 <HAL_TIM_IRQHandler+0x208>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f06f 0220 	mvn.w	r2, #32
 8008378:	611a      	str	r2, [r3, #16]
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f000 fcac 	bl	8008cd8 <HAL_TIMEx_CommutCallback>
 8008380:	bf00      	nop
 8008382:	3708      	adds	r7, #8
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <HAL_TIM_PWM_ConfigChannel>:
 8008388:	b580      	push	{r7, lr}
 800838a:	b084      	sub	sp, #16
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	607a      	str	r2, [r7, #4]
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800839a:	2b01      	cmp	r3, #1
 800839c:	d101      	bne.n	80083a2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800839e:	2302      	movs	r3, #2
 80083a0:	e0ac      	b.n	80084fc <HAL_TIM_PWM_ConfigChannel+0x174>
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2201      	movs	r2, #1
 80083a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2b0c      	cmp	r3, #12
 80083ae:	f200 809f 	bhi.w	80084f0 <HAL_TIM_PWM_ConfigChannel+0x168>
 80083b2:	a201      	add	r2, pc, #4	; (adr r2, 80083b8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80083b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083b8:	080083ed 	.word	0x080083ed
 80083bc:	080084f1 	.word	0x080084f1
 80083c0:	080084f1 	.word	0x080084f1
 80083c4:	080084f1 	.word	0x080084f1
 80083c8:	0800842d 	.word	0x0800842d
 80083cc:	080084f1 	.word	0x080084f1
 80083d0:	080084f1 	.word	0x080084f1
 80083d4:	080084f1 	.word	0x080084f1
 80083d8:	0800846f 	.word	0x0800846f
 80083dc:	080084f1 	.word	0x080084f1
 80083e0:	080084f1 	.word	0x080084f1
 80083e4:	080084f1 	.word	0x080084f1
 80083e8:	080084af 	.word	0x080084af
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	68b9      	ldr	r1, [r7, #8]
 80083f2:	4618      	mov	r0, r3
 80083f4:	f000 f9d0 	bl	8008798 <TIM_OC1_SetConfig>
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	699a      	ldr	r2, [r3, #24]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f042 0208 	orr.w	r2, r2, #8
 8008406:	619a      	str	r2, [r3, #24]
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	699a      	ldr	r2, [r3, #24]
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f022 0204 	bic.w	r2, r2, #4
 8008416:	619a      	str	r2, [r3, #24]
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	6999      	ldr	r1, [r3, #24]
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	691a      	ldr	r2, [r3, #16]
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	430a      	orrs	r2, r1
 8008428:	619a      	str	r2, [r3, #24]
 800842a:	e062      	b.n	80084f2 <HAL_TIM_PWM_ConfigChannel+0x16a>
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	68b9      	ldr	r1, [r7, #8]
 8008432:	4618      	mov	r0, r3
 8008434:	f000 fa16 	bl	8008864 <TIM_OC2_SetConfig>
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	699a      	ldr	r2, [r3, #24]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008446:	619a      	str	r2, [r3, #24]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	699a      	ldr	r2, [r3, #24]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008456:	619a      	str	r2, [r3, #24]
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	6999      	ldr	r1, [r3, #24]
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	691b      	ldr	r3, [r3, #16]
 8008462:	021a      	lsls	r2, r3, #8
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	430a      	orrs	r2, r1
 800846a:	619a      	str	r2, [r3, #24]
 800846c:	e041      	b.n	80084f2 <HAL_TIM_PWM_ConfigChannel+0x16a>
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	68b9      	ldr	r1, [r7, #8]
 8008474:	4618      	mov	r0, r3
 8008476:	f000 fa5f 	bl	8008938 <TIM_OC3_SetConfig>
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	69da      	ldr	r2, [r3, #28]
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f042 0208 	orr.w	r2, r2, #8
 8008488:	61da      	str	r2, [r3, #28]
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	69da      	ldr	r2, [r3, #28]
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f022 0204 	bic.w	r2, r2, #4
 8008498:	61da      	str	r2, [r3, #28]
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	69d9      	ldr	r1, [r3, #28]
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	691a      	ldr	r2, [r3, #16]
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	430a      	orrs	r2, r1
 80084aa:	61da      	str	r2, [r3, #28]
 80084ac:	e021      	b.n	80084f2 <HAL_TIM_PWM_ConfigChannel+0x16a>
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	68b9      	ldr	r1, [r7, #8]
 80084b4:	4618      	mov	r0, r3
 80084b6:	f000 faa9 	bl	8008a0c <TIM_OC4_SetConfig>
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	69da      	ldr	r2, [r3, #28]
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084c8:	61da      	str	r2, [r3, #28]
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	69da      	ldr	r2, [r3, #28]
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084d8:	61da      	str	r2, [r3, #28]
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	69d9      	ldr	r1, [r3, #28]
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	691b      	ldr	r3, [r3, #16]
 80084e4:	021a      	lsls	r2, r3, #8
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	430a      	orrs	r2, r1
 80084ec:	61da      	str	r2, [r3, #28]
 80084ee:	e000      	b.n	80084f2 <HAL_TIM_PWM_ConfigChannel+0x16a>
 80084f0:	bf00      	nop
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2200      	movs	r2, #0
 80084f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80084fa:	2300      	movs	r3, #0
 80084fc:	4618      	mov	r0, r3
 80084fe:	3710      	adds	r7, #16
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <HAL_TIM_ConfigClockSource>:
 8008504:	b580      	push	{r7, lr}
 8008506:	b084      	sub	sp, #16
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	6039      	str	r1, [r7, #0]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008514:	2b01      	cmp	r3, #1
 8008516:	d101      	bne.n	800851c <HAL_TIM_ConfigClockSource+0x18>
 8008518:	2302      	movs	r3, #2
 800851a:	e0b3      	b.n	8008684 <HAL_TIM_ConfigClockSource+0x180>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2201      	movs	r2, #1
 8008520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2202      	movs	r2, #2
 8008528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	689b      	ldr	r3, [r3, #8]
 8008532:	60fb      	str	r3, [r7, #12]
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800853a:	60fb      	str	r3, [r7, #12]
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008542:	60fb      	str	r3, [r7, #12]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	68fa      	ldr	r2, [r7, #12]
 800854a:	609a      	str	r2, [r3, #8]
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008554:	d03e      	beq.n	80085d4 <HAL_TIM_ConfigClockSource+0xd0>
 8008556:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800855a:	f200 8087 	bhi.w	800866c <HAL_TIM_ConfigClockSource+0x168>
 800855e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008562:	f000 8085 	beq.w	8008670 <HAL_TIM_ConfigClockSource+0x16c>
 8008566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800856a:	d87f      	bhi.n	800866c <HAL_TIM_ConfigClockSource+0x168>
 800856c:	2b70      	cmp	r3, #112	; 0x70
 800856e:	d01a      	beq.n	80085a6 <HAL_TIM_ConfigClockSource+0xa2>
 8008570:	2b70      	cmp	r3, #112	; 0x70
 8008572:	d87b      	bhi.n	800866c <HAL_TIM_ConfigClockSource+0x168>
 8008574:	2b60      	cmp	r3, #96	; 0x60
 8008576:	d050      	beq.n	800861a <HAL_TIM_ConfigClockSource+0x116>
 8008578:	2b60      	cmp	r3, #96	; 0x60
 800857a:	d877      	bhi.n	800866c <HAL_TIM_ConfigClockSource+0x168>
 800857c:	2b50      	cmp	r3, #80	; 0x50
 800857e:	d03c      	beq.n	80085fa <HAL_TIM_ConfigClockSource+0xf6>
 8008580:	2b50      	cmp	r3, #80	; 0x50
 8008582:	d873      	bhi.n	800866c <HAL_TIM_ConfigClockSource+0x168>
 8008584:	2b40      	cmp	r3, #64	; 0x40
 8008586:	d058      	beq.n	800863a <HAL_TIM_ConfigClockSource+0x136>
 8008588:	2b40      	cmp	r3, #64	; 0x40
 800858a:	d86f      	bhi.n	800866c <HAL_TIM_ConfigClockSource+0x168>
 800858c:	2b30      	cmp	r3, #48	; 0x30
 800858e:	d064      	beq.n	800865a <HAL_TIM_ConfigClockSource+0x156>
 8008590:	2b30      	cmp	r3, #48	; 0x30
 8008592:	d86b      	bhi.n	800866c <HAL_TIM_ConfigClockSource+0x168>
 8008594:	2b20      	cmp	r3, #32
 8008596:	d060      	beq.n	800865a <HAL_TIM_ConfigClockSource+0x156>
 8008598:	2b20      	cmp	r3, #32
 800859a:	d867      	bhi.n	800866c <HAL_TIM_ConfigClockSource+0x168>
 800859c:	2b00      	cmp	r3, #0
 800859e:	d05c      	beq.n	800865a <HAL_TIM_ConfigClockSource+0x156>
 80085a0:	2b10      	cmp	r3, #16
 80085a2:	d05a      	beq.n	800865a <HAL_TIM_ConfigClockSource+0x156>
 80085a4:	e062      	b.n	800866c <HAL_TIM_ConfigClockSource+0x168>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6818      	ldr	r0, [r3, #0]
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	6899      	ldr	r1, [r3, #8]
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	685a      	ldr	r2, [r3, #4]
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	68db      	ldr	r3, [r3, #12]
 80085b6:	f000 faee 	bl	8008b96 <TIM_ETR_SetConfig>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	689b      	ldr	r3, [r3, #8]
 80085c0:	60fb      	str	r3, [r7, #12]
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80085c8:	60fb      	str	r3, [r7, #12]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	68fa      	ldr	r2, [r7, #12]
 80085d0:	609a      	str	r2, [r3, #8]
 80085d2:	e04e      	b.n	8008672 <HAL_TIM_ConfigClockSource+0x16e>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6818      	ldr	r0, [r3, #0]
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	6899      	ldr	r1, [r3, #8]
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	685a      	ldr	r2, [r3, #4]
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	68db      	ldr	r3, [r3, #12]
 80085e4:	f000 fad7 	bl	8008b96 <TIM_ETR_SetConfig>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	689a      	ldr	r2, [r3, #8]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80085f6:	609a      	str	r2, [r3, #8]
 80085f8:	e03b      	b.n	8008672 <HAL_TIM_ConfigClockSource+0x16e>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6818      	ldr	r0, [r3, #0]
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	6859      	ldr	r1, [r3, #4]
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	68db      	ldr	r3, [r3, #12]
 8008606:	461a      	mov	r2, r3
 8008608:	f000 fa4e 	bl	8008aa8 <TIM_TI1_ConfigInputStage>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	2150      	movs	r1, #80	; 0x50
 8008612:	4618      	mov	r0, r3
 8008614:	f000 faa5 	bl	8008b62 <TIM_ITRx_SetConfig>
 8008618:	e02b      	b.n	8008672 <HAL_TIM_ConfigClockSource+0x16e>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6818      	ldr	r0, [r3, #0]
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	6859      	ldr	r1, [r3, #4]
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	68db      	ldr	r3, [r3, #12]
 8008626:	461a      	mov	r2, r3
 8008628:	f000 fa6c 	bl	8008b04 <TIM_TI2_ConfigInputStage>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	2160      	movs	r1, #96	; 0x60
 8008632:	4618      	mov	r0, r3
 8008634:	f000 fa95 	bl	8008b62 <TIM_ITRx_SetConfig>
 8008638:	e01b      	b.n	8008672 <HAL_TIM_ConfigClockSource+0x16e>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6818      	ldr	r0, [r3, #0]
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	6859      	ldr	r1, [r3, #4]
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	68db      	ldr	r3, [r3, #12]
 8008646:	461a      	mov	r2, r3
 8008648:	f000 fa2e 	bl	8008aa8 <TIM_TI1_ConfigInputStage>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	2140      	movs	r1, #64	; 0x40
 8008652:	4618      	mov	r0, r3
 8008654:	f000 fa85 	bl	8008b62 <TIM_ITRx_SetConfig>
 8008658:	e00b      	b.n	8008672 <HAL_TIM_ConfigClockSource+0x16e>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4619      	mov	r1, r3
 8008664:	4610      	mov	r0, r2
 8008666:	f000 fa7c 	bl	8008b62 <TIM_ITRx_SetConfig>
 800866a:	e002      	b.n	8008672 <HAL_TIM_ConfigClockSource+0x16e>
 800866c:	bf00      	nop
 800866e:	e000      	b.n	8008672 <HAL_TIM_ConfigClockSource+0x16e>
 8008670:	bf00      	nop
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2201      	movs	r2, #1
 8008676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2200      	movs	r2, #0
 800867e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008682:	2300      	movs	r3, #0
 8008684:	4618      	mov	r0, r3
 8008686:	3710      	adds	r7, #16
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <HAL_TIM_OC_DelayElapsedCallback>:
 800868c:	b480      	push	{r7}
 800868e:	b083      	sub	sp, #12
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	bf00      	nop
 8008696:	370c      	adds	r7, #12
 8008698:	46bd      	mov	sp, r7
 800869a:	bc80      	pop	{r7}
 800869c:	4770      	bx	lr

0800869e <HAL_TIM_IC_CaptureCallback>:
 800869e:	b480      	push	{r7}
 80086a0:	b083      	sub	sp, #12
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	6078      	str	r0, [r7, #4]
 80086a6:	bf00      	nop
 80086a8:	370c      	adds	r7, #12
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bc80      	pop	{r7}
 80086ae:	4770      	bx	lr

080086b0 <HAL_TIM_PWM_PulseFinishedCallback>:
 80086b0:	b480      	push	{r7}
 80086b2:	b083      	sub	sp, #12
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	bf00      	nop
 80086ba:	370c      	adds	r7, #12
 80086bc:	46bd      	mov	sp, r7
 80086be:	bc80      	pop	{r7}
 80086c0:	4770      	bx	lr

080086c2 <HAL_TIM_TriggerCallback>:
 80086c2:	b480      	push	{r7}
 80086c4:	b083      	sub	sp, #12
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	6078      	str	r0, [r7, #4]
 80086ca:	bf00      	nop
 80086cc:	370c      	adds	r7, #12
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bc80      	pop	{r7}
 80086d2:	4770      	bx	lr

080086d4 <TIM_Base_SetConfig>:
 80086d4:	b480      	push	{r7}
 80086d6:	b085      	sub	sp, #20
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	60fb      	str	r3, [r7, #12]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	4a29      	ldr	r2, [pc, #164]	; (800878c <TIM_Base_SetConfig+0xb8>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d00b      	beq.n	8008704 <TIM_Base_SetConfig+0x30>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086f2:	d007      	beq.n	8008704 <TIM_Base_SetConfig+0x30>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	4a26      	ldr	r2, [pc, #152]	; (8008790 <TIM_Base_SetConfig+0xbc>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d003      	beq.n	8008704 <TIM_Base_SetConfig+0x30>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	4a25      	ldr	r2, [pc, #148]	; (8008794 <TIM_Base_SetConfig+0xc0>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d108      	bne.n	8008716 <TIM_Base_SetConfig+0x42>
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800870a:	60fb      	str	r3, [r7, #12]
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	68fa      	ldr	r2, [r7, #12]
 8008712:	4313      	orrs	r3, r2
 8008714:	60fb      	str	r3, [r7, #12]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	4a1c      	ldr	r2, [pc, #112]	; (800878c <TIM_Base_SetConfig+0xb8>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d00b      	beq.n	8008736 <TIM_Base_SetConfig+0x62>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008724:	d007      	beq.n	8008736 <TIM_Base_SetConfig+0x62>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	4a19      	ldr	r2, [pc, #100]	; (8008790 <TIM_Base_SetConfig+0xbc>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d003      	beq.n	8008736 <TIM_Base_SetConfig+0x62>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	4a18      	ldr	r2, [pc, #96]	; (8008794 <TIM_Base_SetConfig+0xc0>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d108      	bne.n	8008748 <TIM_Base_SetConfig+0x74>
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800873c:	60fb      	str	r3, [r7, #12]
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	68db      	ldr	r3, [r3, #12]
 8008742:	68fa      	ldr	r2, [r7, #12]
 8008744:	4313      	orrs	r3, r2
 8008746:	60fb      	str	r3, [r7, #12]
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	695b      	ldr	r3, [r3, #20]
 8008752:	4313      	orrs	r3, r2
 8008754:	60fb      	str	r3, [r7, #12]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	68fa      	ldr	r2, [r7, #12]
 800875a:	601a      	str	r2, [r3, #0]
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	689a      	ldr	r2, [r3, #8]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	62da      	str	r2, [r3, #44]	; 0x2c
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	681a      	ldr	r2, [r3, #0]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	629a      	str	r2, [r3, #40]	; 0x28
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	4a07      	ldr	r2, [pc, #28]	; (800878c <TIM_Base_SetConfig+0xb8>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d103      	bne.n	800877c <TIM_Base_SetConfig+0xa8>
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	691a      	ldr	r2, [r3, #16]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	631a      	str	r2, [r3, #48]	; 0x30
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2201      	movs	r2, #1
 8008780:	615a      	str	r2, [r3, #20]
 8008782:	bf00      	nop
 8008784:	3714      	adds	r7, #20
 8008786:	46bd      	mov	sp, r7
 8008788:	bc80      	pop	{r7}
 800878a:	4770      	bx	lr
 800878c:	40012c00 	.word	0x40012c00
 8008790:	40000400 	.word	0x40000400
 8008794:	40000800 	.word	0x40000800

08008798 <TIM_OC1_SetConfig>:
 8008798:	b480      	push	{r7}
 800879a:	b087      	sub	sp, #28
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6a1b      	ldr	r3, [r3, #32]
 80087a6:	f023 0201 	bic.w	r2, r3, #1
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	621a      	str	r2, [r3, #32]
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6a1b      	ldr	r3, [r3, #32]
 80087b2:	617b      	str	r3, [r7, #20]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	613b      	str	r3, [r7, #16]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	699b      	ldr	r3, [r3, #24]
 80087be:	60fb      	str	r3, [r7, #12]
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087c6:	60fb      	str	r3, [r7, #12]
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f023 0303 	bic.w	r3, r3, #3
 80087ce:	60fb      	str	r3, [r7, #12]
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	68fa      	ldr	r2, [r7, #12]
 80087d6:	4313      	orrs	r3, r2
 80087d8:	60fb      	str	r3, [r7, #12]
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	f023 0302 	bic.w	r3, r3, #2
 80087e0:	617b      	str	r3, [r7, #20]
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	689b      	ldr	r3, [r3, #8]
 80087e6:	697a      	ldr	r2, [r7, #20]
 80087e8:	4313      	orrs	r3, r2
 80087ea:	617b      	str	r3, [r7, #20]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	4a1c      	ldr	r2, [pc, #112]	; (8008860 <TIM_OC1_SetConfig+0xc8>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d10c      	bne.n	800880e <TIM_OC1_SetConfig+0x76>
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	f023 0308 	bic.w	r3, r3, #8
 80087fa:	617b      	str	r3, [r7, #20]
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	68db      	ldr	r3, [r3, #12]
 8008800:	697a      	ldr	r2, [r7, #20]
 8008802:	4313      	orrs	r3, r2
 8008804:	617b      	str	r3, [r7, #20]
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	f023 0304 	bic.w	r3, r3, #4
 800880c:	617b      	str	r3, [r7, #20]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	4a13      	ldr	r2, [pc, #76]	; (8008860 <TIM_OC1_SetConfig+0xc8>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d111      	bne.n	800883a <TIM_OC1_SetConfig+0xa2>
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800881c:	613b      	str	r3, [r7, #16]
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008824:	613b      	str	r3, [r7, #16]
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	695b      	ldr	r3, [r3, #20]
 800882a:	693a      	ldr	r2, [r7, #16]
 800882c:	4313      	orrs	r3, r2
 800882e:	613b      	str	r3, [r7, #16]
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	699b      	ldr	r3, [r3, #24]
 8008834:	693a      	ldr	r2, [r7, #16]
 8008836:	4313      	orrs	r3, r2
 8008838:	613b      	str	r3, [r7, #16]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	693a      	ldr	r2, [r7, #16]
 800883e:	605a      	str	r2, [r3, #4]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	68fa      	ldr	r2, [r7, #12]
 8008844:	619a      	str	r2, [r3, #24]
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	685a      	ldr	r2, [r3, #4]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	635a      	str	r2, [r3, #52]	; 0x34
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	697a      	ldr	r2, [r7, #20]
 8008852:	621a      	str	r2, [r3, #32]
 8008854:	bf00      	nop
 8008856:	371c      	adds	r7, #28
 8008858:	46bd      	mov	sp, r7
 800885a:	bc80      	pop	{r7}
 800885c:	4770      	bx	lr
 800885e:	bf00      	nop
 8008860:	40012c00 	.word	0x40012c00

08008864 <TIM_OC2_SetConfig>:
 8008864:	b480      	push	{r7}
 8008866:	b087      	sub	sp, #28
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6a1b      	ldr	r3, [r3, #32]
 8008872:	f023 0210 	bic.w	r2, r3, #16
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	621a      	str	r2, [r3, #32]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6a1b      	ldr	r3, [r3, #32]
 800887e:	617b      	str	r3, [r7, #20]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	613b      	str	r3, [r7, #16]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	699b      	ldr	r3, [r3, #24]
 800888a:	60fb      	str	r3, [r7, #12]
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008892:	60fb      	str	r3, [r7, #12]
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800889a:	60fb      	str	r3, [r7, #12]
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	021b      	lsls	r3, r3, #8
 80088a2:	68fa      	ldr	r2, [r7, #12]
 80088a4:	4313      	orrs	r3, r2
 80088a6:	60fb      	str	r3, [r7, #12]
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	f023 0320 	bic.w	r3, r3, #32
 80088ae:	617b      	str	r3, [r7, #20]
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	689b      	ldr	r3, [r3, #8]
 80088b4:	011b      	lsls	r3, r3, #4
 80088b6:	697a      	ldr	r2, [r7, #20]
 80088b8:	4313      	orrs	r3, r2
 80088ba:	617b      	str	r3, [r7, #20]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	4a1d      	ldr	r2, [pc, #116]	; (8008934 <TIM_OC2_SetConfig+0xd0>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d10d      	bne.n	80088e0 <TIM_OC2_SetConfig+0x7c>
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088ca:	617b      	str	r3, [r7, #20]
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	68db      	ldr	r3, [r3, #12]
 80088d0:	011b      	lsls	r3, r3, #4
 80088d2:	697a      	ldr	r2, [r7, #20]
 80088d4:	4313      	orrs	r3, r2
 80088d6:	617b      	str	r3, [r7, #20]
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088de:	617b      	str	r3, [r7, #20]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	4a14      	ldr	r2, [pc, #80]	; (8008934 <TIM_OC2_SetConfig+0xd0>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d113      	bne.n	8008910 <TIM_OC2_SetConfig+0xac>
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80088ee:	613b      	str	r3, [r7, #16]
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80088f6:	613b      	str	r3, [r7, #16]
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	695b      	ldr	r3, [r3, #20]
 80088fc:	009b      	lsls	r3, r3, #2
 80088fe:	693a      	ldr	r2, [r7, #16]
 8008900:	4313      	orrs	r3, r2
 8008902:	613b      	str	r3, [r7, #16]
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	699b      	ldr	r3, [r3, #24]
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	693a      	ldr	r2, [r7, #16]
 800890c:	4313      	orrs	r3, r2
 800890e:	613b      	str	r3, [r7, #16]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	693a      	ldr	r2, [r7, #16]
 8008914:	605a      	str	r2, [r3, #4]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	68fa      	ldr	r2, [r7, #12]
 800891a:	619a      	str	r2, [r3, #24]
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	685a      	ldr	r2, [r3, #4]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	639a      	str	r2, [r3, #56]	; 0x38
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	697a      	ldr	r2, [r7, #20]
 8008928:	621a      	str	r2, [r3, #32]
 800892a:	bf00      	nop
 800892c:	371c      	adds	r7, #28
 800892e:	46bd      	mov	sp, r7
 8008930:	bc80      	pop	{r7}
 8008932:	4770      	bx	lr
 8008934:	40012c00 	.word	0x40012c00

08008938 <TIM_OC3_SetConfig>:
 8008938:	b480      	push	{r7}
 800893a:	b087      	sub	sp, #28
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	6039      	str	r1, [r7, #0]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6a1b      	ldr	r3, [r3, #32]
 8008946:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	621a      	str	r2, [r3, #32]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6a1b      	ldr	r3, [r3, #32]
 8008952:	617b      	str	r3, [r7, #20]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	613b      	str	r3, [r7, #16]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	69db      	ldr	r3, [r3, #28]
 800895e:	60fb      	str	r3, [r7, #12]
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008966:	60fb      	str	r3, [r7, #12]
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f023 0303 	bic.w	r3, r3, #3
 800896e:	60fb      	str	r3, [r7, #12]
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	68fa      	ldr	r2, [r7, #12]
 8008976:	4313      	orrs	r3, r2
 8008978:	60fb      	str	r3, [r7, #12]
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008980:	617b      	str	r3, [r7, #20]
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	689b      	ldr	r3, [r3, #8]
 8008986:	021b      	lsls	r3, r3, #8
 8008988:	697a      	ldr	r2, [r7, #20]
 800898a:	4313      	orrs	r3, r2
 800898c:	617b      	str	r3, [r7, #20]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	4a1d      	ldr	r2, [pc, #116]	; (8008a08 <TIM_OC3_SetConfig+0xd0>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d10d      	bne.n	80089b2 <TIM_OC3_SetConfig+0x7a>
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800899c:	617b      	str	r3, [r7, #20]
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	68db      	ldr	r3, [r3, #12]
 80089a2:	021b      	lsls	r3, r3, #8
 80089a4:	697a      	ldr	r2, [r7, #20]
 80089a6:	4313      	orrs	r3, r2
 80089a8:	617b      	str	r3, [r7, #20]
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80089b0:	617b      	str	r3, [r7, #20]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	4a14      	ldr	r2, [pc, #80]	; (8008a08 <TIM_OC3_SetConfig+0xd0>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d113      	bne.n	80089e2 <TIM_OC3_SetConfig+0xaa>
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80089c0:	613b      	str	r3, [r7, #16]
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80089c8:	613b      	str	r3, [r7, #16]
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	695b      	ldr	r3, [r3, #20]
 80089ce:	011b      	lsls	r3, r3, #4
 80089d0:	693a      	ldr	r2, [r7, #16]
 80089d2:	4313      	orrs	r3, r2
 80089d4:	613b      	str	r3, [r7, #16]
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	699b      	ldr	r3, [r3, #24]
 80089da:	011b      	lsls	r3, r3, #4
 80089dc:	693a      	ldr	r2, [r7, #16]
 80089de:	4313      	orrs	r3, r2
 80089e0:	613b      	str	r3, [r7, #16]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	693a      	ldr	r2, [r7, #16]
 80089e6:	605a      	str	r2, [r3, #4]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	68fa      	ldr	r2, [r7, #12]
 80089ec:	61da      	str	r2, [r3, #28]
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	685a      	ldr	r2, [r3, #4]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	63da      	str	r2, [r3, #60]	; 0x3c
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	697a      	ldr	r2, [r7, #20]
 80089fa:	621a      	str	r2, [r3, #32]
 80089fc:	bf00      	nop
 80089fe:	371c      	adds	r7, #28
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bc80      	pop	{r7}
 8008a04:	4770      	bx	lr
 8008a06:	bf00      	nop
 8008a08:	40012c00 	.word	0x40012c00

08008a0c <TIM_OC4_SetConfig>:
 8008a0c:	b480      	push	{r7}
 8008a0e:	b087      	sub	sp, #28
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	6039      	str	r1, [r7, #0]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6a1b      	ldr	r3, [r3, #32]
 8008a1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	621a      	str	r2, [r3, #32]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6a1b      	ldr	r3, [r3, #32]
 8008a26:	613b      	str	r3, [r7, #16]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	617b      	str	r3, [r7, #20]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	69db      	ldr	r3, [r3, #28]
 8008a32:	60fb      	str	r3, [r7, #12]
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a3a:	60fb      	str	r3, [r7, #12]
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a42:	60fb      	str	r3, [r7, #12]
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	021b      	lsls	r3, r3, #8
 8008a4a:	68fa      	ldr	r2, [r7, #12]
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	60fb      	str	r3, [r7, #12]
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008a56:	613b      	str	r3, [r7, #16]
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	031b      	lsls	r3, r3, #12
 8008a5e:	693a      	ldr	r2, [r7, #16]
 8008a60:	4313      	orrs	r3, r2
 8008a62:	613b      	str	r3, [r7, #16]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	4a0f      	ldr	r2, [pc, #60]	; (8008aa4 <TIM_OC4_SetConfig+0x98>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d109      	bne.n	8008a80 <TIM_OC4_SetConfig+0x74>
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a72:	617b      	str	r3, [r7, #20]
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	695b      	ldr	r3, [r3, #20]
 8008a78:	019b      	lsls	r3, r3, #6
 8008a7a:	697a      	ldr	r2, [r7, #20]
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	617b      	str	r3, [r7, #20]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	697a      	ldr	r2, [r7, #20]
 8008a84:	605a      	str	r2, [r3, #4]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	68fa      	ldr	r2, [r7, #12]
 8008a8a:	61da      	str	r2, [r3, #28]
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	685a      	ldr	r2, [r3, #4]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	641a      	str	r2, [r3, #64]	; 0x40
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	693a      	ldr	r2, [r7, #16]
 8008a98:	621a      	str	r2, [r3, #32]
 8008a9a:	bf00      	nop
 8008a9c:	371c      	adds	r7, #28
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bc80      	pop	{r7}
 8008aa2:	4770      	bx	lr
 8008aa4:	40012c00 	.word	0x40012c00

08008aa8 <TIM_TI1_ConfigInputStage>:
 8008aa8:	b480      	push	{r7}
 8008aaa:	b087      	sub	sp, #28
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	60f8      	str	r0, [r7, #12]
 8008ab0:	60b9      	str	r1, [r7, #8]
 8008ab2:	607a      	str	r2, [r7, #4]
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	6a1b      	ldr	r3, [r3, #32]
 8008ab8:	617b      	str	r3, [r7, #20]
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	6a1b      	ldr	r3, [r3, #32]
 8008abe:	f023 0201 	bic.w	r2, r3, #1
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	621a      	str	r2, [r3, #32]
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	699b      	ldr	r3, [r3, #24]
 8008aca:	613b      	str	r3, [r7, #16]
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008ad2:	613b      	str	r3, [r7, #16]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	011b      	lsls	r3, r3, #4
 8008ad8:	693a      	ldr	r2, [r7, #16]
 8008ada:	4313      	orrs	r3, r2
 8008adc:	613b      	str	r3, [r7, #16]
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	f023 030a 	bic.w	r3, r3, #10
 8008ae4:	617b      	str	r3, [r7, #20]
 8008ae6:	697a      	ldr	r2, [r7, #20]
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	4313      	orrs	r3, r2
 8008aec:	617b      	str	r3, [r7, #20]
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	693a      	ldr	r2, [r7, #16]
 8008af2:	619a      	str	r2, [r3, #24]
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	697a      	ldr	r2, [r7, #20]
 8008af8:	621a      	str	r2, [r3, #32]
 8008afa:	bf00      	nop
 8008afc:	371c      	adds	r7, #28
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bc80      	pop	{r7}
 8008b02:	4770      	bx	lr

08008b04 <TIM_TI2_ConfigInputStage>:
 8008b04:	b480      	push	{r7}
 8008b06:	b087      	sub	sp, #28
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	60f8      	str	r0, [r7, #12]
 8008b0c:	60b9      	str	r1, [r7, #8]
 8008b0e:	607a      	str	r2, [r7, #4]
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	6a1b      	ldr	r3, [r3, #32]
 8008b14:	f023 0210 	bic.w	r2, r3, #16
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	621a      	str	r2, [r3, #32]
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	699b      	ldr	r3, [r3, #24]
 8008b20:	617b      	str	r3, [r7, #20]
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	6a1b      	ldr	r3, [r3, #32]
 8008b26:	613b      	str	r3, [r7, #16]
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008b2e:	617b      	str	r3, [r7, #20]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	031b      	lsls	r3, r3, #12
 8008b34:	697a      	ldr	r2, [r7, #20]
 8008b36:	4313      	orrs	r3, r2
 8008b38:	617b      	str	r3, [r7, #20]
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008b40:	613b      	str	r3, [r7, #16]
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	011b      	lsls	r3, r3, #4
 8008b46:	693a      	ldr	r2, [r7, #16]
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	613b      	str	r3, [r7, #16]
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	697a      	ldr	r2, [r7, #20]
 8008b50:	619a      	str	r2, [r3, #24]
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	693a      	ldr	r2, [r7, #16]
 8008b56:	621a      	str	r2, [r3, #32]
 8008b58:	bf00      	nop
 8008b5a:	371c      	adds	r7, #28
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bc80      	pop	{r7}
 8008b60:	4770      	bx	lr

08008b62 <TIM_ITRx_SetConfig>:
 8008b62:	b480      	push	{r7}
 8008b64:	b085      	sub	sp, #20
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	6078      	str	r0, [r7, #4]
 8008b6a:	6039      	str	r1, [r7, #0]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	689b      	ldr	r3, [r3, #8]
 8008b70:	60fb      	str	r3, [r7, #12]
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b78:	60fb      	str	r3, [r7, #12]
 8008b7a:	683a      	ldr	r2, [r7, #0]
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	f043 0307 	orr.w	r3, r3, #7
 8008b84:	60fb      	str	r3, [r7, #12]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	68fa      	ldr	r2, [r7, #12]
 8008b8a:	609a      	str	r2, [r3, #8]
 8008b8c:	bf00      	nop
 8008b8e:	3714      	adds	r7, #20
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bc80      	pop	{r7}
 8008b94:	4770      	bx	lr

08008b96 <TIM_ETR_SetConfig>:
 8008b96:	b480      	push	{r7}
 8008b98:	b087      	sub	sp, #28
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	60f8      	str	r0, [r7, #12]
 8008b9e:	60b9      	str	r1, [r7, #8]
 8008ba0:	607a      	str	r2, [r7, #4]
 8008ba2:	603b      	str	r3, [r7, #0]
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	689b      	ldr	r3, [r3, #8]
 8008ba8:	617b      	str	r3, [r7, #20]
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008bb0:	617b      	str	r3, [r7, #20]
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	021a      	lsls	r2, r3, #8
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	431a      	orrs	r2, r3
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	697a      	ldr	r2, [r7, #20]
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	617b      	str	r3, [r7, #20]
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	697a      	ldr	r2, [r7, #20]
 8008bc8:	609a      	str	r2, [r3, #8]
 8008bca:	bf00      	nop
 8008bcc:	371c      	adds	r7, #28
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bc80      	pop	{r7}
 8008bd2:	4770      	bx	lr

08008bd4 <TIM_CCxChannelCmd>:
 8008bd4:	b480      	push	{r7}
 8008bd6:	b087      	sub	sp, #28
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	60f8      	str	r0, [r7, #12]
 8008bdc:	60b9      	str	r1, [r7, #8]
 8008bde:	607a      	str	r2, [r7, #4]
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	f003 031f 	and.w	r3, r3, #31
 8008be6:	2201      	movs	r2, #1
 8008be8:	fa02 f303 	lsl.w	r3, r2, r3
 8008bec:	617b      	str	r3, [r7, #20]
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	6a1a      	ldr	r2, [r3, #32]
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	43db      	mvns	r3, r3
 8008bf6:	401a      	ands	r2, r3
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	621a      	str	r2, [r3, #32]
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	6a1a      	ldr	r2, [r3, #32]
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	f003 031f 	and.w	r3, r3, #31
 8008c06:	6879      	ldr	r1, [r7, #4]
 8008c08:	fa01 f303 	lsl.w	r3, r1, r3
 8008c0c:	431a      	orrs	r2, r3
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	621a      	str	r2, [r3, #32]
 8008c12:	bf00      	nop
 8008c14:	371c      	adds	r7, #28
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bc80      	pop	{r7}
 8008c1a:	4770      	bx	lr

08008c1c <HAL_TIMEx_MasterConfigSynchronization>:
 8008c1c:	b480      	push	{r7}
 8008c1e:	b085      	sub	sp, #20
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	6039      	str	r1, [r7, #0]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d101      	bne.n	8008c34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c30:	2302      	movs	r3, #2
 8008c32:	e046      	b.n	8008cc2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2201      	movs	r2, #1
 8008c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2202      	movs	r2, #2
 8008c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	685b      	ldr	r3, [r3, #4]
 8008c4a:	60fb      	str	r3, [r7, #12]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	689b      	ldr	r3, [r3, #8]
 8008c52:	60bb      	str	r3, [r7, #8]
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c5a:	60fb      	str	r3, [r7, #12]
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	68fa      	ldr	r2, [r7, #12]
 8008c62:	4313      	orrs	r3, r2
 8008c64:	60fb      	str	r3, [r7, #12]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	68fa      	ldr	r2, [r7, #12]
 8008c6c:	605a      	str	r2, [r3, #4]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4a16      	ldr	r2, [pc, #88]	; (8008ccc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d00e      	beq.n	8008c96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c80:	d009      	beq.n	8008c96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a12      	ldr	r2, [pc, #72]	; (8008cd0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d004      	beq.n	8008c96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a10      	ldr	r2, [pc, #64]	; (8008cd4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d10c      	bne.n	8008cb0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c9c:	60bb      	str	r3, [r7, #8]
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	68ba      	ldr	r2, [r7, #8]
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	60bb      	str	r3, [r7, #8]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	68ba      	ldr	r2, [r7, #8]
 8008cae:	609a      	str	r2, [r3, #8]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3714      	adds	r7, #20
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bc80      	pop	{r7}
 8008cca:	4770      	bx	lr
 8008ccc:	40012c00 	.word	0x40012c00
 8008cd0:	40000400 	.word	0x40000400
 8008cd4:	40000800 	.word	0x40000800

08008cd8 <HAL_TIMEx_CommutCallback>:
 8008cd8:	b480      	push	{r7}
 8008cda:	b083      	sub	sp, #12
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	bf00      	nop
 8008ce2:	370c      	adds	r7, #12
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bc80      	pop	{r7}
 8008ce8:	4770      	bx	lr

08008cea <HAL_TIMEx_BreakCallback>:
 8008cea:	b480      	push	{r7}
 8008cec:	b083      	sub	sp, #12
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
 8008cf2:	bf00      	nop
 8008cf4:	370c      	adds	r7, #12
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bc80      	pop	{r7}
 8008cfa:	4770      	bx	lr

08008cfc <malloc>:
 8008cfc:	4b02      	ldr	r3, [pc, #8]	; (8008d08 <malloc+0xc>)
 8008cfe:	4601      	mov	r1, r0
 8008d00:	6818      	ldr	r0, [r3, #0]
 8008d02:	f000 b823 	b.w	8008d4c <_malloc_r>
 8008d06:	bf00      	nop
 8008d08:	200004d4 	.word	0x200004d4

08008d0c <sbrk_aligned>:
 8008d0c:	b570      	push	{r4, r5, r6, lr}
 8008d0e:	4e0e      	ldr	r6, [pc, #56]	; (8008d48 <sbrk_aligned+0x3c>)
 8008d10:	460c      	mov	r4, r1
 8008d12:	6831      	ldr	r1, [r6, #0]
 8008d14:	4605      	mov	r5, r0
 8008d16:	b911      	cbnz	r1, 8008d1e <sbrk_aligned+0x12>
 8008d18:	f000 f8ac 	bl	8008e74 <_sbrk_r>
 8008d1c:	6030      	str	r0, [r6, #0]
 8008d1e:	4621      	mov	r1, r4
 8008d20:	4628      	mov	r0, r5
 8008d22:	f000 f8a7 	bl	8008e74 <_sbrk_r>
 8008d26:	1c43      	adds	r3, r0, #1
 8008d28:	d00a      	beq.n	8008d40 <sbrk_aligned+0x34>
 8008d2a:	1cc4      	adds	r4, r0, #3
 8008d2c:	f024 0403 	bic.w	r4, r4, #3
 8008d30:	42a0      	cmp	r0, r4
 8008d32:	d007      	beq.n	8008d44 <sbrk_aligned+0x38>
 8008d34:	1a21      	subs	r1, r4, r0
 8008d36:	4628      	mov	r0, r5
 8008d38:	f000 f89c 	bl	8008e74 <_sbrk_r>
 8008d3c:	3001      	adds	r0, #1
 8008d3e:	d101      	bne.n	8008d44 <sbrk_aligned+0x38>
 8008d40:	f04f 34ff 	mov.w	r4, #4294967295
 8008d44:	4620      	mov	r0, r4
 8008d46:	bd70      	pop	{r4, r5, r6, pc}
 8008d48:	20000a3c 	.word	0x20000a3c

08008d4c <_malloc_r>:
 8008d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d50:	1ccd      	adds	r5, r1, #3
 8008d52:	f025 0503 	bic.w	r5, r5, #3
 8008d56:	3508      	adds	r5, #8
 8008d58:	2d0c      	cmp	r5, #12
 8008d5a:	bf38      	it	cc
 8008d5c:	250c      	movcc	r5, #12
 8008d5e:	2d00      	cmp	r5, #0
 8008d60:	4607      	mov	r7, r0
 8008d62:	db01      	blt.n	8008d68 <_malloc_r+0x1c>
 8008d64:	42a9      	cmp	r1, r5
 8008d66:	d905      	bls.n	8008d74 <_malloc_r+0x28>
 8008d68:	230c      	movs	r3, #12
 8008d6a:	2600      	movs	r6, #0
 8008d6c:	603b      	str	r3, [r7, #0]
 8008d6e:	4630      	mov	r0, r6
 8008d70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d74:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008e48 <_malloc_r+0xfc>
 8008d78:	f000 f868 	bl	8008e4c <__malloc_lock>
 8008d7c:	f8d8 3000 	ldr.w	r3, [r8]
 8008d80:	461c      	mov	r4, r3
 8008d82:	bb5c      	cbnz	r4, 8008ddc <_malloc_r+0x90>
 8008d84:	4629      	mov	r1, r5
 8008d86:	4638      	mov	r0, r7
 8008d88:	f7ff ffc0 	bl	8008d0c <sbrk_aligned>
 8008d8c:	1c43      	adds	r3, r0, #1
 8008d8e:	4604      	mov	r4, r0
 8008d90:	d155      	bne.n	8008e3e <_malloc_r+0xf2>
 8008d92:	f8d8 4000 	ldr.w	r4, [r8]
 8008d96:	4626      	mov	r6, r4
 8008d98:	2e00      	cmp	r6, #0
 8008d9a:	d145      	bne.n	8008e28 <_malloc_r+0xdc>
 8008d9c:	2c00      	cmp	r4, #0
 8008d9e:	d048      	beq.n	8008e32 <_malloc_r+0xe6>
 8008da0:	6823      	ldr	r3, [r4, #0]
 8008da2:	4631      	mov	r1, r6
 8008da4:	4638      	mov	r0, r7
 8008da6:	eb04 0903 	add.w	r9, r4, r3
 8008daa:	f000 f863 	bl	8008e74 <_sbrk_r>
 8008dae:	4581      	cmp	r9, r0
 8008db0:	d13f      	bne.n	8008e32 <_malloc_r+0xe6>
 8008db2:	6821      	ldr	r1, [r4, #0]
 8008db4:	4638      	mov	r0, r7
 8008db6:	1a6d      	subs	r5, r5, r1
 8008db8:	4629      	mov	r1, r5
 8008dba:	f7ff ffa7 	bl	8008d0c <sbrk_aligned>
 8008dbe:	3001      	adds	r0, #1
 8008dc0:	d037      	beq.n	8008e32 <_malloc_r+0xe6>
 8008dc2:	6823      	ldr	r3, [r4, #0]
 8008dc4:	442b      	add	r3, r5
 8008dc6:	6023      	str	r3, [r4, #0]
 8008dc8:	f8d8 3000 	ldr.w	r3, [r8]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d038      	beq.n	8008e42 <_malloc_r+0xf6>
 8008dd0:	685a      	ldr	r2, [r3, #4]
 8008dd2:	42a2      	cmp	r2, r4
 8008dd4:	d12b      	bne.n	8008e2e <_malloc_r+0xe2>
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	605a      	str	r2, [r3, #4]
 8008dda:	e00f      	b.n	8008dfc <_malloc_r+0xb0>
 8008ddc:	6822      	ldr	r2, [r4, #0]
 8008dde:	1b52      	subs	r2, r2, r5
 8008de0:	d41f      	bmi.n	8008e22 <_malloc_r+0xd6>
 8008de2:	2a0b      	cmp	r2, #11
 8008de4:	d917      	bls.n	8008e16 <_malloc_r+0xca>
 8008de6:	1961      	adds	r1, r4, r5
 8008de8:	42a3      	cmp	r3, r4
 8008dea:	6025      	str	r5, [r4, #0]
 8008dec:	bf18      	it	ne
 8008dee:	6059      	strne	r1, [r3, #4]
 8008df0:	6863      	ldr	r3, [r4, #4]
 8008df2:	bf08      	it	eq
 8008df4:	f8c8 1000 	streq.w	r1, [r8]
 8008df8:	5162      	str	r2, [r4, r5]
 8008dfa:	604b      	str	r3, [r1, #4]
 8008dfc:	4638      	mov	r0, r7
 8008dfe:	f104 060b 	add.w	r6, r4, #11
 8008e02:	f000 f829 	bl	8008e58 <__malloc_unlock>
 8008e06:	f026 0607 	bic.w	r6, r6, #7
 8008e0a:	1d23      	adds	r3, r4, #4
 8008e0c:	1af2      	subs	r2, r6, r3
 8008e0e:	d0ae      	beq.n	8008d6e <_malloc_r+0x22>
 8008e10:	1b9b      	subs	r3, r3, r6
 8008e12:	50a3      	str	r3, [r4, r2]
 8008e14:	e7ab      	b.n	8008d6e <_malloc_r+0x22>
 8008e16:	42a3      	cmp	r3, r4
 8008e18:	6862      	ldr	r2, [r4, #4]
 8008e1a:	d1dd      	bne.n	8008dd8 <_malloc_r+0x8c>
 8008e1c:	f8c8 2000 	str.w	r2, [r8]
 8008e20:	e7ec      	b.n	8008dfc <_malloc_r+0xb0>
 8008e22:	4623      	mov	r3, r4
 8008e24:	6864      	ldr	r4, [r4, #4]
 8008e26:	e7ac      	b.n	8008d82 <_malloc_r+0x36>
 8008e28:	4634      	mov	r4, r6
 8008e2a:	6876      	ldr	r6, [r6, #4]
 8008e2c:	e7b4      	b.n	8008d98 <_malloc_r+0x4c>
 8008e2e:	4613      	mov	r3, r2
 8008e30:	e7cc      	b.n	8008dcc <_malloc_r+0x80>
 8008e32:	230c      	movs	r3, #12
 8008e34:	4638      	mov	r0, r7
 8008e36:	603b      	str	r3, [r7, #0]
 8008e38:	f000 f80e 	bl	8008e58 <__malloc_unlock>
 8008e3c:	e797      	b.n	8008d6e <_malloc_r+0x22>
 8008e3e:	6025      	str	r5, [r4, #0]
 8008e40:	e7dc      	b.n	8008dfc <_malloc_r+0xb0>
 8008e42:	605b      	str	r3, [r3, #4]
 8008e44:	deff      	udf	#255	; 0xff
 8008e46:	bf00      	nop
 8008e48:	20000a38 	.word	0x20000a38

08008e4c <__malloc_lock>:
 8008e4c:	4801      	ldr	r0, [pc, #4]	; (8008e54 <__malloc_lock+0x8>)
 8008e4e:	f000 b84b 	b.w	8008ee8 <__retarget_lock_acquire_recursive>
 8008e52:	bf00      	nop
 8008e54:	20000b7c 	.word	0x20000b7c

08008e58 <__malloc_unlock>:
 8008e58:	4801      	ldr	r0, [pc, #4]	; (8008e60 <__malloc_unlock+0x8>)
 8008e5a:	f000 b846 	b.w	8008eea <__retarget_lock_release_recursive>
 8008e5e:	bf00      	nop
 8008e60:	20000b7c 	.word	0x20000b7c

08008e64 <memset>:
 8008e64:	4603      	mov	r3, r0
 8008e66:	4402      	add	r2, r0
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d100      	bne.n	8008e6e <memset+0xa>
 8008e6c:	4770      	bx	lr
 8008e6e:	f803 1b01 	strb.w	r1, [r3], #1
 8008e72:	e7f9      	b.n	8008e68 <memset+0x4>

08008e74 <_sbrk_r>:
 8008e74:	b538      	push	{r3, r4, r5, lr}
 8008e76:	2300      	movs	r3, #0
 8008e78:	4d05      	ldr	r5, [pc, #20]	; (8008e90 <_sbrk_r+0x1c>)
 8008e7a:	4604      	mov	r4, r0
 8008e7c:	4608      	mov	r0, r1
 8008e7e:	602b      	str	r3, [r5, #0]
 8008e80:	f7fc f80a 	bl	8004e98 <_sbrk>
 8008e84:	1c43      	adds	r3, r0, #1
 8008e86:	d102      	bne.n	8008e8e <_sbrk_r+0x1a>
 8008e88:	682b      	ldr	r3, [r5, #0]
 8008e8a:	b103      	cbz	r3, 8008e8e <_sbrk_r+0x1a>
 8008e8c:	6023      	str	r3, [r4, #0]
 8008e8e:	bd38      	pop	{r3, r4, r5, pc}
 8008e90:	20000b78 	.word	0x20000b78

08008e94 <__errno>:
 8008e94:	4b01      	ldr	r3, [pc, #4]	; (8008e9c <__errno+0x8>)
 8008e96:	6818      	ldr	r0, [r3, #0]
 8008e98:	4770      	bx	lr
 8008e9a:	bf00      	nop
 8008e9c:	200004d4 	.word	0x200004d4

08008ea0 <__libc_init_array>:
 8008ea0:	b570      	push	{r4, r5, r6, lr}
 8008ea2:	2600      	movs	r6, #0
 8008ea4:	4d0c      	ldr	r5, [pc, #48]	; (8008ed8 <__libc_init_array+0x38>)
 8008ea6:	4c0d      	ldr	r4, [pc, #52]	; (8008edc <__libc_init_array+0x3c>)
 8008ea8:	1b64      	subs	r4, r4, r5
 8008eaa:	10a4      	asrs	r4, r4, #2
 8008eac:	42a6      	cmp	r6, r4
 8008eae:	d109      	bne.n	8008ec4 <__libc_init_array+0x24>
 8008eb0:	f000 f832 	bl	8008f18 <_init>
 8008eb4:	2600      	movs	r6, #0
 8008eb6:	4d0a      	ldr	r5, [pc, #40]	; (8008ee0 <__libc_init_array+0x40>)
 8008eb8:	4c0a      	ldr	r4, [pc, #40]	; (8008ee4 <__libc_init_array+0x44>)
 8008eba:	1b64      	subs	r4, r4, r5
 8008ebc:	10a4      	asrs	r4, r4, #2
 8008ebe:	42a6      	cmp	r6, r4
 8008ec0:	d105      	bne.n	8008ece <__libc_init_array+0x2e>
 8008ec2:	bd70      	pop	{r4, r5, r6, pc}
 8008ec4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ec8:	4798      	blx	r3
 8008eca:	3601      	adds	r6, #1
 8008ecc:	e7ee      	b.n	8008eac <__libc_init_array+0xc>
 8008ece:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ed2:	4798      	blx	r3
 8008ed4:	3601      	adds	r6, #1
 8008ed6:	e7f2      	b.n	8008ebe <__libc_init_array+0x1e>
 8008ed8:	08009064 	.word	0x08009064
 8008edc:	08009064 	.word	0x08009064
 8008ee0:	08009064 	.word	0x08009064
 8008ee4:	08009068 	.word	0x08009068

08008ee8 <__retarget_lock_acquire_recursive>:
 8008ee8:	4770      	bx	lr

08008eea <__retarget_lock_release_recursive>:
 8008eea:	4770      	bx	lr

08008eec <strcpy>:
 8008eec:	4603      	mov	r3, r0
 8008eee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ef2:	f803 2b01 	strb.w	r2, [r3], #1
 8008ef6:	2a00      	cmp	r2, #0
 8008ef8:	d1f9      	bne.n	8008eee <strcpy+0x2>
 8008efa:	4770      	bx	lr

08008efc <memcpy>:
 8008efc:	440a      	add	r2, r1
 8008efe:	4291      	cmp	r1, r2
 8008f00:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f04:	d100      	bne.n	8008f08 <memcpy+0xc>
 8008f06:	4770      	bx	lr
 8008f08:	b510      	push	{r4, lr}
 8008f0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f0e:	4291      	cmp	r1, r2
 8008f10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f14:	d1f9      	bne.n	8008f0a <memcpy+0xe>
 8008f16:	bd10      	pop	{r4, pc}

08008f18 <_init>:
 8008f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f1a:	bf00      	nop
 8008f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f1e:	bc08      	pop	{r3}
 8008f20:	469e      	mov	lr, r3
 8008f22:	4770      	bx	lr

08008f24 <_fini>:
 8008f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f26:	bf00      	nop
 8008f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f2a:	bc08      	pop	{r3}
 8008f2c:	469e      	mov	lr, r3
 8008f2e:	4770      	bx	lr
