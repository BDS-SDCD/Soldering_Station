
Station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b03c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  0800b14c  0800b14c  0001b14c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b28c  0800b28c  00020298  2**0
                  CONTENTS
  4 .ARM          00000000  0800b28c  0800b28c  00020298  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b28c  0800b28c  00020298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b28c  0800b28c  0001b28c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b290  0800b290  0001b290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000298  20000000  0800b294  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000630  20000298  0800b52c  00020298  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200008c8  0800b52c  000208c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020298  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202c1  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016bf1  00000000  00000000  00020304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c14  00000000  00000000  00036ef5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001680  00000000  00000000  0003ab10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001163  00000000  00000000  0003c190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a9bd  00000000  00000000  0003d2f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b124  00000000  00000000  00057cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092338  00000000  00000000  00072dd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000635c  00000000  00000000  0010510c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0010b468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000298 	.word	0x20000298
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b134 	.word	0x0800b134

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000029c 	.word	0x2000029c
 800014c:	0800b134 	.word	0x0800b134

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_dmul>:
 8000160:	b570      	push	{r4, r5, r6, lr}
 8000162:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000166:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800016a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016e:	bf1d      	ittte	ne
 8000170:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000174:	ea94 0f0c 	teqne	r4, ip
 8000178:	ea95 0f0c 	teqne	r5, ip
 800017c:	f000 f8de 	bleq	800033c <__aeabi_dmul+0x1dc>
 8000180:	442c      	add	r4, r5
 8000182:	ea81 0603 	eor.w	r6, r1, r3
 8000186:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800018a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000192:	bf18      	it	ne
 8000194:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000198:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800019c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001a0:	d038      	beq.n	8000214 <__aeabi_dmul+0xb4>
 80001a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a6:	f04f 0500 	mov.w	r5, #0
 80001aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b6:	f04f 0600 	mov.w	r6, #0
 80001ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001be:	f09c 0f00 	teq	ip, #0
 80001c2:	bf18      	it	ne
 80001c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001d4:	d204      	bcs.n	80001e0 <__aeabi_dmul+0x80>
 80001d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001da:	416d      	adcs	r5, r5
 80001dc:	eb46 0606 	adc.w	r6, r6, r6
 80001e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001f8:	bf88      	it	hi
 80001fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001fe:	d81e      	bhi.n	800023e <__aeabi_dmul+0xde>
 8000200:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000204:	bf08      	it	eq
 8000206:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800020a:	f150 0000 	adcs.w	r0, r0, #0
 800020e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000212:	bd70      	pop	{r4, r5, r6, pc}
 8000214:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000218:	ea46 0101 	orr.w	r1, r6, r1
 800021c:	ea40 0002 	orr.w	r0, r0, r2
 8000220:	ea81 0103 	eor.w	r1, r1, r3
 8000224:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000228:	bfc2      	ittt	gt
 800022a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000232:	bd70      	popgt	{r4, r5, r6, pc}
 8000234:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000238:	f04f 0e00 	mov.w	lr, #0
 800023c:	3c01      	subs	r4, #1
 800023e:	f300 80ab 	bgt.w	8000398 <__aeabi_dmul+0x238>
 8000242:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000246:	bfde      	ittt	le
 8000248:	2000      	movle	r0, #0
 800024a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800024e:	bd70      	pople	{r4, r5, r6, pc}
 8000250:	f1c4 0400 	rsb	r4, r4, #0
 8000254:	3c20      	subs	r4, #32
 8000256:	da35      	bge.n	80002c4 <__aeabi_dmul+0x164>
 8000258:	340c      	adds	r4, #12
 800025a:	dc1b      	bgt.n	8000294 <__aeabi_dmul+0x134>
 800025c:	f104 0414 	add.w	r4, r4, #20
 8000260:	f1c4 0520 	rsb	r5, r4, #32
 8000264:	fa00 f305 	lsl.w	r3, r0, r5
 8000268:	fa20 f004 	lsr.w	r0, r0, r4
 800026c:	fa01 f205 	lsl.w	r2, r1, r5
 8000270:	ea40 0002 	orr.w	r0, r0, r2
 8000274:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000278:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800027c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000280:	fa21 f604 	lsr.w	r6, r1, r4
 8000284:	eb42 0106 	adc.w	r1, r2, r6
 8000288:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800028c:	bf08      	it	eq
 800028e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f1c4 040c 	rsb	r4, r4, #12
 8000298:	f1c4 0520 	rsb	r5, r4, #32
 800029c:	fa00 f304 	lsl.w	r3, r0, r4
 80002a0:	fa20 f005 	lsr.w	r0, r0, r5
 80002a4:	fa01 f204 	lsl.w	r2, r1, r4
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002bc:	bf08      	it	eq
 80002be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f1c4 0520 	rsb	r5, r4, #32
 80002c8:	fa00 f205 	lsl.w	r2, r0, r5
 80002cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002d0:	fa20 f304 	lsr.w	r3, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea43 0302 	orr.w	r3, r3, r2
 80002dc:	fa21 f004 	lsr.w	r0, r1, r4
 80002e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	fa21 f204 	lsr.w	r2, r1, r4
 80002e8:	ea20 0002 	bic.w	r0, r0, r2
 80002ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f094 0f00 	teq	r4, #0
 8000300:	d10f      	bne.n	8000322 <__aeabi_dmul+0x1c2>
 8000302:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000306:	0040      	lsls	r0, r0, #1
 8000308:	eb41 0101 	adc.w	r1, r1, r1
 800030c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000310:	bf08      	it	eq
 8000312:	3c01      	subeq	r4, #1
 8000314:	d0f7      	beq.n	8000306 <__aeabi_dmul+0x1a6>
 8000316:	ea41 0106 	orr.w	r1, r1, r6
 800031a:	f095 0f00 	teq	r5, #0
 800031e:	bf18      	it	ne
 8000320:	4770      	bxne	lr
 8000322:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000326:	0052      	lsls	r2, r2, #1
 8000328:	eb43 0303 	adc.w	r3, r3, r3
 800032c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000330:	bf08      	it	eq
 8000332:	3d01      	subeq	r5, #1
 8000334:	d0f7      	beq.n	8000326 <__aeabi_dmul+0x1c6>
 8000336:	ea43 0306 	orr.w	r3, r3, r6
 800033a:	4770      	bx	lr
 800033c:	ea94 0f0c 	teq	r4, ip
 8000340:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000344:	bf18      	it	ne
 8000346:	ea95 0f0c 	teqne	r5, ip
 800034a:	d00c      	beq.n	8000366 <__aeabi_dmul+0x206>
 800034c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000350:	bf18      	it	ne
 8000352:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000356:	d1d1      	bne.n	80002fc <__aeabi_dmul+0x19c>
 8000358:	ea81 0103 	eor.w	r1, r1, r3
 800035c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000360:	f04f 0000 	mov.w	r0, #0
 8000364:	bd70      	pop	{r4, r5, r6, pc}
 8000366:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800036a:	bf06      	itte	eq
 800036c:	4610      	moveq	r0, r2
 800036e:	4619      	moveq	r1, r3
 8000370:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000374:	d019      	beq.n	80003aa <__aeabi_dmul+0x24a>
 8000376:	ea94 0f0c 	teq	r4, ip
 800037a:	d102      	bne.n	8000382 <__aeabi_dmul+0x222>
 800037c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000380:	d113      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000382:	ea95 0f0c 	teq	r5, ip
 8000386:	d105      	bne.n	8000394 <__aeabi_dmul+0x234>
 8000388:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800038c:	bf1c      	itt	ne
 800038e:	4610      	movne	r0, r2
 8000390:	4619      	movne	r1, r3
 8000392:	d10a      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000394:	ea81 0103 	eor.w	r1, r1, r3
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd70      	pop	{r4, r5, r6, pc}
 80003aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003b2:	bd70      	pop	{r4, r5, r6, pc}

080003b4 <__aeabi_drsub>:
 80003b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b8:	e002      	b.n	80003c0 <__adddf3>
 80003ba:	bf00      	nop

080003bc <__aeabi_dsub>:
 80003bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003c0 <__adddf3>:
 80003c0:	b530      	push	{r4, r5, lr}
 80003c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ca:	ea94 0f05 	teq	r4, r5
 80003ce:	bf08      	it	eq
 80003d0:	ea90 0f02 	teqeq	r0, r2
 80003d4:	bf1f      	itttt	ne
 80003d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e6:	f000 80e2 	beq.w	80005ae <__adddf3+0x1ee>
 80003ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003f2:	bfb8      	it	lt
 80003f4:	426d      	neglt	r5, r5
 80003f6:	dd0c      	ble.n	8000412 <__adddf3+0x52>
 80003f8:	442c      	add	r4, r5
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	ea82 0000 	eor.w	r0, r2, r0
 8000406:	ea83 0101 	eor.w	r1, r3, r1
 800040a:	ea80 0202 	eor.w	r2, r0, r2
 800040e:	ea81 0303 	eor.w	r3, r1, r3
 8000412:	2d36      	cmp	r5, #54	; 0x36
 8000414:	bf88      	it	hi
 8000416:	bd30      	pophi	{r4, r5, pc}
 8000418:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800041c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000420:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000424:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x70>
 800042a:	4240      	negs	r0, r0
 800042c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000430:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000434:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000438:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800043c:	d002      	beq.n	8000444 <__adddf3+0x84>
 800043e:	4252      	negs	r2, r2
 8000440:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000444:	ea94 0f05 	teq	r4, r5
 8000448:	f000 80a7 	beq.w	800059a <__adddf3+0x1da>
 800044c:	f1a4 0401 	sub.w	r4, r4, #1
 8000450:	f1d5 0e20 	rsbs	lr, r5, #32
 8000454:	db0d      	blt.n	8000472 <__adddf3+0xb2>
 8000456:	fa02 fc0e 	lsl.w	ip, r2, lr
 800045a:	fa22 f205 	lsr.w	r2, r2, r5
 800045e:	1880      	adds	r0, r0, r2
 8000460:	f141 0100 	adc.w	r1, r1, #0
 8000464:	fa03 f20e 	lsl.w	r2, r3, lr
 8000468:	1880      	adds	r0, r0, r2
 800046a:	fa43 f305 	asr.w	r3, r3, r5
 800046e:	4159      	adcs	r1, r3
 8000470:	e00e      	b.n	8000490 <__adddf3+0xd0>
 8000472:	f1a5 0520 	sub.w	r5, r5, #32
 8000476:	f10e 0e20 	add.w	lr, lr, #32
 800047a:	2a01      	cmp	r2, #1
 800047c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000480:	bf28      	it	cs
 8000482:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000486:	fa43 f305 	asr.w	r3, r3, r5
 800048a:	18c0      	adds	r0, r0, r3
 800048c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	d507      	bpl.n	80004a6 <__adddf3+0xe6>
 8000496:	f04f 0e00 	mov.w	lr, #0
 800049a:	f1dc 0c00 	rsbs	ip, ip, #0
 800049e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004aa:	d31b      	bcc.n	80004e4 <__adddf3+0x124>
 80004ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004b0:	d30c      	bcc.n	80004cc <__adddf3+0x10c>
 80004b2:	0849      	lsrs	r1, r1, #1
 80004b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004bc:	f104 0401 	add.w	r4, r4, #1
 80004c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c8:	f080 809a 	bcs.w	8000600 <__adddf3+0x240>
 80004cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004d0:	bf08      	it	eq
 80004d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d6:	f150 0000 	adcs.w	r0, r0, #0
 80004da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004de:	ea41 0105 	orr.w	r1, r1, r5
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e8:	4140      	adcs	r0, r0
 80004ea:	eb41 0101 	adc.w	r1, r1, r1
 80004ee:	3c01      	subs	r4, #1
 80004f0:	bf28      	it	cs
 80004f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f6:	d2e9      	bcs.n	80004cc <__adddf3+0x10c>
 80004f8:	f091 0f00 	teq	r1, #0
 80004fc:	bf04      	itt	eq
 80004fe:	4601      	moveq	r1, r0
 8000500:	2000      	moveq	r0, #0
 8000502:	fab1 f381 	clz	r3, r1
 8000506:	bf08      	it	eq
 8000508:	3320      	addeq	r3, #32
 800050a:	f1a3 030b 	sub.w	r3, r3, #11
 800050e:	f1b3 0220 	subs.w	r2, r3, #32
 8000512:	da0c      	bge.n	800052e <__adddf3+0x16e>
 8000514:	320c      	adds	r2, #12
 8000516:	dd08      	ble.n	800052a <__adddf3+0x16a>
 8000518:	f102 0c14 	add.w	ip, r2, #20
 800051c:	f1c2 020c 	rsb	r2, r2, #12
 8000520:	fa01 f00c 	lsl.w	r0, r1, ip
 8000524:	fa21 f102 	lsr.w	r1, r1, r2
 8000528:	e00c      	b.n	8000544 <__adddf3+0x184>
 800052a:	f102 0214 	add.w	r2, r2, #20
 800052e:	bfd8      	it	le
 8000530:	f1c2 0c20 	rsble	ip, r2, #32
 8000534:	fa01 f102 	lsl.w	r1, r1, r2
 8000538:	fa20 fc0c 	lsr.w	ip, r0, ip
 800053c:	bfdc      	itt	le
 800053e:	ea41 010c 	orrle.w	r1, r1, ip
 8000542:	4090      	lslle	r0, r2
 8000544:	1ae4      	subs	r4, r4, r3
 8000546:	bfa2      	ittt	ge
 8000548:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800054c:	4329      	orrge	r1, r5
 800054e:	bd30      	popge	{r4, r5, pc}
 8000550:	ea6f 0404 	mvn.w	r4, r4
 8000554:	3c1f      	subs	r4, #31
 8000556:	da1c      	bge.n	8000592 <__adddf3+0x1d2>
 8000558:	340c      	adds	r4, #12
 800055a:	dc0e      	bgt.n	800057a <__adddf3+0x1ba>
 800055c:	f104 0414 	add.w	r4, r4, #20
 8000560:	f1c4 0220 	rsb	r2, r4, #32
 8000564:	fa20 f004 	lsr.w	r0, r0, r4
 8000568:	fa01 f302 	lsl.w	r3, r1, r2
 800056c:	ea40 0003 	orr.w	r0, r0, r3
 8000570:	fa21 f304 	lsr.w	r3, r1, r4
 8000574:	ea45 0103 	orr.w	r1, r5, r3
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	f1c4 040c 	rsb	r4, r4, #12
 800057e:	f1c4 0220 	rsb	r2, r4, #32
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 f304 	lsl.w	r3, r1, r4
 800058a:	ea40 0003 	orr.w	r0, r0, r3
 800058e:	4629      	mov	r1, r5
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	fa21 f004 	lsr.w	r0, r1, r4
 8000596:	4629      	mov	r1, r5
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	f094 0f00 	teq	r4, #0
 800059e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005a2:	bf06      	itte	eq
 80005a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a8:	3401      	addeq	r4, #1
 80005aa:	3d01      	subne	r5, #1
 80005ac:	e74e      	b.n	800044c <__adddf3+0x8c>
 80005ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005b2:	bf18      	it	ne
 80005b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b8:	d029      	beq.n	800060e <__adddf3+0x24e>
 80005ba:	ea94 0f05 	teq	r4, r5
 80005be:	bf08      	it	eq
 80005c0:	ea90 0f02 	teqeq	r0, r2
 80005c4:	d005      	beq.n	80005d2 <__adddf3+0x212>
 80005c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ca:	bf04      	itt	eq
 80005cc:	4619      	moveq	r1, r3
 80005ce:	4610      	moveq	r0, r2
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	ea91 0f03 	teq	r1, r3
 80005d6:	bf1e      	ittt	ne
 80005d8:	2100      	movne	r1, #0
 80005da:	2000      	movne	r0, #0
 80005dc:	bd30      	popne	{r4, r5, pc}
 80005de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005e2:	d105      	bne.n	80005f0 <__adddf3+0x230>
 80005e4:	0040      	lsls	r0, r0, #1
 80005e6:	4149      	adcs	r1, r1
 80005e8:	bf28      	it	cs
 80005ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd30      	pop	{r4, r5, pc}
 80005f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f4:	bf3c      	itt	cc
 80005f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005fa:	bd30      	popcc	{r4, r5, pc}
 80005fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000600:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000604:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000608:	f04f 0000 	mov.w	r0, #0
 800060c:	bd30      	pop	{r4, r5, pc}
 800060e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000612:	bf1a      	itte	ne
 8000614:	4619      	movne	r1, r3
 8000616:	4610      	movne	r0, r2
 8000618:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800061c:	bf1c      	itt	ne
 800061e:	460b      	movne	r3, r1
 8000620:	4602      	movne	r2, r0
 8000622:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000626:	bf06      	itte	eq
 8000628:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800062c:	ea91 0f03 	teqeq	r1, r3
 8000630:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	bf00      	nop

08000638 <__aeabi_ui2d>:
 8000638:	f090 0f00 	teq	r0, #0
 800063c:	bf04      	itt	eq
 800063e:	2100      	moveq	r1, #0
 8000640:	4770      	bxeq	lr
 8000642:	b530      	push	{r4, r5, lr}
 8000644:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000648:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064c:	f04f 0500 	mov.w	r5, #0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e750      	b.n	80004f8 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_i2d>:
 8000658:	f090 0f00 	teq	r0, #0
 800065c:	bf04      	itt	eq
 800065e:	2100      	moveq	r1, #0
 8000660:	4770      	bxeq	lr
 8000662:	b530      	push	{r4, r5, lr}
 8000664:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000668:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800066c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000670:	bf48      	it	mi
 8000672:	4240      	negmi	r0, r0
 8000674:	f04f 0100 	mov.w	r1, #0
 8000678:	e73e      	b.n	80004f8 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_f2d>:
 800067c:	0042      	lsls	r2, r0, #1
 800067e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000682:	ea4f 0131 	mov.w	r1, r1, rrx
 8000686:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800068a:	bf1f      	itttt	ne
 800068c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000690:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000694:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000698:	4770      	bxne	lr
 800069a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069e:	bf08      	it	eq
 80006a0:	4770      	bxeq	lr
 80006a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a6:	bf04      	itt	eq
 80006a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006ac:	4770      	bxeq	lr
 80006ae:	b530      	push	{r4, r5, lr}
 80006b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	e71c      	b.n	80004f8 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_ul2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f04f 0500 	mov.w	r5, #0
 80006ce:	e00a      	b.n	80006e6 <__aeabi_l2d+0x16>

080006d0 <__aeabi_l2d>:
 80006d0:	ea50 0201 	orrs.w	r2, r0, r1
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	b530      	push	{r4, r5, lr}
 80006da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006de:	d502      	bpl.n	80006e6 <__aeabi_l2d+0x16>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006f2:	f43f aed8 	beq.w	80004a6 <__adddf3+0xe6>
 80006f6:	f04f 0203 	mov.w	r2, #3
 80006fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fe:	bf18      	it	ne
 8000700:	3203      	addne	r2, #3
 8000702:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000706:	bf18      	it	ne
 8000708:	3203      	addne	r2, #3
 800070a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070e:	f1c2 0320 	rsb	r3, r2, #32
 8000712:	fa00 fc03 	lsl.w	ip, r0, r3
 8000716:	fa20 f002 	lsr.w	r0, r0, r2
 800071a:	fa01 fe03 	lsl.w	lr, r1, r3
 800071e:	ea40 000e 	orr.w	r0, r0, lr
 8000722:	fa21 f102 	lsr.w	r1, r1, r2
 8000726:	4414      	add	r4, r2
 8000728:	e6bd      	b.n	80004a6 <__adddf3+0xe6>
 800072a:	bf00      	nop

0800072c <__aeabi_d2uiz>:
 800072c:	004a      	lsls	r2, r1, #1
 800072e:	d211      	bcs.n	8000754 <__aeabi_d2uiz+0x28>
 8000730:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000734:	d211      	bcs.n	800075a <__aeabi_d2uiz+0x2e>
 8000736:	d50d      	bpl.n	8000754 <__aeabi_d2uiz+0x28>
 8000738:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800073c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000740:	d40e      	bmi.n	8000760 <__aeabi_d2uiz+0x34>
 8000742:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000746:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800074a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800074e:	fa23 f002 	lsr.w	r0, r3, r2
 8000752:	4770      	bx	lr
 8000754:	f04f 0000 	mov.w	r0, #0
 8000758:	4770      	bx	lr
 800075a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800075e:	d102      	bne.n	8000766 <__aeabi_d2uiz+0x3a>
 8000760:	f04f 30ff 	mov.w	r0, #4294967295
 8000764:	4770      	bx	lr
 8000766:	f04f 0000 	mov.w	r0, #0
 800076a:	4770      	bx	lr

0800076c <__aeabi_frsub>:
 800076c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000770:	e002      	b.n	8000778 <__addsf3>
 8000772:	bf00      	nop

08000774 <__aeabi_fsub>:
 8000774:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000778 <__addsf3>:
 8000778:	0042      	lsls	r2, r0, #1
 800077a:	bf1f      	itttt	ne
 800077c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000780:	ea92 0f03 	teqne	r2, r3
 8000784:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000788:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800078c:	d06a      	beq.n	8000864 <__addsf3+0xec>
 800078e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000792:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000796:	bfc1      	itttt	gt
 8000798:	18d2      	addgt	r2, r2, r3
 800079a:	4041      	eorgt	r1, r0
 800079c:	4048      	eorgt	r0, r1
 800079e:	4041      	eorgt	r1, r0
 80007a0:	bfb8      	it	lt
 80007a2:	425b      	neglt	r3, r3
 80007a4:	2b19      	cmp	r3, #25
 80007a6:	bf88      	it	hi
 80007a8:	4770      	bxhi	lr
 80007aa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80007ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007b2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80007b6:	bf18      	it	ne
 80007b8:	4240      	negne	r0, r0
 80007ba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80007be:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80007c2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80007c6:	bf18      	it	ne
 80007c8:	4249      	negne	r1, r1
 80007ca:	ea92 0f03 	teq	r2, r3
 80007ce:	d03f      	beq.n	8000850 <__addsf3+0xd8>
 80007d0:	f1a2 0201 	sub.w	r2, r2, #1
 80007d4:	fa41 fc03 	asr.w	ip, r1, r3
 80007d8:	eb10 000c 	adds.w	r0, r0, ip
 80007dc:	f1c3 0320 	rsb	r3, r3, #32
 80007e0:	fa01 f103 	lsl.w	r1, r1, r3
 80007e4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007e8:	d502      	bpl.n	80007f0 <__addsf3+0x78>
 80007ea:	4249      	negs	r1, r1
 80007ec:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80007f0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80007f4:	d313      	bcc.n	800081e <__addsf3+0xa6>
 80007f6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80007fa:	d306      	bcc.n	800080a <__addsf3+0x92>
 80007fc:	0840      	lsrs	r0, r0, #1
 80007fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000802:	f102 0201 	add.w	r2, r2, #1
 8000806:	2afe      	cmp	r2, #254	; 0xfe
 8000808:	d251      	bcs.n	80008ae <__addsf3+0x136>
 800080a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800080e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000812:	bf08      	it	eq
 8000814:	f020 0001 	biceq.w	r0, r0, #1
 8000818:	ea40 0003 	orr.w	r0, r0, r3
 800081c:	4770      	bx	lr
 800081e:	0049      	lsls	r1, r1, #1
 8000820:	eb40 0000 	adc.w	r0, r0, r0
 8000824:	3a01      	subs	r2, #1
 8000826:	bf28      	it	cs
 8000828:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800082c:	d2ed      	bcs.n	800080a <__addsf3+0x92>
 800082e:	fab0 fc80 	clz	ip, r0
 8000832:	f1ac 0c08 	sub.w	ip, ip, #8
 8000836:	ebb2 020c 	subs.w	r2, r2, ip
 800083a:	fa00 f00c 	lsl.w	r0, r0, ip
 800083e:	bfaa      	itet	ge
 8000840:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000844:	4252      	neglt	r2, r2
 8000846:	4318      	orrge	r0, r3
 8000848:	bfbc      	itt	lt
 800084a:	40d0      	lsrlt	r0, r2
 800084c:	4318      	orrlt	r0, r3
 800084e:	4770      	bx	lr
 8000850:	f092 0f00 	teq	r2, #0
 8000854:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000858:	bf06      	itte	eq
 800085a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800085e:	3201      	addeq	r2, #1
 8000860:	3b01      	subne	r3, #1
 8000862:	e7b5      	b.n	80007d0 <__addsf3+0x58>
 8000864:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000868:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800086c:	bf18      	it	ne
 800086e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000872:	d021      	beq.n	80008b8 <__addsf3+0x140>
 8000874:	ea92 0f03 	teq	r2, r3
 8000878:	d004      	beq.n	8000884 <__addsf3+0x10c>
 800087a:	f092 0f00 	teq	r2, #0
 800087e:	bf08      	it	eq
 8000880:	4608      	moveq	r0, r1
 8000882:	4770      	bx	lr
 8000884:	ea90 0f01 	teq	r0, r1
 8000888:	bf1c      	itt	ne
 800088a:	2000      	movne	r0, #0
 800088c:	4770      	bxne	lr
 800088e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000892:	d104      	bne.n	800089e <__addsf3+0x126>
 8000894:	0040      	lsls	r0, r0, #1
 8000896:	bf28      	it	cs
 8000898:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800089c:	4770      	bx	lr
 800089e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80008a2:	bf3c      	itt	cc
 80008a4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80008a8:	4770      	bxcc	lr
 80008aa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80008ae:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80008b2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008b6:	4770      	bx	lr
 80008b8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80008bc:	bf16      	itet	ne
 80008be:	4608      	movne	r0, r1
 80008c0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80008c4:	4601      	movne	r1, r0
 80008c6:	0242      	lsls	r2, r0, #9
 80008c8:	bf06      	itte	eq
 80008ca:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80008ce:	ea90 0f01 	teqeq	r0, r1
 80008d2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80008d6:	4770      	bx	lr

080008d8 <__aeabi_ui2f>:
 80008d8:	f04f 0300 	mov.w	r3, #0
 80008dc:	e004      	b.n	80008e8 <__aeabi_i2f+0x8>
 80008de:	bf00      	nop

080008e0 <__aeabi_i2f>:
 80008e0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80008e4:	bf48      	it	mi
 80008e6:	4240      	negmi	r0, r0
 80008e8:	ea5f 0c00 	movs.w	ip, r0
 80008ec:	bf08      	it	eq
 80008ee:	4770      	bxeq	lr
 80008f0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80008f4:	4601      	mov	r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	e01c      	b.n	8000936 <__aeabi_l2f+0x2a>

080008fc <__aeabi_ul2f>:
 80008fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000900:	bf08      	it	eq
 8000902:	4770      	bxeq	lr
 8000904:	f04f 0300 	mov.w	r3, #0
 8000908:	e00a      	b.n	8000920 <__aeabi_l2f+0x14>
 800090a:	bf00      	nop

0800090c <__aeabi_l2f>:
 800090c:	ea50 0201 	orrs.w	r2, r0, r1
 8000910:	bf08      	it	eq
 8000912:	4770      	bxeq	lr
 8000914:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000918:	d502      	bpl.n	8000920 <__aeabi_l2f+0x14>
 800091a:	4240      	negs	r0, r0
 800091c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000920:	ea5f 0c01 	movs.w	ip, r1
 8000924:	bf02      	ittt	eq
 8000926:	4684      	moveq	ip, r0
 8000928:	4601      	moveq	r1, r0
 800092a:	2000      	moveq	r0, #0
 800092c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000930:	bf08      	it	eq
 8000932:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000936:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800093a:	fabc f28c 	clz	r2, ip
 800093e:	3a08      	subs	r2, #8
 8000940:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000944:	db10      	blt.n	8000968 <__aeabi_l2f+0x5c>
 8000946:	fa01 fc02 	lsl.w	ip, r1, r2
 800094a:	4463      	add	r3, ip
 800094c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000950:	f1c2 0220 	rsb	r2, r2, #32
 8000954:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000958:	fa20 f202 	lsr.w	r2, r0, r2
 800095c:	eb43 0002 	adc.w	r0, r3, r2
 8000960:	bf08      	it	eq
 8000962:	f020 0001 	biceq.w	r0, r0, #1
 8000966:	4770      	bx	lr
 8000968:	f102 0220 	add.w	r2, r2, #32
 800096c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000970:	f1c2 0220 	rsb	r2, r2, #32
 8000974:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000978:	fa21 f202 	lsr.w	r2, r1, r2
 800097c:	eb43 0002 	adc.w	r0, r3, r2
 8000980:	bf08      	it	eq
 8000982:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000986:	4770      	bx	lr

08000988 <__aeabi_fmul>:
 8000988:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800098c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000990:	bf1e      	ittt	ne
 8000992:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000996:	ea92 0f0c 	teqne	r2, ip
 800099a:	ea93 0f0c 	teqne	r3, ip
 800099e:	d06f      	beq.n	8000a80 <__aeabi_fmul+0xf8>
 80009a0:	441a      	add	r2, r3
 80009a2:	ea80 0c01 	eor.w	ip, r0, r1
 80009a6:	0240      	lsls	r0, r0, #9
 80009a8:	bf18      	it	ne
 80009aa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80009ae:	d01e      	beq.n	80009ee <__aeabi_fmul+0x66>
 80009b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80009b4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80009b8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80009bc:	fba0 3101 	umull	r3, r1, r0, r1
 80009c0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80009c4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80009c8:	bf3e      	ittt	cc
 80009ca:	0049      	lslcc	r1, r1, #1
 80009cc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80009d0:	005b      	lslcc	r3, r3, #1
 80009d2:	ea40 0001 	orr.w	r0, r0, r1
 80009d6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80009da:	2afd      	cmp	r2, #253	; 0xfd
 80009dc:	d81d      	bhi.n	8000a1a <__aeabi_fmul+0x92>
 80009de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80009e2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009e6:	bf08      	it	eq
 80009e8:	f020 0001 	biceq.w	r0, r0, #1
 80009ec:	4770      	bx	lr
 80009ee:	f090 0f00 	teq	r0, #0
 80009f2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80009f6:	bf08      	it	eq
 80009f8:	0249      	lsleq	r1, r1, #9
 80009fa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80009fe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000a02:	3a7f      	subs	r2, #127	; 0x7f
 8000a04:	bfc2      	ittt	gt
 8000a06:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a0a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a0e:	4770      	bxgt	lr
 8000a10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a14:	f04f 0300 	mov.w	r3, #0
 8000a18:	3a01      	subs	r2, #1
 8000a1a:	dc5d      	bgt.n	8000ad8 <__aeabi_fmul+0x150>
 8000a1c:	f112 0f19 	cmn.w	r2, #25
 8000a20:	bfdc      	itt	le
 8000a22:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000a26:	4770      	bxle	lr
 8000a28:	f1c2 0200 	rsb	r2, r2, #0
 8000a2c:	0041      	lsls	r1, r0, #1
 8000a2e:	fa21 f102 	lsr.w	r1, r1, r2
 8000a32:	f1c2 0220 	rsb	r2, r2, #32
 8000a36:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a3a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a3e:	f140 0000 	adc.w	r0, r0, #0
 8000a42:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000a46:	bf08      	it	eq
 8000a48:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a4c:	4770      	bx	lr
 8000a4e:	f092 0f00 	teq	r2, #0
 8000a52:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000a56:	bf02      	ittt	eq
 8000a58:	0040      	lsleq	r0, r0, #1
 8000a5a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000a5e:	3a01      	subeq	r2, #1
 8000a60:	d0f9      	beq.n	8000a56 <__aeabi_fmul+0xce>
 8000a62:	ea40 000c 	orr.w	r0, r0, ip
 8000a66:	f093 0f00 	teq	r3, #0
 8000a6a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a6e:	bf02      	ittt	eq
 8000a70:	0049      	lsleq	r1, r1, #1
 8000a72:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000a76:	3b01      	subeq	r3, #1
 8000a78:	d0f9      	beq.n	8000a6e <__aeabi_fmul+0xe6>
 8000a7a:	ea41 010c 	orr.w	r1, r1, ip
 8000a7e:	e78f      	b.n	80009a0 <__aeabi_fmul+0x18>
 8000a80:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a84:	ea92 0f0c 	teq	r2, ip
 8000a88:	bf18      	it	ne
 8000a8a:	ea93 0f0c 	teqne	r3, ip
 8000a8e:	d00a      	beq.n	8000aa6 <__aeabi_fmul+0x11e>
 8000a90:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000a94:	bf18      	it	ne
 8000a96:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000a9a:	d1d8      	bne.n	8000a4e <__aeabi_fmul+0xc6>
 8000a9c:	ea80 0001 	eor.w	r0, r0, r1
 8000aa0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000aa4:	4770      	bx	lr
 8000aa6:	f090 0f00 	teq	r0, #0
 8000aaa:	bf17      	itett	ne
 8000aac:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ab0:	4608      	moveq	r0, r1
 8000ab2:	f091 0f00 	teqne	r1, #0
 8000ab6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000aba:	d014      	beq.n	8000ae6 <__aeabi_fmul+0x15e>
 8000abc:	ea92 0f0c 	teq	r2, ip
 8000ac0:	d101      	bne.n	8000ac6 <__aeabi_fmul+0x13e>
 8000ac2:	0242      	lsls	r2, r0, #9
 8000ac4:	d10f      	bne.n	8000ae6 <__aeabi_fmul+0x15e>
 8000ac6:	ea93 0f0c 	teq	r3, ip
 8000aca:	d103      	bne.n	8000ad4 <__aeabi_fmul+0x14c>
 8000acc:	024b      	lsls	r3, r1, #9
 8000ace:	bf18      	it	ne
 8000ad0:	4608      	movne	r0, r1
 8000ad2:	d108      	bne.n	8000ae6 <__aeabi_fmul+0x15e>
 8000ad4:	ea80 0001 	eor.w	r0, r0, r1
 8000ad8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000adc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae4:	4770      	bx	lr
 8000ae6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aea:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_fdiv>:
 8000af0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000af4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000af8:	bf1e      	ittt	ne
 8000afa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000afe:	ea92 0f0c 	teqne	r2, ip
 8000b02:	ea93 0f0c 	teqne	r3, ip
 8000b06:	d069      	beq.n	8000bdc <__aeabi_fdiv+0xec>
 8000b08:	eba2 0203 	sub.w	r2, r2, r3
 8000b0c:	ea80 0c01 	eor.w	ip, r0, r1
 8000b10:	0249      	lsls	r1, r1, #9
 8000b12:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000b16:	d037      	beq.n	8000b88 <__aeabi_fdiv+0x98>
 8000b18:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b1c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000b20:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000b24:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b28:	428b      	cmp	r3, r1
 8000b2a:	bf38      	it	cc
 8000b2c:	005b      	lslcc	r3, r3, #1
 8000b2e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000b32:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000b36:	428b      	cmp	r3, r1
 8000b38:	bf24      	itt	cs
 8000b3a:	1a5b      	subcs	r3, r3, r1
 8000b3c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b40:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000b44:	bf24      	itt	cs
 8000b46:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000b4a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b4e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000b52:	bf24      	itt	cs
 8000b54:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000b58:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b5c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000b60:	bf24      	itt	cs
 8000b62:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000b66:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b6a:	011b      	lsls	r3, r3, #4
 8000b6c:	bf18      	it	ne
 8000b6e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000b72:	d1e0      	bne.n	8000b36 <__aeabi_fdiv+0x46>
 8000b74:	2afd      	cmp	r2, #253	; 0xfd
 8000b76:	f63f af50 	bhi.w	8000a1a <__aeabi_fmul+0x92>
 8000b7a:	428b      	cmp	r3, r1
 8000b7c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000b8c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b90:	327f      	adds	r2, #127	; 0x7f
 8000b92:	bfc2      	ittt	gt
 8000b94:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000b98:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b9c:	4770      	bxgt	lr
 8000b9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba2:	f04f 0300 	mov.w	r3, #0
 8000ba6:	3a01      	subs	r2, #1
 8000ba8:	e737      	b.n	8000a1a <__aeabi_fmul+0x92>
 8000baa:	f092 0f00 	teq	r2, #0
 8000bae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000bb2:	bf02      	ittt	eq
 8000bb4:	0040      	lsleq	r0, r0, #1
 8000bb6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000bba:	3a01      	subeq	r2, #1
 8000bbc:	d0f9      	beq.n	8000bb2 <__aeabi_fdiv+0xc2>
 8000bbe:	ea40 000c 	orr.w	r0, r0, ip
 8000bc2:	f093 0f00 	teq	r3, #0
 8000bc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bca:	bf02      	ittt	eq
 8000bcc:	0049      	lsleq	r1, r1, #1
 8000bce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000bd2:	3b01      	subeq	r3, #1
 8000bd4:	d0f9      	beq.n	8000bca <__aeabi_fdiv+0xda>
 8000bd6:	ea41 010c 	orr.w	r1, r1, ip
 8000bda:	e795      	b.n	8000b08 <__aeabi_fdiv+0x18>
 8000bdc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000be0:	ea92 0f0c 	teq	r2, ip
 8000be4:	d108      	bne.n	8000bf8 <__aeabi_fdiv+0x108>
 8000be6:	0242      	lsls	r2, r0, #9
 8000be8:	f47f af7d 	bne.w	8000ae6 <__aeabi_fmul+0x15e>
 8000bec:	ea93 0f0c 	teq	r3, ip
 8000bf0:	f47f af70 	bne.w	8000ad4 <__aeabi_fmul+0x14c>
 8000bf4:	4608      	mov	r0, r1
 8000bf6:	e776      	b.n	8000ae6 <__aeabi_fmul+0x15e>
 8000bf8:	ea93 0f0c 	teq	r3, ip
 8000bfc:	d104      	bne.n	8000c08 <__aeabi_fdiv+0x118>
 8000bfe:	024b      	lsls	r3, r1, #9
 8000c00:	f43f af4c 	beq.w	8000a9c <__aeabi_fmul+0x114>
 8000c04:	4608      	mov	r0, r1
 8000c06:	e76e      	b.n	8000ae6 <__aeabi_fmul+0x15e>
 8000c08:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c0c:	bf18      	it	ne
 8000c0e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c12:	d1ca      	bne.n	8000baa <__aeabi_fdiv+0xba>
 8000c14:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000c18:	f47f af5c 	bne.w	8000ad4 <__aeabi_fmul+0x14c>
 8000c1c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000c20:	f47f af3c 	bne.w	8000a9c <__aeabi_fmul+0x114>
 8000c24:	e75f      	b.n	8000ae6 <__aeabi_fmul+0x15e>
 8000c26:	bf00      	nop

08000c28 <__gesf2>:
 8000c28:	f04f 3cff 	mov.w	ip, #4294967295
 8000c2c:	e006      	b.n	8000c3c <__cmpsf2+0x4>
 8000c2e:	bf00      	nop

08000c30 <__lesf2>:
 8000c30:	f04f 0c01 	mov.w	ip, #1
 8000c34:	e002      	b.n	8000c3c <__cmpsf2+0x4>
 8000c36:	bf00      	nop

08000c38 <__cmpsf2>:
 8000c38:	f04f 0c01 	mov.w	ip, #1
 8000c3c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c40:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c44:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c4c:	bf18      	it	ne
 8000c4e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c52:	d011      	beq.n	8000c78 <__cmpsf2+0x40>
 8000c54:	b001      	add	sp, #4
 8000c56:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000c5a:	bf18      	it	ne
 8000c5c:	ea90 0f01 	teqne	r0, r1
 8000c60:	bf58      	it	pl
 8000c62:	ebb2 0003 	subspl.w	r0, r2, r3
 8000c66:	bf88      	it	hi
 8000c68:	17c8      	asrhi	r0, r1, #31
 8000c6a:	bf38      	it	cc
 8000c6c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000c70:	bf18      	it	ne
 8000c72:	f040 0001 	orrne.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	d102      	bne.n	8000c84 <__cmpsf2+0x4c>
 8000c7e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000c82:	d105      	bne.n	8000c90 <__cmpsf2+0x58>
 8000c84:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000c88:	d1e4      	bne.n	8000c54 <__cmpsf2+0x1c>
 8000c8a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000c8e:	d0e1      	beq.n	8000c54 <__cmpsf2+0x1c>
 8000c90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_cfrcmple>:
 8000c98:	4684      	mov	ip, r0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	4661      	mov	r1, ip
 8000c9e:	e7ff      	b.n	8000ca0 <__aeabi_cfcmpeq>

08000ca0 <__aeabi_cfcmpeq>:
 8000ca0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ca2:	f7ff ffc9 	bl	8000c38 <__cmpsf2>
 8000ca6:	2800      	cmp	r0, #0
 8000ca8:	bf48      	it	mi
 8000caa:	f110 0f00 	cmnmi.w	r0, #0
 8000cae:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000cb0 <__aeabi_fcmpeq>:
 8000cb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cb4:	f7ff fff4 	bl	8000ca0 <__aeabi_cfcmpeq>
 8000cb8:	bf0c      	ite	eq
 8000cba:	2001      	moveq	r0, #1
 8000cbc:	2000      	movne	r0, #0
 8000cbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_fcmplt>:
 8000cc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cc8:	f7ff ffea 	bl	8000ca0 <__aeabi_cfcmpeq>
 8000ccc:	bf34      	ite	cc
 8000cce:	2001      	movcc	r0, #1
 8000cd0:	2000      	movcs	r0, #0
 8000cd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_fcmple>:
 8000cd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cdc:	f7ff ffe0 	bl	8000ca0 <__aeabi_cfcmpeq>
 8000ce0:	bf94      	ite	ls
 8000ce2:	2001      	movls	r0, #1
 8000ce4:	2000      	movhi	r0, #0
 8000ce6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cea:	bf00      	nop

08000cec <__aeabi_fcmpge>:
 8000cec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cf0:	f7ff ffd2 	bl	8000c98 <__aeabi_cfrcmple>
 8000cf4:	bf94      	ite	ls
 8000cf6:	2001      	movls	r0, #1
 8000cf8:	2000      	movhi	r0, #0
 8000cfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cfe:	bf00      	nop

08000d00 <__aeabi_fcmpgt>:
 8000d00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d04:	f7ff ffc8 	bl	8000c98 <__aeabi_cfrcmple>
 8000d08:	bf34      	ite	cc
 8000d0a:	2001      	movcc	r0, #1
 8000d0c:	2000      	movcs	r0, #0
 8000d0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d12:	bf00      	nop

08000d14 <__aeabi_f2iz>:
 8000d14:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d18:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d1c:	d30f      	bcc.n	8000d3e <__aeabi_f2iz+0x2a>
 8000d1e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d22:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d26:	d90d      	bls.n	8000d44 <__aeabi_f2iz+0x30>
 8000d28:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d30:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d34:	fa23 f002 	lsr.w	r0, r3, r2
 8000d38:	bf18      	it	ne
 8000d3a:	4240      	negne	r0, r0
 8000d3c:	4770      	bx	lr
 8000d3e:	f04f 0000 	mov.w	r0, #0
 8000d42:	4770      	bx	lr
 8000d44:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d48:	d101      	bne.n	8000d4e <__aeabi_f2iz+0x3a>
 8000d4a:	0242      	lsls	r2, r0, #9
 8000d4c:	d105      	bne.n	8000d5a <__aeabi_f2iz+0x46>
 8000d4e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000d58:	4770      	bx	lr
 8000d5a:	f04f 0000 	mov.w	r0, #0
 8000d5e:	4770      	bx	lr

08000d60 <__aeabi_f2uiz>:
 8000d60:	0042      	lsls	r2, r0, #1
 8000d62:	d20e      	bcs.n	8000d82 <__aeabi_f2uiz+0x22>
 8000d64:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d68:	d30b      	bcc.n	8000d82 <__aeabi_f2uiz+0x22>
 8000d6a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d6e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d72:	d409      	bmi.n	8000d88 <__aeabi_f2uiz+0x28>
 8000d74:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d7c:	fa23 f002 	lsr.w	r0, r3, r2
 8000d80:	4770      	bx	lr
 8000d82:	f04f 0000 	mov.w	r0, #0
 8000d86:	4770      	bx	lr
 8000d88:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d8c:	d101      	bne.n	8000d92 <__aeabi_f2uiz+0x32>
 8000d8e:	0242      	lsls	r2, r0, #9
 8000d90:	d102      	bne.n	8000d98 <__aeabi_f2uiz+0x38>
 8000d92:	f04f 30ff 	mov.w	r0, #4294967295
 8000d96:	4770      	bx	lr
 8000d98:	f04f 0000 	mov.w	r0, #0
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop

08000da0 <Encoder_Handler>:
 *
 *  Created on: Jul 30, 2024
 *      Author: I
 */
//---------------------------------------------------------------------------------
void Encoder_Handler(struct Encoder *self){
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
	/**
	 * This function describes method of interacting with Encoder based on buffer
	 */
	if(self->Rotary_Switch.event){
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	7f5b      	ldrb	r3, [r3, #29]
 8000dac:	f003 0302 	and.w	r3, r3, #2
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d029      	beq.n	8000e0a <Encoder_Handler+0x6a>
		if(self->Rotary_Switch.Rotary_Switch_Direcion==Direct)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	7f9b      	ldrb	r3, [r3, #30]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d112      	bne.n	8000de4 <Encoder_Handler+0x44>
			if(self->Rotary_Switch.State){
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	7f5b      	ldrb	r3, [r3, #29]
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d005      	beq.n	8000dd8 <Encoder_Handler+0x38>
				self->Encoder_Rotary_Switch_Buffer++;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd0:	1c5a      	adds	r2, r3, #1
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	62da      	str	r2, [r3, #44]	; 0x2c
		}else{
			self->Encoder_Button_State=Encoder_Button_long;
		}
		self->Button.Button_Event=0;
	}
}
 8000dd6:	e031      	b.n	8000e3c <Encoder_Handler+0x9c>
				self->Encoder_Rotary_Switch_Buffer--;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ddc:	1e5a      	subs	r2, r3, #1
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000de2:	e02b      	b.n	8000e3c <Encoder_Handler+0x9c>
			if(self->Rotary_Switch.State){
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	7f5b      	ldrb	r3, [r3, #29]
 8000de8:	f003 0301 	and.w	r3, r3, #1
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d005      	beq.n	8000dfe <Encoder_Handler+0x5e>
				self->Encoder_Rotary_Switch_Buffer--;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000df6:	1e5a      	subs	r2, r3, #1
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000dfc:	e01e      	b.n	8000e3c <Encoder_Handler+0x9c>
				self->Encoder_Rotary_Switch_Buffer++;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e02:	1c5a      	adds	r2, r3, #1
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000e08:	e018      	b.n	8000e3c <Encoder_Handler+0x9c>
	}else if(self->Button.Button_Event){
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	7a9b      	ldrb	r3, [r3, #10]
 8000e0e:	f003 0302 	and.w	r3, r3, #2
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d011      	beq.n	8000e3c <Encoder_Handler+0x9c>
		if(self->Button.State==1){
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	7adb      	ldrb	r3, [r3, #11]
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d104      	bne.n	8000e2a <Encoder_Handler+0x8a>
			self->Encoder_Button_State=Encoder_Button_Short;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2202      	movs	r2, #2
 8000e24:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8000e28:	e003      	b.n	8000e32 <Encoder_Handler+0x92>
			self->Encoder_Button_State=Encoder_Button_long;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2203      	movs	r2, #3
 8000e2e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		self->Button.Button_Event=0;
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	7a93      	ldrb	r3, [r2, #10]
 8000e36:	f36f 0341 	bfc	r3, #1, #1
 8000e3a:	7293      	strb	r3, [r2, #10]
}
 8000e3c:	bf00      	nop
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bc80      	pop	{r7}
 8000e44:	4770      	bx	lr

08000e46 <Button_Handler>:
//---------------------------------------------------------------------------------
void Button_Handler(struct Button* self){
 8000e46:	b480      	push	{r7}
 8000e48:	b083      	sub	sp, #12
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
	self->Button_Event=1;
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	7993      	ldrb	r3, [r2, #6]
 8000e52:	f043 0302 	orr.w	r3, r3, #2
 8000e56:	7193      	strb	r3, [r2, #6]
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bc80      	pop	{r7}
 8000e60:	4770      	bx	lr

08000e62 <Rotary_Switch_Handler>:
//---------------------------------------------------------------------------------
void Rotary_Switch_Handler(struct Rotary_Switch *self){
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
	/**
	 * Set event equal 1 and run Encoder_Handler
	 */
	self->event=1;
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	7853      	ldrb	r3, [r2, #1]
 8000e6e:	f043 0302 	orr.w	r3, r3, #2
 8000e72:	7053      	strb	r3, [r2, #1]
	Encoder_Handler(self->base);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff ff91 	bl	8000da0 <Encoder_Handler>
	self->event=0;
 8000e7e:	687a      	ldr	r2, [r7, #4]
 8000e80:	7853      	ldrb	r3, [r2, #1]
 8000e82:	f36f 0341 	bfc	r3, #1, #1
 8000e86:	7053      	strb	r3, [r2, #1]
}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <Rotary_Switch_EXTI>:
//---------------------------------------------------------------------------------
void Rotary_Switch_EXTI(struct Rotary_Switch *self, uint16_t* EXTI_PIN){
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
	/**
	 * Check if current EXTI are cursed by current Rotary_Switch EXTI_PIN
	 */
	if(self->EXTI_PIN==*EXTI_PIN){
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	889a      	ldrh	r2, [r3, #4]
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	881b      	ldrh	r3, [r3, #0]
 8000ea2:	429a      	cmp	r2, r3
 8000ea4:	d113      	bne.n	8000ece <Rotary_Switch_EXTI+0x3e>
		self->State=HAL_GPIO_ReadPin(self->GPIO,self->PIN);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	689a      	ldr	r2, [r3, #8]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	88db      	ldrh	r3, [r3, #6]
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	f006 ff55 	bl	8007d60 <HAL_GPIO_ReadPin>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	f003 0301 	and.w	r3, r3, #1
 8000ebc:	b2d9      	uxtb	r1, r3
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	7853      	ldrb	r3, [r2, #1]
 8000ec2:	f361 0300 	bfi	r3, r1, #0, #1
 8000ec6:	7053      	strb	r3, [r2, #1]
		Rotary_Switch_Handler(self);
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f7ff ffca 	bl	8000e62 <Rotary_Switch_Handler>
	}
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <Button_EXTI>:
//---------------------------------------------------------------------------------
void Button_EXTI(struct Button* self, uint16_t *EXTI_PIN){
 8000ed6:	b480      	push	{r7}
 8000ed8:	b083      	sub	sp, #12
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
 8000ede:	6039      	str	r1, [r7, #0]
	/*
	 * Check if current EXTI are cursed by current BUTTON EXTI_PIN
	 * All buttons with same EXTI_PIN gets EXTI_Event
	 */
	if(self->EXTI_PIN==*EXTI_PIN){
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	891a      	ldrh	r2, [r3, #8]
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	881b      	ldrh	r3, [r3, #0]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d107      	bne.n	8000efc <Button_EXTI+0x26>
		self->EXTI_Event=1;
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	7993      	ldrb	r3, [r2, #6]
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	7193      	strb	r3, [r2, #6]
		self->count=0;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	711a      	strb	r2, [r3, #4]
	}
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bc80      	pop	{r7}
 8000f04:	4770      	bx	lr

08000f06 <Encoder_EXTI>:
//---------------------------------------------------------------------------------
void Encoder_EXTI(struct Encoder *self, uint16_t *EXTI_PIN){
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
 8000f0e:	6039      	str	r1, [r7, #0]
	/**
	 *Check if current EXTI are cursed by current Encoder's parts
	 */
	Rotary_Switch_EXTI(&(self->Rotary_Switch),  EXTI_PIN);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	331c      	adds	r3, #28
 8000f14:	6839      	ldr	r1, [r7, #0]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff ffba 	bl	8000e90 <Rotary_Switch_EXTI>
	Button_EXTI(&(self->Button), EXTI_PIN);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3304      	adds	r3, #4
 8000f20:	6839      	ldr	r1, [r7, #0]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff ffd7 	bl	8000ed6 <Button_EXTI>
}
 8000f28:	bf00      	nop
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <Button_MODE_it>:
//---------------------------------------------------------------------------------
void Button_MODE_it(struct Button* self){
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
	/**
	 * Function that describes every button's work mode algorithm
	 */
	switch (self->MODE){
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	7c1b      	ldrb	r3, [r3, #16]
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d05c      	beq.n	8000ffa <Button_MODE_it+0xca>
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	f300 80ac 	bgt.w	800109e <Button_MODE_it+0x16e>
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d002      	beq.n	8000f50 <Button_MODE_it+0x20>
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d029      	beq.n	8000fa2 <Button_MODE_it+0x72>
			}
			self->Previos_Stable_State=self->Stable_State;			//Rewrite prew stable state

		break;
	}
}
 8000f4e:	e0a6      	b.n	800109e <Button_MODE_it+0x16e>
			self->Stable_State=self->PIN_State;			//Write stable state
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	785b      	ldrb	r3, [r3, #1]
 8000f54:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000f58:	b2d9      	uxtb	r1, r3
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	7853      	ldrb	r3, [r2, #1]
 8000f5e:	f361 0382 	bfi	r3, r1, #2, #1
 8000f62:	7053      	strb	r3, [r2, #1]
			if(self->Stable_State!=self->Previos_Stable_State){
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	785b      	ldrb	r3, [r3, #1]
 8000f68:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	785b      	ldrb	r3, [r3, #1]
 8000f72:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d00c      	beq.n	8000f96 <Button_MODE_it+0x66>
				Button_Handler(self);						//Run button handler
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f7ff ff62 	bl	8000e46 <Button_Handler>
				self->Previos_Stable_State=self->Stable_State;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	785b      	ldrb	r3, [r3, #1]
 8000f86:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000f8a:	b2d9      	uxtb	r1, r3
 8000f8c:	687a      	ldr	r2, [r7, #4]
 8000f8e:	7853      	ldrb	r3, [r2, #1]
 8000f90:	f361 03c3 	bfi	r3, r1, #3, #1
 8000f94:	7053      	strb	r3, [r2, #1]
			self->EXTI_Event=0;							//Reset EXTI event to didn't check the button without EXTI interrupt
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	7993      	ldrb	r3, [r2, #6]
 8000f9a:	f36f 0300 	bfc	r3, #0, #1
 8000f9e:	7193      	strb	r3, [r2, #6]
		break;
 8000fa0:	e07d      	b.n	800109e <Button_MODE_it+0x16e>
			self->Stable_State=self->PIN_State;			//Write stable state
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	785b      	ldrb	r3, [r3, #1]
 8000fa6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000faa:	b2d9      	uxtb	r1, r3
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	7853      	ldrb	r3, [r2, #1]
 8000fb0:	f361 0382 	bfi	r3, r1, #2, #1
 8000fb4:	7053      	strb	r3, [r2, #1]
			if(self->Stable_State!=self->Previos_Stable_State){
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	785b      	ldrb	r3, [r3, #1]
 8000fba:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	785b      	ldrb	r3, [r3, #1]
 8000fc4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	d00a      	beq.n	8000fe4 <Button_MODE_it+0xb4>
				self->State=self->PIN_State;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	785b      	ldrb	r3, [r3, #1]
 8000fd2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	461a      	mov	r2, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	71da      	strb	r2, [r3, #7]
				Button_Handler(self);					//Run button handler
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f7ff ff31 	bl	8000e46 <Button_Handler>
			self->Previos_Stable_State=self->Stable_State;	//Rewrite prew stable state
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	785b      	ldrb	r3, [r3, #1]
 8000fe8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000fec:	b2d9      	uxtb	r1, r3
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	7853      	ldrb	r3, [r2, #1]
 8000ff2:	f361 03c3 	bfi	r3, r1, #3, #1
 8000ff6:	7053      	strb	r3, [r2, #1]
		break;
 8000ff8:	e051      	b.n	800109e <Button_MODE_it+0x16e>
			self->Stable_State=self->PIN_State;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	785b      	ldrb	r3, [r3, #1]
 8000ffe:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001002:	b2d9      	uxtb	r1, r3
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	7853      	ldrb	r3, [r2, #1]
 8001008:	f361 0382 	bfi	r3, r1, #2, #1
 800100c:	7053      	strb	r3, [r2, #1]
			if(self->Stable_State==GPIO_PIN_RESET){					//
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	785b      	ldrb	r3, [r3, #1]
 8001012:	f003 0304 	and.w	r3, r3, #4
 8001016:	b2db      	uxtb	r3, r3
 8001018:	2b00      	cmp	r3, #0
 800101a:	d106      	bne.n	800102a <Button_MODE_it+0xfa>
				self->Presed_counter++;								//Counting how many iterations button was pressed
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	789b      	ldrb	r3, [r3, #2]
 8001020:	3301      	adds	r3, #1
 8001022:	b2da      	uxtb	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	709a      	strb	r2, [r3, #2]
 8001028:	e02e      	b.n	8001088 <Button_MODE_it+0x158>
			else if(self->Previos_Stable_State==GPIO_PIN_RESET){	//If stable state was changed (rising edge)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	785b      	ldrb	r3, [r3, #1]
 800102e:	f003 0308 	and.w	r3, r3, #8
 8001032:	b2db      	uxtb	r3, r3
 8001034:	2b00      	cmp	r3, #0
 8001036:	d11f      	bne.n	8001078 <Button_MODE_it+0x148>
				if(self->Presed_counter<self->Presed_counter_max)	//and button was pressed less than Presed_counter_max
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	789a      	ldrb	r2, [r3, #2]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	78db      	ldrb	r3, [r3, #3]
 8001040:	429a      	cmp	r2, r3
 8001042:	d203      	bcs.n	800104c <Button_MODE_it+0x11c>
					self->State=1;									//State equal 1(short press)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2201      	movs	r2, #1
 8001048:	71da      	strb	r2, [r3, #7]
 800104a:	e002      	b.n	8001052 <Button_MODE_it+0x122>
					self->State=2;									//State equal 1(Long press)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2202      	movs	r2, #2
 8001050:	71da      	strb	r2, [r3, #7]
				self->Presed_counter=0;								//Reset pressed iteration counter
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	709a      	strb	r2, [r3, #2]
				self->EXTI_Event=0;									//Reset EXTI event
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	7993      	ldrb	r3, [r2, #6]
 800105c:	f36f 0300 	bfc	r3, #0, #1
 8001060:	7193      	strb	r3, [r2, #6]
				self->Button_Event=1;								//Set button event
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	7993      	ldrb	r3, [r2, #6]
 8001066:	f043 0302 	orr.w	r3, r3, #2
 800106a:	7193      	strb	r3, [r2, #6]
				Encoder_Handler(self->base);						//run Encoder_Handler
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	695b      	ldr	r3, [r3, #20]
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff fe95 	bl	8000da0 <Encoder_Handler>
 8001076:	e007      	b.n	8001088 <Button_MODE_it+0x158>
				self->EXTI_Event=0;									//Reset EXTI event
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	7993      	ldrb	r3, [r2, #6]
 800107c:	f36f 0300 	bfc	r3, #0, #1
 8001080:	7193      	strb	r3, [r2, #6]
				self->Presed_counter=0;								//Reset pressed iteration counter
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2200      	movs	r2, #0
 8001086:	709a      	strb	r2, [r3, #2]
			self->Previos_Stable_State=self->Stable_State;			//Rewrite prew stable state
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	785b      	ldrb	r3, [r3, #1]
 800108c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001090:	b2d9      	uxtb	r1, r3
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	7853      	ldrb	r3, [r2, #1]
 8001096:	f361 03c3 	bfi	r3, r1, #3, #1
 800109a:	7053      	strb	r3, [r2, #1]
		break;
 800109c:	bf00      	nop
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <Button_it>:
//---------------------------------------------------------------------------------
void Button_it(struct Button* self){
 80010a6:	b590      	push	{r4, r7, lr}
 80010a8:	b083      	sub	sp, #12
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
	/**
	 * This function realize "Contact bounce" filter and run main logic function
	 */
	if(self->EXTI_Event==1){												//Check pins state every time when EXTI's interrupt goes
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	799b      	ldrb	r3, [r3, #6]
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d038      	beq.n	800112e <Button_it+0x88>
		if(self->count==1){													//Contact bounce filter
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	791b      	ldrb	r3, [r3, #4]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d111      	bne.n	80010e8 <Button_it+0x42>
			self->PIN_State=HAL_GPIO_ReadPin(self->GPIO,self->PIN);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	68da      	ldr	r2, [r3, #12]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	895b      	ldrh	r3, [r3, #10]
 80010cc:	4619      	mov	r1, r3
 80010ce:	4610      	mov	r0, r2
 80010d0:	f006 fe46 	bl	8007d60 <HAL_GPIO_ReadPin>
 80010d4:	4603      	mov	r3, r0
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	b2d9      	uxtb	r1, r3
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	7853      	ldrb	r3, [r2, #1]
 80010e0:	f361 0300 	bfi	r3, r1, #0, #1
 80010e4:	7053      	strb	r3, [r2, #1]
 80010e6:	e01c      	b.n	8001122 <Button_it+0x7c>
		}
		else if(self->count==self->count_max){
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	791a      	ldrb	r2, [r3, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	795b      	ldrb	r3, [r3, #5]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d116      	bne.n	8001122 <Button_it+0x7c>
			if(self->PIN_State==HAL_GPIO_ReadPin(self->GPIO,self->PIN)){
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	785b      	ldrb	r3, [r3, #1]
 80010f8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	461c      	mov	r4, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	68da      	ldr	r2, [r3, #12]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	895b      	ldrh	r3, [r3, #10]
 8001108:	4619      	mov	r1, r3
 800110a:	4610      	mov	r0, r2
 800110c:	f006 fe28 	bl	8007d60 <HAL_GPIO_ReadPin>
 8001110:	4603      	mov	r3, r0
 8001112:	429c      	cmp	r4, r3
 8001114:	d102      	bne.n	800111c <Button_it+0x76>
				Button_MODE_it(self);
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f7ff ff0a 	bl	8000f30 <Button_MODE_it>
			}
			self->count=0;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2200      	movs	r2, #0
 8001120:	711a      	strb	r2, [r3, #4]
		}
		self->count++;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	791b      	ldrb	r3, [r3, #4]
 8001126:	3301      	adds	r3, #1
 8001128:	b2da      	uxtb	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	711a      	strb	r2, [r3, #4]
	}
}
 800112e:	bf00      	nop
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	bd90      	pop	{r4, r7, pc}

08001136 <Encoder_it>:
//---------------------------------------------------------------------------------
void Encoder_it(struct Encoder *self){
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
	/*
	 * Encoder iteration
	 */
	Button_it(&self->Button);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	3304      	adds	r3, #4
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff ffaf 	bl	80010a6 <Button_it>
}
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <Button_ini>:
//---------------------------------------------------------------------------------
void Button_ini(struct Button* self){
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
	/**
	 *Base button's parameters initialization
	 */
	self->count=0;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2200      	movs	r2, #0
 800115c:	711a      	strb	r2, [r3, #4]
	self->Presed_counter=0;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	709a      	strb	r2, [r3, #2]
	self->Previos_Stable_State=1;
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	7853      	ldrb	r3, [r2, #1]
 8001168:	f043 0308 	orr.w	r3, r3, #8
 800116c:	7053      	strb	r3, [r2, #1]
	self->Button_Event=0;
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	7993      	ldrb	r3, [r2, #6]
 8001172:	f36f 0341 	bfc	r3, #1, #1
 8001176:	7193      	strb	r3, [r2, #6]
	if(self->MODE==Button_Mode_Regular_Without_EXTI)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	7c1b      	ldrb	r3, [r3, #16]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d105      	bne.n	800118c <Button_ini+0x3c>
		self->EXTI_Event=1;								//for button without interrupts EXTI_Event always equal 1
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	7993      	ldrb	r3, [r2, #6]
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	7193      	strb	r3, [r2, #6]
	else
		self->EXTI_Event=0;
}
 800118a:	e004      	b.n	8001196 <Button_ini+0x46>
		self->EXTI_Event=0;
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	7993      	ldrb	r3, [r2, #6]
 8001190:	f36f 0300 	bfc	r3, #0, #1
 8001194:	7193      	strb	r3, [r2, #6]
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr

080011a0 <Button_Vector_Create>:
//---------------------------------------------------------------------------------
void Button_Vector_Create(struct Button_Vector *Vector, struct Button *Button){
 80011a0:	b5b0      	push	{r4, r5, r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
	/**
	 * Create a new element of Button_Vector which contain Button struct
	 */
	Button_ini(Button);
 80011aa:	6838      	ldr	r0, [r7, #0]
 80011ac:	f7ff ffd0 	bl	8001150 <Button_ini>
	struct Button *Bpr= malloc(sizeof(struct Button));
 80011b0:	2018      	movs	r0, #24
 80011b2:	f009 fe61 	bl	800ae78 <malloc>
 80011b6:	4603      	mov	r3, r0
 80011b8:	613b      	str	r3, [r7, #16]
	*Bpr= *Button;
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	4614      	mov	r4, r2
 80011c0:	461d      	mov	r5, r3
 80011c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011c6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80011ca:	e884 0003 	stmia.w	r4, {r0, r1}
	if(Vector->Button==NULL)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d103      	bne.n	80011de <Button_Vector_Create+0x3e>
		Vector->Button=Bpr;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	605a      	str	r2, [r3, #4]
		}
		Vpr->Button=Bpr;
		NOW->next=Vpr;
		NOW->next->next=NULL;
	}
}
 80011dc:	e018      	b.n	8001210 <Button_Vector_Create+0x70>
		struct Button_Vector *Vpr= malloc(sizeof(struct Button_Vector));
 80011de:	2008      	movs	r0, #8
 80011e0:	f009 fe4a 	bl	800ae78 <malloc>
 80011e4:	4603      	mov	r3, r0
 80011e6:	60fb      	str	r3, [r7, #12]
		struct Button_Vector *NOW=Vector;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	617b      	str	r3, [r7, #20]
		while(NOW->next!=NULL){
 80011ec:	e002      	b.n	80011f4 <Button_Vector_Create+0x54>
			NOW=NOW->next;
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	617b      	str	r3, [r7, #20]
		while(NOW->next!=NULL){
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d1f8      	bne.n	80011ee <Button_Vector_Create+0x4e>
		Vpr->Button=Bpr;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	605a      	str	r2, [r3, #4]
		NOW->next=Vpr;
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	68fa      	ldr	r2, [r7, #12]
 8001206:	601a      	str	r2, [r3, #0]
		NOW->next->next=NULL;
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
}
 8001210:	bf00      	nop
 8001212:	3718      	adds	r7, #24
 8001214:	46bd      	mov	sp, r7
 8001216:	bdb0      	pop	{r4, r5, r7, pc}

08001218 <Button_Vector_EXTI>:
//---------------------------------------------------------------------------------
void Button_Vector_EXTI(struct Button_Vector *self, uint16_t* GPIO){
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
	/**
	 * Run Button EXTI for all Button into Button_Vector
	 * First Parameter must be head of vector
	 */
	struct Button_Vector *NOW=self;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	60fb      	str	r3, [r7, #12]
	do{
		Button_EXTI(NOW->Button,GPIO);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	6839      	ldr	r1, [r7, #0]
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff fe52 	bl	8000ed6 <Button_EXTI>
		NOW=NOW->next;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	60fb      	str	r3, [r7, #12]
	}while(NOW!=NULL);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d1f3      	bne.n	8001226 <Button_Vector_EXTI+0xe>
}
 800123e:	bf00      	nop
 8001240:	bf00      	nop
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <Button_Vector_it>:
//---------------------------------------------------------------------------------
void Button_Vector_it(struct Button_Vector *self){
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
	/**
	 * Run Button_it for all Button into Button_Vector
	 */
	struct Button_Vector *NOW=self;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	60fb      	str	r3, [r7, #12]
	do{
		Button_it(NOW->Button);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff ff24 	bl	80010a6 <Button_it>
		NOW=NOW->next;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	60fb      	str	r3, [r7, #12]
	} while(NOW!=NULL);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d1f4      	bne.n	8001254 <Button_Vector_it+0xc>
}
 800126a:	bf00      	nop
 800126c:	bf00      	nop
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <Button_Get_Pin_State>:
//---------------------------------------------------------------------------------
GPIO_PinState Button_Get_Pin_State(struct Button* self){
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
	/*
	 * Return Button stable state and reset Button_Event
	 */
	self->Button_Event=0;
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	7993      	ldrb	r3, [r2, #6]
 8001280:	f36f 0341 	bfc	r3, #1, #1
 8001284:	7193      	strb	r3, [r2, #6]
	return self->Stable_State;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	785b      	ldrb	r3, [r3, #1]
 800128a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800128e:	b2db      	uxtb	r3, r3
}
 8001290:	4618      	mov	r0, r3
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr

0800129a <Button_Get_Event_State>:
//---------------------------------------------------------------------------------
uint8_t  Button_Get_Event_State(struct Button* self){
 800129a:	b480      	push	{r7}
 800129c:	b083      	sub	sp, #12
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
	/*
	 * Return Button event
	 */
	return self->Button_Event;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	799b      	ldrb	r3, [r3, #6]
 80012a6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80012aa:	b2db      	uxtb	r3, r3
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bc80      	pop	{r7}
 80012b4:	4770      	bx	lr

080012b6 <Encoder_Reset_Rotary_Switch_Buffer>:
//---------------------------------------------------------------------------------
void Encoder_Reset_Rotary_Switch_Buffer(struct Encoder *self){
 80012b6:	b480      	push	{r7}
 80012b8:	b083      	sub	sp, #12
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
	/**
	 * Reset Encoder_Rotary switch buffer
	 */
	self->Encoder_Rotary_Switch_Buffer=0;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2200      	movs	r2, #0
 80012c2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr

080012ce <Encoder_Get_Rotary_Switch_Buffer>:
//---------------------------------------------------------------------------------
int Encoder_Get_Rotary_Switch_Buffer(struct Encoder *self){
 80012ce:	b480      	push	{r7}
 80012d0:	b083      	sub	sp, #12
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
	/**
	 * Return how many times Rotary_Switch has switch it's position
	 * Return value can have negative value
	 */
	return  self->Encoder_Rotary_Switch_Buffer;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80012da:	4618      	mov	r0, r3
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr

080012e4 <Encoder_Reset_Button_State>:
//---------------------------------------------------------------------------------
void Encoder_Reset_Button_State(struct Encoder *self){
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
	self->Encoder_Button_State=Encoder_Button_NotPressed;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr

080012fe <Encoder_Get_Button_State>:
//---------------------------------------------------------------------------------
enum Encoder_Button_State Encoder_Get_Button_State(struct Encoder *self){
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
	return self->Encoder_Button_State;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
}
 800130c:	4618      	mov	r0, r3
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	bc80      	pop	{r7}
 8001314:	4770      	bx	lr

08001316 <Encoder_ini>:
//---------------------------------------------------------------------------------
void Rotary_Switch_ini(struct Rotary_Switch *self){

}
//---------------------------------------------------------------------------------
void Encoder_ini(struct Encoder *self){
 8001316:	b580      	push	{r7, lr}
 8001318:	b082      	sub	sp, #8
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
	/**
	 * Base Encoder's parameters initialization
	 */
	Button_ini(&(self->Button));
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	3304      	adds	r3, #4
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff ff14 	bl	8001150 <Button_ini>
	self->Button.base=self;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	619a      	str	r2, [r3, #24]
	self->Rotary_Switch.base=self;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	629a      	str	r2, [r3, #40]	; 0x28
	self->Button.ID=self->ID;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	781a      	ldrb	r2, [r3, #0]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	711a      	strb	r2, [r3, #4]
	self->Rotary_Switch.ID=self->ID;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	781a      	ldrb	r2, [r3, #0]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	771a      	strb	r2, [r3, #28]
	self->Encoder_Button_State=Encoder_Button_NotPressed;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2200      	movs	r2, #0
 8001348:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	self->Encoder_Rotary_Switch_Buffer=0;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <Filter_Mediana_3>:
#include"Filter.h"
//--------------------------------------------------------------------------------- Middle Average Filter
uint16_t Filter_Mediana_3(uint16_t a,uint16_t b, uint16_t c){
 800135a:	b480      	push	{r7}
 800135c:	b083      	sub	sp, #12
 800135e:	af00      	add	r7, sp, #0
 8001360:	4603      	mov	r3, r0
 8001362:	80fb      	strh	r3, [r7, #6]
 8001364:	460b      	mov	r3, r1
 8001366:	80bb      	strh	r3, [r7, #4]
 8001368:	4613      	mov	r3, r2
 800136a:	807b      	strh	r3, [r7, #2]
	/**
	 * Median filter for 3 samples
	 */
	if(a<=b){
 800136c:	88fa      	ldrh	r2, [r7, #6]
 800136e:	88bb      	ldrh	r3, [r7, #4]
 8001370:	429a      	cmp	r2, r3
 8001372:	d80d      	bhi.n	8001390 <Filter_Mediana_3+0x36>
		if(a<=c){
 8001374:	88fa      	ldrh	r2, [r7, #6]
 8001376:	887b      	ldrh	r3, [r7, #2]
 8001378:	429a      	cmp	r2, r3
 800137a:	d807      	bhi.n	800138c <Filter_Mediana_3+0x32>
			if(b<=c)
 800137c:	88ba      	ldrh	r2, [r7, #4]
 800137e:	887b      	ldrh	r3, [r7, #2]
 8001380:	429a      	cmp	r2, r3
 8001382:	d801      	bhi.n	8001388 <Filter_Mediana_3+0x2e>
				return b;
 8001384:	88bb      	ldrh	r3, [r7, #4]
 8001386:	e010      	b.n	80013aa <Filter_Mediana_3+0x50>
			else
				return c;
 8001388:	887b      	ldrh	r3, [r7, #2]
 800138a:	e00e      	b.n	80013aa <Filter_Mediana_3+0x50>
		}
		else
			return a;
 800138c:	88fb      	ldrh	r3, [r7, #6]
 800138e:	e00c      	b.n	80013aa <Filter_Mediana_3+0x50>
	}
	else
	{
		if(a<=c){
 8001390:	88fa      	ldrh	r2, [r7, #6]
 8001392:	887b      	ldrh	r3, [r7, #2]
 8001394:	429a      	cmp	r2, r3
 8001396:	d801      	bhi.n	800139c <Filter_Mediana_3+0x42>
			return c;
 8001398:	887b      	ldrh	r3, [r7, #2]
 800139a:	e006      	b.n	80013aa <Filter_Mediana_3+0x50>
		}
		else
			if(b<=c)
 800139c:	88ba      	ldrh	r2, [r7, #4]
 800139e:	887b      	ldrh	r3, [r7, #2]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d801      	bhi.n	80013a8 <Filter_Mediana_3+0x4e>
				return c;
 80013a4:	887b      	ldrh	r3, [r7, #2]
 80013a6:	e000      	b.n	80013aa <Filter_Mediana_3+0x50>
			else
				return b;
 80013a8:	88bb      	ldrh	r3, [r7, #4]
	}
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr

080013b4 <Filter_Mediana_9>:
//---------------------------------------------------------------------------------
uint16_t Filter_Mediana_9 (uint16_t *mas){
 80013b4:	b5b0      	push	{r4, r5, r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
	/**
	 * Median filter for 9 samples
	 */
	return	Filter_Mediana_3(
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	8818      	ldrh	r0, [r3, #0]
			Filter_Mediana_3(*mas,*(mas+1), *(mas+2)),
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3302      	adds	r3, #2
	return	Filter_Mediana_3(
 80013c4:	8819      	ldrh	r1, [r3, #0]
			Filter_Mediana_3(*mas,*(mas+1), *(mas+2)),
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	3304      	adds	r3, #4
	return	Filter_Mediana_3(
 80013ca:	881b      	ldrh	r3, [r3, #0]
 80013cc:	461a      	mov	r2, r3
 80013ce:	f7ff ffc4 	bl	800135a <Filter_Mediana_3>
 80013d2:	4603      	mov	r3, r0
 80013d4:	461c      	mov	r4, r3
			Filter_Mediana_3(*(mas+3),*(mas+4), *(mas+5)),
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	3306      	adds	r3, #6
	return	Filter_Mediana_3(
 80013da:	8818      	ldrh	r0, [r3, #0]
			Filter_Mediana_3(*(mas+3),*(mas+4), *(mas+5)),
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3308      	adds	r3, #8
	return	Filter_Mediana_3(
 80013e0:	8819      	ldrh	r1, [r3, #0]
			Filter_Mediana_3(*(mas+3),*(mas+4), *(mas+5)),
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	330a      	adds	r3, #10
	return	Filter_Mediana_3(
 80013e6:	881b      	ldrh	r3, [r3, #0]
 80013e8:	461a      	mov	r2, r3
 80013ea:	f7ff ffb6 	bl	800135a <Filter_Mediana_3>
 80013ee:	4603      	mov	r3, r0
 80013f0:	461d      	mov	r5, r3
			Filter_Mediana_3(*(mas+6),*(mas+7), *(mas+8)));
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	330c      	adds	r3, #12
	return	Filter_Mediana_3(
 80013f6:	8818      	ldrh	r0, [r3, #0]
			Filter_Mediana_3(*(mas+6),*(mas+7), *(mas+8)));
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	330e      	adds	r3, #14
	return	Filter_Mediana_3(
 80013fc:	8819      	ldrh	r1, [r3, #0]
			Filter_Mediana_3(*(mas+6),*(mas+7), *(mas+8)));
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	3310      	adds	r3, #16
	return	Filter_Mediana_3(
 8001402:	881b      	ldrh	r3, [r3, #0]
 8001404:	461a      	mov	r2, r3
 8001406:	f7ff ffa8 	bl	800135a <Filter_Mediana_3>
 800140a:	4603      	mov	r3, r0
 800140c:	461a      	mov	r2, r3
 800140e:	4629      	mov	r1, r5
 8001410:	4620      	mov	r0, r4
 8001412:	f7ff ffa2 	bl	800135a <Filter_Mediana_3>
 8001416:	4603      	mov	r3, r0
}
 8001418:	4618      	mov	r0, r3
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bdb0      	pop	{r4, r5, r7, pc}

08001420 <Filter_ini>:
//---------------------------------------------------------------------------------
void Filter_ini(struct Filter * self){
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
	/**
	 * Reset buffer
	 */
	self->Filter_Buffer=0;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	60da      	str	r2, [r3, #12]
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr

0800143a <Filter_Exp_Mov_Average>:
//--------------------------------------------------------------------------------- Exponential Moving Average Filter with adaptive koef
uint16_t Filter_Exp_Mov_Average(struct Filter* self){
 800143a:	b590      	push	{r4, r7, lr}
 800143c:	b083      	sub	sp, #12
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
		if(abs((int)self->Val_Now - self->Filter_Buffer)>self->Val_Delata)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff fc64 	bl	8000d14 <__aeabi_f2iz>
 800144c:	4603      	mov	r3, r0
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff fa46 	bl	80008e0 <__aeabi_i2f>
 8001454:	4602      	mov	r2, r0
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	4619      	mov	r1, r3
 800145c:	4610      	mov	r0, r2
 800145e:	f7ff f989 	bl	8000774 <__aeabi_fsub>
 8001462:	4603      	mov	r3, r0
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff fc55 	bl	8000d14 <__aeabi_f2iz>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	bfb8      	it	lt
 8001470:	425b      	neglt	r3, r3
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff fa34 	bl	80008e0 <__aeabi_i2f>
 8001478:	4602      	mov	r2, r0
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	691b      	ldr	r3, [r3, #16]
 800147e:	4619      	mov	r1, r3
 8001480:	4610      	mov	r0, r2
 8001482:	f7ff fc3d 	bl	8000d00 <__aeabi_fcmpgt>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d004      	beq.n	8001496 <Filter_Exp_Mov_Average+0x5c>
			self->k=self->k_max;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689a      	ldr	r2, [r3, #8]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	e003      	b.n	800149e <Filter_Exp_Mov_Average+0x64>
		else
			self->k=self->k_min;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685a      	ldr	r2, [r3, #4]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	601a      	str	r2, [r3, #0]

	  self->Filter_Buffer += (self->Val_Now - self->Filter_Buffer) * self->k;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	68dc      	ldr	r4, [r3, #12]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	695a      	ldr	r2, [r3, #20]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	4619      	mov	r1, r3
 80014ac:	4610      	mov	r0, r2
 80014ae:	f7ff f961 	bl	8000774 <__aeabi_fsub>
 80014b2:	4603      	mov	r3, r0
 80014b4:	461a      	mov	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4619      	mov	r1, r3
 80014bc:	4610      	mov	r0, r2
 80014be:	f7ff fa63 	bl	8000988 <__aeabi_fmul>
 80014c2:	4603      	mov	r3, r0
 80014c4:	4619      	mov	r1, r3
 80014c6:	4620      	mov	r0, r4
 80014c8:	f7ff f956 	bl	8000778 <__addsf3>
 80014cc:	4603      	mov	r3, r0
 80014ce:	461a      	mov	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	60da      	str	r2, [r3, #12]
	  return (uint16_t)self->Filter_Buffer;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff fc41 	bl	8000d60 <__aeabi_f2uiz>
 80014de:	4603      	mov	r3, r0
 80014e0:	b29b      	uxth	r3, r3
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd90      	pop	{r4, r7, pc}

080014ea <Filter_Combined>:
//---------------------------------------------------------------------------------
uint16_t Filter_Combined(struct Filter* self){
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b082      	sub	sp, #8
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
	/**
	 * 	Exponential Moving Average Filter with adaptive koef combined with Median filter
	 * 	Return result of Filter
	 */
	if(self->Filter_Mode==Three_Samples){
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	7e1b      	ldrb	r3, [r3, #24]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d114      	bne.n	8001524 <Filter_Combined+0x3a>
		self->Val_Now=Filter_Mediana_3(*(self->mass),*((self->mass)+1), *((self->mass)+2));
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	69db      	ldr	r3, [r3, #28]
 80014fe:	8818      	ldrh	r0, [r3, #0]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	69db      	ldr	r3, [r3, #28]
 8001504:	3302      	adds	r3, #2
 8001506:	8819      	ldrh	r1, [r3, #0]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	69db      	ldr	r3, [r3, #28]
 800150c:	3304      	adds	r3, #4
 800150e:	881b      	ldrh	r3, [r3, #0]
 8001510:	461a      	mov	r2, r3
 8001512:	f7ff ff22 	bl	800135a <Filter_Mediana_3>
 8001516:	4603      	mov	r3, r0
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff f9dd 	bl	80008d8 <__aeabi_ui2f>
 800151e:	4602      	mov	r2, r0
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	615a      	str	r2, [r3, #20]
	}
	if(self->Filter_Mode==Nine_Samples){
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	7e1b      	ldrb	r3, [r3, #24]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d10b      	bne.n	8001544 <Filter_Combined+0x5a>
		self->Val_Now=Filter_Mediana_9(self->mass);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	69db      	ldr	r3, [r3, #28]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff ff3f 	bl	80013b4 <Filter_Mediana_9>
 8001536:	4603      	mov	r3, r0
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff f9cd 	bl	80008d8 <__aeabi_ui2f>
 800153e:	4602      	mov	r2, r0
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	615a      	str	r2, [r3, #20]
	}
	return Filter_Exp_Mov_Average(self);
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7ff ff78 	bl	800143a <Filter_Exp_Mov_Average>
 800154a:	4603      	mov	r3, r0
}
 800154c:	4618      	mov	r0, r3
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <Flash_Erase>:
 *  Created on: Nov 11, 2024
 *      Author: I
 */
#include "Flash_Custom.h"
//---------------------------------------------------------------------------------
uint8_t Flash_Erase (uint32_t addr, uint16_t size){
 8001554:	b580      	push	{r7, lr}
 8001556:	b088      	sub	sp, #32
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	460b      	mov	r3, r1
 800155e:	807b      	strh	r3, [r7, #2]
	  * addr  Base address.
	  * size  Size all data for recording into page.
	  * return HAL_StatusTypeDef HAL_OK or HAL_ERROR .
	  */
		FLASH_EraseInitTypeDef FlashErase;
		uint32_t sectorError = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	60fb      	str	r3, [r7, #12]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001564:	b672      	cpsid	i
}
 8001566:	bf00      	nop

		__disable_irq();
		HAL_FLASH_Unlock();
 8001568:	f006 f8e6 	bl	8007738 <HAL_FLASH_Unlock>

		FlashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 800156c:	2300      	movs	r3, #0
 800156e:	613b      	str	r3, [r7, #16]
		FlashErase.PageAddress = addr;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	61bb      	str	r3, [r7, #24]
		FlashErase.NbPages = size / 1024 + 1;
 8001574:	887b      	ldrh	r3, [r7, #2]
 8001576:	0a9b      	lsrs	r3, r3, #10
 8001578:	b29b      	uxth	r3, r3
 800157a:	3301      	adds	r3, #1
 800157c:	61fb      	str	r3, [r7, #28]

		if (HAL_FLASHEx_Erase(&FlashErase, &sectorError) != HAL_OK)
 800157e:	f107 020c 	add.w	r2, r7, #12
 8001582:	f107 0310 	add.w	r3, r7, #16
 8001586:	4611      	mov	r1, r2
 8001588:	4618      	mov	r0, r3
 800158a:	f006 f9bd 	bl	8007908 <HAL_FLASHEx_Erase>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d005      	beq.n	80015a0 <Flash_Erase+0x4c>
		{
			HAL_FLASH_Lock();
 8001594:	f006 f8f6 	bl	8007784 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8001598:	b662      	cpsie	i
}
 800159a:	bf00      	nop
	        __enable_irq();
			return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e004      	b.n	80015aa <Flash_Erase+0x56>
		}
		HAL_FLASH_Lock();
 80015a0:	f006 f8f0 	bl	8007784 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 80015a4:	b662      	cpsie	i
}
 80015a6:	bf00      	nop
		__enable_irq();
		return HAL_OK;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3720      	adds	r7, #32
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <Flash_Write>:

//---------------------------------------------------------------------------------
uint32_t Flash_Write (uint32_t addr, void *data_ptr, uint16_t size){
 80015b2:	b5b0      	push	{r4, r5, r7, lr}
 80015b4:	b086      	sub	sp, #24
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	60f8      	str	r0, [r7, #12]
 80015ba:	60b9      	str	r1, [r7, #8]
 80015bc:	4613      	mov	r3, r2
 80015be:	80fb      	strh	r3, [r7, #6]
  __ASM volatile ("cpsid i" : : : "memory");
 80015c0:	b672      	cpsid	i
}
 80015c2:	bf00      	nop
	  * return HAL_StatusTypeDef HAL_OK or HAL_ERROR .
	  */

	HAL_StatusTypeDef status;
	__disable_irq();
	HAL_FLASH_Unlock();
 80015c4:	f006 f8b8 	bl	8007738 <HAL_FLASH_Unlock>

	for (uint8_t i = 0; i < size/2; i++)
 80015c8:	2300      	movs	r3, #0
 80015ca:	75bb      	strb	r3, [r7, #22]
 80015cc:	e019      	b.n	8001602 <Flash_Write+0x50>
	{
		status += HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr, ((uint16_t *)data_ptr)[i]);
 80015ce:	7dbb      	ldrb	r3, [r7, #22]
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	68ba      	ldr	r2, [r7, #8]
 80015d4:	4413      	add	r3, r2
 80015d6:	881b      	ldrh	r3, [r3, #0]
 80015d8:	b29b      	uxth	r3, r3
 80015da:	2200      	movs	r2, #0
 80015dc:	461c      	mov	r4, r3
 80015de:	4615      	mov	r5, r2
 80015e0:	4622      	mov	r2, r4
 80015e2:	462b      	mov	r3, r5
 80015e4:	68f9      	ldr	r1, [r7, #12]
 80015e6:	2001      	movs	r0, #1
 80015e8:	f005 ff40 	bl	800746c <HAL_FLASH_Program>
 80015ec:	4603      	mov	r3, r0
 80015ee:	461a      	mov	r2, r3
 80015f0:	7dfb      	ldrb	r3, [r7, #23]
 80015f2:	4413      	add	r3, r2
 80015f4:	75fb      	strb	r3, [r7, #23]
		addr+=2;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	3302      	adds	r3, #2
 80015fa:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < size/2; i++)
 80015fc:	7dbb      	ldrb	r3, [r7, #22]
 80015fe:	3301      	adds	r3, #1
 8001600:	75bb      	strb	r3, [r7, #22]
 8001602:	7dbb      	ldrb	r3, [r7, #22]
 8001604:	b29a      	uxth	r2, r3
 8001606:	88fb      	ldrh	r3, [r7, #6]
 8001608:	085b      	lsrs	r3, r3, #1
 800160a:	b29b      	uxth	r3, r3
 800160c:	429a      	cmp	r2, r3
 800160e:	d3de      	bcc.n	80015ce <Flash_Write+0x1c>
	}
	HAL_FLASH_Lock();
 8001610:	f006 f8b8 	bl	8007784 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8001614:	b662      	cpsie	i
}
 8001616:	bf00      	nop
	__enable_irq();

	if(status != HAL_OK)
 8001618:	7dfb      	ldrb	r3, [r7, #23]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <Flash_Write+0x70>
		return status;
 800161e:	7dfb      	ldrb	r3, [r7, #23]
 8001620:	e000      	b.n	8001624 <Flash_Write+0x72>
	else
		return addr;
 8001622:	68fb      	ldr	r3, [r7, #12]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bdb0      	pop	{r4, r5, r7, pc}

0800162c <Flash_Read>:
//---------------------------------------------------------------------------------
void Flash_Read (uint32_t addr, void *data_ptr, uint16_t size){
 800162c:	b480      	push	{r7}
 800162e:	b087      	sub	sp, #28
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	4613      	mov	r3, r2
 8001638:	80fb      	strh	r3, [r7, #6]
	 * Read data from flash into data_ptr
	 * addr  Base address.
	 * size  Size all data for recording into page.
	 *
	 */
	for (int i = 0; i < size; i++)
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
 800163e:	e00c      	b.n	800165a <Flash_Read+0x2e>
	{
		((uint8_t *)data_ptr)[i] = *(__IO uint32_t*)addr;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	6819      	ldr	r1, [r3, #0]
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	68ba      	ldr	r2, [r7, #8]
 8001648:	4413      	add	r3, r2
 800164a:	b2ca      	uxtb	r2, r1
 800164c:	701a      	strb	r2, [r3, #0]
		addr++;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	3301      	adds	r3, #1
 8001652:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < size; i++)
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	3301      	adds	r3, #1
 8001658:	617b      	str	r3, [r7, #20]
 800165a:	88fb      	ldrh	r3, [r7, #6]
 800165c:	697a      	ldr	r2, [r7, #20]
 800165e:	429a      	cmp	r2, r3
 8001660:	dbee      	blt.n	8001640 <Flash_Read+0x14>
	}
}
 8001662:	bf00      	nop
 8001664:	bf00      	nop
 8001666:	371c      	adds	r7, #28
 8001668:	46bd      	mov	sp, r7
 800166a:	bc80      	pop	{r7}
 800166c:	4770      	bx	lr

0800166e <OLED_Send_Command>:
		0x00, 0x00, 0x82, 0x7C, 0x10, 0x00,   // }
		0x00, 0x00, 0x06, 0x09, 0x09, 0x06    // ~ (Degrees)
};

//----------------------------------------------------------------------------
void OLED_Send_Command(struct OLED * self,uint8_t Command){
 800166e:	b580      	push	{r7, lr}
 8001670:	b086      	sub	sp, #24
 8001672:	af02      	add	r7, sp, #8
 8001674:	6078      	str	r0, [r7, #4]
 8001676:	460b      	mov	r3, r1
 8001678:	70fb      	strb	r3, [r7, #3]
	/**
	 * Send command to the OLED display
	 */
	uint8_t Local_Bufer[1]={0};
 800167a:	2300      	movs	r3, #0
 800167c:	733b      	strb	r3, [r7, #12]
	Local_Bufer[0]=OLED_Command_Buffer;
 800167e:	2380      	movs	r3, #128	; 0x80
 8001680:	733b      	strb	r3, [r7, #12]
	Local_Bufer[1]=Command;
 8001682:	78fb      	ldrb	r3, [r7, #3]
 8001684:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(self->hi2c,self->Adress,(uint8_t *)&Local_Bufer,(uint16_t)2,1000);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6818      	ldr	r0, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	8899      	ldrh	r1, [r3, #4]
 800168e:	f107 020c 	add.w	r2, r7, #12
 8001692:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001696:	9300      	str	r3, [sp, #0]
 8001698:	2302      	movs	r3, #2
 800169a:	f006 fced 	bl	8008078 <HAL_I2C_Master_Transmit>
}
 800169e:	bf00      	nop
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <OLED_Search_Adress>:
//----------------------------------------------------------------------------
void OLED_Search_Adress(struct OLED * self){
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b084      	sub	sp, #16
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
	/**
	 *	Searching address for current OLED
	 */
	for(int i=0;i<256;i++){
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	e012      	b.n	80016da <OLED_Search_Adress+0x34>
			if(HAL_I2C_IsDeviceReady((self->hi2c),i,10,2)==HAL_OK){
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6818      	ldr	r0, [r3, #0]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	b299      	uxth	r1, r3
 80016bc:	2302      	movs	r3, #2
 80016be:	220a      	movs	r2, #10
 80016c0:	f006 fdd8 	bl	8008274 <HAL_I2C_IsDeviceReady>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d104      	bne.n	80016d4 <OLED_Search_Adress+0x2e>
				self->Adress=i;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	b29a      	uxth	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	809a      	strh	r2, [r3, #4]
				break;
 80016d2:	e006      	b.n	80016e2 <OLED_Search_Adress+0x3c>
	for(int i=0;i<256;i++){
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	3301      	adds	r3, #1
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2bff      	cmp	r3, #255	; 0xff
 80016de:	dde9      	ble.n	80016b4 <OLED_Search_Adress+0xe>
			}
		}
}
 80016e0:	bf00      	nop
 80016e2:	bf00      	nop
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <OLED_ini>:
//----------------------------------------------------------------------------

void OLED_ini(struct OLED * self){
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b082      	sub	sp, #8
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
	/**
	 * Command initialization of OLED display
	 */
	OLED_Send_Command(self,0xAF);		//Display on/off
 80016f2:	21af      	movs	r1, #175	; 0xaf
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f7ff ffba 	bl	800166e <OLED_Send_Command>

	OLED_Send_Command(self,0xA6);		//Normal/inverse color mode
 80016fa:	21a6      	movs	r1, #166	; 0xa6
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7ff ffb6 	bl	800166e <OLED_Send_Command>

	OLED_Send_Command(self,0x20);		//Set page address mode
 8001702:	2120      	movs	r1, #32
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7ff ffb2 	bl	800166e <OLED_Send_Command>
	OLED_Send_Command(self,0x0);
 800170a:	2100      	movs	r1, #0
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f7ff ffae 	bl	800166e <OLED_Send_Command>

	OLED_Send_Command(self,0x8d);		//Pump Charge
 8001712:	218d      	movs	r1, #141	; 0x8d
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7ff ffaa 	bl	800166e <OLED_Send_Command>

	OLED_Send_Command(self,0xA4);		//Entire display on (output flows/ignore ram)
 800171a:	21a4      	movs	r1, #164	; 0xa4
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f7ff ffa6 	bl	800166e <OLED_Send_Command>

	OLED_Send_Command(self,0xA0);		//Segment re-map
 8001722:	21a0      	movs	r1, #160	; 0xa0
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f7ff ffa2 	bl	800166e <OLED_Send_Command>

	OLED_Send_Command(self,0xC7);		//Com output right direction/inverse direction
 800172a:	21c7      	movs	r1, #199	; 0xc7
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7ff ff9e 	bl	800166e <OLED_Send_Command>

	OLED_Clear_Display(self);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f000 f876 	bl	8001824 <OLED_Clear_Display>

	OLED_Send_Command(self,0x21);    	//Set COM remap value(Set Column Address)
 8001738:	2121      	movs	r1, #33	; 0x21
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f7ff ff97 	bl	800166e <OLED_Send_Command>
	OLED_Send_Command(self,0x1);			//1
 8001740:	2101      	movs	r1, #1
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff ff93 	bl	800166e <OLED_Send_Command>
	OLED_Send_Command(self,0x7E);		//126
 8001748:	217e      	movs	r1, #126	; 0x7e
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7ff ff8f 	bl	800166e <OLED_Send_Command>

	OLED_Send_Command(self,0x22);		//Set Page Address
 8001750:	2122      	movs	r1, #34	; 0x22
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff ff8b 	bl	800166e <OLED_Send_Command>
	OLED_Send_Command(self,0x0);
 8001758:	2100      	movs	r1, #0
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7ff ff87 	bl	800166e <OLED_Send_Command>
	OLED_Send_Command(self,0x7);
 8001760:	2107      	movs	r1, #7
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f7ff ff83 	bl	800166e <OLED_Send_Command>

}
 8001768:	bf00      	nop
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <OLED_Set_Cursor>:
//----------------------------------------------------------------------------
void OLED_Set_Cursor(struct OLED * self,uint16_t x,uint8_t y){
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	460b      	mov	r3, r1
 800177a:	807b      	strh	r3, [r7, #2]
 800177c:	4613      	mov	r3, r2
 800177e:	707b      	strb	r3, [r7, #1]
	/**
	 * Sets position on display from what will be display
	 */
	OLED_Send_Command(self,0xB0|y);
 8001780:	787b      	ldrb	r3, [r7, #1]
 8001782:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8001786:	b2db      	uxtb	r3, r3
 8001788:	4619      	mov	r1, r3
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7ff ff6f 	bl	800166e <OLED_Send_Command>
	OLED_Send_Command(self,x & 0x0F);
 8001790:	887b      	ldrh	r3, [r7, #2]
 8001792:	b2db      	uxtb	r3, r3
 8001794:	f003 030f 	and.w	r3, r3, #15
 8001798:	b2db      	uxtb	r3, r3
 800179a:	4619      	mov	r1, r3
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f7ff ff66 	bl	800166e <OLED_Send_Command>
	OLED_Send_Command(self,((x>>4) & 0x0F)+0x10);
 80017a2:	887b      	ldrh	r3, [r7, #2]
 80017a4:	091b      	lsrs	r3, r3, #4
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	f003 030f 	and.w	r3, r3, #15
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	3310      	adds	r3, #16
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	4619      	mov	r1, r3
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f7ff ff59 	bl	800166e <OLED_Send_Command>
}
 80017bc:	bf00      	nop
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <OLED_Set_Char_Cursor>:
//----------------------------------------------------------------------------
void OLED_Set_Char_Cursor(struct OLED * self, uint16_t x,uint8_t y){
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	460b      	mov	r3, r1
 80017ce:	807b      	strh	r3, [r7, #2]
 80017d0:	4613      	mov	r3, r2
 80017d2:	707b      	strb	r3, [r7, #1]
	/**
	 * Sets position on display from what will be display based on ASII symbols size
	 */
	x*=6;
 80017d4:	887b      	ldrh	r3, [r7, #2]
 80017d6:	461a      	mov	r2, r3
 80017d8:	0052      	lsls	r2, r2, #1
 80017da:	4413      	add	r3, r2
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	807b      	strh	r3, [r7, #2]
	OLED_Send_Command(self,0xB0|y);
 80017e0:	787b      	ldrb	r3, [r7, #1]
 80017e2:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	4619      	mov	r1, r3
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7ff ff3f 	bl	800166e <OLED_Send_Command>
	OLED_Send_Command(self,x & 0x0F);
 80017f0:	887b      	ldrh	r3, [r7, #2]
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	f003 030f 	and.w	r3, r3, #15
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	4619      	mov	r1, r3
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f7ff ff36 	bl	800166e <OLED_Send_Command>
	OLED_Send_Command(self,((x>>4) & 0x0F)+0x10);
 8001802:	887b      	ldrh	r3, [r7, #2]
 8001804:	091b      	lsrs	r3, r3, #4
 8001806:	b29b      	uxth	r3, r3
 8001808:	b2db      	uxtb	r3, r3
 800180a:	f003 030f 	and.w	r3, r3, #15
 800180e:	b2db      	uxtb	r3, r3
 8001810:	3310      	adds	r3, #16
 8001812:	b2db      	uxtb	r3, r3
 8001814:	4619      	mov	r1, r3
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f7ff ff29 	bl	800166e <OLED_Send_Command>
}
 800181c:	bf00      	nop
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <OLED_Clear_Display>:
//----------------------------------------------------------------------------
void OLED_Clear_Display(struct OLED * self){
 8001824:	b580      	push	{r7, lr}
 8001826:	b0a6      	sub	sp, #152	; 0x98
 8001828:	af02      	add	r7, sp, #8
 800182a:	6078      	str	r0, [r7, #4]
	/**
	 * Clear OLED display
	 */
	uint8_t Local_Bufer[129]={0};
 800182c:	2300      	movs	r3, #0
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	f107 0310 	add.w	r3, r7, #16
 8001834:	227d      	movs	r2, #125	; 0x7d
 8001836:	2100      	movs	r1, #0
 8001838:	4618      	mov	r0, r3
 800183a:	f009 fbd9 	bl	800aff0 <memset>
	Local_Bufer[0]=OLED_Data_Buffer;
 800183e:	2340      	movs	r3, #64	; 0x40
 8001840:	733b      	strb	r3, [r7, #12]
	for(uint8_t j=0;j<8;j++){
 8001842:	2300      	movs	r3, #0
 8001844:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8001848:	e017      	b.n	800187a <OLED_Clear_Display+0x56>
		OLED_Set_Cursor(self,0,j);
 800184a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800184e:	461a      	mov	r2, r3
 8001850:	2100      	movs	r1, #0
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f7ff ff8c 	bl	8001770 <OLED_Set_Cursor>
		HAL_I2C_Master_Transmit(self->hi2c,self->Adress,(uint8_t *)&Local_Bufer,(uint16_t)129,1000);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6818      	ldr	r0, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	8899      	ldrh	r1, [r3, #4]
 8001860:	f107 020c 	add.w	r2, r7, #12
 8001864:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001868:	9300      	str	r3, [sp, #0]
 800186a:	2381      	movs	r3, #129	; 0x81
 800186c:	f006 fc04 	bl	8008078 <HAL_I2C_Master_Transmit>
	for(uint8_t j=0;j<8;j++){
 8001870:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001874:	3301      	adds	r3, #1
 8001876:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800187a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800187e:	2b07      	cmp	r3, #7
 8001880:	d9e3      	bls.n	800184a <OLED_Clear_Display+0x26>
		}
}
 8001882:	bf00      	nop
 8001884:	bf00      	nop
 8001886:	3790      	adds	r7, #144	; 0x90
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <OLED_Send_Char>:
//----------------------------------------------------------------------------
void OLED_Send_Char(struct OLED * self, uint8_t data){
 800188c:	b580      	push	{r7, lr}
 800188e:	b088      	sub	sp, #32
 8001890:	af02      	add	r7, sp, #8
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	460b      	mov	r3, r1
 8001896:	70fb      	strb	r3, [r7, #3]
	/**
	 * Drawing char on a OLED display
	 */
	uint8_t Local_Bufer[7]={0};
 8001898:	2300      	movs	r3, #0
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	f107 030c 	add.w	r3, r7, #12
 80018a0:	2100      	movs	r1, #0
 80018a2:	460a      	mov	r2, r1
 80018a4:	801a      	strh	r2, [r3, #0]
 80018a6:	460a      	mov	r2, r1
 80018a8:	709a      	strb	r2, [r3, #2]
	Local_Bufer[0]=OLED_Data_Buffer;
 80018aa:	2340      	movs	r3, #64	; 0x40
 80018ac:	723b      	strb	r3, [r7, #8]
	int sp=(data-(int)' ')*6;
 80018ae:	78fb      	ldrb	r3, [r7, #3]
 80018b0:	f1a3 0220 	sub.w	r2, r3, #32
 80018b4:	4613      	mov	r3, r2
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	4413      	add	r3, r2
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	613b      	str	r3, [r7, #16]
	for(int j=1;j<7;j++)
 80018be:	2301      	movs	r3, #1
 80018c0:	617b      	str	r3, [r7, #20]
 80018c2:	e00e      	b.n	80018e2 <OLED_Send_Char+0x56>
		Local_Bufer[j]=CharMass[sp+j-1];
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	4413      	add	r3, r2
 80018ca:	3b01      	subs	r3, #1
 80018cc:	4a0e      	ldr	r2, [pc, #56]	; (8001908 <OLED_Send_Char+0x7c>)
 80018ce:	5cd1      	ldrb	r1, [r2, r3]
 80018d0:	f107 0208 	add.w	r2, r7, #8
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	4413      	add	r3, r2
 80018d8:	460a      	mov	r2, r1
 80018da:	701a      	strb	r2, [r3, #0]
	for(int j=1;j<7;j++)
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	3301      	adds	r3, #1
 80018e0:	617b      	str	r3, [r7, #20]
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	2b06      	cmp	r3, #6
 80018e6:	dded      	ble.n	80018c4 <OLED_Send_Char+0x38>

	HAL_I2C_Master_Transmit(self->hi2c,self->Adress,(uint8_t *)&Local_Bufer,(uint16_t)7,1000);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6818      	ldr	r0, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	8899      	ldrh	r1, [r3, #4]
 80018f0:	f107 0208 	add.w	r2, r7, #8
 80018f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	2307      	movs	r3, #7
 80018fc:	f006 fbbc 	bl	8008078 <HAL_I2C_Master_Transmit>

}
 8001900:	bf00      	nop
 8001902:	3718      	adds	r7, #24
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	20000000 	.word	0x20000000

0800190c <OLED_Clear_Line>:
	 */
	OLED_Set_Char_Cursor(self,x, y);
	OLED_Send_Char(self,' ');
}
//----------------------------------------------------------------------------
void OLED_Clear_Line (struct OLED * self, uint8_t y){
 800190c:	b580      	push	{r7, lr}
 800190e:	b0a4      	sub	sp, #144	; 0x90
 8001910:	af02      	add	r7, sp, #8
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	460b      	mov	r3, r1
 8001916:	70fb      	strb	r3, [r7, #3]
	/**
	 * Clear line on OLED display
	 */
	uint8_t Local_Bufer[127]={0};
 8001918:	2300      	movs	r3, #0
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	f107 030c 	add.w	r3, r7, #12
 8001920:	227b      	movs	r2, #123	; 0x7b
 8001922:	2100      	movs	r1, #0
 8001924:	4618      	mov	r0, r3
 8001926:	f009 fb63 	bl	800aff0 <memset>
	Local_Bufer[0]=OLED_Data_Buffer;
 800192a:	2340      	movs	r3, #64	; 0x40
 800192c:	723b      	strb	r3, [r7, #8]
	OLED_Set_Cursor(self,0,y);
 800192e:	78fb      	ldrb	r3, [r7, #3]
 8001930:	461a      	mov	r2, r3
 8001932:	2100      	movs	r1, #0
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f7ff ff1b 	bl	8001770 <OLED_Set_Cursor>
	HAL_I2C_Master_Transmit(self->hi2c,self->Adress,(uint8_t *)&Local_Bufer,(uint16_t)127,1000);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6818      	ldr	r0, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	8899      	ldrh	r1, [r3, #4]
 8001942:	f107 0208 	add.w	r2, r7, #8
 8001946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800194a:	9300      	str	r3, [sp, #0]
 800194c:	237f      	movs	r3, #127	; 0x7f
 800194e:	f006 fb93 	bl	8008078 <HAL_I2C_Master_Transmit>
}
 8001952:	bf00      	nop
 8001954:	3788      	adds	r7, #136	; 0x88
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
	...

0800195c <OLED_Send_String>:
//----------------------------------------------------------------------------
void OLED_Send_String(struct OLED * self,char* str, enum Display_Write_MODE Display_Write_MODE){
 800195c:	b580      	push	{r7, lr}
 800195e:	b08a      	sub	sp, #40	; 0x28
 8001960:	af02      	add	r7, sp, #8
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	4613      	mov	r3, r2
 8001968:	71fb      	strb	r3, [r7, #7]
	/**
	 * Drawing string on a OLED display
	 */
	uint8_t *Local_Buffer=malloc(sizeof(uint8_t)*strlen(str)*6+1);	//Create a local buffer for str*6(because every symbol has size 6) +1 for data address
 800196a:	68b8      	ldr	r0, [r7, #8]
 800196c:	f7fe fbf0 	bl	8000150 <strlen>
 8001970:	4602      	mov	r2, r0
 8001972:	4613      	mov	r3, r2
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	4413      	add	r3, r2
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	3301      	adds	r3, #1
 800197c:	4618      	mov	r0, r3
 800197e:	f009 fa7b 	bl	800ae78 <malloc>
 8001982:	4603      	mov	r3, r0
 8001984:	617b      	str	r3, [r7, #20]
	Local_Buffer[0]=OLED_Data_Buffer;							//Set buffer address as first transfered data
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	2240      	movs	r2, #64	; 0x40
 800198a:	701a      	strb	r2, [r3, #0]

	int i=0,													//i sift string symbol every iteration
 800198c:	2300      	movs	r3, #0
 800198e:	61fb      	str	r3, [r7, #28]
		sp;														//Contain the first column of symbol
	uint8_t j;
	uint16_t counter=0;											//Count quantity of symbols
 8001990:	2300      	movs	r3, #0
 8001992:	833b      	strh	r3, [r7, #24]
	while(str[i]!='\0'){										//Loop while str not end
 8001994:	e04f      	b.n	8001a36 <OLED_Send_String+0xda>
		if(str[i]=='\r'||str[i]=='\n'){							//filter all another special symbols
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	68ba      	ldr	r2, [r7, #8]
 800199a:	4413      	add	r3, r2
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b0d      	cmp	r3, #13
 80019a0:	d005      	beq.n	80019ae <OLED_Send_String+0x52>
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	68ba      	ldr	r2, [r7, #8]
 80019a6:	4413      	add	r3, r2
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2b0a      	cmp	r3, #10
 80019ac:	d103      	bne.n	80019b6 <OLED_Send_String+0x5a>
			i++;
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	3301      	adds	r3, #1
 80019b2:	61fb      	str	r3, [r7, #28]
			continue;
 80019b4:	e03f      	b.n	8001a36 <OLED_Send_String+0xda>
		}
		sp=(str[i]-(int)' ')*6;									//Computing the first column of symbol
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	68ba      	ldr	r2, [r7, #8]
 80019ba:	4413      	add	r3, r2
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	f1a3 0220 	sub.w	r2, r3, #32
 80019c2:	4613      	mov	r3, r2
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	4413      	add	r3, r2
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	613b      	str	r3, [r7, #16]
		for(j=0;j<6;j++){										//Write 6 column of symbol based on Display_Write_MODE
 80019cc:	2300      	movs	r3, #0
 80019ce:	76fb      	strb	r3, [r7, #27]
 80019d0:	e028      	b.n	8001a24 <OLED_Send_String+0xc8>
			if(Display_Write_MODE==Direct_Display_MODE)
 80019d2:	79fb      	ldrb	r3, [r7, #7]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d110      	bne.n	80019fa <OLED_Send_String+0x9e>
				Local_Buffer[(j+counter*6)+1]=CharMass[sp+j];
 80019d8:	7efa      	ldrb	r2, [r7, #27]
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	18d1      	adds	r1, r2, r3
 80019de:	7ef8      	ldrb	r0, [r7, #27]
 80019e0:	8b3a      	ldrh	r2, [r7, #24]
 80019e2:	4613      	mov	r3, r2
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	4413      	add	r3, r2
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	4403      	add	r3, r0
 80019ec:	3301      	adds	r3, #1
 80019ee:	697a      	ldr	r2, [r7, #20]
 80019f0:	4413      	add	r3, r2
 80019f2:	4a20      	ldr	r2, [pc, #128]	; (8001a74 <OLED_Send_String+0x118>)
 80019f4:	5c52      	ldrb	r2, [r2, r1]
 80019f6:	701a      	strb	r2, [r3, #0]
 80019f8:	e011      	b.n	8001a1e <OLED_Send_String+0xc2>
			else
				Local_Buffer[(j+counter*6)+1]=~CharMass[sp+j];
 80019fa:	7efa      	ldrb	r2, [r7, #27]
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	4413      	add	r3, r2
 8001a00:	4a1c      	ldr	r2, [pc, #112]	; (8001a74 <OLED_Send_String+0x118>)
 8001a02:	5cd1      	ldrb	r1, [r2, r3]
 8001a04:	7ef8      	ldrb	r0, [r7, #27]
 8001a06:	8b3a      	ldrh	r2, [r7, #24]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	4413      	add	r3, r2
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	4403      	add	r3, r0
 8001a12:	3301      	adds	r3, #1
 8001a14:	697a      	ldr	r2, [r7, #20]
 8001a16:	4413      	add	r3, r2
 8001a18:	43ca      	mvns	r2, r1
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	701a      	strb	r2, [r3, #0]
		for(j=0;j<6;j++){										//Write 6 column of symbol based on Display_Write_MODE
 8001a1e:	7efb      	ldrb	r3, [r7, #27]
 8001a20:	3301      	adds	r3, #1
 8001a22:	76fb      	strb	r3, [r7, #27]
 8001a24:	7efb      	ldrb	r3, [r7, #27]
 8001a26:	2b05      	cmp	r3, #5
 8001a28:	d9d3      	bls.n	80019d2 <OLED_Send_String+0x76>
		}
		i++;
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	61fb      	str	r3, [r7, #28]
		counter++;
 8001a30:	8b3b      	ldrh	r3, [r7, #24]
 8001a32:	3301      	adds	r3, #1
 8001a34:	833b      	strh	r3, [r7, #24]
	while(str[i]!='\0'){										//Loop while str not end
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	68ba      	ldr	r2, [r7, #8]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1a9      	bne.n	8001996 <OLED_Send_String+0x3a>
	}
	HAL_I2C_Master_Transmit(self->hi2c,self->Adress,Local_Buffer,(uint16_t)(counter*6)+1,1000);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6818      	ldr	r0, [r3, #0]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	8899      	ldrh	r1, [r3, #4]
 8001a4a:	8b3b      	ldrh	r3, [r7, #24]
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	0052      	lsls	r2, r2, #1
 8001a50:	4413      	add	r3, r2
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	3301      	adds	r3, #1
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a5e:	9200      	str	r2, [sp, #0]
 8001a60:	697a      	ldr	r2, [r7, #20]
 8001a62:	f006 fb09 	bl	8008078 <HAL_I2C_Master_Transmit>
	free(Local_Buffer);
 8001a66:	6978      	ldr	r0, [r7, #20]
 8001a68:	f009 fa0e 	bl	800ae88 <free>
}
 8001a6c:	bf00      	nop
 8001a6e:	3720      	adds	r7, #32
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	20000000 	.word	0x20000000

08001a78 <PAC_Base_Create>:
 */
#include "PAC.h"
//---------------------------------------------------------------------------------
void PAC_Reset(struct PAC *self);
//---------------------------------------------------------------------------------
struct PAC *PAC_Base_Create(struct PAC_Init *self){
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]

	struct PAC *PAC = malloc(sizeof(struct PAC));
 8001a80:	202c      	movs	r0, #44	; 0x2c
 8001a82:	f009 f9f9 	bl	800ae78 <malloc>
 8001a86:	4603      	mov	r3, r0
 8001a88:	60fb      	str	r3, [r7, #12]
	PAC->ZCD.tim = malloc(sizeof(TIM_HandleTypeDef));
 8001a8a:	2048      	movs	r0, #72	; 0x48
 8001a8c:	f009 f9f4 	bl	800ae78 <malloc>
 8001a90:	4603      	mov	r3, r0
 8001a92:	461a      	mov	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	60da      	str	r2, [r3, #12]

	PAC->ZCD.DMA = self->DMA;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	601a      	str	r2, [r3, #0]
	PAC->ZCD.DMA_Chanel = self->DMA_Chanel;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685a      	ldr	r2, [r3, #4]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	605a      	str	r2, [r3, #4]
	PAC->ZCD.TIM_Instance = self->TIM_Instance;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689a      	ldr	r2, [r3, #8]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	609a      	str	r2, [r3, #8]
	PAC->ZCD.IC_Trigger_Channel_GPIO = self->IC_Trigger_Channel_GPIO;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	68da      	ldr	r2, [r3, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	611a      	str	r2, [r3, #16]
	PAC->ZCD.IC_Trigger_Channel_PIN = self->IC_Trigger_Channel_PIN;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	8a1a      	ldrh	r2, [r3, #16]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	829a      	strh	r2, [r3, #20]
	PAC->ZCD.TIM_CHANNEL = self->TIM_CHANNEL;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	695a      	ldr	r2, [r3, #20]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	619a      	str	r2, [r3, #24]
	PAC->ZCD.State = ZCD_STATE_OFF;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2200      	movs	r2, #0
 8001acc:	771a      	strb	r2, [r3, #28]

	PAC_Reset(PAC);
 8001ace:	68f8      	ldr	r0, [r7, #12]
 8001ad0:	f000 fc32 	bl	8002338 <PAC_Reset>

	PAC->PAC_Devices_Control_Vector_Head = NULL;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	629a      	str	r2, [r3, #40]	; 0x28

	return PAC;
 8001ada:	68fb      	ldr	r3, [r7, #12]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3710      	adds	r7, #16
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <PAC_Devise_Control_Create>:
//---------------------------------------------------------------------------------
struct PAC_Devices_Control_Vector *PAC_Devise_Control_Create(struct PAC *self, struct PAC_Devices_Control_Init *element){
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
	/**
	 * Create new PAC_Control_Unit to PAC_Devices_Control_Vector into PAC
	 * return pointer to new PAC_Control_Unit
	 */
	struct PAC_Devices_Control_Vector *NEW_Element = malloc(sizeof(struct PAC_Devices_Control_Vector));	//allocate memory for a new element
 8001aee:	201c      	movs	r0, #28
 8001af0:	f009 f9c2 	bl	800ae78 <malloc>
 8001af4:	4603      	mov	r3, r0
 8001af6:	60bb      	str	r3, [r7, #8]
	NEW_Element->Channel_PIN = element->Channel_PIN;									//copy data to a new element
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	881a      	ldrh	r2, [r3, #0]
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	809a      	strh	r2, [r3, #4]
	NEW_Element->Channel_GPIO = element->Channel_GPIO;
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685a      	ldr	r2, [r3, #4]
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	609a      	str	r2, [r3, #8]
	NEW_Element->TIM_CHANNEL = element->TIM_CHANNEL;
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	60da      	str	r2, [r3, #12]
	NEW_Element->tim = self->ZCD.tim;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	68da      	ldr	r2, [r3, #12]
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	611a      	str	r2, [r3, #16]
	NEW_Element->State = PAC_Device_OFF;
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	751a      	strb	r2, [r3, #20]
	NEW_Element->next = NULL;
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
	NEW_Element->Parent = self;
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	619a      	str	r2, [r3, #24]
	if(self->PAC_Devices_Control_Vector_Head == NULL){									//Check. is this a first element
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d103      	bne.n	8001b3a <PAC_Devise_Control_Create+0x56>
		self->PAC_Devices_Control_Vector_Head = NEW_Element;							// New element is head
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	68ba      	ldr	r2, [r7, #8]
 8001b36:	629a      	str	r2, [r3, #40]	; 0x28
 8001b38:	e00d      	b.n	8001b56 <PAC_Devise_Control_Create+0x72>
	}else{																				// else skip to last element
		struct PAC_Devices_Control_Vector *now = self->PAC_Devices_Control_Vector_Head;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3e:	60fb      	str	r3, [r7, #12]
		while(now->next!=NULL){
 8001b40:	e002      	b.n	8001b48 <PAC_Devise_Control_Create+0x64>
			now=now->next;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	60fb      	str	r3, [r7, #12]
		while(now->next!=NULL){
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d1f8      	bne.n	8001b42 <PAC_Devise_Control_Create+0x5e>
		}
		now->next=NEW_Element;															//next last element is new element
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	68ba      	ldr	r2, [r7, #8]
 8001b54:	601a      	str	r2, [r3, #0]
	}
	return NEW_Element;																	//return pointer for a new element
 8001b56:	68bb      	ldr	r3, [r7, #8]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <PAC_IC_Init>:
//----------------------------------------------------------------------------------------------
void PAC_IC_Init(struct PAC *self){
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b092      	sub	sp, #72	; 0x48
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
	/**
	 * Initializing TIM, DMA and PIN into input capture mode
	 */

	PAC_Reset(self);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f000 fbe5 	bl	8002338 <PAC_Reset>

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	605a      	str	r2, [r3, #4]
 8001b78:	609a      	str	r2, [r3, #8]
 8001b7a:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Pin = self->ZCD.IC_Trigger_Channel_PIN;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	8a9b      	ldrh	r3, [r3, #20]
 8001b80:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b82:	2300      	movs	r3, #0
 8001b84:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(self->ZCD.IC_Trigger_Channel_GPIO, &GPIO_InitStruct);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001b92:	4611      	mov	r1, r2
 8001b94:	4618      	mov	r0, r3
 8001b96:	f005 ff5f 	bl	8007a58 <HAL_GPIO_Init>

	struct PAC_Devices_Control_Vector *now = self->PAC_Devices_Control_Vector_Head;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9e:	647b      	str	r3, [r7, #68]	; 0x44

	while(now != NULL){
 8001ba0:	e01b      	b.n	8001bda <PAC_IC_Init+0x7a>
		GPIO_InitStruct.Pin = now->Channel_PIN;
 8001ba2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ba4:	889b      	ldrh	r3, [r3, #4]
 8001ba6:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	63fb      	str	r3, [r7, #60]	; 0x3c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	643b      	str	r3, [r7, #64]	; 0x40
		HAL_GPIO_Init(now->Channel_GPIO, &GPIO_InitStruct);
 8001bb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001bbc:	4611      	mov	r1, r2
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f005 ff4a 	bl	8007a58 <HAL_GPIO_Init>
		HAL_GPIO_WritePin(now->Channel_GPIO, now->Channel_PIN, GPIO_PIN_RESET);
 8001bc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bc6:	6898      	ldr	r0, [r3, #8]
 8001bc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bca:	889b      	ldrh	r3, [r3, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	4619      	mov	r1, r3
 8001bd0:	f006 f8dd 	bl	8007d8e <HAL_GPIO_WritePin>
		now=now->next;
 8001bd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	647b      	str	r3, [r7, #68]	; 0x44
	while(now != NULL){
 8001bda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d1e0      	bne.n	8001ba2 <PAC_IC_Init+0x42>
	}


	self->ZCD.DMA->Instance = self->ZCD.DMA_Chanel;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	6852      	ldr	r2, [r2, #4]
 8001be8:	601a      	str	r2, [r3, #0]
	self->ZCD.DMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	605a      	str	r2, [r3, #4]
	self->ZCD.DMA->Init.PeriphInc = DMA_PINC_DISABLE;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	609a      	str	r2, [r3, #8]
	self->ZCD.DMA->Init.MemInc = DMA_MINC_ENABLE;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2280      	movs	r2, #128	; 0x80
 8001c00:	60da      	str	r2, [r3, #12]
	self->ZCD.DMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c0a:	611a      	str	r2, [r3, #16]
	self->ZCD.DMA->Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c14:	615a      	str	r2, [r3, #20]
	self->ZCD.DMA->Init.Mode = DMA_NORMAL;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	619a      	str	r2, [r3, #24]
	self->ZCD.DMA->Init.Priority = DMA_PRIORITY_LOW;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2200      	movs	r2, #0
 8001c24:	61da      	str	r2, [r3, #28]
	HAL_DMA_Init(self->ZCD.DMA);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f005 f9d4 	bl	8006fd8 <HAL_DMA_Init>


	self->ZCD.tim->hdma[TIM_DMA_ID_CC1] = self->ZCD.DMA;			//__HAL_LINKDMA
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	6812      	ldr	r2, [r2, #0]
 8001c38:	625a      	str	r2, [r3, #36]	; 0x24
	self->ZCD.DMA->Parent = self->ZCD.tim;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	68d2      	ldr	r2, [r2, #12]
 8001c42:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001c44:	2200      	movs	r2, #0
 8001c46:	2100      	movs	r1, #0
 8001c48:	2010      	movs	r0, #16
 8001c4a:	f005 f980 	bl	8006f4e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001c4e:	2010      	movs	r0, #16
 8001c50:	f005 f999 	bl	8006f86 <HAL_NVIC_EnableIRQ>



	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	609a      	str	r2, [r3, #8]
 8001c60:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c62:	f107 031c 	add.w	r3, r7, #28
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = {0};
 8001c6c:	f107 030c 	add.w	r3, r7, #12
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]

	__HAL_RCC_TIM3_CLK_ENABLE();
 8001c7a:	4b2e      	ldr	r3, [pc, #184]	; (8001d34 <PAC_IC_Init+0x1d4>)
 8001c7c:	69db      	ldr	r3, [r3, #28]
 8001c7e:	4a2d      	ldr	r2, [pc, #180]	; (8001d34 <PAC_IC_Init+0x1d4>)
 8001c80:	f043 0302 	orr.w	r3, r3, #2
 8001c84:	61d3      	str	r3, [r2, #28]
 8001c86:	4b2b      	ldr	r3, [pc, #172]	; (8001d34 <PAC_IC_Init+0x1d4>)
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	60bb      	str	r3, [r7, #8]
 8001c90:	68bb      	ldr	r3, [r7, #8]

	self->ZCD.tim->Instance = self->ZCD.TIM_Instance;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	6892      	ldr	r2, [r2, #8]
 8001c9a:	601a      	str	r2, [r3, #0]
	self->ZCD.tim->Init.Prescaler = 799;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	f240 321f 	movw	r2, #799	; 0x31f
 8001ca4:	605a      	str	r2, [r3, #4]
	self->ZCD.tim->Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	2200      	movs	r2, #0
 8001cac:	609a      	str	r2, [r3, #8]
	self->ZCD.tim->Init.Period = 65535;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cb6:	60da      	str	r2, [r3, #12]
	self->ZCD.tim->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	611a      	str	r2, [r3, #16]
	self->ZCD.tim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(self->ZCD.tim);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f007 fac3 	bl	8009258 <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cd6:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_TIM_ConfigClockSource(self->ZCD.tim, &sClockSourceConfig);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001ce0:	4611      	mov	r1, r2
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f008 fa04 	bl	800a0f0 <HAL_TIM_ConfigClockSource>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cec:	2300      	movs	r3, #0
 8001cee:	623b      	str	r3, [r7, #32]
	HAL_TIMEx_MasterConfigSynchronization(self->ZCD.tim, &sMasterConfig);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	f107 021c 	add.w	r2, r7, #28
 8001cf8:	4611      	mov	r1, r2
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f009 f84c 	bl	800ad98 <HAL_TIMEx_MasterConfigSynchronization>

	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001d00:	2300      	movs	r3, #0
 8001d02:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001d04:	2301      	movs	r3, #1
 8001d06:	613b      	str	r3, [r7, #16]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]
	sConfigIC.ICFilter = 0;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	61bb      	str	r3, [r7, #24]
	HAL_TIM_IC_ConfigChannel(self->ZCD.tim, &sConfigIC, TIM_CHANNEL_1);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	f107 010c 	add.w	r1, r7, #12
 8001d18:	2200      	movs	r2, #0
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f008 f896 	bl	8009e4c <HAL_TIM_IC_ConfigChannel>

	HAL_TIM_IC_Init(self->ZCD.tim);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f007 fd49 	bl	80097bc <HAL_TIM_IC_Init>



}
 8001d2a:	bf00      	nop
 8001d2c:	3748      	adds	r7, #72	; 0x48
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40021000 	.word	0x40021000

08001d38 <PAC_IC_DeInit>:
//----------------------------------------------------------------------------------------------
void PAC_IC_DeInit(struct PAC *self){
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]

	__HAL_RCC_TIM3_CLK_DISABLE();
 8001d40:	4b0c      	ldr	r3, [pc, #48]	; (8001d74 <PAC_IC_DeInit+0x3c>)
 8001d42:	69db      	ldr	r3, [r3, #28]
 8001d44:	4a0b      	ldr	r2, [pc, #44]	; (8001d74 <PAC_IC_DeInit+0x3c>)
 8001d46:	f023 0302 	bic.w	r3, r3, #2
 8001d4a:	61d3      	str	r3, [r2, #28]

	//HAL_GPIO_DeInit(self->ZCD.IC_Trigger_Channel_GPIO, self->ZCD.IC_Trigger_Channel_PIN);

	HAL_DMA_DeInit(self->ZCD.tim->hdma[TIM_DMA_ID_CC1]);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d52:	4618      	mov	r0, r3
 8001d54:	f005 f99a 	bl	800708c <HAL_DMA_DeInit>
	HAL_TIM_IC_DeInit(self->ZCD.tim);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f007 fd7c 	bl	800985a <HAL_TIM_IC_DeInit>

	HAL_TIM_Base_DeInit(self->ZCD.tim);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f007 fac5 	bl	80092f6 <HAL_TIM_Base_DeInit>

	//HAL_NVIC_DisableIRQ(DMA1_Channel6_IRQn);

}
 8001d6c:	bf00      	nop
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40021000 	.word	0x40021000

08001d78 <PAC_PWM_Init>:
//---------------------------------------------------------------------------------
void PAC_PWM_Init(struct PAC *self){
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b096      	sub	sp, #88	; 0x58
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
	/**
	 * Initializing TIM and PINs into PWM mode
	 */

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d80:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
 8001d8c:	60da      	str	r2, [r3, #12]


    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d8e:	4b56      	ldr	r3, [pc, #344]	; (8001ee8 <PAC_PWM_Init+0x170>)
 8001d90:	69db      	ldr	r3, [r3, #28]
 8001d92:	4a55      	ldr	r2, [pc, #340]	; (8001ee8 <PAC_PWM_Init+0x170>)
 8001d94:	f043 0302 	orr.w	r3, r3, #2
 8001d98:	61d3      	str	r3, [r2, #28]
 8001d9a:	4b53      	ldr	r3, [pc, #332]	; (8001ee8 <PAC_PWM_Init+0x170>)
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	60bb      	str	r3, [r7, #8]
 8001da4:	68bb      	ldr	r3, [r7, #8]

	GPIO_InitStruct.Pin = self->ZCD.IC_Trigger_Channel_PIN;				//Initializing TIMs TI1FP1 PIN
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	8a9b      	ldrh	r3, [r3, #20]
 8001daa:	647b      	str	r3, [r7, #68]	; 0x44
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dac:	2300      	movs	r3, #0
 8001dae:	64bb      	str	r3, [r7, #72]	; 0x48
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	64fb      	str	r3, [r7, #76]	; 0x4c
	HAL_GPIO_Init(self->ZCD.IC_Trigger_Channel_GPIO, &GPIO_InitStruct);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001dbc:	4611      	mov	r1, r2
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f005 fe4a 	bl	8007a58 <HAL_GPIO_Init>


	struct PAC_Devices_Control_Vector *now = self->PAC_Devices_Control_Vector_Head;		//Initializing TIM's CHANNELs PINs
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc8:	657b      	str	r3, [r7, #84]	; 0x54
	while(now != NULL){
 8001dca:	e011      	b.n	8001df0 <PAC_PWM_Init+0x78>
		GPIO_InitStruct.Pin = now->Channel_PIN;
 8001dcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dce:	889b      	ldrh	r3, [r3, #4]
 8001dd0:	647b      	str	r3, [r7, #68]	; 0x44
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	64bb      	str	r3, [r7, #72]	; 0x48
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	653b      	str	r3, [r7, #80]	; 0x50
		HAL_GPIO_Init(now->Channel_GPIO, &GPIO_InitStruct);
 8001dda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001de2:	4611      	mov	r1, r2
 8001de4:	4618      	mov	r0, r3
 8001de6:	f005 fe37 	bl	8007a58 <HAL_GPIO_Init>
		now=now->next;
 8001dea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	657b      	str	r3, [r7, #84]	; 0x54
	while(now != NULL){
 8001df0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1ea      	bne.n	8001dcc <PAC_PWM_Init+0x54>
	}

	TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001df6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	605a      	str	r2, [r3, #4]
 8001e00:	609a      	str	r2, [r3, #8]
 8001e02:	60da      	str	r2, [r3, #12]
 8001e04:	611a      	str	r2, [r3, #16]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001e10:	f107 030c 	add.w	r3, r7, #12
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	605a      	str	r2, [r3, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	60da      	str	r2, [r3, #12]
 8001e1e:	611a      	str	r2, [r3, #16]
 8001e20:	615a      	str	r2, [r3, #20]
 8001e22:	619a      	str	r2, [r3, #24]


	self->ZCD.tim->Instance = self->ZCD.TIM_Instance;					// Initializing TIM into TIM_SLAVEMODE_RESET for PWM synchronization
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	6892      	ldr	r2, [r2, #8]
 8001e2c:	601a      	str	r2, [r3, #0]
	self->ZCD.tim->Init.Prescaler = 799;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	f240 321f 	movw	r2, #799	; 0x31f
 8001e36:	605a      	str	r2, [r3, #4]
	self->ZCD.tim->Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	609a      	str	r2, [r3, #8]
	self->ZCD.tim->Init.Period = self->ZCD.TIM_MAX_Count;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	60da      	str	r2, [r3, #12]
	self->ZCD.tim->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	611a      	str	r2, [r3, #16]
	self->ZCD.tim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	2280      	movs	r2, #128	; 0x80
 8001e58:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(self->ZCD.tim);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f007 f9fa 	bl	8009258 <HAL_TIM_Base_Init>

	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001e64:	2304      	movs	r3, #4
 8001e66:	633b      	str	r3, [r7, #48]	; 0x30
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001e68:	2350      	movs	r3, #80	; 0x50
 8001e6a:	637b      	str	r3, [r7, #52]	; 0x34
	sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_FALLING;
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	63bb      	str	r3, [r7, #56]	; 0x38
	sSlaveConfig.TriggerFilter = 0;
 8001e70:	2300      	movs	r3, #0
 8001e72:	643b      	str	r3, [r7, #64]	; 0x40
	HAL_TIM_SlaveConfigSynchro(self->ZCD.tim, &sSlaveConfig);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001e7c:	4611      	mov	r1, r2
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f008 f9fa 	bl	800a278 <HAL_TIM_SlaveConfigSynchro>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e84:	2300      	movs	r3, #0
 8001e86:	62bb      	str	r3, [r7, #40]	; 0x28
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_TIMEx_MasterConfigSynchronization(self->ZCD.tim, &sMasterConfig);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e94:	4611      	mov	r1, r2
 8001e96:	4618      	mov	r0, r3
 8001e98:	f008 ff7e 	bl	800ad98 <HAL_TIMEx_MasterConfigSynchronization>

	HAL_TIM_PWM_Init(self->ZCD.tim);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f007 facf 	bl	8009444 <HAL_TIM_PWM_Init>

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ea6:	2360      	movs	r3, #96	; 0x60
 8001ea8:	60fb      	str	r3, [r7, #12]
	sConfigOC.Pulse = 0;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	613b      	str	r3, [r7, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	617b      	str	r3, [r7, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61fb      	str	r3, [r7, #28]

	now = self->PAC_Devices_Control_Vector_Head;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eba:	657b      	str	r3, [r7, #84]	; 0x54
	while(now != NULL){
 8001ebc:	e00b      	b.n	8001ed6 <PAC_PWM_Init+0x15e>
		HAL_TIM_PWM_ConfigChannel(now->tim, &sConfigOC, now->TIM_CHANNEL);
 8001ebe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ec0:	6918      	ldr	r0, [r3, #16]
 8001ec2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ec4:	68da      	ldr	r2, [r3, #12]
 8001ec6:	f107 030c 	add.w	r3, r7, #12
 8001eca:	4619      	mov	r1, r3
 8001ecc:	f008 f852 	bl	8009f74 <HAL_TIM_PWM_ConfigChannel>
		now=now->next;
 8001ed0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	657b      	str	r3, [r7, #84]	; 0x54
	while(now != NULL){
 8001ed6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d1f0      	bne.n	8001ebe <PAC_PWM_Init+0x146>
	}

}
 8001edc:	bf00      	nop
 8001ede:	bf00      	nop
 8001ee0:	3758      	adds	r7, #88	; 0x58
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40021000 	.word	0x40021000

08001eec <PAC_PWM_DeInit>:
//---------------------------------------------------------------------------------
void PAC_PWM_DeInit(struct PAC *self)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b088      	sub	sp, #32
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]

    __HAL_RCC_TIM3_CLK_DISABLE();
 8001ef4:	4b1e      	ldr	r3, [pc, #120]	; (8001f70 <PAC_PWM_DeInit+0x84>)
 8001ef6:	69db      	ldr	r3, [r3, #28]
 8001ef8:	4a1d      	ldr	r2, [pc, #116]	; (8001f70 <PAC_PWM_DeInit+0x84>)
 8001efa:	f023 0302 	bic.w	r3, r3, #2
 8001efe:	61d3      	str	r3, [r2, #28]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f00:	f107 030c 	add.w	r3, r7, #12
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	605a      	str	r2, [r3, #4]
 8001f0a:	609a      	str	r2, [r3, #8]
 8001f0c:	60da      	str	r2, [r3, #12]

    struct PAC_Devices_Control_Vector *now = self->PAC_Devices_Control_Vector_Head;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f12:	61fb      	str	r3, [r7, #28]

	while(now != NULL){
 8001f14:	e01b      	b.n	8001f4e <PAC_PWM_DeInit+0x62>
		GPIO_InitStruct.Pin = now->Channel_PIN;
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	889b      	ldrh	r3, [r3, #4]
 8001f1a:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f24:	2302      	movs	r3, #2
 8001f26:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(now->Channel_GPIO, &GPIO_InitStruct);
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f107 020c 	add.w	r2, r7, #12
 8001f30:	4611      	mov	r1, r2
 8001f32:	4618      	mov	r0, r3
 8001f34:	f005 fd90 	bl	8007a58 <HAL_GPIO_Init>
		HAL_GPIO_WritePin(now->Channel_GPIO, now->Channel_PIN, GPIO_PIN_RESET);
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	6898      	ldr	r0, [r3, #8]
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	889b      	ldrh	r3, [r3, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	4619      	mov	r1, r3
 8001f44:	f005 ff23 	bl	8007d8e <HAL_GPIO_WritePin>
		now=now->next;
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	61fb      	str	r3, [r7, #28]
	while(now != NULL){
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1e0      	bne.n	8001f16 <PAC_PWM_DeInit+0x2a>
	}

	HAL_TIM_Base_DeInit(self->ZCD.tim);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f007 f9cc 	bl	80092f6 <HAL_TIM_Base_DeInit>

	HAL_TIM_PWM_DeInit(self->ZCD.tim);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f007 fabd 	bl	80094e2 <HAL_TIM_PWM_DeInit>

}
 8001f68:	bf00      	nop
 8001f6a:	3720      	adds	r7, #32
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40021000 	.word	0x40021000

08001f74 <PAC_Device_Control_Get_Control_Value>:
//---------------------------------------------------------------------------------
uint16_t PAC_Device_Control_Get_Control_Value(struct PAC_Devices_Control_Vector *self){
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
	switch(self->TIM_CHANNEL){
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	2b0c      	cmp	r3, #12
 8001f82:	d849      	bhi.n	8002018 <PAC_Device_Control_Get_Control_Value+0xa4>
 8001f84:	a201      	add	r2, pc, #4	; (adr r2, 8001f8c <PAC_Device_Control_Get_Control_Value+0x18>)
 8001f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f8a:	bf00      	nop
 8001f8c:	08001fc1 	.word	0x08001fc1
 8001f90:	08002019 	.word	0x08002019
 8001f94:	08002019 	.word	0x08002019
 8001f98:	08002019 	.word	0x08002019
 8001f9c:	08001fd7 	.word	0x08001fd7
 8001fa0:	08002019 	.word	0x08002019
 8001fa4:	08002019 	.word	0x08002019
 8001fa8:	08002019 	.word	0x08002019
 8001fac:	08001fed 	.word	0x08001fed
 8001fb0:	08002019 	.word	0x08002019
 8001fb4:	08002019 	.word	0x08002019
 8001fb8:	08002019 	.word	0x08002019
 8001fbc:	08002003 	.word	0x08002003
		case TIM_CHANNEL_1: return self->Parent->ZCD.TIM_MAX_Count - self->tim->Instance->CCR1; break;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	e021      	b.n	800201a <PAC_Device_Control_Get_Control_Value+0xa6>
		case TIM_CHANNEL_2: return self->Parent->ZCD.TIM_MAX_Count - self->tim->Instance->CCR2; break;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	691b      	ldr	r3, [r3, #16]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	e016      	b.n	800201a <PAC_Device_Control_Get_Control_Value+0xa6>
		case TIM_CHANNEL_3: return self->Parent->ZCD.TIM_MAX_Count - self->tim->Instance->CCR3; break;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	e00b      	b.n	800201a <PAC_Device_Control_Get_Control_Value+0xa6>
		case TIM_CHANNEL_4: return self->Parent->ZCD.TIM_MAX_Count - self->tim->Instance->CCR4; break;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002010:	b29b      	uxth	r3, r3
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	b29b      	uxth	r3, r3
 8002016:	e000      	b.n	800201a <PAC_Device_Control_Get_Control_Value+0xa6>
	};
	return 0;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	bc80      	pop	{r7}
 8002022:	4770      	bx	lr

08002024 <PAC_Device_Control_Set_Control_Value>:
//---------------------------------------------------------------------------------
void PAC_Device_Control_Set_Control_Value(struct PAC_Devices_Control_Vector *self, uint16_t value){
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	460b      	mov	r3, r1
 800202e:	807b      	strh	r3, [r7, #2]
	/**
	 * Set control value for current PAC_Control_Unit
	 */
	switch(self->TIM_CHANNEL){
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	2b0c      	cmp	r3, #12
 8002036:	d849      	bhi.n	80020cc <PAC_Device_Control_Set_Control_Value+0xa8>
 8002038:	a201      	add	r2, pc, #4	; (adr r2, 8002040 <PAC_Device_Control_Set_Control_Value+0x1c>)
 800203a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800203e:	bf00      	nop
 8002040:	08002075 	.word	0x08002075
 8002044:	080020cd 	.word	0x080020cd
 8002048:	080020cd 	.word	0x080020cd
 800204c:	080020cd 	.word	0x080020cd
 8002050:	0800208b 	.word	0x0800208b
 8002054:	080020cd 	.word	0x080020cd
 8002058:	080020cd 	.word	0x080020cd
 800205c:	080020cd 	.word	0x080020cd
 8002060:	080020a1 	.word	0x080020a1
 8002064:	080020cd 	.word	0x080020cd
 8002068:	080020cd 	.word	0x080020cd
 800206c:	080020cd 	.word	0x080020cd
 8002070:	080020b7 	.word	0x080020b7
		case TIM_CHANNEL_1: self->tim->Instance->CCR1 = self->Parent->ZCD.TIM_MAX_Count - value; break;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800207a:	461a      	mov	r2, r3
 800207c:	887b      	ldrh	r3, [r7, #2]
 800207e:	1ad2      	subs	r2, r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	635a      	str	r2, [r3, #52]	; 0x34
 8002088:	e020      	b.n	80020cc <PAC_Device_Control_Set_Control_Value+0xa8>
		case TIM_CHANNEL_2: self->tim->Instance->CCR2 = self->Parent->ZCD.TIM_MAX_Count - value; break;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002090:	461a      	mov	r2, r3
 8002092:	887b      	ldrh	r3, [r7, #2]
 8002094:	1ad2      	subs	r2, r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	639a      	str	r2, [r3, #56]	; 0x38
 800209e:	e015      	b.n	80020cc <PAC_Device_Control_Set_Control_Value+0xa8>
		case TIM_CHANNEL_3: self->tim->Instance->CCR3 = self->Parent->ZCD.TIM_MAX_Count - value; break;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80020a6:	461a      	mov	r2, r3
 80020a8:	887b      	ldrh	r3, [r7, #2]
 80020aa:	1ad2      	subs	r2, r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	63da      	str	r2, [r3, #60]	; 0x3c
 80020b4:	e00a      	b.n	80020cc <PAC_Device_Control_Set_Control_Value+0xa8>
		case TIM_CHANNEL_4: self->tim->Instance->CCR4 = self->Parent->ZCD.TIM_MAX_Count - value; break;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80020bc:	461a      	mov	r2, r3
 80020be:	887b      	ldrh	r3, [r7, #2]
 80020c0:	1ad2      	subs	r2, r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	641a      	str	r2, [r3, #64]	; 0x40
 80020ca:	bf00      	nop
	};
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bc80      	pop	{r7}
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop

080020d8 <PAC_IC_Capture_INT>:
//---------------------------------------------------------------------------------
void PAC_IC_Capture_INT(struct PAC *self){
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
	 * Input capture internal interrupt.
	 * Mast be called after IC DMA. When CNT data has been received.
	 * Transfer PAC from Setup to ON state.
	 */

	self->ZCD.TIM_MAX_Count = (self->ZCD.CNT_DATA[2] - self->ZCD.CNT_DATA[1]);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	8c1b      	ldrh	r3, [r3, #32]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	849a      	strh	r2, [r3, #36]	; 0x24

	if(self->ZCD.TIM_MAX_Count != 0){
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d040      	beq.n	800217a <PAC_IC_Capture_INT+0xa2>

		self->ZCD.Frequency = self->ZCD.TIM_MAX_Count / 2;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80020fc:	085b      	lsrs	r3, r3, #1
 80020fe:	b29a      	uxth	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	84da      	strh	r2, [r3, #38]	; 0x26

		self->ZCD.TIM_MAX_Count*=KOEF;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002108:	4618      	mov	r0, r3
 800210a:	f7fe faa5 	bl	8000658 <__aeabi_i2d>
 800210e:	a322      	add	r3, pc, #136	; (adr r3, 8002198 <PAC_IC_Capture_INT+0xc0>)
 8002110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002114:	f7fe f824 	bl	8000160 <__aeabi_dmul>
 8002118:	4602      	mov	r2, r0
 800211a:	460b      	mov	r3, r1
 800211c:	4610      	mov	r0, r2
 800211e:	4619      	mov	r1, r3
 8002120:	f7fe fb04 	bl	800072c <__aeabi_d2uiz>
 8002124:	4603      	mov	r3, r0
 8002126:	b29a      	uxth	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	849a      	strh	r2, [r3, #36]	; 0x24

		PAC_IC_DeInit(self);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f7ff fe03 	bl	8001d38 <PAC_IC_DeInit>
		PAC_PWM_Init(self);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7ff fe20 	bl	8001d78 <PAC_PWM_Init>

		struct PAC_Devices_Control_Vector *now = self->PAC_Devices_Control_Vector_Head;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213c:	60fb      	str	r3, [r7, #12]

		while(now != NULL){
 800213e:	e012      	b.n	8002166 <PAC_IC_Capture_INT+0x8e>
			if(now->State == PAC_Device_ON){
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	7d1b      	ldrb	r3, [r3, #20]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d10b      	bne.n	8002160 <PAC_IC_Capture_INT+0x88>
				PAC_Device_Control_Set_Control_Value(now, 0);
 8002148:	2100      	movs	r1, #0
 800214a:	68f8      	ldr	r0, [r7, #12]
 800214c:	f7ff ff6a 	bl	8002024 <PAC_Device_Control_Set_Control_Value>
				HAL_TIM_PWM_Start(now->tim, now->TIM_CHANNEL);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	691a      	ldr	r2, [r3, #16]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	4619      	mov	r1, r3
 800215a:	4610      	mov	r0, r2
 800215c:	f007 fa28 	bl	80095b0 <HAL_TIM_PWM_Start>
			}
			now = now->next;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	60fb      	str	r3, [r7, #12]
		while(now != NULL){
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d1e9      	bne.n	8002140 <PAC_IC_Capture_INT+0x68>
		}

		self->ZCD.State = ZCD_STATE_ON;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	771a      	strb	r2, [r3, #28]
		PAC_ON_Callback(self);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f002 fce0 	bl	8004b38 <PAC_ON_Callback>
	}
	else
		HAL_TIM_IC_Start_DMA(self->ZCD.tim, self->ZCD.TIM_CHANNEL, (uint32_t *)self->ZCD.CNT_DATA, 3);
}
 8002178:	e009      	b.n	800218e <PAC_IC_Capture_INT+0xb6>
		HAL_TIM_IC_Start_DMA(self->ZCD.tim, self->ZCD.TIM_CHANNEL, (uint32_t *)self->ZCD.CNT_DATA, 3);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	68d8      	ldr	r0, [r3, #12]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6999      	ldr	r1, [r3, #24]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f103 021e 	add.w	r2, r3, #30
 8002188:	2303      	movs	r3, #3
 800218a:	f007 fbcd 	bl	8009928 <HAL_TIM_IC_Start_DMA>
}
 800218e:	bf00      	nop
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	66666666 	.word	0x66666666
 800219c:	3fee6666 	.word	0x3fee6666

080021a0 <ZCD_ON>:
//---------------------------------------------------------------------------------
void ZCD_ON(struct PAC *self){
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
	/**
	 * Turn ON ZCD
	 */
	if(PAC_Get_State(self) == ZCD_STATE_OFF){
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f000 f8a3 	bl	80022f4 <PAC_Get_State>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d10f      	bne.n	80021d4 <ZCD_ON+0x34>
		self->ZCD.State = ZCD_STATE_SETUP;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2202      	movs	r2, #2
 80021b8:	771a      	strb	r2, [r3, #28]
		PAC_IC_Init(self);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7ff fcd0 	bl	8001b60 <PAC_IC_Init>
		HAL_TIM_IC_Start_DMA(self->ZCD.tim, self->ZCD.TIM_CHANNEL, (uint32_t *)self->ZCD.CNT_DATA, 3);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	68d8      	ldr	r0, [r3, #12]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6999      	ldr	r1, [r3, #24]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f103 021e 	add.w	r2, r3, #30
 80021ce:	2303      	movs	r3, #3
 80021d0:	f007 fbaa 	bl	8009928 <HAL_TIM_IC_Start_DMA>
	}
}
 80021d4:	bf00      	nop
 80021d6:	3708      	adds	r7, #8
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <ZCD_OFF>:
//---------------------------------------------------------------------------------
void ZCD_OFF(struct PAC *self){
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
	/**
	 * ZCD Turns OFF
	 */
	if(PAC_Get_State(self) != ZCD_STATE_OFF){
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f000 f885 	bl	80022f4 <PAC_Get_State>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d008      	beq.n	8002202 <ZCD_OFF+0x26>
		PAC_PWM_DeInit(self);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f7ff fe7b 	bl	8001eec <PAC_PWM_DeInit>
		PAC_Reset(self);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 f89e 	bl	8002338 <PAC_Reset>
		self->ZCD.State = ZCD_STATE_OFF;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	771a      	strb	r2, [r3, #28]
	}
}
 8002202:	bf00      	nop
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <PAC_Device_Control_ON>:
//---------------------------------------------------------------------------------
void PAC_Device_Control_ON(struct PAC_Devices_Control_Vector *self){
 800220a:	b580      	push	{r7, lr}
 800220c:	b082      	sub	sp, #8
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
	/**
	 * Turn ON PAC_Device_Control_Unit if ZCD_STATE_ON else Turn ONN ZCD
	 */
	self->State = PAC_Device_ON;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2201      	movs	r2, #1
 8002216:	751a      	strb	r2, [r3, #20]
	if(PAC_Get_State(self->Parent) == ZCD_STATE_ON){
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	4618      	mov	r0, r3
 800221e:	f000 f869 	bl	80022f4 <PAC_Get_State>
 8002222:	4603      	mov	r3, r0
 8002224:	2b01      	cmp	r3, #1
 8002226:	d10c      	bne.n	8002242 <PAC_Device_Control_ON+0x38>
		PAC_Device_Control_Set_Control_Value(self, 0);
 8002228:	2100      	movs	r1, #0
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f7ff fefa 	bl	8002024 <PAC_Device_Control_Set_Control_Value>
		HAL_TIM_PWM_Start(self->tim, self->TIM_CHANNEL);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	691a      	ldr	r2, [r3, #16]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	4619      	mov	r1, r3
 800223a:	4610      	mov	r0, r2
 800223c:	f007 f9b8 	bl	80095b0 <HAL_TIM_PWM_Start>
	}
	else if(PAC_Get_State(self->Parent) == ZCD_STATE_OFF)
		ZCD_ON(self->Parent);
}
 8002240:	e00c      	b.n	800225c <PAC_Device_Control_ON+0x52>
	else if(PAC_Get_State(self->Parent) == ZCD_STATE_OFF)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	4618      	mov	r0, r3
 8002248:	f000 f854 	bl	80022f4 <PAC_Get_State>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d104      	bne.n	800225c <PAC_Device_Control_ON+0x52>
		ZCD_ON(self->Parent);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff ffa2 	bl	80021a0 <ZCD_ON>
}
 800225c:	bf00      	nop
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <PAC_Device_Control_OFF>:
//---------------------------------------------------------------------------------
void PAC_Device_Control_OFF(struct PAC_Devices_Control_Vector *self){
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
	/**
	 *
	 */
	if(self->State == PAC_Device_ON)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	7d1b      	ldrb	r3, [r3, #20]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d107      	bne.n	8002284 <PAC_Device_Control_OFF+0x20>
		HAL_TIM_PWM_Stop(self->tim, self->TIM_CHANNEL);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	691a      	ldr	r2, [r3, #16]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	4619      	mov	r1, r3
 800227e:	4610      	mov	r0, r2
 8002280:	f007 fa38 	bl	80096f4 <HAL_TIM_PWM_Stop>

	self->State = PAC_Device_OFF;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	751a      	strb	r2, [r3, #20]

	struct PAC_Devices_Control_Vector *now = self->Parent->PAC_Devices_Control_Vector_Head;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002290:	60fb      	str	r3, [r7, #12]

	enum PAC_Device_Control_State State = PAC_Device_OFF;
 8002292:	2300      	movs	r3, #0
 8002294:	72fb      	strb	r3, [r7, #11]

 	while(now != NULL){
 8002296:	e007      	b.n	80022a8 <PAC_Device_Control_OFF+0x44>
 		State |= now->State;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	7d1a      	ldrb	r2, [r3, #20]
 800229c:	7afb      	ldrb	r3, [r7, #11]
 800229e:	4313      	orrs	r3, r2
 80022a0:	72fb      	strb	r3, [r7, #11]
 		now = now->next;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	60fb      	str	r3, [r7, #12]
 	while(now != NULL){
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1f4      	bne.n	8002298 <PAC_Device_Control_OFF+0x34>
 	}

 	if(State == PAC_Device_OFF){
 80022ae:	7afb      	ldrb	r3, [r7, #11]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d104      	bne.n	80022be <PAC_Device_Control_OFF+0x5a>
 		ZCD_OFF(self->Parent);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff ff8f 	bl	80021dc <ZCD_OFF>
 	}
}
 80022be:	bf00      	nop
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <PAC_Device_Control_Get_State>:
//---------------------------------------------------------------------------------
enum PAC_Device_Control_State PAC_Device_Control_Get_State(struct PAC_Devices_Control_Vector *self){
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b082      	sub	sp, #8
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
	if(self->State == PAC_Device_ON && PAC_Get_State(self->Parent) == ZCD_STATE_ON)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	7d1b      	ldrb	r3, [r3, #20]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d109      	bne.n	80022ea <PAC_Device_Control_Get_State+0x24>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	4618      	mov	r0, r3
 80022dc:	f000 f80a 	bl	80022f4 <PAC_Get_State>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d101      	bne.n	80022ea <PAC_Device_Control_Get_State+0x24>
		return PAC_Device_ON;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e000      	b.n	80022ec <PAC_Device_Control_Get_State+0x26>
	else
		return PAC_Device_OFF;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <PAC_Get_State>:
//---------------------------------------------------------------------------------
enum ZCD_State PAC_Get_State(struct PAC *self){
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
	return self->ZCD.State;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	7f1b      	ldrb	r3, [r3, #28]
}
 8002300:	4618      	mov	r0, r3
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	bc80      	pop	{r7}
 8002308:	4770      	bx	lr

0800230a <PAC_Get_Frequency>:
//---------------------------------------------------------------------------------
uint8_t PAC_Get_Frequency(struct PAC *self){
 800230a:	b480      	push	{r7}
 800230c:	b083      	sub	sp, #12
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
	return self->ZCD.Frequency; //Frequency
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002316:	b2db      	uxtb	r3, r3
}
 8002318:	4618      	mov	r0, r3
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	bc80      	pop	{r7}
 8002320:	4770      	bx	lr

08002322 <PAC_Get_Max_Control_Value>:
//---------------------------------------------------------------------------------
uint16_t PAC_Get_Max_Control_Value(struct PAC *self){
 8002322:	b480      	push	{r7}
 8002324:	b083      	sub	sp, #12
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
	/**
	 * MAX control value for PAC_Control_Unit
	*/
	return self->ZCD.TIM_MAX_Count;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
}
 800232e:	4618      	mov	r0, r3
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	bc80      	pop	{r7}
 8002336:	4770      	bx	lr

08002338 <PAC_Reset>:
//---------------------------------------------------------------------------------
void PAC_Reset(struct PAC *self){
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
	self->ZCD.CNT_DATA[0] = 0;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	83da      	strh	r2, [r3, #30]
	self->ZCD.CNT_DATA[1] = 0;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	841a      	strh	r2, [r3, #32]
	self->ZCD.CNT_DATA[3] = 0;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	849a      	strh	r2, [r3, #36]	; 0x24
	self->ZCD.TIM_MAX_Count=0;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	849a      	strh	r2, [r3, #36]	; 0x24
	self->ZCD.Frequency = 0;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	84da      	strh	r2, [r3, #38]	; 0x26
}
 800235e:	bf00      	nop
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	bc80      	pop	{r7}
 8002366:	4770      	bx	lr

08002368 <PID_ini>:
#include "PID.h"
//---------------------------------------------------------------------------------
void PID_ini(struct PID* self){
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
	/**
	 * Reset I nad P buffers
	 */
	self->D_Prev=0;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f04f 0200 	mov.w	r2, #0
 8002376:	619a      	str	r2, [r3, #24]
	self->I=0;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f04f 0200 	mov.w	r2, #0
 800237e:	615a      	str	r2, [r3, #20]
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	bc80      	pop	{r7}
 8002388:	4770      	bx	lr
	...

0800238c <PID_it>:
//---------------------------------------------------------------------------------
uint32_t PID_it(struct PID* self){
 800238c:	b590      	push	{r4, r7, lr}
 800238e:	b087      	sub	sp, #28
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
	 * if res control value <0 return 0;
	 * if res control MAX_Control value >0 return MAX_Control;
	 */
	float P,D,Res;

	P=self->Point-self->Point_Now;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	69da      	ldr	r2, [r3, #28]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a1b      	ldr	r3, [r3, #32]
 800239c:	4619      	mov	r1, r3
 800239e:	4610      	mov	r0, r2
 80023a0:	f7fe f9e8 	bl	8000774 <__aeabi_fsub>
 80023a4:	4603      	mov	r3, r0
 80023a6:	617b      	str	r3, [r7, #20]
	self->I=self->I+P*self->dt;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	695c      	ldr	r4, [r3, #20]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	6979      	ldr	r1, [r7, #20]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7fe fae8 	bl	8000988 <__aeabi_fmul>
 80023b8:	4603      	mov	r3, r0
 80023ba:	4619      	mov	r1, r3
 80023bc:	4620      	mov	r0, r4
 80023be:	f7fe f9db 	bl	8000778 <__addsf3>
 80023c2:	4603      	mov	r3, r0
 80023c4:	461a      	mov	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	615a      	str	r2, [r3, #20]
	D=(P-self->D_Prev)/self->dt;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	4619      	mov	r1, r3
 80023d0:	6978      	ldr	r0, [r7, #20]
 80023d2:	f7fe f9cf 	bl	8000774 <__aeabi_fsub>
 80023d6:	4603      	mov	r3, r0
 80023d8:	461a      	mov	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	4619      	mov	r1, r3
 80023e0:	4610      	mov	r0, r2
 80023e2:	f7fe fb85 	bl	8000af0 <__aeabi_fdiv>
 80023e6:	4603      	mov	r3, r0
 80023e8:	613b      	str	r3, [r7, #16]
	self->D_Prev=P;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	697a      	ldr	r2, [r7, #20]
 80023ee:	619a      	str	r2, [r3, #24]
	Res=((P*self->KP)+(self->I*self->KI)+(D*self->KD));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6979      	ldr	r1, [r7, #20]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7fe fac6 	bl	8000988 <__aeabi_fmul>
 80023fc:	4603      	mov	r3, r0
 80023fe:	461c      	mov	r4, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	695a      	ldr	r2, [r3, #20]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	4619      	mov	r1, r3
 800240a:	4610      	mov	r0, r2
 800240c:	f7fe fabc 	bl	8000988 <__aeabi_fmul>
 8002410:	4603      	mov	r3, r0
 8002412:	4619      	mov	r1, r3
 8002414:	4620      	mov	r0, r4
 8002416:	f7fe f9af 	bl	8000778 <__addsf3>
 800241a:	4603      	mov	r3, r0
 800241c:	461c      	mov	r4, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	6939      	ldr	r1, [r7, #16]
 8002424:	4618      	mov	r0, r3
 8002426:	f7fe faaf 	bl	8000988 <__aeabi_fmul>
 800242a:	4603      	mov	r3, r0
 800242c:	4619      	mov	r1, r3
 800242e:	4620      	mov	r0, r4
 8002430:	f7fe f9a2 	bl	8000778 <__addsf3>
 8002434:	4603      	mov	r3, r0
 8002436:	60fb      	str	r3, [r7, #12]
	if(self->Point_Now-self->Point>100){
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a1a      	ldr	r2, [r3, #32]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	69db      	ldr	r3, [r3, #28]
 8002440:	4619      	mov	r1, r3
 8002442:	4610      	mov	r0, r2
 8002444:	f7fe f996 	bl	8000774 <__aeabi_fsub>
 8002448:	4603      	mov	r3, r0
 800244a:	4916      	ldr	r1, [pc, #88]	; (80024a4 <PID_it+0x118>)
 800244c:	4618      	mov	r0, r3
 800244e:	f7fe fc57 	bl	8000d00 <__aeabi_fcmpgt>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d002      	beq.n	800245e <PID_it+0xd2>
		PID_ini(self);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f7ff ff85 	bl	8002368 <PID_ini>
	}

	if(Res<0){
 800245e:	f04f 0100 	mov.w	r1, #0
 8002462:	68f8      	ldr	r0, [r7, #12]
 8002464:	f7fe fc2e 	bl	8000cc4 <__aeabi_fcmplt>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <PID_it+0xe6>
		return 0;
 800246e:	2300      	movs	r3, #0
 8002470:	e013      	b.n	800249a <PID_it+0x10e>
	}
	if (Res<=self->MAX_Control)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	8a1b      	ldrh	r3, [r3, #16]
 8002476:	4618      	mov	r0, r3
 8002478:	f7fe fa32 	bl	80008e0 <__aeabi_i2f>
 800247c:	4603      	mov	r3, r0
 800247e:	4619      	mov	r1, r3
 8002480:	68f8      	ldr	r0, [r7, #12]
 8002482:	f7fe fc29 	bl	8000cd8 <__aeabi_fcmple>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d004      	beq.n	8002496 <PID_it+0x10a>
		return Res;
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f7fe fc67 	bl	8000d60 <__aeabi_f2uiz>
 8002492:	4603      	mov	r3, r0
 8002494:	e001      	b.n	800249a <PID_it+0x10e>
	else
		return self->MAX_Control;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	8a1b      	ldrh	r3, [r3, #16]
}
 800249a:	4618      	mov	r0, r3
 800249c:	371c      	adds	r7, #28
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd90      	pop	{r4, r7, pc}
 80024a2:	bf00      	nop
 80024a4:	42c80000 	.word	0x42c80000

080024a8 <PID_Set_Point>:
//---------------------------------------------------------------------------------
void PID_Set_Point(struct PID* self,int Point){
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
	/**
	 * Set point for what system will be going
	 */
	self->Point=Point;
 80024b2:	6838      	ldr	r0, [r7, #0]
 80024b4:	f7fe fa14 	bl	80008e0 <__aeabi_i2f>
 80024b8:	4602      	mov	r2, r0
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	61da      	str	r2, [r3, #28]
}
 80024be:	bf00      	nop
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <PID_Set_Curent_Point>:
//---------------------------------------------------------------------------------
void PID_Set_Curent_Point(struct PID* self,int Point){
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b082      	sub	sp, #8
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
 80024ce:	6039      	str	r1, [r7, #0]
	/*
	 * Set current point
	 */
	self->Point_Now=Point;
 80024d0:	6838      	ldr	r0, [r7, #0]
 80024d2:	f7fe fa05 	bl	80008e0 <__aeabi_i2f>
 80024d6:	4602      	mov	r2, r0
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	621a      	str	r2, [r3, #32]
}
 80024dc:	bf00      	nop
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <PID_Set_MAX_Control>:
//---------------------------------------------------------------------------------
void PID_Set_MAX_Control(uint16_t MAX_Control_Value, struct PID* self){
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	4603      	mov	r3, r0
 80024ec:	6039      	str	r1, [r7, #0]
 80024ee:	80fb      	strh	r3, [r7, #6]
	/*
	 * Set max value witch can PID_it return as result
	 */
	self->MAX_Control=MAX_Control_Value;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	88fa      	ldrh	r2, [r7, #6]
 80024f4:	821a      	strh	r2, [r3, #16]
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bc80      	pop	{r7}
 80024fe:	4770      	bx	lr

08002500 <Set_Temperature>:
#include "Soldering_Station.h"
//---------------------------------------------------------------------------------
uint16_t Set_Temperature(struct Temperature_Presets *Temperature_Presets_C, struct Temperature_Converting *Temperature_Converting, enum MODE *MODE){
 8002500:	b590      	push	{r4, r7, lr}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
	 * Set temperature in ADC Levels which occur to the MODE
	 * Temperature_Presets_C;
	 * MODE - MANUAL PRESSET1 PRESSET2 SLEEP
	 * return Temperature in ADC levels
	 */
	switch(*MODE){						//Set temperature in celsius which occur to the MODE
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	2b03      	cmp	r3, #3
 8002512:	d81f      	bhi.n	8002554 <Set_Temperature+0x54>
 8002514:	a201      	add	r2, pc, #4	; (adr r2, 800251c <Set_Temperature+0x1c>)
 8002516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800251a:	bf00      	nop
 800251c:	0800252d 	.word	0x0800252d
 8002520:	08002537 	.word	0x08002537
 8002524:	08002541 	.word	0x08002541
 8002528:	0800254b 	.word	0x0800254b
			case MANUAL:
				Temperature_Converting->Temperature_Set_C=Temperature_Presets_C->Manual;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	881a      	ldrh	r2, [r3, #0]
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	80da      	strh	r2, [r3, #6]
				break;
 8002534:	e00e      	b.n	8002554 <Set_Temperature+0x54>
			case PRESET1:
				Temperature_Converting->Temperature_Set_C=Temperature_Presets_C->Preset1;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	885a      	ldrh	r2, [r3, #2]
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	80da      	strh	r2, [r3, #6]
				break;
 800253e:	e009      	b.n	8002554 <Set_Temperature+0x54>
			case PRESET2:
				Temperature_Converting->Temperature_Set_C=Temperature_Presets_C->Preset2;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	889a      	ldrh	r2, [r3, #4]
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	80da      	strh	r2, [r3, #6]
				break;
 8002548:	e004      	b.n	8002554 <Set_Temperature+0x54>
			case SLEEP:
				Temperature_Converting->Temperature_Set_C=Temperature_Presets_C->Sleep;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	88da      	ldrh	r2, [r3, #6]
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	80da      	strh	r2, [r3, #6]
				break;
 8002552:	bf00      	nop
		}

	Temperature_Converting->Temperature_Set_ADC=(uint16_t)(Temperature_Converting->Temperature_Set_C*Temperature_Converting->Coeff+Temperature_Converting->Coeff/2);	//Converting Celsius to ADC Levels
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	88db      	ldrh	r3, [r3, #6]
 8002558:	4618      	mov	r0, r3
 800255a:	f7fe f9c1 	bl	80008e0 <__aeabi_i2f>
 800255e:	4602      	mov	r2, r0
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	4619      	mov	r1, r3
 8002566:	4610      	mov	r0, r2
 8002568:	f7fe fa0e 	bl	8000988 <__aeabi_fmul>
 800256c:	4603      	mov	r3, r0
 800256e:	461c      	mov	r4, r3
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002578:	4618      	mov	r0, r3
 800257a:	f7fe fab9 	bl	8000af0 <__aeabi_fdiv>
 800257e:	4603      	mov	r3, r0
 8002580:	4619      	mov	r1, r3
 8002582:	4620      	mov	r0, r4
 8002584:	f7fe f8f8 	bl	8000778 <__addsf3>
 8002588:	4603      	mov	r3, r0
 800258a:	4618      	mov	r0, r3
 800258c:	f7fe fbe8 	bl	8000d60 <__aeabi_f2uiz>
 8002590:	4603      	mov	r3, r0
 8002592:	b29a      	uxth	r2, r3
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	809a      	strh	r2, [r3, #4]

	if(Temperature_Converting->Temperature_Set_ADC>=MAX_ADC_Value){		// If result more than MAX_ADC_Value
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	889b      	ldrh	r3, [r3, #4]
 800259c:	f640 62d7 	movw	r2, #3799	; 0xed7
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d90c      	bls.n	80025be <Set_Temperature+0xbe>
		Temperature_Converting->Temperature_Set_ADC=MAX_ADC_Value;		// Set MAX_ADC_Value as result
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	f640 62d8 	movw	r2, #3800	; 0xed8
 80025aa:	809a      	strh	r2, [r3, #4]
		if(*MODE==MANUAL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d108      	bne.n	80025c6 <Set_Temperature+0xc6>
			Temperature_Presets_C->Manual=Temperature_Presets_C->Prew_Set_Temperature_Manual;	//Return Manual Preset to Prew_Manual_Preset
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	891a      	ldrh	r2, [r3, #8]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	801a      	strh	r2, [r3, #0]
 80025bc:	e003      	b.n	80025c6 <Set_Temperature+0xc6>
	}
	else
		Temperature_Presets_C->Prew_Set_Temperature_Manual=Temperature_Presets_C->Manual;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	881a      	ldrh	r2, [r3, #0]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	811a      	strh	r2, [r3, #8]

	return Temperature_Converting->Temperature_Set_ADC;
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	889b      	ldrh	r3, [r3, #4]
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3714      	adds	r7, #20
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd90      	pop	{r4, r7, pc}
 80025d2:	bf00      	nop

080025d4 <Temperatur_Correction>:
//---------------------------------------------------------------------------------
uint16_t Temperatur_Correction(uint16_t Filtred_ADC_Value, struct Temperature_Converting *Temperature_Converting, struct Temperature_Corection *Temperature_Corection_ADC, enum MODE *MODE){
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60b9      	str	r1, [r7, #8]
 80025dc:	607a      	str	r2, [r7, #4]
 80025de:	603b      	str	r3, [r7, #0]
 80025e0:	4603      	mov	r3, r0
 80025e2:	81fb      	strh	r3, [r7, #14]
	/**
	 * Correcting Current ADC Temperature which occur to the MODE and convert Current_Temperature_ADC to Celsius
	 * Return Current_Temperature in ADC levels
	 * Temperature correction work with ADC Level Presets
	 */
	switch(*MODE){
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2b03      	cmp	r3, #3
 80025ea:	d845      	bhi.n	8002678 <Temperatur_Correction+0xa4>
 80025ec:	a201      	add	r2, pc, #4	; (adr r2, 80025f4 <Temperatur_Correction+0x20>)
 80025ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f2:	bf00      	nop
 80025f4:	08002605 	.word	0x08002605
 80025f8:	08002629 	.word	0x08002629
 80025fc:	0800264d 	.word	0x0800264d
 8002600:	08002671 	.word	0x08002671
				case MANUAL:
					if(Filtred_ADC_Value>Temperature_Corection_ADC->Manual)		// if current value in ADC levels more than Temperature_Corection_ADC
 8002604:	89fa      	ldrh	r2, [r7, #14]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	429a      	cmp	r2, r3
 800260c:	dd08      	ble.n	8002620 <Temperatur_Correction+0x4c>
						Temperature_Converting->Current_Temperature_ADC=Filtred_ADC_Value-Temperature_Corection_ADC->Manual;	//Set corrected Current Temperature in ADC Levels
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	b29b      	uxth	r3, r3
 8002614:	89fa      	ldrh	r2, [r7, #14]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	b29a      	uxth	r2, r3
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	801a      	strh	r2, [r3, #0]
					else
						Temperature_Converting->Current_Temperature_ADC=0;	//Set Current Temperature in ADC Levels to 0;
					break;
 800261e:	e02b      	b.n	8002678 <Temperatur_Correction+0xa4>
						Temperature_Converting->Current_Temperature_ADC=0;	//Set Current Temperature in ADC Levels to 0;
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	2200      	movs	r2, #0
 8002624:	801a      	strh	r2, [r3, #0]
					break;
 8002626:	e027      	b.n	8002678 <Temperatur_Correction+0xa4>
				case PRESET1:
					if(Filtred_ADC_Value>Temperature_Corection_ADC->Preset1)
 8002628:	89fa      	ldrh	r2, [r7, #14]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	429a      	cmp	r2, r3
 8002630:	dd08      	ble.n	8002644 <Temperatur_Correction+0x70>
						Temperature_Converting->Current_Temperature_ADC=Filtred_ADC_Value-Temperature_Corection_ADC->Preset1;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	b29b      	uxth	r3, r3
 8002638:	89fa      	ldrh	r2, [r7, #14]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	b29a      	uxth	r2, r3
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	801a      	strh	r2, [r3, #0]
					else
						Temperature_Converting->Current_Temperature_ADC=0;
					break;
 8002642:	e019      	b.n	8002678 <Temperatur_Correction+0xa4>
						Temperature_Converting->Current_Temperature_ADC=0;
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	2200      	movs	r2, #0
 8002648:	801a      	strh	r2, [r3, #0]
					break;
 800264a:	e015      	b.n	8002678 <Temperatur_Correction+0xa4>
				case PRESET2:
					if(Filtred_ADC_Value>Temperature_Corection_ADC->Preset2)
 800264c:	89fa      	ldrh	r2, [r7, #14]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	429a      	cmp	r2, r3
 8002654:	dd08      	ble.n	8002668 <Temperatur_Correction+0x94>
						Temperature_Converting->Current_Temperature_ADC=Filtred_ADC_Value-Temperature_Corection_ADC->Preset2;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	b29b      	uxth	r3, r3
 800265c:	89fa      	ldrh	r2, [r7, #14]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	b29a      	uxth	r2, r3
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	801a      	strh	r2, [r3, #0]
					else
						Temperature_Converting->Current_Temperature_ADC=0;
					break;
 8002666:	e007      	b.n	8002678 <Temperatur_Correction+0xa4>
						Temperature_Converting->Current_Temperature_ADC=0;
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	2200      	movs	r2, #0
 800266c:	801a      	strh	r2, [r3, #0]
					break;
 800266e:	e003      	b.n	8002678 <Temperatur_Correction+0xa4>
				case SLEEP:
					Temperature_Converting->Current_Temperature_ADC=Filtred_ADC_Value;
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	89fa      	ldrh	r2, [r7, #14]
 8002674:	801a      	strh	r2, [r3, #0]
					break;
 8002676:	bf00      	nop
		}

	return Temperature_Converting->Current_Temperature_ADC;
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	881b      	ldrh	r3, [r3, #0]
}
 800267c:	4618      	mov	r0, r3
 800267e:	3714      	adds	r7, #20
 8002680:	46bd      	mov	sp, r7
 8002682:	bc80      	pop	{r7}
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop

08002688 <Temperature_Presets_Corection_Converting>:
//---------------------------------------------------------------------------------
void Temperature_Presets_Corection_Converting(struct Temperature_Corection *Temperature_Corection_C, struct Temperature_Corection *Temperature_Corection_ADC, struct Temperature_Converting *Temperature_Converting){
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
	/**
	 * Converting Temperature_Presets_Corection from Celsius to ADC Levels
	 */
	Temperature_Corection_ADC->Manual=Temperature_Corection_C->Manual*Temperature_Converting->Coeff;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4618      	mov	r0, r3
 800269a:	f7fe f921 	bl	80008e0 <__aeabi_i2f>
 800269e:	4602      	mov	r2, r0
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	4619      	mov	r1, r3
 80026a6:	4610      	mov	r0, r2
 80026a8:	f7fe f96e 	bl	8000988 <__aeabi_fmul>
 80026ac:	4603      	mov	r3, r0
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7fe fb30 	bl	8000d14 <__aeabi_f2iz>
 80026b4:	4602      	mov	r2, r0
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	601a      	str	r2, [r3, #0]
	Temperature_Corection_ADC->Preset1=Temperature_Corection_C->Preset1*Temperature_Converting->Coeff;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7fe f90e 	bl	80008e0 <__aeabi_i2f>
 80026c4:	4602      	mov	r2, r0
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	4619      	mov	r1, r3
 80026cc:	4610      	mov	r0, r2
 80026ce:	f7fe f95b 	bl	8000988 <__aeabi_fmul>
 80026d2:	4603      	mov	r3, r0
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7fe fb1d 	bl	8000d14 <__aeabi_f2iz>
 80026da:	4602      	mov	r2, r0
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	605a      	str	r2, [r3, #4]
	Temperature_Corection_ADC->Preset2=Temperature_Corection_C->Preset2*Temperature_Converting->Coeff;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7fe f8fb 	bl	80008e0 <__aeabi_i2f>
 80026ea:	4602      	mov	r2, r0
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	4619      	mov	r1, r3
 80026f2:	4610      	mov	r0, r2
 80026f4:	f7fe f948 	bl	8000988 <__aeabi_fmul>
 80026f8:	4603      	mov	r3, r0
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7fe fb0a 	bl	8000d14 <__aeabi_f2iz>
 8002700:	4602      	mov	r2, r0
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	609a      	str	r2, [r3, #8]
}
 8002706:	bf00      	nop
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <Get_Temperature_Set_C>:
//---------------------------------------------------------------------------------
uint16_t Get_Temperature_Set_C(struct Temperature_Converting *self){
 800270e:	b480      	push	{r7}
 8002710:	b083      	sub	sp, #12
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
	/**
	 * Return Set temperature in Celsius
	 */
	return self->Temperature_Set_C;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	88db      	ldrh	r3, [r3, #6]
}
 800271a:	4618      	mov	r0, r3
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	bc80      	pop	{r7}
 8002722:	4770      	bx	lr

08002724 <Get_Current_Temperature_C>:
//---------------------------------------------------------------------------------
uint16_t Get_Current_Temperature_C(struct Temperature_Converting *Temperature_Converting){
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
	/**
	 * Convert and return Current temperature in Celsius
	 */
	Temperature_Converting->Current_Temperature_C=(uint16_t)Temperature_Converting->Current_Temperature_ADC/Temperature_Converting->Coeff; //Converting Current_Temperature_ADC to Celsius
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	881b      	ldrh	r3, [r3, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	f7fe f8d5 	bl	80008e0 <__aeabi_i2f>
 8002736:	4602      	mov	r2, r0
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	4619      	mov	r1, r3
 800273e:	4610      	mov	r0, r2
 8002740:	f7fe f9d6 	bl	8000af0 <__aeabi_fdiv>
 8002744:	4603      	mov	r3, r0
 8002746:	4618      	mov	r0, r3
 8002748:	f7fe fb0a 	bl	8000d60 <__aeabi_f2uiz>
 800274c:	4603      	mov	r3, r0
 800274e:	b29a      	uxth	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	805a      	strh	r2, [r3, #2]
	return Temperature_Converting->Current_Temperature_C;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	885b      	ldrh	r3, [r3, #2]
}
 8002758:	4618      	mov	r0, r3
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <Get_Manual_Preset_Temperature_C>:
//---------------------------------------------------------------------------------
uint16_t Get_Manual_Preset_Temperature_C(struct Temperature_Presets *self){
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
	return self->Manual;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	881b      	ldrh	r3, [r3, #0]
}
 800276c:	4618      	mov	r0, r3
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	bc80      	pop	{r7}
 8002774:	4770      	bx	lr

08002776 <Set_Manual_Preset_Temperature_C>:
//---------------------------------------------------------------------------------
void Set_Manual_Preset_Temperature_C(uint16_t value, struct Temperature_Presets *self){
 8002776:	b480      	push	{r7}
 8002778:	b083      	sub	sp, #12
 800277a:	af00      	add	r7, sp, #0
 800277c:	4603      	mov	r3, r0
 800277e:	6039      	str	r1, [r7, #0]
 8002780:	80fb      	strh	r3, [r7, #6]
	self->Manual=value;
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	88fa      	ldrh	r2, [r7, #6]
 8002786:	801a      	strh	r2, [r3, #0]
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	bc80      	pop	{r7}
 8002790:	4770      	bx	lr

08002792 <Solder_Iron_it>:
void Solder_Iron_Set_MODE_Temperature(struct Soldering_Iron *self, enum MODE MODE);
void Solder_Iron_Flash_Reset_Rewrite_Timer(struct Soldering_Iron *self);
uint32_t Write_Manual_Temperature(struct Temperature_Presets *self, uint32_t Flash_Key, uint8_t Flash_Page);
uint8_t Flash_Read_Manual_Temperature(struct Temperature_Presets *self, uint32_t Flash_Key, uint8_t Flash_Page);
//---------------------------------------------------------------------------------
void Solder_Iron_it(struct Soldering_Iron *self){
 8002792:	b590      	push	{r4, r7, lr}
 8002794:	b083      	sub	sp, #12
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
	/**
	 * PID and Filter iteration for Soldering_Iron
	 */
	Vibration_Sensor_it(self);				// We can read state of Vibration Sensor only when PWM is stopped
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 f9e7 	bl	8002b6e <Vibration_Sensor_it>
	Button_it(&self->Full_Power_Button); 	// We can read state of button only when PWM is stopped
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	337c      	adds	r3, #124	; 0x7c
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7fe fc7e 	bl	80010a6 <Button_it>
	if(self->State==1){
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d127      	bne.n	8002804 <Solder_Iron_it+0x72>
	  HAL_TIM_PWM_Start(self->PWM_htim, TIM_CHANNEL_4);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027ba:	210c      	movs	r1, #12
 80027bc:	4618      	mov	r0, r3
 80027be:	f006 fef7 	bl	80095b0 <HAL_TIM_PWM_Start>
	  PID_Set_Curent_Point(&self->PID,(int)(Temperatur_Correction(Filter_Combined(&self->Filter), &self->Temperature_Converting, &self->Temperature_Corection_ADC, &self->MODE)));
 80027c2:	687c      	ldr	r4, [r7, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	3324      	adds	r3, #36	; 0x24
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7fe fe8e 	bl	80014ea <Filter_Combined>
 80027ce:	4603      	mov	r3, r0
 80027d0:	4618      	mov	r0, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f103 0150 	add.w	r1, r3, #80	; 0x50
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	3344      	adds	r3, #68	; 0x44
 80027e2:	f7ff fef7 	bl	80025d4 <Temperatur_Correction>
 80027e6:	4603      	mov	r3, r0
 80027e8:	4619      	mov	r1, r3
 80027ea:	4620      	mov	r0, r4
 80027ec:	f7ff fe6b 	bl	80024c6 <PID_Set_Curent_Point>
	  self->PWM_htim->Instance->CCR4=PID_it(&self->PID);	//PID it
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027f8:	681c      	ldr	r4, [r3, #0]
 80027fa:	4610      	mov	r0, r2
 80027fc:	f7ff fdc6 	bl	800238c <PID_it>
 8002800:	4603      	mov	r3, r0
 8002802:	6423      	str	r3, [r4, #64]	; 0x40
	}
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	bd90      	pop	{r4, r7, pc}

0800280c <Solder_Iron_Sleep_Time_Resset>:
//---------------------------------------------------------------------------------
void Solder_Iron_Sleep_Time_Resset(struct Soldering_Iron *self){
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
	/**
	 * Reset sleep mode timer and if last mode was Sleep Set previous mode;
	 */
	if(self->MODE==SLEEP)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800281a:	2b03      	cmp	r3, #3
 800281c:	d105      	bne.n	800282a <Solder_Iron_Sleep_Time_Resset+0x1e>
		self->MODE=self->PREW_MODE;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	self->Timer=0;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
}
 8002832:	bf00      	nop
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	bc80      	pop	{r7}
 800283a:	4770      	bx	lr

0800283c <Solder_Iron_tim_it>:
//---------------------------------------------------------------------------------
void Solder_Iron_tim_it(struct Soldering_Iron *self){
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
	/**
	 * Solder_Iron_tim_it Main purples ones a second create Button event for full power button and sleep Mode management
	 */
	static uint8_t TIM_prescaler=0;

	if(TIM_prescaler++==10){
 8002844:	4b1e      	ldr	r3, [pc, #120]	; (80028c0 <Solder_Iron_tim_it+0x84>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	1c5a      	adds	r2, r3, #1
 800284a:	b2d1      	uxtb	r1, r2
 800284c:	4a1c      	ldr	r2, [pc, #112]	; (80028c0 <Solder_Iron_tim_it+0x84>)
 800284e:	7011      	strb	r1, [r2, #0]
 8002850:	2b0a      	cmp	r3, #10
 8002852:	d131      	bne.n	80028b8 <Solder_Iron_tim_it+0x7c>
		if(self->State){
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d029      	beq.n	80028b2 <Solder_Iron_tim_it+0x76>
			if(self->Timer++==self->Sleep_time){						//if Time more than Sleep time value set sleep mode
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8002864:	1c5a      	adds	r2, r3, #1
 8002866:	b291      	uxth	r1, r2
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	f8a2 109a 	strh.w	r1, [r2, #154]	; 0x9a
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	f892 209c 	ldrb.w	r2, [r2, #156]	; 0x9c
 8002874:	b292      	uxth	r2, r2
 8002876:	4293      	cmp	r3, r2
 8002878:	d10a      	bne.n	8002890 <Solder_Iron_tim_it+0x54>
				self->PREW_MODE=self->MODE;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
				Solder_Iron_Set_MODE_Temperature(self, SLEEP);			//Set Sleep Mode Temperature preset
 8002886:	2103      	movs	r1, #3
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f000 f861 	bl	8002950 <Solder_Iron_Set_MODE_Temperature>
 800288e:	e010      	b.n	80028b2 <Solder_Iron_tim_it+0x76>
			}else if(self->Timer==self->Disable_time+self->Sleep_time)	//if time more than Disable_time+Sleep_time Turn OFF Soldering_Iron
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8002896:	461a      	mov	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800289e:	4619      	mov	r1, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80028a6:	440b      	add	r3, r1
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d102      	bne.n	80028b2 <Solder_Iron_tim_it+0x76>
				Solder_Iron_OFF(self);
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f000 f83d 	bl	800292c <Solder_Iron_OFF>
		}
		TIM_prescaler=0;
 80028b2:	4b03      	ldr	r3, [pc, #12]	; (80028c0 <Solder_Iron_tim_it+0x84>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	701a      	strb	r2, [r3, #0]
	}
}
 80028b8:	bf00      	nop
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	200002b4 	.word	0x200002b4

080028c4 <Solder_Iron_ini>:
//---------------------------------------------------------------------------------
void Solder_Iron_ini(struct Soldering_Iron *self){
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
	/**
	 * Basic initialization of all part for starting all processes
	 */
	PID_ini(&self->PID);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff fd4a 	bl	8002368 <PID_ini>
	Filter_ini(&self->Filter);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	3324      	adds	r3, #36	; 0x24
 80028d8:	4618      	mov	r0, r3
 80028da:	f7fe fda1 	bl	8001420 <Filter_ini>
	Button_ini(&self->Full_Power_Button);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	337c      	adds	r3, #124	; 0x7c
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7fe fc34 	bl	8001150 <Button_ini>
	Flash_Rewrite_Timer_ini(&self->Flash_Rewrite_Timer);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	33a2      	adds	r3, #162	; 0xa2
 80028ec:	4618      	mov	r0, r3
 80028ee:	f000 feab 	bl	8003648 <Flash_Rewrite_Timer_ini>
	Solder_Iron_Set_Manual_Temperature(self);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 f883 	bl	80029fe <Solder_Iron_Set_Manual_Temperature>
}
 80028f8:	bf00      	nop
 80028fa:	3708      	adds	r7, #8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <Solder_Iron_ON>:

//---------------------------------------------------------------------------------
void Solder_Iron_ON(struct Soldering_Iron *self){
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
	Solder_Iron_Sleep_Time_Resset(self);  					//Reset Sleep_timer
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f7ff ff7f 	bl	800280c <Solder_Iron_Sleep_Time_Resset>
	Solder_Iron_Set_MODE_Temperature(self,self->MODE);		//Set Temperature
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002914:	4619      	mov	r1, r3
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 f81a 	bl	8002950 <Solder_Iron_Set_MODE_Temperature>
	self->State=Soldering_Iron_ON;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
}
 8002924:	bf00      	nop
 8002926:	3708      	adds	r7, #8
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <Solder_Iron_OFF>:
//---------------------------------------------------------------------------------
void Solder_Iron_OFF(struct Soldering_Iron *self){
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
	self->State=Soldering_Iron_OFF;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	Solder_Iron_Sleep_Time_Resset(self); 	//Reset Sleep_timer
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f7ff ff65 	bl	800280c <Solder_Iron_Sleep_Time_Resset>
	Solder_Iron_ini(self);					//Reset All Spldering Iron parameters
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f7ff ffbe 	bl	80028c4 <Solder_Iron_ini>
}
 8002948:	bf00      	nop
 800294a:	3708      	adds	r7, #8
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <Solder_Iron_Set_MODE_Temperature>:
//---------------------------------------------------------------------------------
void Solder_Iron_Set_MODE_Temperature(struct Soldering_Iron *self, enum MODE MODE){
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	460b      	mov	r3, r1
 800295a:	70fb      	strb	r3, [r7, #3]
	/**
	 * Solder_Iron_Set_Temperature based on MODE and Full_Power_Button
	 * Set Point for PID
	 */
	self->MODE=MODE;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	78fa      	ldrb	r2, [r7, #3]
 8002960:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	uint16_t Set_Temperature_ADC_Piont;

	if(self->Full_Power_State==1){
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800296a:	2b01      	cmp	r3, #1
 800296c:	d11d      	bne.n	80029aa <Solder_Iron_Set_MODE_Temperature+0x5a>
		Set_Temperature_ADC_Piont=self->Temperature_Converting.Temperature_Set_ADC=MAX_ADC_Value;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f640 62d8 	movw	r2, #3800	; 0xed8
 8002974:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800297e:	81fb      	strh	r3, [r7, #14]
		self->Temperature_Converting.Temperature_Set_C=(uint16_t)(Set_Temperature_ADC_Piont/self->Temperature_Converting.Coeff);
 8002980:	89fb      	ldrh	r3, [r7, #14]
 8002982:	4618      	mov	r0, r3
 8002984:	f7fd ffac 	bl	80008e0 <__aeabi_i2f>
 8002988:	4602      	mov	r2, r0
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800298e:	4619      	mov	r1, r3
 8002990:	4610      	mov	r0, r2
 8002992:	f7fe f8ad 	bl	8000af0 <__aeabi_fdiv>
 8002996:	4603      	mov	r3, r0
 8002998:	4618      	mov	r0, r3
 800299a:	f7fe f9e1 	bl	8000d60 <__aeabi_f2uiz>
 800299e:	4603      	mov	r3, r0
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 80029a8:	e00a      	b.n	80029c0 <Solder_Iron_Set_MODE_Temperature+0x70>
	}
	else
		Set_Temperature(&self->Temperature_Presets_C, &self->Temperature_Converting, &self->MODE);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f103 0046 	add.w	r0, r3, #70	; 0x46
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f103 0150 	add.w	r1, r3, #80	; 0x50
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	3344      	adds	r3, #68	; 0x44
 80029ba:	461a      	mov	r2, r3
 80029bc:	f7ff fda0 	bl	8002500 <Set_Temperature>

	PID_Set_Point(&self->PID, self->Temperature_Converting.Temperature_Set_ADC);		//Set Point for PID
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80029c8:	4619      	mov	r1, r3
 80029ca:	4610      	mov	r0, r2
 80029cc:	f7ff fd6c 	bl	80024a8 <PID_Set_Point>
}
 80029d0:	bf00      	nop
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <Solder_Iron_Temperature_Presets_Corection_Converting>:
//---------------------------------------------------------------------------------
void Solder_Iron_Temperature_Presets_Corection_Converting(struct Soldering_Iron *self){
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
	/**
	 * Converting Solder_Iron_Temperature_Presets_Corection from Celsius to ADC Levels
	 */
	Temperature_Presets_Corection_Converting(&self->Temperature_Corection_C, &self->Temperature_Corection_ADC, &self->Temperature_Converting);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f103 0168 	add.w	r1, r3, #104	; 0x68
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3350      	adds	r3, #80	; 0x50
 80029f0:	461a      	mov	r2, r3
 80029f2:	f7ff fe49 	bl	8002688 <Temperature_Presets_Corection_Converting>
}
 80029f6:	bf00      	nop
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <Solder_Iron_Set_Manual_Temperature>:
//---------------------------------------------------------------------------------
void Solder_Iron_Set_Manual_Temperature(struct Soldering_Iron *self){
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b082      	sub	sp, #8
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
	/**
	 * Set manual temperature for Solder_Iron and set Manual MODE
	 */
	if(self->Temperature_Presets_C.Prew_Set_Temperature_Manual!=self->Temperature_Presets_C.Manual){	//if curent set temperature != Prew_Manual set temperature
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d009      	beq.n	8002a2a <Solder_Iron_Set_Manual_Temperature+0x2c>
		Solder_Iron_Set_MODE_Temperature(self, MANUAL);	//Set temperature PID point
 8002a16:	2100      	movs	r1, #0
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f7ff ff99 	bl	8002950 <Solder_Iron_Set_MODE_Temperature>
		Solder_Iron_Sleep_Time_Resset(self);			//Reset sleep timer
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f7ff fef4 	bl	800280c <Solder_Iron_Sleep_Time_Resset>
		Solder_Iron_Flash_Reset_Rewrite_Timer(self);	//
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 f913 	bl	8002c50 <Solder_Iron_Flash_Reset_Rewrite_Timer>
	}
}
 8002a2a:	bf00      	nop
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <Solder_Iron_Set_Preset1_Temperature>:
//---------------------------------------------------------------------------------
void Solder_Iron_Set_Preset1_Temperature(struct Soldering_Iron *self){
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b082      	sub	sp, #8
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
	/**
	 * Set Preset1 temperature for Solder_Iron and set Preset1 MODE
	 */
	 Solder_Iron_Set_MODE_Temperature(self, PRESET1);	//Set temperature PID point
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f7ff ff87 	bl	8002950 <Solder_Iron_Set_MODE_Temperature>
	 Solder_Iron_Sleep_Time_Resset(self);				//Reset sleep timer
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7ff fee2 	bl	800280c <Solder_Iron_Sleep_Time_Resset>
}
 8002a48:	bf00      	nop
 8002a4a:	3708      	adds	r7, #8
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <Solder_Iron_Set_Preset2_Temperature>:
//---------------------------------------------------------------------------------
void Solder_Iron_Set_Preset2_Temperature(struct Soldering_Iron *self){
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
	/**
	 * Set Preset2 temperature for Solder_Iron and set Preset2 MODE
	 */
	 Solder_Iron_Set_MODE_Temperature(self, PRESET2);	//Set temperature PID point
 8002a58:	2102      	movs	r1, #2
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7ff ff78 	bl	8002950 <Solder_Iron_Set_MODE_Temperature>
	 Solder_Iron_Sleep_Time_Resset(self);				//Reset sleep timer
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f7ff fed3 	bl	800280c <Solder_Iron_Sleep_Time_Resset>
}
 8002a66:	bf00      	nop
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <Solder_Iron_Set_Manual_Preset_Temperature_C>:
//---------------------------------------------------------------------------------
void Solder_Iron_Set_Manual_Preset_Temperature_C(uint16_t value, struct Soldering_Iron *self){
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b082      	sub	sp, #8
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	4603      	mov	r3, r0
 8002a76:	6039      	str	r1, [r7, #0]
 8002a78:	80fb      	strh	r3, [r7, #6]
	/**
	 * Set Manual_Preset_Temperature temperature for Solder_Iron in Celsius
	 */
	Set_Manual_Preset_Temperature_C(value, &self->Temperature_Presets_C);
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	f103 0246 	add.w	r2, r3, #70	; 0x46
 8002a80:	88fb      	ldrh	r3, [r7, #6]
 8002a82:	4611      	mov	r1, r2
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff fe76 	bl	8002776 <Set_Manual_Preset_Temperature_C>
}
 8002a8a:	bf00      	nop
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <Solder_Iron_Full_Power_ON>:
//---------------------------------------------------------------------------------
void Solder_Iron_Full_Power_ON(struct Soldering_Iron *self){
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b082      	sub	sp, #8
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
	/**
	 * Turn ON Full_Power
	 */
	self->Full_Power_State=Full_Power_ON;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	Solder_Iron_Set_MODE_Temperature(self, self->MODE);	//Set temperature PID point
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f7ff ff50 	bl	8002950 <Solder_Iron_Set_MODE_Temperature>
	Solder_Iron_Sleep_Time_Resset(self);				//Reset sleep timer
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f7ff feab 	bl	800280c <Solder_Iron_Sleep_Time_Resset>
}
 8002ab6:	bf00      	nop
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <Solder_Iron_Full_Power_OFF>:
//---------------------------------------------------------------------------------
void Solder_Iron_Full_Power_OFF(struct Soldering_Iron *self){
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b082      	sub	sp, #8
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
	/**
	 * Turn OFF Full_Power
	 */
	self->Full_Power_State=Full_Power_OFF;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	Solder_Iron_Set_MODE_Temperature(self, self->MODE);	//Set temperature PID point
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f7ff ff3a 	bl	8002950 <Solder_Iron_Set_MODE_Temperature>
	Solder_Iron_Sleep_Time_Resset(self);				//Reset sleep timer
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f7ff fe95 	bl	800280c <Solder_Iron_Sleep_Time_Resset>
}
 8002ae2:	bf00      	nop
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <Solder_Iron_Get_Full_Power_State>:
//---------------------------------------------------------------------------------
enum Full_Power_State Solder_Iron_Get_Full_Power_State(struct Soldering_Iron *self){
 8002aea:	b480      	push	{r7}
 8002aec:	b083      	sub	sp, #12
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
	/**
	 * Return Full_Powr_State	(Full_Power_ON,Full_Power_OFF)
	 */
	return self->Full_Power_State;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bc80      	pop	{r7}
 8002b00:	4770      	bx	lr

08002b02 <Solder_Iron_Get_State>:
//---------------------------------------------------------------------------------
enum Soldering_Iron_State Solder_Iron_Get_State(struct Soldering_Iron *self){
 8002b02:	b480      	push	{r7}
 8002b04:	b083      	sub	sp, #12
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
	/**
	 * Return Solder_Iron_State (Soldering_Iron_ON Soldering_Iron_OFF)
	 */
	return self->State;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bc80      	pop	{r7}
 8002b18:	4770      	bx	lr

08002b1a <Soldering_Iron_Get_Manual_Preset_Temperature_C>:
//---------------------------------------------------------------------------------
uint16_t Soldering_Iron_Get_Manual_Preset_Temperature_C(struct Soldering_Iron *self){
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b082      	sub	sp, #8
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
	/*
	 * Return manual preset preset temperature in celsius
	 */
	return Get_Manual_Preset_Temperature_C(&self->Temperature_Presets_C);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	3346      	adds	r3, #70	; 0x46
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7ff fe1a 	bl	8002760 <Get_Manual_Preset_Temperature_C>
 8002b2c:	4603      	mov	r3, r0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <Soldering_Iron_Get_Temperature_Set_C>:
//---------------------------------------------------------------------------------
uint16_t Soldering_Iron_Get_Temperature_Set_C(struct Soldering_Iron *self){
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b082      	sub	sp, #8
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
	/*
	 * Return Current Set temperature in celsius
	 */
	return Get_Temperature_Set_C(&self->Temperature_Converting);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	3350      	adds	r3, #80	; 0x50
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff fde3 	bl	800270e <Get_Temperature_Set_C>
 8002b48:	4603      	mov	r3, r0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <Soldering_Iron_Get_Current_Temperature_C>:
//---------------------------------------------------------------------------------
uint16_t Soldering_Iron_Get_Current_Temperature_C(struct Soldering_Iron *self){
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b082      	sub	sp, #8
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
	/*
	 * Return Current temperature in celsius
	 */
	return Get_Current_Temperature_C(&self->Temperature_Converting);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	3350      	adds	r3, #80	; 0x50
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7ff fde0 	bl	8002724 <Get_Current_Temperature_C>
 8002b64:	4603      	mov	r3, r0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <Vibration_Sensor_it>:
//---------------------------------------------------------------------------------
void Vibration_Sensor_it(struct Soldering_Iron *self){
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b082      	sub	sp, #8
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
	/**
	 * Vibration sensor have not any check
	 * Main function reset Sleep timer when rising / falling edge
	 */
	self->VS.State=HAL_GPIO_ReadPin(self->VS.GPIO,self->VS.EXTI_PIN);						//Read Pin State
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8002b80:	4619      	mov	r1, r3
 8002b82:	4610      	mov	r0, r2
 8002b84:	f005 f8ec 	bl	8007d60 <HAL_GPIO_ReadPin>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
		if(self->VS.State!=self->VS.Prew_State){											//IF ReadState!=Prew_Stae
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f893 207a 	ldrb.w	r2, [r3, #122]	; 0x7a
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d009      	beq.n	8002bb6 <Vibration_Sensor_it+0x48>
			Solder_Iron_Sleep_Time_Resset(self);											//Sleep Timer Reset and current MODE(sleep) set previous mode(Manual/Preset1/Preset2)
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f7ff fe32 	bl	800280c <Solder_Iron_Sleep_Time_Resset>
			Solder_Iron_Set_MODE_Temperature(self,self->MODE);								//Set previous mode temperature before sleep mode temperature;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bae:	4619      	mov	r1, r3
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f7ff fecd 	bl	8002950 <Solder_Iron_Set_MODE_Temperature>
		}
		self->VS.Prew_State=self->VS.State;													//Prew State = Read State
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f893 207a 	ldrb.w	r2, [r3, #122]	; 0x7a
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
}
 8002bc2:	bf00      	nop
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <Solder_Iron_Flash_Write_Struct>:
//---------------------------------------------------------------------------------------------------------------------------------// Solder_Iron Flash
uint32_t Solder_Iron_Flash_Write_Struct(struct Soldering_Iron *self,uint32_t addr){
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b082      	sub	sp, #8
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
 8002bd2:	6039      	str	r1, [r7, #0]
	/**
	 * Using to write main structure Soldering_Iron into Flash Memory for an address
	 * return address of the end of writing
	 */
	return Flash_Write (addr, self, sizeof(*self));
 8002bd4:	22ac      	movs	r2, #172	; 0xac
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	6838      	ldr	r0, [r7, #0]
 8002bda:	f7fe fcea 	bl	80015b2 <Flash_Write>
 8002bde:	4603      	mov	r3, r0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3708      	adds	r7, #8
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <Solder_Iron_Flash_Read_Struct>:
//---------------------------------------------------------------------------------
HAL_StatusTypeDef Solder_Iron_Flash_Read_Struct(struct Soldering_Iron *self,uint32_t addr){
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b0ae      	sub	sp, #184	; 0xb8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
	 * Using to read main structure Soldering_Iron from Flash Memory for an address
	 * return HAL_OK is read  struct was successful  and HAL_ERROR if not
	 * If reading is correct function write all data into a structure
	 */
	struct Soldering_Iron Read_Struct;
	Flash_Read (addr, &Read_Struct, sizeof(*self));			//Read struct into copy
 8002bf2:	f107 030c 	add.w	r3, r7, #12
 8002bf6:	22ac      	movs	r2, #172	; 0xac
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	6838      	ldr	r0, [r7, #0]
 8002bfc:	f7fe fd16 	bl	800162c <Flash_Read>
	if(Read_Struct.Flash_Key==Soldering_Iron_Struct_Key){	//Check if wrote data is a struct
 8002c00:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c04:	4a08      	ldr	r2, [pc, #32]	; (8002c28 <Solder_Iron_Flash_Read_Struct+0x40>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d109      	bne.n	8002c1e <Solder_Iron_Flash_Read_Struct+0x36>
		*self=Read_Struct;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f107 030c 	add.w	r3, r7, #12
 8002c12:	22ac      	movs	r2, #172	; 0xac
 8002c14:	4619      	mov	r1, r3
 8002c16:	f008 fa37 	bl	800b088 <memcpy>
		return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	e000      	b.n	8002c20 <Solder_Iron_Flash_Read_Struct+0x38>
	}else
		return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	37b8      	adds	r7, #184	; 0xb8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	0801f802 	.word	0x0801f802

08002c2c <Solder_Iron_Flash_Read_Manual_Temperature>:
//---------------------------------------------------------------------------------
HAL_StatusTypeDef Solder_Iron_Flash_Read_Manual_Temperature(struct Soldering_Iron *self){
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
	/**
	 * Using to read structure Temperature_Presets from Flash Memory for an Page
	 * return HAL_OK or HAL_ERROR
	 */
	return Flash_Read_Manual_Temperature(&self->Temperature_Presets_C, Soldering_Iron_Manual_Temperature_Flash_Key, Soldering_Iron_Manual_Temperature_Flash_Page);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	3346      	adds	r3, #70	; 0x46
 8002c38:	227d      	movs	r2, #125	; 0x7d
 8002c3a:	4904      	ldr	r1, [pc, #16]	; (8002c4c <Solder_Iron_Flash_Read_Manual_Temperature+0x20>)
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f000 fc78 	bl	8003532 <Flash_Read_Manual_Temperature>
 8002c42:	4603      	mov	r3, r0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	0801f806 	.word	0x0801f806

08002c50 <Solder_Iron_Flash_Reset_Rewrite_Timer>:
//---------------------------------------------------------------------------------
void Solder_Iron_Flash_Reset_Rewrite_Timer(struct Soldering_Iron *self){
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
	/**
	 * This function reset rewrite timer.
	 */
	Flash_Reset_Rewrite_Timer(&self->Flash_Rewrite_Timer);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	33a2      	adds	r3, #162	; 0xa2
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f000 fc95 	bl	800358c <Flash_Reset_Rewrite_Timer>
}
 8002c62:	bf00      	nop
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <Soldering_Heat_Gun_ini>:
//-----------------------------------------------------------------------------------------------------------------------------------// Heat gun
void Soldering_Heat_Gun_Flash_Reset_Rewrite_Timer(struct Soldering_Heat_Gun *self);
void Soldering_Heat_Gun_Temperature_Coolling_Converting(struct Soldering_Heat_Gun *self);
//---------------------------------------------------------------------------------
void Soldering_Heat_Gun_ini(struct Soldering_Heat_Gun *self){
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b082      	sub	sp, #8
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
	/**
	 * Basic initialization of all part for starting all processes
	 */
	PID_ini(&self->PID);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7ff fb77 	bl	8002368 <PID_ini>
	Filter_ini(&self->Filter);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	3324      	adds	r3, #36	; 0x24
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7fe fbce 	bl	8001420 <Filter_ini>
	Flash_Rewrite_Timer_ini(&self->Flash_Rewrite_Timer);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3392      	adds	r3, #146	; 0x92
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f000 fcdd 	bl	8003648 <Flash_Rewrite_Timer_ini>
	Soldering_Heat_Gun_Set_Manual_Temperature(self);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f8ae 	bl	8002df0 <Soldering_Heat_Gun_Set_Manual_Temperature>
}
 8002c94:	bf00      	nop
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <Soldering_Heat_Gun_ON>:
//---------------------------------------------------------------------------------
void Soldering_Heat_Gun_ON(struct Soldering_Heat_Gun *self){
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
	/**
	 * Turn ON Heat Gun
	 */

	PAC_Device_Control_ON(self->PAC_Control);	//Turn ON Phase Angle Control
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff faae 	bl	800220a <PAC_Device_Control_ON>
	PID_ini(&self->PID);						//Reset PID
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff fb59 	bl	8002368 <PID_ini>
	Filter_ini(&self->Filter);					//Reset Filter
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	3324      	adds	r3, #36	; 0x24
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7fe fbb0 	bl	8001420 <Filter_ini>

	HAL_GPIO_WritePin(self->OFF_GPIO, self->OFF_PIN, GPIO_PIN_RESET);		//Set manual mode to FAN rotating speed controll
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8002ccc:	2200      	movs	r2, #0
 8002cce:	4619      	mov	r1, r3
 8002cd0:	f005 f85d 	bl	8007d8e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(self->MANUAL_GPIO, self->MANUAL_PIN, GPIO_PIN_SET);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	f005 f853 	bl	8007d8e <HAL_GPIO_WritePin>

	self->State=Heat_Gun_ON;					//Set turn ON State
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
}
 8002cf0:	bf00      	nop
 8002cf2:	3708      	adds	r7, #8
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <Soldering_Heat_Gun_OFF>:
//---------------------------------------------------------------------------------
void Soldering_Heat_Gun_OFF(struct Soldering_Heat_Gun *self){
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
	/**
	 * Turn OFF Heat Gun
	 */
	Soldering_Heat_Gun_Temperature_Coolling_Converting(self);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 f849 	bl	8002d98 <Soldering_Heat_Gun_Temperature_Coolling_Converting>
	self->State=Heat_Gun_COOLING;					//Set COOLING State. It needs to cool heat gun to Temperature_Coolling. After set Turn OFF state
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2202      	movs	r2, #2
 8002d0a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	PAC_Device_Control_OFF(self->PAC_Control);											// Turn OFF Phase Angle Control
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff faa6 	bl	8002264 <PAC_Device_Control_OFF>
	HAL_GPIO_WritePin(self->MANUAL_GPIO, self->MANUAL_PIN, GPIO_PIN_RESET);	 	//Turn ON Full Speed FAN rotation
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8002d24:	2200      	movs	r2, #0
 8002d26:	4619      	mov	r1, r3
 8002d28:	f005 f831 	bl	8007d8e <HAL_GPIO_WritePin>
}
 8002d2c:	bf00      	nop
 8002d2e:	3708      	adds	r7, #8
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <Soldering_Heat_Gun_Set_MODE_Temperature>:
//---------------------------------------------------------------------------------
void Soldering_Heat_Gun_Set_MODE_Temperature(struct Soldering_Heat_Gun *self,enum MODE MODE){
 8002d34:	b590      	push	{r4, r7, lr}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	70fb      	strb	r3, [r7, #3]
	/**
	 * Heat_Gun set temperature for PID based on mode
	 * Needs set mode struct.mode(MANUAL/PRESET1..) Before use
	 */
	self->MODE=MODE;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	78fa      	ldrb	r2, [r7, #3]
 8002d44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	PID_Set_Point(&self->PID, Set_Temperature(&self->Temperature_Presets_C, &self->Temperature_Converting, &self->MODE));
 8002d48:	687c      	ldr	r4, [r7, #4]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f103 0046 	add.w	r0, r3, #70	; 0x46
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	3344      	adds	r3, #68	; 0x44
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	f7ff fbd0 	bl	8002500 <Set_Temperature>
 8002d60:	4603      	mov	r3, r0
 8002d62:	4619      	mov	r1, r3
 8002d64:	4620      	mov	r0, r4
 8002d66:	f7ff fb9f 	bl	80024a8 <PID_Set_Point>
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd90      	pop	{r4, r7, pc}

08002d72 <Soldering_Heat_Gun_Temperature_Presets_Corection_Converting>:
//---------------------------------------------------------------------------------
void Soldering_Heat_Gun_Temperature_Presets_Corection_Converting(struct Soldering_Heat_Gun *self){
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b082      	sub	sp, #8
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
	/**
	 * Converting Soldering_Heat_Gun_Temperature_Presets_Corection from Celsius to ADC Levels
	 */
	Temperature_Presets_Corection_Converting(&self->Temperature_Corection_C, &self->Temperature_Corection_ADC, &self->Temperature_Converting);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f103 0168 	add.w	r1, r3, #104	; 0x68
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	3350      	adds	r3, #80	; 0x50
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	f7ff fc7c 	bl	8002688 <Temperature_Presets_Corection_Converting>
}
 8002d90:	bf00      	nop
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <Soldering_Heat_Gun_Temperature_Coolling_Converting>:
//---------------------------------------------------------------------------------
void Soldering_Heat_Gun_Temperature_Coolling_Converting(struct Soldering_Heat_Gun *self){
 8002d98:	b590      	push	{r4, r7, lr}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
	self->Temperature_Coolling.ADC=(uint16_t)(self->Temperature_Coolling.C*self->Temperature_Converting.Coeff+self->Temperature_Converting.Coeff/2);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f8b3 308e 	ldrh.w	r3, [r3, #142]	; 0x8e
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7fd fd9a 	bl	80008e0 <__aeabi_i2f>
 8002dac:	4602      	mov	r2, r0
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db2:	4619      	mov	r1, r3
 8002db4:	4610      	mov	r0, r2
 8002db6:	f7fd fde7 	bl	8000988 <__aeabi_fmul>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	461c      	mov	r4, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7fd fe92 	bl	8000af0 <__aeabi_fdiv>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4620      	mov	r0, r4
 8002dd2:	f7fd fcd1 	bl	8000778 <__addsf3>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7fd ffc1 	bl	8000d60 <__aeabi_f2uiz>
 8002dde:	4603      	mov	r3, r0
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd90      	pop	{r4, r7, pc}

08002df0 <Soldering_Heat_Gun_Set_Manual_Temperature>:
//---------------------------------------------------------------------------------
void Soldering_Heat_Gun_Set_Manual_Temperature(struct Soldering_Heat_Gun *self){
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
	/**
	 * Set manual temperature for Soldering_Heat_Gun and set Manual MODE
	 */
	if(self->Temperature_Presets_C.Prew_Set_Temperature_Manual!=self->Temperature_Presets_C.Manual){
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d006      	beq.n	8002e16 <Soldering_Heat_Gun_Set_Manual_Temperature+0x26>
		Soldering_Heat_Gun_Set_MODE_Temperature(self, MANUAL);	//Set temperature PID point
 8002e08:	2100      	movs	r1, #0
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7ff ff92 	bl	8002d34 <Soldering_Heat_Gun_Set_MODE_Temperature>
		Soldering_Heat_Gun_Flash_Reset_Rewrite_Timer(self);		//Reset rewrite timer
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f000 f937 	bl	8003084 <Soldering_Heat_Gun_Flash_Reset_Rewrite_Timer>
	}
}
 8002e16:	bf00      	nop
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <Soldering_Heat_Gun_Set_Preset1_Temperature>:
//---------------------------------------------------------------------------------
void Soldering_Heat_Gun_Set_Preset1_Temperature(struct Soldering_Heat_Gun *self){
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b082      	sub	sp, #8
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
	/**
	 * Set Preset1 temperature for Soldering_Heat_Gun and set Preset1 MODE
	 */
	Soldering_Heat_Gun_Set_MODE_Temperature(self, PRESET1);
 8002e26:	2101      	movs	r1, #1
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f7ff ff83 	bl	8002d34 <Soldering_Heat_Gun_Set_MODE_Temperature>
}
 8002e2e:	bf00      	nop
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <Soldering_Heat_Gun_Set_Preset2_Temperature>:
//---------------------------------------------------------------------------------
void Soldering_Heat_Gun_Set_Preset2_Temperature(struct Soldering_Heat_Gun *self){
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b082      	sub	sp, #8
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
	/**
	 * Set Preset2 temperature for Soldering_Heat_Gun and set Preset2 MODE
	 */
	Soldering_Heat_Gun_Set_MODE_Temperature(self, PRESET2);
 8002e3e:	2102      	movs	r1, #2
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f7ff ff77 	bl	8002d34 <Soldering_Heat_Gun_Set_MODE_Temperature>
}
 8002e46:	bf00      	nop
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <Soldering_Heat_Gun_Set_Manual_Preset_Temperature_C>:
//---------------------------------------------------------------------------------
void Soldering_Heat_Gun_Set_Manual_Preset_Temperature_C(uint16_t value, struct Soldering_Heat_Gun *self){
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b082      	sub	sp, #8
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	4603      	mov	r3, r0
 8002e56:	6039      	str	r1, [r7, #0]
 8002e58:	80fb      	strh	r3, [r7, #6]
	/**
	 * Set manual temperature for Soldering_Heat_Gun in Celsius
	 */
	Set_Manual_Preset_Temperature_C(value, &self->Temperature_Presets_C);
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	f103 0246 	add.w	r2, r3, #70	; 0x46
 8002e60:	88fb      	ldrh	r3, [r7, #6]
 8002e62:	4611      	mov	r1, r2
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7ff fc86 	bl	8002776 <Set_Manual_Preset_Temperature_C>
}
 8002e6a:	bf00      	nop
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <Soldering_Heat_Gun_Set_PID_MAX_Control_Value>:
//---------------------------------------------------------------------------------
void Soldering_Heat_Gun_Set_PID_MAX_Control_Value(uint16_t MAX_Control_Value, struct Soldering_Heat_Gun *self){
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b082      	sub	sp, #8
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	4603      	mov	r3, r0
 8002e7a:	6039      	str	r1, [r7, #0]
 8002e7c:	80fb      	strh	r3, [r7, #6]
	/**
	 * Set PID's max control value
	 */
	PID_Set_MAX_Control(MAX_Control_Value, &self->PID);
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	88fb      	ldrh	r3, [r7, #6]
 8002e82:	4611      	mov	r1, r2
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff fb2d 	bl	80024e4 <PID_Set_MAX_Control>
}
 8002e8a:	bf00      	nop
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <Soldering_Heat_Gun_Get_State>:
//---------------------------------------------------------------------------------
enum Soldering_Heat_Gun_State Soldering_Heat_Gun_Get_State(struct Soldering_Heat_Gun *self){
 8002e92:	b480      	push	{r7}
 8002e94:	b083      	sub	sp, #12
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
	/**
	 * Return Soldering_Heat_Gun_State (Heat_Gun_OFF Heat_Gun_ON Heat_Gun_COOLING)
	 */
	return self->State;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bc80      	pop	{r7}
 8002ea8:	4770      	bx	lr

08002eaa <Soldering_Heat_Gun_Get_Manual_Preset_Temperature_C>:
//---------------------------------------------------------------------------------
uint16_t Soldering_Heat_Gun_Get_Manual_Preset_Temperature_C(struct Soldering_Heat_Gun *self){
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b082      	sub	sp, #8
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
	/*
	 * Return manual preset preset temperature in celsius
	 */
	return Get_Manual_Preset_Temperature_C(&self->Temperature_Presets_C);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	3346      	adds	r3, #70	; 0x46
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7ff fc52 	bl	8002760 <Get_Manual_Preset_Temperature_C>
 8002ebc:	4603      	mov	r3, r0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3708      	adds	r7, #8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <Soldering_Heat_Gun_Get_Temperature_Set_C>:
//---------------------------------------------------------------------------------
uint16_t Soldering_Heat_Gun_Get_Temperature_Set_C(struct Soldering_Heat_Gun *self){
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b082      	sub	sp, #8
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
	/*
	 * Return Current set temperature  preset temperature in celsius
	 */
	return Get_Temperature_Set_C(&self->Temperature_Converting);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	3350      	adds	r3, #80	; 0x50
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7ff fc1b 	bl	800270e <Get_Temperature_Set_C>
 8002ed8:	4603      	mov	r3, r0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <Soldering_Heat_Gun_Get_Current_Temperature_C>:
//---------------------------------------------------------------------------------
uint16_t Soldering_Heat_Gun_Get_Current_Temperature_C(struct Soldering_Heat_Gun *self){
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b082      	sub	sp, #8
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
	/*
	 * Return Current temperature temperature in celsius
	 */
	return Get_Current_Temperature_C(&self->Temperature_Converting);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	3350      	adds	r3, #80	; 0x50
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7ff fc18 	bl	8002724 <Get_Current_Temperature_C>
 8002ef4:	4603      	mov	r3, r0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <Soldering_Heat_Gun_Get_PAC_Controll_State>:
//---------------------------------------------------------------------------------
enum PAC_Device_Control_State Soldering_Heat_Gun_Get_PAC_Controll_State(struct Soldering_Heat_Gun *self){
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b082      	sub	sp, #8
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
	/**
	 * return  Soldering_Heat_Gun_Get_PAC_Controll_State(PAC_Control_OFF PAC_Control_ON)
	 */
	return PAC_Device_Control_Get_State(self->PAC_Control);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff f9db 	bl	80022c6 <PAC_Device_Control_Get_State>
 8002f10:	4603      	mov	r3, r0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <Soldering_Heat_Gun_Get_PAC_Controll_Value>:
//---------------------------------------------------------------------------------
uint16_t Soldering_Heat_Gun_Get_PAC_Controll_Value(struct Soldering_Heat_Gun *self){
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b082      	sub	sp, #8
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
	/**
	 * return Soldering_Heat_Gun PAC's control value
	 */
	return PAC_Device_Control_Get_Control_Value(self->PAC_Control);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff f824 	bl	8001f74 <PAC_Device_Control_Get_Control_Value>
 8002f2c:	4603      	mov	r3, r0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <Soldering_Heat_Gun_it>:
//---------------------------------------------------------------------------------
void Soldering_Heat_Gun_it(struct Soldering_Heat_Gun *self){
 8002f36:	b590      	push	{r4, r7, lr}
 8002f38:	b083      	sub	sp, #12
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
	/**
	 * Main function PID and Filter iteration for Soldering_Heat_Gun
	 * Secondary Cooling Heat GUN
	 */
	if(self->State==Heat_Gun_ON&&PAC_Get_State(self->PAC)==ZCD_STATE_ON){									//if Heat GUN turn ON && ZCD ON
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d12b      	bne.n	8002fa0 <Soldering_Heat_Gun_it+0x6a>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff f9d1 	bl	80022f4 <PAC_Get_State>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d123      	bne.n	8002fa0 <Soldering_Heat_Gun_it+0x6a>
		PID_Set_Curent_Point(&self->PID,(int)Temperatur_Correction(Filter_Combined(&self->Filter), &self->Temperature_Converting, &self->Temperature_Corection_ADC, &self->MODE));
 8002f58:	687c      	ldr	r4, [r7, #4]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	3324      	adds	r3, #36	; 0x24
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7fe fac3 	bl	80014ea <Filter_Combined>
 8002f64:	4603      	mov	r3, r0
 8002f66:	4618      	mov	r0, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	3344      	adds	r3, #68	; 0x44
 8002f78:	f7ff fb2c 	bl	80025d4 <Temperatur_Correction>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	4619      	mov	r1, r3
 8002f80:	4620      	mov	r0, r4
 8002f82:	f7ff faa0 	bl	80024c6 <PID_Set_Curent_Point>
																										//Filter and set current Temperature and Heat_Gun PID IT
		PAC_Device_Control_Set_Control_Value(self->PAC_Control, (uint16_t)PID_it(&self->PID));							//Set PAC control value
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff f9fd 	bl	800238c <PID_it>
 8002f92:	4603      	mov	r3, r0
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	4619      	mov	r1, r3
 8002f98:	4620      	mov	r0, r4
 8002f9a:	f7ff f843 	bl	8002024 <PAC_Device_Control_Set_Control_Value>
		if(Temperatur_Correction(Filter_Combined(&self->Filter), &self->Temperature_Converting, &self->Temperature_Corection_C, &self->MODE)<=self->Temperature_Coolling.ADC){	//and set current Temperature											//if the current temperature is less than  Temperature_Coolling
			self->State=Heat_Gun_OFF;																	//Turn off heat gun
			HAL_GPIO_WritePin(self->OFF_GPIO, self->OFF_PIN, GPIO_PIN_SET);								// Turn OF FAN rotating
		}
	}
}
 8002f9e:	e02a      	b.n	8002ff6 <Soldering_Heat_Gun_it+0xc0>
	}else if(self->State==Heat_Gun_COOLING){															//if Heat GUN Cooling
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d125      	bne.n	8002ff6 <Soldering_Heat_Gun_it+0xc0>
		if(Temperatur_Correction(Filter_Combined(&self->Filter), &self->Temperature_Converting, &self->Temperature_Corection_C, &self->MODE)<=self->Temperature_Coolling.ADC){	//and set current Temperature											//if the current temperature is less than  Temperature_Coolling
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	3324      	adds	r3, #36	; 0x24
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7fe fa9b 	bl	80014ea <Filter_Combined>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f103 025c 	add.w	r2, r3, #92	; 0x5c
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	3344      	adds	r3, #68	; 0x44
 8002fc8:	f7ff fb04 	bl	80025d4 <Temperatur_Correction>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	461a      	mov	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d80d      	bhi.n	8002ff6 <Soldering_Heat_Gun_it+0xc0>
			self->State=Heat_Gun_OFF;																	//Turn off heat gun
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
			HAL_GPIO_WritePin(self->OFF_GPIO, self->OFF_PIN, GPIO_PIN_SET);								// Turn OF FAN rotating
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8002fee:	2201      	movs	r2, #1
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	f004 fecc 	bl	8007d8e <HAL_GPIO_WritePin>
}
 8002ff6:	bf00      	nop
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd90      	pop	{r4, r7, pc}

08002ffe <Soldering_Heat_Gun_Flash_Write_Struct>:
//---------------------------------------------------------------------------------------------------------------------------------// Heat_Gun Flash
uint32_t Soldering_Heat_Gun_Flash_Write_Struct(struct Soldering_Heat_Gun *self,uint32_t addr){
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b082      	sub	sp, #8
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
 8003006:	6039      	str	r1, [r7, #0]
	/**
	 * Using to write main structure Soldering_Heat_Gun into Flash Memory for an address
	 * return address of the end of writing
	 */
	return Flash_Write (addr, self, sizeof(*self));
 8003008:	229c      	movs	r2, #156	; 0x9c
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	6838      	ldr	r0, [r7, #0]
 800300e:	f7fe fad0 	bl	80015b2 <Flash_Write>
 8003012:	4603      	mov	r3, r0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3708      	adds	r7, #8
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <Soldering_Heat_Gun_Flash_Read_Struct>:
//---------------------------------------------------------------------------------
uint8_t Soldering_Heat_Gun_Flash_Read_Struct(struct Soldering_Heat_Gun *self,uint32_t addr){
 800301c:	b580      	push	{r7, lr}
 800301e:	b0aa      	sub	sp, #168	; 0xa8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
	 * Using to read main structure Soldering_Heat_Gun from Flash Memory for an address
	 * return HAL_OK is read  struct was successful  and HAL_ERROR if not
	 * If reading is correct function write all data into a structure
	 */
	struct Soldering_Heat_Gun Read_Struct;
	Flash_Read (addr, &Read_Struct, sizeof(*self));						//Read struct into copy
 8003026:	f107 030c 	add.w	r3, r7, #12
 800302a:	229c      	movs	r2, #156	; 0x9c
 800302c:	4619      	mov	r1, r3
 800302e:	6838      	ldr	r0, [r7, #0]
 8003030:	f7fe fafc 	bl	800162c <Flash_Read>
	if(Read_Struct.Flash_Key==Soldering_Heat_Gun_Struct_Key){			//Check if wrote data is a struct
 8003034:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003038:	4a08      	ldr	r2, [pc, #32]	; (800305c <Soldering_Heat_Gun_Flash_Read_Struct+0x40>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d109      	bne.n	8003052 <Soldering_Heat_Gun_Flash_Read_Struct+0x36>
		*self=Read_Struct;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4618      	mov	r0, r3
 8003042:	f107 030c 	add.w	r3, r7, #12
 8003046:	229c      	movs	r2, #156	; 0x9c
 8003048:	4619      	mov	r1, r3
 800304a:	f008 f81d 	bl	800b088 <memcpy>
		return HAL_OK;
 800304e:	2300      	movs	r3, #0
 8003050:	e000      	b.n	8003054 <Soldering_Heat_Gun_Flash_Read_Struct+0x38>
	}else
		return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
}
 8003054:	4618      	mov	r0, r3
 8003056:	37a8      	adds	r7, #168	; 0xa8
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	0801f804 	.word	0x0801f804

08003060 <Soldering_Heat_Gun_Flash_Read_Manual_Temperature>:
//---------------------------------------------------------------------------------
HAL_StatusTypeDef Soldering_Heat_Gun_Flash_Read_Manual_Temperature(struct Soldering_Heat_Gun *self){
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
	/**
	 * Using to read structure Temperature_Presets from Flash Memory for an Page
	 * return HAL_OK or HAL_ERROR
	 */
	return Flash_Read_Manual_Temperature(&self->Temperature_Presets_C, Soldering_Heat_Gun_Manual_Temperature_Flash_Key, Soldering_Heat_Gun_Manual_Temperature_Flash_Page);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	3346      	adds	r3, #70	; 0x46
 800306c:	227c      	movs	r2, #124	; 0x7c
 800306e:	4904      	ldr	r1, [pc, #16]	; (8003080 <Soldering_Heat_Gun_Flash_Read_Manual_Temperature+0x20>)
 8003070:	4618      	mov	r0, r3
 8003072:	f000 fa5e 	bl	8003532 <Flash_Read_Manual_Temperature>
 8003076:	4603      	mov	r3, r0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	0801f808 	.word	0x0801f808

08003084 <Soldering_Heat_Gun_Flash_Reset_Rewrite_Timer>:
//---------------------------------------------------------------------------------
void Soldering_Heat_Gun_Flash_Reset_Rewrite_Timer(struct Soldering_Heat_Gun *self){
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
	/**
	 * This function reset rewrite timer.
	 */
	Flash_Reset_Rewrite_Timer(&self->Flash_Rewrite_Timer);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	3392      	adds	r3, #146	; 0x92
 8003090:	4618      	mov	r0, r3
 8003092:	f000 fa7b 	bl	800358c <Flash_Reset_Rewrite_Timer>
}
 8003096:	bf00      	nop
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <Soldering_Separator_ini>:
//---------------------------------------------------------------------------------------------------------------------------------//Soldering_Separator
void Soldering_Separator_Flash_Reset_Rewrite_Timer(struct Soldering_Separator *self);
//---------------------------------------------------------------------------------
void Soldering_Separator_ini(struct Soldering_Separator *self){
 800309e:	b580      	push	{r7, lr}
 80030a0:	b082      	sub	sp, #8
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
	/**
	 * Basic initialization of all part for starting all processes
	 */
	PID_ini(&self->PID);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff f95d 	bl	8002368 <PID_ini>
	Filter_ini(&self->Filter);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	3324      	adds	r3, #36	; 0x24
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7fe f9b4 	bl	8001420 <Filter_ini>
	Flash_Rewrite_Timer_ini(&self->Flash_Rewrite_Timer);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	337e      	adds	r3, #126	; 0x7e
 80030bc:	4618      	mov	r0, r3
 80030be:	f000 fac3 	bl	8003648 <Flash_Rewrite_Timer_ini>
	 Soldering_Separator_Set_Manual_Temperature(self);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 f861 	bl	800318a <Soldering_Separator_Set_Manual_Temperature>
}
 80030c8:	bf00      	nop
 80030ca:	3708      	adds	r7, #8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <Soldering_Separator_ON>:
//---------------------------------------------------------------------------------
void Soldering_Separator_ON(struct Soldering_Separator *self){
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
	/**
	 * Turn ON Soldering_Separator
	 */
	PAC_Device_Control_ON(self->PAC_Control);				//Turn ON Phase Angle Control
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff f894 	bl	800220a <PAC_Device_Control_ON>
	PID_ini(&self->PID);							//Reset PID
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7ff f93f 	bl	8002368 <PID_ini>
	Filter_ini(&self->Filter);						//Reset Filter
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	3324      	adds	r3, #36	; 0x24
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7fe f996 	bl	8001420 <Filter_ini>
	self->State=Separator_ON;						//Set Turn ON State
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
}
 80030fc:	bf00      	nop
 80030fe:	3708      	adds	r7, #8
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <Soldering_Separator_OFF>:
//---------------------------------------------------------------------------------
void Soldering_Separator_OFF(struct Soldering_Separator *self){
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
	/**
	 * Turn OFF Soldering Separator
	 */
	PAC_Device_Control_OFF(self->PAC_Control); 				// Turn OFF Phase Angle Control
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003110:	4618      	mov	r0, r3
 8003112:	f7ff f8a7 	bl	8002264 <PAC_Device_Control_OFF>
	self->State=Separator_OFF;						// Set Soldering_Separator Turn OFF State
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
}
 800311e:	bf00      	nop
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <Soldering_Separator_Set_MODE_Temperature>:
//---------------------------------------------------------------------------------
void Soldering_Separator_Set_MODE_Temperature(struct Soldering_Separator *self, enum MODE MODE){
 8003126:	b590      	push	{r4, r7, lr}
 8003128:	b083      	sub	sp, #12
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
 800312e:	460b      	mov	r3, r1
 8003130:	70fb      	strb	r3, [r7, #3]
	/**
	 * Soldering_Separator set temperature for PID based on mode
	 * Needs set mode struct.mode(MANUAL/PRESET1..) Before use
	 */
	self->MODE=MODE;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	78fa      	ldrb	r2, [r7, #3]
 8003136:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	PID_Set_Point(&self->PID, Set_Temperature(&self->Temperature_Presets_C, &self->Temperature_Converting, &self->MODE));
 800313a:	687c      	ldr	r4, [r7, #4]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f103 0046 	add.w	r0, r3, #70	; 0x46
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3344      	adds	r3, #68	; 0x44
 800314c:	461a      	mov	r2, r3
 800314e:	f7ff f9d7 	bl	8002500 <Set_Temperature>
 8003152:	4603      	mov	r3, r0
 8003154:	4619      	mov	r1, r3
 8003156:	4620      	mov	r0, r4
 8003158:	f7ff f9a6 	bl	80024a8 <PID_Set_Point>
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	bd90      	pop	{r4, r7, pc}

08003164 <Soldering_Separator_Temperature_Presets_Corection_Converting>:
//---------------------------------------------------------------------------------
void Soldering_Separator_Temperature_Presets_Corection_Converting(struct Soldering_Separator *self){
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
	Temperature_Presets_Corection_Converting(&self->Temperature_Corection_C, &self->Temperature_Corection_ADC, &self->Temperature_Converting);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f103 0168 	add.w	r1, r3, #104	; 0x68
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	3350      	adds	r3, #80	; 0x50
 800317c:	461a      	mov	r2, r3
 800317e:	f7ff fa83 	bl	8002688 <Temperature_Presets_Corection_Converting>
}
 8003182:	bf00      	nop
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <Soldering_Separator_Set_Manual_Temperature>:
//---------------------------------------------------------------------------------
void Soldering_Separator_Set_Manual_Temperature(struct Soldering_Separator *self){
 800318a:	b580      	push	{r7, lr}
 800318c:	b082      	sub	sp, #8
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
	/**
	 * Set manual temperature for oldering_Separator and set Manual MODE
	 */
	if(self->Temperature_Presets_C.Prew_Set_Temperature_Manual!=self->Temperature_Presets_C.Manual){
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800319e:	429a      	cmp	r2, r3
 80031a0:	d006      	beq.n	80031b0 <Soldering_Separator_Set_Manual_Temperature+0x26>
		Soldering_Separator_Set_MODE_Temperature(self, MANUAL);	//Set temperature PID point
 80031a2:	2100      	movs	r1, #0
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f7ff ffbe 	bl	8003126 <Soldering_Separator_Set_MODE_Temperature>
		Soldering_Separator_Flash_Reset_Rewrite_Timer(self);	//Reset rewrite Timer
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f90c 	bl	80033c8 <Soldering_Separator_Flash_Reset_Rewrite_Timer>
	}
}
 80031b0:	bf00      	nop
 80031b2:	3708      	adds	r7, #8
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <Soldering_Separator_Set_Preset1_Temperature>:
//---------------------------------------------------------------------------------
void Soldering_Separator_Set_Preset1_Temperature(struct Soldering_Separator *self){
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
	/**
	 * Set Preset1 temperature for Soldering_Separator and set Preset1 MODE
	 */
	Soldering_Separator_Set_MODE_Temperature(self, PRESET1);
 80031c0:	2101      	movs	r1, #1
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f7ff ffaf 	bl	8003126 <Soldering_Separator_Set_MODE_Temperature>
}
 80031c8:	bf00      	nop
 80031ca:	3708      	adds	r7, #8
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <Soldering_Separator_Set_Preset2_Temperature>:
//---------------------------------------------------------------------------------
void Soldering_Separator_Set_Preset2_Temperature(struct Soldering_Separator *self){
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
	/**
	 * Set Preset2 temperature for Soldering_Separator and set Preset1 MODE
	 */
	Soldering_Separator_Set_MODE_Temperature(self, PRESET2);
 80031d8:	2102      	movs	r1, #2
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f7ff ffa3 	bl	8003126 <Soldering_Separator_Set_MODE_Temperature>
}
 80031e0:	bf00      	nop
 80031e2:	3708      	adds	r7, #8
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <Soldering_Separator_Set_Manual_Preset_Temperature_C>:
//---------------------------------------------------------------------------------
void Soldering_Separator_Set_Manual_Preset_Temperature_C(uint16_t value, struct Soldering_Separator *self){
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	4603      	mov	r3, r0
 80031f0:	6039      	str	r1, [r7, #0]
 80031f2:	80fb      	strh	r3, [r7, #6]
	/**
	 * Set manual preset temperature for Soldering_Separator in Celsius
	 */
	Set_Manual_Preset_Temperature_C(value, &self->Temperature_Presets_C);
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	f103 0246 	add.w	r2, r3, #70	; 0x46
 80031fa:	88fb      	ldrh	r3, [r7, #6]
 80031fc:	4611      	mov	r1, r2
 80031fe:	4618      	mov	r0, r3
 8003200:	f7ff fab9 	bl	8002776 <Set_Manual_Preset_Temperature_C>
}
 8003204:	bf00      	nop
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <Soldering_Separator_Get_State>:
//---------------------------------------------------------------------------------
enum Soldering_Separator_State Soldering_Separator_Get_State(struct Soldering_Separator *self){
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
	/**
	 * return Soldering_Separator_State (Separator_OFF,Separator_ON)
	 */
	return self->State;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
}
 800321a:	4618      	mov	r0, r3
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	bc80      	pop	{r7}
 8003222:	4770      	bx	lr

08003224 <Soldering_Separator_Get_Temperature_Set_C>:
//---------------------------------------------------------------------------------
uint16_t Soldering_Separator_Get_Temperature_Set_C(struct Soldering_Separator *self){
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
	/*
	 * Return Current set temperature preset temperature in celsius
	 */
	return Get_Temperature_Set_C(&self->Temperature_Converting);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	3350      	adds	r3, #80	; 0x50
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff fa6c 	bl	800270e <Get_Temperature_Set_C>
 8003236:	4603      	mov	r3, r0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <Soldering_Separator_Get_Current_Temperature_C>:
//---------------------------------------------------------------------------------
uint16_t Soldering_Separator_Get_Current_Temperature_C(struct Soldering_Separator *self){
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
	/*
	 * Return Current temperature temperature in celsius
	 */
	return Get_Current_Temperature_C(&self->Temperature_Converting);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	3350      	adds	r3, #80	; 0x50
 800324c:	4618      	mov	r0, r3
 800324e:	f7ff fa69 	bl	8002724 <Get_Current_Temperature_C>
 8003252:	4603      	mov	r3, r0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3708      	adds	r7, #8
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <Soldering_Separator_Get_Manual_Preset_Temperature_C>:
//---------------------------------------------------------------------------------
uint16_t Soldering_Separator_Get_Manual_Preset_Temperature_C(struct Soldering_Separator *self){
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
	/*
	 * Return manual preset temperature in celsius
	 */
	return Get_Manual_Preset_Temperature_C(&self->Temperature_Presets_C);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	3346      	adds	r3, #70	; 0x46
 8003268:	4618      	mov	r0, r3
 800326a:	f7ff fa79 	bl	8002760 <Get_Manual_Preset_Temperature_C>
 800326e:	4603      	mov	r3, r0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3708      	adds	r7, #8
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <Soldering_Separator_Set_PID_MAX_Control_Value>:
//---------------------------------------------------------------------------------
void Soldering_Separator_Set_PID_MAX_Control_Value(uint16_t MAX_Control_Value, struct Soldering_Separator *self){
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	4603      	mov	r3, r0
 8003280:	6039      	str	r1, [r7, #0]
 8003282:	80fb      	strh	r3, [r7, #6]
	/**
	 * Set PID's max control value
	 */
	PID_Set_MAX_Control(MAX_Control_Value, &self->PID);
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	88fb      	ldrh	r3, [r7, #6]
 8003288:	4611      	mov	r1, r2
 800328a:	4618      	mov	r0, r3
 800328c:	f7ff f92a 	bl	80024e4 <PID_Set_MAX_Control>
}
 8003290:	bf00      	nop
 8003292:	3708      	adds	r7, #8
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <Soldering_Separator_Get_PAC_Controll_State>:
//---------------------------------------------------------------------------------
enum PAC_Device_Control_State Soldering_Separator_Get_PAC_Controll_State(struct Soldering_Separator *self){
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
	/**
	 * return  Soldering_Heat_Gun_Get_PAC_Controll_State(PAC_Control_OFF PAC_Control_ON)
	 */
	return PAC_Device_Control_Get_State(self->PAC_Control);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7ff f80e 	bl	80022c6 <PAC_Device_Control_Get_State>
 80032aa:	4603      	mov	r3, r0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3708      	adds	r7, #8
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <Soldering_Separator_Get_PAC_Controll_Value>:
//---------------------------------------------------------------------------------
uint16_t Soldering_Separator_Get_PAC_Controll_Value(struct Soldering_Separator *self){
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
	/**
	 * return Soldering_Separator PAC's control value
	 */
	return PAC_Device_Control_Get_Control_Value(self->PAC_Control);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7fe fe57 	bl	8001f74 <PAC_Device_Control_Get_Control_Value>
 80032c6:	4603      	mov	r3, r0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3708      	adds	r7, #8
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <Soldering_Separator_it>:
//---------------------------------------------------------------------------------
void Soldering_Separator_it(struct Soldering_Separator *self){
 80032d0:	b590      	push	{r4, r7, lr}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
	/**
	 * Main function PID and Filter iteration for Soldering_Separator
	 *
	 */
	if(self->State==Separator_ON&&PAC_Get_State(self->PAC)==ZCD_STATE_ON){				//if Heat Soldering_Separator turn ON && ZCD ON
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d12a      	bne.n	8003338 <Soldering_Separator_it+0x68>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7ff f804 	bl	80022f4 <PAC_Get_State>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d122      	bne.n	8003338 <Soldering_Separator_it+0x68>
		PID_Set_Curent_Point(&self->PID,(int)Temperatur_Correction(Filter_Combined(&self->Filter), &self->Temperature_Converting, &self->Temperature_Corection_ADC, &self->MODE));
 80032f2:	687c      	ldr	r4, [r7, #4]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	3324      	adds	r3, #36	; 0x24
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7fe f8f6 	bl	80014ea <Filter_Combined>
 80032fe:	4603      	mov	r3, r0
 8003300:	4618      	mov	r0, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	3344      	adds	r3, #68	; 0x44
 8003312:	f7ff f95f 	bl	80025d4 <Temperatur_Correction>
 8003316:	4603      	mov	r3, r0
 8003318:	4619      	mov	r1, r3
 800331a:	4620      	mov	r0, r4
 800331c:	f7ff f8d3 	bl	80024c6 <PID_Set_Curent_Point>
																						//Filter and set current Temperature and Soldering_Separator PID IT;
		PAC_Device_Control_Set_Control_Value(self->PAC_Control, (uint16_t)PID_it(&self->PID));			//Set PAC control value
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4618      	mov	r0, r3
 8003328:	f7ff f830 	bl	800238c <PID_it>
 800332c:	4603      	mov	r3, r0
 800332e:	b29b      	uxth	r3, r3
 8003330:	4619      	mov	r1, r3
 8003332:	4620      	mov	r0, r4
 8003334:	f7fe fe76 	bl	8002024 <PAC_Device_Control_Set_Control_Value>
	}
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	bd90      	pop	{r4, r7, pc}

08003340 <Soldering_Separator_Flash_Write_Struct>:
//---------------------------------------------------------------------------------------------------------------------------------// Soldering_Separator Flash
uint32_t Soldering_Separator_Flash_Write_Struct(struct Soldering_Separator *self,uint32_t addr){
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
	/**
	 * Write general Soldering_Separator struct
	 */
	return Flash_Write (addr, self, sizeof(*self));
 800334a:	2288      	movs	r2, #136	; 0x88
 800334c:	6879      	ldr	r1, [r7, #4]
 800334e:	6838      	ldr	r0, [r7, #0]
 8003350:	f7fe f92f 	bl	80015b2 <Flash_Write>
 8003354:	4603      	mov	r3, r0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
	...

08003360 <Soldering_Separator_Flash_Read_Struct>:
//---------------------------------------------------------------------------------
HAL_StatusTypeDef Soldering_Separator_Flash_Read_Struct(struct Soldering_Separator *self,uint32_t addr){
 8003360:	b580      	push	{r7, lr}
 8003362:	b0a4      	sub	sp, #144	; 0x90
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
	/**
	 * Read general Soldering_Separator struct
	 * return HAL_OK or HAL_ERROR
	 */
	struct Soldering_Separator Read_Struct;
	Flash_Read (addr, &Read_Struct, sizeof(*self));
 800336a:	f107 0308 	add.w	r3, r7, #8
 800336e:	2288      	movs	r2, #136	; 0x88
 8003370:	4619      	mov	r1, r3
 8003372:	6838      	ldr	r0, [r7, #0]
 8003374:	f7fe f95a 	bl	800162c <Flash_Read>
	if(Read_Struct.Flash_Key==Soldering_Separator_Struct_Key){
 8003378:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800337c:	4a08      	ldr	r2, [pc, #32]	; (80033a0 <Soldering_Separator_Flash_Read_Struct+0x40>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d109      	bne.n	8003396 <Soldering_Separator_Flash_Read_Struct+0x36>
		*self=Read_Struct;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4618      	mov	r0, r3
 8003386:	f107 0308 	add.w	r3, r7, #8
 800338a:	2288      	movs	r2, #136	; 0x88
 800338c:	4619      	mov	r1, r3
 800338e:	f007 fe7b 	bl	800b088 <memcpy>
		return HAL_OK;
 8003392:	2300      	movs	r3, #0
 8003394:	e000      	b.n	8003398 <Soldering_Separator_Flash_Read_Struct+0x38>
	}else
		return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
}
 8003398:	4618      	mov	r0, r3
 800339a:	3790      	adds	r7, #144	; 0x90
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	1801f804 	.word	0x1801f804

080033a4 <Soldering_Separator_Flash_Read_Manual_Temperature>:
	 * Write manual Temperature
	 */
	return Write_Manual_Temperature(&self->Temperature_Presets_C, Soldering_Separator_Manual_Temperature_Flash_Key, Soldering_Separator_Manual_Temperature_Flash_Page);
}
//---------------------------------------------------------------------------------
HAL_StatusTypeDef Soldering_Separator_Flash_Read_Manual_Temperature(struct Soldering_Separator *self){
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
	/**
	 * Read manual Temperature
	 * return HAL_OK or HAL_ERROR
	 */
	return Flash_Read_Manual_Temperature(&self->Temperature_Presets_C, Soldering_Separator_Manual_Temperature_Flash_Key, Soldering_Separator_Manual_Temperature_Flash_Page);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	3346      	adds	r3, #70	; 0x46
 80033b0:	227b      	movs	r2, #123	; 0x7b
 80033b2:	4904      	ldr	r1, [pc, #16]	; (80033c4 <Soldering_Separator_Flash_Read_Manual_Temperature+0x20>)
 80033b4:	4618      	mov	r0, r3
 80033b6:	f000 f8bc 	bl	8003532 <Flash_Read_Manual_Temperature>
 80033ba:	4603      	mov	r3, r0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3708      	adds	r7, #8
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	1801f808 	.word	0x1801f808

080033c8 <Soldering_Separator_Flash_Reset_Rewrite_Timer>:
//---------------------------------------------------------------------------------
void Soldering_Separator_Flash_Reset_Rewrite_Timer(struct Soldering_Separator *self){
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
	/**
	 * rewrite Soldering_Separator's flash timer
	 */
	Flash_Reset_Rewrite_Timer(&self->Flash_Rewrite_Timer);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	337e      	adds	r3, #126	; 0x7e
 80033d4:	4618      	mov	r0, r3
 80033d6:	f000 f8d9 	bl	800358c <Flash_Reset_Rewrite_Timer>
}
 80033da:	bf00      	nop
 80033dc:	3708      	adds	r7, #8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <Soldering_Station_Temperature_Presets_Corection_Converting>:
//---------------------------------------------------------------------------------------------------------------------------------//Soldering_Station
void Soldering_Station_Temperature_Presets_Corection_Converting(struct Soldering_Iron *Soldering_Iron, struct Soldering_Heat_Gun *Soldering_Heat_Gun, struct Soldering_Separator *Soldering_Separator){
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b084      	sub	sp, #16
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	60f8      	str	r0, [r7, #12]
 80033ea:	60b9      	str	r1, [r7, #8]
 80033ec:	607a      	str	r2, [r7, #4]
	/**
	 * Convert Temperature_Presets_Corection_C (celsius) to Temperature_Presets_Corection_ADC For all part of soldering station
	 */
	Solder_Iron_Temperature_Presets_Corection_Converting(Soldering_Iron);
 80033ee:	68f8      	ldr	r0, [r7, #12]
 80033f0:	f7ff faf2 	bl	80029d8 <Solder_Iron_Temperature_Presets_Corection_Converting>
	Soldering_Heat_Gun_Temperature_Presets_Corection_Converting(Soldering_Heat_Gun);
 80033f4:	68b8      	ldr	r0, [r7, #8]
 80033f6:	f7ff fcbc 	bl	8002d72 <Soldering_Heat_Gun_Temperature_Presets_Corection_Converting>
	Soldering_Separator_Temperature_Presets_Corection_Converting(Soldering_Separator);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f7ff feb2 	bl	8003164 <Soldering_Separator_Temperature_Presets_Corection_Converting>

}
 8003400:	bf00      	nop
 8003402:	3710      	adds	r7, #16
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <Soldering_Station_Read_Struct>:
//---------------------------------------------------------------------------------------------------------------------------------
HAL_StatusTypeDef Soldering_Station_Read_Struct(struct Soldering_Iron *Soldering_Iron, struct Soldering_Heat_Gun *Soldering_Heat_Gun, struct Soldering_Separator *Soldering_Separator){
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
	/**
	 * 	Read all general structures from flash
	 * 	return HAL_OK or HAL_ERROR
	 */
	HAL_StatusTypeDef Status=HAL_OK;
 8003414:	2300      	movs	r3, #0
 8003416:	75fb      	strb	r3, [r7, #23]
	uint32_t addr = Flash_Base_Addr + Flash_Addr_Page_Size*Soldering_Station_ALL_Struct_Flash_Page;	//computing start read addr
 8003418:	4b13      	ldr	r3, [pc, #76]	; (8003468 <Soldering_Station_Read_Struct+0x60>)
 800341a:	613b      	str	r3, [r7, #16]
	Status|=Solder_Iron_Flash_Read_Struct(Soldering_Iron,addr);										//read Solder_Iron general struct
 800341c:	6939      	ldr	r1, [r7, #16]
 800341e:	68f8      	ldr	r0, [r7, #12]
 8003420:	f7ff fbe2 	bl	8002be8 <Solder_Iron_Flash_Read_Struct>
 8003424:	4603      	mov	r3, r0
 8003426:	461a      	mov	r2, r3
 8003428:	7dfb      	ldrb	r3, [r7, #23]
 800342a:	4313      	orrs	r3, r2
 800342c:	75fb      	strb	r3, [r7, #23]
	addr+=sizeof(*Soldering_Iron)+2;																//Address shift for prew read struct
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	33ae      	adds	r3, #174	; 0xae
 8003432:	613b      	str	r3, [r7, #16]
	Status|=Soldering_Heat_Gun_Flash_Read_Struct(Soldering_Heat_Gun,addr);							//read Soldering_Heat_Gun general struct
 8003434:	6939      	ldr	r1, [r7, #16]
 8003436:	68b8      	ldr	r0, [r7, #8]
 8003438:	f7ff fdf0 	bl	800301c <Soldering_Heat_Gun_Flash_Read_Struct>
 800343c:	4603      	mov	r3, r0
 800343e:	461a      	mov	r2, r3
 8003440:	7dfb      	ldrb	r3, [r7, #23]
 8003442:	4313      	orrs	r3, r2
 8003444:	75fb      	strb	r3, [r7, #23]
	addr+=sizeof(*Soldering_Heat_Gun)+2;															//Address shift for prew read struct
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	339e      	adds	r3, #158	; 0x9e
 800344a:	613b      	str	r3, [r7, #16]
	Status|=Soldering_Separator_Flash_Read_Struct(Soldering_Separator,addr);						//read Soldering_Separator general struct
 800344c:	6939      	ldr	r1, [r7, #16]
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f7ff ff86 	bl	8003360 <Soldering_Separator_Flash_Read_Struct>
 8003454:	4603      	mov	r3, r0
 8003456:	461a      	mov	r2, r3
 8003458:	7dfb      	ldrb	r3, [r7, #23]
 800345a:	4313      	orrs	r3, r2
 800345c:	75fb      	strb	r3, [r7, #23]

	return Status;
 800345e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003460:	4618      	mov	r0, r3
 8003462:	3718      	adds	r7, #24
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	0801f800 	.word	0x0801f800

0800346c <Soldering_Station_Write_Struct>:
//---------------------------------------------------------------------------------
HAL_StatusTypeDef Soldering_Station_Write_Struct(struct Soldering_Iron *Soldering_Iron, struct Soldering_Heat_Gun *Soldering_Heat_Gun, struct Soldering_Separator *Soldering_Separator){
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
	/**
	 *	Write all general structures from flash
	 * 	return HAL_OK or HAL_ERROR
	 */
	HAL_StatusTypeDef Status=HAL_OK;
 8003478:	2300      	movs	r3, #0
 800347a:	75fb      	strb	r3, [r7, #23]

	uint32_t addr = Flash_Base_Addr + Flash_Addr_Page_Size*Soldering_Station_ALL_Struct_Flash_Page;	//computing start read addr
 800347c:	4b19      	ldr	r3, [pc, #100]	; (80034e4 <Soldering_Station_Write_Struct+0x78>)
 800347e:	613b      	str	r3, [r7, #16]

	Flash_Erase (addr,sizeof(*Soldering_Iron)+2+sizeof(*Soldering_Heat_Gun)+2+sizeof(*Soldering_Separator));
 8003480:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8003484:	6938      	ldr	r0, [r7, #16]
 8003486:	f7fe f865 	bl	8001554 <Flash_Erase>

	if(Solder_Iron_Flash_Write_Struct(Soldering_Iron,addr)==HAL_ERROR)					//write Solder_Iron general struct
 800348a:	6939      	ldr	r1, [r7, #16]
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f7ff fb9c 	bl	8002bca <Solder_Iron_Flash_Write_Struct>
 8003492:	4603      	mov	r3, r0
 8003494:	2b01      	cmp	r3, #1
 8003496:	d103      	bne.n	80034a0 <Soldering_Station_Write_Struct+0x34>
		Status|=HAL_ERROR;
 8003498:	7dfb      	ldrb	r3, [r7, #23]
 800349a:	f043 0301 	orr.w	r3, r3, #1
 800349e:	75fb      	strb	r3, [r7, #23]
	addr+=sizeof(*Soldering_Iron)+2;													//Address shift for prew read struct
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	33ae      	adds	r3, #174	; 0xae
 80034a4:	613b      	str	r3, [r7, #16]
	if(Soldering_Heat_Gun_Flash_Write_Struct(Soldering_Heat_Gun,addr)==HAL_ERROR)		//write Soldering_Heat_Gun general struct
 80034a6:	6939      	ldr	r1, [r7, #16]
 80034a8:	68b8      	ldr	r0, [r7, #8]
 80034aa:	f7ff fda8 	bl	8002ffe <Soldering_Heat_Gun_Flash_Write_Struct>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d103      	bne.n	80034bc <Soldering_Station_Write_Struct+0x50>
		Status|=HAL_ERROR;
 80034b4:	7dfb      	ldrb	r3, [r7, #23]
 80034b6:	f043 0301 	orr.w	r3, r3, #1
 80034ba:	75fb      	strb	r3, [r7, #23]
	addr+=sizeof(*Soldering_Heat_Gun)+2;												//Address shift for prew read struct
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	339e      	adds	r3, #158	; 0x9e
 80034c0:	613b      	str	r3, [r7, #16]
	if(Soldering_Separator_Flash_Write_Struct(Soldering_Separator,addr)==HAL_ERROR)		//write Soldering_Separator general struct
 80034c2:	6939      	ldr	r1, [r7, #16]
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f7ff ff3b 	bl	8003340 <Soldering_Separator_Flash_Write_Struct>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d103      	bne.n	80034d8 <Soldering_Station_Write_Struct+0x6c>
		Status|=HAL_ERROR;
 80034d0:	7dfb      	ldrb	r3, [r7, #23]
 80034d2:	f043 0301 	orr.w	r3, r3, #1
 80034d6:	75fb      	strb	r3, [r7, #23]

	return Status;
 80034d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3718      	adds	r7, #24
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	0801f800 	.word	0x0801f800

080034e8 <Write_Manual_Temperature>:
//---------------------------------------------------------------------------------
uint32_t Write_Manual_Temperature(struct Temperature_Presets *self, uint32_t Flash_Key, uint8_t Flash_Page){
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	4613      	mov	r3, r2
 80034f4:	71fb      	strb	r3, [r7, #7]
	/**
	 * write manual temperature parameter
	 * return end address
	 */
	uint32_t addr = Flash_Base_Addr + Flash_Addr_Page_Size*Flash_Page;	//computing start write addr
 80034f6:	79fb      	ldrb	r3, [r7, #7]
 80034f8:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80034fc:	029b      	lsls	r3, r3, #10
 80034fe:	617b      	str	r3, [r7, #20]

	Flash_Erase (addr,sizeof(self->Manual)+sizeof(Flash_Key));			//Erese PAGE
 8003500:	2106      	movs	r1, #6
 8003502:	6978      	ldr	r0, [r7, #20]
 8003504:	f7fe f826 	bl	8001554 <Flash_Erase>

	Flash_Write (addr,&self->Manual, sizeof(self->Manual));				//Write manual temperature parameter
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2202      	movs	r2, #2
 800350c:	4619      	mov	r1, r3
 800350e:	6978      	ldr	r0, [r7, #20]
 8003510:	f7fe f84f 	bl	80015b2 <Flash_Write>

	addr+=sizeof(self->Manual)+2;										//Address shift for prew read struct
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	3304      	adds	r3, #4
 8003518:	617b      	str	r3, [r7, #20]

	return Flash_Write (addr,&Flash_Key, sizeof(Flash_Key));			//Write Flash_Key
 800351a:	f107 0308 	add.w	r3, r7, #8
 800351e:	2204      	movs	r2, #4
 8003520:	4619      	mov	r1, r3
 8003522:	6978      	ldr	r0, [r7, #20]
 8003524:	f7fe f845 	bl	80015b2 <Flash_Write>
 8003528:	4603      	mov	r3, r0

}
 800352a:	4618      	mov	r0, r3
 800352c:	3718      	adds	r7, #24
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <Flash_Read_Manual_Temperature>:
//---------------------------------------------------------------------------------
HAL_StatusTypeDef Flash_Read_Manual_Temperature(struct Temperature_Presets *self, uint32_t Flash_Key, uint8_t Flash_Page){
 8003532:	b580      	push	{r7, lr}
 8003534:	b088      	sub	sp, #32
 8003536:	af00      	add	r7, sp, #0
 8003538:	60f8      	str	r0, [r7, #12]
 800353a:	60b9      	str	r1, [r7, #8]
 800353c:	4613      	mov	r3, r2
 800353e:	71fb      	strb	r3, [r7, #7]
	/**
	 * Read Manual_Temperature parameter from flash
	 * return HAL_OK or HAL_ERROR
	 */
	uint32_t addr = Flash_Base_Addr + Flash_Addr_Page_Size*Flash_Page;		//computing start read addr
 8003540:	79fb      	ldrb	r3, [r7, #7]
 8003542:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8003546:	029b      	lsls	r3, r3, #10
 8003548:	61fb      	str	r3, [r7, #28]
	uint32_t Flash_Read_Key=0;
 800354a:	2300      	movs	r3, #0
 800354c:	61bb      	str	r3, [r7, #24]
	uint16_t Temperature;

	Flash_Read (addr, &Temperature, sizeof(self->Manual));					//read manual temperature
 800354e:	f107 0316 	add.w	r3, r7, #22
 8003552:	2202      	movs	r2, #2
 8003554:	4619      	mov	r1, r3
 8003556:	69f8      	ldr	r0, [r7, #28]
 8003558:	f7fe f868 	bl	800162c <Flash_Read>
	addr+=sizeof(self->Manual)+2;											//Address shift for prew read struct
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	3304      	adds	r3, #4
 8003560:	61fb      	str	r3, [r7, #28]
	Flash_Read (addr, &Flash_Read_Key,  sizeof(Flash_Read_Key));			//Read flash_key;
 8003562:	f107 0318 	add.w	r3, r7, #24
 8003566:	2204      	movs	r2, #4
 8003568:	4619      	mov	r1, r3
 800356a:	69f8      	ldr	r0, [r7, #28]
 800356c:	f7fe f85e 	bl	800162c <Flash_Read>

	if(Flash_Read_Key==Flash_Key){											//if flash key was read success
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	68ba      	ldr	r2, [r7, #8]
 8003574:	429a      	cmp	r2, r3
 8003576:	d104      	bne.n	8003582 <Flash_Read_Manual_Temperature+0x50>
		self->Manual=Temperature;											//write temperature into struct
 8003578:	8afa      	ldrh	r2, [r7, #22]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	801a      	strh	r2, [r3, #0]
		return HAL_OK;
 800357e:	2300      	movs	r3, #0
 8003580:	e000      	b.n	8003584 <Flash_Read_Manual_Temperature+0x52>
	}
	else
		return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
}
 8003584:	4618      	mov	r0, r3
 8003586:	3720      	adds	r7, #32
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <Flash_Reset_Rewrite_Timer>:
//---------------------------------------------------------------------------------
void Flash_Reset_Rewrite_Timer(struct Flash_Rewrite_Timer *self){
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
	/**
	 * Reset Rewrite_Timer
	 */
	self->Flash_Timer_Count=0;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	801a      	strh	r2, [r3, #0]
	self->Flash_Timer_State=Flash_Timer_State_ON;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2201      	movs	r2, #1
 800359e:	709a      	strb	r2, [r3, #2]
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bc80      	pop	{r7}
 80035a8:	4770      	bx	lr

080035aa <Flash_Rewrite_Timer_it>:
//---------------------------------------------------------------------------------
void Flash_Rewrite_Timer_it(struct Flash_Rewrite_Timer *Flash_Rewrite_Timer, struct Temperature_Presets *Temperature_Presets,uint32_t Flash_Key, uint8_t Flash_Page){
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b084      	sub	sp, #16
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	60f8      	str	r0, [r7, #12]
 80035b2:	60b9      	str	r1, [r7, #8]
 80035b4:	607a      	str	r2, [r7, #4]
 80035b6:	70fb      	strb	r3, [r7, #3]
	/**
	 * Falsh rewrite timer iteration
	 */
	if(Flash_Rewrite_Timer->Flash_Timer_State==Flash_Timer_State_ON){					//if timer turn ON
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	789b      	ldrb	r3, [r3, #2]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d110      	bne.n	80035e2 <Flash_Rewrite_Timer_it+0x38>
		if(Flash_Rewrite_Timer->Flash_Timer_Count++==Flash_Rewrite_Timer_Max_Count){	//count++ & equal Flash_Rewrite_Timer_Max_Count
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	881b      	ldrh	r3, [r3, #0]
 80035c4:	1c5a      	adds	r2, r3, #1
 80035c6:	b291      	uxth	r1, r2
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	8011      	strh	r1, [r2, #0]
 80035cc:	2bc8      	cmp	r3, #200	; 0xc8
 80035ce:	d108      	bne.n	80035e2 <Flash_Rewrite_Timer_it+0x38>
			Write_Manual_Temperature(Temperature_Presets, Flash_Key, Flash_Page);		//write manual temperature
 80035d0:	78fb      	ldrb	r3, [r7, #3]
 80035d2:	461a      	mov	r2, r3
 80035d4:	6879      	ldr	r1, [r7, #4]
 80035d6:	68b8      	ldr	r0, [r7, #8]
 80035d8:	f7ff ff86 	bl	80034e8 <Write_Manual_Temperature>
			Flash_Rewrite_Timer->Flash_Timer_State=Flash_Timer_State_OFF;				//Turn OFF timer
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	709a      	strb	r2, [r3, #2]
		}
	}
}
 80035e2:	bf00      	nop
 80035e4:	3710      	adds	r7, #16
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
	...

080035ec <Flash_Rewrite_Timer_tim_it>:
//---------------------------------------------------------------------------------
void Flash_Rewrite_Timer_tim_it(struct Soldering_Iron *Soldering_Iron, struct Soldering_Heat_Gun *Soldering_Heat_Gun, struct Soldering_Separator *Soldering_Separator){
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
	/**
	 * Falsh rewrite timer iteration for ALL Soldering_Station parts
	 */
	Flash_Rewrite_Timer_it(&Soldering_Iron->Flash_Rewrite_Timer, &Soldering_Iron->Temperature_Presets_C, Soldering_Iron_Manual_Temperature_Flash_Key, Soldering_Iron_Manual_Temperature_Flash_Page);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f103 00a2 	add.w	r0, r3, #162	; 0xa2
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f103 0146 	add.w	r1, r3, #70	; 0x46
 8003604:	237d      	movs	r3, #125	; 0x7d
 8003606:	4a0d      	ldr	r2, [pc, #52]	; (800363c <Flash_Rewrite_Timer_tim_it+0x50>)
 8003608:	f7ff ffcf 	bl	80035aa <Flash_Rewrite_Timer_it>
	Flash_Rewrite_Timer_it(&Soldering_Heat_Gun->Flash_Rewrite_Timer, &Soldering_Heat_Gun->Temperature_Presets_C, Soldering_Heat_Gun_Manual_Temperature_Flash_Key, Soldering_Heat_Gun_Manual_Temperature_Flash_Page);
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	f103 0092 	add.w	r0, r3, #146	; 0x92
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	f103 0146 	add.w	r1, r3, #70	; 0x46
 8003618:	237c      	movs	r3, #124	; 0x7c
 800361a:	4a09      	ldr	r2, [pc, #36]	; (8003640 <Flash_Rewrite_Timer_tim_it+0x54>)
 800361c:	f7ff ffc5 	bl	80035aa <Flash_Rewrite_Timer_it>
	Flash_Rewrite_Timer_it(&Soldering_Separator->Flash_Rewrite_Timer, &Soldering_Separator->Temperature_Presets_C, Soldering_Separator_Manual_Temperature_Flash_Key, Soldering_Separator_Manual_Temperature_Flash_Page);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f103 007e 	add.w	r0, r3, #126	; 0x7e
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f103 0146 	add.w	r1, r3, #70	; 0x46
 800362c:	237b      	movs	r3, #123	; 0x7b
 800362e:	4a05      	ldr	r2, [pc, #20]	; (8003644 <Flash_Rewrite_Timer_tim_it+0x58>)
 8003630:	f7ff ffbb 	bl	80035aa <Flash_Rewrite_Timer_it>
}
 8003634:	bf00      	nop
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	0801f806 	.word	0x0801f806
 8003640:	0801f808 	.word	0x0801f808
 8003644:	1801f808 	.word	0x1801f808

08003648 <Flash_Rewrite_Timer_ini>:
//---------------------------------------------------------------------------------
void Flash_Rewrite_Timer_ini(struct Flash_Rewrite_Timer *self){
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
	/**
	 * Rewrite timer ini
	 */
	self->Flash_Timer_Count=0;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	801a      	strh	r2, [r3, #0]
	self->Flash_Timer_State=Flash_Timer_State_OFF;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	709a      	strb	r2, [r3, #2]
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	bc80      	pop	{r7}
 8003664:	4770      	bx	lr
	...

08003668 <UI_Draw_Parmetr_Ptr>:
#include "UI_Base_Func.h"
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void UI_Draw_Parmetr_Ptr(void *value, uint8_t x, uint8_t y, enum Type mode){
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	4608      	mov	r0, r1
 8003672:	4611      	mov	r1, r2
 8003674:	461a      	mov	r2, r3
 8003676:	4603      	mov	r3, r0
 8003678:	70fb      	strb	r3, [r7, #3]
 800367a:	460b      	mov	r3, r1
 800367c:	70bb      	strb	r3, [r7, #2]
 800367e:	4613      	mov	r3, r2
 8003680:	707b      	strb	r3, [r7, #1]
	/**
	 *	Displays the value on the display based on the variable pointer, type of variable and the x y position
	 *	Types INT, UIT8, UINT16, BOOL
	 */
	switch(mode){
 8003682:	787b      	ldrb	r3, [r7, #1]
 8003684:	2b03      	cmp	r3, #3
 8003686:	f200 8179 	bhi.w	800397c <UI_Draw_Parmetr_Ptr+0x314>
 800368a:	a201      	add	r2, pc, #4	; (adr r2, 8003690 <UI_Draw_Parmetr_Ptr+0x28>)
 800368c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003690:	080036a1 	.word	0x080036a1
 8003694:	080037b9 	.word	0x080037b9
 8003698:	08003881 	.word	0x08003881
 800369c:	0800394b 	.word	0x0800394b
		case INT:
			int num_int=*(int*)value;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	617b      	str	r3, [r7, #20]
			if(num_int<0){
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	da0c      	bge.n	80036c6 <UI_Draw_Parmetr_Ptr+0x5e>
				OLED_Set_Char_Cursor(&OLED1,x-1,y);
 80036ac:	78fb      	ldrb	r3, [r7, #3]
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	3b01      	subs	r3, #1
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	78ba      	ldrb	r2, [r7, #2]
 80036b6:	4619      	mov	r1, r3
 80036b8:	48b2      	ldr	r0, [pc, #712]	; (8003984 <UI_Draw_Parmetr_Ptr+0x31c>)
 80036ba:	f7fe f883 	bl	80017c4 <OLED_Set_Char_Cursor>
				OLED_Send_Char(&OLED1,'-');
 80036be:	212d      	movs	r1, #45	; 0x2d
 80036c0:	48b0      	ldr	r0, [pc, #704]	; (8003984 <UI_Draw_Parmetr_Ptr+0x31c>)
 80036c2:	f7fe f8e3 	bl	800188c <OLED_Send_Char>
			}
			OLED_Set_Char_Cursor(&OLED1,x-1,y);
 80036c6:	78fb      	ldrb	r3, [r7, #3]
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	3b01      	subs	r3, #1
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	78ba      	ldrb	r2, [r7, #2]
 80036d0:	4619      	mov	r1, r3
 80036d2:	48ac      	ldr	r0, [pc, #688]	; (8003984 <UI_Draw_Parmetr_Ptr+0x31c>)
 80036d4:	f7fe f876 	bl	80017c4 <OLED_Set_Char_Cursor>
			if(num_int<0){
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	da09      	bge.n	80036f2 <UI_Draw_Parmetr_Ptr+0x8a>
				OLED_Send_Char(&OLED1,'-');
 80036de:	212d      	movs	r1, #45	; 0x2d
 80036e0:	48a8      	ldr	r0, [pc, #672]	; (8003984 <UI_Draw_Parmetr_Ptr+0x31c>)
 80036e2:	f7fe f8d3 	bl	800188c <OLED_Send_Char>
				num_int=abs(num_int);
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	bfb8      	it	lt
 80036ec:	425b      	neglt	r3, r3
 80036ee:	617b      	str	r3, [r7, #20]
 80036f0:	e003      	b.n	80036fa <UI_Draw_Parmetr_Ptr+0x92>
			}
			else
				OLED_Send_Char(&OLED1,' ');
 80036f2:	2120      	movs	r1, #32
 80036f4:	48a3      	ldr	r0, [pc, #652]	; (8003984 <UI_Draw_Parmetr_Ptr+0x31c>)
 80036f6:	f7fe f8c9 	bl	800188c <OLED_Send_Char>
			OLED_Send_Char(&OLED1,(num_int/1000)%10+'0');
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	4aa2      	ldr	r2, [pc, #648]	; (8003988 <UI_Draw_Parmetr_Ptr+0x320>)
 80036fe:	fb82 1203 	smull	r1, r2, r2, r3
 8003702:	1192      	asrs	r2, r2, #6
 8003704:	17db      	asrs	r3, r3, #31
 8003706:	1ad2      	subs	r2, r2, r3
 8003708:	4ba0      	ldr	r3, [pc, #640]	; (800398c <UI_Draw_Parmetr_Ptr+0x324>)
 800370a:	fb83 1302 	smull	r1, r3, r3, r2
 800370e:	1099      	asrs	r1, r3, #2
 8003710:	17d3      	asrs	r3, r2, #31
 8003712:	1ac9      	subs	r1, r1, r3
 8003714:	460b      	mov	r3, r1
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	440b      	add	r3, r1
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	1ad1      	subs	r1, r2, r3
 800371e:	b2cb      	uxtb	r3, r1
 8003720:	3330      	adds	r3, #48	; 0x30
 8003722:	b2db      	uxtb	r3, r3
 8003724:	4619      	mov	r1, r3
 8003726:	4897      	ldr	r0, [pc, #604]	; (8003984 <UI_Draw_Parmetr_Ptr+0x31c>)
 8003728:	f7fe f8b0 	bl	800188c <OLED_Send_Char>
			OLED_Send_Char(&OLED1,(num_int/100)%10+'0');
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	4a98      	ldr	r2, [pc, #608]	; (8003990 <UI_Draw_Parmetr_Ptr+0x328>)
 8003730:	fb82 1203 	smull	r1, r2, r2, r3
 8003734:	1152      	asrs	r2, r2, #5
 8003736:	17db      	asrs	r3, r3, #31
 8003738:	1ad2      	subs	r2, r2, r3
 800373a:	4b94      	ldr	r3, [pc, #592]	; (800398c <UI_Draw_Parmetr_Ptr+0x324>)
 800373c:	fb83 1302 	smull	r1, r3, r3, r2
 8003740:	1099      	asrs	r1, r3, #2
 8003742:	17d3      	asrs	r3, r2, #31
 8003744:	1ac9      	subs	r1, r1, r3
 8003746:	460b      	mov	r3, r1
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	440b      	add	r3, r1
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	1ad1      	subs	r1, r2, r3
 8003750:	b2cb      	uxtb	r3, r1
 8003752:	3330      	adds	r3, #48	; 0x30
 8003754:	b2db      	uxtb	r3, r3
 8003756:	4619      	mov	r1, r3
 8003758:	488a      	ldr	r0, [pc, #552]	; (8003984 <UI_Draw_Parmetr_Ptr+0x31c>)
 800375a:	f7fe f897 	bl	800188c <OLED_Send_Char>
			OLED_Send_Char(&OLED1,(num_int/10)%10+'0');
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	4a8a      	ldr	r2, [pc, #552]	; (800398c <UI_Draw_Parmetr_Ptr+0x324>)
 8003762:	fb82 1203 	smull	r1, r2, r2, r3
 8003766:	1092      	asrs	r2, r2, #2
 8003768:	17db      	asrs	r3, r3, #31
 800376a:	1ad2      	subs	r2, r2, r3
 800376c:	4b87      	ldr	r3, [pc, #540]	; (800398c <UI_Draw_Parmetr_Ptr+0x324>)
 800376e:	fb83 1302 	smull	r1, r3, r3, r2
 8003772:	1099      	asrs	r1, r3, #2
 8003774:	17d3      	asrs	r3, r2, #31
 8003776:	1ac9      	subs	r1, r1, r3
 8003778:	460b      	mov	r3, r1
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	440b      	add	r3, r1
 800377e:	005b      	lsls	r3, r3, #1
 8003780:	1ad1      	subs	r1, r2, r3
 8003782:	b2cb      	uxtb	r3, r1
 8003784:	3330      	adds	r3, #48	; 0x30
 8003786:	b2db      	uxtb	r3, r3
 8003788:	4619      	mov	r1, r3
 800378a:	487e      	ldr	r0, [pc, #504]	; (8003984 <UI_Draw_Parmetr_Ptr+0x31c>)
 800378c:	f7fe f87e 	bl	800188c <OLED_Send_Char>
			OLED_Send_Char(&OLED1,(num_int)%10+'0');
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	4b7e      	ldr	r3, [pc, #504]	; (800398c <UI_Draw_Parmetr_Ptr+0x324>)
 8003794:	fb83 1302 	smull	r1, r3, r3, r2
 8003798:	1099      	asrs	r1, r3, #2
 800379a:	17d3      	asrs	r3, r2, #31
 800379c:	1ac9      	subs	r1, r1, r3
 800379e:	460b      	mov	r3, r1
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	440b      	add	r3, r1
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	1ad1      	subs	r1, r2, r3
 80037a8:	b2cb      	uxtb	r3, r1
 80037aa:	3330      	adds	r3, #48	; 0x30
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	4619      	mov	r1, r3
 80037b0:	4874      	ldr	r0, [pc, #464]	; (8003984 <UI_Draw_Parmetr_Ptr+0x31c>)
 80037b2:	f7fe f86b 	bl	800188c <OLED_Send_Char>
		break;
 80037b6:	e0e1      	b.n	800397c <UI_Draw_Parmetr_Ptr+0x314>
		case UINT8:
			uint8_t *num_8=value;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	60bb      	str	r3, [r7, #8]
			OLED_Set_Char_Cursor(&OLED1,x,y);
 80037bc:	78fb      	ldrb	r3, [r7, #3]
 80037be:	b29b      	uxth	r3, r3
 80037c0:	78ba      	ldrb	r2, [r7, #2]
 80037c2:	4619      	mov	r1, r3
 80037c4:	486f      	ldr	r0, [pc, #444]	; (8003984 <UI_Draw_Parmetr_Ptr+0x31c>)
 80037c6:	f7fd fffd 	bl	80017c4 <OLED_Set_Char_Cursor>
			OLED_Send_Char(&OLED1,(*num_8/1000)%10+'0');
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	4a6e      	ldr	r2, [pc, #440]	; (8003988 <UI_Draw_Parmetr_Ptr+0x320>)
 80037d0:	fb82 1203 	smull	r1, r2, r2, r3
 80037d4:	1192      	asrs	r2, r2, #6
 80037d6:	17db      	asrs	r3, r3, #31
 80037d8:	1ad2      	subs	r2, r2, r3
 80037da:	4b6c      	ldr	r3, [pc, #432]	; (800398c <UI_Draw_Parmetr_Ptr+0x324>)
 80037dc:	fb83 1302 	smull	r1, r3, r3, r2
 80037e0:	1099      	asrs	r1, r3, #2
 80037e2:	17d3      	asrs	r3, r2, #31
 80037e4:	1ac9      	subs	r1, r1, r3
 80037e6:	460b      	mov	r3, r1
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	440b      	add	r3, r1
 80037ec:	005b      	lsls	r3, r3, #1
 80037ee:	1ad1      	subs	r1, r2, r3
 80037f0:	b2cb      	uxtb	r3, r1
 80037f2:	3330      	adds	r3, #48	; 0x30
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	4619      	mov	r1, r3
 80037f8:	4862      	ldr	r0, [pc, #392]	; (8003984 <UI_Draw_Parmetr_Ptr+0x31c>)
 80037fa:	f7fe f847 	bl	800188c <OLED_Send_Char>
			OLED_Send_Char(&OLED1,(*num_8/100)%10+'0');
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	4a63      	ldr	r2, [pc, #396]	; (8003990 <UI_Draw_Parmetr_Ptr+0x328>)
 8003804:	fba2 2303 	umull	r2, r3, r2, r3
 8003808:	095b      	lsrs	r3, r3, #5
 800380a:	b2da      	uxtb	r2, r3
 800380c:	4b61      	ldr	r3, [pc, #388]	; (8003994 <UI_Draw_Parmetr_Ptr+0x32c>)
 800380e:	fba3 1302 	umull	r1, r3, r3, r2
 8003812:	08d9      	lsrs	r1, r3, #3
 8003814:	460b      	mov	r3, r1
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	440b      	add	r3, r1
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	b2db      	uxtb	r3, r3
 8003820:	3330      	adds	r3, #48	; 0x30
 8003822:	b2db      	uxtb	r3, r3
 8003824:	4619      	mov	r1, r3
 8003826:	4857      	ldr	r0, [pc, #348]	; (8003984 <UI_Draw_Parmetr_Ptr+0x31c>)
 8003828:	f7fe f830 	bl	800188c <OLED_Send_Char>
			OLED_Send_Char(&OLED1,(*num_8/10)%10+'0');
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	4a58      	ldr	r2, [pc, #352]	; (8003994 <UI_Draw_Parmetr_Ptr+0x32c>)
 8003832:	fba2 2303 	umull	r2, r3, r2, r3
 8003836:	08db      	lsrs	r3, r3, #3
 8003838:	b2da      	uxtb	r2, r3
 800383a:	4b56      	ldr	r3, [pc, #344]	; (8003994 <UI_Draw_Parmetr_Ptr+0x32c>)
 800383c:	fba3 1302 	umull	r1, r3, r3, r2
 8003840:	08d9      	lsrs	r1, r3, #3
 8003842:	460b      	mov	r3, r1
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	440b      	add	r3, r1
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	b2db      	uxtb	r3, r3
 800384e:	3330      	adds	r3, #48	; 0x30
 8003850:	b2db      	uxtb	r3, r3
 8003852:	4619      	mov	r1, r3
 8003854:	484b      	ldr	r0, [pc, #300]	; (8003984 <UI_Draw_Parmetr_Ptr+0x31c>)
 8003856:	f7fe f819 	bl	800188c <OLED_Send_Char>
			OLED_Send_Char(&OLED1,(*num_8)%10+'0');
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	781a      	ldrb	r2, [r3, #0]
 800385e:	4b4d      	ldr	r3, [pc, #308]	; (8003994 <UI_Draw_Parmetr_Ptr+0x32c>)
 8003860:	fba3 1302 	umull	r1, r3, r3, r2
 8003864:	08d9      	lsrs	r1, r3, #3
 8003866:	460b      	mov	r3, r1
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	440b      	add	r3, r1
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	b2db      	uxtb	r3, r3
 8003872:	3330      	adds	r3, #48	; 0x30
 8003874:	b2db      	uxtb	r3, r3
 8003876:	4619      	mov	r1, r3
 8003878:	4842      	ldr	r0, [pc, #264]	; (8003984 <UI_Draw_Parmetr_Ptr+0x31c>)
 800387a:	f7fe f807 	bl	800188c <OLED_Send_Char>
		break;
 800387e:	e07d      	b.n	800397c <UI_Draw_Parmetr_Ptr+0x314>
		case UINT16:
			uint16_t *num_16=value;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	60fb      	str	r3, [r7, #12]
			OLED_Set_Char_Cursor(&OLED1,x,y);
 8003884:	78fb      	ldrb	r3, [r7, #3]
 8003886:	b29b      	uxth	r3, r3
 8003888:	78ba      	ldrb	r2, [r7, #2]
 800388a:	4619      	mov	r1, r3
 800388c:	483d      	ldr	r0, [pc, #244]	; (8003984 <UI_Draw_Parmetr_Ptr+0x31c>)
 800388e:	f7fd ff99 	bl	80017c4 <OLED_Set_Char_Cursor>
			OLED_Send_Char(&OLED1,(*num_16/1000)%10+'0');
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	881b      	ldrh	r3, [r3, #0]
 8003896:	4a3c      	ldr	r2, [pc, #240]	; (8003988 <UI_Draw_Parmetr_Ptr+0x320>)
 8003898:	fba2 2303 	umull	r2, r3, r2, r3
 800389c:	099b      	lsrs	r3, r3, #6
 800389e:	b29a      	uxth	r2, r3
 80038a0:	4b3c      	ldr	r3, [pc, #240]	; (8003994 <UI_Draw_Parmetr_Ptr+0x32c>)
 80038a2:	fba3 1302 	umull	r1, r3, r3, r2
 80038a6:	08d9      	lsrs	r1, r3, #3
 80038a8:	460b      	mov	r3, r1
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	440b      	add	r3, r1
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	3330      	adds	r3, #48	; 0x30
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	4619      	mov	r1, r3
 80038bc:	4831      	ldr	r0, [pc, #196]	; (8003984 <UI_Draw_Parmetr_Ptr+0x31c>)
 80038be:	f7fd ffe5 	bl	800188c <OLED_Send_Char>
			OLED_Send_Char(&OLED1,(*num_16/100)%10+'0');
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	881b      	ldrh	r3, [r3, #0]
 80038c6:	4a32      	ldr	r2, [pc, #200]	; (8003990 <UI_Draw_Parmetr_Ptr+0x328>)
 80038c8:	fba2 2303 	umull	r2, r3, r2, r3
 80038cc:	095b      	lsrs	r3, r3, #5
 80038ce:	b29a      	uxth	r2, r3
 80038d0:	4b30      	ldr	r3, [pc, #192]	; (8003994 <UI_Draw_Parmetr_Ptr+0x32c>)
 80038d2:	fba3 1302 	umull	r1, r3, r3, r2
 80038d6:	08d9      	lsrs	r1, r3, #3
 80038d8:	460b      	mov	r3, r1
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	440b      	add	r3, r1
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	3330      	adds	r3, #48	; 0x30
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	4619      	mov	r1, r3
 80038ec:	4825      	ldr	r0, [pc, #148]	; (8003984 <UI_Draw_Parmetr_Ptr+0x31c>)
 80038ee:	f7fd ffcd 	bl	800188c <OLED_Send_Char>
			OLED_Send_Char(&OLED1,(*num_16/10)%10+'0');
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	881b      	ldrh	r3, [r3, #0]
 80038f6:	4a27      	ldr	r2, [pc, #156]	; (8003994 <UI_Draw_Parmetr_Ptr+0x32c>)
 80038f8:	fba2 2303 	umull	r2, r3, r2, r3
 80038fc:	08db      	lsrs	r3, r3, #3
 80038fe:	b29a      	uxth	r2, r3
 8003900:	4b24      	ldr	r3, [pc, #144]	; (8003994 <UI_Draw_Parmetr_Ptr+0x32c>)
 8003902:	fba3 1302 	umull	r1, r3, r3, r2
 8003906:	08d9      	lsrs	r1, r3, #3
 8003908:	460b      	mov	r3, r1
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	440b      	add	r3, r1
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	b29b      	uxth	r3, r3
 8003914:	b2db      	uxtb	r3, r3
 8003916:	3330      	adds	r3, #48	; 0x30
 8003918:	b2db      	uxtb	r3, r3
 800391a:	4619      	mov	r1, r3
 800391c:	4819      	ldr	r0, [pc, #100]	; (8003984 <UI_Draw_Parmetr_Ptr+0x31c>)
 800391e:	f7fd ffb5 	bl	800188c <OLED_Send_Char>
			OLED_Send_Char(&OLED1,(*num_16)%10+'0');
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	881a      	ldrh	r2, [r3, #0]
 8003926:	4b1b      	ldr	r3, [pc, #108]	; (8003994 <UI_Draw_Parmetr_Ptr+0x32c>)
 8003928:	fba3 1302 	umull	r1, r3, r3, r2
 800392c:	08d9      	lsrs	r1, r3, #3
 800392e:	460b      	mov	r3, r1
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	440b      	add	r3, r1
 8003934:	005b      	lsls	r3, r3, #1
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	b29b      	uxth	r3, r3
 800393a:	b2db      	uxtb	r3, r3
 800393c:	3330      	adds	r3, #48	; 0x30
 800393e:	b2db      	uxtb	r3, r3
 8003940:	4619      	mov	r1, r3
 8003942:	4810      	ldr	r0, [pc, #64]	; (8003984 <UI_Draw_Parmetr_Ptr+0x31c>)
 8003944:	f7fd ffa2 	bl	800188c <OLED_Send_Char>
		break;
 8003948:	e018      	b.n	800397c <UI_Draw_Parmetr_Ptr+0x314>
		case BOOL:
			uint8_t *num=value;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	613b      	str	r3, [r7, #16]
			OLED_Set_Char_Cursor(&OLED1,x,y);
 800394e:	78fb      	ldrb	r3, [r7, #3]
 8003950:	b29b      	uxth	r3, r3
 8003952:	78ba      	ldrb	r2, [r7, #2]
 8003954:	4619      	mov	r1, r3
 8003956:	480b      	ldr	r0, [pc, #44]	; (8003984 <UI_Draw_Parmetr_Ptr+0x31c>)
 8003958:	f7fd ff34 	bl	80017c4 <OLED_Set_Char_Cursor>
			if(*num==1){
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d105      	bne.n	8003970 <UI_Draw_Parmetr_Ptr+0x308>
				OLED_Send_String(&OLED1,"ON ", Direct_Display_MODE);
 8003964:	2200      	movs	r2, #0
 8003966:	490c      	ldr	r1, [pc, #48]	; (8003998 <UI_Draw_Parmetr_Ptr+0x330>)
 8003968:	4806      	ldr	r0, [pc, #24]	; (8003984 <UI_Draw_Parmetr_Ptr+0x31c>)
 800396a:	f7fd fff7 	bl	800195c <OLED_Send_String>
			}else
				OLED_Send_String(&OLED1,"OFF", Direct_Display_MODE);
		break;
 800396e:	e004      	b.n	800397a <UI_Draw_Parmetr_Ptr+0x312>
				OLED_Send_String(&OLED1,"OFF", Direct_Display_MODE);
 8003970:	2200      	movs	r2, #0
 8003972:	490a      	ldr	r1, [pc, #40]	; (800399c <UI_Draw_Parmetr_Ptr+0x334>)
 8003974:	4803      	ldr	r0, [pc, #12]	; (8003984 <UI_Draw_Parmetr_Ptr+0x31c>)
 8003976:	f7fd fff1 	bl	800195c <OLED_Send_String>
		break;
 800397a:	bf00      	nop
	}
}
 800397c:	bf00      	nop
 800397e:	3718      	adds	r7, #24
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	2000049c 	.word	0x2000049c
 8003988:	10624dd3 	.word	0x10624dd3
 800398c:	66666667 	.word	0x66666667
 8003990:	51eb851f 	.word	0x51eb851f
 8003994:	cccccccd 	.word	0xcccccccd
 8003998:	0800b14c 	.word	0x0800b14c
 800399c:	0800b150 	.word	0x0800b150

080039a0 <UI_Draw_Parmetr>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void UI_Draw_Parmetr(int value, uint8_t x,uint8_t y,enum Type mode){
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	4608      	mov	r0, r1
 80039aa:	4611      	mov	r1, r2
 80039ac:	461a      	mov	r2, r3
 80039ae:	4603      	mov	r3, r0
 80039b0:	70fb      	strb	r3, [r7, #3]
 80039b2:	460b      	mov	r3, r1
 80039b4:	70bb      	strb	r3, [r7, #2]
 80039b6:	4613      	mov	r3, r2
 80039b8:	707b      	strb	r3, [r7, #1]
	/**
	 * Displays the value on the display based on the variable, type of variable and the x y position
	 */
	UI_Draw_Parmetr_Ptr(&value, x, y, mode);
 80039ba:	787b      	ldrb	r3, [r7, #1]
 80039bc:	78ba      	ldrb	r2, [r7, #2]
 80039be:	78f9      	ldrb	r1, [r7, #3]
 80039c0:	1d38      	adds	r0, r7, #4
 80039c2:	f7ff fe51 	bl	8003668 <UI_Draw_Parmetr_Ptr>
}
 80039c6:	bf00      	nop
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
	...

080039d0 <UI_Draw_String>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void UI_Draw_String(char *str, uint8_t x, uint8_t y, enum Display_Write_MODE Display_Write_MODE){
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	4608      	mov	r0, r1
 80039da:	4611      	mov	r1, r2
 80039dc:	461a      	mov	r2, r3
 80039de:	4603      	mov	r3, r0
 80039e0:	70fb      	strb	r3, [r7, #3]
 80039e2:	460b      	mov	r3, r1
 80039e4:	70bb      	strb	r3, [r7, #2]
 80039e6:	4613      	mov	r3, r2
 80039e8:	707b      	strb	r3, [r7, #1]
	/**
	 * Displays the string on the display based x y position and Display_Write_MODE(direct inverse)
	 */
	OLED_Set_Char_Cursor(&OLED1,x,y);					//Sets position on display from what will be display based on ASII symbols size
 80039ea:	78fb      	ldrb	r3, [r7, #3]
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	78ba      	ldrb	r2, [r7, #2]
 80039f0:	4619      	mov	r1, r3
 80039f2:	4806      	ldr	r0, [pc, #24]	; (8003a0c <UI_Draw_String+0x3c>)
 80039f4:	f7fd fee6 	bl	80017c4 <OLED_Set_Char_Cursor>
	OLED_Send_String(&OLED1, str, Display_Write_MODE);	//Display string on the Display
 80039f8:	787b      	ldrb	r3, [r7, #1]
 80039fa:	461a      	mov	r2, r3
 80039fc:	6879      	ldr	r1, [r7, #4]
 80039fe:	4803      	ldr	r0, [pc, #12]	; (8003a0c <UI_Draw_String+0x3c>)
 8003a00:	f7fd ffac 	bl	800195c <OLED_Send_String>

}
 8003a04:	bf00      	nop
 8003a06:	3708      	adds	r7, #8
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	2000049c 	.word	0x2000049c

08003a10 <UI_Set_Cursor>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void UI_Set_Cursor(uint8_t x, uint8_t y){
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	4603      	mov	r3, r0
 8003a18:	460a      	mov	r2, r1
 8003a1a:	71fb      	strb	r3, [r7, #7]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	71bb      	strb	r3, [r7, #6]
	/**
	 * Set symbol cursor(>) based on x, y position and clear prew cursor position
	 */
	static uint8_t Prew_Pos_x=0,Prew_Pos_y=0;
		OLED_Set_Char_Cursor(&OLED1,Prew_Pos_x,Prew_Pos_y);
 8003a20:	4b10      	ldr	r3, [pc, #64]	; (8003a64 <UI_Set_Cursor+0x54>)
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	4a10      	ldr	r2, [pc, #64]	; (8003a68 <UI_Set_Cursor+0x58>)
 8003a28:	7812      	ldrb	r2, [r2, #0]
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	480f      	ldr	r0, [pc, #60]	; (8003a6c <UI_Set_Cursor+0x5c>)
 8003a2e:	f7fd fec9 	bl	80017c4 <OLED_Set_Char_Cursor>
		OLED_Send_Char(&OLED1,' ');
 8003a32:	2120      	movs	r1, #32
 8003a34:	480d      	ldr	r0, [pc, #52]	; (8003a6c <UI_Set_Cursor+0x5c>)
 8003a36:	f7fd ff29 	bl	800188c <OLED_Send_Char>
		OLED_Set_Char_Cursor(&OLED1,x,y);
 8003a3a:	79fb      	ldrb	r3, [r7, #7]
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	79ba      	ldrb	r2, [r7, #6]
 8003a40:	4619      	mov	r1, r3
 8003a42:	480a      	ldr	r0, [pc, #40]	; (8003a6c <UI_Set_Cursor+0x5c>)
 8003a44:	f7fd febe 	bl	80017c4 <OLED_Set_Char_Cursor>
		OLED_Send_Char(&OLED1,'>');
 8003a48:	213e      	movs	r1, #62	; 0x3e
 8003a4a:	4808      	ldr	r0, [pc, #32]	; (8003a6c <UI_Set_Cursor+0x5c>)
 8003a4c:	f7fd ff1e 	bl	800188c <OLED_Send_Char>
		Prew_Pos_x=x;
 8003a50:	4a04      	ldr	r2, [pc, #16]	; (8003a64 <UI_Set_Cursor+0x54>)
 8003a52:	79fb      	ldrb	r3, [r7, #7]
 8003a54:	7013      	strb	r3, [r2, #0]
		Prew_Pos_y=y;
 8003a56:	4a04      	ldr	r2, [pc, #16]	; (8003a68 <UI_Set_Cursor+0x58>)
 8003a58:	79bb      	ldrb	r3, [r7, #6]
 8003a5a:	7013      	strb	r3, [r2, #0]
}
 8003a5c:	bf00      	nop
 8003a5e:	3708      	adds	r7, #8
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	200002b5 	.word	0x200002b5
 8003a68:	200002b6 	.word	0x200002b6
 8003a6c:	2000049c 	.word	0x2000049c

08003a70 <UI_Clear_Line>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void UI_Clear_Line(uint8_t y){
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	4603      	mov	r3, r0
 8003a78:	71fb      	strb	r3, [r7, #7]
	/**
	 * Clear row on display based on y position
	 */
	OLED_Clear_Line(&OLED1,y);
 8003a7a:	79fb      	ldrb	r3, [r7, #7]
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	4803      	ldr	r0, [pc, #12]	; (8003a8c <UI_Clear_Line+0x1c>)
 8003a80:	f7fd ff44 	bl	800190c <OLED_Clear_Line>
}
 8003a84:	bf00      	nop
 8003a86:	3708      	adds	r7, #8
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	2000049c 	.word	0x2000049c

08003a90 <UI_Change_Value_Ptr>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void UI_Change_Value_Ptr(void *parametr, uint8_t step, enum Type mode, uint16_t min, uint16_t max, struct Encoder *Encoder){
 8003a90:	b590      	push	{r4, r7, lr}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	4608      	mov	r0, r1
 8003a9a:	4611      	mov	r1, r2
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	70fb      	strb	r3, [r7, #3]
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	70bb      	strb	r3, [r7, #2]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	803b      	strh	r3, [r7, #0]
	/**
	 * Change the value based on the variable pointer, step, type of variable and encoder buffer
	 */
	switch(mode){
 8003aaa:	78bb      	ldrb	r3, [r7, #2]
 8003aac:	2b03      	cmp	r3, #3
 8003aae:	f200 8098 	bhi.w	8003be2 <UI_Change_Value_Ptr+0x152>
 8003ab2:	a201      	add	r2, pc, #4	; (adr r2, 8003ab8 <UI_Change_Value_Ptr+0x28>)
 8003ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab8:	08003ac9 	.word	0x08003ac9
 8003abc:	08003ae3 	.word	0x08003ae3
 8003ac0:	08003b51 	.word	0x08003b51
 8003ac4:	08003bbb 	.word	0x08003bbb
		case INT:
			*(int*)parametr+=Encoder_Get_Rotary_Switch_Buffer(Encoder)*step;
 8003ac8:	69f8      	ldr	r0, [r7, #28]
 8003aca:	f7fd fc00 	bl	80012ce <Encoder_Get_Rotary_Switch_Buffer>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	78fb      	ldrb	r3, [r7, #3]
 8003ad2:	fb03 f202 	mul.w	r2, r3, r2
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	441a      	add	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	601a      	str	r2, [r3, #0]
		break;
 8003ae0:	e07f      	b.n	8003be2 <UI_Change_Value_Ptr+0x152>
		case UINT8:
			if((*(uint8_t*)parametr+Encoder_Get_Rotary_Switch_Buffer(Encoder)*step)<min)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	461c      	mov	r4, r3
 8003ae8:	69f8      	ldr	r0, [r7, #28]
 8003aea:	f7fd fbf0 	bl	80012ce <Encoder_Get_Rotary_Switch_Buffer>
 8003aee:	4602      	mov	r2, r0
 8003af0:	78fb      	ldrb	r3, [r7, #3]
 8003af2:	fb02 f303 	mul.w	r3, r2, r3
 8003af6:	18e2      	adds	r2, r4, r3
 8003af8:	883b      	ldrh	r3, [r7, #0]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	da04      	bge.n	8003b08 <UI_Change_Value_Ptr+0x78>
				*(uint8_t*)parametr=(uint8_t)min;
 8003afe:	883b      	ldrh	r3, [r7, #0]
 8003b00:	b2da      	uxtb	r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	701a      	strb	r2, [r3, #0]
			else if ((*(uint8_t*)parametr+Encoder_Get_Rotary_Switch_Buffer(Encoder)*step)>max)
				*(uint8_t*)parametr=(uint8_t)max;
			else
				*(uint8_t*)parametr+=(uint8_t)Encoder_Get_Rotary_Switch_Buffer(Encoder)*step;
		break;
 8003b06:	e06c      	b.n	8003be2 <UI_Change_Value_Ptr+0x152>
			else if ((*(uint8_t*)parametr+Encoder_Get_Rotary_Switch_Buffer(Encoder)*step)>max)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	461c      	mov	r4, r3
 8003b0e:	69f8      	ldr	r0, [r7, #28]
 8003b10:	f7fd fbdd 	bl	80012ce <Encoder_Get_Rotary_Switch_Buffer>
 8003b14:	4602      	mov	r2, r0
 8003b16:	78fb      	ldrb	r3, [r7, #3]
 8003b18:	fb02 f303 	mul.w	r3, r2, r3
 8003b1c:	18e2      	adds	r2, r4, r3
 8003b1e:	8b3b      	ldrh	r3, [r7, #24]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	dd04      	ble.n	8003b2e <UI_Change_Value_Ptr+0x9e>
				*(uint8_t*)parametr=(uint8_t)max;
 8003b24:	8b3b      	ldrh	r3, [r7, #24]
 8003b26:	b2da      	uxtb	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	701a      	strb	r2, [r3, #0]
		break;
 8003b2c:	e059      	b.n	8003be2 <UI_Change_Value_Ptr+0x152>
				*(uint8_t*)parametr+=(uint8_t)Encoder_Get_Rotary_Switch_Buffer(Encoder)*step;
 8003b2e:	69f8      	ldr	r0, [r7, #28]
 8003b30:	f7fd fbcd 	bl	80012ce <Encoder_Get_Rotary_Switch_Buffer>
 8003b34:	4603      	mov	r3, r0
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	461a      	mov	r2, r3
 8003b3a:	78fb      	ldrb	r3, [r7, #3]
 8003b3c:	fb03 f102 	mul.w	r1, r3, r2
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	781a      	ldrb	r2, [r3, #0]
 8003b44:	b2cb      	uxtb	r3, r1
 8003b46:	4413      	add	r3, r2
 8003b48:	b2da      	uxtb	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	701a      	strb	r2, [r3, #0]
		break;
 8003b4e:	e048      	b.n	8003be2 <UI_Change_Value_Ptr+0x152>
		case UINT16:
			if((*(uint16_t*)parametr+Encoder_Get_Rotary_Switch_Buffer(Encoder)*step)<min)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	881b      	ldrh	r3, [r3, #0]
 8003b54:	461c      	mov	r4, r3
 8003b56:	69f8      	ldr	r0, [r7, #28]
 8003b58:	f7fd fbb9 	bl	80012ce <Encoder_Get_Rotary_Switch_Buffer>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	78fb      	ldrb	r3, [r7, #3]
 8003b60:	fb02 f303 	mul.w	r3, r2, r3
 8003b64:	18e2      	adds	r2, r4, r3
 8003b66:	883b      	ldrh	r3, [r7, #0]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	da03      	bge.n	8003b74 <UI_Change_Value_Ptr+0xe4>
				*(uint16_t*)parametr=(uint16_t)min;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	883a      	ldrh	r2, [r7, #0]
 8003b70:	801a      	strh	r2, [r3, #0]
			else if ((*(uint16_t*)parametr+Encoder_Get_Rotary_Switch_Buffer(Encoder)*step)>max)
				*(uint16_t*)parametr=(uint16_t)max;
			else
				*(uint16_t*)parametr+=(uint16_t)Encoder_Get_Rotary_Switch_Buffer(Encoder)*step;
		break;
 8003b72:	e036      	b.n	8003be2 <UI_Change_Value_Ptr+0x152>
			else if ((*(uint16_t*)parametr+Encoder_Get_Rotary_Switch_Buffer(Encoder)*step)>max)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	881b      	ldrh	r3, [r3, #0]
 8003b78:	461c      	mov	r4, r3
 8003b7a:	69f8      	ldr	r0, [r7, #28]
 8003b7c:	f7fd fba7 	bl	80012ce <Encoder_Get_Rotary_Switch_Buffer>
 8003b80:	4602      	mov	r2, r0
 8003b82:	78fb      	ldrb	r3, [r7, #3]
 8003b84:	fb02 f303 	mul.w	r3, r2, r3
 8003b88:	18e2      	adds	r2, r4, r3
 8003b8a:	8b3b      	ldrh	r3, [r7, #24]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	dd03      	ble.n	8003b98 <UI_Change_Value_Ptr+0x108>
				*(uint16_t*)parametr=(uint16_t)max;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	8b3a      	ldrh	r2, [r7, #24]
 8003b94:	801a      	strh	r2, [r3, #0]
		break;
 8003b96:	e024      	b.n	8003be2 <UI_Change_Value_Ptr+0x152>
				*(uint16_t*)parametr+=(uint16_t)Encoder_Get_Rotary_Switch_Buffer(Encoder)*step;
 8003b98:	69f8      	ldr	r0, [r7, #28]
 8003b9a:	f7fd fb98 	bl	80012ce <Encoder_Get_Rotary_Switch_Buffer>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	78fb      	ldrb	r3, [r7, #3]
 8003ba6:	fb03 f102 	mul.w	r1, r3, r2
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	881a      	ldrh	r2, [r3, #0]
 8003bae:	b28b      	uxth	r3, r1
 8003bb0:	4413      	add	r3, r2
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	801a      	strh	r2, [r3, #0]
		break;
 8003bb8:	e013      	b.n	8003be2 <UI_Change_Value_Ptr+0x152>
		case BOOL:
			if(Encoder_Get_Rotary_Switch_Buffer(Encoder)>0)
 8003bba:	69f8      	ldr	r0, [r7, #28]
 8003bbc:	f7fd fb87 	bl	80012ce <Encoder_Get_Rotary_Switch_Buffer>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	dd03      	ble.n	8003bce <UI_Change_Value_Ptr+0x13e>
				*(uint8_t*)parametr=1;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	701a      	strb	r2, [r3, #0]
			else if(Encoder_Get_Rotary_Switch_Buffer(Encoder)<0)
				*(uint8_t*)parametr=0;
		break;
 8003bcc:	e008      	b.n	8003be0 <UI_Change_Value_Ptr+0x150>
			else if(Encoder_Get_Rotary_Switch_Buffer(Encoder)<0)
 8003bce:	69f8      	ldr	r0, [r7, #28]
 8003bd0:	f7fd fb7d 	bl	80012ce <Encoder_Get_Rotary_Switch_Buffer>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	da02      	bge.n	8003be0 <UI_Change_Value_Ptr+0x150>
				*(uint8_t*)parametr=0;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	701a      	strb	r2, [r3, #0]
		break;
 8003be0:	bf00      	nop
	}
	Encoder_Reset_Rotary_Switch_Buffer(Encoder);
 8003be2:	69f8      	ldr	r0, [r7, #28]
 8003be4:	f7fd fb67 	bl	80012b6 <Encoder_Reset_Rotary_Switch_Buffer>
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd90      	pop	{r4, r7, pc}

08003bf0 <UI_Change_Value>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
int UI_Change_Value(int parametr, uint8_t step, enum Type mode, uint16_t min, uint16_t max, struct Encoder *Encoder){
 8003bf0:	b590      	push	{r4, r7, lr}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af02      	add	r7, sp, #8
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	4608      	mov	r0, r1
 8003bfa:	4611      	mov	r1, r2
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	4603      	mov	r3, r0
 8003c00:	70fb      	strb	r3, [r7, #3]
 8003c02:	460b      	mov	r3, r1
 8003c04:	70bb      	strb	r3, [r7, #2]
 8003c06:	4613      	mov	r3, r2
 8003c08:	803b      	strh	r3, [r7, #0]
	/**
	 * Change the value based on the variable, step, type of variable and encoder buffer
	 * return Changed Variable
	 */
	UI_Change_Value_Ptr(&parametr, step, mode, min, max, Encoder);
 8003c0a:	883c      	ldrh	r4, [r7, #0]
 8003c0c:	78ba      	ldrb	r2, [r7, #2]
 8003c0e:	78f9      	ldrb	r1, [r7, #3]
 8003c10:	1d38      	adds	r0, r7, #4
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	9301      	str	r3, [sp, #4]
 8003c16:	8b3b      	ldrh	r3, [r7, #24]
 8003c18:	9300      	str	r3, [sp, #0]
 8003c1a:	4623      	mov	r3, r4
 8003c1c:	f7ff ff38 	bl	8003a90 <UI_Change_Value_Ptr>
	return parametr;
 8003c20:	687b      	ldr	r3, [r7, #4]
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd90      	pop	{r4, r7, pc}
	...

08003c2c <UI_Draw_String_Center>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void UI_Draw_String_Center(char *str, uint8_t y, enum Display_Write_MODE Display_Write_MODE){
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	460b      	mov	r3, r1
 8003c36:	70fb      	strb	r3, [r7, #3]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	70bb      	strb	r3, [r7, #2]
	/**
	 * Draw string in center of row based on row position and Display_Write_MODE
	 */
	uint8_t str_len =strlen(str);						//Get string length
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f7fc fa87 	bl	8000150 <strlen>
 8003c42:	4603      	mov	r3, r0
 8003c44:	73fb      	strb	r3, [r7, #15]
	uint8_t center= (OLED_Colume_Number-str_len*6)/2;	//Counting start position x to draw string
 8003c46:	7bfa      	ldrb	r2, [r7, #15]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	0092      	lsls	r2, r2, #2
 8003c4c:	1a9b      	subs	r3, r3, r2
 8003c4e:	005b      	lsls	r3, r3, #1
 8003c50:	337d      	adds	r3, #125	; 0x7d
 8003c52:	0fda      	lsrs	r2, r3, #31
 8003c54:	4413      	add	r3, r2
 8003c56:	105b      	asrs	r3, r3, #1
 8003c58:	73bb      	strb	r3, [r7, #14]
	OLED_Set_Cursor(&OLED1, center, y);					//Sets position on display from what will be display
 8003c5a:	7bbb      	ldrb	r3, [r7, #14]
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	78fa      	ldrb	r2, [r7, #3]
 8003c60:	4619      	mov	r1, r3
 8003c62:	4806      	ldr	r0, [pc, #24]	; (8003c7c <UI_Draw_String_Center+0x50>)
 8003c64:	f7fd fd84 	bl	8001770 <OLED_Set_Cursor>
	OLED_Send_String(&OLED1, str, Display_Write_MODE);	//Display string on display
 8003c68:	78bb      	ldrb	r3, [r7, #2]
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	6879      	ldr	r1, [r7, #4]
 8003c6e:	4803      	ldr	r0, [pc, #12]	; (8003c7c <UI_Draw_String_Center+0x50>)
 8003c70:	f7fd fe74 	bl	800195c <OLED_Send_String>
}
 8003c74:	bf00      	nop
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	2000049c 	.word	0x2000049c

08003c80 <UI_Encoder_Reset_Rotary_Switch_Buffer>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void UI_Encoder_Reset_Rotary_Switch_Buffer(struct Encoder *Encoder){
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
	/**
	 * Reset Encoder_Rotary switch buffer
	 */
	Encoder_Reset_Rotary_Switch_Buffer(Encoder);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f7fd fb14 	bl	80012b6 <Encoder_Reset_Rotary_Switch_Buffer>
}
 8003c8e:	bf00      	nop
 8003c90:	3708      	adds	r7, #8
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <UI_Encoder_Reset_Button_State>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void UI_Encoder_Reset_Button_State(struct Encoder *Encoder){
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b082      	sub	sp, #8
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
	/**
	 * Reset Encoder_Rotary button buffer
	 */
	Encoder_Reset_Button_State(Encoder);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f7fd fb20 	bl	80012e4 <Encoder_Reset_Button_State>
}
 8003ca4:	bf00      	nop
 8003ca6:	3708      	adds	r7, #8
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <Face_UI_Draw_Name_List>:
#include "UI_Face.h"

//--------------------------------------------------------------------------------------------------------------------------------------------------------
void Face_UI_Draw_Name_List(){
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
	UI_Clear_Line(0);
 8003cb0:	2000      	movs	r0, #0
 8003cb2:	f7ff fedd 	bl	8003a70 <UI_Clear_Line>
	UI_Draw_String(" SoldIron ", 0, 0, Inverse_Display_MODE);
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	2200      	movs	r2, #0
 8003cba:	2100      	movs	r1, #0
 8003cbc:	4835      	ldr	r0, [pc, #212]	; (8003d94 <Face_UI_Draw_Name_List+0xe8>)
 8003cbe:	f7ff fe87 	bl	80039d0 <UI_Draw_String>
	UI_Clear_Line(1);
 8003cc2:	2001      	movs	r0, #1
 8003cc4:	f7ff fed4 	bl	8003a70 <UI_Clear_Line>
	UI_Draw_String("State:", 0, 1, Direct_Display_MODE);
 8003cc8:	2300      	movs	r3, #0
 8003cca:	2201      	movs	r2, #1
 8003ccc:	2100      	movs	r1, #0
 8003cce:	4832      	ldr	r0, [pc, #200]	; (8003d98 <Face_UI_Draw_Name_List+0xec>)
 8003cd0:	f7ff fe7e 	bl	80039d0 <UI_Draw_String>
	UI_Clear_Line(2);
 8003cd4:	2002      	movs	r0, #2
 8003cd6:	f7ff fecb 	bl	8003a70 <UI_Clear_Line>
	UI_Draw_String("TSetC:", 0, 2, Direct_Display_MODE);
 8003cda:	2300      	movs	r3, #0
 8003cdc:	2202      	movs	r2, #2
 8003cde:	2100      	movs	r1, #0
 8003ce0:	482e      	ldr	r0, [pc, #184]	; (8003d9c <Face_UI_Draw_Name_List+0xf0>)
 8003ce2:	f7ff fe75 	bl	80039d0 <UI_Draw_String>
	UI_Clear_Line(3);
 8003ce6:	2003      	movs	r0, #3
 8003ce8:	f7ff fec2 	bl	8003a70 <UI_Clear_Line>
	UI_Draw_String("TNowC:", 0, 3, Direct_Display_MODE);
 8003cec:	2300      	movs	r3, #0
 8003cee:	2203      	movs	r2, #3
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	482b      	ldr	r0, [pc, #172]	; (8003da0 <Face_UI_Draw_Name_List+0xf4>)
 8003cf4:	f7ff fe6c 	bl	80039d0 <UI_Draw_String>
	UI_Clear_Line(4);
 8003cf8:	2004      	movs	r0, #4
 8003cfa:	f7ff feb9 	bl	8003a70 <UI_Clear_Line>
	UI_Draw_String("AdPow:", 0, 4, Direct_Display_MODE);
 8003cfe:	2300      	movs	r3, #0
 8003d00:	2204      	movs	r2, #4
 8003d02:	2100      	movs	r1, #0
 8003d04:	4827      	ldr	r0, [pc, #156]	; (8003da4 <Face_UI_Draw_Name_List+0xf8>)
 8003d06:	f7ff fe63 	bl	80039d0 <UI_Draw_String>
	UI_Clear_Line(5);
 8003d0a:	2005      	movs	r0, #5
 8003d0c:	f7ff feb0 	bl	8003a70 <UI_Clear_Line>


	UI_Draw_String("Freq:", 0, 5, Inverse_Display_MODE);
 8003d10:	2301      	movs	r3, #1
 8003d12:	2205      	movs	r2, #5
 8003d14:	2100      	movs	r1, #0
 8003d16:	4824      	ldr	r0, [pc, #144]	; (8003da8 <Face_UI_Draw_Name_List+0xfc>)
 8003d18:	f7ff fe5a 	bl	80039d0 <UI_Draw_String>
	UI_Clear_Line(6);
 8003d1c:	2006      	movs	r0, #6
 8003d1e:	f7ff fea7 	bl	8003a70 <UI_Clear_Line>
	UI_Draw_String("Count:", 0, 6, Direct_Display_MODE);
 8003d22:	2300      	movs	r3, #0
 8003d24:	2206      	movs	r2, #6
 8003d26:	2100      	movs	r1, #0
 8003d28:	4820      	ldr	r0, [pc, #128]	; (8003dac <Face_UI_Draw_Name_List+0x100>)
 8003d2a:	f7ff fe51 	bl	80039d0 <UI_Draw_String>


	UI_Draw_String(" SoldFAN ", 11, 0, Inverse_Display_MODE);
 8003d2e:	2301      	movs	r3, #1
 8003d30:	2200      	movs	r2, #0
 8003d32:	210b      	movs	r1, #11
 8003d34:	481e      	ldr	r0, [pc, #120]	; (8003db0 <Face_UI_Draw_Name_List+0x104>)
 8003d36:	f7ff fe4b 	bl	80039d0 <UI_Draw_String>
	UI_Draw_String("State:", 11, 1, Direct_Display_MODE);
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	210b      	movs	r1, #11
 8003d40:	4815      	ldr	r0, [pc, #84]	; (8003d98 <Face_UI_Draw_Name_List+0xec>)
 8003d42:	f7ff fe45 	bl	80039d0 <UI_Draw_String>
	UI_Draw_String("TSetC:", 11, 2, Direct_Display_MODE);
 8003d46:	2300      	movs	r3, #0
 8003d48:	2202      	movs	r2, #2
 8003d4a:	210b      	movs	r1, #11
 8003d4c:	4813      	ldr	r0, [pc, #76]	; (8003d9c <Face_UI_Draw_Name_List+0xf0>)
 8003d4e:	f7ff fe3f 	bl	80039d0 <UI_Draw_String>
	UI_Draw_String("TNowC:", 11, 3, Direct_Display_MODE);
 8003d52:	2300      	movs	r3, #0
 8003d54:	2203      	movs	r2, #3
 8003d56:	210b      	movs	r1, #11
 8003d58:	4811      	ldr	r0, [pc, #68]	; (8003da0 <Face_UI_Draw_Name_List+0xf4>)
 8003d5a:	f7ff fe39 	bl	80039d0 <UI_Draw_String>


	UI_Draw_String(" Separator", 11, 4, Direct_Display_MODE);
 8003d5e:	2300      	movs	r3, #0
 8003d60:	2204      	movs	r2, #4
 8003d62:	210b      	movs	r1, #11
 8003d64:	4813      	ldr	r0, [pc, #76]	; (8003db4 <Face_UI_Draw_Name_List+0x108>)
 8003d66:	f7ff fe33 	bl	80039d0 <UI_Draw_String>
	UI_Draw_String("State:", 11, 5, Direct_Display_MODE);
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	2205      	movs	r2, #5
 8003d6e:	210b      	movs	r1, #11
 8003d70:	4809      	ldr	r0, [pc, #36]	; (8003d98 <Face_UI_Draw_Name_List+0xec>)
 8003d72:	f7ff fe2d 	bl	80039d0 <UI_Draw_String>
	UI_Draw_String("TSetC:", 11, 6, Direct_Display_MODE);
 8003d76:	2300      	movs	r3, #0
 8003d78:	2206      	movs	r2, #6
 8003d7a:	210b      	movs	r1, #11
 8003d7c:	4807      	ldr	r0, [pc, #28]	; (8003d9c <Face_UI_Draw_Name_List+0xf0>)
 8003d7e:	f7ff fe27 	bl	80039d0 <UI_Draw_String>
	UI_Draw_String("TNowC:", 11, 7, Direct_Display_MODE);
 8003d82:	2300      	movs	r3, #0
 8003d84:	2207      	movs	r2, #7
 8003d86:	210b      	movs	r1, #11
 8003d88:	4805      	ldr	r0, [pc, #20]	; (8003da0 <Face_UI_Draw_Name_List+0xf4>)
 8003d8a:	f7ff fe21 	bl	80039d0 <UI_Draw_String>

}
 8003d8e:	bf00      	nop
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	0800b154 	.word	0x0800b154
 8003d98:	0800b160 	.word	0x0800b160
 8003d9c:	0800b168 	.word	0x0800b168
 8003da0:	0800b170 	.word	0x0800b170
 8003da4:	0800b178 	.word	0x0800b178
 8003da8:	0800b180 	.word	0x0800b180
 8003dac:	0800b188 	.word	0x0800b188
 8003db0:	0800b190 	.word	0x0800b190
 8003db4:	0800b19c 	.word	0x0800b19c

08003db8 <Face_UI_Draw_Parameters_List>:
//---------------------------------------------------------------------------------
void Face_UI_Draw_Parameters_List(){
 8003db8:	b580      	push	{r7, lr}
 8003dba:	af00      	add	r7, sp, #0
							//Draw Solder_Iron Parameters
	UI_Draw_Parmetr(Solder_Iron_Get_State(&Soldering_Iron), 6, 1, BOOL);
 8003dbc:	4879      	ldr	r0, [pc, #484]	; (8003fa4 <Face_UI_Draw_Parameters_List+0x1ec>)
 8003dbe:	f7fe fea0 	bl	8002b02 <Solder_Iron_Get_State>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	2201      	movs	r2, #1
 8003dca:	2106      	movs	r1, #6
 8003dcc:	f7ff fde8 	bl	80039a0 <UI_Draw_Parmetr>
	UI_Draw_Parmetr(Soldering_Iron_Get_Temperature_Set_C(&Soldering_Iron), 6, 2, UINT16);
 8003dd0:	4874      	ldr	r0, [pc, #464]	; (8003fa4 <Face_UI_Draw_Parameters_List+0x1ec>)
 8003dd2:	f7fe feb0 	bl	8002b36 <Soldering_Iron_Get_Temperature_Set_C>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	4618      	mov	r0, r3
 8003dda:	2302      	movs	r3, #2
 8003ddc:	2202      	movs	r2, #2
 8003dde:	2106      	movs	r1, #6
 8003de0:	f7ff fdde 	bl	80039a0 <UI_Draw_Parmetr>
	if(Solder_Iron_Get_State(&Soldering_Iron)==Soldering_Iron_ON)
 8003de4:	486f      	ldr	r0, [pc, #444]	; (8003fa4 <Face_UI_Draw_Parameters_List+0x1ec>)
 8003de6:	f7fe fe8c 	bl	8002b02 <Solder_Iron_Get_State>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d10a      	bne.n	8003e06 <Face_UI_Draw_Parameters_List+0x4e>
		UI_Draw_Parmetr(Soldering_Iron_Get_Current_Temperature_C(&Soldering_Iron), 6, 3, UINT16);
 8003df0:	486c      	ldr	r0, [pc, #432]	; (8003fa4 <Face_UI_Draw_Parameters_List+0x1ec>)
 8003df2:	f7fe feae 	bl	8002b52 <Soldering_Iron_Get_Current_Temperature_C>
 8003df6:	4603      	mov	r3, r0
 8003df8:	4618      	mov	r0, r3
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	2203      	movs	r2, #3
 8003dfe:	2106      	movs	r1, #6
 8003e00:	f7ff fdce 	bl	80039a0 <UI_Draw_Parmetr>
 8003e04:	e005      	b.n	8003e12 <Face_UI_Draw_Parameters_List+0x5a>
	else
		UI_Draw_String("----",6,3,Direct_Display_MODE);
 8003e06:	2300      	movs	r3, #0
 8003e08:	2203      	movs	r2, #3
 8003e0a:	2106      	movs	r1, #6
 8003e0c:	4866      	ldr	r0, [pc, #408]	; (8003fa8 <Face_UI_Draw_Parameters_List+0x1f0>)
 8003e0e:	f7ff fddf 	bl	80039d0 <UI_Draw_String>
	UI_Draw_Parmetr(Solder_Iron_Get_Full_Power_State(&Soldering_Iron), 6, 4, BOOL);
 8003e12:	4864      	ldr	r0, [pc, #400]	; (8003fa4 <Face_UI_Draw_Parameters_List+0x1ec>)
 8003e14:	f7fe fe69 	bl	8002aea <Solder_Iron_Get_Full_Power_State>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	2204      	movs	r2, #4
 8003e20:	2106      	movs	r1, #6
 8003e22:	f7ff fdbd 	bl	80039a0 <UI_Draw_Parmetr>

							//Draw Phase Angle Control Parameters
	if(PAC_Get_State(PAC)==ZCD_STATE_ON){
 8003e26:	4b61      	ldr	r3, [pc, #388]	; (8003fac <Face_UI_Draw_Parameters_List+0x1f4>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7fe fa62 	bl	80022f4 <PAC_Get_State>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d146      	bne.n	8003ec4 <Face_UI_Draw_Parameters_List+0x10c>
		UI_Draw_Parmetr(PAC_Get_Frequency(PAC), 6, 5, UINT8);
 8003e36:	4b5d      	ldr	r3, [pc, #372]	; (8003fac <Face_UI_Draw_Parameters_List+0x1f4>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7fe fa65 	bl	800230a <PAC_Get_Frequency>
 8003e40:	4603      	mov	r3, r0
 8003e42:	4618      	mov	r0, r3
 8003e44:	2301      	movs	r3, #1
 8003e46:	2205      	movs	r2, #5
 8003e48:	2106      	movs	r1, #6
 8003e4a:	f7ff fda9 	bl	80039a0 <UI_Draw_Parmetr>
		UI_Draw_Parmetr(PAC_Get_Max_Control_Value(PAC), 6, 6, UINT16);
 8003e4e:	4b57      	ldr	r3, [pc, #348]	; (8003fac <Face_UI_Draw_Parameters_List+0x1f4>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7fe fa65 	bl	8002322 <PAC_Get_Max_Control_Value>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	2206      	movs	r2, #6
 8003e60:	2106      	movs	r1, #6
 8003e62:	f7ff fd9d 	bl	80039a0 <UI_Draw_Parmetr>
		if(Soldering_Heat_Gun_Get_PAC_Controll_State(&Soldering_Heat_Gun)==PAC_Device_ON)
 8003e66:	4852      	ldr	r0, [pc, #328]	; (8003fb0 <Face_UI_Draw_Parameters_List+0x1f8>)
 8003e68:	f7ff f849 	bl	8002efe <Soldering_Heat_Gun_Get_PAC_Controll_State>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d10a      	bne.n	8003e88 <Face_UI_Draw_Parameters_List+0xd0>
			UI_Draw_Parmetr(Soldering_Heat_Gun_Get_PAC_Controll_Value(&Soldering_Heat_Gun), 1, 7, UINT16);
 8003e72:	484f      	ldr	r0, [pc, #316]	; (8003fb0 <Face_UI_Draw_Parameters_List+0x1f8>)
 8003e74:	f7ff f851 	bl	8002f1a <Soldering_Heat_Gun_Get_PAC_Controll_Value>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	2207      	movs	r2, #7
 8003e80:	2101      	movs	r1, #1
 8003e82:	f7ff fd8d 	bl	80039a0 <UI_Draw_Parmetr>
 8003e86:	e005      	b.n	8003e94 <Face_UI_Draw_Parameters_List+0xdc>
		else
			UI_Draw_String("----",1,7,Direct_Display_MODE);
 8003e88:	2300      	movs	r3, #0
 8003e8a:	2207      	movs	r2, #7
 8003e8c:	2101      	movs	r1, #1
 8003e8e:	4846      	ldr	r0, [pc, #280]	; (8003fa8 <Face_UI_Draw_Parameters_List+0x1f0>)
 8003e90:	f7ff fd9e 	bl	80039d0 <UI_Draw_String>
		if(Soldering_Separator_Get_PAC_Controll_State(&Soldering_Separator)==PAC_Device_ON)
 8003e94:	4847      	ldr	r0, [pc, #284]	; (8003fb4 <Face_UI_Draw_Parameters_List+0x1fc>)
 8003e96:	f7ff f9ff 	bl	8003298 <Soldering_Separator_Get_PAC_Controll_State>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d10a      	bne.n	8003eb6 <Face_UI_Draw_Parameters_List+0xfe>
			UI_Draw_Parmetr(Soldering_Separator_Get_PAC_Controll_Value(&Soldering_Separator), 6, 7, UINT16);
 8003ea0:	4844      	ldr	r0, [pc, #272]	; (8003fb4 <Face_UI_Draw_Parameters_List+0x1fc>)
 8003ea2:	f7ff fa07 	bl	80032b4 <Soldering_Separator_Get_PAC_Controll_Value>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	2302      	movs	r3, #2
 8003eac:	2207      	movs	r2, #7
 8003eae:	2106      	movs	r1, #6
 8003eb0:	f7ff fd76 	bl	80039a0 <UI_Draw_Parmetr>
 8003eb4:	e01e      	b.n	8003ef4 <Face_UI_Draw_Parameters_List+0x13c>
		else
			UI_Draw_String("----",6,7,Direct_Display_MODE);
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	2207      	movs	r2, #7
 8003eba:	2106      	movs	r1, #6
 8003ebc:	483a      	ldr	r0, [pc, #232]	; (8003fa8 <Face_UI_Draw_Parameters_List+0x1f0>)
 8003ebe:	f7ff fd87 	bl	80039d0 <UI_Draw_String>
 8003ec2:	e017      	b.n	8003ef4 <Face_UI_Draw_Parameters_List+0x13c>
	}
	else{
		UI_Draw_String("----",6,5,Direct_Display_MODE);
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	2205      	movs	r2, #5
 8003ec8:	2106      	movs	r1, #6
 8003eca:	4837      	ldr	r0, [pc, #220]	; (8003fa8 <Face_UI_Draw_Parameters_List+0x1f0>)
 8003ecc:	f7ff fd80 	bl	80039d0 <UI_Draw_String>
		UI_Draw_String("----",6,6,Direct_Display_MODE);
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	2206      	movs	r2, #6
 8003ed4:	2106      	movs	r1, #6
 8003ed6:	4834      	ldr	r0, [pc, #208]	; (8003fa8 <Face_UI_Draw_Parameters_List+0x1f0>)
 8003ed8:	f7ff fd7a 	bl	80039d0 <UI_Draw_String>
		UI_Draw_String("----",1,7,Direct_Display_MODE);
 8003edc:	2300      	movs	r3, #0
 8003ede:	2207      	movs	r2, #7
 8003ee0:	2101      	movs	r1, #1
 8003ee2:	4831      	ldr	r0, [pc, #196]	; (8003fa8 <Face_UI_Draw_Parameters_List+0x1f0>)
 8003ee4:	f7ff fd74 	bl	80039d0 <UI_Draw_String>
		UI_Draw_String("----",6,7,Direct_Display_MODE);
 8003ee8:	2300      	movs	r3, #0
 8003eea:	2207      	movs	r2, #7
 8003eec:	2106      	movs	r1, #6
 8003eee:	482e      	ldr	r0, [pc, #184]	; (8003fa8 <Face_UI_Draw_Parameters_List+0x1f0>)
 8003ef0:	f7ff fd6e 	bl	80039d0 <UI_Draw_String>
	}

							//Draw Soldering_Heat_Gun Parameters
	UI_Draw_Parmetr(Soldering_Heat_Gun_Get_State(&Soldering_Heat_Gun), 17, 1, BOOL);
 8003ef4:	482e      	ldr	r0, [pc, #184]	; (8003fb0 <Face_UI_Draw_Parameters_List+0x1f8>)
 8003ef6:	f7fe ffcc 	bl	8002e92 <Soldering_Heat_Gun_Get_State>
 8003efa:	4603      	mov	r3, r0
 8003efc:	4618      	mov	r0, r3
 8003efe:	2303      	movs	r3, #3
 8003f00:	2201      	movs	r2, #1
 8003f02:	2111      	movs	r1, #17
 8003f04:	f7ff fd4c 	bl	80039a0 <UI_Draw_Parmetr>
	UI_Draw_Parmetr(Soldering_Heat_Gun_Get_Temperature_Set_C(&Soldering_Heat_Gun), 17, 2, UINT16);
 8003f08:	4829      	ldr	r0, [pc, #164]	; (8003fb0 <Face_UI_Draw_Parameters_List+0x1f8>)
 8003f0a:	f7fe ffdc 	bl	8002ec6 <Soldering_Heat_Gun_Get_Temperature_Set_C>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	4618      	mov	r0, r3
 8003f12:	2302      	movs	r3, #2
 8003f14:	2202      	movs	r2, #2
 8003f16:	2111      	movs	r1, #17
 8003f18:	f7ff fd42 	bl	80039a0 <UI_Draw_Parmetr>
	if(Soldering_Heat_Gun_Get_State(&Soldering_Heat_Gun)!=Heat_Gun_OFF)
 8003f1c:	4824      	ldr	r0, [pc, #144]	; (8003fb0 <Face_UI_Draw_Parameters_List+0x1f8>)
 8003f1e:	f7fe ffb8 	bl	8002e92 <Soldering_Heat_Gun_Get_State>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00a      	beq.n	8003f3e <Face_UI_Draw_Parameters_List+0x186>
		UI_Draw_Parmetr(Soldering_Heat_Gun_Get_Current_Temperature_C(&Soldering_Heat_Gun), 17, 3, UINT16);
 8003f28:	4821      	ldr	r0, [pc, #132]	; (8003fb0 <Face_UI_Draw_Parameters_List+0x1f8>)
 8003f2a:	f7fe ffda 	bl	8002ee2 <Soldering_Heat_Gun_Get_Current_Temperature_C>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	4618      	mov	r0, r3
 8003f32:	2302      	movs	r3, #2
 8003f34:	2203      	movs	r2, #3
 8003f36:	2111      	movs	r1, #17
 8003f38:	f7ff fd32 	bl	80039a0 <UI_Draw_Parmetr>
 8003f3c:	e005      	b.n	8003f4a <Face_UI_Draw_Parameters_List+0x192>
	else
		UI_Draw_String("----",17,3,Direct_Display_MODE);
 8003f3e:	2300      	movs	r3, #0
 8003f40:	2203      	movs	r2, #3
 8003f42:	2111      	movs	r1, #17
 8003f44:	4818      	ldr	r0, [pc, #96]	; (8003fa8 <Face_UI_Draw_Parameters_List+0x1f0>)
 8003f46:	f7ff fd43 	bl	80039d0 <UI_Draw_String>

							//Draw Soldering_Separator Parameters
	UI_Draw_Parmetr(Soldering_Separator_Get_State(&Soldering_Separator), 17, 5, BOOL);
 8003f4a:	481a      	ldr	r0, [pc, #104]	; (8003fb4 <Face_UI_Draw_Parameters_List+0x1fc>)
 8003f4c:	f7ff f95e 	bl	800320c <Soldering_Separator_Get_State>
 8003f50:	4603      	mov	r3, r0
 8003f52:	4618      	mov	r0, r3
 8003f54:	2303      	movs	r3, #3
 8003f56:	2205      	movs	r2, #5
 8003f58:	2111      	movs	r1, #17
 8003f5a:	f7ff fd21 	bl	80039a0 <UI_Draw_Parmetr>
	UI_Draw_Parmetr(Soldering_Separator_Get_Temperature_Set_C(&Soldering_Separator), 17, 6, UINT16);
 8003f5e:	4815      	ldr	r0, [pc, #84]	; (8003fb4 <Face_UI_Draw_Parameters_List+0x1fc>)
 8003f60:	f7ff f960 	bl	8003224 <Soldering_Separator_Get_Temperature_Set_C>
 8003f64:	4603      	mov	r3, r0
 8003f66:	4618      	mov	r0, r3
 8003f68:	2302      	movs	r3, #2
 8003f6a:	2206      	movs	r2, #6
 8003f6c:	2111      	movs	r1, #17
 8003f6e:	f7ff fd17 	bl	80039a0 <UI_Draw_Parmetr>
	if(Soldering_Separator_Get_State(&Soldering_Separator)==Separator_ON)
 8003f72:	4810      	ldr	r0, [pc, #64]	; (8003fb4 <Face_UI_Draw_Parameters_List+0x1fc>)
 8003f74:	f7ff f94a 	bl	800320c <Soldering_Separator_Get_State>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d10a      	bne.n	8003f94 <Face_UI_Draw_Parameters_List+0x1dc>
		UI_Draw_Parmetr(Soldering_Separator_Get_Current_Temperature_C(&Soldering_Separator), 17, 7, UINT16);
 8003f7e:	480d      	ldr	r0, [pc, #52]	; (8003fb4 <Face_UI_Draw_Parameters_List+0x1fc>)
 8003f80:	f7ff f95e 	bl	8003240 <Soldering_Separator_Get_Current_Temperature_C>
 8003f84:	4603      	mov	r3, r0
 8003f86:	4618      	mov	r0, r3
 8003f88:	2302      	movs	r3, #2
 8003f8a:	2207      	movs	r2, #7
 8003f8c:	2111      	movs	r1, #17
 8003f8e:	f7ff fd07 	bl	80039a0 <UI_Draw_Parmetr>
	else
		UI_Draw_String("----",17,7,Direct_Display_MODE);

}
 8003f92:	e005      	b.n	8003fa0 <Face_UI_Draw_Parameters_List+0x1e8>
		UI_Draw_String("----",17,7,Direct_Display_MODE);
 8003f94:	2300      	movs	r3, #0
 8003f96:	2207      	movs	r2, #7
 8003f98:	2111      	movs	r1, #17
 8003f9a:	4803      	ldr	r0, [pc, #12]	; (8003fa8 <Face_UI_Draw_Parameters_List+0x1f0>)
 8003f9c:	f7ff fd18 	bl	80039d0 <UI_Draw_String>
}
 8003fa0:	bf00      	nop
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	20000560 	.word	0x20000560
 8003fa8:	0800b1a8 	.word	0x0800b1a8
 8003fac:	20000730 	.word	0x20000730
 8003fb0:	2000060c 	.word	0x2000060c
 8003fb4:	200006a8 	.word	0x200006a8

08003fb8 <Get_Button_State>:
//---------------------------------------------------------------------------------Button_Handler
void Get_Button_State(struct Button_Vector *Button_Vector, struct Button* Full_Power_Button){
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
	/**
	 * //Work with buttons buffers and set modes for all part of soldering station witch ocure
	 */

	struct Button_Vector *now=Button_Vector;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	60fb      	str	r3, [r7, #12]
	do{
		if(Button_Get_Event_State(now->Button)){	//Сheck the current button for a state change
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7fd f965 	bl	800129a <Button_Get_Event_State>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f000 809f 	beq.w	8004116 <Get_Button_State+0x15e>
			switch(now->Button->ID){				//Identify the button by ID
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	2b06      	cmp	r3, #6
 8003fe0:	f200 8099 	bhi.w	8004116 <Get_Button_State+0x15e>
 8003fe4:	a201      	add	r2, pc, #4	; (adr r2, 8003fec <Get_Button_State+0x34>)
 8003fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fea:	bf00      	nop
 8003fec:	08004075 	.word	0x08004075
 8003ff0:	08004099 	.word	0x08004099
 8003ff4:	080040bd 	.word	0x080040bd
 8003ff8:	08004009 	.word	0x08004009
 8003ffc:	0800402d 	.word	0x0800402d
 8004000:	08004051 	.word	0x08004051
 8004004:	080040e1 	.word	0x080040e1
				case Solder_Iron_Set_Preset2_Button_ID:
					if((Button_Get_Pin_State(now->Button)==GPIO_PIN_RESET)&&(Solder_Iron_Get_State(&Soldering_Iron)==Soldering_Iron_ON)){	//check for a falling edge event
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	4618      	mov	r0, r3
 800400e:	f7fd f931 	bl	8001274 <Button_Get_Pin_State>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d173      	bne.n	8004100 <Get_Button_State+0x148>
 8004018:	4851      	ldr	r0, [pc, #324]	; (8004160 <Get_Button_State+0x1a8>)
 800401a:	f7fe fd72 	bl	8002b02 <Solder_Iron_Get_State>
 800401e:	4603      	mov	r3, r0
 8004020:	2b01      	cmp	r3, #1
 8004022:	d16d      	bne.n	8004100 <Get_Button_State+0x148>
						Solder_Iron_Set_Preset2_Temperature(&Soldering_Iron);	//Set temperature Preset
 8004024:	484e      	ldr	r0, [pc, #312]	; (8004160 <Get_Button_State+0x1a8>)
 8004026:	f7fe fd13 	bl	8002a50 <Solder_Iron_Set_Preset2_Temperature>
					}
					break;
 800402a:	e069      	b.n	8004100 <Get_Button_State+0x148>
				case Soldering_Heat_Gun_Set_Preset2_Button_ID:
					if((Button_Get_Pin_State(now->Button)==GPIO_PIN_RESET)&&(Soldering_Heat_Gun_Get_State(&Soldering_Heat_Gun)!=Heat_Gun_OFF)){
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	4618      	mov	r0, r3
 8004032:	f7fd f91f 	bl	8001274 <Button_Get_Pin_State>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d163      	bne.n	8004104 <Get_Button_State+0x14c>
 800403c:	4849      	ldr	r0, [pc, #292]	; (8004164 <Get_Button_State+0x1ac>)
 800403e:	f7fe ff28 	bl	8002e92 <Soldering_Heat_Gun_Get_State>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d05d      	beq.n	8004104 <Get_Button_State+0x14c>
						Soldering_Heat_Gun_Set_Preset2_Temperature(&Soldering_Heat_Gun);
 8004048:	4846      	ldr	r0, [pc, #280]	; (8004164 <Get_Button_State+0x1ac>)
 800404a:	f7fe fef4 	bl	8002e36 <Soldering_Heat_Gun_Set_Preset2_Temperature>
					}
					break;
 800404e:	e059      	b.n	8004104 <Get_Button_State+0x14c>
				case Soldering_Separator_Set_Preset2_Button_ID:
					if((Button_Get_Pin_State(now->Button)==GPIO_PIN_RESET)&&(Soldering_Separator_Get_State(&Soldering_Separator)==Separator_ON))
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	4618      	mov	r0, r3
 8004056:	f7fd f90d 	bl	8001274 <Button_Get_Pin_State>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d153      	bne.n	8004108 <Get_Button_State+0x150>
 8004060:	4841      	ldr	r0, [pc, #260]	; (8004168 <Get_Button_State+0x1b0>)
 8004062:	f7ff f8d3 	bl	800320c <Soldering_Separator_Get_State>
 8004066:	4603      	mov	r3, r0
 8004068:	2b01      	cmp	r3, #1
 800406a:	d14d      	bne.n	8004108 <Get_Button_State+0x150>
						Soldering_Separator_Set_Preset2_Temperature(&Soldering_Separator);
 800406c:	483e      	ldr	r0, [pc, #248]	; (8004168 <Get_Button_State+0x1b0>)
 800406e:	f7ff f8af 	bl	80031d0 <Soldering_Separator_Set_Preset2_Temperature>
					break;
 8004072:	e049      	b.n	8004108 <Get_Button_State+0x150>
				case Solder_Iron_Set_Preset1_Button_ID:
					if((Button_Get_Pin_State(now->Button)==GPIO_PIN_RESET)&&(Solder_Iron_Get_State(&Soldering_Iron)==Soldering_Iron_ON)){
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	4618      	mov	r0, r3
 800407a:	f7fd f8fb 	bl	8001274 <Button_Get_Pin_State>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d143      	bne.n	800410c <Get_Button_State+0x154>
 8004084:	4836      	ldr	r0, [pc, #216]	; (8004160 <Get_Button_State+0x1a8>)
 8004086:	f7fe fd3c 	bl	8002b02 <Solder_Iron_Get_State>
 800408a:	4603      	mov	r3, r0
 800408c:	2b01      	cmp	r3, #1
 800408e:	d13d      	bne.n	800410c <Get_Button_State+0x154>
						Solder_Iron_Set_Preset1_Temperature(&Soldering_Iron);
 8004090:	4833      	ldr	r0, [pc, #204]	; (8004160 <Get_Button_State+0x1a8>)
 8004092:	f7fe fcce 	bl	8002a32 <Solder_Iron_Set_Preset1_Temperature>
					}
					break;
 8004096:	e039      	b.n	800410c <Get_Button_State+0x154>
				case Soldering_Heat_Gun_Set_Preset1_Button_ID:
					if((Button_Get_Pin_State(now->Button)==GPIO_PIN_RESET)&&(Soldering_Heat_Gun_Get_State(&Soldering_Heat_Gun)!=Heat_Gun_OFF)){
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	4618      	mov	r0, r3
 800409e:	f7fd f8e9 	bl	8001274 <Button_Get_Pin_State>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d133      	bne.n	8004110 <Get_Button_State+0x158>
 80040a8:	482e      	ldr	r0, [pc, #184]	; (8004164 <Get_Button_State+0x1ac>)
 80040aa:	f7fe fef2 	bl	8002e92 <Soldering_Heat_Gun_Get_State>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d02d      	beq.n	8004110 <Get_Button_State+0x158>
						Soldering_Heat_Gun_Set_Preset1_Temperature(&Soldering_Heat_Gun);
 80040b4:	482b      	ldr	r0, [pc, #172]	; (8004164 <Get_Button_State+0x1ac>)
 80040b6:	f7fe feb2 	bl	8002e1e <Soldering_Heat_Gun_Set_Preset1_Temperature>
					}
					break;
 80040ba:	e029      	b.n	8004110 <Get_Button_State+0x158>
				case Soldering_Separator_Set_Preset1_Button_ID:
					if((Button_Get_Pin_State(now->Button)==GPIO_PIN_RESET)&&(Soldering_Separator_Get_State(&Soldering_Separator)==Separator_ON)){
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	4618      	mov	r0, r3
 80040c2:	f7fd f8d7 	bl	8001274 <Button_Get_Pin_State>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d123      	bne.n	8004114 <Get_Button_State+0x15c>
 80040cc:	4826      	ldr	r0, [pc, #152]	; (8004168 <Get_Button_State+0x1b0>)
 80040ce:	f7ff f89d 	bl	800320c <Soldering_Separator_Get_State>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d11d      	bne.n	8004114 <Get_Button_State+0x15c>
						Soldering_Separator_Set_Preset1_Temperature(&Soldering_Separator);
 80040d8:	4823      	ldr	r0, [pc, #140]	; (8004168 <Get_Button_State+0x1b0>)
 80040da:	f7ff f86d 	bl	80031b8 <Soldering_Separator_Set_Preset1_Temperature>
					}
					break;
 80040de:	e019      	b.n	8004114 <Get_Button_State+0x15c>
				case Button_Gerkon_ID:										// if Gerkon
					if(Button_Get_Pin_State(now->Button)==GPIO_PIN_RESET)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7fd f8c5 	bl	8001274 <Button_Get_Pin_State>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d103      	bne.n	80040f8 <Get_Button_State+0x140>
						Soldering_Heat_Gun_OFF(&Soldering_Heat_Gun);
 80040f0:	481c      	ldr	r0, [pc, #112]	; (8004164 <Get_Button_State+0x1ac>)
 80040f2:	f7fe fe01 	bl	8002cf8 <Soldering_Heat_Gun_OFF>
					else
						Soldering_Heat_Gun_ON(&Soldering_Heat_Gun);

					break;
 80040f6:	e00e      	b.n	8004116 <Get_Button_State+0x15e>
						Soldering_Heat_Gun_ON(&Soldering_Heat_Gun);
 80040f8:	481a      	ldr	r0, [pc, #104]	; (8004164 <Get_Button_State+0x1ac>)
 80040fa:	f7fe fdcf 	bl	8002c9c <Soldering_Heat_Gun_ON>
					break;
 80040fe:	e00a      	b.n	8004116 <Get_Button_State+0x15e>
					break;
 8004100:	bf00      	nop
 8004102:	e008      	b.n	8004116 <Get_Button_State+0x15e>
					break;
 8004104:	bf00      	nop
 8004106:	e006      	b.n	8004116 <Get_Button_State+0x15e>
					break;
 8004108:	bf00      	nop
 800410a:	e004      	b.n	8004116 <Get_Button_State+0x15e>
					break;
 800410c:	bf00      	nop
 800410e:	e002      	b.n	8004116 <Get_Button_State+0x15e>
					break;
 8004110:	bf00      	nop
 8004112:	e000      	b.n	8004116 <Get_Button_State+0x15e>
					break;
 8004114:	bf00      	nop

			}
		}
		now=now->next;			//Go to the next button
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	60fb      	str	r3, [r7, #12]
	}while(now!=NULL);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2b00      	cmp	r3, #0
 8004120:	f47f af51 	bne.w	8003fc6 <Get_Button_State+0xe>



	if(Solder_Iron_Get_State(&Soldering_Iron)==Soldering_Iron_ON){			//Check Full_Power_Button for a state change if Soldering_Iron is Turn on
 8004124:	480e      	ldr	r0, [pc, #56]	; (8004160 <Get_Button_State+0x1a8>)
 8004126:	f7fe fcec 	bl	8002b02 <Solder_Iron_Get_State>
 800412a:	4603      	mov	r3, r0
 800412c:	2b01      	cmp	r3, #1
 800412e:	d112      	bne.n	8004156 <Get_Button_State+0x19e>
		if(Button_Get_Event_State(Full_Power_Button)){
 8004130:	6838      	ldr	r0, [r7, #0]
 8004132:	f7fd f8b2 	bl	800129a <Button_Get_Event_State>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00c      	beq.n	8004156 <Get_Button_State+0x19e>
			if(Button_Get_Pin_State(Full_Power_Button)==GPIO_PIN_RESET)
 800413c:	6838      	ldr	r0, [r7, #0]
 800413e:	f7fd f899 	bl	8001274 <Button_Get_Pin_State>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d103      	bne.n	8004150 <Get_Button_State+0x198>
				Solder_Iron_Full_Power_ON(&Soldering_Iron);
 8004148:	4805      	ldr	r0, [pc, #20]	; (8004160 <Get_Button_State+0x1a8>)
 800414a:	f7fe fca2 	bl	8002a92 <Solder_Iron_Full_Power_ON>
			else
				Solder_Iron_Full_Power_OFF(&Soldering_Iron);
		}
	}
}
 800414e:	e002      	b.n	8004156 <Get_Button_State+0x19e>
				Solder_Iron_Full_Power_OFF(&Soldering_Iron);
 8004150:	4803      	ldr	r0, [pc, #12]	; (8004160 <Get_Button_State+0x1a8>)
 8004152:	f7fe fcb4 	bl	8002abe <Solder_Iron_Full_Power_OFF>
}
 8004156:	bf00      	nop
 8004158:	3710      	adds	r7, #16
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	20000560 	.word	0x20000560
 8004164:	2000060c 	.word	0x2000060c
 8004168:	200006a8 	.word	0x200006a8

0800416c <Face_UI_it>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void Face_UI_it(struct Encoder *Encoder_P1, struct Encoder *Encoder_P2, struct Button_Vector *Button_Vector){
 800416c:	b580      	push	{r7, lr}
 800416e:	b088      	sub	sp, #32
 8004170:	af02      	add	r7, sp, #8
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
	 * Elements of station such ass Solder_Irin can work only when MC transfer control to this function
	 */
	enum{
		Interface_Contoll_Soldering_Heat_Gun,
		Interface_Contoll_Soldering_Separator
	}Interface_Contoll=Interface_Contoll_Soldering_Heat_Gun;			//this parameter contain witch interface is active now
 8004178:	2300      	movs	r3, #0
 800417a:	75fb      	strb	r3, [r7, #23]


	Soldering_Station_Temperature_Presets_Corection_Converting(&Soldering_Iron, &Soldering_Heat_Gun, &Soldering_Separator);	//Transfer Thermal correction Celsius to ADC's Levels
 800417c:	4a84      	ldr	r2, [pc, #528]	; (8004390 <Face_UI_it+0x224>)
 800417e:	4985      	ldr	r1, [pc, #532]	; (8004394 <Face_UI_it+0x228>)
 8004180:	4885      	ldr	r0, [pc, #532]	; (8004398 <Face_UI_it+0x22c>)
 8004182:	f7ff f92e 	bl	80033e2 <Soldering_Station_Temperature_Presets_Corection_Converting>
																																// It needs because Thermal correction with PID work with ADC's Levels
	Face_UI_Draw_Name_List();													// Clear display and draw Name of parameters on the display
 8004186:	f7ff fd91 	bl	8003cac <Face_UI_Draw_Name_List>

	UI_Encoder_Reset_Button_State(Encoder_P2);
 800418a:	68b8      	ldr	r0, [r7, #8]
 800418c:	f7ff fd83 	bl	8003c96 <UI_Encoder_Reset_Button_State>
	UI_Encoder_Reset_Button_State(Encoder_P1);									//Clear encoders
 8004190:	68f8      	ldr	r0, [r7, #12]
 8004192:	f7ff fd80 	bl	8003c96 <UI_Encoder_Reset_Button_State>

	do{																			//Start work cycle

		if(Encoder_Get_Button_State(Encoder_P1)==Encoder_Button_long){			//Select which element will be control by Encoder
 8004196:	68f8      	ldr	r0, [r7, #12]
 8004198:	f7fd f8b1 	bl	80012fe <Encoder_Get_Button_State>
 800419c:	4603      	mov	r3, r0
 800419e:	2b03      	cmp	r3, #3
 80041a0:	d122      	bne.n	80041e8 <Face_UI_it+0x7c>
			UI_Encoder_Reset_Button_State(Encoder_P1);							//Clear Encoder Buffer
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f7ff fd77 	bl	8003c96 <UI_Encoder_Reset_Button_State>
			if(Interface_Contoll==Interface_Contoll_Soldering_Heat_Gun){		// Soldering Separator
 80041a8:	7dfb      	ldrb	r3, [r7, #23]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d10e      	bne.n	80041cc <Face_UI_it+0x60>
				Interface_Contoll=Interface_Contoll_Soldering_Separator;
 80041ae:	2301      	movs	r3, #1
 80041b0:	75fb      	strb	r3, [r7, #23]
				UI_Draw_String(" SoldFAN ", 11, 0, Direct_Display_MODE);		//Redraw part of name interface ton mark witch part are selected
 80041b2:	2300      	movs	r3, #0
 80041b4:	2200      	movs	r2, #0
 80041b6:	210b      	movs	r1, #11
 80041b8:	4878      	ldr	r0, [pc, #480]	; (800439c <Face_UI_it+0x230>)
 80041ba:	f7ff fc09 	bl	80039d0 <UI_Draw_String>
				UI_Draw_String(" Separator", 11, 4, Inverse_Display_MODE);
 80041be:	2301      	movs	r3, #1
 80041c0:	2204      	movs	r2, #4
 80041c2:	210b      	movs	r1, #11
 80041c4:	4876      	ldr	r0, [pc, #472]	; (80043a0 <Face_UI_it+0x234>)
 80041c6:	f7ff fc03 	bl	80039d0 <UI_Draw_String>
 80041ca:	e00d      	b.n	80041e8 <Face_UI_it+0x7c>
			}
			else{																//Soldering heat gun
				Interface_Contoll=Interface_Contoll_Soldering_Heat_Gun;
 80041cc:	2300      	movs	r3, #0
 80041ce:	75fb      	strb	r3, [r7, #23]
				UI_Draw_String(" SoldFAN ", 11, 0, Inverse_Display_MODE);		//Redraw part of name interface ton mark witch part are select
 80041d0:	2301      	movs	r3, #1
 80041d2:	2200      	movs	r2, #0
 80041d4:	210b      	movs	r1, #11
 80041d6:	4871      	ldr	r0, [pc, #452]	; (800439c <Face_UI_it+0x230>)
 80041d8:	f7ff fbfa 	bl	80039d0 <UI_Draw_String>
				UI_Draw_String(" Separator", 11, 4, Direct_Display_MODE);
 80041dc:	2300      	movs	r3, #0
 80041de:	2204      	movs	r2, #4
 80041e0:	210b      	movs	r1, #11
 80041e2:	486f      	ldr	r0, [pc, #444]	; (80043a0 <Face_UI_it+0x234>)
 80041e4:	f7ff fbf4 	bl	80039d0 <UI_Draw_String>
			}
		}

		Get_Button_State(Button_Vector, &Soldering_Iron.Full_Power_Button);		//Work with buttons buffers
 80041e8:	496e      	ldr	r1, [pc, #440]	; (80043a4 <Face_UI_it+0x238>)
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7ff fee4 	bl	8003fb8 <Get_Button_State>

		if(Solder_Iron_Get_State(&Soldering_Iron)==Soldering_Iron_ON){			//Change Solder_Iron Manual Temperature if Solder_Iron is turn ON
 80041f0:	4869      	ldr	r0, [pc, #420]	; (8004398 <Face_UI_it+0x22c>)
 80041f2:	f7fe fc86 	bl	8002b02 <Solder_Iron_Get_State>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d118      	bne.n	800422e <Face_UI_it+0xc2>
			Solder_Iron_Set_Manual_Preset_Temperature_C(
					(uint16_t)UI_Change_Value(Soldering_Iron_Get_Manual_Preset_Temperature_C(&Soldering_Iron), 5, UINT16, Soldering_Iron_MIN_Manual_Preset_Temperature_C, MAX_ADC_Value, Encoder_P2),
 80041fc:	4866      	ldr	r0, [pc, #408]	; (8004398 <Face_UI_it+0x22c>)
 80041fe:	f7fe fc8c 	bl	8002b1a <Soldering_Iron_Get_Manual_Preset_Temperature_C>
 8004202:	4603      	mov	r3, r0
 8004204:	4618      	mov	r0, r3
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	9301      	str	r3, [sp, #4]
 800420a:	f640 63d8 	movw	r3, #3800	; 0xed8
 800420e:	9300      	str	r3, [sp, #0]
 8004210:	2364      	movs	r3, #100	; 0x64
 8004212:	2202      	movs	r2, #2
 8004214:	2105      	movs	r1, #5
 8004216:	f7ff fceb 	bl	8003bf0 <UI_Change_Value>
 800421a:	4603      	mov	r3, r0
			Solder_Iron_Set_Manual_Preset_Temperature_C(
 800421c:	b29b      	uxth	r3, r3
 800421e:	495e      	ldr	r1, [pc, #376]	; (8004398 <Face_UI_it+0x22c>)
 8004220:	4618      	mov	r0, r3
 8004222:	f7fe fc24 	bl	8002a6e <Solder_Iron_Set_Manual_Preset_Temperature_C>
					&Soldering_Iron);
			Solder_Iron_Set_Manual_Temperature(&Soldering_Iron);
 8004226:	485c      	ldr	r0, [pc, #368]	; (8004398 <Face_UI_it+0x22c>)
 8004228:	f7fe fbe9 	bl	80029fe <Solder_Iron_Set_Manual_Temperature>
 800422c:	e002      	b.n	8004234 <Face_UI_it+0xc8>
		}
		else
			UI_Encoder_Reset_Rotary_Switch_Buffer(Encoder_P2);					//Else clear Encoder Buffer
 800422e:	68b8      	ldr	r0, [r7, #8]
 8004230:	f7ff fd26 	bl	8003c80 <UI_Encoder_Reset_Rotary_Switch_Buffer>


		if(Interface_Contoll==Interface_Contoll_Soldering_Heat_Gun){				//Soldering_Heat_Gun manual temperature changing
 8004234:	7dfb      	ldrb	r3, [r7, #23]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d122      	bne.n	8004280 <Face_UI_it+0x114>
			if(Soldering_Heat_Gun_Get_State(&Soldering_Heat_Gun)!=Heat_Gun_OFF){	//Change Soldering_Heat_Gun Temperature if Soldering_Heat_Gun is turn ON
 800423a:	4856      	ldr	r0, [pc, #344]	; (8004394 <Face_UI_it+0x228>)
 800423c:	f7fe fe29 	bl	8002e92 <Soldering_Heat_Gun_Get_State>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d018      	beq.n	8004278 <Face_UI_it+0x10c>
				Soldering_Heat_Gun_Set_Manual_Preset_Temperature_C(
						(uint16_t)UI_Change_Value(Soldering_Heat_Gun_Get_Manual_Preset_Temperature_C(&Soldering_Heat_Gun), 5, UINT16, Soldering_Heat_Gun_MIN_Manual_Preset_Temperature_C, MAX_ADC_Value, Encoder_P1),
 8004246:	4853      	ldr	r0, [pc, #332]	; (8004394 <Face_UI_it+0x228>)
 8004248:	f7fe fe2f 	bl	8002eaa <Soldering_Heat_Gun_Get_Manual_Preset_Temperature_C>
 800424c:	4603      	mov	r3, r0
 800424e:	4618      	mov	r0, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	9301      	str	r3, [sp, #4]
 8004254:	f640 63d8 	movw	r3, #3800	; 0xed8
 8004258:	9300      	str	r3, [sp, #0]
 800425a:	2332      	movs	r3, #50	; 0x32
 800425c:	2202      	movs	r2, #2
 800425e:	2105      	movs	r1, #5
 8004260:	f7ff fcc6 	bl	8003bf0 <UI_Change_Value>
 8004264:	4603      	mov	r3, r0
				Soldering_Heat_Gun_Set_Manual_Preset_Temperature_C(
 8004266:	b29b      	uxth	r3, r3
 8004268:	494a      	ldr	r1, [pc, #296]	; (8004394 <Face_UI_it+0x228>)
 800426a:	4618      	mov	r0, r3
 800426c:	f7fe fdef 	bl	8002e4e <Soldering_Heat_Gun_Set_Manual_Preset_Temperature_C>
						&Soldering_Heat_Gun);
				Soldering_Heat_Gun_Set_Manual_Temperature(&Soldering_Heat_Gun);
 8004270:	4848      	ldr	r0, [pc, #288]	; (8004394 <Face_UI_it+0x228>)
 8004272:	f7fe fdbd 	bl	8002df0 <Soldering_Heat_Gun_Set_Manual_Temperature>
 8004276:	e025      	b.n	80042c4 <Face_UI_it+0x158>
			}
			else
				UI_Encoder_Reset_Rotary_Switch_Buffer(Encoder_P1);				//Else clear Encoder Buffer
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f7ff fd01 	bl	8003c80 <UI_Encoder_Reset_Rotary_Switch_Buffer>
 800427e:	e021      	b.n	80042c4 <Face_UI_it+0x158>
		}
		else{																		//Soldering_Separator manual temperature changing
			if(Soldering_Separator_Get_State(&Soldering_Separator)==Separator_ON){	//Change Soldering_Separator Temperature if Soldering_Separator is turn ON
 8004280:	4843      	ldr	r0, [pc, #268]	; (8004390 <Face_UI_it+0x224>)
 8004282:	f7fe ffc3 	bl	800320c <Soldering_Separator_Get_State>
 8004286:	4603      	mov	r3, r0
 8004288:	2b01      	cmp	r3, #1
 800428a:	d118      	bne.n	80042be <Face_UI_it+0x152>
				Soldering_Separator_Set_Manual_Preset_Temperature_C(
						(uint16_t)UI_Change_Value(Soldering_Separator_Get_Manual_Preset_Temperature_C(&Soldering_Separator), 5, UINT16, Soldering_Separator_MIN_Manual_Preset_Temperature_C, MAX_ADC_Value, Encoder_P1),
 800428c:	4840      	ldr	r0, [pc, #256]	; (8004390 <Face_UI_it+0x224>)
 800428e:	f7fe ffe5 	bl	800325c <Soldering_Separator_Get_Manual_Preset_Temperature_C>
 8004292:	4603      	mov	r3, r0
 8004294:	4618      	mov	r0, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	9301      	str	r3, [sp, #4]
 800429a:	f640 63d8 	movw	r3, #3800	; 0xed8
 800429e:	9300      	str	r3, [sp, #0]
 80042a0:	2332      	movs	r3, #50	; 0x32
 80042a2:	2202      	movs	r2, #2
 80042a4:	2105      	movs	r1, #5
 80042a6:	f7ff fca3 	bl	8003bf0 <UI_Change_Value>
 80042aa:	4603      	mov	r3, r0
				Soldering_Separator_Set_Manual_Preset_Temperature_C(
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	4938      	ldr	r1, [pc, #224]	; (8004390 <Face_UI_it+0x224>)
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7fe ff99 	bl	80031e8 <Soldering_Separator_Set_Manual_Preset_Temperature_C>
						&Soldering_Separator);
				Soldering_Separator_Set_Manual_Temperature(&Soldering_Separator);
 80042b6:	4836      	ldr	r0, [pc, #216]	; (8004390 <Face_UI_it+0x224>)
 80042b8:	f7fe ff67 	bl	800318a <Soldering_Separator_Set_Manual_Temperature>
 80042bc:	e002      	b.n	80042c4 <Face_UI_it+0x158>
			}
			else
				UI_Encoder_Reset_Rotary_Switch_Buffer(Encoder_P1);					//Else clear Encoder Buffer
 80042be:	68f8      	ldr	r0, [r7, #12]
 80042c0:	f7ff fcde 	bl	8003c80 <UI_Encoder_Reset_Rotary_Switch_Buffer>
		}


		if(Encoder_Get_Button_State(Encoder_P2)==Encoder_Button_Short){                 //Solder_Iron_ON/OFF
 80042c4:	68b8      	ldr	r0, [r7, #8]
 80042c6:	f7fd f81a 	bl	80012fe <Encoder_Get_Button_State>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d10f      	bne.n	80042f0 <Face_UI_it+0x184>
			UI_Encoder_Reset_Button_State(Encoder_P2);									//Clear Encoder Buffer
 80042d0:	68b8      	ldr	r0, [r7, #8]
 80042d2:	f7ff fce0 	bl	8003c96 <UI_Encoder_Reset_Button_State>
			if(Solder_Iron_Get_State(&Soldering_Iron)==Soldering_Iron_OFF){				//Switch Solder_Iron state
 80042d6:	4830      	ldr	r0, [pc, #192]	; (8004398 <Face_UI_it+0x22c>)
 80042d8:	f7fe fc13 	bl	8002b02 <Solder_Iron_Get_State>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d103      	bne.n	80042ea <Face_UI_it+0x17e>
				Solder_Iron_ON(&Soldering_Iron);
 80042e2:	482d      	ldr	r0, [pc, #180]	; (8004398 <Face_UI_it+0x22c>)
 80042e4:	f7fe fb0c 	bl	8002900 <Solder_Iron_ON>
 80042e8:	e002      	b.n	80042f0 <Face_UI_it+0x184>
			}else{
				Solder_Iron_OFF(&Soldering_Iron);
 80042ea:	482b      	ldr	r0, [pc, #172]	; (8004398 <Face_UI_it+0x22c>)
 80042ec:	f7fe fb1e 	bl	800292c <Solder_Iron_OFF>
			}
		}

		if(Encoder_Get_Button_State(Encoder_P1)==Encoder_Button_Short&&Interface_Contoll==Interface_Contoll_Soldering_Heat_Gun){			//Soldering_Heat_Gun_ON/OFF
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	f7fd f804 	bl	80012fe <Encoder_Get_Button_State>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d113      	bne.n	8004324 <Face_UI_it+0x1b8>
 80042fc:	7dfb      	ldrb	r3, [r7, #23]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d110      	bne.n	8004324 <Face_UI_it+0x1b8>
			UI_Encoder_Reset_Button_State(Encoder_P1);								//Clear Encoder Buffer
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f7ff fcc7 	bl	8003c96 <UI_Encoder_Reset_Button_State>
			if(Soldering_Heat_Gun_Get_State(&Soldering_Heat_Gun)!=Heat_Gun_ON)		//Switch Soldering_Heat_Gun state
 8004308:	4822      	ldr	r0, [pc, #136]	; (8004394 <Face_UI_it+0x228>)
 800430a:	f7fe fdc2 	bl	8002e92 <Soldering_Heat_Gun_Get_State>
 800430e:	4603      	mov	r3, r0
 8004310:	2b01      	cmp	r3, #1
 8004312:	d003      	beq.n	800431c <Face_UI_it+0x1b0>
				Soldering_Heat_Gun_ON(&Soldering_Heat_Gun);
 8004314:	481f      	ldr	r0, [pc, #124]	; (8004394 <Face_UI_it+0x228>)
 8004316:	f7fe fcc1 	bl	8002c9c <Soldering_Heat_Gun_ON>
			if(Soldering_Heat_Gun_Get_State(&Soldering_Heat_Gun)!=Heat_Gun_ON)		//Switch Soldering_Heat_Gun state
 800431a:	e01c      	b.n	8004356 <Face_UI_it+0x1ea>
			else
				Soldering_Heat_Gun_OFF(&Soldering_Heat_Gun);
 800431c:	481d      	ldr	r0, [pc, #116]	; (8004394 <Face_UI_it+0x228>)
 800431e:	f7fe fceb 	bl	8002cf8 <Soldering_Heat_Gun_OFF>
			if(Soldering_Heat_Gun_Get_State(&Soldering_Heat_Gun)!=Heat_Gun_ON)		//Switch Soldering_Heat_Gun state
 8004322:	e018      	b.n	8004356 <Face_UI_it+0x1ea>
		}
		else if(Encoder_Get_Button_State(Encoder_P1)==Encoder_Button_Short&&Interface_Contoll==Interface_Contoll_Soldering_Separator){		//Soldering_Separator_ON/OFF
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f7fc ffea 	bl	80012fe <Encoder_Get_Button_State>
 800432a:	4603      	mov	r3, r0
 800432c:	2b02      	cmp	r3, #2
 800432e:	d112      	bne.n	8004356 <Face_UI_it+0x1ea>
 8004330:	7dfb      	ldrb	r3, [r7, #23]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d10f      	bne.n	8004356 <Face_UI_it+0x1ea>
			UI_Encoder_Reset_Button_State(Encoder_P1);								//Clear Encoder Buffer
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f7ff fcad 	bl	8003c96 <UI_Encoder_Reset_Button_State>
				if(Soldering_Separator_Get_State(&Soldering_Separator)!=Separator_ON)
 800433c:	4814      	ldr	r0, [pc, #80]	; (8004390 <Face_UI_it+0x224>)
 800433e:	f7fe ff65 	bl	800320c <Soldering_Separator_Get_State>
 8004342:	4603      	mov	r3, r0
 8004344:	2b01      	cmp	r3, #1
 8004346:	d003      	beq.n	8004350 <Face_UI_it+0x1e4>
					Soldering_Separator_ON(&Soldering_Separator);
 8004348:	4811      	ldr	r0, [pc, #68]	; (8004390 <Face_UI_it+0x224>)
 800434a:	f7fe fec1 	bl	80030d0 <Soldering_Separator_ON>
 800434e:	e002      	b.n	8004356 <Face_UI_it+0x1ea>
				else
					Soldering_Separator_OFF(&Soldering_Separator);
 8004350:	480f      	ldr	r0, [pc, #60]	; (8004390 <Face_UI_it+0x224>)
 8004352:	f7fe fed7 	bl	8003104 <Soldering_Separator_OFF>
		}
		Face_UI_Draw_Parameters_List();
 8004356:	f7ff fd2f 	bl	8003db8 <Face_UI_Draw_Parameters_List>

	}while(Encoder_Get_Button_State(Encoder_P2)!=Encoder_Button_long); //Exit from Face_Ui
 800435a:	68b8      	ldr	r0, [r7, #8]
 800435c:	f7fc ffcf 	bl	80012fe <Encoder_Get_Button_State>
 8004360:	4603      	mov	r3, r0
 8004362:	2b03      	cmp	r3, #3
 8004364:	f47f af17 	bne.w	8004196 <Face_UI_it+0x2a>

	Solder_Iron_OFF(&Soldering_Iron);				//Turn OFF ALL Devices
 8004368:	480b      	ldr	r0, [pc, #44]	; (8004398 <Face_UI_it+0x22c>)
 800436a:	f7fe fadf 	bl	800292c <Solder_Iron_OFF>
	Soldering_Heat_Gun_OFF(&Soldering_Heat_Gun);
 800436e:	4809      	ldr	r0, [pc, #36]	; (8004394 <Face_UI_it+0x228>)
 8004370:	f7fe fcc2 	bl	8002cf8 <Soldering_Heat_Gun_OFF>
	Soldering_Separator_OFF(&Soldering_Separator);
 8004374:	4806      	ldr	r0, [pc, #24]	; (8004390 <Face_UI_it+0x224>)
 8004376:	f7fe fec5 	bl	8003104 <Soldering_Separator_OFF>

	UI_Encoder_Reset_Button_State(Encoder_P2);		//Reset Encoders buffer state
 800437a:	68b8      	ldr	r0, [r7, #8]
 800437c:	f7ff fc8b 	bl	8003c96 <UI_Encoder_Reset_Button_State>
	UI_Encoder_Reset_Button_State(Encoder_P1);
 8004380:	68f8      	ldr	r0, [r7, #12]
 8004382:	f7ff fc88 	bl	8003c96 <UI_Encoder_Reset_Button_State>
}
 8004386:	bf00      	nop
 8004388:	3718      	adds	r7, #24
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	200006a8 	.word	0x200006a8
 8004394:	2000060c 	.word	0x2000060c
 8004398:	20000560 	.word	0x20000560
 800439c:	0800b190 	.word	0x0800b190
 80043a0:	0800b19c 	.word	0x0800b19c
 80043a4:	200005dc 	.word	0x200005dc

080043a8 <Menu_List_Element_Draw>:
#include "UI_Menu.h"

//--------------------------------------------------------------------------------------------------------------------------------------------------------
void Menu_List_Element_Draw(struct Menu_List_Element_Vector *self, uint8_t y){
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	460b      	mov	r3, r1
 80043b2:	70fb      	strb	r3, [r7, #3]
	/**
	 * Draw line with name and value of parameter
	 */
	UI_Clear_Line(y);
 80043b4:	78fb      	ldrb	r3, [r7, #3]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7ff fb5a 	bl	8003a70 <UI_Clear_Line>
	UI_Draw_String(self->name, 1, y, Direct_Display_MODE);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6898      	ldr	r0, [r3, #8]
 80043c0:	78fa      	ldrb	r2, [r7, #3]
 80043c2:	2300      	movs	r3, #0
 80043c4:	2101      	movs	r1, #1
 80043c6:	f7ff fb03 	bl	80039d0 <UI_Draw_String>
	UI_Draw_Parmetr_Ptr(self->parametr, 16, y, self->mode);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6918      	ldr	r0, [r3, #16]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	7b1b      	ldrb	r3, [r3, #12]
 80043d2:	78fa      	ldrb	r2, [r7, #3]
 80043d4:	2110      	movs	r1, #16
 80043d6:	f7ff f947 	bl	8003668 <UI_Draw_Parmetr_Ptr>
}
 80043da:	bf00      	nop
 80043dc:	3708      	adds	r7, #8
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <Menu_List_Element_Vector_Draw>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void Menu_List_Element_Vector_Draw(struct Menu_List_Element_Vector *self, uint8_t start_point, uint8_t quantity){
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b084      	sub	sp, #16
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
 80043ea:	460b      	mov	r3, r1
 80043ec:	70fb      	strb	r3, [r7, #3]
 80043ee:	4613      	mov	r3, r2
 80043f0:	70bb      	strb	r3, [r7, #2]
	/**
	 * Draw all  Menu_List_Element from start point ID of Menu_List_Element_Vector to start point + quantity
	 */
	while(self->ID!=start_point)		//skip to start point
 80043f2:	e002      	b.n	80043fa <Menu_List_Element_Vector_Draw+0x18>
		self=self->next;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	607b      	str	r3, [r7, #4]
	while(self->ID!=start_point)		//skip to start point
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	791b      	ldrb	r3, [r3, #4]
 80043fe:	78fa      	ldrb	r2, [r7, #3]
 8004400:	429a      	cmp	r2, r3
 8004402:	d1f7      	bne.n	80043f4 <Menu_List_Element_Vector_Draw+0x12>
	for(uint8_t i=0;i<quantity;i++){
 8004404:	2300      	movs	r3, #0
 8004406:	73fb      	strb	r3, [r7, #15]
 8004408:	e016      	b.n	8004438 <Menu_List_Element_Vector_Draw+0x56>
		if(self!=NULL){																//if Menu_List_Element was created
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00a      	beq.n	8004426 <Menu_List_Element_Vector_Draw+0x44>
			Menu_List_Element_Draw(self, i+Menu_List_Element_Vector_Draw_Shift);	//draw it based on position
 8004410:	7bfb      	ldrb	r3, [r7, #15]
 8004412:	3301      	adds	r3, #1
 8004414:	b2db      	uxtb	r3, r3
 8004416:	4619      	mov	r1, r3
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f7ff ffc5 	bl	80043a8 <Menu_List_Element_Draw>
			self=self->next;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	607b      	str	r3, [r7, #4]
 8004424:	e005      	b.n	8004432 <Menu_List_Element_Vector_Draw+0x50>
		}
		else																		//else
			UI_Clear_Line(i+Menu_List_Element_Vector_Draw_Shift);					//clear it's based on line position
 8004426:	7bfb      	ldrb	r3, [r7, #15]
 8004428:	3301      	adds	r3, #1
 800442a:	b2db      	uxtb	r3, r3
 800442c:	4618      	mov	r0, r3
 800442e:	f7ff fb1f 	bl	8003a70 <UI_Clear_Line>
	for(uint8_t i=0;i<quantity;i++){
 8004432:	7bfb      	ldrb	r3, [r7, #15]
 8004434:	3301      	adds	r3, #1
 8004436:	73fb      	strb	r3, [r7, #15]
 8004438:	7bfa      	ldrb	r2, [r7, #15]
 800443a:	78bb      	ldrb	r3, [r7, #2]
 800443c:	429a      	cmp	r2, r3
 800443e:	d3e4      	bcc.n	800440a <Menu_List_Element_Vector_Draw+0x28>
	}
}
 8004440:	bf00      	nop
 8004442:	bf00      	nop
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <Menu_List_Vector_Size>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
uint8_t Menu_List_Vector_Size(struct Menu_List_Element_Vector *self){
 800444a:	b480      	push	{r7}
 800444c:	b085      	sub	sp, #20
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
	/**
	 * Return quantity of elements in  Menu_List_Element_Vector
	 */
	uint8_t MAX_ID=0;
 8004452:	2300      	movs	r3, #0
 8004454:	73fb      	strb	r3, [r7, #15]
	while(self->next!=NULL){
 8004456:	e005      	b.n	8004464 <Menu_List_Vector_Size+0x1a>
			self=self->next;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	607b      	str	r3, [r7, #4]
			MAX_ID++;
 800445e:	7bfb      	ldrb	r3, [r7, #15]
 8004460:	3301      	adds	r3, #1
 8004462:	73fb      	strb	r3, [r7, #15]
	while(self->next!=NULL){
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1f5      	bne.n	8004458 <Menu_List_Vector_Size+0xe>
	}
	return MAX_ID++;
 800446c:	7bfb      	ldrb	r3, [r7, #15]
 800446e:	1c5a      	adds	r2, r3, #1
 8004470:	73fa      	strb	r2, [r7, #15]
}
 8004472:	4618      	mov	r0, r3
 8004474:	3714      	adds	r7, #20
 8004476:	46bd      	mov	sp, r7
 8004478:	bc80      	pop	{r7}
 800447a:	4770      	bx	lr

0800447c <Get_Prescaler>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
uint8_t Get_Prescaler(struct Button_Vector *Button_Vector){
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
	/**
	 *	Return number based on witch buttons are pressed
	 *	x1 x2 x5 x10
	 */
	struct Button_Vector *now=Button_Vector;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	60fb      	str	r3, [r7, #12]

	static  uint8_t Button_State=0;											//Every bit of Button_State contain local button state (Turn OFF or ON)
	uint8_t Prescaler=1;
 8004488:	2301      	movs	r3, #1
 800448a:	72fb      	strb	r3, [r7, #11]
	do{
		if(Button_Get_Event_State(now->Button)){							//If Button Event
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	4618      	mov	r0, r3
 8004492:	f7fc ff02 	bl	800129a <Button_Get_Event_State>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d02a      	beq.n	80044f2 <Get_Prescaler+0x76>
			switch(now->Button->ID){										//Check button ID
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d002      	beq.n	80044ac <Get_Prescaler+0x30>
 80044a6:	2b03      	cmp	r3, #3
 80044a8:	d010      	beq.n	80044cc <Get_Prescaler+0x50>
 80044aa:	e022      	b.n	80044f2 <Get_Prescaler+0x76>
				case X2_Modefire_Button_ID:
					if(Button_Get_Pin_State(now->Button)==GPIO_PIN_RESET){	//If Falling edge
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7fc fedf 	bl	8001274 <Button_Get_Pin_State>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d117      	bne.n	80044ec <Get_Prescaler+0x70>
						Button_State^=0x02;									//Toggle state bit
 80044bc:	4b1c      	ldr	r3, [pc, #112]	; (8004530 <Get_Prescaler+0xb4>)
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	f083 0302 	eor.w	r3, r3, #2
 80044c4:	b2da      	uxtb	r2, r3
 80044c6:	4b1a      	ldr	r3, [pc, #104]	; (8004530 <Get_Prescaler+0xb4>)
 80044c8:	701a      	strb	r2, [r3, #0]
					}
				break;
 80044ca:	e00f      	b.n	80044ec <Get_Prescaler+0x70>
				case X5_Modefire_Button_ID:
					if(Button_Get_Pin_State(now->Button)==GPIO_PIN_RESET){	//If Falling edge
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	4618      	mov	r0, r3
 80044d2:	f7fc fecf 	bl	8001274 <Button_Get_Pin_State>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d109      	bne.n	80044f0 <Get_Prescaler+0x74>
						Button_State^=0x01;									//Toggle state bit
 80044dc:	4b14      	ldr	r3, [pc, #80]	; (8004530 <Get_Prescaler+0xb4>)
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	f083 0301 	eor.w	r3, r3, #1
 80044e4:	b2da      	uxtb	r2, r3
 80044e6:	4b12      	ldr	r3, [pc, #72]	; (8004530 <Get_Prescaler+0xb4>)
 80044e8:	701a      	strb	r2, [r3, #0]
					}
				break;
 80044ea:	e001      	b.n	80044f0 <Get_Prescaler+0x74>
				break;
 80044ec:	bf00      	nop
 80044ee:	e000      	b.n	80044f2 <Get_Prescaler+0x76>
				break;
 80044f0:	bf00      	nop
			}
		}
		now=now->next;														//Go to next button
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	60fb      	str	r3, [r7, #12]
	}while(now!=NULL);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1c6      	bne.n	800448c <Get_Prescaler+0x10>

	if((Button_State&0x02)!=0)												//Set value based on Button_State
 80044fe:	4b0c      	ldr	r3, [pc, #48]	; (8004530 <Get_Prescaler+0xb4>)
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d002      	beq.n	8004510 <Get_Prescaler+0x94>
		Prescaler*=2;
 800450a:	7afb      	ldrb	r3, [r7, #11]
 800450c:	005b      	lsls	r3, r3, #1
 800450e:	72fb      	strb	r3, [r7, #11]
	if((Button_State&0x01)!=0)
 8004510:	4b07      	ldr	r3, [pc, #28]	; (8004530 <Get_Prescaler+0xb4>)
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	f003 0301 	and.w	r3, r3, #1
 8004518:	2b00      	cmp	r3, #0
 800451a:	d004      	beq.n	8004526 <Get_Prescaler+0xaa>
		Prescaler*=5;
 800451c:	7afb      	ldrb	r3, [r7, #11]
 800451e:	461a      	mov	r2, r3
 8004520:	0092      	lsls	r2, r2, #2
 8004522:	4413      	add	r3, r2
 8004524:	72fb      	strb	r3, [r7, #11]

	return Prescaler;														//Return value
 8004526:	7afb      	ldrb	r3, [r7, #11]
}
 8004528:	4618      	mov	r0, r3
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	200002b7 	.word	0x200002b7

08004534 <Menu_List_Element_Value_Change>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void Menu_List_Element_Value_Change(struct Menu_List_Element_Vector *self, uint8_t y, struct Encoder *Encoder, struct Button_Vector *Button_Vector){
 8004534:	b5b0      	push	{r4, r5, r7, lr}
 8004536:	b086      	sub	sp, #24
 8004538:	af02      	add	r7, sp, #8
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	607a      	str	r2, [r7, #4]
 800453e:	603b      	str	r3, [r7, #0]
 8004540:	460b      	mov	r3, r1
 8004542:	72fb      	strb	r3, [r7, #11]
	/**
	 *	Changing value of Menu_List_Element and drawing it's value until encoder Button state not Encoder_Button_long
	 */
	UI_Encoder_Reset_Button_State(Encoder);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f7ff fba6 	bl	8003c96 <UI_Encoder_Reset_Button_State>

	UI_Set_Cursor(Menu_List_Element_Vector_Cursor_x-1, y);																//SET CURSOR ON VALUE
 800454a:	7afb      	ldrb	r3, [r7, #11]
 800454c:	4619      	mov	r1, r3
 800454e:	200f      	movs	r0, #15
 8004550:	f7ff fa5e 	bl	8003a10 <UI_Set_Cursor>
	while(Encoder_Get_Button_State(Encoder)!=Encoder_Button_long){
 8004554:	e01d      	b.n	8004592 <Menu_List_Element_Value_Change+0x5e>
		UI_Change_Value_Ptr(self->parametr, (self->step)*Get_Prescaler(Button_Vector), self->mode, 0, 65535, Encoder);	//Changing value
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	691d      	ldr	r5, [r3, #16]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	7b5c      	ldrb	r4, [r3, #13]
 800455e:	6838      	ldr	r0, [r7, #0]
 8004560:	f7ff ff8c 	bl	800447c <Get_Prescaler>
 8004564:	4603      	mov	r3, r0
 8004566:	fb04 f303 	mul.w	r3, r4, r3
 800456a:	b2d9      	uxtb	r1, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	7b1a      	ldrb	r2, [r3, #12]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	9301      	str	r3, [sp, #4]
 8004574:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004578:	9300      	str	r3, [sp, #0]
 800457a:	2300      	movs	r3, #0
 800457c:	4628      	mov	r0, r5
 800457e:	f7ff fa87 	bl	8003a90 <UI_Change_Value_Ptr>
		UI_Draw_Parmetr_Ptr(self->parametr, Menu_List_Element_Vector_Cursor_x, y, self->mode);							//Draw value
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6918      	ldr	r0, [r3, #16]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	7b1b      	ldrb	r3, [r3, #12]
 800458a:	7afa      	ldrb	r2, [r7, #11]
 800458c:	2110      	movs	r1, #16
 800458e:	f7ff f86b 	bl	8003668 <UI_Draw_Parmetr_Ptr>
	while(Encoder_Get_Button_State(Encoder)!=Encoder_Button_long){
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f7fc feb3 	bl	80012fe <Encoder_Get_Button_State>
 8004598:	4603      	mov	r3, r0
 800459a:	2b03      	cmp	r3, #3
 800459c:	d1db      	bne.n	8004556 <Menu_List_Element_Value_Change+0x22>
	}
	UI_Encoder_Reset_Button_State(Encoder);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f7ff fb79 	bl	8003c96 <UI_Encoder_Reset_Button_State>

}
 80045a4:	bf00      	nop
 80045a6:	3710      	adds	r7, #16
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bdb0      	pop	{r4, r5, r7, pc}

080045ac <UI_Menu_List_Element_Vector_it>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void UI_Menu_List_Element_Vector_it(struct Menu_List_Element_Vector *self, char *Name, struct Encoder *Encoder, struct Button_Vector *Button_Vector){
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b088      	sub	sp, #32
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]
 80045b8:	603b      	str	r3, [r7, #0]
	/**
	 * 	Display name, value of each element of current vector and can change value based on Type..... until Encoder button != Encoder_Button_long
	 *
	 */

	int Menu_Count=0,Menu_Count_Prew=255;				//Menu_Count current menu options, Menu_Count_Prew=255 needed to draw menu at first iteration
 80045ba:	2300      	movs	r3, #0
 80045bc:	61fb      	str	r3, [r7, #28]
 80045be:	23ff      	movs	r3, #255	; 0xff
 80045c0:	61bb      	str	r3, [r7, #24]
	uint8_t MAX_ID=Menu_List_Vector_Size(self);			//Get max size of vector
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	f7ff ff41 	bl	800444a <Menu_List_Vector_Size>
 80045c8:	4603      	mov	r3, r0
 80045ca:	74fb      	strb	r3, [r7, #19]

	UI_Encoder_Reset_Button_State(Encoder);				//Reset encoder button state
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f7ff fb62 	bl	8003c96 <UI_Encoder_Reset_Button_State>
	UI_Draw_String_Center(Name, 0, Inverse_Display_MODE);	//Draw Submenu name
 80045d2:	2201      	movs	r2, #1
 80045d4:	2100      	movs	r1, #0
 80045d6:	68b8      	ldr	r0, [r7, #8]
 80045d8:	f7ff fb28 	bl	8003c2c <UI_Draw_String_Center>
	UI_Set_Cursor(0, Menu_Count% (Draw_LIMIT-Menu_List_Element_Vector_Draw_Shift)+Menu_List_Element_Vector_Draw_Shift);	//Set cursor to first element based on shift
 80045dc:	69fa      	ldr	r2, [r7, #28]
 80045de:	4b57      	ldr	r3, [pc, #348]	; (800473c <UI_Menu_List_Element_Vector_it+0x190>)
 80045e0:	fb83 1302 	smull	r1, r3, r3, r2
 80045e4:	4413      	add	r3, r2
 80045e6:	1099      	asrs	r1, r3, #2
 80045e8:	17d3      	asrs	r3, r2, #31
 80045ea:	1ac9      	subs	r1, r1, r3
 80045ec:	460b      	mov	r3, r1
 80045ee:	00db      	lsls	r3, r3, #3
 80045f0:	1a5b      	subs	r3, r3, r1
 80045f2:	1ad1      	subs	r1, r2, r3
 80045f4:	b2cb      	uxtb	r3, r1
 80045f6:	3301      	adds	r3, #1
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	4619      	mov	r1, r3
 80045fc:	2000      	movs	r0, #0
 80045fe:	f7ff fa07 	bl	8003a10 <UI_Set_Cursor>

	while(Encoder_Get_Button_State(Encoder)!=Encoder_Button_long){	//Main body which	contain main logic work with Menu_List_Element_Vector
 8004602:	e08f      	b.n	8004724 <UI_Menu_List_Element_Vector_it+0x178>

		Menu_Count+= Encoder_Get_Rotary_Switch_Buffer(Encoder);		//Get Menu_Count based on Rotary_Switch_Buffer
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f7fc fe62 	bl	80012ce <Encoder_Get_Rotary_Switch_Buffer>
 800460a:	4602      	mov	r2, r0
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	4413      	add	r3, r2
 8004610:	61fb      	str	r3, [r7, #28]
		Encoder_Reset_Rotary_Switch_Buffer(Encoder);				//Reset  Rotary_Switch_Buffer
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f7fc fe4f 	bl	80012b6 <Encoder_Reset_Rotary_Switch_Buffer>

		if(Menu_Count<0)											//Check if current Menu_Count is more than 0 and less than size of vector
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	2b00      	cmp	r3, #0
 800461c:	da02      	bge.n	8004624 <UI_Menu_List_Element_Vector_it+0x78>
			Menu_Count=0;
 800461e:	2300      	movs	r3, #0
 8004620:	61fb      	str	r3, [r7, #28]
 8004622:	e005      	b.n	8004630 <UI_Menu_List_Element_Vector_it+0x84>
		else if(Menu_Count>MAX_ID)
 8004624:	7cfb      	ldrb	r3, [r7, #19]
 8004626:	69fa      	ldr	r2, [r7, #28]
 8004628:	429a      	cmp	r2, r3
 800462a:	dd01      	ble.n	8004630 <UI_Menu_List_Element_Vector_it+0x84>
			Menu_Count=MAX_ID;
 800462c:	7cfb      	ldrb	r3, [r7, #19]
 800462e:	61fb      	str	r3, [r7, #28]

		if(Menu_Count_Prew!=Menu_Count){							//if Menu_Count was changed
 8004630:	69ba      	ldr	r2, [r7, #24]
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	429a      	cmp	r2, r3
 8004636:	d038      	beq.n	80046aa <UI_Menu_List_Element_Vector_it+0xfe>
			if(((Menu_Count/(Draw_LIMIT-Menu_List_Element_Vector_Draw_Shift))*(Draw_LIMIT-Menu_List_Element_Vector_Draw_Shift))!=((Menu_Count_Prew/(Draw_LIMIT-Menu_List_Element_Vector_Draw_Shift))*(Draw_LIMIT-Menu_List_Element_Vector_Draw_Shift)))
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	4a40      	ldr	r2, [pc, #256]	; (800473c <UI_Menu_List_Element_Vector_it+0x190>)
 800463c:	fb82 1203 	smull	r1, r2, r2, r3
 8004640:	441a      	add	r2, r3
 8004642:	1092      	asrs	r2, r2, #2
 8004644:	17db      	asrs	r3, r3, #31
 8004646:	1ad2      	subs	r2, r2, r3
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	493c      	ldr	r1, [pc, #240]	; (800473c <UI_Menu_List_Element_Vector_it+0x190>)
 800464c:	fb81 0103 	smull	r0, r1, r1, r3
 8004650:	4419      	add	r1, r3
 8004652:	1089      	asrs	r1, r1, #2
 8004654:	17db      	asrs	r3, r3, #31
 8004656:	1acb      	subs	r3, r1, r3
 8004658:	429a      	cmp	r2, r3
 800465a:	d011      	beq.n	8004680 <UI_Menu_List_Element_Vector_it+0xd4>
				// if Menu_Count more than quantity of rows on display than redraw new page with next names and values based on vector
				Menu_List_Element_Vector_Draw(self, (uint8_t)(Menu_Count/(Draw_LIMIT-Menu_List_Element_Vector_Draw_Shift))*(Draw_LIMIT-Menu_List_Element_Vector_Draw_Shift), Draw_LIMIT-Menu_List_Element_Vector_Draw_Shift);
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	4a37      	ldr	r2, [pc, #220]	; (800473c <UI_Menu_List_Element_Vector_it+0x190>)
 8004660:	fb82 1203 	smull	r1, r2, r2, r3
 8004664:	441a      	add	r2, r3
 8004666:	1092      	asrs	r2, r2, #2
 8004668:	17db      	asrs	r3, r3, #31
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	b2db      	uxtb	r3, r3
 800466e:	461a      	mov	r2, r3
 8004670:	00d2      	lsls	r2, r2, #3
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2207      	movs	r2, #7
 8004678:	4619      	mov	r1, r3
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f7ff feb1 	bl	80043e2 <Menu_List_Element_Vector_Draw>
			UI_Set_Cursor(0, Menu_Count% (Draw_LIMIT-Menu_List_Element_Vector_Draw_Shift)+Menu_List_Element_Vector_Draw_Shift);	//Change cursor position every time
 8004680:	69fa      	ldr	r2, [r7, #28]
 8004682:	4b2e      	ldr	r3, [pc, #184]	; (800473c <UI_Menu_List_Element_Vector_it+0x190>)
 8004684:	fb83 1302 	smull	r1, r3, r3, r2
 8004688:	4413      	add	r3, r2
 800468a:	1099      	asrs	r1, r3, #2
 800468c:	17d3      	asrs	r3, r2, #31
 800468e:	1ac9      	subs	r1, r1, r3
 8004690:	460b      	mov	r3, r1
 8004692:	00db      	lsls	r3, r3, #3
 8004694:	1a5b      	subs	r3, r3, r1
 8004696:	1ad1      	subs	r1, r2, r3
 8004698:	b2cb      	uxtb	r3, r1
 800469a:	3301      	adds	r3, #1
 800469c:	b2db      	uxtb	r3, r3
 800469e:	4619      	mov	r1, r3
 80046a0:	2000      	movs	r0, #0
 80046a2:	f7ff f9b5 	bl	8003a10 <UI_Set_Cursor>
			Menu_Count_Prew=Menu_Count;
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	61bb      	str	r3, [r7, #24]
		}

		if(Encoder_Get_Button_State(Encoder)==Encoder_Button_Short){	//If encoder button was pressed
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f7fc fe27 	bl	80012fe <Encoder_Get_Button_State>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d136      	bne.n	8004724 <UI_Menu_List_Element_Vector_it+0x178>
			struct Menu_List_Element_Vector *now;
			now=self;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	617b      	str	r3, [r7, #20]
			while(now->ID!=Menu_Count){				//skip to Menu_List_Element which ID is equal to Menu_Count
 80046ba:	e002      	b.n	80046c2 <UI_Menu_List_Element_Vector_it+0x116>
				now=now->next;
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	617b      	str	r3, [r7, #20]
			while(now->ID!=Menu_Count){				//skip to Menu_List_Element which ID is equal to Menu_Count
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	791b      	ldrb	r3, [r3, #4]
 80046c6:	461a      	mov	r2, r3
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d1f6      	bne.n	80046bc <UI_Menu_List_Element_Vector_it+0x110>
			}
			Menu_List_Element_Value_Change(now, now->ID% (Draw_LIMIT-Menu_List_Element_Vector_Draw_Shift)+Menu_List_Element_Vector_Draw_Shift, Encoder, Button_Vector);
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	791a      	ldrb	r2, [r3, #4]
 80046d2:	4b1b      	ldr	r3, [pc, #108]	; (8004740 <UI_Menu_List_Element_Vector_it+0x194>)
 80046d4:	fba3 1302 	umull	r1, r3, r3, r2
 80046d8:	1ad1      	subs	r1, r2, r3
 80046da:	0849      	lsrs	r1, r1, #1
 80046dc:	440b      	add	r3, r1
 80046de:	0899      	lsrs	r1, r3, #2
 80046e0:	460b      	mov	r3, r1
 80046e2:	00db      	lsls	r3, r3, #3
 80046e4:	1a5b      	subs	r3, r3, r1
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	3301      	adds	r3, #1
 80046ec:	b2d9      	uxtb	r1, r3
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	6978      	ldr	r0, [r7, #20]
 80046f4:	f7ff ff1e 	bl	8004534 <Menu_List_Element_Value_Change>
			//change value
			UI_Set_Cursor(0, Menu_Count% (Draw_LIMIT-Menu_List_Element_Vector_Draw_Shift)+Menu_List_Element_Vector_Draw_Shift);	//Return cursor
 80046f8:	69fa      	ldr	r2, [r7, #28]
 80046fa:	4b10      	ldr	r3, [pc, #64]	; (800473c <UI_Menu_List_Element_Vector_it+0x190>)
 80046fc:	fb83 1302 	smull	r1, r3, r3, r2
 8004700:	4413      	add	r3, r2
 8004702:	1099      	asrs	r1, r3, #2
 8004704:	17d3      	asrs	r3, r2, #31
 8004706:	1ac9      	subs	r1, r1, r3
 8004708:	460b      	mov	r3, r1
 800470a:	00db      	lsls	r3, r3, #3
 800470c:	1a5b      	subs	r3, r3, r1
 800470e:	1ad1      	subs	r1, r2, r3
 8004710:	b2cb      	uxtb	r3, r1
 8004712:	3301      	adds	r3, #1
 8004714:	b2db      	uxtb	r3, r3
 8004716:	4619      	mov	r1, r3
 8004718:	2000      	movs	r0, #0
 800471a:	f7ff f979 	bl	8003a10 <UI_Set_Cursor>
			UI_Encoder_Reset_Button_State(Encoder);		//Reset encoder button state
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f7ff fab9 	bl	8003c96 <UI_Encoder_Reset_Button_State>
	while(Encoder_Get_Button_State(Encoder)!=Encoder_Button_long){	//Main body which	contain main logic work with Menu_List_Element_Vector
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f7fc fdea 	bl	80012fe <Encoder_Get_Button_State>
 800472a:	4603      	mov	r3, r0
 800472c:	2b03      	cmp	r3, #3
 800472e:	f47f af69 	bne.w	8004604 <UI_Menu_List_Element_Vector_it+0x58>
		}
	}
}
 8004732:	bf00      	nop
 8004734:	bf00      	nop
 8004736:	3720      	adds	r7, #32
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	92492493 	.word	0x92492493
 8004740:	24924925 	.word	0x24924925

08004744 <UI_Menu_List_Element_Create>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void UI_Menu_List_Element_Create(struct Menu_List_Element_Vector *head,struct Menu_List_Element_Vector *ini_element){
 8004744:	b5b0      	push	{r4, r5, r7, lr}
 8004746:	b086      	sub	sp, #24
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
	/**
	 * Add a new element to enu_List_Element_Vector based on copy of ini_element
	 */
	char *st= malloc((sizeof(char)*(strlen(ini_element->name)+1)));
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	4618      	mov	r0, r3
 8004754:	f7fb fcfc 	bl	8000150 <strlen>
 8004758:	4603      	mov	r3, r0
 800475a:	3301      	adds	r3, #1
 800475c:	4618      	mov	r0, r3
 800475e:	f006 fb8b 	bl	800ae78 <malloc>
 8004762:	4603      	mov	r3, r0
 8004764:	613b      	str	r3, [r7, #16]
	strcpy(st,ini_element->name);
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	4619      	mov	r1, r3
 800476c:	6938      	ldr	r0, [r7, #16]
 800476e:	f006 fc83 	bl	800b078 <strcpy>
	if(head->parametr==NULL){				//If Head have not any data
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d10e      	bne.n	8004798 <UI_Menu_List_Element_Create+0x54>
		*head=*ini_element;					//Head
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	4614      	mov	r4, r2
 8004780:	461d      	mov	r5, r3
 8004782:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004784:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004786:	682b      	ldr	r3, [r5, #0]
 8004788:	6023      	str	r3, [r4, #0]
		head->ID=0;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	711a      	strb	r2, [r3, #4]
		head->next=NULL;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	601a      	str	r2, [r3, #0]
			NEW_Element->ID++;
		}
		NEW_Element->ID++;
		now->next=NEW_Element;																			//pointer to a next element pointing to a new element
	}
}
 8004796:	e02c      	b.n	80047f2 <UI_Menu_List_Element_Create+0xae>
		struct Menu_List_Element_Vector *now=head;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	617b      	str	r3, [r7, #20]
		struct Menu_List_Element_Vector *NEW_Element= malloc(sizeof(struct Menu_List_Element_Vector));	//Create new element
 800479c:	2014      	movs	r0, #20
 800479e:	f006 fb6b 	bl	800ae78 <malloc>
 80047a2:	4603      	mov	r3, r0
 80047a4:	60fb      	str	r3, [r7, #12]
		*NEW_Element=*ini_element;																		//Copy data to the new element
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	4614      	mov	r4, r2
 80047ac:	461d      	mov	r5, r3
 80047ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047b2:	682b      	ldr	r3, [r5, #0]
 80047b4:	6023      	str	r3, [r4, #0]
		NEW_Element->ID=head->ID;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	791a      	ldrb	r2, [r3, #4]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	711a      	strb	r2, [r3, #4]
		NEW_Element->next=NULL;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	601a      	str	r2, [r3, #0]
		while(now->next!=NULL){																			//skip head to last element
 80047c4:	e008      	b.n	80047d8 <UI_Menu_List_Element_Create+0x94>
			now=now->next;
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	617b      	str	r3, [r7, #20]
			NEW_Element->ID++;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	791b      	ldrb	r3, [r3, #4]
 80047d0:	3301      	adds	r3, #1
 80047d2:	b2da      	uxtb	r2, r3
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	711a      	strb	r2, [r3, #4]
		while(now->next!=NULL){																			//skip head to last element
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d1f2      	bne.n	80047c6 <UI_Menu_List_Element_Create+0x82>
		NEW_Element->ID++;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	791b      	ldrb	r3, [r3, #4]
 80047e4:	3301      	adds	r3, #1
 80047e6:	b2da      	uxtb	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	711a      	strb	r2, [r3, #4]
		now->next=NEW_Element;																			//pointer to a next element pointing to a new element
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	601a      	str	r2, [r3, #0]
}
 80047f2:	bf00      	nop
 80047f4:	3718      	adds	r7, #24
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bdb0      	pop	{r4, r5, r7, pc}

080047fa <Menu_List_Size>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
uint8_t Menu_List_Size(struct Menu_List_Vector *self){
 80047fa:	b480      	push	{r7}
 80047fc:	b085      	sub	sp, #20
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
	/**
	 * Return quantity of elements in  Menu_List_Vector
	 */
	uint8_t MAX_ID=0;
 8004802:	2300      	movs	r3, #0
 8004804:	73fb      	strb	r3, [r7, #15]
	while(self->next!=NULL){
 8004806:	e005      	b.n	8004814 <Menu_List_Size+0x1a>
			self=self->next;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	607b      	str	r3, [r7, #4]
			MAX_ID++;
 800480e:	7bfb      	ldrb	r3, [r7, #15]
 8004810:	3301      	adds	r3, #1
 8004812:	73fb      	strb	r3, [r7, #15]
	while(self->next!=NULL){
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1f5      	bne.n	8004808 <Menu_List_Size+0xe>
	}
	return MAX_ID++;
 800481c:	7bfb      	ldrb	r3, [r7, #15]
 800481e:	1c5a      	adds	r2, r3, #1
 8004820:	73fa      	strb	r2, [r7, #15]
}
 8004822:	4618      	mov	r0, r3
 8004824:	3714      	adds	r7, #20
 8004826:	46bd      	mov	sp, r7
 8004828:	bc80      	pop	{r7}
 800482a:	4770      	bx	lr

0800482c <Menu_List_Vector_Draw>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void Menu_List_Vector_Draw(struct Menu_List_Vector *self, uint8_t start_point, uint8_t quantity){
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	460b      	mov	r3, r1
 8004836:	70fb      	strb	r3, [r7, #3]
 8004838:	4613      	mov	r3, r2
 800483a:	70bb      	strb	r3, [r7, #2]
	/**
	 * Draw all names of submenu based on  Menu_List_Vector and clear all other lines
	 */
	while(self->ID!=start_point)						//skip to statr point
 800483c:	e002      	b.n	8004844 <Menu_List_Vector_Draw+0x18>
		self=self->next;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	607b      	str	r3, [r7, #4]
	while(self->ID!=start_point)						//skip to statr point
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	7a1b      	ldrb	r3, [r3, #8]
 8004848:	78fa      	ldrb	r2, [r7, #3]
 800484a:	429a      	cmp	r2, r3
 800484c:	d1f7      	bne.n	800483e <Menu_List_Vector_Draw+0x12>
	for(uint8_t i=1;i<Menu_List_Vector_Draw_Shift;i++){//Clear all lined before Menu_List_Vector. Line 0 is NAME of MENU
 800484e:	2301      	movs	r3, #1
 8004850:	73fb      	strb	r3, [r7, #15]
 8004852:	e006      	b.n	8004862 <Menu_List_Vector_Draw+0x36>
		UI_Clear_Line(i);
 8004854:	7bfb      	ldrb	r3, [r7, #15]
 8004856:	4618      	mov	r0, r3
 8004858:	f7ff f90a 	bl	8003a70 <UI_Clear_Line>
	for(uint8_t i=1;i<Menu_List_Vector_Draw_Shift;i++){//Clear all lined before Menu_List_Vector. Line 0 is NAME of MENU
 800485c:	7bfb      	ldrb	r3, [r7, #15]
 800485e:	3301      	adds	r3, #1
 8004860:	73fb      	strb	r3, [r7, #15]
 8004862:	7bfb      	ldrb	r3, [r7, #15]
 8004864:	2b01      	cmp	r3, #1
 8004866:	d9f5      	bls.n	8004854 <Menu_List_Vector_Draw+0x28>
	}
	for(uint8_t i=Menu_List_Vector_Draw_Shift;i<quantity+Menu_List_Vector_Draw_Shift;i++){						//Draw all submenu's names and clear all other lines
 8004868:	2302      	movs	r3, #2
 800486a:	73bb      	strb	r3, [r7, #14]
 800486c:	e018      	b.n	80048a0 <Menu_List_Vector_Draw+0x74>
		if(self!=NULL){
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00e      	beq.n	8004892 <Menu_List_Vector_Draw+0x66>
			UI_Clear_Line(i);
 8004874:	7bbb      	ldrb	r3, [r7, #14]
 8004876:	4618      	mov	r0, r3
 8004878:	f7ff f8fa 	bl	8003a70 <UI_Clear_Line>
			UI_Draw_String_Center(self->name, i, Direct_Display_MODE);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	7bb9      	ldrb	r1, [r7, #14]
 8004882:	2200      	movs	r2, #0
 8004884:	4618      	mov	r0, r3
 8004886:	f7ff f9d1 	bl	8003c2c <UI_Draw_String_Center>
			self=self->next;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	607b      	str	r3, [r7, #4]
 8004890:	e003      	b.n	800489a <Menu_List_Vector_Draw+0x6e>
		}
		else
			UI_Clear_Line(i);
 8004892:	7bbb      	ldrb	r3, [r7, #14]
 8004894:	4618      	mov	r0, r3
 8004896:	f7ff f8eb 	bl	8003a70 <UI_Clear_Line>
	for(uint8_t i=Menu_List_Vector_Draw_Shift;i<quantity+Menu_List_Vector_Draw_Shift;i++){						//Draw all submenu's names and clear all other lines
 800489a:	7bbb      	ldrb	r3, [r7, #14]
 800489c:	3301      	adds	r3, #1
 800489e:	73bb      	strb	r3, [r7, #14]
 80048a0:	78bb      	ldrb	r3, [r7, #2]
 80048a2:	1c5a      	adds	r2, r3, #1
 80048a4:	7bbb      	ldrb	r3, [r7, #14]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	dae1      	bge.n	800486e <Menu_List_Vector_Draw+0x42>
	}
}
 80048aa:	bf00      	nop
 80048ac:	bf00      	nop
 80048ae:	3710      	adds	r7, #16
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <Menu_Set_List_Cursor>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void Menu_Set_List_Cursor(struct Menu_List_Vector *self, uint8_t start_point, uint8_t quantity, uint8_t cursor_y){
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	4608      	mov	r0, r1
 80048be:	4611      	mov	r1, r2
 80048c0:	461a      	mov	r2, r3
 80048c2:	4603      	mov	r3, r0
 80048c4:	70fb      	strb	r3, [r7, #3]
 80048c6:	460b      	mov	r3, r1
 80048c8:	70bb      	strb	r3, [r7, #2]
 80048ca:	4613      	mov	r3, r2
 80048cc:	707b      	strb	r3, [r7, #1]
	/**
	 *	Draw all names of submenu based on  Menu_List_Vector and inverse NAME output on cursor_y
	 */
	while(self->ID!=start_point)			//skip to start point
 80048ce:	e002      	b.n	80048d6 <Menu_Set_List_Cursor+0x22>
		self=self->next;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	607b      	str	r3, [r7, #4]
	while(self->ID!=start_point)			//skip to start point
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	7a1b      	ldrb	r3, [r3, #8]
 80048da:	78fa      	ldrb	r2, [r7, #3]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d1f7      	bne.n	80048d0 <Menu_Set_List_Cursor+0x1c>
	for(uint8_t i=0;i<quantity;i++){		//Draw all Submenu titles
 80048e0:	2300      	movs	r3, #0
 80048e2:	73fb      	strb	r3, [r7, #15]
 80048e4:	e01f      	b.n	8004926 <Menu_Set_List_Cursor+0x72>
		if(self!=NULL){
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d019      	beq.n	8004920 <Menu_Set_List_Cursor+0x6c>
			if(i==cursor_y)					//if selected
 80048ec:	7bfa      	ldrb	r2, [r7, #15]
 80048ee:	787b      	ldrb	r3, [r7, #1]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d109      	bne.n	8004908 <Menu_Set_List_Cursor+0x54>
				UI_Draw_String_Center(self->name, i+Menu_List_Vector_Draw_Shift, Inverse_Display_MODE);	//display title inverse
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	68d8      	ldr	r0, [r3, #12]
 80048f8:	7bfb      	ldrb	r3, [r7, #15]
 80048fa:	3302      	adds	r3, #2
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2201      	movs	r2, #1
 8004900:	4619      	mov	r1, r3
 8004902:	f7ff f993 	bl	8003c2c <UI_Draw_String_Center>
 8004906:	e008      	b.n	800491a <Menu_Set_List_Cursor+0x66>
			else																						//else
				UI_Draw_String_Center(self->name, i+Menu_List_Vector_Draw_Shift, Direct_Display_MODE);	//display title direct
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	68d8      	ldr	r0, [r3, #12]
 800490c:	7bfb      	ldrb	r3, [r7, #15]
 800490e:	3302      	adds	r3, #2
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2200      	movs	r2, #0
 8004914:	4619      	mov	r1, r3
 8004916:	f7ff f989 	bl	8003c2c <UI_Draw_String_Center>
			self=self->next;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	607b      	str	r3, [r7, #4]
	for(uint8_t i=0;i<quantity;i++){		//Draw all Submenu titles
 8004920:	7bfb      	ldrb	r3, [r7, #15]
 8004922:	3301      	adds	r3, #1
 8004924:	73fb      	strb	r3, [r7, #15]
 8004926:	7bfa      	ldrb	r2, [r7, #15]
 8004928:	78bb      	ldrb	r3, [r7, #2]
 800492a:	429a      	cmp	r2, r3
 800492c:	d3db      	bcc.n	80048e6 <Menu_Set_List_Cursor+0x32>
		}
	}
}
 800492e:	bf00      	nop
 8004930:	bf00      	nop
 8004932:	3710      	adds	r7, #16
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <UI_Menu_it>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void UI_Menu_it(struct Menu_List_Vector *self, struct Encoder *Encoder, struct Button_Vector *Button_Vector){
 8004938:	b580      	push	{r7, lr}
 800493a:	b088      	sub	sp, #32
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]

	int Menu_Count=0, Menu_Count_Prew=255;		//Menu_Count current menu options, Menu_Count_Prew=255 needed to draw menu at first iteration
 8004944:	2300      	movs	r3, #0
 8004946:	61fb      	str	r3, [r7, #28]
 8004948:	23ff      	movs	r3, #255	; 0xff
 800494a:	61bb      	str	r3, [r7, #24]

	uint8_t MAX_ID=Menu_List_Size(self);		//Get max size of vector
 800494c:	68f8      	ldr	r0, [r7, #12]
 800494e:	f7ff ff54 	bl	80047fa <Menu_List_Size>
 8004952:	4603      	mov	r3, r0
 8004954:	74fb      	strb	r3, [r7, #19]
	UI_Encoder_Reset_Button_State(Encoder);		//Reset encoder button state
 8004956:	68b8      	ldr	r0, [r7, #8]
 8004958:	f7ff f99d 	bl	8003c96 <UI_Encoder_Reset_Button_State>

	UI_Clear_Line(0);							//Clear line for Menu Title
 800495c:	2000      	movs	r0, #0
 800495e:	f7ff f887 	bl	8003a70 <UI_Clear_Line>
	UI_Draw_String_Center("MENU", 0, Direct_Display_MODE);	//Draw Menu Title
 8004962:	2200      	movs	r2, #0
 8004964:	2100      	movs	r1, #0
 8004966:	4848      	ldr	r0, [pc, #288]	; (8004a88 <UI_Menu_it+0x150>)
 8004968:	f7ff f960 	bl	8003c2c <UI_Draw_String_Center>
	Menu_List_Vector_Draw(self, (uint8_t)(Menu_Count/(Draw_LIMIT-Menu_List_Vector_Draw_Shift))*(Draw_LIMIT-Menu_List_Vector_Draw_Shift), Draw_LIMIT-Menu_List_Vector_Draw_Shift);
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	4a47      	ldr	r2, [pc, #284]	; (8004a8c <UI_Menu_it+0x154>)
 8004970:	fb82 1203 	smull	r1, r2, r2, r3
 8004974:	17db      	asrs	r3, r3, #31
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	b2db      	uxtb	r3, r3
 800497a:	461a      	mov	r2, r3
 800497c:	0052      	lsls	r2, r2, #1
 800497e:	4413      	add	r3, r2
 8004980:	005b      	lsls	r3, r3, #1
 8004982:	b2db      	uxtb	r3, r3
 8004984:	2206      	movs	r2, #6
 8004986:	4619      	mov	r1, r3
 8004988:	68f8      	ldr	r0, [r7, #12]
 800498a:	f7ff ff4f 	bl	800482c <Menu_List_Vector_Draw>
															//Draw Menu subtitles based on Menu_List_Vector

	while(Encoder_Get_Button_State(Encoder)!=Encoder_Button_long){	//main cycle
 800498e:	e070      	b.n	8004a72 <UI_Menu_it+0x13a>

		Menu_Count+= Encoder_Get_Rotary_Switch_Buffer(Encoder);		//Get Menu_Count based on Rotary_Switch_Buffer
 8004990:	68b8      	ldr	r0, [r7, #8]
 8004992:	f7fc fc9c 	bl	80012ce <Encoder_Get_Rotary_Switch_Buffer>
 8004996:	4602      	mov	r2, r0
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	4413      	add	r3, r2
 800499c:	61fb      	str	r3, [r7, #28]
		Encoder_Reset_Rotary_Switch_Buffer(Encoder);				//Reset encoder button state
 800499e:	68b8      	ldr	r0, [r7, #8]
 80049a0:	f7fc fc89 	bl	80012b6 <Encoder_Reset_Rotary_Switch_Buffer>

		if(Menu_Count<0)											//Check if current Menu_Count is more than 0 and less than size of vector
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	da02      	bge.n	80049b0 <UI_Menu_it+0x78>
			Menu_Count=0;
 80049aa:	2300      	movs	r3, #0
 80049ac:	61fb      	str	r3, [r7, #28]
 80049ae:	e005      	b.n	80049bc <UI_Menu_it+0x84>
		else if(Menu_Count>MAX_ID)
 80049b0:	7cfb      	ldrb	r3, [r7, #19]
 80049b2:	69fa      	ldr	r2, [r7, #28]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	dd01      	ble.n	80049bc <UI_Menu_it+0x84>
			Menu_Count=MAX_ID;
 80049b8:	7cfb      	ldrb	r3, [r7, #19]
 80049ba:	61fb      	str	r3, [r7, #28]

		if(Menu_Count_Prew!=Menu_Count){							//if Menu_Count was changed
 80049bc:	69ba      	ldr	r2, [r7, #24]
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d01e      	beq.n	8004a02 <UI_Menu_it+0xca>
			Menu_Set_List_Cursor(self,								//Redraw cursor and subtitle list
					(uint8_t)(Menu_Count/(Draw_LIMIT-Menu_List_Vector_Draw_Shift))*(Draw_LIMIT-Menu_List_Vector_Draw_Shift),
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	4a31      	ldr	r2, [pc, #196]	; (8004a8c <UI_Menu_it+0x154>)
 80049c8:	fb82 1203 	smull	r1, r2, r2, r3
 80049cc:	17db      	asrs	r3, r3, #31
 80049ce:	1ad3      	subs	r3, r2, r3
			Menu_Set_List_Cursor(self,								//Redraw cursor and subtitle list
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	461a      	mov	r2, r3
 80049d4:	0052      	lsls	r2, r2, #1
 80049d6:	4413      	add	r3, r2
 80049d8:	005b      	lsls	r3, r3, #1
 80049da:	b2d8      	uxtb	r0, r3
					Draw_LIMIT-Menu_List_Vector_Draw_Shift,
					(uint8_t)Menu_Count%(Draw_LIMIT-Menu_List_Vector_Draw_Shift));
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	b2da      	uxtb	r2, r3
			Menu_Set_List_Cursor(self,								//Redraw cursor and subtitle list
 80049e0:	4b2b      	ldr	r3, [pc, #172]	; (8004a90 <UI_Menu_it+0x158>)
 80049e2:	fba3 1302 	umull	r1, r3, r3, r2
 80049e6:	0899      	lsrs	r1, r3, #2
 80049e8:	460b      	mov	r3, r1
 80049ea:	005b      	lsls	r3, r3, #1
 80049ec:	440b      	add	r3, r1
 80049ee:	005b      	lsls	r3, r3, #1
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	2206      	movs	r2, #6
 80049f6:	4601      	mov	r1, r0
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f7ff ff5b 	bl	80048b4 <Menu_Set_List_Cursor>
			Menu_Count_Prew=Menu_Count;
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	61bb      	str	r3, [r7, #24]
		}

		if(Encoder_Get_Button_State(Encoder)==Encoder_Button_Short){   								//Element select
 8004a02:	68b8      	ldr	r0, [r7, #8]
 8004a04:	f7fc fc7b 	bl	80012fe <Encoder_Get_Button_State>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d131      	bne.n	8004a72 <UI_Menu_it+0x13a>
			struct Menu_List_Vector *now;
			now=self;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	617b      	str	r3, [r7, #20]
			while(now->ID!=Menu_Count){
 8004a12:	e002      	b.n	8004a1a <UI_Menu_it+0xe2>
				now=now->next;																//Shift Element pointer to select element
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	617b      	str	r3, [r7, #20]
			while(now->ID!=Menu_Count){
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	7a1b      	ldrb	r3, [r3, #8]
 8004a1e:	461a      	mov	r2, r3
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d1f6      	bne.n	8004a14 <UI_Menu_it+0xdc>
			}
			UI_Menu_List_Element_Vector_it(now->Menu_List_Element_Vector, self->name, Encoder, Button_Vector);		//Transceive control to Menu_List_Element_Vector menu
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	6858      	ldr	r0, [r3, #4]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	68d9      	ldr	r1, [r3, #12]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	68ba      	ldr	r2, [r7, #8]
 8004a32:	f7ff fdbb 	bl	80045ac <UI_Menu_List_Element_Vector_it>
																													//Area after resceive control start
			UI_Clear_Line(0);										//Clear line for Menu Title
 8004a36:	2000      	movs	r0, #0
 8004a38:	f7ff f81a 	bl	8003a70 <UI_Clear_Line>
			UI_Draw_String_Center("MENU", 0, Direct_Display_MODE);	//Draw Menu Title
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	2100      	movs	r1, #0
 8004a40:	4811      	ldr	r0, [pc, #68]	; (8004a88 <UI_Menu_it+0x150>)
 8004a42:	f7ff f8f3 	bl	8003c2c <UI_Draw_String_Center>
			Menu_List_Vector_Draw(self, (uint8_t)(Menu_Count/(Draw_LIMIT-Menu_List_Vector_Draw_Shift))*(Draw_LIMIT-Menu_List_Vector_Draw_Shift), Draw_LIMIT-Menu_List_Vector_Draw_Shift);
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	4a10      	ldr	r2, [pc, #64]	; (8004a8c <UI_Menu_it+0x154>)
 8004a4a:	fb82 1203 	smull	r1, r2, r2, r3
 8004a4e:	17db      	asrs	r3, r3, #31
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	461a      	mov	r2, r3
 8004a56:	0052      	lsls	r2, r2, #1
 8004a58:	4413      	add	r3, r2
 8004a5a:	005b      	lsls	r3, r3, #1
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	2206      	movs	r2, #6
 8004a60:	4619      	mov	r1, r3
 8004a62:	68f8      	ldr	r0, [r7, #12]
 8004a64:	f7ff fee2 	bl	800482c <Menu_List_Vector_Draw>
			Menu_Count_Prew=255;									//Reset state
 8004a68:	23ff      	movs	r3, #255	; 0xff
 8004a6a:	61bb      	str	r3, [r7, #24]
			UI_Encoder_Reset_Button_State(Encoder);					//Reset encoder button state
 8004a6c:	68b8      	ldr	r0, [r7, #8]
 8004a6e:	f7ff f912 	bl	8003c96 <UI_Encoder_Reset_Button_State>
	while(Encoder_Get_Button_State(Encoder)!=Encoder_Button_long){	//main cycle
 8004a72:	68b8      	ldr	r0, [r7, #8]
 8004a74:	f7fc fc43 	bl	80012fe <Encoder_Get_Button_State>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b03      	cmp	r3, #3
 8004a7c:	d188      	bne.n	8004990 <UI_Menu_it+0x58>
																	//Area after resceive control end
		}
	}
}
 8004a7e:	bf00      	nop
 8004a80:	bf00      	nop
 8004a82:	3720      	adds	r7, #32
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	0800b1b0 	.word	0x0800b1b0
 8004a8c:	2aaaaaab 	.word	0x2aaaaaab
 8004a90:	aaaaaaab 	.word	0xaaaaaaab

08004a94 <UI_Menu_List_Create>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void UI_Menu_List_Create(struct Menu_List_Vector *List_Vector, struct Menu_List_Element_Vector *List_Element_Vector, char *name){
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b088      	sub	sp, #32
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
	/**
	 * Add a new element to List_Vector based on copy of List_Element_Vector
	 */
	char *st= malloc((sizeof(char)*(strlen(name)+1)));			//Lock memory for name str
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f7fb fb55 	bl	8000150 <strlen>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f006 f9e4 	bl	800ae78 <malloc>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	61bb      	str	r3, [r7, #24]
	strcpy(st,name);											//Copy string
 8004ab4:	6879      	ldr	r1, [r7, #4]
 8004ab6:	69b8      	ldr	r0, [r7, #24]
 8004ab8:	f006 fade 	bl	800b078 <strcpy>
	if(List_Vector->Menu_List_Element_Vector==NULL){			//If Head have not any data
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d109      	bne.n	8004ad8 <UI_Menu_List_Create+0x44>
		List_Vector->ID=0;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	721a      	strb	r2, [r3, #8]
		List_Vector->name=st;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	69ba      	ldr	r2, [r7, #24]
 8004ace:	60da      	str	r2, [r3, #12]
		List_Vector->Menu_List_Element_Vector=List_Element_Vector;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	68ba      	ldr	r2, [r7, #8]
 8004ad4:	605a      	str	r2, [r3, #4]
			NEW_Element->ID++;
		}
		NEW_Element->ID++;
		now->next=NEW_Element;
	}
}
 8004ad6:	e02a      	b.n	8004b2e <UI_Menu_List_Create+0x9a>
		struct Menu_List_Vector *now=List_Vector;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	61fb      	str	r3, [r7, #28]
		struct Menu_List_Vector *NEW_Element=malloc(sizeof(struct Menu_List_Vector));	//create new element
 8004adc:	2010      	movs	r0, #16
 8004ade:	f006 f9cb 	bl	800ae78 <malloc>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	617b      	str	r3, [r7, #20]
		NEW_Element->ID=List_Vector->ID;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	7a1a      	ldrb	r2, [r3, #8]
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	721a      	strb	r2, [r3, #8]
		NEW_Element->next=NULL;
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	2200      	movs	r2, #0
 8004af2:	601a      	str	r2, [r3, #0]
		NEW_Element->name=st;
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	69ba      	ldr	r2, [r7, #24]
 8004af8:	60da      	str	r2, [r3, #12]
		NEW_Element->Menu_List_Element_Vector=List_Element_Vector;						//Copy data to the new element
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	68ba      	ldr	r2, [r7, #8]
 8004afe:	605a      	str	r2, [r3, #4]
		while(now->next!=NULL){															//Skip until current pointer is'not tail
 8004b00:	e008      	b.n	8004b14 <UI_Menu_List_Create+0x80>
			now=now->next;
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	61fb      	str	r3, [r7, #28]
			NEW_Element->ID++;
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	7a1b      	ldrb	r3, [r3, #8]
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	b2da      	uxtb	r2, r3
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	721a      	strb	r2, [r3, #8]
		while(now->next!=NULL){															//Skip until current pointer is'not tail
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d1f2      	bne.n	8004b02 <UI_Menu_List_Create+0x6e>
		NEW_Element->ID++;
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	7a1b      	ldrb	r3, [r3, #8]
 8004b20:	3301      	adds	r3, #1
 8004b22:	b2da      	uxtb	r2, r3
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	721a      	strb	r2, [r3, #8]
		now->next=NEW_Element;
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	697a      	ldr	r2, [r7, #20]
 8004b2c:	601a      	str	r2, [r3, #0]
}
 8004b2e:	bf00      	nop
 8004b30:	3720      	adds	r7, #32
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
	...

08004b38 <PAC_ON_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//---------------------------------------------------------------------------------
void PAC_ON_Callback(struct PAC *self){
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]

	/**
	 * Set max MAX_Control_Value for all PID which controlling PAG
	 */
	Soldering_Heat_Gun_Set_PID_MAX_Control_Value(PAC_Get_Max_Control_Value(self), &Soldering_Heat_Gun);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f7fd fbee 	bl	8002322 <PAC_Get_Max_Control_Value>
 8004b46:	4603      	mov	r3, r0
 8004b48:	4907      	ldr	r1, [pc, #28]	; (8004b68 <PAC_ON_Callback+0x30>)
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7fe f991 	bl	8002e72 <Soldering_Heat_Gun_Set_PID_MAX_Control_Value>
	Soldering_Separator_Set_PID_MAX_Control_Value(PAC_Get_Max_Control_Value(self), &Soldering_Separator);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f7fd fbe6 	bl	8002322 <PAC_Get_Max_Control_Value>
 8004b56:	4603      	mov	r3, r0
 8004b58:	4904      	ldr	r1, [pc, #16]	; (8004b6c <PAC_ON_Callback+0x34>)
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7fe fb8c 	bl	8003278 <Soldering_Separator_Set_PID_MAX_Control_Value>
}
 8004b60:	bf00      	nop
 8004b62:	3708      	adds	r7, #8
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	2000060c 	.word	0x2000060c
 8004b6c:	200006a8 	.word	0x200006a8

08004b70 <HAL_TIM_IC_CaptureCallback>:
//---------------------------------------------------------------------------------
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
	PAC_IC_Capture_INT(PAC);
 8004b78:	4b04      	ldr	r3, [pc, #16]	; (8004b8c <HAL_TIM_IC_CaptureCallback+0x1c>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7fd faab 	bl	80020d8 <PAC_IC_Capture_INT>
}
 8004b82:	bf00      	nop
 8004b84:	3708      	adds	r7, #8
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	20000730 	.word	0x20000730

08004b90 <HAL_ADC_ConvCpltCallback>:
//--------------------------------------------------------------------------------- ADC_Callback
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
	/**
	 * After DAC_Read Analog signal into ADC_Data array
	 */
	Solder_Iron_it(&Soldering_Iron);				//PID_IT and PWM Start
 8004b98:	4806      	ldr	r0, [pc, #24]	; (8004bb4 <HAL_ADC_ConvCpltCallback+0x24>)
 8004b9a:	f7fd fdfa 	bl	8002792 <Solder_Iron_it>
	Soldering_Heat_Gun_it(&Soldering_Heat_Gun);		//PID_IT
 8004b9e:	4806      	ldr	r0, [pc, #24]	; (8004bb8 <HAL_ADC_ConvCpltCallback+0x28>)
 8004ba0:	f7fe f9c9 	bl	8002f36 <Soldering_Heat_Gun_it>
	Soldering_Separator_it(&Soldering_Separator);	//PID_IT
 8004ba4:	4805      	ldr	r0, [pc, #20]	; (8004bbc <HAL_ADC_ConvCpltCallback+0x2c>)
 8004ba6:	f7fe fb93 	bl	80032d0 <Soldering_Separator_it>
}
 8004baa:	bf00      	nop
 8004bac:	3708      	adds	r7, #8
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	20000560 	.word	0x20000560
 8004bb8:	2000060c 	.word	0x2000060c
 8004bbc:	200006a8 	.word	0x200006a8

08004bc0 <HAL_GPIO_EXTI_Callback>:
//--------------------------------------------------------------------------------- EXTI
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN){
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	80fb      	strh	r3, [r7, #6]
		Button_Vector_EXTI(&Button_Vector,&GPIO_PIN);
 8004bca:	1dbb      	adds	r3, r7, #6
 8004bcc:	4619      	mov	r1, r3
 8004bce:	4808      	ldr	r0, [pc, #32]	; (8004bf0 <HAL_GPIO_EXTI_Callback+0x30>)
 8004bd0:	f7fc fb22 	bl	8001218 <Button_Vector_EXTI>
		Encoder_EXTI(&Encoder_P2, &GPIO_PIN);
 8004bd4:	1dbb      	adds	r3, r7, #6
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	4806      	ldr	r0, [pc, #24]	; (8004bf4 <HAL_GPIO_EXTI_Callback+0x34>)
 8004bda:	f7fc f994 	bl	8000f06 <Encoder_EXTI>
		Encoder_EXTI(&Encoder_P1, &GPIO_PIN);
 8004bde:	1dbb      	adds	r3, r7, #6
 8004be0:	4619      	mov	r1, r3
 8004be2:	4805      	ldr	r0, [pc, #20]	; (8004bf8 <HAL_GPIO_EXTI_Callback+0x38>)
 8004be4:	f7fc f98f 	bl	8000f06 <Encoder_EXTI>
}
 8004be8:	bf00      	nop
 8004bea:	3708      	adds	r7, #8
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	2000050c 	.word	0x2000050c
 8004bf4:	200004a4 	.word	0x200004a4
 8004bf8:	200004d8 	.word	0x200004d8

08004bfc <HAL_TIM_PeriodElapsedCallback>:
//---------------------------------------------------------------------------------TIM_Callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]

	static uint8_t prescaler=1;


        if(htim->Instance == TIM1) //check if the interrupt comes from TIM1									//ADC DMA
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a1b      	ldr	r2, [pc, #108]	; (8004c78 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d114      	bne.n	8004c38 <HAL_TIM_PeriodElapsedCallback+0x3c>
        {
        	if(prescaler==1){													//First we needed stop PWM to read cotect temperature from ADC
 8004c0e:	4b1b      	ldr	r3, [pc, #108]	; (8004c7c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d107      	bne.n	8004c26 <HAL_TIM_PeriodElapsedCallback+0x2a>
        		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);						//
 8004c16:	210c      	movs	r1, #12
 8004c18:	4819      	ldr	r0, [pc, #100]	; (8004c80 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8004c1a:	f004 fd6b 	bl	80096f4 <HAL_TIM_PWM_Stop>
        		prescaler=0;
 8004c1e:	4b17      	ldr	r3, [pc, #92]	; (8004c7c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8004c20:	2200      	movs	r2, #0
 8004c22:	701a      	strb	r2, [r3, #0]
        	Solder_Iron_tim_it(&Soldering_Iron);
        	Button_Vector_it(&Button_Vector);
        	Encoder_it(&Encoder_P1);
        	Encoder_it(&Encoder_P2);
        }
}
 8004c24:	e023      	b.n	8004c6e <HAL_TIM_PeriodElapsedCallback+0x72>
        		HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&ADC_Data[0],(uint32_t)16);	//Read data from ADC by DMA
 8004c26:	2210      	movs	r2, #16
 8004c28:	4916      	ldr	r1, [pc, #88]	; (8004c84 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8004c2a:	4817      	ldr	r0, [pc, #92]	; (8004c88 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8004c2c:	f001 fcd6 	bl	80065dc <HAL_ADC_Start_DMA>
        		prescaler=1;
 8004c30:	4b12      	ldr	r3, [pc, #72]	; (8004c7c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8004c32:	2201      	movs	r2, #1
 8004c34:	701a      	strb	r2, [r3, #0]
}
 8004c36:	e01a      	b.n	8004c6e <HAL_TIM_PeriodElapsedCallback+0x72>
        }else if(htim->Instance == TIM3){																	//Service  TIM3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a13      	ldr	r2, [pc, #76]	; (8004c8c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d015      	beq.n	8004c6e <HAL_TIM_PeriodElapsedCallback+0x72>
        }else if(htim->Instance == TIM4){						//Timer only for PAC
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a12      	ldr	r2, [pc, #72]	; (8004c90 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d110      	bne.n	8004c6e <HAL_TIM_PeriodElapsedCallback+0x72>
        	Flash_Rewrite_Timer_tim_it(&Soldering_Iron, &Soldering_Heat_Gun, &Soldering_Separator);
 8004c4c:	4a11      	ldr	r2, [pc, #68]	; (8004c94 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8004c4e:	4912      	ldr	r1, [pc, #72]	; (8004c98 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8004c50:	4812      	ldr	r0, [pc, #72]	; (8004c9c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8004c52:	f7fe fccb 	bl	80035ec <Flash_Rewrite_Timer_tim_it>
        	Solder_Iron_tim_it(&Soldering_Iron);
 8004c56:	4811      	ldr	r0, [pc, #68]	; (8004c9c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8004c58:	f7fd fdf0 	bl	800283c <Solder_Iron_tim_it>
        	Button_Vector_it(&Button_Vector);
 8004c5c:	4810      	ldr	r0, [pc, #64]	; (8004ca0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8004c5e:	f7fc faf3 	bl	8001248 <Button_Vector_it>
        	Encoder_it(&Encoder_P1);
 8004c62:	4810      	ldr	r0, [pc, #64]	; (8004ca4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8004c64:	f7fc fa67 	bl	8001136 <Encoder_it>
        	Encoder_it(&Encoder_P2);
 8004c68:	480f      	ldr	r0, [pc, #60]	; (8004ca8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8004c6a:	f7fc fa64 	bl	8001136 <Encoder_it>
}
 8004c6e:	bf00      	nop
 8004c70:	3708      	adds	r7, #8
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	40012c00 	.word	0x40012c00
 8004c7c:	2000023a 	.word	0x2000023a
 8004c80:	200003c8 	.word	0x200003c8
 8004c84:	20000734 	.word	0x20000734
 8004c88:	200002b8 	.word	0x200002b8
 8004c8c:	40000400 	.word	0x40000400
 8004c90:	40000800 	.word	0x40000800
 8004c94:	200006a8 	.word	0x200006a8
 8004c98:	2000060c 	.word	0x2000060c
 8004c9c:	20000560 	.word	0x20000560
 8004ca0:	2000050c 	.word	0x2000050c
 8004ca4:	200004d8 	.word	0x200004d8
 8004ca8:	200004a4 	.word	0x200004a4

08004cac <BUTTON_INI>:
//--------------------------------------------------------------------------------- INI Blocks
void BUTTON_INI(void){
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	af00      	add	r7, sp, #0
	/**
	 * Button initialization
	 */
	struct Button Button_ini;

	Button_ini.ID=Button_ID_SW8;		//ID
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	703b      	strb	r3, [r7, #0]
	Button_ini.count_max=2;				//Contact bounce in tim interrupts
 8004cb6:	2302      	movs	r3, #2
 8004cb8:	717b      	strb	r3, [r7, #5]
	Button_ini.EXTI_PIN=GPIO_PIN_14;	//in my schematic different buttons have the same EXTI pin
 8004cba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004cbe:	813b      	strh	r3, [r7, #8]
	Button_ini.PIN=GPIO_PIN_8;			//Actual state pin
 8004cc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004cc4:	817b      	strh	r3, [r7, #10]
	Button_ini.GPIO=GPIOA;				//Actual pin state GPIO
 8004cc6:	4b3c      	ldr	r3, [pc, #240]	; (8004db8 <BUTTON_INI+0x10c>)
 8004cc8:	60fb      	str	r3, [r7, #12]
	Button_ini.MODE=Button_Mode_Regular_With_EXTI;//MODE
 8004cca:	2300      	movs	r3, #0
 8004ccc:	743b      	strb	r3, [r7, #16]
	Button_Vector_Create(&Button_Vector,&Button_ini);
 8004cce:	463b      	mov	r3, r7
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	483a      	ldr	r0, [pc, #232]	; (8004dbc <BUTTON_INI+0x110>)
 8004cd4:	f7fc fa64 	bl	80011a0 <Button_Vector_Create>

	Button_ini.ID=Button_ID_SW6;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	703b      	strb	r3, [r7, #0]
	Button_ini.count_max=2;
 8004cdc:	2302      	movs	r3, #2
 8004cde:	717b      	strb	r3, [r7, #5]
	Button_ini.EXTI_PIN=GPIO_PIN_14;
 8004ce0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004ce4:	813b      	strh	r3, [r7, #8]
	Button_ini.PIN=GPIO_PIN_9;
 8004ce6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004cea:	817b      	strh	r3, [r7, #10]
	Button_ini.GPIO=GPIOA;
 8004cec:	4b32      	ldr	r3, [pc, #200]	; (8004db8 <BUTTON_INI+0x10c>)
 8004cee:	60fb      	str	r3, [r7, #12]
	Button_ini.MODE=Button_Mode_Regular_With_EXTI;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	743b      	strb	r3, [r7, #16]
	Button_Vector_Create(&Button_Vector,&Button_ini);
 8004cf4:	463b      	mov	r3, r7
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	4830      	ldr	r0, [pc, #192]	; (8004dbc <BUTTON_INI+0x110>)
 8004cfa:	f7fc fa51 	bl	80011a0 <Button_Vector_Create>

	Button_ini.ID=Button_ID_SW5;
 8004cfe:	2302      	movs	r3, #2
 8004d00:	703b      	strb	r3, [r7, #0]
	Button_ini.count_max=2;
 8004d02:	2302      	movs	r3, #2
 8004d04:	717b      	strb	r3, [r7, #5]
	Button_ini.EXTI_PIN=GPIO_PIN_14;
 8004d06:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004d0a:	813b      	strh	r3, [r7, #8]
	Button_ini.PIN=GPIO_PIN_10;
 8004d0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d10:	817b      	strh	r3, [r7, #10]
	Button_ini.GPIO=GPIOA;
 8004d12:	4b29      	ldr	r3, [pc, #164]	; (8004db8 <BUTTON_INI+0x10c>)
 8004d14:	60fb      	str	r3, [r7, #12]
	Button_ini.MODE=Button_Mode_Regular_With_EXTI;
 8004d16:	2300      	movs	r3, #0
 8004d18:	743b      	strb	r3, [r7, #16]
	Button_Vector_Create(&Button_Vector,&Button_ini);
 8004d1a:	463b      	mov	r3, r7
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	4827      	ldr	r0, [pc, #156]	; (8004dbc <BUTTON_INI+0x110>)
 8004d20:	f7fc fa3e 	bl	80011a0 <Button_Vector_Create>

	Button_ini.ID=Button_ID_SW2;
 8004d24:	2303      	movs	r3, #3
 8004d26:	703b      	strb	r3, [r7, #0]
	Button_ini.count_max=2;
 8004d28:	2302      	movs	r3, #2
 8004d2a:	717b      	strb	r3, [r7, #5]
	Button_ini.EXTI_PIN=GPIO_PIN_3;
 8004d2c:	2308      	movs	r3, #8
 8004d2e:	813b      	strh	r3, [r7, #8]
	Button_ini.PIN=GPIO_PIN_4;
 8004d30:	2310      	movs	r3, #16
 8004d32:	817b      	strh	r3, [r7, #10]
	Button_ini.GPIO=GPIOB;
 8004d34:	4b22      	ldr	r3, [pc, #136]	; (8004dc0 <BUTTON_INI+0x114>)
 8004d36:	60fb      	str	r3, [r7, #12]
	Button_ini.MODE=Button_Mode_Regular_With_EXTI;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	743b      	strb	r3, [r7, #16]
	Button_Vector_Create(&Button_Vector,&Button_ini);
 8004d3c:	463b      	mov	r3, r7
 8004d3e:	4619      	mov	r1, r3
 8004d40:	481e      	ldr	r0, [pc, #120]	; (8004dbc <BUTTON_INI+0x110>)
 8004d42:	f7fc fa2d 	bl	80011a0 <Button_Vector_Create>

	Button_ini.ID=Button_ID_SW3;
 8004d46:	2304      	movs	r3, #4
 8004d48:	703b      	strb	r3, [r7, #0]
	Button_ini.count_max=2;
 8004d4a:	2302      	movs	r3, #2
 8004d4c:	717b      	strb	r3, [r7, #5]
	Button_ini.EXTI_PIN=GPIO_PIN_3;
 8004d4e:	2308      	movs	r3, #8
 8004d50:	813b      	strh	r3, [r7, #8]
	Button_ini.PIN=GPIO_PIN_5;
 8004d52:	2320      	movs	r3, #32
 8004d54:	817b      	strh	r3, [r7, #10]
	Button_ini.GPIO=GPIOB;
 8004d56:	4b1a      	ldr	r3, [pc, #104]	; (8004dc0 <BUTTON_INI+0x114>)
 8004d58:	60fb      	str	r3, [r7, #12]
	Button_ini.MODE=Button_Mode_Regular_With_EXTI;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	743b      	strb	r3, [r7, #16]
	Button_Vector_Create(&Button_Vector,&Button_ini);
 8004d5e:	463b      	mov	r3, r7
 8004d60:	4619      	mov	r1, r3
 8004d62:	4816      	ldr	r0, [pc, #88]	; (8004dbc <BUTTON_INI+0x110>)
 8004d64:	f7fc fa1c 	bl	80011a0 <Button_Vector_Create>

	Button_ini.ID=Button_ID_SW7;
 8004d68:	2305      	movs	r3, #5
 8004d6a:	703b      	strb	r3, [r7, #0]
	Button_ini.count_max=2;
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	717b      	strb	r3, [r7, #5]
	Button_ini.EXTI_PIN=GPIO_PIN_3;
 8004d70:	2308      	movs	r3, #8
 8004d72:	813b      	strh	r3, [r7, #8]
	Button_ini.PIN=GPIO_PIN_8;
 8004d74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d78:	817b      	strh	r3, [r7, #10]
	Button_ini.GPIO=GPIOB;
 8004d7a:	4b11      	ldr	r3, [pc, #68]	; (8004dc0 <BUTTON_INI+0x114>)
 8004d7c:	60fb      	str	r3, [r7, #12]
	Button_ini.MODE=Button_Mode_Regular_With_EXTI;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	743b      	strb	r3, [r7, #16]
	Button_Vector_Create(&Button_Vector,&Button_ini);
 8004d82:	463b      	mov	r3, r7
 8004d84:	4619      	mov	r1, r3
 8004d86:	480d      	ldr	r0, [pc, #52]	; (8004dbc <BUTTON_INI+0x110>)
 8004d88:	f7fc fa0a 	bl	80011a0 <Button_Vector_Create>

	Button_ini.ID=Button_Gerkon_ID;
 8004d8c:	2306      	movs	r3, #6
 8004d8e:	703b      	strb	r3, [r7, #0]
	Button_ini.count_max=2;
 8004d90:	2302      	movs	r3, #2
 8004d92:	717b      	strb	r3, [r7, #5]
	Button_ini.EXTI_PIN=GPIO_PIN_2;
 8004d94:	2304      	movs	r3, #4
 8004d96:	813b      	strh	r3, [r7, #8]
	Button_ini.PIN=GPIO_PIN_2;
 8004d98:	2304      	movs	r3, #4
 8004d9a:	817b      	strh	r3, [r7, #10]
	Button_ini.GPIO=GPIOA;
 8004d9c:	4b06      	ldr	r3, [pc, #24]	; (8004db8 <BUTTON_INI+0x10c>)
 8004d9e:	60fb      	str	r3, [r7, #12]
	Button_ini.MODE=Button_Mode_Regular_With_EXTI;
 8004da0:	2300      	movs	r3, #0
 8004da2:	743b      	strb	r3, [r7, #16]
	Button_Vector_Create(&Button_Vector,&Button_ini);
 8004da4:	463b      	mov	r3, r7
 8004da6:	4619      	mov	r1, r3
 8004da8:	4804      	ldr	r0, [pc, #16]	; (8004dbc <BUTTON_INI+0x110>)
 8004daa:	f7fc f9f9 	bl	80011a0 <Button_Vector_Create>


}
 8004dae:	bf00      	nop
 8004db0:	3718      	adds	r7, #24
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	40010800 	.word	0x40010800
 8004dbc:	2000050c 	.word	0x2000050c
 8004dc0:	40010c00 	.word	0x40010c00

08004dc4 <Encoder_INI>:
//---------------------------------------------------------------------------------
void Encoder_INI(void){
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	af00      	add	r7, sp, #0
	Encoder_P2.ID=Encoder_ID_P2;
 8004dc8:	4b2d      	ldr	r3, [pc, #180]	; (8004e80 <Encoder_INI+0xbc>)
 8004dca:	2201      	movs	r2, #1
 8004dcc:	701a      	strb	r2, [r3, #0]
	Encoder_P2.Button.count_max=2;
 8004dce:	4b2c      	ldr	r3, [pc, #176]	; (8004e80 <Encoder_INI+0xbc>)
 8004dd0:	2202      	movs	r2, #2
 8004dd2:	725a      	strb	r2, [r3, #9]
	Encoder_P2.Button.EXTI_PIN=GPIO_PIN_14;
 8004dd4:	4b2a      	ldr	r3, [pc, #168]	; (8004e80 <Encoder_INI+0xbc>)
 8004dd6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004dda:	819a      	strh	r2, [r3, #12]
	Encoder_P2.Button.PIN=GPIO_PIN_15;
 8004ddc:	4b28      	ldr	r3, [pc, #160]	; (8004e80 <Encoder_INI+0xbc>)
 8004dde:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004de2:	81da      	strh	r2, [r3, #14]
	Encoder_P2.Button.GPIO=GPIOB;
 8004de4:	4b26      	ldr	r3, [pc, #152]	; (8004e80 <Encoder_INI+0xbc>)
 8004de6:	4a27      	ldr	r2, [pc, #156]	; (8004e84 <Encoder_INI+0xc0>)
 8004de8:	611a      	str	r2, [r3, #16]
	Encoder_P2.Button.Presed_counter_max=3;
 8004dea:	4b25      	ldr	r3, [pc, #148]	; (8004e80 <Encoder_INI+0xbc>)
 8004dec:	2203      	movs	r2, #3
 8004dee:	71da      	strb	r2, [r3, #7]
	Encoder_P2.Button.MODE=Button_Mode_Encoder;
 8004df0:	4b23      	ldr	r3, [pc, #140]	; (8004e80 <Encoder_INI+0xbc>)
 8004df2:	2202      	movs	r2, #2
 8004df4:	751a      	strb	r2, [r3, #20]

	Encoder_P2.Rotary_Switch.State=0;
 8004df6:	4a22      	ldr	r2, [pc, #136]	; (8004e80 <Encoder_INI+0xbc>)
 8004df8:	7f53      	ldrb	r3, [r2, #29]
 8004dfa:	f36f 0300 	bfc	r3, #0, #1
 8004dfe:	7753      	strb	r3, [r2, #29]
	Encoder_P2.Rotary_Switch.EXTI_PIN=GPIO_PIN_12;
 8004e00:	4b1f      	ldr	r3, [pc, #124]	; (8004e80 <Encoder_INI+0xbc>)
 8004e02:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004e06:	841a      	strh	r2, [r3, #32]
	Encoder_P2.Rotary_Switch.PIN=GPIO_PIN_13;
 8004e08:	4b1d      	ldr	r3, [pc, #116]	; (8004e80 <Encoder_INI+0xbc>)
 8004e0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004e0e:	845a      	strh	r2, [r3, #34]	; 0x22
	Encoder_P2.Rotary_Switch.GPIO=GPIOB;
 8004e10:	4b1b      	ldr	r3, [pc, #108]	; (8004e80 <Encoder_INI+0xbc>)
 8004e12:	4a1c      	ldr	r2, [pc, #112]	; (8004e84 <Encoder_INI+0xc0>)
 8004e14:	625a      	str	r2, [r3, #36]	; 0x24
	Encoder_P2.Rotary_Switch.Rotary_Switch_Direcion=Reverse;
 8004e16:	4b1a      	ldr	r3, [pc, #104]	; (8004e80 <Encoder_INI+0xbc>)
 8004e18:	2201      	movs	r2, #1
 8004e1a:	779a      	strb	r2, [r3, #30]

	Encoder_ini(&Encoder_P2);
 8004e1c:	4818      	ldr	r0, [pc, #96]	; (8004e80 <Encoder_INI+0xbc>)
 8004e1e:	f7fc fa7a 	bl	8001316 <Encoder_ini>


	Encoder_P1.ID=Encoder_ID_P1;
 8004e22:	4b19      	ldr	r3, [pc, #100]	; (8004e88 <Encoder_INI+0xc4>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	701a      	strb	r2, [r3, #0]
	Encoder_P1.Button.count_max=2;
 8004e28:	4b17      	ldr	r3, [pc, #92]	; (8004e88 <Encoder_INI+0xc4>)
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	725a      	strb	r2, [r3, #9]
	Encoder_P1.Button.EXTI_PIN=GPIO_PIN_3;
 8004e2e:	4b16      	ldr	r3, [pc, #88]	; (8004e88 <Encoder_INI+0xc4>)
 8004e30:	2208      	movs	r2, #8
 8004e32:	819a      	strh	r2, [r3, #12]
	Encoder_P1.Button.PIN=GPIO_PIN_12;
 8004e34:	4b14      	ldr	r3, [pc, #80]	; (8004e88 <Encoder_INI+0xc4>)
 8004e36:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004e3a:	81da      	strh	r2, [r3, #14]
	Encoder_P1.Button.GPIO=GPIOA;
 8004e3c:	4b12      	ldr	r3, [pc, #72]	; (8004e88 <Encoder_INI+0xc4>)
 8004e3e:	4a13      	ldr	r2, [pc, #76]	; (8004e8c <Encoder_INI+0xc8>)
 8004e40:	611a      	str	r2, [r3, #16]
	Encoder_P1.Button.Presed_counter_max=3;
 8004e42:	4b11      	ldr	r3, [pc, #68]	; (8004e88 <Encoder_INI+0xc4>)
 8004e44:	2203      	movs	r2, #3
 8004e46:	71da      	strb	r2, [r3, #7]
	Encoder_P1.Button.MODE=Button_Mode_Encoder;
 8004e48:	4b0f      	ldr	r3, [pc, #60]	; (8004e88 <Encoder_INI+0xc4>)
 8004e4a:	2202      	movs	r2, #2
 8004e4c:	751a      	strb	r2, [r3, #20]

	Encoder_P1.Rotary_Switch.State=0;
 8004e4e:	4a0e      	ldr	r2, [pc, #56]	; (8004e88 <Encoder_INI+0xc4>)
 8004e50:	7f53      	ldrb	r3, [r2, #29]
 8004e52:	f36f 0300 	bfc	r3, #0, #1
 8004e56:	7753      	strb	r3, [r2, #29]
	Encoder_P1.Rotary_Switch.EXTI_PIN=GPIO_PIN_15;
 8004e58:	4b0b      	ldr	r3, [pc, #44]	; (8004e88 <Encoder_INI+0xc4>)
 8004e5a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004e5e:	841a      	strh	r2, [r3, #32]
	Encoder_P1.Rotary_Switch.PIN=GPIO_PIN_11;
 8004e60:	4b09      	ldr	r3, [pc, #36]	; (8004e88 <Encoder_INI+0xc4>)
 8004e62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e66:	845a      	strh	r2, [r3, #34]	; 0x22
	Encoder_P1.Rotary_Switch.GPIO=GPIOA;
 8004e68:	4b07      	ldr	r3, [pc, #28]	; (8004e88 <Encoder_INI+0xc4>)
 8004e6a:	4a08      	ldr	r2, [pc, #32]	; (8004e8c <Encoder_INI+0xc8>)
 8004e6c:	625a      	str	r2, [r3, #36]	; 0x24
	Encoder_P1.Rotary_Switch.Rotary_Switch_Direcion=Direct;
 8004e6e:	4b06      	ldr	r3, [pc, #24]	; (8004e88 <Encoder_INI+0xc4>)
 8004e70:	2200      	movs	r2, #0
 8004e72:	779a      	strb	r2, [r3, #30]

	Encoder_ini(&Encoder_P1);
 8004e74:	4804      	ldr	r0, [pc, #16]	; (8004e88 <Encoder_INI+0xc4>)
 8004e76:	f7fc fa4e 	bl	8001316 <Encoder_ini>

}
 8004e7a:	bf00      	nop
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	200004a4 	.word	0x200004a4
 8004e84:	40010c00 	.word	0x40010c00
 8004e88:	200004d8 	.word	0x200004d8
 8004e8c:	40010800 	.word	0x40010800

08004e90 <MENU_INI>:
//----------------------------------------------------------------------------
void MENU_INI(void){
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b086      	sub	sp, #24
 8004e94:	af00      	add	r7, sp, #0

	struct Menu_List_Element_Vector Menu_List_Element_Vector_ini;


	Menu_List_Element_Vector_ini.name="T_Corect_Manual";
 8004e96:	4b8b      	ldr	r3, [pc, #556]	; (80050c4 <MENU_INI+0x234>)
 8004e98:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Iron.Temperature_Corection_C.Manual;
 8004e9a:	4b8b      	ldr	r3, [pc, #556]	; (80050c8 <MENU_INI+0x238>)
 8004e9c:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=INT;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	747b      	strb	r3, [r7, #17]
	UI_Menu_List_Element_Create(&Soldering_Iron_Menu_Vector,&Menu_List_Element_Vector_ini);
 8004ea6:	1d3b      	adds	r3, r7, #4
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	4888      	ldr	r0, [pc, #544]	; (80050cc <MENU_INI+0x23c>)
 8004eac:	f7ff fc4a 	bl	8004744 <UI_Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="Preset1";
 8004eb0:	4b87      	ldr	r3, [pc, #540]	; (80050d0 <MENU_INI+0x240>)
 8004eb2:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Iron.Temperature_Presets_C.Preset1;
 8004eb4:	4b87      	ldr	r3, [pc, #540]	; (80050d4 <MENU_INI+0x244>)
 8004eb6:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=UINT16;
 8004eb8:	2302      	movs	r3, #2
 8004eba:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	747b      	strb	r3, [r7, #17]
	UI_Menu_List_Element_Create(&Soldering_Iron_Menu_Vector,&Menu_List_Element_Vector_ini);
 8004ec0:	1d3b      	adds	r3, r7, #4
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	4881      	ldr	r0, [pc, #516]	; (80050cc <MENU_INI+0x23c>)
 8004ec6:	f7ff fc3d 	bl	8004744 <UI_Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="T_Corect_Pres1";
 8004eca:	4b83      	ldr	r3, [pc, #524]	; (80050d8 <MENU_INI+0x248>)
 8004ecc:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Iron.Temperature_Corection_C.Preset1;
 8004ece:	4b83      	ldr	r3, [pc, #524]	; (80050dc <MENU_INI+0x24c>)
 8004ed0:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=INT;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	747b      	strb	r3, [r7, #17]
	UI_Menu_List_Element_Create(&Soldering_Iron_Menu_Vector,&Menu_List_Element_Vector_ini);
 8004eda:	1d3b      	adds	r3, r7, #4
 8004edc:	4619      	mov	r1, r3
 8004ede:	487b      	ldr	r0, [pc, #492]	; (80050cc <MENU_INI+0x23c>)
 8004ee0:	f7ff fc30 	bl	8004744 <UI_Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="Preset2";
 8004ee4:	4b7e      	ldr	r3, [pc, #504]	; (80050e0 <MENU_INI+0x250>)
 8004ee6:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Iron.Temperature_Presets_C.Preset2;
 8004ee8:	4b7e      	ldr	r3, [pc, #504]	; (80050e4 <MENU_INI+0x254>)
 8004eea:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=UINT16;
 8004eec:	2302      	movs	r3, #2
 8004eee:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	747b      	strb	r3, [r7, #17]
	UI_Menu_List_Element_Create(&Soldering_Iron_Menu_Vector,&Menu_List_Element_Vector_ini);
 8004ef4:	1d3b      	adds	r3, r7, #4
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	4874      	ldr	r0, [pc, #464]	; (80050cc <MENU_INI+0x23c>)
 8004efa:	f7ff fc23 	bl	8004744 <UI_Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="T_Corect_Pres2";
 8004efe:	4b7a      	ldr	r3, [pc, #488]	; (80050e8 <MENU_INI+0x258>)
 8004f00:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Iron.Temperature_Corection_C.Preset2;
 8004f02:	4b7a      	ldr	r3, [pc, #488]	; (80050ec <MENU_INI+0x25c>)
 8004f04:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=INT;
 8004f06:	2300      	movs	r3, #0
 8004f08:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	747b      	strb	r3, [r7, #17]
	UI_Menu_List_Element_Create(&Soldering_Iron_Menu_Vector,&Menu_List_Element_Vector_ini);
 8004f0e:	1d3b      	adds	r3, r7, #4
 8004f10:	4619      	mov	r1, r3
 8004f12:	486e      	ldr	r0, [pc, #440]	; (80050cc <MENU_INI+0x23c>)
 8004f14:	f7ff fc16 	bl	8004744 <UI_Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="Sleep_mode_T";
 8004f18:	4b75      	ldr	r3, [pc, #468]	; (80050f0 <MENU_INI+0x260>)
 8004f1a:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Iron.Temperature_Presets_C.Sleep;
 8004f1c:	4b75      	ldr	r3, [pc, #468]	; (80050f4 <MENU_INI+0x264>)
 8004f1e:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=UINT16;
 8004f20:	2302      	movs	r3, #2
 8004f22:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 8004f24:	2301      	movs	r3, #1
 8004f26:	747b      	strb	r3, [r7, #17]
	UI_Menu_List_Element_Create(&Soldering_Iron_Menu_Vector,&Menu_List_Element_Vector_ini);
 8004f28:	1d3b      	adds	r3, r7, #4
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	4867      	ldr	r0, [pc, #412]	; (80050cc <MENU_INI+0x23c>)
 8004f2e:	f7ff fc09 	bl	8004744 <UI_Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="Sleep_timer";
 8004f32:	4b71      	ldr	r3, [pc, #452]	; (80050f8 <MENU_INI+0x268>)
 8004f34:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Iron.Sleep_time;
 8004f36:	4b71      	ldr	r3, [pc, #452]	; (80050fc <MENU_INI+0x26c>)
 8004f38:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=UINT8;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	747b      	strb	r3, [r7, #17]
	UI_Menu_List_Element_Create(&Soldering_Iron_Menu_Vector,&Menu_List_Element_Vector_ini);
 8004f42:	1d3b      	adds	r3, r7, #4
 8004f44:	4619      	mov	r1, r3
 8004f46:	4861      	ldr	r0, [pc, #388]	; (80050cc <MENU_INI+0x23c>)
 8004f48:	f7ff fbfc 	bl	8004744 <UI_Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="Disable_timer";
 8004f4c:	4b6c      	ldr	r3, [pc, #432]	; (8005100 <MENU_INI+0x270>)
 8004f4e:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Iron.Disable_time;
 8004f50:	4b6c      	ldr	r3, [pc, #432]	; (8005104 <MENU_INI+0x274>)
 8004f52:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=UINT16;
 8004f54:	2302      	movs	r3, #2
 8004f56:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	747b      	strb	r3, [r7, #17]
	UI_Menu_List_Element_Create(&Soldering_Iron_Menu_Vector,&Menu_List_Element_Vector_ini);
 8004f5c:	1d3b      	adds	r3, r7, #4
 8004f5e:	4619      	mov	r1, r3
 8004f60:	485a      	ldr	r0, [pc, #360]	; (80050cc <MENU_INI+0x23c>)
 8004f62:	f7ff fbef 	bl	8004744 <UI_Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="State";
 8004f66:	4b68      	ldr	r3, [pc, #416]	; (8005108 <MENU_INI+0x278>)
 8004f68:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Iron.State;
 8004f6a:	4b68      	ldr	r3, [pc, #416]	; (800510c <MENU_INI+0x27c>)
 8004f6c:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=BOOL;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 8004f72:	2301      	movs	r3, #1
 8004f74:	747b      	strb	r3, [r7, #17]
	UI_Menu_List_Element_Create(&Soldering_Iron_Menu_Vector,&Menu_List_Element_Vector_ini);
 8004f76:	1d3b      	adds	r3, r7, #4
 8004f78:	4619      	mov	r1, r3
 8004f7a:	4854      	ldr	r0, [pc, #336]	; (80050cc <MENU_INI+0x23c>)
 8004f7c:	f7ff fbe2 	bl	8004744 <UI_Menu_List_Element_Create>


	UI_Menu_List_Create(&Menu_List_Vector,&Soldering_Iron_Menu_Vector, " Soldering_Iron ");
 8004f80:	4a63      	ldr	r2, [pc, #396]	; (8005110 <MENU_INI+0x280>)
 8004f82:	4952      	ldr	r1, [pc, #328]	; (80050cc <MENU_INI+0x23c>)
 8004f84:	4863      	ldr	r0, [pc, #396]	; (8005114 <MENU_INI+0x284>)
 8004f86:	f7ff fd85 	bl	8004a94 <UI_Menu_List_Create>


	Menu_List_Element_Vector_ini.name="T_Corect_Manual";
 8004f8a:	4b4e      	ldr	r3, [pc, #312]	; (80050c4 <MENU_INI+0x234>)
 8004f8c:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Heat_Gun.Temperature_Corection_C.Manual;
 8004f8e:	4b62      	ldr	r3, [pc, #392]	; (8005118 <MENU_INI+0x288>)
 8004f90:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=INT;
 8004f92:	2300      	movs	r3, #0
 8004f94:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 8004f96:	2301      	movs	r3, #1
 8004f98:	747b      	strb	r3, [r7, #17]
	UI_Menu_List_Element_Create(&Soldering_Heat_Gun_Menu_Vector,&Menu_List_Element_Vector_ini);
 8004f9a:	1d3b      	adds	r3, r7, #4
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	485f      	ldr	r0, [pc, #380]	; (800511c <MENU_INI+0x28c>)
 8004fa0:	f7ff fbd0 	bl	8004744 <UI_Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="Preset1";
 8004fa4:	4b4a      	ldr	r3, [pc, #296]	; (80050d0 <MENU_INI+0x240>)
 8004fa6:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Heat_Gun.Temperature_Presets_C.Preset1;
 8004fa8:	4b5d      	ldr	r3, [pc, #372]	; (8005120 <MENU_INI+0x290>)
 8004faa:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=UINT16;
 8004fac:	2302      	movs	r3, #2
 8004fae:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	747b      	strb	r3, [r7, #17]
	UI_Menu_List_Element_Create(&Soldering_Heat_Gun_Menu_Vector,&Menu_List_Element_Vector_ini);
 8004fb4:	1d3b      	adds	r3, r7, #4
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	4858      	ldr	r0, [pc, #352]	; (800511c <MENU_INI+0x28c>)
 8004fba:	f7ff fbc3 	bl	8004744 <UI_Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="T_Corect_Pres1";
 8004fbe:	4b46      	ldr	r3, [pc, #280]	; (80050d8 <MENU_INI+0x248>)
 8004fc0:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Heat_Gun.Temperature_Corection_C.Preset1;
 8004fc2:	4b58      	ldr	r3, [pc, #352]	; (8005124 <MENU_INI+0x294>)
 8004fc4:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=INT;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	747b      	strb	r3, [r7, #17]
	UI_Menu_List_Element_Create(&Soldering_Heat_Gun_Menu_Vector,&Menu_List_Element_Vector_ini);
 8004fce:	1d3b      	adds	r3, r7, #4
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	4852      	ldr	r0, [pc, #328]	; (800511c <MENU_INI+0x28c>)
 8004fd4:	f7ff fbb6 	bl	8004744 <UI_Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="Preset2";
 8004fd8:	4b41      	ldr	r3, [pc, #260]	; (80050e0 <MENU_INI+0x250>)
 8004fda:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Heat_Gun.Temperature_Presets_C.Preset2;
 8004fdc:	4b52      	ldr	r3, [pc, #328]	; (8005128 <MENU_INI+0x298>)
 8004fde:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=UINT16;
 8004fe0:	2302      	movs	r3, #2
 8004fe2:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	747b      	strb	r3, [r7, #17]
	UI_Menu_List_Element_Create(&Soldering_Heat_Gun_Menu_Vector,&Menu_List_Element_Vector_ini);
 8004fe8:	1d3b      	adds	r3, r7, #4
 8004fea:	4619      	mov	r1, r3
 8004fec:	484b      	ldr	r0, [pc, #300]	; (800511c <MENU_INI+0x28c>)
 8004fee:	f7ff fba9 	bl	8004744 <UI_Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="T_Corect_Pres2";
 8004ff2:	4b3d      	ldr	r3, [pc, #244]	; (80050e8 <MENU_INI+0x258>)
 8004ff4:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Heat_Gun.Temperature_Corection_C.Preset2;
 8004ff6:	4b4d      	ldr	r3, [pc, #308]	; (800512c <MENU_INI+0x29c>)
 8004ff8:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=INT;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 8004ffe:	2301      	movs	r3, #1
 8005000:	747b      	strb	r3, [r7, #17]
	UI_Menu_List_Element_Create(&Soldering_Heat_Gun_Menu_Vector,&Menu_List_Element_Vector_ini);
 8005002:	1d3b      	adds	r3, r7, #4
 8005004:	4619      	mov	r1, r3
 8005006:	4845      	ldr	r0, [pc, #276]	; (800511c <MENU_INI+0x28c>)
 8005008:	f7ff fb9c 	bl	8004744 <UI_Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="T_Cooling_C";
 800500c:	4b48      	ldr	r3, [pc, #288]	; (8005130 <MENU_INI+0x2a0>)
 800500e:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Heat_Gun.Temperature_Coolling.C;
 8005010:	4b48      	ldr	r3, [pc, #288]	; (8005134 <MENU_INI+0x2a4>)
 8005012:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=UINT16;
 8005014:	2302      	movs	r3, #2
 8005016:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 8005018:	2301      	movs	r3, #1
 800501a:	747b      	strb	r3, [r7, #17]
	UI_Menu_List_Element_Create(&Soldering_Heat_Gun_Menu_Vector,&Menu_List_Element_Vector_ini);
 800501c:	1d3b      	adds	r3, r7, #4
 800501e:	4619      	mov	r1, r3
 8005020:	483e      	ldr	r0, [pc, #248]	; (800511c <MENU_INI+0x28c>)
 8005022:	f7ff fb8f 	bl	8004744 <UI_Menu_List_Element_Create>



	UI_Menu_List_Create(&Menu_List_Vector,&Soldering_Heat_Gun_Menu_Vector, " Heat_Gun ");
 8005026:	4a44      	ldr	r2, [pc, #272]	; (8005138 <MENU_INI+0x2a8>)
 8005028:	493c      	ldr	r1, [pc, #240]	; (800511c <MENU_INI+0x28c>)
 800502a:	483a      	ldr	r0, [pc, #232]	; (8005114 <MENU_INI+0x284>)
 800502c:	f7ff fd32 	bl	8004a94 <UI_Menu_List_Create>



	Menu_List_Element_Vector_ini.name="T_Corect_Manual";
 8005030:	4b24      	ldr	r3, [pc, #144]	; (80050c4 <MENU_INI+0x234>)
 8005032:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Separator.Temperature_Corection_C.Manual;
 8005034:	4b41      	ldr	r3, [pc, #260]	; (800513c <MENU_INI+0x2ac>)
 8005036:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=INT;
 8005038:	2300      	movs	r3, #0
 800503a:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 800503c:	2301      	movs	r3, #1
 800503e:	747b      	strb	r3, [r7, #17]
	UI_Menu_List_Element_Create(&Soldering_Separator_Menu_Vector, &Menu_List_Element_Vector_ini);
 8005040:	1d3b      	adds	r3, r7, #4
 8005042:	4619      	mov	r1, r3
 8005044:	483e      	ldr	r0, [pc, #248]	; (8005140 <MENU_INI+0x2b0>)
 8005046:	f7ff fb7d 	bl	8004744 <UI_Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="Preset1";
 800504a:	4b21      	ldr	r3, [pc, #132]	; (80050d0 <MENU_INI+0x240>)
 800504c:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Separator.Temperature_Presets_C.Preset1;
 800504e:	4b3d      	ldr	r3, [pc, #244]	; (8005144 <MENU_INI+0x2b4>)
 8005050:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=UINT16;
 8005052:	2302      	movs	r3, #2
 8005054:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 8005056:	2301      	movs	r3, #1
 8005058:	747b      	strb	r3, [r7, #17]
	UI_Menu_List_Element_Create(&Soldering_Separator_Menu_Vector, &Menu_List_Element_Vector_ini);
 800505a:	1d3b      	adds	r3, r7, #4
 800505c:	4619      	mov	r1, r3
 800505e:	4838      	ldr	r0, [pc, #224]	; (8005140 <MENU_INI+0x2b0>)
 8005060:	f7ff fb70 	bl	8004744 <UI_Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="T_Corect_Pres1";
 8005064:	4b1c      	ldr	r3, [pc, #112]	; (80050d8 <MENU_INI+0x248>)
 8005066:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Separator.Temperature_Corection_C.Preset1;
 8005068:	4b37      	ldr	r3, [pc, #220]	; (8005148 <MENU_INI+0x2b8>)
 800506a:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=INT;
 800506c:	2300      	movs	r3, #0
 800506e:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 8005070:	2301      	movs	r3, #1
 8005072:	747b      	strb	r3, [r7, #17]
	UI_Menu_List_Element_Create(&Soldering_Separator_Menu_Vector, &Menu_List_Element_Vector_ini);
 8005074:	1d3b      	adds	r3, r7, #4
 8005076:	4619      	mov	r1, r3
 8005078:	4831      	ldr	r0, [pc, #196]	; (8005140 <MENU_INI+0x2b0>)
 800507a:	f7ff fb63 	bl	8004744 <UI_Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="Preset2";
 800507e:	4b18      	ldr	r3, [pc, #96]	; (80050e0 <MENU_INI+0x250>)
 8005080:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Separator.Temperature_Presets_C.Preset2;
 8005082:	4b32      	ldr	r3, [pc, #200]	; (800514c <MENU_INI+0x2bc>)
 8005084:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=UINT16;
 8005086:	2302      	movs	r3, #2
 8005088:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 800508a:	2301      	movs	r3, #1
 800508c:	747b      	strb	r3, [r7, #17]
	UI_Menu_List_Element_Create(&Soldering_Separator_Menu_Vector,&Menu_List_Element_Vector_ini);
 800508e:	1d3b      	adds	r3, r7, #4
 8005090:	4619      	mov	r1, r3
 8005092:	482b      	ldr	r0, [pc, #172]	; (8005140 <MENU_INI+0x2b0>)
 8005094:	f7ff fb56 	bl	8004744 <UI_Menu_List_Element_Create>

	Menu_List_Element_Vector_ini.name="T_Corect_Pres2";
 8005098:	4b13      	ldr	r3, [pc, #76]	; (80050e8 <MENU_INI+0x258>)
 800509a:	60fb      	str	r3, [r7, #12]
	Menu_List_Element_Vector_ini.parametr=&Soldering_Separator.Temperature_Corection_C.Preset2;
 800509c:	4b2c      	ldr	r3, [pc, #176]	; (8005150 <MENU_INI+0x2c0>)
 800509e:	617b      	str	r3, [r7, #20]
	Menu_List_Element_Vector_ini.mode=INT;
 80050a0:	2300      	movs	r3, #0
 80050a2:	743b      	strb	r3, [r7, #16]
	Menu_List_Element_Vector_ini.step=1;
 80050a4:	2301      	movs	r3, #1
 80050a6:	747b      	strb	r3, [r7, #17]
	UI_Menu_List_Element_Create(&Soldering_Separator_Menu_Vector, &Menu_List_Element_Vector_ini);
 80050a8:	1d3b      	adds	r3, r7, #4
 80050aa:	4619      	mov	r1, r3
 80050ac:	4824      	ldr	r0, [pc, #144]	; (8005140 <MENU_INI+0x2b0>)
 80050ae:	f7ff fb49 	bl	8004744 <UI_Menu_List_Element_Create>


	UI_Menu_List_Create(&Menu_List_Vector,&Soldering_Separator_Menu_Vector, " Separator ");
 80050b2:	4a28      	ldr	r2, [pc, #160]	; (8005154 <MENU_INI+0x2c4>)
 80050b4:	4922      	ldr	r1, [pc, #136]	; (8005140 <MENU_INI+0x2b0>)
 80050b6:	4817      	ldr	r0, [pc, #92]	; (8005114 <MENU_INI+0x284>)
 80050b8:	f7ff fcec 	bl	8004a94 <UI_Menu_List_Create>

}
 80050bc:	bf00      	nop
 80050be:	3718      	adds	r7, #24
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	0800b1b8 	.word	0x0800b1b8
 80050c8:	200005bc 	.word	0x200005bc
 80050cc:	20000514 	.word	0x20000514
 80050d0:	0800b1c8 	.word	0x0800b1c8
 80050d4:	200005a8 	.word	0x200005a8
 80050d8:	0800b1d0 	.word	0x0800b1d0
 80050dc:	200005c0 	.word	0x200005c0
 80050e0:	0800b1e0 	.word	0x0800b1e0
 80050e4:	200005aa 	.word	0x200005aa
 80050e8:	0800b1e8 	.word	0x0800b1e8
 80050ec:	200005c4 	.word	0x200005c4
 80050f0:	0800b1f8 	.word	0x0800b1f8
 80050f4:	200005ac 	.word	0x200005ac
 80050f8:	0800b208 	.word	0x0800b208
 80050fc:	200005fc 	.word	0x200005fc
 8005100:	0800b214 	.word	0x0800b214
 8005104:	200005fe 	.word	0x200005fe
 8005108:	0800b224 	.word	0x0800b224
 800510c:	20000600 	.word	0x20000600
 8005110:	0800b22c 	.word	0x0800b22c
 8005114:	20000550 	.word	0x20000550
 8005118:	20000668 	.word	0x20000668
 800511c:	20000528 	.word	0x20000528
 8005120:	20000654 	.word	0x20000654
 8005124:	2000066c 	.word	0x2000066c
 8005128:	20000656 	.word	0x20000656
 800512c:	20000670 	.word	0x20000670
 8005130:	0800b240 	.word	0x0800b240
 8005134:	2000069a 	.word	0x2000069a
 8005138:	0800b24c 	.word	0x0800b24c
 800513c:	20000704 	.word	0x20000704
 8005140:	2000053c 	.word	0x2000053c
 8005144:	200006f0 	.word	0x200006f0
 8005148:	20000708 	.word	0x20000708
 800514c:	200006f2 	.word	0x200006f2
 8005150:	2000070c 	.word	0x2000070c
 8005154:	0800b258 	.word	0x0800b258

08005158 <OLED_INI>:
//----------------------------------------------------------------------------
void OLED_INI(void){
 8005158:	b580      	push	{r7, lr}
 800515a:	af00      	add	r7, sp, #0
	  OLED1.hi2c=&hi2c1;
 800515c:	4b05      	ldr	r3, [pc, #20]	; (8005174 <OLED_INI+0x1c>)
 800515e:	4a06      	ldr	r2, [pc, #24]	; (8005178 <OLED_INI+0x20>)
 8005160:	601a      	str	r2, [r3, #0]
	  OLED_Search_Adress(&OLED1);
 8005162:	4804      	ldr	r0, [pc, #16]	; (8005174 <OLED_INI+0x1c>)
 8005164:	f7fc fa9f 	bl	80016a6 <OLED_Search_Adress>
	  OLED_ini(&OLED1);
 8005168:	4802      	ldr	r0, [pc, #8]	; (8005174 <OLED_INI+0x1c>)
 800516a:	f7fc fabe 	bl	80016ea <OLED_ini>
}
 800516e:	bf00      	nop
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	2000049c 	.word	0x2000049c
 8005178:	2000032c 	.word	0x2000032c

0800517c <Soldering_Iron_INI>:
//----------------------------------------------------------------------------
void Soldering_Iron_INI(uint8_t Flash_Read_Status){
 800517c:	b580      	push	{r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af00      	add	r7, sp, #0
 8005182:	4603      	mov	r3, r0
 8005184:	71fb      	strb	r3, [r7, #7]

	Soldering_Iron.PID.KP=Soldering_Iron_PID_KP;
 8005186:	4b3f      	ldr	r3, [pc, #252]	; (8005284 <Soldering_Iron_INI+0x108>)
 8005188:	4a3f      	ldr	r2, [pc, #252]	; (8005288 <Soldering_Iron_INI+0x10c>)
 800518a:	601a      	str	r2, [r3, #0]
	Soldering_Iron.PID.KI=Soldering_Iron_PID_KI;
 800518c:	4b3d      	ldr	r3, [pc, #244]	; (8005284 <Soldering_Iron_INI+0x108>)
 800518e:	4a3f      	ldr	r2, [pc, #252]	; (800528c <Soldering_Iron_INI+0x110>)
 8005190:	605a      	str	r2, [r3, #4]
	Soldering_Iron.PID.KD=Soldering_Iron_PID_KD;
 8005192:	4b3c      	ldr	r3, [pc, #240]	; (8005284 <Soldering_Iron_INI+0x108>)
 8005194:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005198:	609a      	str	r2, [r3, #8]
	Soldering_Iron.PID.dt=0.1;
 800519a:	4b3a      	ldr	r3, [pc, #232]	; (8005284 <Soldering_Iron_INI+0x108>)
 800519c:	4a3c      	ldr	r2, [pc, #240]	; (8005290 <Soldering_Iron_INI+0x114>)
 800519e:	60da      	str	r2, [r3, #12]
	Soldering_Iron.PID.MAX_Control=350;
 80051a0:	4b38      	ldr	r3, [pc, #224]	; (8005284 <Soldering_Iron_INI+0x108>)
 80051a2:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80051a6:	821a      	strh	r2, [r3, #16]

	Soldering_Iron.Filter.Filter_Mode=Nine_Samples;
 80051a8:	4b36      	ldr	r3, [pc, #216]	; (8005284 <Soldering_Iron_INI+0x108>)
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Soldering_Iron.Filter.k_min=0.1;
 80051b0:	4b34      	ldr	r3, [pc, #208]	; (8005284 <Soldering_Iron_INI+0x108>)
 80051b2:	4a37      	ldr	r2, [pc, #220]	; (8005290 <Soldering_Iron_INI+0x114>)
 80051b4:	629a      	str	r2, [r3, #40]	; 0x28
	Soldering_Iron.Filter.k_max=0.8;
 80051b6:	4b33      	ldr	r3, [pc, #204]	; (8005284 <Soldering_Iron_INI+0x108>)
 80051b8:	4a36      	ldr	r2, [pc, #216]	; (8005294 <Soldering_Iron_INI+0x118>)
 80051ba:	62da      	str	r2, [r3, #44]	; 0x2c
	Soldering_Iron.Filter.Val_Delata=30;
 80051bc:	4b31      	ldr	r3, [pc, #196]	; (8005284 <Soldering_Iron_INI+0x108>)
 80051be:	4a36      	ldr	r2, [pc, #216]	; (8005298 <Soldering_Iron_INI+0x11c>)
 80051c0:	635a      	str	r2, [r3, #52]	; 0x34
	Soldering_Iron.Filter.mass=&ADC_Data[4];
 80051c2:	4b30      	ldr	r3, [pc, #192]	; (8005284 <Soldering_Iron_INI+0x108>)
 80051c4:	4a35      	ldr	r2, [pc, #212]	; (800529c <Soldering_Iron_INI+0x120>)
 80051c6:	641a      	str	r2, [r3, #64]	; 0x40

	Soldering_Iron.PWM_htim=&htim2;
 80051c8:	4b2e      	ldr	r3, [pc, #184]	; (8005284 <Soldering_Iron_INI+0x108>)
 80051ca:	4a35      	ldr	r2, [pc, #212]	; (80052a0 <Soldering_Iron_INI+0x124>)
 80051cc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

	Soldering_Iron.Full_Power_Button.ID=Full_Power_Button_ID;
 80051d0:	4b2c      	ldr	r3, [pc, #176]	; (8005284 <Soldering_Iron_INI+0x108>)
 80051d2:	2207      	movs	r2, #7
 80051d4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	Soldering_Iron.Full_Power_Button.count_max=2;
 80051d8:	4b2a      	ldr	r3, [pc, #168]	; (8005284 <Soldering_Iron_INI+0x108>)
 80051da:	2202      	movs	r2, #2
 80051dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	Soldering_Iron.Full_Power_Button.EXTI_PIN=GPIO_PIN_4;
 80051e0:	4b28      	ldr	r3, [pc, #160]	; (8005284 <Soldering_Iron_INI+0x108>)
 80051e2:	2210      	movs	r2, #16
 80051e4:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	Soldering_Iron.Full_Power_Button.PIN=GPIO_PIN_4;
 80051e8:	4b26      	ldr	r3, [pc, #152]	; (8005284 <Soldering_Iron_INI+0x108>)
 80051ea:	2210      	movs	r2, #16
 80051ec:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	Soldering_Iron.Full_Power_Button.GPIO=GPIOA;
 80051f0:	4b24      	ldr	r3, [pc, #144]	; (8005284 <Soldering_Iron_INI+0x108>)
 80051f2:	4a2c      	ldr	r2, [pc, #176]	; (80052a4 <Soldering_Iron_INI+0x128>)
 80051f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	Soldering_Iron.Full_Power_Button.MODE=Button_Mode_Regular_Without_EXTI;
 80051f8:	4b22      	ldr	r3, [pc, #136]	; (8005284 <Soldering_Iron_INI+0x108>)
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

	Soldering_Iron.VS.EXTI_PIN=GPIO_PIN_11;
 8005200:	4b20      	ldr	r3, [pc, #128]	; (8005284 <Soldering_Iron_INI+0x108>)
 8005202:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005206:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	Soldering_Iron.VS.GPIO=GPIOB;
 800520a:	4b1e      	ldr	r3, [pc, #120]	; (8005284 <Soldering_Iron_INI+0x108>)
 800520c:	4a26      	ldr	r2, [pc, #152]	; (80052a8 <Soldering_Iron_INI+0x12c>)
 800520e:	675a      	str	r2, [r3, #116]	; 0x74
	Soldering_Iron.VS.State=3;
 8005210:	4b1c      	ldr	r3, [pc, #112]	; (8005284 <Soldering_Iron_INI+0x108>)
 8005212:	2203      	movs	r2, #3
 8005214:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	Soldering_Iron.VS.Prew_State=4;
 8005218:	4b1a      	ldr	r3, [pc, #104]	; (8005284 <Soldering_Iron_INI+0x108>)
 800521a:	2204      	movs	r2, #4
 800521c:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b

	Soldering_Iron.MODE=MANUAL;
 8005220:	4b18      	ldr	r3, [pc, #96]	; (8005284 <Soldering_Iron_INI+0x108>)
 8005222:	2200      	movs	r2, #0
 8005224:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

	Soldering_Iron.Temperature_Converting.Coeff=Soldering_Iron_Temperature_Converting_Coeff;
 8005228:	4b16      	ldr	r3, [pc, #88]	; (8005284 <Soldering_Iron_INI+0x108>)
 800522a:	4a20      	ldr	r2, [pc, #128]	; (80052ac <Soldering_Iron_INI+0x130>)
 800522c:	659a      	str	r2, [r3, #88]	; 0x58

	if(Flash_Read_Status!=HAL_OK){							//if Data was read incorrect from flash reinitialize all user parameters
 800522e:	79fb      	ldrb	r3, [r7, #7]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d01d      	beq.n	8005270 <Soldering_Iron_INI+0xf4>
		Soldering_Iron.Temperature_Presets_C.Manual=100;
 8005234:	4b13      	ldr	r3, [pc, #76]	; (8005284 <Soldering_Iron_INI+0x108>)
 8005236:	2264      	movs	r2, #100	; 0x64
 8005238:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		Soldering_Iron.Temperature_Presets_C.Preset1=150;
 800523c:	4b11      	ldr	r3, [pc, #68]	; (8005284 <Soldering_Iron_INI+0x108>)
 800523e:	2296      	movs	r2, #150	; 0x96
 8005240:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		Soldering_Iron.Temperature_Presets_C.Preset2=300;
 8005244:	4b0f      	ldr	r3, [pc, #60]	; (8005284 <Soldering_Iron_INI+0x108>)
 8005246:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800524a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

		Soldering_Iron.Temperature_Presets_C.Sleep=100;
 800524e:	4b0d      	ldr	r3, [pc, #52]	; (8005284 <Soldering_Iron_INI+0x108>)
 8005250:	2264      	movs	r2, #100	; 0x64
 8005252:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		Soldering_Iron.Sleep_time=200;
 8005256:	4b0b      	ldr	r3, [pc, #44]	; (8005284 <Soldering_Iron_INI+0x108>)
 8005258:	22c8      	movs	r2, #200	; 0xc8
 800525a:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		Soldering_Iron.Disable_time=400;
 800525e:	4b09      	ldr	r3, [pc, #36]	; (8005284 <Soldering_Iron_INI+0x108>)
 8005260:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005264:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e

		Soldering_Iron.Flash_Key=0x0801F802;
 8005268:	4b06      	ldr	r3, [pc, #24]	; (8005284 <Soldering_Iron_INI+0x108>)
 800526a:	4a11      	ldr	r2, [pc, #68]	; (80052b0 <Soldering_Iron_INI+0x134>)
 800526c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	}
	Solder_Iron_Flash_Read_Manual_Temperature(&Soldering_Iron);	//read Last manual temperature
 8005270:	4804      	ldr	r0, [pc, #16]	; (8005284 <Soldering_Iron_INI+0x108>)
 8005272:	f7fd fcdb 	bl	8002c2c <Solder_Iron_Flash_Read_Manual_Temperature>
	Solder_Iron_ini(&Soldering_Iron);
 8005276:	4803      	ldr	r0, [pc, #12]	; (8005284 <Soldering_Iron_INI+0x108>)
 8005278:	f7fd fb24 	bl	80028c4 <Solder_Iron_ini>
}
 800527c:	bf00      	nop
 800527e:	3708      	adds	r7, #8
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}
 8005284:	20000560 	.word	0x20000560
 8005288:	40a00000 	.word	0x40a00000
 800528c:	3d4ccccd 	.word	0x3d4ccccd
 8005290:	3dcccccd 	.word	0x3dcccccd
 8005294:	3f4ccccd 	.word	0x3f4ccccd
 8005298:	41f00000 	.word	0x41f00000
 800529c:	2000073c 	.word	0x2000073c
 80052a0:	200003c8 	.word	0x200003c8
 80052a4:	40010800 	.word	0x40010800
 80052a8:	40010c00 	.word	0x40010c00
 80052ac:	41066666 	.word	0x41066666
 80052b0:	0801f802 	.word	0x0801f802

080052b4 <PAC_INI>:
//----------------------------------------------------------------------------
void PAC_INI(){
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b086      	sub	sp, #24
 80052b8:	af00      	add	r7, sp, #0
	struct PAC_Init PAC_ini;

	PAC_ini.DMA = &hdma_tim3_ch1_trig;
 80052ba:	4b0b      	ldr	r3, [pc, #44]	; (80052e8 <PAC_INI+0x34>)
 80052bc:	603b      	str	r3, [r7, #0]
	PAC_ini.DMA_Chanel = DMA1_Channel6;
 80052be:	4b0b      	ldr	r3, [pc, #44]	; (80052ec <PAC_INI+0x38>)
 80052c0:	607b      	str	r3, [r7, #4]
	PAC_ini.TIM_Instance = TIM3;
 80052c2:	4b0b      	ldr	r3, [pc, #44]	; (80052f0 <PAC_INI+0x3c>)
 80052c4:	60bb      	str	r3, [r7, #8]
	PAC_ini.IC_Trigger_Channel_GPIO = GPIOA;
 80052c6:	4b0b      	ldr	r3, [pc, #44]	; (80052f4 <PAC_INI+0x40>)
 80052c8:	60fb      	str	r3, [r7, #12]
	PAC_ini.IC_Trigger_Channel_PIN = GPIO_PIN_6;
 80052ca:	2340      	movs	r3, #64	; 0x40
 80052cc:	823b      	strh	r3, [r7, #16]
	PAC_ini.TIM_CHANNEL=TIM_CHANNEL_1;
 80052ce:	2300      	movs	r3, #0
 80052d0:	617b      	str	r3, [r7, #20]

	PAC = PAC_Base_Create(&PAC_ini);
 80052d2:	463b      	mov	r3, r7
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7fc fbcf 	bl	8001a78 <PAC_Base_Create>
 80052da:	4603      	mov	r3, r0
 80052dc:	4a06      	ldr	r2, [pc, #24]	; (80052f8 <PAC_INI+0x44>)
 80052de:	6013      	str	r3, [r2, #0]

}
 80052e0:	bf00      	nop
 80052e2:	3718      	adds	r7, #24
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	20000458 	.word	0x20000458
 80052ec:	4002006c 	.word	0x4002006c
 80052f0:	40000400 	.word	0x40000400
 80052f4:	40010800 	.word	0x40010800
 80052f8:	20000730 	.word	0x20000730

080052fc <Soldering_Heat_Gun_INI>:
//----------------------------------------------------------------------------
void Soldering_Heat_Gun_INI(uint8_t Flash_Read_Status){
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af00      	add	r7, sp, #0
 8005302:	4603      	mov	r3, r0
 8005304:	71fb      	strb	r3, [r7, #7]

	Soldering_Heat_Gun.PID.KP=Soldering_Heat_Gun_PID_KP;
 8005306:	4b35      	ldr	r3, [pc, #212]	; (80053dc <Soldering_Heat_Gun_INI+0xe0>)
 8005308:	4a35      	ldr	r2, [pc, #212]	; (80053e0 <Soldering_Heat_Gun_INI+0xe4>)
 800530a:	601a      	str	r2, [r3, #0]
	Soldering_Heat_Gun.PID.KI=Soldering_Heat_Gun_PID_KI;
 800530c:	4b33      	ldr	r3, [pc, #204]	; (80053dc <Soldering_Heat_Gun_INI+0xe0>)
 800530e:	4a35      	ldr	r2, [pc, #212]	; (80053e4 <Soldering_Heat_Gun_INI+0xe8>)
 8005310:	605a      	str	r2, [r3, #4]
	Soldering_Heat_Gun.PID.KD=Soldering_Heat_Gun_PID_KD;
 8005312:	4b32      	ldr	r3, [pc, #200]	; (80053dc <Soldering_Heat_Gun_INI+0xe0>)
 8005314:	4a34      	ldr	r2, [pc, #208]	; (80053e8 <Soldering_Heat_Gun_INI+0xec>)
 8005316:	609a      	str	r2, [r3, #8]
	Soldering_Heat_Gun.PID.dt=0.1;
 8005318:	4b30      	ldr	r3, [pc, #192]	; (80053dc <Soldering_Heat_Gun_INI+0xe0>)
 800531a:	4a34      	ldr	r2, [pc, #208]	; (80053ec <Soldering_Heat_Gun_INI+0xf0>)
 800531c:	60da      	str	r2, [r3, #12]


	Soldering_Heat_Gun.Filter.Filter_Mode=Three_Samples;
 800531e:	4b2f      	ldr	r3, [pc, #188]	; (80053dc <Soldering_Heat_Gun_INI+0xe0>)
 8005320:	2201      	movs	r2, #1
 8005322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Soldering_Heat_Gun.Filter.k_min=0.03;
 8005326:	4b2d      	ldr	r3, [pc, #180]	; (80053dc <Soldering_Heat_Gun_INI+0xe0>)
 8005328:	4a31      	ldr	r2, [pc, #196]	; (80053f0 <Soldering_Heat_Gun_INI+0xf4>)
 800532a:	629a      	str	r2, [r3, #40]	; 0x28
	Soldering_Heat_Gun.Filter.k_max=0.8;
 800532c:	4b2b      	ldr	r3, [pc, #172]	; (80053dc <Soldering_Heat_Gun_INI+0xe0>)
 800532e:	4a31      	ldr	r2, [pc, #196]	; (80053f4 <Soldering_Heat_Gun_INI+0xf8>)
 8005330:	62da      	str	r2, [r3, #44]	; 0x2c
	Soldering_Heat_Gun.Filter.Val_Delata=60;
 8005332:	4b2a      	ldr	r3, [pc, #168]	; (80053dc <Soldering_Heat_Gun_INI+0xe0>)
 8005334:	4a30      	ldr	r2, [pc, #192]	; (80053f8 <Soldering_Heat_Gun_INI+0xfc>)
 8005336:	635a      	str	r2, [r3, #52]	; 0x34
	Soldering_Heat_Gun.Filter.mass=&ADC_Data[1];
 8005338:	4b28      	ldr	r3, [pc, #160]	; (80053dc <Soldering_Heat_Gun_INI+0xe0>)
 800533a:	4a30      	ldr	r2, [pc, #192]	; (80053fc <Soldering_Heat_Gun_INI+0x100>)
 800533c:	641a      	str	r2, [r3, #64]	; 0x40


	Soldering_Heat_Gun.MODE=MANUAL;
 800533e:	4b27      	ldr	r3, [pc, #156]	; (80053dc <Soldering_Heat_Gun_INI+0xe0>)
 8005340:	2200      	movs	r2, #0
 8005342:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

	Soldering_Heat_Gun.OFF_PIN=GPIO_PIN_15;
 8005346:	4b25      	ldr	r3, [pc, #148]	; (80053dc <Soldering_Heat_Gun_INI+0xe0>)
 8005348:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800534c:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	Soldering_Heat_Gun.OFF_GPIO=GPIOC;
 8005350:	4b22      	ldr	r3, [pc, #136]	; (80053dc <Soldering_Heat_Gun_INI+0xe0>)
 8005352:	4a2b      	ldr	r2, [pc, #172]	; (8005400 <Soldering_Heat_Gun_INI+0x104>)
 8005354:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	Soldering_Heat_Gun.MANUAL_PIN=GPIO_PIN_9;
 8005358:	4b20      	ldr	r3, [pc, #128]	; (80053dc <Soldering_Heat_Gun_INI+0xe0>)
 800535a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800535e:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	Soldering_Heat_Gun.MANUAL_GPIO=GPIOB;
 8005362:	4b1e      	ldr	r3, [pc, #120]	; (80053dc <Soldering_Heat_Gun_INI+0xe0>)
 8005364:	4a27      	ldr	r2, [pc, #156]	; (8005404 <Soldering_Heat_Gun_INI+0x108>)
 8005366:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	Soldering_Heat_Gun.PAC = PAC;
 800536a:	4b27      	ldr	r3, [pc, #156]	; (8005408 <Soldering_Heat_Gun_INI+0x10c>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a1b      	ldr	r2, [pc, #108]	; (80053dc <Soldering_Heat_Gun_INI+0xe0>)
 8005370:	6793      	str	r3, [r2, #120]	; 0x78

	struct PAC_Devices_Control_Init element_ini;

	element_ini.Channel_GPIO = GPIOB;
 8005372:	4b24      	ldr	r3, [pc, #144]	; (8005404 <Soldering_Heat_Gun_INI+0x108>)
 8005374:	613b      	str	r3, [r7, #16]
	element_ini.Channel_PIN = GPIO_PIN_1;
 8005376:	2302      	movs	r3, #2
 8005378:	81bb      	strh	r3, [r7, #12]
	element_ini.TIM_CHANNEL = TIM_CHANNEL_4;
 800537a:	230c      	movs	r3, #12
 800537c:	617b      	str	r3, [r7, #20]

	Soldering_Heat_Gun.PAC_Control = PAC_Devise_Control_Create(PAC, &element_ini);
 800537e:	4b22      	ldr	r3, [pc, #136]	; (8005408 <Soldering_Heat_Gun_INI+0x10c>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f107 020c 	add.w	r2, r7, #12
 8005386:	4611      	mov	r1, r2
 8005388:	4618      	mov	r0, r3
 800538a:	f7fc fbab 	bl	8001ae4 <PAC_Devise_Control_Create>
 800538e:	4603      	mov	r3, r0
 8005390:	4a12      	ldr	r2, [pc, #72]	; (80053dc <Soldering_Heat_Gun_INI+0xe0>)
 8005392:	6753      	str	r3, [r2, #116]	; 0x74


	Soldering_Heat_Gun.Temperature_Converting.Coeff=Soldering_Heat_Gun_Temperature_Converting_Coeff;
 8005394:	4b11      	ldr	r3, [pc, #68]	; (80053dc <Soldering_Heat_Gun_INI+0xe0>)
 8005396:	4a1d      	ldr	r2, [pc, #116]	; (800540c <Soldering_Heat_Gun_INI+0x110>)
 8005398:	659a      	str	r2, [r3, #88]	; 0x58

	if(Flash_Read_Status!=HAL_OK){									//if Data was read incorrect from flash reinitialize all user parameters
 800539a:	79fb      	ldrb	r3, [r7, #7]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00f      	beq.n	80053c0 <Soldering_Heat_Gun_INI+0xc4>
		Soldering_Heat_Gun.Temperature_Presets_C.Preset1=100;
 80053a0:	4b0e      	ldr	r3, [pc, #56]	; (80053dc <Soldering_Heat_Gun_INI+0xe0>)
 80053a2:	2264      	movs	r2, #100	; 0x64
 80053a4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		Soldering_Heat_Gun.Temperature_Presets_C.Preset2=200;
 80053a8:	4b0c      	ldr	r3, [pc, #48]	; (80053dc <Soldering_Heat_Gun_INI+0xe0>)
 80053aa:	22c8      	movs	r2, #200	; 0xc8
 80053ac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
		Soldering_Heat_Gun.Temperature_Coolling.C=50;
 80053b0:	4b0a      	ldr	r3, [pc, #40]	; (80053dc <Soldering_Heat_Gun_INI+0xe0>)
 80053b2:	2232      	movs	r2, #50	; 0x32
 80053b4:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
		Soldering_Heat_Gun.Flash_Key=Soldering_Heat_Gun_Struct_Key;
 80053b8:	4b08      	ldr	r3, [pc, #32]	; (80053dc <Soldering_Heat_Gun_INI+0xe0>)
 80053ba:	4a15      	ldr	r2, [pc, #84]	; (8005410 <Soldering_Heat_Gun_INI+0x114>)
 80053bc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	}

	Soldering_Heat_Gun_Flash_Read_Manual_Temperature(&Soldering_Heat_Gun); //read Last manual temperature
 80053c0:	4806      	ldr	r0, [pc, #24]	; (80053dc <Soldering_Heat_Gun_INI+0xe0>)
 80053c2:	f7fd fe4d 	bl	8003060 <Soldering_Heat_Gun_Flash_Read_Manual_Temperature>

	Soldering_Heat_Gun_ini(&Soldering_Heat_Gun);
 80053c6:	4805      	ldr	r0, [pc, #20]	; (80053dc <Soldering_Heat_Gun_INI+0xe0>)
 80053c8:	f7fd fc4f 	bl	8002c6a <Soldering_Heat_Gun_ini>

	Soldering_Heat_Gun_OFF(&Soldering_Heat_Gun);
 80053cc:	4803      	ldr	r0, [pc, #12]	; (80053dc <Soldering_Heat_Gun_INI+0xe0>)
 80053ce:	f7fd fc93 	bl	8002cf8 <Soldering_Heat_Gun_OFF>


}
 80053d2:	bf00      	nop
 80053d4:	3718      	adds	r7, #24
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	2000060c 	.word	0x2000060c
 80053e0:	3e4ccccd 	.word	0x3e4ccccd
 80053e4:	3c23d70a 	.word	0x3c23d70a
 80053e8:	3ecccccd 	.word	0x3ecccccd
 80053ec:	3dcccccd 	.word	0x3dcccccd
 80053f0:	3cf5c28f 	.word	0x3cf5c28f
 80053f4:	3f4ccccd 	.word	0x3f4ccccd
 80053f8:	42700000 	.word	0x42700000
 80053fc:	20000736 	.word	0x20000736
 8005400:	40011000 	.word	0x40011000
 8005404:	40010c00 	.word	0x40010c00
 8005408:	20000730 	.word	0x20000730
 800540c:	41066666 	.word	0x41066666
 8005410:	0801f804 	.word	0x0801f804

08005414 <Soldering_Separator_INI>:
//----------------------------------------------------------------------------
void Soldering_Separator_INI(uint8_t Flash_Read_Status){
 8005414:	b580      	push	{r7, lr}
 8005416:	b086      	sub	sp, #24
 8005418:	af00      	add	r7, sp, #0
 800541a:	4603      	mov	r3, r0
 800541c:	71fb      	strb	r3, [r7, #7]
	Soldering_Separator.PID.KP=Soldering_Separator_PID_KP;
 800541e:	4b2a      	ldr	r3, [pc, #168]	; (80054c8 <Soldering_Separator_INI+0xb4>)
 8005420:	4a2a      	ldr	r2, [pc, #168]	; (80054cc <Soldering_Separator_INI+0xb8>)
 8005422:	601a      	str	r2, [r3, #0]
	Soldering_Separator.PID.KI=Soldering_Separator_PID_KI;
 8005424:	4b28      	ldr	r3, [pc, #160]	; (80054c8 <Soldering_Separator_INI+0xb4>)
 8005426:	4a2a      	ldr	r2, [pc, #168]	; (80054d0 <Soldering_Separator_INI+0xbc>)
 8005428:	605a      	str	r2, [r3, #4]
	Soldering_Separator.PID.KD=Soldering_Separator_PID_KD;
 800542a:	4b27      	ldr	r3, [pc, #156]	; (80054c8 <Soldering_Separator_INI+0xb4>)
 800542c:	4a29      	ldr	r2, [pc, #164]	; (80054d4 <Soldering_Separator_INI+0xc0>)
 800542e:	609a      	str	r2, [r3, #8]
	Soldering_Separator.PID.dt=0.1;
 8005430:	4b25      	ldr	r3, [pc, #148]	; (80054c8 <Soldering_Separator_INI+0xb4>)
 8005432:	4a29      	ldr	r2, [pc, #164]	; (80054d8 <Soldering_Separator_INI+0xc4>)
 8005434:	60da      	str	r2, [r3, #12]


	Soldering_Separator.Filter.Filter_Mode=Three_Samples;
 8005436:	4b24      	ldr	r3, [pc, #144]	; (80054c8 <Soldering_Separator_INI+0xb4>)
 8005438:	2201      	movs	r2, #1
 800543a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Soldering_Separator.Filter.k_min=0.1;
 800543e:	4b22      	ldr	r3, [pc, #136]	; (80054c8 <Soldering_Separator_INI+0xb4>)
 8005440:	4a25      	ldr	r2, [pc, #148]	; (80054d8 <Soldering_Separator_INI+0xc4>)
 8005442:	629a      	str	r2, [r3, #40]	; 0x28
	Soldering_Separator.Filter.k_max=0.3;
 8005444:	4b20      	ldr	r3, [pc, #128]	; (80054c8 <Soldering_Separator_INI+0xb4>)
 8005446:	4a25      	ldr	r2, [pc, #148]	; (80054dc <Soldering_Separator_INI+0xc8>)
 8005448:	62da      	str	r2, [r3, #44]	; 0x2c
	Soldering_Separator.Filter.Val_Delata=60;
 800544a:	4b1f      	ldr	r3, [pc, #124]	; (80054c8 <Soldering_Separator_INI+0xb4>)
 800544c:	4a24      	ldr	r2, [pc, #144]	; (80054e0 <Soldering_Separator_INI+0xcc>)
 800544e:	635a      	str	r2, [r3, #52]	; 0x34
	Soldering_Separator.Filter.mass=&ADC_Data[13];
 8005450:	4b1d      	ldr	r3, [pc, #116]	; (80054c8 <Soldering_Separator_INI+0xb4>)
 8005452:	4a24      	ldr	r2, [pc, #144]	; (80054e4 <Soldering_Separator_INI+0xd0>)
 8005454:	641a      	str	r2, [r3, #64]	; 0x40


	Soldering_Separator.MODE=MANUAL;
 8005456:	4b1c      	ldr	r3, [pc, #112]	; (80054c8 <Soldering_Separator_INI+0xb4>)
 8005458:	2200      	movs	r2, #0
 800545a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

	Soldering_Separator.PAC = PAC;
 800545e:	4b22      	ldr	r3, [pc, #136]	; (80054e8 <Soldering_Separator_INI+0xd4>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a19      	ldr	r2, [pc, #100]	; (80054c8 <Soldering_Separator_INI+0xb4>)
 8005464:	6793      	str	r3, [r2, #120]	; 0x78

	struct PAC_Devices_Control_Init element_ini;

	element_ini.Channel_GPIO = GPIOA;
 8005466:	4b21      	ldr	r3, [pc, #132]	; (80054ec <Soldering_Separator_INI+0xd8>)
 8005468:	613b      	str	r3, [r7, #16]
	element_ini.Channel_PIN = GPIO_PIN_7;
 800546a:	2380      	movs	r3, #128	; 0x80
 800546c:	81bb      	strh	r3, [r7, #12]
	element_ini.TIM_CHANNEL = TIM_CHANNEL_2;
 800546e:	2304      	movs	r3, #4
 8005470:	617b      	str	r3, [r7, #20]

	Soldering_Separator.PAC_Control = PAC_Devise_Control_Create(PAC, &element_ini);
 8005472:	4b1d      	ldr	r3, [pc, #116]	; (80054e8 <Soldering_Separator_INI+0xd4>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f107 020c 	add.w	r2, r7, #12
 800547a:	4611      	mov	r1, r2
 800547c:	4618      	mov	r0, r3
 800547e:	f7fc fb31 	bl	8001ae4 <PAC_Devise_Control_Create>
 8005482:	4603      	mov	r3, r0
 8005484:	4a10      	ldr	r2, [pc, #64]	; (80054c8 <Soldering_Separator_INI+0xb4>)
 8005486:	6753      	str	r3, [r2, #116]	; 0x74

	Soldering_Separator.Temperature_Converting.Coeff=Soldering_Separator_Temperature_Converting_Coeff;
 8005488:	4b0f      	ldr	r3, [pc, #60]	; (80054c8 <Soldering_Separator_INI+0xb4>)
 800548a:	4a19      	ldr	r2, [pc, #100]	; (80054f0 <Soldering_Separator_INI+0xdc>)
 800548c:	659a      	str	r2, [r3, #88]	; 0x58

	if(Flash_Read_Status!=HAL_OK){									//if Data was read incorrect from flash reinitialize all user parameters
 800548e:	79fb      	ldrb	r3, [r7, #7]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d00b      	beq.n	80054ac <Soldering_Separator_INI+0x98>
		Soldering_Separator.Temperature_Presets_C.Preset1=150;
 8005494:	4b0c      	ldr	r3, [pc, #48]	; (80054c8 <Soldering_Separator_INI+0xb4>)
 8005496:	2296      	movs	r2, #150	; 0x96
 8005498:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		Soldering_Separator.Temperature_Presets_C.Preset2=200;
 800549c:	4b0a      	ldr	r3, [pc, #40]	; (80054c8 <Soldering_Separator_INI+0xb4>)
 800549e:	22c8      	movs	r2, #200	; 0xc8
 80054a0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
		Soldering_Separator.Flash_Key=Soldering_Separator_Struct_Key;
 80054a4:	4b08      	ldr	r3, [pc, #32]	; (80054c8 <Soldering_Separator_INI+0xb4>)
 80054a6:	4a13      	ldr	r2, [pc, #76]	; (80054f4 <Soldering_Separator_INI+0xe0>)
 80054a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	}

	Soldering_Separator_Flash_Read_Manual_Temperature(&Soldering_Separator);	//read Last manual temperature
 80054ac:	4806      	ldr	r0, [pc, #24]	; (80054c8 <Soldering_Separator_INI+0xb4>)
 80054ae:	f7fd ff79 	bl	80033a4 <Soldering_Separator_Flash_Read_Manual_Temperature>

	Soldering_Separator_ini(&Soldering_Separator);
 80054b2:	4805      	ldr	r0, [pc, #20]	; (80054c8 <Soldering_Separator_INI+0xb4>)
 80054b4:	f7fd fdf3 	bl	800309e <Soldering_Separator_ini>

	Soldering_Separator_OFF(&Soldering_Separator);
 80054b8:	4803      	ldr	r0, [pc, #12]	; (80054c8 <Soldering_Separator_INI+0xb4>)
 80054ba:	f7fd fe23 	bl	8003104 <Soldering_Separator_OFF>
}
 80054be:	bf00      	nop
 80054c0:	3718      	adds	r7, #24
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	200006a8 	.word	0x200006a8
 80054cc:	3e19999a 	.word	0x3e19999a
 80054d0:	3a03126f 	.word	0x3a03126f
 80054d4:	3a83126f 	.word	0x3a83126f
 80054d8:	3dcccccd 	.word	0x3dcccccd
 80054dc:	3e99999a 	.word	0x3e99999a
 80054e0:	42700000 	.word	0x42700000
 80054e4:	2000074e 	.word	0x2000074e
 80054e8:	20000730 	.word	0x20000730
 80054ec:	40010800 	.word	0x40010800
 80054f0:	404ccccd 	.word	0x404ccccd
 80054f4:	1801f804 	.word	0x1801f804

080054f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80054fe:	f000 ff33 	bl	8006368 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005502:	f000 f871 	bl	80055e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005506:	f000 fb25 	bl	8005b54 <MX_GPIO_Init>
  MX_DMA_Init();
 800550a:	f000 fafd 	bl	8005b08 <MX_DMA_Init>
  MX_ADC1_Init();
 800550e:	f000 f8bb 	bl	8005688 <MX_ADC1_Init>
  MX_I2C1_Init();
 8005512:	f000 f9b5 	bl	8005880 <MX_I2C1_Init>
  MX_TIM2_Init();
 8005516:	f000 fa33 	bl	8005980 <MX_TIM2_Init>
  MX_TIM1_Init();
 800551a:	f000 f9df 	bl	80058dc <MX_TIM1_Init>
  MX_TIM4_Init();
 800551e:	f000 faa5 	bl	8005a6c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  //---------------------------------------------------------------------------------
  uint8_t Flash_Read_Status;

  Flash_Read_Status = Soldering_Station_Read_Struct(&Soldering_Iron, &Soldering_Heat_Gun, &Soldering_Separator);
 8005522:	4a27      	ldr	r2, [pc, #156]	; (80055c0 <main+0xc8>)
 8005524:	4927      	ldr	r1, [pc, #156]	; (80055c4 <main+0xcc>)
 8005526:	4828      	ldr	r0, [pc, #160]	; (80055c8 <main+0xd0>)
 8005528:	f7fd ff6e 	bl	8003408 <Soldering_Station_Read_Struct>
 800552c:	4603      	mov	r3, r0
 800552e:	71fb      	strb	r3, [r7, #7]


  BUTTON_INI();
 8005530:	f7ff fbbc 	bl	8004cac <BUTTON_INI>
  Encoder_INI();
 8005534:	f7ff fc46 	bl	8004dc4 <Encoder_INI>
  MENU_INI();
 8005538:	f7ff fcaa 	bl	8004e90 <MENU_INI>
  OLED_INI();
 800553c:	f7ff fe0c 	bl	8005158 <OLED_INI>
  PAC_INI();
 8005540:	f7ff feb8 	bl	80052b4 <PAC_INI>
  Soldering_Iron_INI(Flash_Read_Status);
 8005544:	79fb      	ldrb	r3, [r7, #7]
 8005546:	4618      	mov	r0, r3
 8005548:	f7ff fe18 	bl	800517c <Soldering_Iron_INI>
  Soldering_Heat_Gun_INI(Flash_Read_Status);
 800554c:	79fb      	ldrb	r3, [r7, #7]
 800554e:	4618      	mov	r0, r3
 8005550:	f7ff fed4 	bl	80052fc <Soldering_Heat_Gun_INI>
  Soldering_Separator_INI(Flash_Read_Status);
 8005554:	79fb      	ldrb	r3, [r7, #7]
 8005556:	4618      	mov	r0, r3
 8005558:	f7ff ff5c 	bl	8005414 <Soldering_Separator_INI>

  if(Flash_Read_Status!=HAL_OK)							//if Struct was read incorrect
 800555c:	79fb      	ldrb	r3, [r7, #7]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d004      	beq.n	800556c <main+0x74>
	  Soldering_Station_Write_Struct(&Soldering_Iron, &Soldering_Heat_Gun, &Soldering_Separator);	//Rewrite all structures
 8005562:	4a17      	ldr	r2, [pc, #92]	; (80055c0 <main+0xc8>)
 8005564:	4917      	ldr	r1, [pc, #92]	; (80055c4 <main+0xcc>)
 8005566:	4818      	ldr	r0, [pc, #96]	; (80055c8 <main+0xd0>)
 8005568:	f7fd ff80 	bl	800346c <Soldering_Station_Write_Struct>

  //---------------------------------------------------------------------------------TIM
	__HAL_TIM_CLEAR_FLAG(&htim1, TIM_SR_UIF);
 800556c:	4b17      	ldr	r3, [pc, #92]	; (80055cc <main+0xd4>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f06f 0201 	mvn.w	r2, #1
 8005574:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&htim1);
 8005576:	4815      	ldr	r0, [pc, #84]	; (80055cc <main+0xd4>)
 8005578:	f003 ff12 	bl	80093a0 <HAL_TIM_Base_Start_IT>
	__HAL_TIM_CLEAR_FLAG(&htim2, TIM_SR_UIF);
 800557c:	4b14      	ldr	r3, [pc, #80]	; (80055d0 <main+0xd8>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f06f 0201 	mvn.w	r2, #1
 8005584:	611a      	str	r2, [r3, #16]
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8005586:	210c      	movs	r1, #12
 8005588:	4811      	ldr	r0, [pc, #68]	; (80055d0 <main+0xd8>)
 800558a:	f004 f811 	bl	80095b0 <HAL_TIM_PWM_Start>


	__HAL_TIM_CLEAR_FLAG(&htim4, TIM_SR_UIF);
 800558e:	4b11      	ldr	r3, [pc, #68]	; (80055d4 <main+0xdc>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f06f 0201 	mvn.w	r2, #1
 8005596:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&htim4);
 8005598:	480e      	ldr	r0, [pc, #56]	; (80055d4 <main+0xdc>)
 800559a:	f003 ff01 	bl	80093a0 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  Face_UI_it(&Encoder_P1, &Encoder_P2, &Button_Vector);
 800559e:	4a0e      	ldr	r2, [pc, #56]	; (80055d8 <main+0xe0>)
 80055a0:	490e      	ldr	r1, [pc, #56]	; (80055dc <main+0xe4>)
 80055a2:	480f      	ldr	r0, [pc, #60]	; (80055e0 <main+0xe8>)
 80055a4:	f7fe fde2 	bl	800416c <Face_UI_it>
	  UI_Menu_it(&Menu_List_Vector, &Encoder_P2, &Button_Vector);
 80055a8:	4a0b      	ldr	r2, [pc, #44]	; (80055d8 <main+0xe0>)
 80055aa:	490c      	ldr	r1, [pc, #48]	; (80055dc <main+0xe4>)
 80055ac:	480d      	ldr	r0, [pc, #52]	; (80055e4 <main+0xec>)
 80055ae:	f7ff f9c3 	bl	8004938 <UI_Menu_it>
	  Soldering_Station_Write_Struct(&Soldering_Iron, &Soldering_Heat_Gun, &Soldering_Separator);	//Write all struct in flash after changing in UI_Menu
 80055b2:	4a03      	ldr	r2, [pc, #12]	; (80055c0 <main+0xc8>)
 80055b4:	4903      	ldr	r1, [pc, #12]	; (80055c4 <main+0xcc>)
 80055b6:	4804      	ldr	r0, [pc, #16]	; (80055c8 <main+0xd0>)
 80055b8:	f7fd ff58 	bl	800346c <Soldering_Station_Write_Struct>
	  Face_UI_it(&Encoder_P1, &Encoder_P2, &Button_Vector);
 80055bc:	e7ef      	b.n	800559e <main+0xa6>
 80055be:	bf00      	nop
 80055c0:	200006a8 	.word	0x200006a8
 80055c4:	2000060c 	.word	0x2000060c
 80055c8:	20000560 	.word	0x20000560
 80055cc:	20000380 	.word	0x20000380
 80055d0:	200003c8 	.word	0x200003c8
 80055d4:	20000410 	.word	0x20000410
 80055d8:	2000050c 	.word	0x2000050c
 80055dc:	200004a4 	.word	0x200004a4
 80055e0:	200004d8 	.word	0x200004d8
 80055e4:	20000550 	.word	0x20000550

080055e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b094      	sub	sp, #80	; 0x50
 80055ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80055ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80055f2:	2228      	movs	r2, #40	; 0x28
 80055f4:	2100      	movs	r1, #0
 80055f6:	4618      	mov	r0, r3
 80055f8:	f005 fcfa 	bl	800aff0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80055fc:	f107 0314 	add.w	r3, r7, #20
 8005600:	2200      	movs	r2, #0
 8005602:	601a      	str	r2, [r3, #0]
 8005604:	605a      	str	r2, [r3, #4]
 8005606:	609a      	str	r2, [r3, #8]
 8005608:	60da      	str	r2, [r3, #12]
 800560a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800560c:	1d3b      	adds	r3, r7, #4
 800560e:	2200      	movs	r2, #0
 8005610:	601a      	str	r2, [r3, #0]
 8005612:	605a      	str	r2, [r3, #4]
 8005614:	609a      	str	r2, [r3, #8]
 8005616:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005618:	2301      	movs	r3, #1
 800561a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800561c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005620:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8005622:	2300      	movs	r3, #0
 8005624:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005626:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800562a:	4618      	mov	r0, r3
 800562c:	f003 f958 	bl	80088e0 <HAL_RCC_OscConfig>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d001      	beq.n	800563a <SystemClock_Config+0x52>
  {
    Error_Handler();
 8005636:	f000 fbbf 	bl	8005db8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800563a:	230f      	movs	r3, #15
 800563c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800563e:	2301      	movs	r3, #1
 8005640:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005642:	2300      	movs	r3, #0
 8005644:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005646:	2300      	movs	r3, #0
 8005648:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800564a:	2300      	movs	r3, #0
 800564c:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800564e:	f107 0314 	add.w	r3, r7, #20
 8005652:	2100      	movs	r1, #0
 8005654:	4618      	mov	r0, r3
 8005656:	f003 fbc5 	bl	8008de4 <HAL_RCC_ClockConfig>
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d001      	beq.n	8005664 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8005660:	f000 fbaa 	bl	8005db8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8005664:	2302      	movs	r3, #2
 8005666:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8005668:	2300      	movs	r3, #0
 800566a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800566c:	1d3b      	adds	r3, r7, #4
 800566e:	4618      	mov	r0, r3
 8005670:	f003 fd3c 	bl	80090ec <HAL_RCCEx_PeriphCLKConfig>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d001      	beq.n	800567e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800567a:	f000 fb9d 	bl	8005db8 <Error_Handler>
  }
}
 800567e:	bf00      	nop
 8005680:	3750      	adds	r7, #80	; 0x50
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
	...

08005688 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800568e:	1d3b      	adds	r3, r7, #4
 8005690:	2200      	movs	r2, #0
 8005692:	601a      	str	r2, [r3, #0]
 8005694:	605a      	str	r2, [r3, #4]
 8005696:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8005698:	4b77      	ldr	r3, [pc, #476]	; (8005878 <MX_ADC1_Init+0x1f0>)
 800569a:	4a78      	ldr	r2, [pc, #480]	; (800587c <MX_ADC1_Init+0x1f4>)
 800569c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800569e:	4b76      	ldr	r3, [pc, #472]	; (8005878 <MX_ADC1_Init+0x1f0>)
 80056a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80056a6:	4b74      	ldr	r3, [pc, #464]	; (8005878 <MX_ADC1_Init+0x1f0>)
 80056a8:	2200      	movs	r2, #0
 80056aa:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80056ac:	4b72      	ldr	r3, [pc, #456]	; (8005878 <MX_ADC1_Init+0x1f0>)
 80056ae:	2200      	movs	r2, #0
 80056b0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80056b2:	4b71      	ldr	r3, [pc, #452]	; (8005878 <MX_ADC1_Init+0x1f0>)
 80056b4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80056b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80056ba:	4b6f      	ldr	r3, [pc, #444]	; (8005878 <MX_ADC1_Init+0x1f0>)
 80056bc:	2200      	movs	r2, #0
 80056be:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 16;
 80056c0:	4b6d      	ldr	r3, [pc, #436]	; (8005878 <MX_ADC1_Init+0x1f0>)
 80056c2:	2210      	movs	r2, #16
 80056c4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80056c6:	486c      	ldr	r0, [pc, #432]	; (8005878 <MX_ADC1_Init+0x1f0>)
 80056c8:	f000 feb0 	bl	800642c <HAL_ADC_Init>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d001      	beq.n	80056d6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80056d2:	f000 fb71 	bl	8005db8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80056d6:	2300      	movs	r3, #0
 80056d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80056da:	2301      	movs	r3, #1
 80056dc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80056de:	2305      	movs	r3, #5
 80056e0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80056e2:	1d3b      	adds	r3, r7, #4
 80056e4:	4619      	mov	r1, r3
 80056e6:	4864      	ldr	r0, [pc, #400]	; (8005878 <MX_ADC1_Init+0x1f0>)
 80056e8:	f001 f934 	bl	8006954 <HAL_ADC_ConfigChannel>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d001      	beq.n	80056f6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80056f2:	f000 fb61 	bl	8005db8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80056f6:	2301      	movs	r3, #1
 80056f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80056fa:	2302      	movs	r3, #2
 80056fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80056fe:	1d3b      	adds	r3, r7, #4
 8005700:	4619      	mov	r1, r3
 8005702:	485d      	ldr	r0, [pc, #372]	; (8005878 <MX_ADC1_Init+0x1f0>)
 8005704:	f001 f926 	bl	8006954 <HAL_ADC_ConfigChannel>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d001      	beq.n	8005712 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800570e:	f000 fb53 	bl	8005db8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8005712:	2303      	movs	r3, #3
 8005714:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005716:	1d3b      	adds	r3, r7, #4
 8005718:	4619      	mov	r1, r3
 800571a:	4857      	ldr	r0, [pc, #348]	; (8005878 <MX_ADC1_Init+0x1f0>)
 800571c:	f001 f91a 	bl	8006954 <HAL_ADC_ConfigChannel>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d001      	beq.n	800572a <MX_ADC1_Init+0xa2>
  {
    Error_Handler();
 8005726:	f000 fb47 	bl	8005db8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800572a:	2304      	movs	r3, #4
 800572c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800572e:	1d3b      	adds	r3, r7, #4
 8005730:	4619      	mov	r1, r3
 8005732:	4851      	ldr	r0, [pc, #324]	; (8005878 <MX_ADC1_Init+0x1f0>)
 8005734:	f001 f90e 	bl	8006954 <HAL_ADC_ConfigChannel>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d001      	beq.n	8005742 <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 800573e:	f000 fb3b 	bl	8005db8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8005742:	2305      	movs	r3, #5
 8005744:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8005746:	2305      	movs	r3, #5
 8005748:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800574a:	1d3b      	adds	r3, r7, #4
 800574c:	4619      	mov	r1, r3
 800574e:	484a      	ldr	r0, [pc, #296]	; (8005878 <MX_ADC1_Init+0x1f0>)
 8005750:	f001 f900 	bl	8006954 <HAL_ADC_ConfigChannel>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d001      	beq.n	800575e <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 800575a:	f000 fb2d 	bl	8005db8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800575e:	2306      	movs	r3, #6
 8005760:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005762:	1d3b      	adds	r3, r7, #4
 8005764:	4619      	mov	r1, r3
 8005766:	4844      	ldr	r0, [pc, #272]	; (8005878 <MX_ADC1_Init+0x1f0>)
 8005768:	f001 f8f4 	bl	8006954 <HAL_ADC_ConfigChannel>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d001      	beq.n	8005776 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8005772:	f000 fb21 	bl	8005db8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8005776:	2307      	movs	r3, #7
 8005778:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800577a:	1d3b      	adds	r3, r7, #4
 800577c:	4619      	mov	r1, r3
 800577e:	483e      	ldr	r0, [pc, #248]	; (8005878 <MX_ADC1_Init+0x1f0>)
 8005780:	f001 f8e8 	bl	8006954 <HAL_ADC_ConfigChannel>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d001      	beq.n	800578e <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 800578a:	f000 fb15 	bl	8005db8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800578e:	2308      	movs	r3, #8
 8005790:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005792:	1d3b      	adds	r3, r7, #4
 8005794:	4619      	mov	r1, r3
 8005796:	4838      	ldr	r0, [pc, #224]	; (8005878 <MX_ADC1_Init+0x1f0>)
 8005798:	f001 f8dc 	bl	8006954 <HAL_ADC_ConfigChannel>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d001      	beq.n	80057a6 <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 80057a2:	f000 fb09 	bl	8005db8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80057a6:	2309      	movs	r3, #9
 80057a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80057aa:	1d3b      	adds	r3, r7, #4
 80057ac:	4619      	mov	r1, r3
 80057ae:	4832      	ldr	r0, [pc, #200]	; (8005878 <MX_ADC1_Init+0x1f0>)
 80057b0:	f001 f8d0 	bl	8006954 <HAL_ADC_ConfigChannel>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d001      	beq.n	80057be <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 80057ba:	f000 fafd 	bl	8005db8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80057be:	230a      	movs	r3, #10
 80057c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80057c2:	1d3b      	adds	r3, r7, #4
 80057c4:	4619      	mov	r1, r3
 80057c6:	482c      	ldr	r0, [pc, #176]	; (8005878 <MX_ADC1_Init+0x1f0>)
 80057c8:	f001 f8c4 	bl	8006954 <HAL_ADC_ConfigChannel>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d001      	beq.n	80057d6 <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 80057d2:	f000 faf1 	bl	8005db8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80057d6:	230b      	movs	r3, #11
 80057d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80057da:	1d3b      	adds	r3, r7, #4
 80057dc:	4619      	mov	r1, r3
 80057de:	4826      	ldr	r0, [pc, #152]	; (8005878 <MX_ADC1_Init+0x1f0>)
 80057e0:	f001 f8b8 	bl	8006954 <HAL_ADC_ConfigChannel>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d001      	beq.n	80057ee <MX_ADC1_Init+0x166>
  {
    Error_Handler();
 80057ea:	f000 fae5 	bl	8005db8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_12;
 80057ee:	230c      	movs	r3, #12
 80057f0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80057f2:	1d3b      	adds	r3, r7, #4
 80057f4:	4619      	mov	r1, r3
 80057f6:	4820      	ldr	r0, [pc, #128]	; (8005878 <MX_ADC1_Init+0x1f0>)
 80057f8:	f001 f8ac 	bl	8006954 <HAL_ADC_ConfigChannel>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d001      	beq.n	8005806 <MX_ADC1_Init+0x17e>
  {
    Error_Handler();
 8005802:	f000 fad9 	bl	8005db8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8005806:	230d      	movs	r3, #13
 8005808:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800580a:	1d3b      	adds	r3, r7, #4
 800580c:	4619      	mov	r1, r3
 800580e:	481a      	ldr	r0, [pc, #104]	; (8005878 <MX_ADC1_Init+0x1f0>)
 8005810:	f001 f8a0 	bl	8006954 <HAL_ADC_ConfigChannel>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d001      	beq.n	800581e <MX_ADC1_Init+0x196>
  {
    Error_Handler();
 800581a:	f000 facd 	bl	8005db8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800581e:	2308      	movs	r3, #8
 8005820:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 8005822:	230e      	movs	r3, #14
 8005824:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8005826:	2307      	movs	r3, #7
 8005828:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800582a:	1d3b      	adds	r3, r7, #4
 800582c:	4619      	mov	r1, r3
 800582e:	4812      	ldr	r0, [pc, #72]	; (8005878 <MX_ADC1_Init+0x1f0>)
 8005830:	f001 f890 	bl	8006954 <HAL_ADC_ConfigChannel>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d001      	beq.n	800583e <MX_ADC1_Init+0x1b6>
  {
    Error_Handler();
 800583a:	f000 fabd 	bl	8005db8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_15;
 800583e:	230f      	movs	r3, #15
 8005840:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005842:	1d3b      	adds	r3, r7, #4
 8005844:	4619      	mov	r1, r3
 8005846:	480c      	ldr	r0, [pc, #48]	; (8005878 <MX_ADC1_Init+0x1f0>)
 8005848:	f001 f884 	bl	8006954 <HAL_ADC_ConfigChannel>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d001      	beq.n	8005856 <MX_ADC1_Init+0x1ce>
  {
    Error_Handler();
 8005852:	f000 fab1 	bl	8005db8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_16;
 8005856:	2310      	movs	r3, #16
 8005858:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800585a:	1d3b      	adds	r3, r7, #4
 800585c:	4619      	mov	r1, r3
 800585e:	4806      	ldr	r0, [pc, #24]	; (8005878 <MX_ADC1_Init+0x1f0>)
 8005860:	f001 f878 	bl	8006954 <HAL_ADC_ConfigChannel>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d001      	beq.n	800586e <MX_ADC1_Init+0x1e6>
  {
    Error_Handler();
 800586a:	f000 faa5 	bl	8005db8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800586e:	bf00      	nop
 8005870:	3710      	adds	r7, #16
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	200002b8 	.word	0x200002b8
 800587c:	40012400 	.word	0x40012400

08005880 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005884:	4b12      	ldr	r3, [pc, #72]	; (80058d0 <MX_I2C1_Init+0x50>)
 8005886:	4a13      	ldr	r2, [pc, #76]	; (80058d4 <MX_I2C1_Init+0x54>)
 8005888:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800588a:	4b11      	ldr	r3, [pc, #68]	; (80058d0 <MX_I2C1_Init+0x50>)
 800588c:	4a12      	ldr	r2, [pc, #72]	; (80058d8 <MX_I2C1_Init+0x58>)
 800588e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005890:	4b0f      	ldr	r3, [pc, #60]	; (80058d0 <MX_I2C1_Init+0x50>)
 8005892:	2200      	movs	r2, #0
 8005894:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005896:	4b0e      	ldr	r3, [pc, #56]	; (80058d0 <MX_I2C1_Init+0x50>)
 8005898:	2200      	movs	r2, #0
 800589a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800589c:	4b0c      	ldr	r3, [pc, #48]	; (80058d0 <MX_I2C1_Init+0x50>)
 800589e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80058a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80058a4:	4b0a      	ldr	r3, [pc, #40]	; (80058d0 <MX_I2C1_Init+0x50>)
 80058a6:	2200      	movs	r2, #0
 80058a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80058aa:	4b09      	ldr	r3, [pc, #36]	; (80058d0 <MX_I2C1_Init+0x50>)
 80058ac:	2200      	movs	r2, #0
 80058ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80058b0:	4b07      	ldr	r3, [pc, #28]	; (80058d0 <MX_I2C1_Init+0x50>)
 80058b2:	2200      	movs	r2, #0
 80058b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80058b6:	4b06      	ldr	r3, [pc, #24]	; (80058d0 <MX_I2C1_Init+0x50>)
 80058b8:	2200      	movs	r2, #0
 80058ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80058bc:	4804      	ldr	r0, [pc, #16]	; (80058d0 <MX_I2C1_Init+0x50>)
 80058be:	f002 fa97 	bl	8007df0 <HAL_I2C_Init>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d001      	beq.n	80058cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80058c8:	f000 fa76 	bl	8005db8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80058cc:	bf00      	nop
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	2000032c 	.word	0x2000032c
 80058d4:	40005400 	.word	0x40005400
 80058d8:	00061a80 	.word	0x00061a80

080058dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b086      	sub	sp, #24
 80058e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80058e2:	f107 0308 	add.w	r3, r7, #8
 80058e6:	2200      	movs	r2, #0
 80058e8:	601a      	str	r2, [r3, #0]
 80058ea:	605a      	str	r2, [r3, #4]
 80058ec:	609a      	str	r2, [r3, #8]
 80058ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80058f0:	463b      	mov	r3, r7
 80058f2:	2200      	movs	r2, #0
 80058f4:	601a      	str	r2, [r3, #0]
 80058f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80058f8:	4b1f      	ldr	r3, [pc, #124]	; (8005978 <MX_TIM1_Init+0x9c>)
 80058fa:	4a20      	ldr	r2, [pc, #128]	; (800597c <MX_TIM1_Init+0xa0>)
 80058fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 799;
 80058fe:	4b1e      	ldr	r3, [pc, #120]	; (8005978 <MX_TIM1_Init+0x9c>)
 8005900:	f240 321f 	movw	r2, #799	; 0x31f
 8005904:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005906:	4b1c      	ldr	r3, [pc, #112]	; (8005978 <MX_TIM1_Init+0x9c>)
 8005908:	2200      	movs	r2, #0
 800590a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 499;
 800590c:	4b1a      	ldr	r3, [pc, #104]	; (8005978 <MX_TIM1_Init+0x9c>)
 800590e:	f240 12f3 	movw	r2, #499	; 0x1f3
 8005912:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005914:	4b18      	ldr	r3, [pc, #96]	; (8005978 <MX_TIM1_Init+0x9c>)
 8005916:	2200      	movs	r2, #0
 8005918:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800591a:	4b17      	ldr	r3, [pc, #92]	; (8005978 <MX_TIM1_Init+0x9c>)
 800591c:	2200      	movs	r2, #0
 800591e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005920:	4b15      	ldr	r3, [pc, #84]	; (8005978 <MX_TIM1_Init+0x9c>)
 8005922:	2200      	movs	r2, #0
 8005924:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005926:	4814      	ldr	r0, [pc, #80]	; (8005978 <MX_TIM1_Init+0x9c>)
 8005928:	f003 fc96 	bl	8009258 <HAL_TIM_Base_Init>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d001      	beq.n	8005936 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8005932:	f000 fa41 	bl	8005db8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005936:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800593a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800593c:	f107 0308 	add.w	r3, r7, #8
 8005940:	4619      	mov	r1, r3
 8005942:	480d      	ldr	r0, [pc, #52]	; (8005978 <MX_TIM1_Init+0x9c>)
 8005944:	f004 fbd4 	bl	800a0f0 <HAL_TIM_ConfigClockSource>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d001      	beq.n	8005952 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800594e:	f000 fa33 	bl	8005db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005952:	2300      	movs	r3, #0
 8005954:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005956:	2300      	movs	r3, #0
 8005958:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800595a:	463b      	mov	r3, r7
 800595c:	4619      	mov	r1, r3
 800595e:	4806      	ldr	r0, [pc, #24]	; (8005978 <MX_TIM1_Init+0x9c>)
 8005960:	f005 fa1a 	bl	800ad98 <HAL_TIMEx_MasterConfigSynchronization>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d001      	beq.n	800596e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800596a:	f000 fa25 	bl	8005db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800596e:	bf00      	nop
 8005970:	3718      	adds	r7, #24
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	20000380 	.word	0x20000380
 800597c:	40012c00 	.word	0x40012c00

08005980 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b08e      	sub	sp, #56	; 0x38
 8005984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005986:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800598a:	2200      	movs	r2, #0
 800598c:	601a      	str	r2, [r3, #0]
 800598e:	605a      	str	r2, [r3, #4]
 8005990:	609a      	str	r2, [r3, #8]
 8005992:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005994:	f107 0320 	add.w	r3, r7, #32
 8005998:	2200      	movs	r2, #0
 800599a:	601a      	str	r2, [r3, #0]
 800599c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800599e:	1d3b      	adds	r3, r7, #4
 80059a0:	2200      	movs	r2, #0
 80059a2:	601a      	str	r2, [r3, #0]
 80059a4:	605a      	str	r2, [r3, #4]
 80059a6:	609a      	str	r2, [r3, #8]
 80059a8:	60da      	str	r2, [r3, #12]
 80059aa:	611a      	str	r2, [r3, #16]
 80059ac:	615a      	str	r2, [r3, #20]
 80059ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80059b0:	4b2d      	ldr	r3, [pc, #180]	; (8005a68 <MX_TIM2_Init+0xe8>)
 80059b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80059b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80059b8:	4b2b      	ldr	r3, [pc, #172]	; (8005a68 <MX_TIM2_Init+0xe8>)
 80059ba:	2200      	movs	r2, #0
 80059bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80059be:	4b2a      	ldr	r3, [pc, #168]	; (8005a68 <MX_TIM2_Init+0xe8>)
 80059c0:	2200      	movs	r2, #0
 80059c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 399;
 80059c4:	4b28      	ldr	r3, [pc, #160]	; (8005a68 <MX_TIM2_Init+0xe8>)
 80059c6:	f240 128f 	movw	r2, #399	; 0x18f
 80059ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80059cc:	4b26      	ldr	r3, [pc, #152]	; (8005a68 <MX_TIM2_Init+0xe8>)
 80059ce:	2200      	movs	r2, #0
 80059d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80059d2:	4b25      	ldr	r3, [pc, #148]	; (8005a68 <MX_TIM2_Init+0xe8>)
 80059d4:	2200      	movs	r2, #0
 80059d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80059d8:	4823      	ldr	r0, [pc, #140]	; (8005a68 <MX_TIM2_Init+0xe8>)
 80059da:	f003 fc3d 	bl	8009258 <HAL_TIM_Base_Init>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d001      	beq.n	80059e8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80059e4:	f000 f9e8 	bl	8005db8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80059e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80059ec:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80059ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80059f2:	4619      	mov	r1, r3
 80059f4:	481c      	ldr	r0, [pc, #112]	; (8005a68 <MX_TIM2_Init+0xe8>)
 80059f6:	f004 fb7b 	bl	800a0f0 <HAL_TIM_ConfigClockSource>
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d001      	beq.n	8005a04 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8005a00:	f000 f9da 	bl	8005db8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005a04:	4818      	ldr	r0, [pc, #96]	; (8005a68 <MX_TIM2_Init+0xe8>)
 8005a06:	f003 fd1d 	bl	8009444 <HAL_TIM_PWM_Init>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d001      	beq.n	8005a14 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8005a10:	f000 f9d2 	bl	8005db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a14:	2300      	movs	r3, #0
 8005a16:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005a1c:	f107 0320 	add.w	r3, r7, #32
 8005a20:	4619      	mov	r1, r3
 8005a22:	4811      	ldr	r0, [pc, #68]	; (8005a68 <MX_TIM2_Init+0xe8>)
 8005a24:	f005 f9b8 	bl	800ad98 <HAL_TIMEx_MasterConfigSynchronization>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d001      	beq.n	8005a32 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8005a2e:	f000 f9c3 	bl	8005db8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005a32:	2360      	movs	r3, #96	; 0x60
 8005a34:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005a36:	2300      	movs	r3, #0
 8005a38:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005a42:	1d3b      	adds	r3, r7, #4
 8005a44:	220c      	movs	r2, #12
 8005a46:	4619      	mov	r1, r3
 8005a48:	4807      	ldr	r0, [pc, #28]	; (8005a68 <MX_TIM2_Init+0xe8>)
 8005a4a:	f004 fa93 	bl	8009f74 <HAL_TIM_PWM_ConfigChannel>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d001      	beq.n	8005a58 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8005a54:	f000 f9b0 	bl	8005db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8005a58:	4803      	ldr	r0, [pc, #12]	; (8005a68 <MX_TIM2_Init+0xe8>)
 8005a5a:	f000 fb1f 	bl	800609c <HAL_TIM_MspPostInit>

}
 8005a5e:	bf00      	nop
 8005a60:	3738      	adds	r7, #56	; 0x38
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	200003c8 	.word	0x200003c8

08005a6c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b086      	sub	sp, #24
 8005a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005a72:	f107 0308 	add.w	r3, r7, #8
 8005a76:	2200      	movs	r2, #0
 8005a78:	601a      	str	r2, [r3, #0]
 8005a7a:	605a      	str	r2, [r3, #4]
 8005a7c:	609a      	str	r2, [r3, #8]
 8005a7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a80:	463b      	mov	r3, r7
 8005a82:	2200      	movs	r2, #0
 8005a84:	601a      	str	r2, [r3, #0]
 8005a86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005a88:	4b1d      	ldr	r3, [pc, #116]	; (8005b00 <MX_TIM4_Init+0x94>)
 8005a8a:	4a1e      	ldr	r2, [pc, #120]	; (8005b04 <MX_TIM4_Init+0x98>)
 8005a8c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 799;
 8005a8e:	4b1c      	ldr	r3, [pc, #112]	; (8005b00 <MX_TIM4_Init+0x94>)
 8005a90:	f240 321f 	movw	r2, #799	; 0x31f
 8005a94:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a96:	4b1a      	ldr	r3, [pc, #104]	; (8005b00 <MX_TIM4_Init+0x94>)
 8005a98:	2200      	movs	r2, #0
 8005a9a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 499;
 8005a9c:	4b18      	ldr	r3, [pc, #96]	; (8005b00 <MX_TIM4_Init+0x94>)
 8005a9e:	f240 12f3 	movw	r2, #499	; 0x1f3
 8005aa2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005aa4:	4b16      	ldr	r3, [pc, #88]	; (8005b00 <MX_TIM4_Init+0x94>)
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005aaa:	4b15      	ldr	r3, [pc, #84]	; (8005b00 <MX_TIM4_Init+0x94>)
 8005aac:	2200      	movs	r2, #0
 8005aae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005ab0:	4813      	ldr	r0, [pc, #76]	; (8005b00 <MX_TIM4_Init+0x94>)
 8005ab2:	f003 fbd1 	bl	8009258 <HAL_TIM_Base_Init>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d001      	beq.n	8005ac0 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8005abc:	f000 f97c 	bl	8005db8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ac4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005ac6:	f107 0308 	add.w	r3, r7, #8
 8005aca:	4619      	mov	r1, r3
 8005acc:	480c      	ldr	r0, [pc, #48]	; (8005b00 <MX_TIM4_Init+0x94>)
 8005ace:	f004 fb0f 	bl	800a0f0 <HAL_TIM_ConfigClockSource>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d001      	beq.n	8005adc <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8005ad8:	f000 f96e 	bl	8005db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005adc:	2300      	movs	r3, #0
 8005ade:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005ae4:	463b      	mov	r3, r7
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	4805      	ldr	r0, [pc, #20]	; (8005b00 <MX_TIM4_Init+0x94>)
 8005aea:	f005 f955 	bl	800ad98 <HAL_TIMEx_MasterConfigSynchronization>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d001      	beq.n	8005af8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8005af4:	f000 f960 	bl	8005db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8005af8:	bf00      	nop
 8005afa:	3718      	adds	r7, #24
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	20000410 	.word	0x20000410
 8005b04:	40000800 	.word	0x40000800

08005b08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005b0e:	4b10      	ldr	r3, [pc, #64]	; (8005b50 <MX_DMA_Init+0x48>)
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	4a0f      	ldr	r2, [pc, #60]	; (8005b50 <MX_DMA_Init+0x48>)
 8005b14:	f043 0301 	orr.w	r3, r3, #1
 8005b18:	6153      	str	r3, [r2, #20]
 8005b1a:	4b0d      	ldr	r3, [pc, #52]	; (8005b50 <MX_DMA_Init+0x48>)
 8005b1c:	695b      	ldr	r3, [r3, #20]
 8005b1e:	f003 0301 	and.w	r3, r3, #1
 8005b22:	607b      	str	r3, [r7, #4]
 8005b24:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8005b26:	2200      	movs	r2, #0
 8005b28:	2100      	movs	r1, #0
 8005b2a:	200b      	movs	r0, #11
 8005b2c:	f001 fa0f 	bl	8006f4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8005b30:	200b      	movs	r0, #11
 8005b32:	f001 fa28 	bl	8006f86 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8005b36:	2200      	movs	r2, #0
 8005b38:	2100      	movs	r1, #0
 8005b3a:	2010      	movs	r0, #16
 8005b3c:	f001 fa07 	bl	8006f4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8005b40:	2010      	movs	r0, #16
 8005b42:	f001 fa20 	bl	8006f86 <HAL_NVIC_EnableIRQ>

}
 8005b46:	bf00      	nop
 8005b48:	3708      	adds	r7, #8
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	40021000 	.word	0x40021000

08005b54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b088      	sub	sp, #32
 8005b58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b5a:	f107 0310 	add.w	r3, r7, #16
 8005b5e:	2200      	movs	r2, #0
 8005b60:	601a      	str	r2, [r3, #0]
 8005b62:	605a      	str	r2, [r3, #4]
 8005b64:	609a      	str	r2, [r3, #8]
 8005b66:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b68:	4b8c      	ldr	r3, [pc, #560]	; (8005d9c <MX_GPIO_Init+0x248>)
 8005b6a:	699b      	ldr	r3, [r3, #24]
 8005b6c:	4a8b      	ldr	r2, [pc, #556]	; (8005d9c <MX_GPIO_Init+0x248>)
 8005b6e:	f043 0310 	orr.w	r3, r3, #16
 8005b72:	6193      	str	r3, [r2, #24]
 8005b74:	4b89      	ldr	r3, [pc, #548]	; (8005d9c <MX_GPIO_Init+0x248>)
 8005b76:	699b      	ldr	r3, [r3, #24]
 8005b78:	f003 0310 	and.w	r3, r3, #16
 8005b7c:	60fb      	str	r3, [r7, #12]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005b80:	4b86      	ldr	r3, [pc, #536]	; (8005d9c <MX_GPIO_Init+0x248>)
 8005b82:	699b      	ldr	r3, [r3, #24]
 8005b84:	4a85      	ldr	r2, [pc, #532]	; (8005d9c <MX_GPIO_Init+0x248>)
 8005b86:	f043 0320 	orr.w	r3, r3, #32
 8005b8a:	6193      	str	r3, [r2, #24]
 8005b8c:	4b83      	ldr	r3, [pc, #524]	; (8005d9c <MX_GPIO_Init+0x248>)
 8005b8e:	699b      	ldr	r3, [r3, #24]
 8005b90:	f003 0320 	and.w	r3, r3, #32
 8005b94:	60bb      	str	r3, [r7, #8]
 8005b96:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b98:	4b80      	ldr	r3, [pc, #512]	; (8005d9c <MX_GPIO_Init+0x248>)
 8005b9a:	699b      	ldr	r3, [r3, #24]
 8005b9c:	4a7f      	ldr	r2, [pc, #508]	; (8005d9c <MX_GPIO_Init+0x248>)
 8005b9e:	f043 0304 	orr.w	r3, r3, #4
 8005ba2:	6193      	str	r3, [r2, #24]
 8005ba4:	4b7d      	ldr	r3, [pc, #500]	; (8005d9c <MX_GPIO_Init+0x248>)
 8005ba6:	699b      	ldr	r3, [r3, #24]
 8005ba8:	f003 0304 	and.w	r3, r3, #4
 8005bac:	607b      	str	r3, [r7, #4]
 8005bae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005bb0:	4b7a      	ldr	r3, [pc, #488]	; (8005d9c <MX_GPIO_Init+0x248>)
 8005bb2:	699b      	ldr	r3, [r3, #24]
 8005bb4:	4a79      	ldr	r2, [pc, #484]	; (8005d9c <MX_GPIO_Init+0x248>)
 8005bb6:	f043 0308 	orr.w	r3, r3, #8
 8005bba:	6193      	str	r3, [r2, #24]
 8005bbc:	4b77      	ldr	r3, [pc, #476]	; (8005d9c <MX_GPIO_Init+0x248>)
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	f003 0308 	and.w	r3, r3, #8
 8005bc4:	603b      	str	r3, [r7, #0]
 8005bc6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005bce:	4874      	ldr	r0, [pc, #464]	; (8005da0 <MX_GPIO_Init+0x24c>)
 8005bd0:	f002 f8dd 	bl	8007d8e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_9, GPIO_PIN_RESET);
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005bda:	4872      	ldr	r0, [pc, #456]	; (8005da4 <MX_GPIO_Init+0x250>)
 8005bdc:	f002 f8d7 	bl	8007d8e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8005be0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8005be4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005be6:	2300      	movs	r3, #0
 8005be8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bea:	2300      	movs	r3, #0
 8005bec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005bee:	f107 0310 	add.w	r3, r7, #16
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	486a      	ldr	r0, [pc, #424]	; (8005da0 <MX_GPIO_Init+0x24c>)
 8005bf6:	f001 ff2f 	bl	8007a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005bfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bfe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c00:	2301      	movs	r3, #1
 8005c02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c04:	2300      	movs	r3, #0
 8005c06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c08:	2302      	movs	r3, #2
 8005c0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005c0c:	f107 0310 	add.w	r3, r7, #16
 8005c10:	4619      	mov	r1, r3
 8005c12:	4863      	ldr	r0, [pc, #396]	; (8005da0 <MX_GPIO_Init+0x24c>)
 8005c14:	f001 ff20 	bl	8007a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005c18:	2302      	movs	r3, #2
 8005c1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c20:	f107 0310 	add.w	r3, r7, #16
 8005c24:	4619      	mov	r1, r3
 8005c26:	4860      	ldr	r0, [pc, #384]	; (8005da8 <MX_GPIO_Init+0x254>)
 8005c28:	f001 ff16 	bl	8007a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005c2c:	2304      	movs	r3, #4
 8005c2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8005c30:	4b5e      	ldr	r3, [pc, #376]	; (8005dac <MX_GPIO_Init+0x258>)
 8005c32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c34:	2300      	movs	r3, #0
 8005c36:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c38:	f107 0310 	add.w	r3, r7, #16
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	485a      	ldr	r0, [pc, #360]	; (8005da8 <MX_GPIO_Init+0x254>)
 8005c40:	f001 ff0a 	bl	8007a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA8 PA9 PA10
                           PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8005c44:	f641 7310 	movw	r3, #7952	; 0x1f10
 8005c48:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c52:	f107 0310 	add.w	r3, r7, #16
 8005c56:	4619      	mov	r1, r3
 8005c58:	4853      	ldr	r0, [pc, #332]	; (8005da8 <MX_GPIO_Init+0x254>)
 8005c5a:	f001 fefd 	bl	8007a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8005c5e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005c62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c64:	2301      	movs	r3, #1
 8005c66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c6c:	2302      	movs	r3, #2
 8005c6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c70:	f107 0310 	add.w	r3, r7, #16
 8005c74:	4619      	mov	r1, r3
 8005c76:	484b      	ldr	r0, [pc, #300]	; (8005da4 <MX_GPIO_Init+0x250>)
 8005c78:	f001 feee 	bl	8007a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005c7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005c82:	4b4b      	ldr	r3, [pc, #300]	; (8005db0 <MX_GPIO_Init+0x25c>)
 8005c84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c86:	2300      	movs	r3, #0
 8005c88:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c8a:	f107 0310 	add.w	r3, r7, #16
 8005c8e:	4619      	mov	r1, r3
 8005c90:	4844      	ldr	r0, [pc, #272]	; (8005da4 <MX_GPIO_Init+0x250>)
 8005c92:	f001 fee1 	bl	8007a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005c96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005c9c:	4b45      	ldr	r3, [pc, #276]	; (8005db4 <MX_GPIO_Init+0x260>)
 8005c9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ca4:	f107 0310 	add.w	r3, r7, #16
 8005ca8:	4619      	mov	r1, r3
 8005caa:	483e      	ldr	r0, [pc, #248]	; (8005da4 <MX_GPIO_Init+0x250>)
 8005cac:	f001 fed4 	bl	8007a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB15 PB4 PB5
                           PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5
 8005cb0:	f24a 1330 	movw	r3, #41264	; 0xa130
 8005cb4:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005cbe:	f107 0310 	add.w	r3, r7, #16
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	4837      	ldr	r0, [pc, #220]	; (8005da4 <MX_GPIO_Init+0x250>)
 8005cc6:	f001 fec7 	bl	8007a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_3;
 8005cca:	f244 0308 	movw	r3, #16392	; 0x4008
 8005cce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8005cd0:	4b36      	ldr	r3, [pc, #216]	; (8005dac <MX_GPIO_Init+0x258>)
 8005cd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005cd8:	f107 0310 	add.w	r3, r7, #16
 8005cdc:	4619      	mov	r1, r3
 8005cde:	4831      	ldr	r0, [pc, #196]	; (8005da4 <MX_GPIO_Init+0x250>)
 8005ce0:	f001 feba 	bl	8007a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005ce4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ce8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005cea:	4b32      	ldr	r3, [pc, #200]	; (8005db4 <MX_GPIO_Init+0x260>)
 8005cec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cf2:	f107 0310 	add.w	r3, r7, #16
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	482b      	ldr	r0, [pc, #172]	; (8005da8 <MX_GPIO_Init+0x254>)
 8005cfa:	f001 fead 	bl	8007a58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 3, 0);
 8005cfe:	2200      	movs	r2, #0
 8005d00:	2103      	movs	r1, #3
 8005d02:	2008      	movs	r0, #8
 8005d04:	f001 f923 	bl	8006f4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8005d08:	2008      	movs	r0, #8
 8005d0a:	f001 f93c 	bl	8006f86 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 3, 0);
 8005d0e:	2200      	movs	r2, #0
 8005d10:	2103      	movs	r1, #3
 8005d12:	2009      	movs	r0, #9
 8005d14:	f001 f91b 	bl	8006f4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8005d18:	2009      	movs	r0, #9
 8005d1a:	f001 f934 	bl	8006f86 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8005d1e:	2200      	movs	r2, #0
 8005d20:	2100      	movs	r1, #0
 8005d22:	2028      	movs	r0, #40	; 0x28
 8005d24:	f001 f913 	bl	8006f4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005d28:	2028      	movs	r0, #40	; 0x28
 8005d2a:	f001 f92c 	bl	8006f86 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005d2e:	2340      	movs	r3, #64	; 0x40
 8005d30:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005d32:	2300      	movs	r3, #0
 8005d34:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d36:	2300      	movs	r3, #0
 8005d38:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d3a:	f107 0310 	add.w	r3, r7, #16
 8005d3e:	4619      	mov	r1, r3
 8005d40:	4819      	ldr	r0, [pc, #100]	; (8005da8 <MX_GPIO_Init+0x254>)
 8005d42:	f001 fe89 	bl	8007a58 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005d46:	2380      	movs	r3, #128	; 0x80
 8005d48:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d52:	2302      	movs	r3, #2
 8005d54:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d56:	f107 0310 	add.w	r3, r7, #16
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	4812      	ldr	r0, [pc, #72]	; (8005da8 <MX_GPIO_Init+0x254>)
 8005d5e:	f001 fe7b 	bl	8007a58 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8005d62:	2200      	movs	r2, #0
 8005d64:	2180      	movs	r1, #128	; 0x80
 8005d66:	4810      	ldr	r0, [pc, #64]	; (8005da8 <MX_GPIO_Init+0x254>)
 8005d68:	f002 f811 	bl	8007d8e <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005d6c:	2302      	movs	r3, #2
 8005d6e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005d70:	2301      	movs	r3, #1
 8005d72:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d74:	2300      	movs	r3, #0
 8005d76:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d78:	2302      	movs	r3, #2
 8005d7a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d7c:	f107 0310 	add.w	r3, r7, #16
 8005d80:	4619      	mov	r1, r3
 8005d82:	4808      	ldr	r0, [pc, #32]	; (8005da4 <MX_GPIO_Init+0x250>)
 8005d84:	f001 fe68 	bl	8007a58 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8005d88:	2200      	movs	r2, #0
 8005d8a:	2102      	movs	r1, #2
 8005d8c:	4805      	ldr	r0, [pc, #20]	; (8005da4 <MX_GPIO_Init+0x250>)
 8005d8e:	f001 fffe 	bl	8007d8e <HAL_GPIO_WritePin>
/* USER CODE END MX_GPIO_Init_2 */
}
 8005d92:	bf00      	nop
 8005d94:	3720      	adds	r7, #32
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	40021000 	.word	0x40021000
 8005da0:	40011000 	.word	0x40011000
 8005da4:	40010c00 	.word	0x40010c00
 8005da8:	40010800 	.word	0x40010800
 8005dac:	10310000 	.word	0x10310000
 8005db0:	10110000 	.word	0x10110000
 8005db4:	10210000 	.word	0x10210000

08005db8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005db8:	b480      	push	{r7}
 8005dba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005dbc:	b672      	cpsid	i
}
 8005dbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005dc0:	e7fe      	b.n	8005dc0 <Error_Handler+0x8>
	...

08005dc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005dca:	4b1d      	ldr	r3, [pc, #116]	; (8005e40 <HAL_MspInit+0x7c>)
 8005dcc:	699b      	ldr	r3, [r3, #24]
 8005dce:	4a1c      	ldr	r2, [pc, #112]	; (8005e40 <HAL_MspInit+0x7c>)
 8005dd0:	f043 0301 	orr.w	r3, r3, #1
 8005dd4:	6193      	str	r3, [r2, #24]
 8005dd6:	4b1a      	ldr	r3, [pc, #104]	; (8005e40 <HAL_MspInit+0x7c>)
 8005dd8:	699b      	ldr	r3, [r3, #24]
 8005dda:	f003 0301 	and.w	r3, r3, #1
 8005dde:	60bb      	str	r3, [r7, #8]
 8005de0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005de2:	4b17      	ldr	r3, [pc, #92]	; (8005e40 <HAL_MspInit+0x7c>)
 8005de4:	69db      	ldr	r3, [r3, #28]
 8005de6:	4a16      	ldr	r2, [pc, #88]	; (8005e40 <HAL_MspInit+0x7c>)
 8005de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dec:	61d3      	str	r3, [r2, #28]
 8005dee:	4b14      	ldr	r3, [pc, #80]	; (8005e40 <HAL_MspInit+0x7c>)
 8005df0:	69db      	ldr	r3, [r3, #28]
 8005df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005df6:	607b      	str	r3, [r7, #4]
 8005df8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	2100      	movs	r1, #0
 8005dfe:	2004      	movs	r0, #4
 8005e00:	f001 f8a5 	bl	8006f4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8005e04:	2004      	movs	r0, #4
 8005e06:	f001 f8be 	bl	8006f86 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	2100      	movs	r1, #0
 8005e0e:	2005      	movs	r0, #5
 8005e10:	f001 f89d 	bl	8006f4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8005e14:	2005      	movs	r0, #5
 8005e16:	f001 f8b6 	bl	8006f86 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005e1a:	4b0a      	ldr	r3, [pc, #40]	; (8005e44 <HAL_MspInit+0x80>)
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	60fb      	str	r3, [r7, #12]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005e26:	60fb      	str	r3, [r7, #12]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005e2e:	60fb      	str	r3, [r7, #12]
 8005e30:	4a04      	ldr	r2, [pc, #16]	; (8005e44 <HAL_MspInit+0x80>)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005e36:	bf00      	nop
 8005e38:	3710      	adds	r7, #16
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	40021000 	.word	0x40021000
 8005e44:	40010000 	.word	0x40010000

08005e48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b08a      	sub	sp, #40	; 0x28
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e50:	f107 0318 	add.w	r3, r7, #24
 8005e54:	2200      	movs	r2, #0
 8005e56:	601a      	str	r2, [r3, #0]
 8005e58:	605a      	str	r2, [r3, #4]
 8005e5a:	609a      	str	r2, [r3, #8]
 8005e5c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a38      	ldr	r2, [pc, #224]	; (8005f44 <HAL_ADC_MspInit+0xfc>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d168      	bne.n	8005f3a <HAL_ADC_MspInit+0xf2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005e68:	4b37      	ldr	r3, [pc, #220]	; (8005f48 <HAL_ADC_MspInit+0x100>)
 8005e6a:	699b      	ldr	r3, [r3, #24]
 8005e6c:	4a36      	ldr	r2, [pc, #216]	; (8005f48 <HAL_ADC_MspInit+0x100>)
 8005e6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e72:	6193      	str	r3, [r2, #24]
 8005e74:	4b34      	ldr	r3, [pc, #208]	; (8005f48 <HAL_ADC_MspInit+0x100>)
 8005e76:	699b      	ldr	r3, [r3, #24]
 8005e78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e7c:	617b      	str	r3, [r7, #20]
 8005e7e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e80:	4b31      	ldr	r3, [pc, #196]	; (8005f48 <HAL_ADC_MspInit+0x100>)
 8005e82:	699b      	ldr	r3, [r3, #24]
 8005e84:	4a30      	ldr	r2, [pc, #192]	; (8005f48 <HAL_ADC_MspInit+0x100>)
 8005e86:	f043 0304 	orr.w	r3, r3, #4
 8005e8a:	6193      	str	r3, [r2, #24]
 8005e8c:	4b2e      	ldr	r3, [pc, #184]	; (8005f48 <HAL_ADC_MspInit+0x100>)
 8005e8e:	699b      	ldr	r3, [r3, #24]
 8005e90:	f003 0304 	and.w	r3, r3, #4
 8005e94:	613b      	str	r3, [r7, #16]
 8005e96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e98:	4b2b      	ldr	r3, [pc, #172]	; (8005f48 <HAL_ADC_MspInit+0x100>)
 8005e9a:	699b      	ldr	r3, [r3, #24]
 8005e9c:	4a2a      	ldr	r2, [pc, #168]	; (8005f48 <HAL_ADC_MspInit+0x100>)
 8005e9e:	f043 0308 	orr.w	r3, r3, #8
 8005ea2:	6193      	str	r3, [r2, #24]
 8005ea4:	4b28      	ldr	r3, [pc, #160]	; (8005f48 <HAL_ADC_MspInit+0x100>)
 8005ea6:	699b      	ldr	r3, [r3, #24]
 8005ea8:	f003 0308 	and.w	r3, r3, #8
 8005eac:	60fb      	str	r3, [r7, #12]
 8005eae:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA5     ------> ADC1_IN5
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 8005eb0:	2323      	movs	r3, #35	; 0x23
 8005eb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005eb8:	f107 0318 	add.w	r3, r7, #24
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	4823      	ldr	r0, [pc, #140]	; (8005f4c <HAL_ADC_MspInit+0x104>)
 8005ec0:	f001 fdca 	bl	8007a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ecc:	f107 0318 	add.w	r3, r7, #24
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	481f      	ldr	r0, [pc, #124]	; (8005f50 <HAL_ADC_MspInit+0x108>)
 8005ed4:	f001 fdc0 	bl	8007a58 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8005ed8:	4b1e      	ldr	r3, [pc, #120]	; (8005f54 <HAL_ADC_MspInit+0x10c>)
 8005eda:	4a1f      	ldr	r2, [pc, #124]	; (8005f58 <HAL_ADC_MspInit+0x110>)
 8005edc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005ede:	4b1d      	ldr	r3, [pc, #116]	; (8005f54 <HAL_ADC_MspInit+0x10c>)
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ee4:	4b1b      	ldr	r3, [pc, #108]	; (8005f54 <HAL_ADC_MspInit+0x10c>)
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005eea:	4b1a      	ldr	r3, [pc, #104]	; (8005f54 <HAL_ADC_MspInit+0x10c>)
 8005eec:	2280      	movs	r2, #128	; 0x80
 8005eee:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005ef0:	4b18      	ldr	r3, [pc, #96]	; (8005f54 <HAL_ADC_MspInit+0x10c>)
 8005ef2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ef6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005ef8:	4b16      	ldr	r3, [pc, #88]	; (8005f54 <HAL_ADC_MspInit+0x10c>)
 8005efa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005efe:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8005f00:	4b14      	ldr	r3, [pc, #80]	; (8005f54 <HAL_ADC_MspInit+0x10c>)
 8005f02:	2200      	movs	r2, #0
 8005f04:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005f06:	4b13      	ldr	r3, [pc, #76]	; (8005f54 <HAL_ADC_MspInit+0x10c>)
 8005f08:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8005f0c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005f0e:	4811      	ldr	r0, [pc, #68]	; (8005f54 <HAL_ADC_MspInit+0x10c>)
 8005f10:	f001 f862 	bl	8006fd8 <HAL_DMA_Init>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d001      	beq.n	8005f1e <HAL_ADC_MspInit+0xd6>
    {
      Error_Handler();
 8005f1a:	f7ff ff4d 	bl	8005db8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a0c      	ldr	r2, [pc, #48]	; (8005f54 <HAL_ADC_MspInit+0x10c>)
 8005f22:	621a      	str	r2, [r3, #32]
 8005f24:	4a0b      	ldr	r2, [pc, #44]	; (8005f54 <HAL_ADC_MspInit+0x10c>)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	2100      	movs	r1, #0
 8005f2e:	2012      	movs	r0, #18
 8005f30:	f001 f80d 	bl	8006f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8005f34:	2012      	movs	r0, #18
 8005f36:	f001 f826 	bl	8006f86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005f3a:	bf00      	nop
 8005f3c:	3728      	adds	r7, #40	; 0x28
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	40012400 	.word	0x40012400
 8005f48:	40021000 	.word	0x40021000
 8005f4c:	40010800 	.word	0x40010800
 8005f50:	40010c00 	.word	0x40010c00
 8005f54:	200002e8 	.word	0x200002e8
 8005f58:	40020008 	.word	0x40020008

08005f5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b088      	sub	sp, #32
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f64:	f107 0310 	add.w	r3, r7, #16
 8005f68:	2200      	movs	r2, #0
 8005f6a:	601a      	str	r2, [r3, #0]
 8005f6c:	605a      	str	r2, [r3, #4]
 8005f6e:	609a      	str	r2, [r3, #8]
 8005f70:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a15      	ldr	r2, [pc, #84]	; (8005fcc <HAL_I2C_MspInit+0x70>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d123      	bne.n	8005fc4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f7c:	4b14      	ldr	r3, [pc, #80]	; (8005fd0 <HAL_I2C_MspInit+0x74>)
 8005f7e:	699b      	ldr	r3, [r3, #24]
 8005f80:	4a13      	ldr	r2, [pc, #76]	; (8005fd0 <HAL_I2C_MspInit+0x74>)
 8005f82:	f043 0308 	orr.w	r3, r3, #8
 8005f86:	6193      	str	r3, [r2, #24]
 8005f88:	4b11      	ldr	r3, [pc, #68]	; (8005fd0 <HAL_I2C_MspInit+0x74>)
 8005f8a:	699b      	ldr	r3, [r3, #24]
 8005f8c:	f003 0308 	and.w	r3, r3, #8
 8005f90:	60fb      	str	r3, [r7, #12]
 8005f92:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005f94:	23c0      	movs	r3, #192	; 0xc0
 8005f96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005f98:	2312      	movs	r3, #18
 8005f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005fa0:	f107 0310 	add.w	r3, r7, #16
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	480b      	ldr	r0, [pc, #44]	; (8005fd4 <HAL_I2C_MspInit+0x78>)
 8005fa8:	f001 fd56 	bl	8007a58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005fac:	4b08      	ldr	r3, [pc, #32]	; (8005fd0 <HAL_I2C_MspInit+0x74>)
 8005fae:	69db      	ldr	r3, [r3, #28]
 8005fb0:	4a07      	ldr	r2, [pc, #28]	; (8005fd0 <HAL_I2C_MspInit+0x74>)
 8005fb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005fb6:	61d3      	str	r3, [r2, #28]
 8005fb8:	4b05      	ldr	r3, [pc, #20]	; (8005fd0 <HAL_I2C_MspInit+0x74>)
 8005fba:	69db      	ldr	r3, [r3, #28]
 8005fbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fc0:	60bb      	str	r3, [r7, #8]
 8005fc2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005fc4:	bf00      	nop
 8005fc6:	3720      	adds	r7, #32
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	40005400 	.word	0x40005400
 8005fd0:	40021000 	.word	0x40021000
 8005fd4:	40010c00 	.word	0x40010c00

08005fd8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b086      	sub	sp, #24
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a29      	ldr	r2, [pc, #164]	; (800608c <HAL_TIM_Base_MspInit+0xb4>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d114      	bne.n	8006014 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005fea:	4b29      	ldr	r3, [pc, #164]	; (8006090 <HAL_TIM_Base_MspInit+0xb8>)
 8005fec:	699b      	ldr	r3, [r3, #24]
 8005fee:	4a28      	ldr	r2, [pc, #160]	; (8006090 <HAL_TIM_Base_MspInit+0xb8>)
 8005ff0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005ff4:	6193      	str	r3, [r2, #24]
 8005ff6:	4b26      	ldr	r3, [pc, #152]	; (8006090 <HAL_TIM_Base_MspInit+0xb8>)
 8005ff8:	699b      	ldr	r3, [r3, #24]
 8005ffa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ffe:	617b      	str	r3, [r7, #20]
 8006000:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8006002:	2200      	movs	r2, #0
 8006004:	2100      	movs	r1, #0
 8006006:	2019      	movs	r0, #25
 8006008:	f000 ffa1 	bl	8006f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800600c:	2019      	movs	r0, #25
 800600e:	f000 ffba 	bl	8006f86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8006012:	e037      	b.n	8006084 <HAL_TIM_Base_MspInit+0xac>
  else if(htim_base->Instance==TIM2)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800601c:	d114      	bne.n	8006048 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800601e:	4b1c      	ldr	r3, [pc, #112]	; (8006090 <HAL_TIM_Base_MspInit+0xb8>)
 8006020:	69db      	ldr	r3, [r3, #28]
 8006022:	4a1b      	ldr	r2, [pc, #108]	; (8006090 <HAL_TIM_Base_MspInit+0xb8>)
 8006024:	f043 0301 	orr.w	r3, r3, #1
 8006028:	61d3      	str	r3, [r2, #28]
 800602a:	4b19      	ldr	r3, [pc, #100]	; (8006090 <HAL_TIM_Base_MspInit+0xb8>)
 800602c:	69db      	ldr	r3, [r3, #28]
 800602e:	f003 0301 	and.w	r3, r3, #1
 8006032:	613b      	str	r3, [r7, #16]
 8006034:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8006036:	2200      	movs	r2, #0
 8006038:	2103      	movs	r1, #3
 800603a:	201c      	movs	r0, #28
 800603c:	f000 ff87 	bl	8006f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006040:	201c      	movs	r0, #28
 8006042:	f000 ffa0 	bl	8006f86 <HAL_NVIC_EnableIRQ>
}
 8006046:	e01d      	b.n	8006084 <HAL_TIM_Base_MspInit+0xac>
  else if(htim_base->Instance==TIM3)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a11      	ldr	r2, [pc, #68]	; (8006094 <HAL_TIM_Base_MspInit+0xbc>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d018      	beq.n	8006084 <HAL_TIM_Base_MspInit+0xac>
  else if(htim_base->Instance==TIM4)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a10      	ldr	r2, [pc, #64]	; (8006098 <HAL_TIM_Base_MspInit+0xc0>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d113      	bne.n	8006084 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800605c:	4b0c      	ldr	r3, [pc, #48]	; (8006090 <HAL_TIM_Base_MspInit+0xb8>)
 800605e:	69db      	ldr	r3, [r3, #28]
 8006060:	4a0b      	ldr	r2, [pc, #44]	; (8006090 <HAL_TIM_Base_MspInit+0xb8>)
 8006062:	f043 0304 	orr.w	r3, r3, #4
 8006066:	61d3      	str	r3, [r2, #28]
 8006068:	4b09      	ldr	r3, [pc, #36]	; (8006090 <HAL_TIM_Base_MspInit+0xb8>)
 800606a:	69db      	ldr	r3, [r3, #28]
 800606c:	f003 0304 	and.w	r3, r3, #4
 8006070:	60fb      	str	r3, [r7, #12]
 8006072:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8006074:	2200      	movs	r2, #0
 8006076:	2101      	movs	r1, #1
 8006078:	201e      	movs	r0, #30
 800607a:	f000 ff68 	bl	8006f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800607e:	201e      	movs	r0, #30
 8006080:	f000 ff81 	bl	8006f86 <HAL_NVIC_EnableIRQ>
}
 8006084:	bf00      	nop
 8006086:	3718      	adds	r7, #24
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}
 800608c:	40012c00 	.word	0x40012c00
 8006090:	40021000 	.word	0x40021000
 8006094:	40000400 	.word	0x40000400
 8006098:	40000800 	.word	0x40000800

0800609c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b088      	sub	sp, #32
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060a4:	f107 0310 	add.w	r3, r7, #16
 80060a8:	2200      	movs	r2, #0
 80060aa:	601a      	str	r2, [r3, #0]
 80060ac:	605a      	str	r2, [r3, #4]
 80060ae:	609a      	str	r2, [r3, #8]
 80060b0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060ba:	d117      	bne.n	80060ec <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060bc:	4b0d      	ldr	r3, [pc, #52]	; (80060f4 <HAL_TIM_MspPostInit+0x58>)
 80060be:	699b      	ldr	r3, [r3, #24]
 80060c0:	4a0c      	ldr	r2, [pc, #48]	; (80060f4 <HAL_TIM_MspPostInit+0x58>)
 80060c2:	f043 0304 	orr.w	r3, r3, #4
 80060c6:	6193      	str	r3, [r2, #24]
 80060c8:	4b0a      	ldr	r3, [pc, #40]	; (80060f4 <HAL_TIM_MspPostInit+0x58>)
 80060ca:	699b      	ldr	r3, [r3, #24]
 80060cc:	f003 0304 	and.w	r3, r3, #4
 80060d0:	60fb      	str	r3, [r7, #12]
 80060d2:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80060d4:	2308      	movs	r3, #8
 80060d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060d8:	2302      	movs	r3, #2
 80060da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80060dc:	2303      	movs	r3, #3
 80060de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060e0:	f107 0310 	add.w	r3, r7, #16
 80060e4:	4619      	mov	r1, r3
 80060e6:	4804      	ldr	r0, [pc, #16]	; (80060f8 <HAL_TIM_MspPostInit+0x5c>)
 80060e8:	f001 fcb6 	bl	8007a58 <HAL_GPIO_Init>
  else if(htim->Instance==TIM3)
  {

  }

}
 80060ec:	bf00      	nop
 80060ee:	3720      	adds	r7, #32
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	40021000 	.word	0x40021000
 80060f8:	40010800 	.word	0x40010800

080060fc <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b082      	sub	sp, #8
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a19      	ldr	r2, [pc, #100]	; (8006170 <HAL_TIM_Base_MspDeInit+0x74>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d109      	bne.n	8006122 <HAL_TIM_Base_MspDeInit+0x26>
  {
  /* USER CODE BEGIN TIM1_MspDeInit 0 */

  /* USER CODE END TIM1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM1_CLK_DISABLE();
 800610e:	4b19      	ldr	r3, [pc, #100]	; (8006174 <HAL_TIM_Base_MspDeInit+0x78>)
 8006110:	699b      	ldr	r3, [r3, #24]
 8006112:	4a18      	ldr	r2, [pc, #96]	; (8006174 <HAL_TIM_Base_MspDeInit+0x78>)
 8006114:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006118:	6193      	str	r3, [r2, #24]

    /* TIM1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(TIM1_UP_IRQn);
 800611a:	2019      	movs	r0, #25
 800611c:	f000 ff41 	bl	8006fa2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN TIM4_MspDeInit 1 */

  /* USER CODE END TIM4_MspDeInit 1 */
  }

}
 8006120:	e021      	b.n	8006166 <HAL_TIM_Base_MspDeInit+0x6a>
  else if(htim_base->Instance==TIM2)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800612a:	d109      	bne.n	8006140 <HAL_TIM_Base_MspDeInit+0x44>
    __HAL_RCC_TIM2_CLK_DISABLE();
 800612c:	4b11      	ldr	r3, [pc, #68]	; (8006174 <HAL_TIM_Base_MspDeInit+0x78>)
 800612e:	69db      	ldr	r3, [r3, #28]
 8006130:	4a10      	ldr	r2, [pc, #64]	; (8006174 <HAL_TIM_Base_MspDeInit+0x78>)
 8006132:	f023 0301 	bic.w	r3, r3, #1
 8006136:	61d3      	str	r3, [r2, #28]
    HAL_NVIC_DisableIRQ(TIM2_IRQn);
 8006138:	201c      	movs	r0, #28
 800613a:	f000 ff32 	bl	8006fa2 <HAL_NVIC_DisableIRQ>
}
 800613e:	e012      	b.n	8006166 <HAL_TIM_Base_MspDeInit+0x6a>
  else if(htim_base->Instance==TIM3)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a0c      	ldr	r2, [pc, #48]	; (8006178 <HAL_TIM_Base_MspDeInit+0x7c>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d00d      	beq.n	8006166 <HAL_TIM_Base_MspDeInit+0x6a>
  else if(htim_base->Instance==TIM4)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a0b      	ldr	r2, [pc, #44]	; (800617c <HAL_TIM_Base_MspDeInit+0x80>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d108      	bne.n	8006166 <HAL_TIM_Base_MspDeInit+0x6a>
    __HAL_RCC_TIM4_CLK_DISABLE();
 8006154:	4b07      	ldr	r3, [pc, #28]	; (8006174 <HAL_TIM_Base_MspDeInit+0x78>)
 8006156:	69db      	ldr	r3, [r3, #28]
 8006158:	4a06      	ldr	r2, [pc, #24]	; (8006174 <HAL_TIM_Base_MspDeInit+0x78>)
 800615a:	f023 0304 	bic.w	r3, r3, #4
 800615e:	61d3      	str	r3, [r2, #28]
    HAL_NVIC_DisableIRQ(TIM4_IRQn);
 8006160:	201e      	movs	r0, #30
 8006162:	f000 ff1e 	bl	8006fa2 <HAL_NVIC_DisableIRQ>
}
 8006166:	bf00      	nop
 8006168:	3708      	adds	r7, #8
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	40012c00 	.word	0x40012c00
 8006174:	40021000 	.word	0x40021000
 8006178:	40000400 	.word	0x40000400
 800617c:	40000800 	.word	0x40000800

08006180 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006180:	b480      	push	{r7}
 8006182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006184:	e7fe      	b.n	8006184 <NMI_Handler+0x4>

08006186 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006186:	b480      	push	{r7}
 8006188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800618a:	e7fe      	b.n	800618a <HardFault_Handler+0x4>

0800618c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800618c:	b480      	push	{r7}
 800618e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006190:	e7fe      	b.n	8006190 <MemManage_Handler+0x4>

08006192 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006192:	b480      	push	{r7}
 8006194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006196:	e7fe      	b.n	8006196 <BusFault_Handler+0x4>

08006198 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006198:	b480      	push	{r7}
 800619a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800619c:	e7fe      	b.n	800619c <UsageFault_Handler+0x4>

0800619e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800619e:	b480      	push	{r7}
 80061a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80061a2:	bf00      	nop
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bc80      	pop	{r7}
 80061a8:	4770      	bx	lr

080061aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80061aa:	b480      	push	{r7}
 80061ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80061ae:	bf00      	nop
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bc80      	pop	{r7}
 80061b4:	4770      	bx	lr

080061b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80061b6:	b480      	push	{r7}
 80061b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80061ba:	bf00      	nop
 80061bc:	46bd      	mov	sp, r7
 80061be:	bc80      	pop	{r7}
 80061c0:	4770      	bx	lr

080061c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80061c2:	b580      	push	{r7, lr}
 80061c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80061c6:	f000 f915 	bl	80063f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80061ca:	bf00      	nop
 80061cc:	bd80      	pop	{r7, pc}

080061ce <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 80061ce:	b580      	push	{r7, lr}
 80061d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 80061d2:	f001 f9bb 	bl	800754c <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 80061d6:	bf00      	nop
 80061d8:	bd80      	pop	{r7, pc}

080061da <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80061da:	b480      	push	{r7}
 80061dc:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80061de:	bf00      	nop
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bc80      	pop	{r7}
 80061e4:	4770      	bx	lr

080061e6 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80061e6:	b580      	push	{r7, lr}
 80061e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80061ea:	2004      	movs	r0, #4
 80061ec:	f001 fde8 	bl	8007dc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80061f0:	bf00      	nop
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80061f8:	2008      	movs	r0, #8
 80061fa:	f001 fde1 	bl	8007dc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80061fe:	bf00      	nop
 8006200:	bd80      	pop	{r7, pc}
	...

08006204 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006208:	4802      	ldr	r0, [pc, #8]	; (8006214 <DMA1_Channel1_IRQHandler+0x10>)
 800620a:	f000 fffb 	bl	8007204 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800620e:	bf00      	nop
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	200002e8 	.word	0x200002e8

08006218 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 800621c:	4802      	ldr	r0, [pc, #8]	; (8006228 <DMA1_Channel6_IRQHandler+0x10>)
 800621e:	f000 fff1 	bl	8007204 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8006222:	bf00      	nop
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	20000458 	.word	0x20000458

0800622c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8006230:	4802      	ldr	r0, [pc, #8]	; (800623c <ADC1_2_IRQHandler+0x10>)
 8006232:	f000 fab1 	bl	8006798 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8006236:	bf00      	nop
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	200002b8 	.word	0x200002b8

08006240 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006244:	4802      	ldr	r0, [pc, #8]	; (8006250 <TIM1_UP_IRQHandler+0x10>)
 8006246:	f003 fcf9 	bl	8009c3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800624a:	bf00      	nop
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	20000380 	.word	0x20000380

08006254 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006258:	4802      	ldr	r0, [pc, #8]	; (8006264 <TIM2_IRQHandler+0x10>)
 800625a:	f003 fcef 	bl	8009c3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800625e:	bf00      	nop
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	200003c8 	.word	0x200003c8

08006268 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800626c:	4802      	ldr	r0, [pc, #8]	; (8006278 <TIM4_IRQHandler+0x10>)
 800626e:	f003 fce5 	bl	8009c3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8006272:	bf00      	nop
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	20000410 	.word	0x20000410

0800627c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8006280:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006284:	f001 fd9c 	bl	8007dc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8006288:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800628c:	f001 fd98 	bl	8007dc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8006290:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006294:	f001 fd94 	bl	8007dc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8006298:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800629c:	f001 fd90 	bl	8007dc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80062a0:	bf00      	nop
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b086      	sub	sp, #24
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80062ac:	4a14      	ldr	r2, [pc, #80]	; (8006300 <_sbrk+0x5c>)
 80062ae:	4b15      	ldr	r3, [pc, #84]	; (8006304 <_sbrk+0x60>)
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
   if (NULL == __sbrk_heap_end)
 80062b8:	4b13      	ldr	r3, [pc, #76]	; (8006308 <_sbrk+0x64>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d102      	bne.n	80062c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80062c0:	4b11      	ldr	r3, [pc, #68]	; (8006308 <_sbrk+0x64>)
 80062c2:	4a12      	ldr	r2, [pc, #72]	; (800630c <_sbrk+0x68>)
 80062c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80062c6:	4b10      	ldr	r3, [pc, #64]	; (8006308 <_sbrk+0x64>)
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4413      	add	r3, r2
 80062ce:	693a      	ldr	r2, [r7, #16]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d207      	bcs.n	80062e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80062d4:	f004 fea4 	bl	800b020 <__errno>
 80062d8:	4603      	mov	r3, r0
 80062da:	220c      	movs	r2, #12
 80062dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80062de:	f04f 33ff 	mov.w	r3, #4294967295
 80062e2:	e009      	b.n	80062f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80062e4:	4b08      	ldr	r3, [pc, #32]	; (8006308 <_sbrk+0x64>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80062ea:	4b07      	ldr	r3, [pc, #28]	; (8006308 <_sbrk+0x64>)
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4413      	add	r3, r2
 80062f2:	4a05      	ldr	r2, [pc, #20]	; (8006308 <_sbrk+0x64>)
 80062f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80062f6:	68fb      	ldr	r3, [r7, #12]
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3718      	adds	r7, #24
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	20005000 	.word	0x20005000
 8006304:	00000400 	.word	0x00000400
 8006308:	20000758 	.word	0x20000758
 800630c:	200008c8 	.word	0x200008c8

08006310 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006310:	b480      	push	{r7}
 8006312:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006314:	bf00      	nop
 8006316:	46bd      	mov	sp, r7
 8006318:	bc80      	pop	{r7}
 800631a:	4770      	bx	lr

0800631c <Reset_Handler>:
 800631c:	f7ff fff8 	bl	8006310 <SystemInit>
 8006320:	480b      	ldr	r0, [pc, #44]	; (8006350 <LoopFillZerobss+0xe>)
 8006322:	490c      	ldr	r1, [pc, #48]	; (8006354 <LoopFillZerobss+0x12>)
 8006324:	4a0c      	ldr	r2, [pc, #48]	; (8006358 <LoopFillZerobss+0x16>)
 8006326:	2300      	movs	r3, #0
 8006328:	e002      	b.n	8006330 <LoopCopyDataInit>

0800632a <CopyDataInit>:
 800632a:	58d4      	ldr	r4, [r2, r3]
 800632c:	50c4      	str	r4, [r0, r3]
 800632e:	3304      	adds	r3, #4

08006330 <LoopCopyDataInit>:
 8006330:	18c4      	adds	r4, r0, r3
 8006332:	428c      	cmp	r4, r1
 8006334:	d3f9      	bcc.n	800632a <CopyDataInit>
 8006336:	4a09      	ldr	r2, [pc, #36]	; (800635c <LoopFillZerobss+0x1a>)
 8006338:	4c09      	ldr	r4, [pc, #36]	; (8006360 <LoopFillZerobss+0x1e>)
 800633a:	2300      	movs	r3, #0
 800633c:	e001      	b.n	8006342 <LoopFillZerobss>

0800633e <FillZerobss>:
 800633e:	6013      	str	r3, [r2, #0]
 8006340:	3204      	adds	r2, #4

08006342 <LoopFillZerobss>:
 8006342:	42a2      	cmp	r2, r4
 8006344:	d3fb      	bcc.n	800633e <FillZerobss>
 8006346:	f004 fe71 	bl	800b02c <__libc_init_array>
 800634a:	f7ff f8d5 	bl	80054f8 <main>
 800634e:	4770      	bx	lr
 8006350:	20000000 	.word	0x20000000
 8006354:	20000298 	.word	0x20000298
 8006358:	0800b294 	.word	0x0800b294
 800635c:	20000298 	.word	0x20000298
 8006360:	200008c8 	.word	0x200008c8

08006364 <CAN1_RX1_IRQHandler>:
 8006364:	e7fe      	b.n	8006364 <CAN1_RX1_IRQHandler>
	...

08006368 <HAL_Init>:
 8006368:	b580      	push	{r7, lr}
 800636a:	af00      	add	r7, sp, #0
 800636c:	4b08      	ldr	r3, [pc, #32]	; (8006390 <HAL_Init+0x28>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a07      	ldr	r2, [pc, #28]	; (8006390 <HAL_Init+0x28>)
 8006372:	f043 0310 	orr.w	r3, r3, #16
 8006376:	6013      	str	r3, [r2, #0]
 8006378:	2003      	movs	r0, #3
 800637a:	f000 fddd 	bl	8006f38 <HAL_NVIC_SetPriorityGrouping>
 800637e:	200f      	movs	r0, #15
 8006380:	f000 f808 	bl	8006394 <HAL_InitTick>
 8006384:	f7ff fd1e 	bl	8005dc4 <HAL_MspInit>
 8006388:	2300      	movs	r3, #0
 800638a:	4618      	mov	r0, r3
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	40022000 	.word	0x40022000

08006394 <HAL_InitTick>:
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	4b12      	ldr	r3, [pc, #72]	; (80063e8 <HAL_InitTick+0x54>)
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	4b12      	ldr	r3, [pc, #72]	; (80063ec <HAL_InitTick+0x58>)
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	4619      	mov	r1, r3
 80063a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80063aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80063ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80063b2:	4618      	mov	r0, r3
 80063b4:	f000 fe03 	bl	8006fbe <HAL_SYSTICK_Config>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d001      	beq.n	80063c2 <HAL_InitTick+0x2e>
 80063be:	2301      	movs	r3, #1
 80063c0:	e00e      	b.n	80063e0 <HAL_InitTick+0x4c>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2b0f      	cmp	r3, #15
 80063c6:	d80a      	bhi.n	80063de <HAL_InitTick+0x4a>
 80063c8:	2200      	movs	r2, #0
 80063ca:	6879      	ldr	r1, [r7, #4]
 80063cc:	f04f 30ff 	mov.w	r0, #4294967295
 80063d0:	f000 fdbd 	bl	8006f4e <HAL_NVIC_SetPriority>
 80063d4:	4a06      	ldr	r2, [pc, #24]	; (80063f0 <HAL_InitTick+0x5c>)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6013      	str	r3, [r2, #0]
 80063da:	2300      	movs	r3, #0
 80063dc:	e000      	b.n	80063e0 <HAL_InitTick+0x4c>
 80063de:	2301      	movs	r3, #1
 80063e0:	4618      	mov	r0, r3
 80063e2:	3708      	adds	r7, #8
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	2000023c 	.word	0x2000023c
 80063ec:	20000244 	.word	0x20000244
 80063f0:	20000240 	.word	0x20000240

080063f4 <HAL_IncTick>:
 80063f4:	b480      	push	{r7}
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	4b05      	ldr	r3, [pc, #20]	; (8006410 <HAL_IncTick+0x1c>)
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	461a      	mov	r2, r3
 80063fe:	4b05      	ldr	r3, [pc, #20]	; (8006414 <HAL_IncTick+0x20>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4413      	add	r3, r2
 8006404:	4a03      	ldr	r2, [pc, #12]	; (8006414 <HAL_IncTick+0x20>)
 8006406:	6013      	str	r3, [r2, #0]
 8006408:	bf00      	nop
 800640a:	46bd      	mov	sp, r7
 800640c:	bc80      	pop	{r7}
 800640e:	4770      	bx	lr
 8006410:	20000244 	.word	0x20000244
 8006414:	2000075c 	.word	0x2000075c

08006418 <HAL_GetTick>:
 8006418:	b480      	push	{r7}
 800641a:	af00      	add	r7, sp, #0
 800641c:	4b02      	ldr	r3, [pc, #8]	; (8006428 <HAL_GetTick+0x10>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4618      	mov	r0, r3
 8006422:	46bd      	mov	sp, r7
 8006424:	bc80      	pop	{r7}
 8006426:	4770      	bx	lr
 8006428:	2000075c 	.word	0x2000075c

0800642c <HAL_ADC_Init>:
 800642c:	b580      	push	{r7, lr}
 800642e:	b086      	sub	sp, #24
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	2300      	movs	r3, #0
 8006436:	75fb      	strb	r3, [r7, #23]
 8006438:	2300      	movs	r3, #0
 800643a:	613b      	str	r3, [r7, #16]
 800643c:	2300      	movs	r3, #0
 800643e:	60bb      	str	r3, [r7, #8]
 8006440:	2300      	movs	r3, #0
 8006442:	60fb      	str	r3, [r7, #12]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d101      	bne.n	800644e <HAL_ADC_Init+0x22>
 800644a:	2301      	movs	r3, #1
 800644c:	e0be      	b.n	80065cc <HAL_ADC_Init+0x1a0>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	2b00      	cmp	r3, #0
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006458:	2b00      	cmp	r3, #0
 800645a:	d109      	bne.n	8006470 <HAL_ADC_Init+0x44>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	62da      	str	r2, [r3, #44]	; 0x2c
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f7ff fcec 	bl	8005e48 <HAL_ADC_MspInit>
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 fbc1 	bl	8006bf8 <ADC_ConversionStop_Disable>
 8006476:	4603      	mov	r3, r0
 8006478:	75fb      	strb	r3, [r7, #23]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800647e:	f003 0310 	and.w	r3, r3, #16
 8006482:	2b00      	cmp	r3, #0
 8006484:	f040 8099 	bne.w	80065ba <HAL_ADC_Init+0x18e>
 8006488:	7dfb      	ldrb	r3, [r7, #23]
 800648a:	2b00      	cmp	r3, #0
 800648c:	f040 8095 	bne.w	80065ba <HAL_ADC_Init+0x18e>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006494:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006498:	f023 0302 	bic.w	r3, r3, #2
 800649c:	f043 0202 	orr.w	r2, r3, #2
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	629a      	str	r2, [r3, #40]	; 0x28
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	685a      	ldr	r2, [r3, #4]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	69db      	ldr	r3, [r3, #28]
 80064ac:	431a      	orrs	r2, r3
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	7b1b      	ldrb	r3, [r3, #12]
 80064b2:	005b      	lsls	r3, r3, #1
 80064b4:	4313      	orrs	r3, r2
 80064b6:	68ba      	ldr	r2, [r7, #8]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	60bb      	str	r3, [r7, #8]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064c4:	d003      	beq.n	80064ce <HAL_ADC_Init+0xa2>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d102      	bne.n	80064d4 <HAL_ADC_Init+0xa8>
 80064ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80064d2:	e000      	b.n	80064d6 <HAL_ADC_Init+0xaa>
 80064d4:	2300      	movs	r3, #0
 80064d6:	693a      	ldr	r2, [r7, #16]
 80064d8:	4313      	orrs	r3, r2
 80064da:	613b      	str	r3, [r7, #16]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	7d1b      	ldrb	r3, [r3, #20]
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d119      	bne.n	8006518 <HAL_ADC_Init+0xec>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	7b1b      	ldrb	r3, [r3, #12]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d109      	bne.n	8006500 <HAL_ADC_Init+0xd4>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	699b      	ldr	r3, [r3, #24]
 80064f0:	3b01      	subs	r3, #1
 80064f2:	035a      	lsls	r2, r3, #13
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80064fc:	613b      	str	r3, [r7, #16]
 80064fe:	e00b      	b.n	8006518 <HAL_ADC_Init+0xec>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006504:	f043 0220 	orr.w	r2, r3, #32
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	629a      	str	r2, [r3, #40]	; 0x28
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006510:	f043 0201 	orr.w	r2, r3, #1
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	62da      	str	r2, [r3, #44]	; 0x2c
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	693a      	ldr	r2, [r7, #16]
 8006528:	430a      	orrs	r2, r1
 800652a:	605a      	str	r2, [r3, #4]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	689a      	ldr	r2, [r3, #8]
 8006532:	4b28      	ldr	r3, [pc, #160]	; (80065d4 <HAL_ADC_Init+0x1a8>)
 8006534:	4013      	ands	r3, r2
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	6812      	ldr	r2, [r2, #0]
 800653a:	68b9      	ldr	r1, [r7, #8]
 800653c:	430b      	orrs	r3, r1
 800653e:	6093      	str	r3, [r2, #8]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006548:	d003      	beq.n	8006552 <HAL_ADC_Init+0x126>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	2b01      	cmp	r3, #1
 8006550:	d104      	bne.n	800655c <HAL_ADC_Init+0x130>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	3b01      	subs	r3, #1
 8006558:	051b      	lsls	r3, r3, #20
 800655a:	60fb      	str	r3, [r7, #12]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006562:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	430a      	orrs	r2, r1
 800656e:	62da      	str	r2, [r3, #44]	; 0x2c
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	689a      	ldr	r2, [r3, #8]
 8006576:	4b18      	ldr	r3, [pc, #96]	; (80065d8 <HAL_ADC_Init+0x1ac>)
 8006578:	4013      	ands	r3, r2
 800657a:	68ba      	ldr	r2, [r7, #8]
 800657c:	429a      	cmp	r2, r3
 800657e:	d10b      	bne.n	8006598 <HAL_ADC_Init+0x16c>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	62da      	str	r2, [r3, #44]	; 0x2c
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800658a:	f023 0303 	bic.w	r3, r3, #3
 800658e:	f043 0201 	orr.w	r2, r3, #1
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	629a      	str	r2, [r3, #40]	; 0x28
 8006596:	e018      	b.n	80065ca <HAL_ADC_Init+0x19e>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800659c:	f023 0312 	bic.w	r3, r3, #18
 80065a0:	f043 0210 	orr.w	r2, r3, #16
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	629a      	str	r2, [r3, #40]	; 0x28
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ac:	f043 0201 	orr.w	r2, r3, #1
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	62da      	str	r2, [r3, #44]	; 0x2c
 80065b4:	2301      	movs	r3, #1
 80065b6:	75fb      	strb	r3, [r7, #23]
 80065b8:	e007      	b.n	80065ca <HAL_ADC_Init+0x19e>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065be:	f043 0210 	orr.w	r2, r3, #16
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	629a      	str	r2, [r3, #40]	; 0x28
 80065c6:	2301      	movs	r3, #1
 80065c8:	75fb      	strb	r3, [r7, #23]
 80065ca:	7dfb      	ldrb	r3, [r7, #23]
 80065cc:	4618      	mov	r0, r3
 80065ce:	3718      	adds	r7, #24
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	ffe1f7fd 	.word	0xffe1f7fd
 80065d8:	ff1f0efe 	.word	0xff1f0efe

080065dc <HAL_ADC_Start_DMA>:
 80065dc:	b580      	push	{r7, lr}
 80065de:	b086      	sub	sp, #24
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	607a      	str	r2, [r7, #4]
 80065e8:	2300      	movs	r3, #0
 80065ea:	75fb      	strb	r3, [r7, #23]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a64      	ldr	r2, [pc, #400]	; (8006784 <HAL_ADC_Start_DMA+0x1a8>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d004      	beq.n	8006600 <HAL_ADC_Start_DMA+0x24>
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a63      	ldr	r2, [pc, #396]	; (8006788 <HAL_ADC_Start_DMA+0x1ac>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d106      	bne.n	800660e <HAL_ADC_Start_DMA+0x32>
 8006600:	4b60      	ldr	r3, [pc, #384]	; (8006784 <HAL_ADC_Start_DMA+0x1a8>)
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8006608:	2b00      	cmp	r3, #0
 800660a:	f040 80b3 	bne.w	8006774 <HAL_ADC_Start_DMA+0x198>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006614:	2b01      	cmp	r3, #1
 8006616:	d101      	bne.n	800661c <HAL_ADC_Start_DMA+0x40>
 8006618:	2302      	movs	r3, #2
 800661a:	e0ae      	b.n	800677a <HAL_ADC_Start_DMA+0x19e>
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006624:	68f8      	ldr	r0, [r7, #12]
 8006626:	f000 fa8d 	bl	8006b44 <ADC_Enable>
 800662a:	4603      	mov	r3, r0
 800662c:	75fb      	strb	r3, [r7, #23]
 800662e:	7dfb      	ldrb	r3, [r7, #23]
 8006630:	2b00      	cmp	r3, #0
 8006632:	f040 809a 	bne.w	800676a <HAL_ADC_Start_DMA+0x18e>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800663a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800663e:	f023 0301 	bic.w	r3, r3, #1
 8006642:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	629a      	str	r2, [r3, #40]	; 0x28
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a4e      	ldr	r2, [pc, #312]	; (8006788 <HAL_ADC_Start_DMA+0x1ac>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d105      	bne.n	8006660 <HAL_ADC_Start_DMA+0x84>
 8006654:	4b4b      	ldr	r3, [pc, #300]	; (8006784 <HAL_ADC_Start_DMA+0x1a8>)
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800665c:	2b00      	cmp	r3, #0
 800665e:	d115      	bne.n	800668c <HAL_ADC_Start_DMA+0xb0>
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006664:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	629a      	str	r2, [r3, #40]	; 0x28
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006676:	2b00      	cmp	r3, #0
 8006678:	d026      	beq.n	80066c8 <HAL_ADC_Start_DMA+0xec>
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800667e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006682:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	629a      	str	r2, [r3, #40]	; 0x28
 800668a:	e01d      	b.n	80066c8 <HAL_ADC_Start_DMA+0xec>
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006690:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	629a      	str	r2, [r3, #40]	; 0x28
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a39      	ldr	r2, [pc, #228]	; (8006784 <HAL_ADC_Start_DMA+0x1a8>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d004      	beq.n	80066ac <HAL_ADC_Start_DMA+0xd0>
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a38      	ldr	r2, [pc, #224]	; (8006788 <HAL_ADC_Start_DMA+0x1ac>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d10d      	bne.n	80066c8 <HAL_ADC_Start_DMA+0xec>
 80066ac:	4b35      	ldr	r3, [pc, #212]	; (8006784 <HAL_ADC_Start_DMA+0x1a8>)
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d007      	beq.n	80066c8 <HAL_ADC_Start_DMA+0xec>
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80066c0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	629a      	str	r2, [r3, #40]	; 0x28
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d006      	beq.n	80066e2 <HAL_ADC_Start_DMA+0x106>
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d8:	f023 0206 	bic.w	r2, r3, #6
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	62da      	str	r2, [r3, #44]	; 0x2c
 80066e0:	e002      	b.n	80066e8 <HAL_ADC_Start_DMA+0x10c>
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2200      	movs	r2, #0
 80066e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6a1b      	ldr	r3, [r3, #32]
 80066f4:	4a25      	ldr	r2, [pc, #148]	; (800678c <HAL_ADC_Start_DMA+0x1b0>)
 80066f6:	629a      	str	r2, [r3, #40]	; 0x28
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6a1b      	ldr	r3, [r3, #32]
 80066fc:	4a24      	ldr	r2, [pc, #144]	; (8006790 <HAL_ADC_Start_DMA+0x1b4>)
 80066fe:	62da      	str	r2, [r3, #44]	; 0x2c
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6a1b      	ldr	r3, [r3, #32]
 8006704:	4a23      	ldr	r2, [pc, #140]	; (8006794 <HAL_ADC_Start_DMA+0x1b8>)
 8006706:	631a      	str	r2, [r3, #48]	; 0x30
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f06f 0202 	mvn.w	r2, #2
 8006710:	601a      	str	r2, [r3, #0]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	689a      	ldr	r2, [r3, #8]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006720:	609a      	str	r2, [r3, #8]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	6a18      	ldr	r0, [r3, #32]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	334c      	adds	r3, #76	; 0x4c
 800672c:	4619      	mov	r1, r3
 800672e:	68ba      	ldr	r2, [r7, #8]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f000 fd07 	bl	8007144 <HAL_DMA_Start_IT>
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8006740:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8006744:	d108      	bne.n	8006758 <HAL_ADC_Start_DMA+0x17c>
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	689a      	ldr	r2, [r3, #8]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8006754:	609a      	str	r2, [r3, #8]
 8006756:	e00f      	b.n	8006778 <HAL_ADC_Start_DMA+0x19c>
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	689a      	ldr	r2, [r3, #8]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006766:	609a      	str	r2, [r3, #8]
 8006768:	e006      	b.n	8006778 <HAL_ADC_Start_DMA+0x19c>
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2200      	movs	r2, #0
 800676e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006772:	e001      	b.n	8006778 <HAL_ADC_Start_DMA+0x19c>
 8006774:	2301      	movs	r3, #1
 8006776:	75fb      	strb	r3, [r7, #23]
 8006778:	7dfb      	ldrb	r3, [r7, #23]
 800677a:	4618      	mov	r0, r3
 800677c:	3718      	adds	r7, #24
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	40012400 	.word	0x40012400
 8006788:	40012800 	.word	0x40012800
 800678c:	08006c7b 	.word	0x08006c7b
 8006790:	08006cf7 	.word	0x08006cf7
 8006794:	08006d13 	.word	0x08006d13

08006798 <HAL_ADC_IRQHandler>:
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	f003 0320 	and.w	r3, r3, #32
 80067aa:	2b20      	cmp	r3, #32
 80067ac:	d140      	bne.n	8006830 <HAL_ADC_IRQHandler+0x98>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 0302 	and.w	r3, r3, #2
 80067b8:	2b02      	cmp	r3, #2
 80067ba:	d139      	bne.n	8006830 <HAL_ADC_IRQHandler+0x98>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067c0:	f003 0310 	and.w	r3, r3, #16
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d105      	bne.n	80067d4 <HAL_ADC_IRQHandler+0x3c>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067cc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	629a      	str	r2, [r3, #40]	; 0x28
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80067de:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80067e2:	d11d      	bne.n	8006820 <HAL_ADC_IRQHandler+0x88>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	7b1b      	ldrb	r3, [r3, #12]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d119      	bne.n	8006820 <HAL_ADC_IRQHandler+0x88>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	685a      	ldr	r2, [r3, #4]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f022 0220 	bic.w	r2, r2, #32
 80067fa:	605a      	str	r2, [r3, #4]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006800:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	629a      	str	r2, [r3, #40]	; 0x28
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800680c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006810:	2b00      	cmp	r3, #0
 8006812:	d105      	bne.n	8006820 <HAL_ADC_IRQHandler+0x88>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006818:	f043 0201 	orr.w	r2, r3, #1
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	629a      	str	r2, [r3, #40]	; 0x28
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f7fe f9b5 	bl	8004b90 <HAL_ADC_ConvCpltCallback>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f06f 0212 	mvn.w	r2, #18
 800682e:	601a      	str	r2, [r3, #0]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800683a:	2b80      	cmp	r3, #128	; 0x80
 800683c:	d14f      	bne.n	80068de <HAL_ADC_IRQHandler+0x146>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f003 0304 	and.w	r3, r3, #4
 8006848:	2b04      	cmp	r3, #4
 800684a:	d148      	bne.n	80068de <HAL_ADC_IRQHandler+0x146>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006850:	f003 0310 	and.w	r3, r3, #16
 8006854:	2b00      	cmp	r3, #0
 8006856:	d105      	bne.n	8006864 <HAL_ADC_IRQHandler+0xcc>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800685c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	629a      	str	r2, [r3, #40]	; 0x28
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800686e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8006872:	d012      	beq.n	800689a <HAL_ADC_IRQHandler+0x102>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800687e:	2b00      	cmp	r3, #0
 8006880:	d125      	bne.n	80068ce <HAL_ADC_IRQHandler+0x136>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800688c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8006890:	d11d      	bne.n	80068ce <HAL_ADC_IRQHandler+0x136>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	7b1b      	ldrb	r3, [r3, #12]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d119      	bne.n	80068ce <HAL_ADC_IRQHandler+0x136>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	685a      	ldr	r2, [r3, #4]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068a8:	605a      	str	r2, [r3, #4]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	629a      	str	r2, [r3, #40]	; 0x28
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d105      	bne.n	80068ce <HAL_ADC_IRQHandler+0x136>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c6:	f043 0201 	orr.w	r2, r3, #1
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	629a      	str	r2, [r3, #40]	; 0x28
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 fa39 	bl	8006d46 <HAL_ADCEx_InjectedConvCpltCallback>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f06f 020c 	mvn.w	r2, #12
 80068dc:	601a      	str	r2, [r3, #0]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068e8:	2b40      	cmp	r3, #64	; 0x40
 80068ea:	d114      	bne.n	8006916 <HAL_ADC_IRQHandler+0x17e>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 0301 	and.w	r3, r3, #1
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d10d      	bne.n	8006916 <HAL_ADC_IRQHandler+0x17e>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	629a      	str	r2, [r3, #40]	; 0x28
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 f812 	bl	8006930 <HAL_ADC_LevelOutOfWindowCallback>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f06f 0201 	mvn.w	r2, #1
 8006914:	601a      	str	r2, [r3, #0]
 8006916:	bf00      	nop
 8006918:	3708      	adds	r7, #8
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}

0800691e <HAL_ADC_ConvHalfCpltCallback>:
 800691e:	b480      	push	{r7}
 8006920:	b083      	sub	sp, #12
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
 8006926:	bf00      	nop
 8006928:	370c      	adds	r7, #12
 800692a:	46bd      	mov	sp, r7
 800692c:	bc80      	pop	{r7}
 800692e:	4770      	bx	lr

08006930 <HAL_ADC_LevelOutOfWindowCallback>:
 8006930:	b480      	push	{r7}
 8006932:	b083      	sub	sp, #12
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	bf00      	nop
 800693a:	370c      	adds	r7, #12
 800693c:	46bd      	mov	sp, r7
 800693e:	bc80      	pop	{r7}
 8006940:	4770      	bx	lr

08006942 <HAL_ADC_ErrorCallback>:
 8006942:	b480      	push	{r7}
 8006944:	b083      	sub	sp, #12
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
 800694a:	bf00      	nop
 800694c:	370c      	adds	r7, #12
 800694e:	46bd      	mov	sp, r7
 8006950:	bc80      	pop	{r7}
 8006952:	4770      	bx	lr

08006954 <HAL_ADC_ConfigChannel>:
 8006954:	b480      	push	{r7}
 8006956:	b085      	sub	sp, #20
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
 800695e:	2300      	movs	r3, #0
 8006960:	73fb      	strb	r3, [r7, #15]
 8006962:	2300      	movs	r3, #0
 8006964:	60bb      	str	r3, [r7, #8]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800696c:	2b01      	cmp	r3, #1
 800696e:	d101      	bne.n	8006974 <HAL_ADC_ConfigChannel+0x20>
 8006970:	2302      	movs	r3, #2
 8006972:	e0dc      	b.n	8006b2e <HAL_ADC_ConfigChannel+0x1da>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	2b06      	cmp	r3, #6
 8006982:	d81c      	bhi.n	80069be <HAL_ADC_ConfigChannel+0x6a>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	685a      	ldr	r2, [r3, #4]
 800698e:	4613      	mov	r3, r2
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	4413      	add	r3, r2
 8006994:	3b05      	subs	r3, #5
 8006996:	221f      	movs	r2, #31
 8006998:	fa02 f303 	lsl.w	r3, r2, r3
 800699c:	43db      	mvns	r3, r3
 800699e:	4019      	ands	r1, r3
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	6818      	ldr	r0, [r3, #0]
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	685a      	ldr	r2, [r3, #4]
 80069a8:	4613      	mov	r3, r2
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	4413      	add	r3, r2
 80069ae:	3b05      	subs	r3, #5
 80069b0:	fa00 f203 	lsl.w	r2, r0, r3
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	430a      	orrs	r2, r1
 80069ba:	635a      	str	r2, [r3, #52]	; 0x34
 80069bc:	e03c      	b.n	8006a38 <HAL_ADC_ConfigChannel+0xe4>
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	2b0c      	cmp	r3, #12
 80069c4:	d81c      	bhi.n	8006a00 <HAL_ADC_ConfigChannel+0xac>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	685a      	ldr	r2, [r3, #4]
 80069d0:	4613      	mov	r3, r2
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	4413      	add	r3, r2
 80069d6:	3b23      	subs	r3, #35	; 0x23
 80069d8:	221f      	movs	r2, #31
 80069da:	fa02 f303 	lsl.w	r3, r2, r3
 80069de:	43db      	mvns	r3, r3
 80069e0:	4019      	ands	r1, r3
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	6818      	ldr	r0, [r3, #0]
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	685a      	ldr	r2, [r3, #4]
 80069ea:	4613      	mov	r3, r2
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	4413      	add	r3, r2
 80069f0:	3b23      	subs	r3, #35	; 0x23
 80069f2:	fa00 f203 	lsl.w	r2, r0, r3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	430a      	orrs	r2, r1
 80069fc:	631a      	str	r2, [r3, #48]	; 0x30
 80069fe:	e01b      	b.n	8006a38 <HAL_ADC_ConfigChannel+0xe4>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	685a      	ldr	r2, [r3, #4]
 8006a0a:	4613      	mov	r3, r2
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	4413      	add	r3, r2
 8006a10:	3b41      	subs	r3, #65	; 0x41
 8006a12:	221f      	movs	r2, #31
 8006a14:	fa02 f303 	lsl.w	r3, r2, r3
 8006a18:	43db      	mvns	r3, r3
 8006a1a:	4019      	ands	r1, r3
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	6818      	ldr	r0, [r3, #0]
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	685a      	ldr	r2, [r3, #4]
 8006a24:	4613      	mov	r3, r2
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	4413      	add	r3, r2
 8006a2a:	3b41      	subs	r3, #65	; 0x41
 8006a2c:	fa00 f203 	lsl.w	r2, r0, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	430a      	orrs	r2, r1
 8006a36:	62da      	str	r2, [r3, #44]	; 0x2c
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2b09      	cmp	r3, #9
 8006a3e:	d91c      	bls.n	8006a7a <HAL_ADC_ConfigChannel+0x126>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	68d9      	ldr	r1, [r3, #12]
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	4613      	mov	r3, r2
 8006a4c:	005b      	lsls	r3, r3, #1
 8006a4e:	4413      	add	r3, r2
 8006a50:	3b1e      	subs	r3, #30
 8006a52:	2207      	movs	r2, #7
 8006a54:	fa02 f303 	lsl.w	r3, r2, r3
 8006a58:	43db      	mvns	r3, r3
 8006a5a:	4019      	ands	r1, r3
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	6898      	ldr	r0, [r3, #8]
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	4613      	mov	r3, r2
 8006a66:	005b      	lsls	r3, r3, #1
 8006a68:	4413      	add	r3, r2
 8006a6a:	3b1e      	subs	r3, #30
 8006a6c:	fa00 f203 	lsl.w	r2, r0, r3
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	430a      	orrs	r2, r1
 8006a76:	60da      	str	r2, [r3, #12]
 8006a78:	e019      	b.n	8006aae <HAL_ADC_ConfigChannel+0x15a>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	6919      	ldr	r1, [r3, #16]
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	4613      	mov	r3, r2
 8006a86:	005b      	lsls	r3, r3, #1
 8006a88:	4413      	add	r3, r2
 8006a8a:	2207      	movs	r2, #7
 8006a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a90:	43db      	mvns	r3, r3
 8006a92:	4019      	ands	r1, r3
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	6898      	ldr	r0, [r3, #8]
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	4613      	mov	r3, r2
 8006a9e:	005b      	lsls	r3, r3, #1
 8006aa0:	4413      	add	r3, r2
 8006aa2:	fa00 f203 	lsl.w	r2, r0, r3
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	430a      	orrs	r2, r1
 8006aac:	611a      	str	r2, [r3, #16]
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	2b10      	cmp	r3, #16
 8006ab4:	d003      	beq.n	8006abe <HAL_ADC_ConfigChannel+0x16a>
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	2b11      	cmp	r3, #17
 8006abc:	d132      	bne.n	8006b24 <HAL_ADC_ConfigChannel+0x1d0>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a1d      	ldr	r2, [pc, #116]	; (8006b38 <HAL_ADC_ConfigChannel+0x1e4>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d125      	bne.n	8006b14 <HAL_ADC_ConfigChannel+0x1c0>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d126      	bne.n	8006b24 <HAL_ADC_ConfigChannel+0x1d0>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	689a      	ldr	r2, [r3, #8]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006ae4:	609a      	str	r2, [r3, #8]
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	2b10      	cmp	r3, #16
 8006aec:	d11a      	bne.n	8006b24 <HAL_ADC_ConfigChannel+0x1d0>
 8006aee:	4b13      	ldr	r3, [pc, #76]	; (8006b3c <HAL_ADC_ConfigChannel+0x1e8>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a13      	ldr	r2, [pc, #76]	; (8006b40 <HAL_ADC_ConfigChannel+0x1ec>)
 8006af4:	fba2 2303 	umull	r2, r3, r2, r3
 8006af8:	0c9a      	lsrs	r2, r3, #18
 8006afa:	4613      	mov	r3, r2
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	4413      	add	r3, r2
 8006b00:	005b      	lsls	r3, r3, #1
 8006b02:	60bb      	str	r3, [r7, #8]
 8006b04:	e002      	b.n	8006b0c <HAL_ADC_ConfigChannel+0x1b8>
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	3b01      	subs	r3, #1
 8006b0a:	60bb      	str	r3, [r7, #8]
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d1f9      	bne.n	8006b06 <HAL_ADC_ConfigChannel+0x1b2>
 8006b12:	e007      	b.n	8006b24 <HAL_ADC_ConfigChannel+0x1d0>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b18:	f043 0220 	orr.w	r2, r3, #32
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	629a      	str	r2, [r3, #40]	; 0x28
 8006b20:	2301      	movs	r3, #1
 8006b22:	73fb      	strb	r3, [r7, #15]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006b2c:	7bfb      	ldrb	r3, [r7, #15]
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3714      	adds	r7, #20
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bc80      	pop	{r7}
 8006b36:	4770      	bx	lr
 8006b38:	40012400 	.word	0x40012400
 8006b3c:	2000023c 	.word	0x2000023c
 8006b40:	431bde83 	.word	0x431bde83

08006b44 <ADC_Enable>:
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	60fb      	str	r3, [r7, #12]
 8006b50:	2300      	movs	r3, #0
 8006b52:	60bb      	str	r3, [r7, #8]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	f003 0301 	and.w	r3, r3, #1
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d040      	beq.n	8006be4 <ADC_Enable+0xa0>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	689a      	ldr	r2, [r3, #8]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f042 0201 	orr.w	r2, r2, #1
 8006b70:	609a      	str	r2, [r3, #8]
 8006b72:	4b1f      	ldr	r3, [pc, #124]	; (8006bf0 <ADC_Enable+0xac>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a1f      	ldr	r2, [pc, #124]	; (8006bf4 <ADC_Enable+0xb0>)
 8006b78:	fba2 2303 	umull	r2, r3, r2, r3
 8006b7c:	0c9b      	lsrs	r3, r3, #18
 8006b7e:	60bb      	str	r3, [r7, #8]
 8006b80:	e002      	b.n	8006b88 <ADC_Enable+0x44>
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	3b01      	subs	r3, #1
 8006b86:	60bb      	str	r3, [r7, #8]
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d1f9      	bne.n	8006b82 <ADC_Enable+0x3e>
 8006b8e:	f7ff fc43 	bl	8006418 <HAL_GetTick>
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	e01f      	b.n	8006bd6 <ADC_Enable+0x92>
 8006b96:	f7ff fc3f 	bl	8006418 <HAL_GetTick>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	1ad3      	subs	r3, r2, r3
 8006ba0:	2b02      	cmp	r3, #2
 8006ba2:	d918      	bls.n	8006bd6 <ADC_Enable+0x92>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	f003 0301 	and.w	r3, r3, #1
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d011      	beq.n	8006bd6 <ADC_Enable+0x92>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb6:	f043 0210 	orr.w	r2, r3, #16
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	629a      	str	r2, [r3, #40]	; 0x28
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc2:	f043 0201 	orr.w	r2, r3, #1
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	62da      	str	r2, [r3, #44]	; 0x2c
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e007      	b.n	8006be6 <ADC_Enable+0xa2>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	f003 0301 	and.w	r3, r3, #1
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d1d8      	bne.n	8006b96 <ADC_Enable+0x52>
 8006be4:	2300      	movs	r3, #0
 8006be6:	4618      	mov	r0, r3
 8006be8:	3710      	adds	r7, #16
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	2000023c 	.word	0x2000023c
 8006bf4:	431bde83 	.word	0x431bde83

08006bf8 <ADC_ConversionStop_Disable>:
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	2300      	movs	r3, #0
 8006c02:	60fb      	str	r3, [r7, #12]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	f003 0301 	and.w	r3, r3, #1
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d12e      	bne.n	8006c70 <ADC_ConversionStop_Disable+0x78>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	689a      	ldr	r2, [r3, #8]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f022 0201 	bic.w	r2, r2, #1
 8006c20:	609a      	str	r2, [r3, #8]
 8006c22:	f7ff fbf9 	bl	8006418 <HAL_GetTick>
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	e01b      	b.n	8006c62 <ADC_ConversionStop_Disable+0x6a>
 8006c2a:	f7ff fbf5 	bl	8006418 <HAL_GetTick>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	1ad3      	subs	r3, r2, r3
 8006c34:	2b02      	cmp	r3, #2
 8006c36:	d914      	bls.n	8006c62 <ADC_ConversionStop_Disable+0x6a>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	f003 0301 	and.w	r3, r3, #1
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d10d      	bne.n	8006c62 <ADC_ConversionStop_Disable+0x6a>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c4a:	f043 0210 	orr.w	r2, r3, #16
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	629a      	str	r2, [r3, #40]	; 0x28
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c56:	f043 0201 	orr.w	r2, r3, #1
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e007      	b.n	8006c72 <ADC_ConversionStop_Disable+0x7a>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	f003 0301 	and.w	r3, r3, #1
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d0dc      	beq.n	8006c2a <ADC_ConversionStop_Disable+0x32>
 8006c70:	2300      	movs	r3, #0
 8006c72:	4618      	mov	r0, r3
 8006c74:	3710      	adds	r7, #16
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}

08006c7a <ADC_DMAConvCplt>:
 8006c7a:	b580      	push	{r7, lr}
 8006c7c:	b084      	sub	sp, #16
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c86:	60fb      	str	r3, [r7, #12]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c8c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d127      	bne.n	8006ce4 <ADC_DMAConvCplt+0x6a>
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c98:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	629a      	str	r2, [r3, #40]	; 0x28
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8006caa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8006cae:	d115      	bne.n	8006cdc <ADC_DMAConvCplt+0x62>
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	7b1b      	ldrb	r3, [r3, #12]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d111      	bne.n	8006cdc <ADC_DMAConvCplt+0x62>
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cbc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	629a      	str	r2, [r3, #40]	; 0x28
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d105      	bne.n	8006cdc <ADC_DMAConvCplt+0x62>
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cd4:	f043 0201 	orr.w	r2, r3, #1
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	629a      	str	r2, [r3, #40]	; 0x28
 8006cdc:	68f8      	ldr	r0, [r7, #12]
 8006cde:	f7fd ff57 	bl	8004b90 <HAL_ADC_ConvCpltCallback>
 8006ce2:	e004      	b.n	8006cee <ADC_DMAConvCplt+0x74>
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6a1b      	ldr	r3, [r3, #32]
 8006ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	4798      	blx	r3
 8006cee:	bf00      	nop
 8006cf0:	3710      	adds	r7, #16
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}

08006cf6 <ADC_DMAHalfConvCplt>:
 8006cf6:	b580      	push	{r7, lr}
 8006cf8:	b084      	sub	sp, #16
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d02:	60fb      	str	r3, [r7, #12]
 8006d04:	68f8      	ldr	r0, [r7, #12]
 8006d06:	f7ff fe0a 	bl	800691e <HAL_ADC_ConvHalfCpltCallback>
 8006d0a:	bf00      	nop
 8006d0c:	3710      	adds	r7, #16
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}

08006d12 <ADC_DMAError>:
 8006d12:	b580      	push	{r7, lr}
 8006d14:	b084      	sub	sp, #16
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1e:	60fb      	str	r3, [r7, #12]
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d24:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	629a      	str	r2, [r3, #40]	; 0x28
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d30:	f043 0204 	orr.w	r2, r3, #4
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	62da      	str	r2, [r3, #44]	; 0x2c
 8006d38:	68f8      	ldr	r0, [r7, #12]
 8006d3a:	f7ff fe02 	bl	8006942 <HAL_ADC_ErrorCallback>
 8006d3e:	bf00      	nop
 8006d40:	3710      	adds	r7, #16
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}

08006d46 <HAL_ADCEx_InjectedConvCpltCallback>:
 8006d46:	b480      	push	{r7}
 8006d48:	b083      	sub	sp, #12
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
 8006d4e:	bf00      	nop
 8006d50:	370c      	adds	r7, #12
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bc80      	pop	{r7}
 8006d56:	4770      	bx	lr

08006d58 <__NVIC_SetPriorityGrouping>:
 8006d58:	b480      	push	{r7}
 8006d5a:	b085      	sub	sp, #20
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f003 0307 	and.w	r3, r3, #7
 8006d66:	60fb      	str	r3, [r7, #12]
 8006d68:	4b0c      	ldr	r3, [pc, #48]	; (8006d9c <__NVIC_SetPriorityGrouping+0x44>)
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	60bb      	str	r3, [r7, #8]
 8006d6e:	68ba      	ldr	r2, [r7, #8]
 8006d70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006d74:	4013      	ands	r3, r2
 8006d76:	60bb      	str	r3, [r7, #8]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	021a      	lsls	r2, r3, #8
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d88:	60bb      	str	r3, [r7, #8]
 8006d8a:	4a04      	ldr	r2, [pc, #16]	; (8006d9c <__NVIC_SetPriorityGrouping+0x44>)
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	60d3      	str	r3, [r2, #12]
 8006d90:	bf00      	nop
 8006d92:	3714      	adds	r7, #20
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bc80      	pop	{r7}
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	e000ed00 	.word	0xe000ed00

08006da0 <__NVIC_GetPriorityGrouping>:
 8006da0:	b480      	push	{r7}
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	4b04      	ldr	r3, [pc, #16]	; (8006db8 <__NVIC_GetPriorityGrouping+0x18>)
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	0a1b      	lsrs	r3, r3, #8
 8006daa:	f003 0307 	and.w	r3, r3, #7
 8006dae:	4618      	mov	r0, r3
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bc80      	pop	{r7}
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop
 8006db8:	e000ed00 	.word	0xe000ed00

08006dbc <__NVIC_EnableIRQ>:
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	71fb      	strb	r3, [r7, #7]
 8006dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	db0b      	blt.n	8006de6 <__NVIC_EnableIRQ+0x2a>
 8006dce:	79fb      	ldrb	r3, [r7, #7]
 8006dd0:	f003 021f 	and.w	r2, r3, #31
 8006dd4:	4906      	ldr	r1, [pc, #24]	; (8006df0 <__NVIC_EnableIRQ+0x34>)
 8006dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dda:	095b      	lsrs	r3, r3, #5
 8006ddc:	2001      	movs	r0, #1
 8006dde:	fa00 f202 	lsl.w	r2, r0, r2
 8006de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006de6:	bf00      	nop
 8006de8:	370c      	adds	r7, #12
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bc80      	pop	{r7}
 8006dee:	4770      	bx	lr
 8006df0:	e000e100 	.word	0xe000e100

08006df4 <__NVIC_DisableIRQ>:
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	71fb      	strb	r3, [r7, #7]
 8006dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	db12      	blt.n	8006e2c <__NVIC_DisableIRQ+0x38>
 8006e06:	79fb      	ldrb	r3, [r7, #7]
 8006e08:	f003 021f 	and.w	r2, r3, #31
 8006e0c:	490a      	ldr	r1, [pc, #40]	; (8006e38 <__NVIC_DisableIRQ+0x44>)
 8006e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e12:	095b      	lsrs	r3, r3, #5
 8006e14:	2001      	movs	r0, #1
 8006e16:	fa00 f202 	lsl.w	r2, r0, r2
 8006e1a:	3320      	adds	r3, #32
 8006e1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006e20:	f3bf 8f4f 	dsb	sy
 8006e24:	bf00      	nop
 8006e26:	f3bf 8f6f 	isb	sy
 8006e2a:	bf00      	nop
 8006e2c:	bf00      	nop
 8006e2e:	370c      	adds	r7, #12
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bc80      	pop	{r7}
 8006e34:	4770      	bx	lr
 8006e36:	bf00      	nop
 8006e38:	e000e100 	.word	0xe000e100

08006e3c <__NVIC_SetPriority>:
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	4603      	mov	r3, r0
 8006e44:	6039      	str	r1, [r7, #0]
 8006e46:	71fb      	strb	r3, [r7, #7]
 8006e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	db0a      	blt.n	8006e66 <__NVIC_SetPriority+0x2a>
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	b2da      	uxtb	r2, r3
 8006e54:	490c      	ldr	r1, [pc, #48]	; (8006e88 <__NVIC_SetPriority+0x4c>)
 8006e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e5a:	0112      	lsls	r2, r2, #4
 8006e5c:	b2d2      	uxtb	r2, r2
 8006e5e:	440b      	add	r3, r1
 8006e60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8006e64:	e00a      	b.n	8006e7c <__NVIC_SetPriority+0x40>
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	b2da      	uxtb	r2, r3
 8006e6a:	4908      	ldr	r1, [pc, #32]	; (8006e8c <__NVIC_SetPriority+0x50>)
 8006e6c:	79fb      	ldrb	r3, [r7, #7]
 8006e6e:	f003 030f 	and.w	r3, r3, #15
 8006e72:	3b04      	subs	r3, #4
 8006e74:	0112      	lsls	r2, r2, #4
 8006e76:	b2d2      	uxtb	r2, r2
 8006e78:	440b      	add	r3, r1
 8006e7a:	761a      	strb	r2, [r3, #24]
 8006e7c:	bf00      	nop
 8006e7e:	370c      	adds	r7, #12
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bc80      	pop	{r7}
 8006e84:	4770      	bx	lr
 8006e86:	bf00      	nop
 8006e88:	e000e100 	.word	0xe000e100
 8006e8c:	e000ed00 	.word	0xe000ed00

08006e90 <NVIC_EncodePriority>:
 8006e90:	b480      	push	{r7}
 8006e92:	b089      	sub	sp, #36	; 0x24
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	60b9      	str	r1, [r7, #8]
 8006e9a:	607a      	str	r2, [r7, #4]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f003 0307 	and.w	r3, r3, #7
 8006ea2:	61fb      	str	r3, [r7, #28]
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	f1c3 0307 	rsb	r3, r3, #7
 8006eaa:	2b04      	cmp	r3, #4
 8006eac:	bf28      	it	cs
 8006eae:	2304      	movcs	r3, #4
 8006eb0:	61bb      	str	r3, [r7, #24]
 8006eb2:	69fb      	ldr	r3, [r7, #28]
 8006eb4:	3304      	adds	r3, #4
 8006eb6:	2b06      	cmp	r3, #6
 8006eb8:	d902      	bls.n	8006ec0 <NVIC_EncodePriority+0x30>
 8006eba:	69fb      	ldr	r3, [r7, #28]
 8006ebc:	3b03      	subs	r3, #3
 8006ebe:	e000      	b.n	8006ec2 <NVIC_EncodePriority+0x32>
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	617b      	str	r3, [r7, #20]
 8006ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ec8:	69bb      	ldr	r3, [r7, #24]
 8006eca:	fa02 f303 	lsl.w	r3, r2, r3
 8006ece:	43da      	mvns	r2, r3
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	401a      	ands	r2, r3
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	409a      	lsls	r2, r3
 8006ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	fa01 f303 	lsl.w	r3, r1, r3
 8006ee2:	43d9      	mvns	r1, r3
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	400b      	ands	r3, r1
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	4618      	mov	r0, r3
 8006eec:	3724      	adds	r7, #36	; 0x24
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bc80      	pop	{r7}
 8006ef2:	4770      	bx	lr

08006ef4 <SysTick_Config>:
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	3b01      	subs	r3, #1
 8006f00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006f04:	d301      	bcc.n	8006f0a <SysTick_Config+0x16>
 8006f06:	2301      	movs	r3, #1
 8006f08:	e00f      	b.n	8006f2a <SysTick_Config+0x36>
 8006f0a:	4a0a      	ldr	r2, [pc, #40]	; (8006f34 <SysTick_Config+0x40>)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	3b01      	subs	r3, #1
 8006f10:	6053      	str	r3, [r2, #4]
 8006f12:	210f      	movs	r1, #15
 8006f14:	f04f 30ff 	mov.w	r0, #4294967295
 8006f18:	f7ff ff90 	bl	8006e3c <__NVIC_SetPriority>
 8006f1c:	4b05      	ldr	r3, [pc, #20]	; (8006f34 <SysTick_Config+0x40>)
 8006f1e:	2200      	movs	r2, #0
 8006f20:	609a      	str	r2, [r3, #8]
 8006f22:	4b04      	ldr	r3, [pc, #16]	; (8006f34 <SysTick_Config+0x40>)
 8006f24:	2207      	movs	r2, #7
 8006f26:	601a      	str	r2, [r3, #0]
 8006f28:	2300      	movs	r3, #0
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3708      	adds	r7, #8
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
 8006f32:	bf00      	nop
 8006f34:	e000e010 	.word	0xe000e010

08006f38 <HAL_NVIC_SetPriorityGrouping>:
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b082      	sub	sp, #8
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f7ff ff09 	bl	8006d58 <__NVIC_SetPriorityGrouping>
 8006f46:	bf00      	nop
 8006f48:	3708      	adds	r7, #8
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}

08006f4e <HAL_NVIC_SetPriority>:
 8006f4e:	b580      	push	{r7, lr}
 8006f50:	b086      	sub	sp, #24
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	4603      	mov	r3, r0
 8006f56:	60b9      	str	r1, [r7, #8]
 8006f58:	607a      	str	r2, [r7, #4]
 8006f5a:	73fb      	strb	r3, [r7, #15]
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	617b      	str	r3, [r7, #20]
 8006f60:	f7ff ff1e 	bl	8006da0 <__NVIC_GetPriorityGrouping>
 8006f64:	6178      	str	r0, [r7, #20]
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	68b9      	ldr	r1, [r7, #8]
 8006f6a:	6978      	ldr	r0, [r7, #20]
 8006f6c:	f7ff ff90 	bl	8006e90 <NVIC_EncodePriority>
 8006f70:	4602      	mov	r2, r0
 8006f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f76:	4611      	mov	r1, r2
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f7ff ff5f 	bl	8006e3c <__NVIC_SetPriority>
 8006f7e:	bf00      	nop
 8006f80:	3718      	adds	r7, #24
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}

08006f86 <HAL_NVIC_EnableIRQ>:
 8006f86:	b580      	push	{r7, lr}
 8006f88:	b082      	sub	sp, #8
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	71fb      	strb	r3, [r7, #7]
 8006f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f94:	4618      	mov	r0, r3
 8006f96:	f7ff ff11 	bl	8006dbc <__NVIC_EnableIRQ>
 8006f9a:	bf00      	nop
 8006f9c:	3708      	adds	r7, #8
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}

08006fa2 <HAL_NVIC_DisableIRQ>:
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b082      	sub	sp, #8
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	4603      	mov	r3, r0
 8006faa:	71fb      	strb	r3, [r7, #7]
 8006fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f7ff ff1f 	bl	8006df4 <__NVIC_DisableIRQ>
 8006fb6:	bf00      	nop
 8006fb8:	3708      	adds	r7, #8
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}

08006fbe <HAL_SYSTICK_Config>:
 8006fbe:	b580      	push	{r7, lr}
 8006fc0:	b082      	sub	sp, #8
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f7ff ff94 	bl	8006ef4 <SysTick_Config>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3708      	adds	r7, #8
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
	...

08006fd8 <HAL_DMA_Init>:
 8006fd8:	b480      	push	{r7}
 8006fda:	b085      	sub	sp, #20
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	60fb      	str	r3, [r7, #12]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d101      	bne.n	8006fee <HAL_DMA_Init+0x16>
 8006fea:	2301      	movs	r3, #1
 8006fec:	e043      	b.n	8007076 <HAL_DMA_Init+0x9e>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	4b22      	ldr	r3, [pc, #136]	; (8007080 <HAL_DMA_Init+0xa8>)
 8006ff6:	4413      	add	r3, r2
 8006ff8:	4a22      	ldr	r2, [pc, #136]	; (8007084 <HAL_DMA_Init+0xac>)
 8006ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8006ffe:	091b      	lsrs	r3, r3, #4
 8007000:	009a      	lsls	r2, r3, #2
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	641a      	str	r2, [r3, #64]	; 0x40
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	4a1f      	ldr	r2, [pc, #124]	; (8007088 <HAL_DMA_Init+0xb0>)
 800700a:	63da      	str	r2, [r3, #60]	; 0x3c
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2202      	movs	r2, #2
 8007010:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	60fb      	str	r3, [r7, #12]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8007022:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8007026:	60fb      	str	r3, [r7, #12]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	685a      	ldr	r2, [r3, #4]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	431a      	orrs	r2, r3
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	431a      	orrs	r2, r3
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	431a      	orrs	r2, r3
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	695b      	ldr	r3, [r3, #20]
 8007042:	431a      	orrs	r2, r3
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	699b      	ldr	r3, [r3, #24]
 8007048:	431a      	orrs	r2, r3
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	69db      	ldr	r3, [r3, #28]
 800704e:	4313      	orrs	r3, r2
 8007050:	68fa      	ldr	r2, [r7, #12]
 8007052:	4313      	orrs	r3, r2
 8007054:	60fb      	str	r3, [r7, #12]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	68fa      	ldr	r2, [r7, #12]
 800705c:	601a      	str	r2, [r3, #0]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	639a      	str	r2, [r3, #56]	; 0x38
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	f883 2020 	strb.w	r2, [r3, #32]
 8007074:	2300      	movs	r3, #0
 8007076:	4618      	mov	r0, r3
 8007078:	3714      	adds	r7, #20
 800707a:	46bd      	mov	sp, r7
 800707c:	bc80      	pop	{r7}
 800707e:	4770      	bx	lr
 8007080:	bffdfff8 	.word	0xbffdfff8
 8007084:	cccccccd 	.word	0xcccccccd
 8007088:	40020000 	.word	0x40020000

0800708c <HAL_DMA_DeInit>:
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d101      	bne.n	800709e <HAL_DMA_DeInit+0x12>
 800709a:	2301      	movs	r3, #1
 800709c:	e046      	b.n	800712c <HAL_DMA_DeInit+0xa0>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f022 0201 	bic.w	r2, r2, #1
 80070ac:	601a      	str	r2, [r3, #0]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	2200      	movs	r2, #0
 80070b4:	601a      	str	r2, [r3, #0]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	2200      	movs	r2, #0
 80070bc:	605a      	str	r2, [r3, #4]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2200      	movs	r2, #0
 80070c4:	609a      	str	r2, [r3, #8]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	2200      	movs	r2, #0
 80070cc:	60da      	str	r2, [r3, #12]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	461a      	mov	r2, r3
 80070d4:	4b18      	ldr	r3, [pc, #96]	; (8007138 <HAL_DMA_DeInit+0xac>)
 80070d6:	4413      	add	r3, r2
 80070d8:	4a18      	ldr	r2, [pc, #96]	; (800713c <HAL_DMA_DeInit+0xb0>)
 80070da:	fba2 2303 	umull	r2, r3, r2, r3
 80070de:	091b      	lsrs	r3, r3, #4
 80070e0:	009a      	lsls	r2, r3, #2
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	641a      	str	r2, [r3, #64]	; 0x40
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4a15      	ldr	r2, [pc, #84]	; (8007140 <HAL_DMA_DeInit+0xb4>)
 80070ea:	63da      	str	r2, [r3, #60]	; 0x3c
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070f4:	2101      	movs	r1, #1
 80070f6:	fa01 f202 	lsl.w	r2, r1, r2
 80070fa:	605a      	str	r2, [r3, #4]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	629a      	str	r2, [r3, #40]	; 0x28
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	62da      	str	r2, [r3, #44]	; 0x2c
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	631a      	str	r2, [r3, #48]	; 0x30
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	635a      	str	r2, [r3, #52]	; 0x34
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	639a      	str	r2, [r3, #56]	; 0x38
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	f883 2020 	strb.w	r2, [r3, #32]
 800712a:	2300      	movs	r3, #0
 800712c:	4618      	mov	r0, r3
 800712e:	370c      	adds	r7, #12
 8007130:	46bd      	mov	sp, r7
 8007132:	bc80      	pop	{r7}
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop
 8007138:	bffdfff8 	.word	0xbffdfff8
 800713c:	cccccccd 	.word	0xcccccccd
 8007140:	40020000 	.word	0x40020000

08007144 <HAL_DMA_Start_IT>:
 8007144:	b580      	push	{r7, lr}
 8007146:	b086      	sub	sp, #24
 8007148:	af00      	add	r7, sp, #0
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	60b9      	str	r1, [r7, #8]
 800714e:	607a      	str	r2, [r7, #4]
 8007150:	603b      	str	r3, [r7, #0]
 8007152:	2300      	movs	r3, #0
 8007154:	75fb      	strb	r3, [r7, #23]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f893 3020 	ldrb.w	r3, [r3, #32]
 800715c:	2b01      	cmp	r3, #1
 800715e:	d101      	bne.n	8007164 <HAL_DMA_Start_IT+0x20>
 8007160:	2302      	movs	r3, #2
 8007162:	e04a      	b.n	80071fa <HAL_DMA_Start_IT+0xb6>
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2201      	movs	r2, #1
 8007168:	f883 2020 	strb.w	r2, [r3, #32]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007172:	2b01      	cmp	r3, #1
 8007174:	d13a      	bne.n	80071ec <HAL_DMA_Start_IT+0xa8>
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2202      	movs	r2, #2
 800717a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2200      	movs	r2, #0
 8007182:	639a      	str	r2, [r3, #56]	; 0x38
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f022 0201 	bic.w	r2, r2, #1
 8007192:	601a      	str	r2, [r3, #0]
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	687a      	ldr	r2, [r7, #4]
 8007198:	68b9      	ldr	r1, [r7, #8]
 800719a:	68f8      	ldr	r0, [r7, #12]
 800719c:	f000 f938 	bl	8007410 <DMA_SetConfig>
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d008      	beq.n	80071ba <HAL_DMA_Start_IT+0x76>
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f042 020e 	orr.w	r2, r2, #14
 80071b6:	601a      	str	r2, [r3, #0]
 80071b8:	e00f      	b.n	80071da <HAL_DMA_Start_IT+0x96>
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f022 0204 	bic.w	r2, r2, #4
 80071c8:	601a      	str	r2, [r3, #0]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f042 020a 	orr.w	r2, r2, #10
 80071d8:	601a      	str	r2, [r3, #0]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f042 0201 	orr.w	r2, r2, #1
 80071e8:	601a      	str	r2, [r3, #0]
 80071ea:	e005      	b.n	80071f8 <HAL_DMA_Start_IT+0xb4>
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2200      	movs	r2, #0
 80071f0:	f883 2020 	strb.w	r2, [r3, #32]
 80071f4:	2302      	movs	r3, #2
 80071f6:	75fb      	strb	r3, [r7, #23]
 80071f8:	7dfb      	ldrb	r3, [r7, #23]
 80071fa:	4618      	mov	r0, r3
 80071fc:	3718      	adds	r7, #24
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
	...

08007204 <HAL_DMA_IRQHandler>:
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	60fb      	str	r3, [r7, #12]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	60bb      	str	r3, [r7, #8]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007220:	2204      	movs	r2, #4
 8007222:	409a      	lsls	r2, r3
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	4013      	ands	r3, r2
 8007228:	2b00      	cmp	r3, #0
 800722a:	d04f      	beq.n	80072cc <HAL_DMA_IRQHandler+0xc8>
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	f003 0304 	and.w	r3, r3, #4
 8007232:	2b00      	cmp	r3, #0
 8007234:	d04a      	beq.n	80072cc <HAL_DMA_IRQHandler+0xc8>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f003 0320 	and.w	r3, r3, #32
 8007240:	2b00      	cmp	r3, #0
 8007242:	d107      	bne.n	8007254 <HAL_DMA_IRQHandler+0x50>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f022 0204 	bic.w	r2, r2, #4
 8007252:	601a      	str	r2, [r3, #0]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a66      	ldr	r2, [pc, #408]	; (80073f4 <HAL_DMA_IRQHandler+0x1f0>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d029      	beq.n	80072b2 <HAL_DMA_IRQHandler+0xae>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a65      	ldr	r2, [pc, #404]	; (80073f8 <HAL_DMA_IRQHandler+0x1f4>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d022      	beq.n	80072ae <HAL_DMA_IRQHandler+0xaa>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a63      	ldr	r2, [pc, #396]	; (80073fc <HAL_DMA_IRQHandler+0x1f8>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d01a      	beq.n	80072a8 <HAL_DMA_IRQHandler+0xa4>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a62      	ldr	r2, [pc, #392]	; (8007400 <HAL_DMA_IRQHandler+0x1fc>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d012      	beq.n	80072a2 <HAL_DMA_IRQHandler+0x9e>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a60      	ldr	r2, [pc, #384]	; (8007404 <HAL_DMA_IRQHandler+0x200>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d00a      	beq.n	800729c <HAL_DMA_IRQHandler+0x98>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a5f      	ldr	r2, [pc, #380]	; (8007408 <HAL_DMA_IRQHandler+0x204>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d102      	bne.n	8007296 <HAL_DMA_IRQHandler+0x92>
 8007290:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007294:	e00e      	b.n	80072b4 <HAL_DMA_IRQHandler+0xb0>
 8007296:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800729a:	e00b      	b.n	80072b4 <HAL_DMA_IRQHandler+0xb0>
 800729c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80072a0:	e008      	b.n	80072b4 <HAL_DMA_IRQHandler+0xb0>
 80072a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80072a6:	e005      	b.n	80072b4 <HAL_DMA_IRQHandler+0xb0>
 80072a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072ac:	e002      	b.n	80072b4 <HAL_DMA_IRQHandler+0xb0>
 80072ae:	2340      	movs	r3, #64	; 0x40
 80072b0:	e000      	b.n	80072b4 <HAL_DMA_IRQHandler+0xb0>
 80072b2:	2304      	movs	r3, #4
 80072b4:	4a55      	ldr	r2, [pc, #340]	; (800740c <HAL_DMA_IRQHandler+0x208>)
 80072b6:	6053      	str	r3, [r2, #4]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072bc:	2b00      	cmp	r3, #0
 80072be:	f000 8094 	beq.w	80073ea <HAL_DMA_IRQHandler+0x1e6>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	4798      	blx	r3
 80072ca:	e08e      	b.n	80073ea <HAL_DMA_IRQHandler+0x1e6>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d0:	2202      	movs	r2, #2
 80072d2:	409a      	lsls	r2, r3
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	4013      	ands	r3, r2
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d056      	beq.n	800738a <HAL_DMA_IRQHandler+0x186>
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	f003 0302 	and.w	r3, r3, #2
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d051      	beq.n	800738a <HAL_DMA_IRQHandler+0x186>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f003 0320 	and.w	r3, r3, #32
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d10b      	bne.n	800730c <HAL_DMA_IRQHandler+0x108>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f022 020a 	bic.w	r2, r2, #10
 8007302:	601a      	str	r2, [r3, #0]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2201      	movs	r2, #1
 8007308:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a38      	ldr	r2, [pc, #224]	; (80073f4 <HAL_DMA_IRQHandler+0x1f0>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d029      	beq.n	800736a <HAL_DMA_IRQHandler+0x166>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a37      	ldr	r2, [pc, #220]	; (80073f8 <HAL_DMA_IRQHandler+0x1f4>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d022      	beq.n	8007366 <HAL_DMA_IRQHandler+0x162>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a35      	ldr	r2, [pc, #212]	; (80073fc <HAL_DMA_IRQHandler+0x1f8>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d01a      	beq.n	8007360 <HAL_DMA_IRQHandler+0x15c>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a34      	ldr	r2, [pc, #208]	; (8007400 <HAL_DMA_IRQHandler+0x1fc>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d012      	beq.n	800735a <HAL_DMA_IRQHandler+0x156>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a32      	ldr	r2, [pc, #200]	; (8007404 <HAL_DMA_IRQHandler+0x200>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d00a      	beq.n	8007354 <HAL_DMA_IRQHandler+0x150>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a31      	ldr	r2, [pc, #196]	; (8007408 <HAL_DMA_IRQHandler+0x204>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d102      	bne.n	800734e <HAL_DMA_IRQHandler+0x14a>
 8007348:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800734c:	e00e      	b.n	800736c <HAL_DMA_IRQHandler+0x168>
 800734e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007352:	e00b      	b.n	800736c <HAL_DMA_IRQHandler+0x168>
 8007354:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007358:	e008      	b.n	800736c <HAL_DMA_IRQHandler+0x168>
 800735a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800735e:	e005      	b.n	800736c <HAL_DMA_IRQHandler+0x168>
 8007360:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007364:	e002      	b.n	800736c <HAL_DMA_IRQHandler+0x168>
 8007366:	2320      	movs	r3, #32
 8007368:	e000      	b.n	800736c <HAL_DMA_IRQHandler+0x168>
 800736a:	2302      	movs	r3, #2
 800736c:	4a27      	ldr	r2, [pc, #156]	; (800740c <HAL_DMA_IRQHandler+0x208>)
 800736e:	6053      	str	r3, [r2, #4]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	f883 2020 	strb.w	r2, [r3, #32]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800737c:	2b00      	cmp	r3, #0
 800737e:	d034      	beq.n	80073ea <HAL_DMA_IRQHandler+0x1e6>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	4798      	blx	r3
 8007388:	e02f      	b.n	80073ea <HAL_DMA_IRQHandler+0x1e6>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800738e:	2208      	movs	r2, #8
 8007390:	409a      	lsls	r2, r3
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	4013      	ands	r3, r2
 8007396:	2b00      	cmp	r3, #0
 8007398:	d028      	beq.n	80073ec <HAL_DMA_IRQHandler+0x1e8>
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	f003 0308 	and.w	r3, r3, #8
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d023      	beq.n	80073ec <HAL_DMA_IRQHandler+0x1e8>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f022 020e 	bic.w	r2, r2, #14
 80073b2:	601a      	str	r2, [r3, #0]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073bc:	2101      	movs	r1, #1
 80073be:	fa01 f202 	lsl.w	r2, r1, r2
 80073c2:	605a      	str	r2, [r3, #4]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2201      	movs	r2, #1
 80073c8:	639a      	str	r2, [r3, #56]	; 0x38
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2201      	movs	r2, #1
 80073ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2200      	movs	r2, #0
 80073d6:	f883 2020 	strb.w	r2, [r3, #32]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d004      	beq.n	80073ec <HAL_DMA_IRQHandler+0x1e8>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	4798      	blx	r3
 80073ea:	bf00      	nop
 80073ec:	bf00      	nop
 80073ee:	3710      	adds	r7, #16
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}
 80073f4:	40020008 	.word	0x40020008
 80073f8:	4002001c 	.word	0x4002001c
 80073fc:	40020030 	.word	0x40020030
 8007400:	40020044 	.word	0x40020044
 8007404:	40020058 	.word	0x40020058
 8007408:	4002006c 	.word	0x4002006c
 800740c:	40020000 	.word	0x40020000

08007410 <DMA_SetConfig>:
 8007410:	b480      	push	{r7}
 8007412:	b085      	sub	sp, #20
 8007414:	af00      	add	r7, sp, #0
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	60b9      	str	r1, [r7, #8]
 800741a:	607a      	str	r2, [r7, #4]
 800741c:	603b      	str	r3, [r7, #0]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007426:	2101      	movs	r1, #1
 8007428:	fa01 f202 	lsl.w	r2, r1, r2
 800742c:	605a      	str	r2, [r3, #4]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	683a      	ldr	r2, [r7, #0]
 8007434:	605a      	str	r2, [r3, #4]
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	2b10      	cmp	r3, #16
 800743c:	d108      	bne.n	8007450 <DMA_SetConfig+0x40>
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	609a      	str	r2, [r3, #8]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	68ba      	ldr	r2, [r7, #8]
 800744c:	60da      	str	r2, [r3, #12]
 800744e:	e007      	b.n	8007460 <DMA_SetConfig+0x50>
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	68ba      	ldr	r2, [r7, #8]
 8007456:	609a      	str	r2, [r3, #8]
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	60da      	str	r2, [r3, #12]
 8007460:	bf00      	nop
 8007462:	3714      	adds	r7, #20
 8007464:	46bd      	mov	sp, r7
 8007466:	bc80      	pop	{r7}
 8007468:	4770      	bx	lr
	...

0800746c <HAL_FLASH_Program>:
 800746c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800746e:	b087      	sub	sp, #28
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	e9c7 2300 	strd	r2, r3, [r7]
 800747a:	2301      	movs	r3, #1
 800747c:	75fb      	strb	r3, [r7, #23]
 800747e:	2300      	movs	r3, #0
 8007480:	75bb      	strb	r3, [r7, #22]
 8007482:	2300      	movs	r3, #0
 8007484:	757b      	strb	r3, [r7, #21]
 8007486:	4b2f      	ldr	r3, [pc, #188]	; (8007544 <HAL_FLASH_Program+0xd8>)
 8007488:	7e1b      	ldrb	r3, [r3, #24]
 800748a:	2b01      	cmp	r3, #1
 800748c:	d101      	bne.n	8007492 <HAL_FLASH_Program+0x26>
 800748e:	2302      	movs	r3, #2
 8007490:	e054      	b.n	800753c <HAL_FLASH_Program+0xd0>
 8007492:	4b2c      	ldr	r3, [pc, #176]	; (8007544 <HAL_FLASH_Program+0xd8>)
 8007494:	2201      	movs	r2, #1
 8007496:	761a      	strb	r2, [r3, #24]
 8007498:	f24c 3050 	movw	r0, #50000	; 0xc350
 800749c:	f000 f99e 	bl	80077dc <FLASH_WaitForLastOperation>
 80074a0:	4603      	mov	r3, r0
 80074a2:	75fb      	strb	r3, [r7, #23]
 80074a4:	7dfb      	ldrb	r3, [r7, #23]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d144      	bne.n	8007534 <HAL_FLASH_Program+0xc8>
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d102      	bne.n	80074b6 <HAL_FLASH_Program+0x4a>
 80074b0:	2301      	movs	r3, #1
 80074b2:	757b      	strb	r3, [r7, #21]
 80074b4:	e007      	b.n	80074c6 <HAL_FLASH_Program+0x5a>
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2b02      	cmp	r3, #2
 80074ba:	d102      	bne.n	80074c2 <HAL_FLASH_Program+0x56>
 80074bc:	2302      	movs	r3, #2
 80074be:	757b      	strb	r3, [r7, #21]
 80074c0:	e001      	b.n	80074c6 <HAL_FLASH_Program+0x5a>
 80074c2:	2304      	movs	r3, #4
 80074c4:	757b      	strb	r3, [r7, #21]
 80074c6:	2300      	movs	r3, #0
 80074c8:	75bb      	strb	r3, [r7, #22]
 80074ca:	e02d      	b.n	8007528 <HAL_FLASH_Program+0xbc>
 80074cc:	7dbb      	ldrb	r3, [r7, #22]
 80074ce:	005a      	lsls	r2, r3, #1
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	eb02 0c03 	add.w	ip, r2, r3
 80074d6:	7dbb      	ldrb	r3, [r7, #22]
 80074d8:	0119      	lsls	r1, r3, #4
 80074da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074de:	f1c1 0620 	rsb	r6, r1, #32
 80074e2:	f1a1 0020 	sub.w	r0, r1, #32
 80074e6:	fa22 f401 	lsr.w	r4, r2, r1
 80074ea:	fa03 f606 	lsl.w	r6, r3, r6
 80074ee:	4334      	orrs	r4, r6
 80074f0:	fa23 f000 	lsr.w	r0, r3, r0
 80074f4:	4304      	orrs	r4, r0
 80074f6:	fa23 f501 	lsr.w	r5, r3, r1
 80074fa:	b2a3      	uxth	r3, r4
 80074fc:	4619      	mov	r1, r3
 80074fe:	4660      	mov	r0, ip
 8007500:	f000 f950 	bl	80077a4 <FLASH_Program_HalfWord>
 8007504:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007508:	f000 f968 	bl	80077dc <FLASH_WaitForLastOperation>
 800750c:	4603      	mov	r3, r0
 800750e:	75fb      	strb	r3, [r7, #23]
 8007510:	4b0d      	ldr	r3, [pc, #52]	; (8007548 <HAL_FLASH_Program+0xdc>)
 8007512:	691b      	ldr	r3, [r3, #16]
 8007514:	4a0c      	ldr	r2, [pc, #48]	; (8007548 <HAL_FLASH_Program+0xdc>)
 8007516:	f023 0301 	bic.w	r3, r3, #1
 800751a:	6113      	str	r3, [r2, #16]
 800751c:	7dfb      	ldrb	r3, [r7, #23]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d107      	bne.n	8007532 <HAL_FLASH_Program+0xc6>
 8007522:	7dbb      	ldrb	r3, [r7, #22]
 8007524:	3301      	adds	r3, #1
 8007526:	75bb      	strb	r3, [r7, #22]
 8007528:	7dba      	ldrb	r2, [r7, #22]
 800752a:	7d7b      	ldrb	r3, [r7, #21]
 800752c:	429a      	cmp	r2, r3
 800752e:	d3cd      	bcc.n	80074cc <HAL_FLASH_Program+0x60>
 8007530:	e000      	b.n	8007534 <HAL_FLASH_Program+0xc8>
 8007532:	bf00      	nop
 8007534:	4b03      	ldr	r3, [pc, #12]	; (8007544 <HAL_FLASH_Program+0xd8>)
 8007536:	2200      	movs	r2, #0
 8007538:	761a      	strb	r2, [r3, #24]
 800753a:	7dfb      	ldrb	r3, [r7, #23]
 800753c:	4618      	mov	r0, r3
 800753e:	371c      	adds	r7, #28
 8007540:	46bd      	mov	sp, r7
 8007542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007544:	20000760 	.word	0x20000760
 8007548:	40022000 	.word	0x40022000

0800754c <HAL_FLASH_IRQHandler>:
 800754c:	b580      	push	{r7, lr}
 800754e:	b082      	sub	sp, #8
 8007550:	af00      	add	r7, sp, #0
 8007552:	2300      	movs	r3, #0
 8007554:	607b      	str	r3, [r7, #4]
 8007556:	4b6d      	ldr	r3, [pc, #436]	; (800770c <HAL_FLASH_IRQHandler+0x1c0>)
 8007558:	68db      	ldr	r3, [r3, #12]
 800755a:	f003 0310 	and.w	r3, r3, #16
 800755e:	2b00      	cmp	r3, #0
 8007560:	d105      	bne.n	800756e <HAL_FLASH_IRQHandler+0x22>
 8007562:	4b6a      	ldr	r3, [pc, #424]	; (800770c <HAL_FLASH_IRQHandler+0x1c0>)
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	f003 0304 	and.w	r3, r3, #4
 800756a:	2b00      	cmp	r3, #0
 800756c:	d00e      	beq.n	800758c <HAL_FLASH_IRQHandler+0x40>
 800756e:	4b68      	ldr	r3, [pc, #416]	; (8007710 <HAL_FLASH_IRQHandler+0x1c4>)
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	607b      	str	r3, [r7, #4]
 8007574:	4b66      	ldr	r3, [pc, #408]	; (8007710 <HAL_FLASH_IRQHandler+0x1c4>)
 8007576:	f04f 32ff 	mov.w	r2, #4294967295
 800757a:	609a      	str	r2, [r3, #8]
 800757c:	f000 f974 	bl	8007868 <FLASH_SetErrorCode>
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 f8d0 	bl	8007726 <HAL_FLASH_OperationErrorCallback>
 8007586:	4b62      	ldr	r3, [pc, #392]	; (8007710 <HAL_FLASH_IRQHandler+0x1c4>)
 8007588:	2200      	movs	r2, #0
 800758a:	701a      	strb	r2, [r3, #0]
 800758c:	4b5f      	ldr	r3, [pc, #380]	; (800770c <HAL_FLASH_IRQHandler+0x1c0>)
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	f003 0320 	and.w	r3, r3, #32
 8007594:	2b00      	cmp	r3, #0
 8007596:	f000 80a0 	beq.w	80076da <HAL_FLASH_IRQHandler+0x18e>
 800759a:	4b5c      	ldr	r3, [pc, #368]	; (800770c <HAL_FLASH_IRQHandler+0x1c0>)
 800759c:	2220      	movs	r2, #32
 800759e:	60da      	str	r2, [r3, #12]
 80075a0:	4b5b      	ldr	r3, [pc, #364]	; (8007710 <HAL_FLASH_IRQHandler+0x1c4>)
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	f000 8097 	beq.w	80076da <HAL_FLASH_IRQHandler+0x18e>
 80075ac:	4b58      	ldr	r3, [pc, #352]	; (8007710 <HAL_FLASH_IRQHandler+0x1c4>)
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d12d      	bne.n	8007612 <HAL_FLASH_IRQHandler+0xc6>
 80075b6:	4b56      	ldr	r3, [pc, #344]	; (8007710 <HAL_FLASH_IRQHandler+0x1c4>)
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	3b01      	subs	r3, #1
 80075bc:	4a54      	ldr	r2, [pc, #336]	; (8007710 <HAL_FLASH_IRQHandler+0x1c4>)
 80075be:	6053      	str	r3, [r2, #4]
 80075c0:	4b53      	ldr	r3, [pc, #332]	; (8007710 <HAL_FLASH_IRQHandler+0x1c4>)
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d017      	beq.n	80075f8 <HAL_FLASH_IRQHandler+0xac>
 80075c8:	4b51      	ldr	r3, [pc, #324]	; (8007710 <HAL_FLASH_IRQHandler+0x1c4>)
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	607b      	str	r3, [r7, #4]
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 f8a0 	bl	8007714 <HAL_FLASH_EndOfOperationCallback>
 80075d4:	4b4e      	ldr	r3, [pc, #312]	; (8007710 <HAL_FLASH_IRQHandler+0x1c4>)
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075dc:	607b      	str	r3, [r7, #4]
 80075de:	4a4c      	ldr	r2, [pc, #304]	; (8007710 <HAL_FLASH_IRQHandler+0x1c4>)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6093      	str	r3, [r2, #8]
 80075e4:	4b49      	ldr	r3, [pc, #292]	; (800770c <HAL_FLASH_IRQHandler+0x1c0>)
 80075e6:	691b      	ldr	r3, [r3, #16]
 80075e8:	4a48      	ldr	r2, [pc, #288]	; (800770c <HAL_FLASH_IRQHandler+0x1c0>)
 80075ea:	f023 0302 	bic.w	r3, r3, #2
 80075ee:	6113      	str	r3, [r2, #16]
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 fa11 	bl	8007a18 <FLASH_PageErase>
 80075f6:	e070      	b.n	80076da <HAL_FLASH_IRQHandler+0x18e>
 80075f8:	f04f 33ff 	mov.w	r3, #4294967295
 80075fc:	607b      	str	r3, [r7, #4]
 80075fe:	4a44      	ldr	r2, [pc, #272]	; (8007710 <HAL_FLASH_IRQHandler+0x1c4>)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6093      	str	r3, [r2, #8]
 8007604:	4b42      	ldr	r3, [pc, #264]	; (8007710 <HAL_FLASH_IRQHandler+0x1c4>)
 8007606:	2200      	movs	r2, #0
 8007608:	701a      	strb	r2, [r3, #0]
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 f882 	bl	8007714 <HAL_FLASH_EndOfOperationCallback>
 8007610:	e063      	b.n	80076da <HAL_FLASH_IRQHandler+0x18e>
 8007612:	4b3f      	ldr	r3, [pc, #252]	; (8007710 <HAL_FLASH_IRQHandler+0x1c4>)
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	b2db      	uxtb	r3, r3
 8007618:	2b02      	cmp	r3, #2
 800761a:	d10c      	bne.n	8007636 <HAL_FLASH_IRQHandler+0xea>
 800761c:	4b3b      	ldr	r3, [pc, #236]	; (800770c <HAL_FLASH_IRQHandler+0x1c0>)
 800761e:	691b      	ldr	r3, [r3, #16]
 8007620:	4a3a      	ldr	r2, [pc, #232]	; (800770c <HAL_FLASH_IRQHandler+0x1c0>)
 8007622:	f023 0304 	bic.w	r3, r3, #4
 8007626:	6113      	str	r3, [r2, #16]
 8007628:	2000      	movs	r0, #0
 800762a:	f000 f873 	bl	8007714 <HAL_FLASH_EndOfOperationCallback>
 800762e:	4b38      	ldr	r3, [pc, #224]	; (8007710 <HAL_FLASH_IRQHandler+0x1c4>)
 8007630:	2200      	movs	r2, #0
 8007632:	701a      	strb	r2, [r3, #0]
 8007634:	e051      	b.n	80076da <HAL_FLASH_IRQHandler+0x18e>
 8007636:	4b36      	ldr	r3, [pc, #216]	; (8007710 <HAL_FLASH_IRQHandler+0x1c4>)
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	3b01      	subs	r3, #1
 800763c:	4a34      	ldr	r2, [pc, #208]	; (8007710 <HAL_FLASH_IRQHandler+0x1c4>)
 800763e:	6053      	str	r3, [r2, #4]
 8007640:	4b33      	ldr	r3, [pc, #204]	; (8007710 <HAL_FLASH_IRQHandler+0x1c4>)
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d024      	beq.n	8007692 <HAL_FLASH_IRQHandler+0x146>
 8007648:	4b31      	ldr	r3, [pc, #196]	; (8007710 <HAL_FLASH_IRQHandler+0x1c4>)
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	3302      	adds	r3, #2
 800764e:	4a30      	ldr	r2, [pc, #192]	; (8007710 <HAL_FLASH_IRQHandler+0x1c4>)
 8007650:	6093      	str	r3, [r2, #8]
 8007652:	4b2f      	ldr	r3, [pc, #188]	; (8007710 <HAL_FLASH_IRQHandler+0x1c4>)
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	607b      	str	r3, [r7, #4]
 8007658:	4b2d      	ldr	r3, [pc, #180]	; (8007710 <HAL_FLASH_IRQHandler+0x1c4>)
 800765a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800765e:	f04f 0200 	mov.w	r2, #0
 8007662:	f04f 0300 	mov.w	r3, #0
 8007666:	0c02      	lsrs	r2, r0, #16
 8007668:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800766c:	0c0b      	lsrs	r3, r1, #16
 800766e:	4928      	ldr	r1, [pc, #160]	; (8007710 <HAL_FLASH_IRQHandler+0x1c4>)
 8007670:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8007674:	4b25      	ldr	r3, [pc, #148]	; (800770c <HAL_FLASH_IRQHandler+0x1c0>)
 8007676:	691b      	ldr	r3, [r3, #16]
 8007678:	4a24      	ldr	r2, [pc, #144]	; (800770c <HAL_FLASH_IRQHandler+0x1c0>)
 800767a:	f023 0301 	bic.w	r3, r3, #1
 800767e:	6113      	str	r3, [r2, #16]
 8007680:	4b23      	ldr	r3, [pc, #140]	; (8007710 <HAL_FLASH_IRQHandler+0x1c4>)
 8007682:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007686:	b293      	uxth	r3, r2
 8007688:	4619      	mov	r1, r3
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 f88a 	bl	80077a4 <FLASH_Program_HalfWord>
 8007690:	e023      	b.n	80076da <HAL_FLASH_IRQHandler+0x18e>
 8007692:	4b1f      	ldr	r3, [pc, #124]	; (8007710 <HAL_FLASH_IRQHandler+0x1c4>)
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	b2db      	uxtb	r3, r3
 8007698:	2b03      	cmp	r3, #3
 800769a:	d105      	bne.n	80076a8 <HAL_FLASH_IRQHandler+0x15c>
 800769c:	4b1c      	ldr	r3, [pc, #112]	; (8007710 <HAL_FLASH_IRQHandler+0x1c4>)
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	4618      	mov	r0, r3
 80076a2:	f000 f837 	bl	8007714 <HAL_FLASH_EndOfOperationCallback>
 80076a6:	e011      	b.n	80076cc <HAL_FLASH_IRQHandler+0x180>
 80076a8:	4b19      	ldr	r3, [pc, #100]	; (8007710 <HAL_FLASH_IRQHandler+0x1c4>)
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	b2db      	uxtb	r3, r3
 80076ae:	2b04      	cmp	r3, #4
 80076b0:	d106      	bne.n	80076c0 <HAL_FLASH_IRQHandler+0x174>
 80076b2:	4b17      	ldr	r3, [pc, #92]	; (8007710 <HAL_FLASH_IRQHandler+0x1c4>)
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	3b02      	subs	r3, #2
 80076b8:	4618      	mov	r0, r3
 80076ba:	f000 f82b 	bl	8007714 <HAL_FLASH_EndOfOperationCallback>
 80076be:	e005      	b.n	80076cc <HAL_FLASH_IRQHandler+0x180>
 80076c0:	4b13      	ldr	r3, [pc, #76]	; (8007710 <HAL_FLASH_IRQHandler+0x1c4>)
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	3b06      	subs	r3, #6
 80076c6:	4618      	mov	r0, r3
 80076c8:	f000 f824 	bl	8007714 <HAL_FLASH_EndOfOperationCallback>
 80076cc:	4b10      	ldr	r3, [pc, #64]	; (8007710 <HAL_FLASH_IRQHandler+0x1c4>)
 80076ce:	f04f 32ff 	mov.w	r2, #4294967295
 80076d2:	609a      	str	r2, [r3, #8]
 80076d4:	4b0e      	ldr	r3, [pc, #56]	; (8007710 <HAL_FLASH_IRQHandler+0x1c4>)
 80076d6:	2200      	movs	r2, #0
 80076d8:	701a      	strb	r2, [r3, #0]
 80076da:	4b0d      	ldr	r3, [pc, #52]	; (8007710 <HAL_FLASH_IRQHandler+0x1c4>)
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d10e      	bne.n	8007702 <HAL_FLASH_IRQHandler+0x1b6>
 80076e4:	4b09      	ldr	r3, [pc, #36]	; (800770c <HAL_FLASH_IRQHandler+0x1c0>)
 80076e6:	691b      	ldr	r3, [r3, #16]
 80076e8:	4a08      	ldr	r2, [pc, #32]	; (800770c <HAL_FLASH_IRQHandler+0x1c0>)
 80076ea:	f023 0307 	bic.w	r3, r3, #7
 80076ee:	6113      	str	r3, [r2, #16]
 80076f0:	4b06      	ldr	r3, [pc, #24]	; (800770c <HAL_FLASH_IRQHandler+0x1c0>)
 80076f2:	691b      	ldr	r3, [r3, #16]
 80076f4:	4a05      	ldr	r2, [pc, #20]	; (800770c <HAL_FLASH_IRQHandler+0x1c0>)
 80076f6:	f423 53a0 	bic.w	r3, r3, #5120	; 0x1400
 80076fa:	6113      	str	r3, [r2, #16]
 80076fc:	4b04      	ldr	r3, [pc, #16]	; (8007710 <HAL_FLASH_IRQHandler+0x1c4>)
 80076fe:	2200      	movs	r2, #0
 8007700:	761a      	strb	r2, [r3, #24]
 8007702:	bf00      	nop
 8007704:	3708      	adds	r7, #8
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
 800770a:	bf00      	nop
 800770c:	40022000 	.word	0x40022000
 8007710:	20000760 	.word	0x20000760

08007714 <HAL_FLASH_EndOfOperationCallback>:
 8007714:	b480      	push	{r7}
 8007716:	b083      	sub	sp, #12
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	bf00      	nop
 800771e:	370c      	adds	r7, #12
 8007720:	46bd      	mov	sp, r7
 8007722:	bc80      	pop	{r7}
 8007724:	4770      	bx	lr

08007726 <HAL_FLASH_OperationErrorCallback>:
 8007726:	b480      	push	{r7}
 8007728:	b083      	sub	sp, #12
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
 800772e:	bf00      	nop
 8007730:	370c      	adds	r7, #12
 8007732:	46bd      	mov	sp, r7
 8007734:	bc80      	pop	{r7}
 8007736:	4770      	bx	lr

08007738 <HAL_FLASH_Unlock>:
 8007738:	b480      	push	{r7}
 800773a:	b083      	sub	sp, #12
 800773c:	af00      	add	r7, sp, #0
 800773e:	2300      	movs	r3, #0
 8007740:	71fb      	strb	r3, [r7, #7]
 8007742:	4b0d      	ldr	r3, [pc, #52]	; (8007778 <HAL_FLASH_Unlock+0x40>)
 8007744:	691b      	ldr	r3, [r3, #16]
 8007746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00d      	beq.n	800776a <HAL_FLASH_Unlock+0x32>
 800774e:	4b0a      	ldr	r3, [pc, #40]	; (8007778 <HAL_FLASH_Unlock+0x40>)
 8007750:	4a0a      	ldr	r2, [pc, #40]	; (800777c <HAL_FLASH_Unlock+0x44>)
 8007752:	605a      	str	r2, [r3, #4]
 8007754:	4b08      	ldr	r3, [pc, #32]	; (8007778 <HAL_FLASH_Unlock+0x40>)
 8007756:	4a0a      	ldr	r2, [pc, #40]	; (8007780 <HAL_FLASH_Unlock+0x48>)
 8007758:	605a      	str	r2, [r3, #4]
 800775a:	4b07      	ldr	r3, [pc, #28]	; (8007778 <HAL_FLASH_Unlock+0x40>)
 800775c:	691b      	ldr	r3, [r3, #16]
 800775e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007762:	2b00      	cmp	r3, #0
 8007764:	d001      	beq.n	800776a <HAL_FLASH_Unlock+0x32>
 8007766:	2301      	movs	r3, #1
 8007768:	71fb      	strb	r3, [r7, #7]
 800776a:	79fb      	ldrb	r3, [r7, #7]
 800776c:	4618      	mov	r0, r3
 800776e:	370c      	adds	r7, #12
 8007770:	46bd      	mov	sp, r7
 8007772:	bc80      	pop	{r7}
 8007774:	4770      	bx	lr
 8007776:	bf00      	nop
 8007778:	40022000 	.word	0x40022000
 800777c:	45670123 	.word	0x45670123
 8007780:	cdef89ab 	.word	0xcdef89ab

08007784 <HAL_FLASH_Lock>:
 8007784:	b480      	push	{r7}
 8007786:	af00      	add	r7, sp, #0
 8007788:	4b05      	ldr	r3, [pc, #20]	; (80077a0 <HAL_FLASH_Lock+0x1c>)
 800778a:	691b      	ldr	r3, [r3, #16]
 800778c:	4a04      	ldr	r2, [pc, #16]	; (80077a0 <HAL_FLASH_Lock+0x1c>)
 800778e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007792:	6113      	str	r3, [r2, #16]
 8007794:	2300      	movs	r3, #0
 8007796:	4618      	mov	r0, r3
 8007798:	46bd      	mov	sp, r7
 800779a:	bc80      	pop	{r7}
 800779c:	4770      	bx	lr
 800779e:	bf00      	nop
 80077a0:	40022000 	.word	0x40022000

080077a4 <FLASH_Program_HalfWord>:
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	460b      	mov	r3, r1
 80077ae:	807b      	strh	r3, [r7, #2]
 80077b0:	4b08      	ldr	r3, [pc, #32]	; (80077d4 <FLASH_Program_HalfWord+0x30>)
 80077b2:	2200      	movs	r2, #0
 80077b4:	61da      	str	r2, [r3, #28]
 80077b6:	4b08      	ldr	r3, [pc, #32]	; (80077d8 <FLASH_Program_HalfWord+0x34>)
 80077b8:	691b      	ldr	r3, [r3, #16]
 80077ba:	4a07      	ldr	r2, [pc, #28]	; (80077d8 <FLASH_Program_HalfWord+0x34>)
 80077bc:	f043 0301 	orr.w	r3, r3, #1
 80077c0:	6113      	str	r3, [r2, #16]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	887a      	ldrh	r2, [r7, #2]
 80077c6:	801a      	strh	r2, [r3, #0]
 80077c8:	bf00      	nop
 80077ca:	370c      	adds	r7, #12
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bc80      	pop	{r7}
 80077d0:	4770      	bx	lr
 80077d2:	bf00      	nop
 80077d4:	20000760 	.word	0x20000760
 80077d8:	40022000 	.word	0x40022000

080077dc <FLASH_WaitForLastOperation>:
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	f7fe fe18 	bl	8006418 <HAL_GetTick>
 80077e8:	60f8      	str	r0, [r7, #12]
 80077ea:	e010      	b.n	800780e <FLASH_WaitForLastOperation+0x32>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077f2:	d00c      	beq.n	800780e <FLASH_WaitForLastOperation+0x32>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d007      	beq.n	800780a <FLASH_WaitForLastOperation+0x2e>
 80077fa:	f7fe fe0d 	bl	8006418 <HAL_GetTick>
 80077fe:	4602      	mov	r2, r0
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	1ad3      	subs	r3, r2, r3
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	429a      	cmp	r2, r3
 8007808:	d201      	bcs.n	800780e <FLASH_WaitForLastOperation+0x32>
 800780a:	2303      	movs	r3, #3
 800780c:	e025      	b.n	800785a <FLASH_WaitForLastOperation+0x7e>
 800780e:	4b15      	ldr	r3, [pc, #84]	; (8007864 <FLASH_WaitForLastOperation+0x88>)
 8007810:	68db      	ldr	r3, [r3, #12]
 8007812:	f003 0301 	and.w	r3, r3, #1
 8007816:	2b00      	cmp	r3, #0
 8007818:	d1e8      	bne.n	80077ec <FLASH_WaitForLastOperation+0x10>
 800781a:	4b12      	ldr	r3, [pc, #72]	; (8007864 <FLASH_WaitForLastOperation+0x88>)
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	f003 0320 	and.w	r3, r3, #32
 8007822:	2b00      	cmp	r3, #0
 8007824:	d002      	beq.n	800782c <FLASH_WaitForLastOperation+0x50>
 8007826:	4b0f      	ldr	r3, [pc, #60]	; (8007864 <FLASH_WaitForLastOperation+0x88>)
 8007828:	2220      	movs	r2, #32
 800782a:	60da      	str	r2, [r3, #12]
 800782c:	4b0d      	ldr	r3, [pc, #52]	; (8007864 <FLASH_WaitForLastOperation+0x88>)
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	f003 0310 	and.w	r3, r3, #16
 8007834:	2b00      	cmp	r3, #0
 8007836:	d10b      	bne.n	8007850 <FLASH_WaitForLastOperation+0x74>
 8007838:	4b0a      	ldr	r3, [pc, #40]	; (8007864 <FLASH_WaitForLastOperation+0x88>)
 800783a:	69db      	ldr	r3, [r3, #28]
 800783c:	f003 0301 	and.w	r3, r3, #1
 8007840:	2b00      	cmp	r3, #0
 8007842:	d105      	bne.n	8007850 <FLASH_WaitForLastOperation+0x74>
 8007844:	4b07      	ldr	r3, [pc, #28]	; (8007864 <FLASH_WaitForLastOperation+0x88>)
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	f003 0304 	and.w	r3, r3, #4
 800784c:	2b00      	cmp	r3, #0
 800784e:	d003      	beq.n	8007858 <FLASH_WaitForLastOperation+0x7c>
 8007850:	f000 f80a 	bl	8007868 <FLASH_SetErrorCode>
 8007854:	2301      	movs	r3, #1
 8007856:	e000      	b.n	800785a <FLASH_WaitForLastOperation+0x7e>
 8007858:	2300      	movs	r3, #0
 800785a:	4618      	mov	r0, r3
 800785c:	3710      	adds	r7, #16
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop
 8007864:	40022000 	.word	0x40022000

08007868 <FLASH_SetErrorCode>:
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	2300      	movs	r3, #0
 8007870:	607b      	str	r3, [r7, #4]
 8007872:	4b23      	ldr	r3, [pc, #140]	; (8007900 <FLASH_SetErrorCode+0x98>)
 8007874:	68db      	ldr	r3, [r3, #12]
 8007876:	f003 0310 	and.w	r3, r3, #16
 800787a:	2b00      	cmp	r3, #0
 800787c:	d009      	beq.n	8007892 <FLASH_SetErrorCode+0x2a>
 800787e:	4b21      	ldr	r3, [pc, #132]	; (8007904 <FLASH_SetErrorCode+0x9c>)
 8007880:	69db      	ldr	r3, [r3, #28]
 8007882:	f043 0302 	orr.w	r3, r3, #2
 8007886:	4a1f      	ldr	r2, [pc, #124]	; (8007904 <FLASH_SetErrorCode+0x9c>)
 8007888:	61d3      	str	r3, [r2, #28]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f043 0310 	orr.w	r3, r3, #16
 8007890:	607b      	str	r3, [r7, #4]
 8007892:	4b1b      	ldr	r3, [pc, #108]	; (8007900 <FLASH_SetErrorCode+0x98>)
 8007894:	68db      	ldr	r3, [r3, #12]
 8007896:	f003 0304 	and.w	r3, r3, #4
 800789a:	2b00      	cmp	r3, #0
 800789c:	d009      	beq.n	80078b2 <FLASH_SetErrorCode+0x4a>
 800789e:	4b19      	ldr	r3, [pc, #100]	; (8007904 <FLASH_SetErrorCode+0x9c>)
 80078a0:	69db      	ldr	r3, [r3, #28]
 80078a2:	f043 0301 	orr.w	r3, r3, #1
 80078a6:	4a17      	ldr	r2, [pc, #92]	; (8007904 <FLASH_SetErrorCode+0x9c>)
 80078a8:	61d3      	str	r3, [r2, #28]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f043 0304 	orr.w	r3, r3, #4
 80078b0:	607b      	str	r3, [r7, #4]
 80078b2:	4b13      	ldr	r3, [pc, #76]	; (8007900 <FLASH_SetErrorCode+0x98>)
 80078b4:	69db      	ldr	r3, [r3, #28]
 80078b6:	f003 0301 	and.w	r3, r3, #1
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d00b      	beq.n	80078d6 <FLASH_SetErrorCode+0x6e>
 80078be:	4b11      	ldr	r3, [pc, #68]	; (8007904 <FLASH_SetErrorCode+0x9c>)
 80078c0:	69db      	ldr	r3, [r3, #28]
 80078c2:	f043 0304 	orr.w	r3, r3, #4
 80078c6:	4a0f      	ldr	r2, [pc, #60]	; (8007904 <FLASH_SetErrorCode+0x9c>)
 80078c8:	61d3      	str	r3, [r2, #28]
 80078ca:	4b0d      	ldr	r3, [pc, #52]	; (8007900 <FLASH_SetErrorCode+0x98>)
 80078cc:	69db      	ldr	r3, [r3, #28]
 80078ce:	4a0c      	ldr	r2, [pc, #48]	; (8007900 <FLASH_SetErrorCode+0x98>)
 80078d0:	f023 0301 	bic.w	r3, r3, #1
 80078d4:	61d3      	str	r3, [r2, #28]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f240 1201 	movw	r2, #257	; 0x101
 80078dc:	4293      	cmp	r3, r2
 80078de:	d106      	bne.n	80078ee <FLASH_SetErrorCode+0x86>
 80078e0:	4b07      	ldr	r3, [pc, #28]	; (8007900 <FLASH_SetErrorCode+0x98>)
 80078e2:	69db      	ldr	r3, [r3, #28]
 80078e4:	4a06      	ldr	r2, [pc, #24]	; (8007900 <FLASH_SetErrorCode+0x98>)
 80078e6:	f023 0301 	bic.w	r3, r3, #1
 80078ea:	61d3      	str	r3, [r2, #28]
 80078ec:	e002      	b.n	80078f4 <FLASH_SetErrorCode+0x8c>
 80078ee:	4a04      	ldr	r2, [pc, #16]	; (8007900 <FLASH_SetErrorCode+0x98>)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	60d3      	str	r3, [r2, #12]
 80078f4:	bf00      	nop
 80078f6:	370c      	adds	r7, #12
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bc80      	pop	{r7}
 80078fc:	4770      	bx	lr
 80078fe:	bf00      	nop
 8007900:	40022000 	.word	0x40022000
 8007904:	20000760 	.word	0x20000760

08007908 <HAL_FLASHEx_Erase>:
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
 8007912:	2301      	movs	r3, #1
 8007914:	73fb      	strb	r3, [r7, #15]
 8007916:	2300      	movs	r3, #0
 8007918:	60bb      	str	r3, [r7, #8]
 800791a:	4b2f      	ldr	r3, [pc, #188]	; (80079d8 <HAL_FLASHEx_Erase+0xd0>)
 800791c:	7e1b      	ldrb	r3, [r3, #24]
 800791e:	2b01      	cmp	r3, #1
 8007920:	d101      	bne.n	8007926 <HAL_FLASHEx_Erase+0x1e>
 8007922:	2302      	movs	r3, #2
 8007924:	e053      	b.n	80079ce <HAL_FLASHEx_Erase+0xc6>
 8007926:	4b2c      	ldr	r3, [pc, #176]	; (80079d8 <HAL_FLASHEx_Erase+0xd0>)
 8007928:	2201      	movs	r2, #1
 800792a:	761a      	strb	r2, [r3, #24]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	2b02      	cmp	r3, #2
 8007932:	d116      	bne.n	8007962 <HAL_FLASHEx_Erase+0x5a>
 8007934:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007938:	f7ff ff50 	bl	80077dc <FLASH_WaitForLastOperation>
 800793c:	4603      	mov	r3, r0
 800793e:	2b00      	cmp	r3, #0
 8007940:	d141      	bne.n	80079c6 <HAL_FLASHEx_Erase+0xbe>
 8007942:	2001      	movs	r0, #1
 8007944:	f000 f84c 	bl	80079e0 <FLASH_MassErase>
 8007948:	f24c 3050 	movw	r0, #50000	; 0xc350
 800794c:	f7ff ff46 	bl	80077dc <FLASH_WaitForLastOperation>
 8007950:	4603      	mov	r3, r0
 8007952:	73fb      	strb	r3, [r7, #15]
 8007954:	4b21      	ldr	r3, [pc, #132]	; (80079dc <HAL_FLASHEx_Erase+0xd4>)
 8007956:	691b      	ldr	r3, [r3, #16]
 8007958:	4a20      	ldr	r2, [pc, #128]	; (80079dc <HAL_FLASHEx_Erase+0xd4>)
 800795a:	f023 0304 	bic.w	r3, r3, #4
 800795e:	6113      	str	r3, [r2, #16]
 8007960:	e031      	b.n	80079c6 <HAL_FLASHEx_Erase+0xbe>
 8007962:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007966:	f7ff ff39 	bl	80077dc <FLASH_WaitForLastOperation>
 800796a:	4603      	mov	r3, r0
 800796c:	2b00      	cmp	r3, #0
 800796e:	d12a      	bne.n	80079c6 <HAL_FLASHEx_Erase+0xbe>
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	f04f 32ff 	mov.w	r2, #4294967295
 8007976:	601a      	str	r2, [r3, #0]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	60bb      	str	r3, [r7, #8]
 800797e:	e019      	b.n	80079b4 <HAL_FLASHEx_Erase+0xac>
 8007980:	68b8      	ldr	r0, [r7, #8]
 8007982:	f000 f849 	bl	8007a18 <FLASH_PageErase>
 8007986:	f24c 3050 	movw	r0, #50000	; 0xc350
 800798a:	f7ff ff27 	bl	80077dc <FLASH_WaitForLastOperation>
 800798e:	4603      	mov	r3, r0
 8007990:	73fb      	strb	r3, [r7, #15]
 8007992:	4b12      	ldr	r3, [pc, #72]	; (80079dc <HAL_FLASHEx_Erase+0xd4>)
 8007994:	691b      	ldr	r3, [r3, #16]
 8007996:	4a11      	ldr	r2, [pc, #68]	; (80079dc <HAL_FLASHEx_Erase+0xd4>)
 8007998:	f023 0302 	bic.w	r3, r3, #2
 800799c:	6113      	str	r3, [r2, #16]
 800799e:	7bfb      	ldrb	r3, [r7, #15]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d003      	beq.n	80079ac <HAL_FLASHEx_Erase+0xa4>
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	68ba      	ldr	r2, [r7, #8]
 80079a8:	601a      	str	r2, [r3, #0]
 80079aa:	e00c      	b.n	80079c6 <HAL_FLASHEx_Erase+0xbe>
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80079b2:	60bb      	str	r3, [r7, #8]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	68db      	ldr	r3, [r3, #12]
 80079b8:	029a      	lsls	r2, r3, #10
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	4413      	add	r3, r2
 80079c0:	68ba      	ldr	r2, [r7, #8]
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d3dc      	bcc.n	8007980 <HAL_FLASHEx_Erase+0x78>
 80079c6:	4b04      	ldr	r3, [pc, #16]	; (80079d8 <HAL_FLASHEx_Erase+0xd0>)
 80079c8:	2200      	movs	r2, #0
 80079ca:	761a      	strb	r2, [r3, #24]
 80079cc:	7bfb      	ldrb	r3, [r7, #15]
 80079ce:	4618      	mov	r0, r3
 80079d0:	3710      	adds	r7, #16
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
 80079d6:	bf00      	nop
 80079d8:	20000760 	.word	0x20000760
 80079dc:	40022000 	.word	0x40022000

080079e0 <FLASH_MassErase>:
 80079e0:	b480      	push	{r7}
 80079e2:	b083      	sub	sp, #12
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	4b09      	ldr	r3, [pc, #36]	; (8007a10 <FLASH_MassErase+0x30>)
 80079ea:	2200      	movs	r2, #0
 80079ec:	61da      	str	r2, [r3, #28]
 80079ee:	4b09      	ldr	r3, [pc, #36]	; (8007a14 <FLASH_MassErase+0x34>)
 80079f0:	691b      	ldr	r3, [r3, #16]
 80079f2:	4a08      	ldr	r2, [pc, #32]	; (8007a14 <FLASH_MassErase+0x34>)
 80079f4:	f043 0304 	orr.w	r3, r3, #4
 80079f8:	6113      	str	r3, [r2, #16]
 80079fa:	4b06      	ldr	r3, [pc, #24]	; (8007a14 <FLASH_MassErase+0x34>)
 80079fc:	691b      	ldr	r3, [r3, #16]
 80079fe:	4a05      	ldr	r2, [pc, #20]	; (8007a14 <FLASH_MassErase+0x34>)
 8007a00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a04:	6113      	str	r3, [r2, #16]
 8007a06:	bf00      	nop
 8007a08:	370c      	adds	r7, #12
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bc80      	pop	{r7}
 8007a0e:	4770      	bx	lr
 8007a10:	20000760 	.word	0x20000760
 8007a14:	40022000 	.word	0x40022000

08007a18 <FLASH_PageErase>:
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	4b0b      	ldr	r3, [pc, #44]	; (8007a50 <FLASH_PageErase+0x38>)
 8007a22:	2200      	movs	r2, #0
 8007a24:	61da      	str	r2, [r3, #28]
 8007a26:	4b0b      	ldr	r3, [pc, #44]	; (8007a54 <FLASH_PageErase+0x3c>)
 8007a28:	691b      	ldr	r3, [r3, #16]
 8007a2a:	4a0a      	ldr	r2, [pc, #40]	; (8007a54 <FLASH_PageErase+0x3c>)
 8007a2c:	f043 0302 	orr.w	r3, r3, #2
 8007a30:	6113      	str	r3, [r2, #16]
 8007a32:	4a08      	ldr	r2, [pc, #32]	; (8007a54 <FLASH_PageErase+0x3c>)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6153      	str	r3, [r2, #20]
 8007a38:	4b06      	ldr	r3, [pc, #24]	; (8007a54 <FLASH_PageErase+0x3c>)
 8007a3a:	691b      	ldr	r3, [r3, #16]
 8007a3c:	4a05      	ldr	r2, [pc, #20]	; (8007a54 <FLASH_PageErase+0x3c>)
 8007a3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a42:	6113      	str	r3, [r2, #16]
 8007a44:	bf00      	nop
 8007a46:	370c      	adds	r7, #12
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bc80      	pop	{r7}
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop
 8007a50:	20000760 	.word	0x20000760
 8007a54:	40022000 	.word	0x40022000

08007a58 <HAL_GPIO_Init>:
 8007a58:	b480      	push	{r7}
 8007a5a:	b08b      	sub	sp, #44	; 0x2c
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	6039      	str	r1, [r7, #0]
 8007a62:	2300      	movs	r3, #0
 8007a64:	627b      	str	r3, [r7, #36]	; 0x24
 8007a66:	2300      	movs	r3, #0
 8007a68:	623b      	str	r3, [r7, #32]
 8007a6a:	e169      	b.n	8007d40 <HAL_GPIO_Init+0x2e8>
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a70:	fa02 f303 	lsl.w	r3, r2, r3
 8007a74:	61fb      	str	r3, [r7, #28]
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	69fa      	ldr	r2, [r7, #28]
 8007a7c:	4013      	ands	r3, r2
 8007a7e:	61bb      	str	r3, [r7, #24]
 8007a80:	69ba      	ldr	r2, [r7, #24]
 8007a82:	69fb      	ldr	r3, [r7, #28]
 8007a84:	429a      	cmp	r2, r3
 8007a86:	f040 8158 	bne.w	8007d3a <HAL_GPIO_Init+0x2e2>
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	4a9a      	ldr	r2, [pc, #616]	; (8007cf8 <HAL_GPIO_Init+0x2a0>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d05e      	beq.n	8007b52 <HAL_GPIO_Init+0xfa>
 8007a94:	4a98      	ldr	r2, [pc, #608]	; (8007cf8 <HAL_GPIO_Init+0x2a0>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d875      	bhi.n	8007b86 <HAL_GPIO_Init+0x12e>
 8007a9a:	4a98      	ldr	r2, [pc, #608]	; (8007cfc <HAL_GPIO_Init+0x2a4>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d058      	beq.n	8007b52 <HAL_GPIO_Init+0xfa>
 8007aa0:	4a96      	ldr	r2, [pc, #600]	; (8007cfc <HAL_GPIO_Init+0x2a4>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d86f      	bhi.n	8007b86 <HAL_GPIO_Init+0x12e>
 8007aa6:	4a96      	ldr	r2, [pc, #600]	; (8007d00 <HAL_GPIO_Init+0x2a8>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d052      	beq.n	8007b52 <HAL_GPIO_Init+0xfa>
 8007aac:	4a94      	ldr	r2, [pc, #592]	; (8007d00 <HAL_GPIO_Init+0x2a8>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d869      	bhi.n	8007b86 <HAL_GPIO_Init+0x12e>
 8007ab2:	4a94      	ldr	r2, [pc, #592]	; (8007d04 <HAL_GPIO_Init+0x2ac>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d04c      	beq.n	8007b52 <HAL_GPIO_Init+0xfa>
 8007ab8:	4a92      	ldr	r2, [pc, #584]	; (8007d04 <HAL_GPIO_Init+0x2ac>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d863      	bhi.n	8007b86 <HAL_GPIO_Init+0x12e>
 8007abe:	4a92      	ldr	r2, [pc, #584]	; (8007d08 <HAL_GPIO_Init+0x2b0>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d046      	beq.n	8007b52 <HAL_GPIO_Init+0xfa>
 8007ac4:	4a90      	ldr	r2, [pc, #576]	; (8007d08 <HAL_GPIO_Init+0x2b0>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d85d      	bhi.n	8007b86 <HAL_GPIO_Init+0x12e>
 8007aca:	2b12      	cmp	r3, #18
 8007acc:	d82a      	bhi.n	8007b24 <HAL_GPIO_Init+0xcc>
 8007ace:	2b12      	cmp	r3, #18
 8007ad0:	d859      	bhi.n	8007b86 <HAL_GPIO_Init+0x12e>
 8007ad2:	a201      	add	r2, pc, #4	; (adr r2, 8007ad8 <HAL_GPIO_Init+0x80>)
 8007ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ad8:	08007b53 	.word	0x08007b53
 8007adc:	08007b2d 	.word	0x08007b2d
 8007ae0:	08007b3f 	.word	0x08007b3f
 8007ae4:	08007b81 	.word	0x08007b81
 8007ae8:	08007b87 	.word	0x08007b87
 8007aec:	08007b87 	.word	0x08007b87
 8007af0:	08007b87 	.word	0x08007b87
 8007af4:	08007b87 	.word	0x08007b87
 8007af8:	08007b87 	.word	0x08007b87
 8007afc:	08007b87 	.word	0x08007b87
 8007b00:	08007b87 	.word	0x08007b87
 8007b04:	08007b87 	.word	0x08007b87
 8007b08:	08007b87 	.word	0x08007b87
 8007b0c:	08007b87 	.word	0x08007b87
 8007b10:	08007b87 	.word	0x08007b87
 8007b14:	08007b87 	.word	0x08007b87
 8007b18:	08007b87 	.word	0x08007b87
 8007b1c:	08007b35 	.word	0x08007b35
 8007b20:	08007b49 	.word	0x08007b49
 8007b24:	4a79      	ldr	r2, [pc, #484]	; (8007d0c <HAL_GPIO_Init+0x2b4>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d013      	beq.n	8007b52 <HAL_GPIO_Init+0xfa>
 8007b2a:	e02c      	b.n	8007b86 <HAL_GPIO_Init+0x12e>
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	68db      	ldr	r3, [r3, #12]
 8007b30:	623b      	str	r3, [r7, #32]
 8007b32:	e029      	b.n	8007b88 <HAL_GPIO_Init+0x130>
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	68db      	ldr	r3, [r3, #12]
 8007b38:	3304      	adds	r3, #4
 8007b3a:	623b      	str	r3, [r7, #32]
 8007b3c:	e024      	b.n	8007b88 <HAL_GPIO_Init+0x130>
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	3308      	adds	r3, #8
 8007b44:	623b      	str	r3, [r7, #32]
 8007b46:	e01f      	b.n	8007b88 <HAL_GPIO_Init+0x130>
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	68db      	ldr	r3, [r3, #12]
 8007b4c:	330c      	adds	r3, #12
 8007b4e:	623b      	str	r3, [r7, #32]
 8007b50:	e01a      	b.n	8007b88 <HAL_GPIO_Init+0x130>
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d102      	bne.n	8007b60 <HAL_GPIO_Init+0x108>
 8007b5a:	2304      	movs	r3, #4
 8007b5c:	623b      	str	r3, [r7, #32]
 8007b5e:	e013      	b.n	8007b88 <HAL_GPIO_Init+0x130>
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d105      	bne.n	8007b74 <HAL_GPIO_Init+0x11c>
 8007b68:	2308      	movs	r3, #8
 8007b6a:	623b      	str	r3, [r7, #32]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	69fa      	ldr	r2, [r7, #28]
 8007b70:	611a      	str	r2, [r3, #16]
 8007b72:	e009      	b.n	8007b88 <HAL_GPIO_Init+0x130>
 8007b74:	2308      	movs	r3, #8
 8007b76:	623b      	str	r3, [r7, #32]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	69fa      	ldr	r2, [r7, #28]
 8007b7c:	615a      	str	r2, [r3, #20]
 8007b7e:	e003      	b.n	8007b88 <HAL_GPIO_Init+0x130>
 8007b80:	2300      	movs	r3, #0
 8007b82:	623b      	str	r3, [r7, #32]
 8007b84:	e000      	b.n	8007b88 <HAL_GPIO_Init+0x130>
 8007b86:	bf00      	nop
 8007b88:	69bb      	ldr	r3, [r7, #24]
 8007b8a:	2bff      	cmp	r3, #255	; 0xff
 8007b8c:	d801      	bhi.n	8007b92 <HAL_GPIO_Init+0x13a>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	e001      	b.n	8007b96 <HAL_GPIO_Init+0x13e>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	3304      	adds	r3, #4
 8007b96:	617b      	str	r3, [r7, #20]
 8007b98:	69bb      	ldr	r3, [r7, #24]
 8007b9a:	2bff      	cmp	r3, #255	; 0xff
 8007b9c:	d802      	bhi.n	8007ba4 <HAL_GPIO_Init+0x14c>
 8007b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	e002      	b.n	8007baa <HAL_GPIO_Init+0x152>
 8007ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba6:	3b08      	subs	r3, #8
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	613b      	str	r3, [r7, #16]
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	210f      	movs	r1, #15
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8007bb8:	43db      	mvns	r3, r3
 8007bba:	401a      	ands	r2, r3
 8007bbc:	6a39      	ldr	r1, [r7, #32]
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8007bc4:	431a      	orrs	r2, r3
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	601a      	str	r2, [r3, #0]
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	f000 80b1 	beq.w	8007d3a <HAL_GPIO_Init+0x2e2>
 8007bd8:	4b4d      	ldr	r3, [pc, #308]	; (8007d10 <HAL_GPIO_Init+0x2b8>)
 8007bda:	699b      	ldr	r3, [r3, #24]
 8007bdc:	4a4c      	ldr	r2, [pc, #304]	; (8007d10 <HAL_GPIO_Init+0x2b8>)
 8007bde:	f043 0301 	orr.w	r3, r3, #1
 8007be2:	6193      	str	r3, [r2, #24]
 8007be4:	4b4a      	ldr	r3, [pc, #296]	; (8007d10 <HAL_GPIO_Init+0x2b8>)
 8007be6:	699b      	ldr	r3, [r3, #24]
 8007be8:	f003 0301 	and.w	r3, r3, #1
 8007bec:	60bb      	str	r3, [r7, #8]
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	4a48      	ldr	r2, [pc, #288]	; (8007d14 <HAL_GPIO_Init+0x2bc>)
 8007bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf4:	089b      	lsrs	r3, r3, #2
 8007bf6:	3302      	adds	r3, #2
 8007bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bfc:	60fb      	str	r3, [r7, #12]
 8007bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c00:	f003 0303 	and.w	r3, r3, #3
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	220f      	movs	r2, #15
 8007c08:	fa02 f303 	lsl.w	r3, r2, r3
 8007c0c:	43db      	mvns	r3, r3
 8007c0e:	68fa      	ldr	r2, [r7, #12]
 8007c10:	4013      	ands	r3, r2
 8007c12:	60fb      	str	r3, [r7, #12]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	4a40      	ldr	r2, [pc, #256]	; (8007d18 <HAL_GPIO_Init+0x2c0>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d013      	beq.n	8007c44 <HAL_GPIO_Init+0x1ec>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	4a3f      	ldr	r2, [pc, #252]	; (8007d1c <HAL_GPIO_Init+0x2c4>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d00d      	beq.n	8007c40 <HAL_GPIO_Init+0x1e8>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	4a3e      	ldr	r2, [pc, #248]	; (8007d20 <HAL_GPIO_Init+0x2c8>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d007      	beq.n	8007c3c <HAL_GPIO_Init+0x1e4>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	4a3d      	ldr	r2, [pc, #244]	; (8007d24 <HAL_GPIO_Init+0x2cc>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d101      	bne.n	8007c38 <HAL_GPIO_Init+0x1e0>
 8007c34:	2303      	movs	r3, #3
 8007c36:	e006      	b.n	8007c46 <HAL_GPIO_Init+0x1ee>
 8007c38:	2304      	movs	r3, #4
 8007c3a:	e004      	b.n	8007c46 <HAL_GPIO_Init+0x1ee>
 8007c3c:	2302      	movs	r3, #2
 8007c3e:	e002      	b.n	8007c46 <HAL_GPIO_Init+0x1ee>
 8007c40:	2301      	movs	r3, #1
 8007c42:	e000      	b.n	8007c46 <HAL_GPIO_Init+0x1ee>
 8007c44:	2300      	movs	r3, #0
 8007c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c48:	f002 0203 	and.w	r2, r2, #3
 8007c4c:	0092      	lsls	r2, r2, #2
 8007c4e:	4093      	lsls	r3, r2
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	60fb      	str	r3, [r7, #12]
 8007c56:	492f      	ldr	r1, [pc, #188]	; (8007d14 <HAL_GPIO_Init+0x2bc>)
 8007c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5a:	089b      	lsrs	r3, r3, #2
 8007c5c:	3302      	adds	r3, #2
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d006      	beq.n	8007c7e <HAL_GPIO_Init+0x226>
 8007c70:	4b2d      	ldr	r3, [pc, #180]	; (8007d28 <HAL_GPIO_Init+0x2d0>)
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	492c      	ldr	r1, [pc, #176]	; (8007d28 <HAL_GPIO_Init+0x2d0>)
 8007c76:	69bb      	ldr	r3, [r7, #24]
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	600b      	str	r3, [r1, #0]
 8007c7c:	e006      	b.n	8007c8c <HAL_GPIO_Init+0x234>
 8007c7e:	4b2a      	ldr	r3, [pc, #168]	; (8007d28 <HAL_GPIO_Init+0x2d0>)
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	69bb      	ldr	r3, [r7, #24]
 8007c84:	43db      	mvns	r3, r3
 8007c86:	4928      	ldr	r1, [pc, #160]	; (8007d28 <HAL_GPIO_Init+0x2d0>)
 8007c88:	4013      	ands	r3, r2
 8007c8a:	600b      	str	r3, [r1, #0]
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d006      	beq.n	8007ca6 <HAL_GPIO_Init+0x24e>
 8007c98:	4b23      	ldr	r3, [pc, #140]	; (8007d28 <HAL_GPIO_Init+0x2d0>)
 8007c9a:	685a      	ldr	r2, [r3, #4]
 8007c9c:	4922      	ldr	r1, [pc, #136]	; (8007d28 <HAL_GPIO_Init+0x2d0>)
 8007c9e:	69bb      	ldr	r3, [r7, #24]
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	604b      	str	r3, [r1, #4]
 8007ca4:	e006      	b.n	8007cb4 <HAL_GPIO_Init+0x25c>
 8007ca6:	4b20      	ldr	r3, [pc, #128]	; (8007d28 <HAL_GPIO_Init+0x2d0>)
 8007ca8:	685a      	ldr	r2, [r3, #4]
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	43db      	mvns	r3, r3
 8007cae:	491e      	ldr	r1, [pc, #120]	; (8007d28 <HAL_GPIO_Init+0x2d0>)
 8007cb0:	4013      	ands	r3, r2
 8007cb2:	604b      	str	r3, [r1, #4]
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d006      	beq.n	8007cce <HAL_GPIO_Init+0x276>
 8007cc0:	4b19      	ldr	r3, [pc, #100]	; (8007d28 <HAL_GPIO_Init+0x2d0>)
 8007cc2:	689a      	ldr	r2, [r3, #8]
 8007cc4:	4918      	ldr	r1, [pc, #96]	; (8007d28 <HAL_GPIO_Init+0x2d0>)
 8007cc6:	69bb      	ldr	r3, [r7, #24]
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	608b      	str	r3, [r1, #8]
 8007ccc:	e006      	b.n	8007cdc <HAL_GPIO_Init+0x284>
 8007cce:	4b16      	ldr	r3, [pc, #88]	; (8007d28 <HAL_GPIO_Init+0x2d0>)
 8007cd0:	689a      	ldr	r2, [r3, #8]
 8007cd2:	69bb      	ldr	r3, [r7, #24]
 8007cd4:	43db      	mvns	r3, r3
 8007cd6:	4914      	ldr	r1, [pc, #80]	; (8007d28 <HAL_GPIO_Init+0x2d0>)
 8007cd8:	4013      	ands	r3, r2
 8007cda:	608b      	str	r3, [r1, #8]
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d021      	beq.n	8007d2c <HAL_GPIO_Init+0x2d4>
 8007ce8:	4b0f      	ldr	r3, [pc, #60]	; (8007d28 <HAL_GPIO_Init+0x2d0>)
 8007cea:	68da      	ldr	r2, [r3, #12]
 8007cec:	490e      	ldr	r1, [pc, #56]	; (8007d28 <HAL_GPIO_Init+0x2d0>)
 8007cee:	69bb      	ldr	r3, [r7, #24]
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	60cb      	str	r3, [r1, #12]
 8007cf4:	e021      	b.n	8007d3a <HAL_GPIO_Init+0x2e2>
 8007cf6:	bf00      	nop
 8007cf8:	10320000 	.word	0x10320000
 8007cfc:	10310000 	.word	0x10310000
 8007d00:	10220000 	.word	0x10220000
 8007d04:	10210000 	.word	0x10210000
 8007d08:	10120000 	.word	0x10120000
 8007d0c:	10110000 	.word	0x10110000
 8007d10:	40021000 	.word	0x40021000
 8007d14:	40010000 	.word	0x40010000
 8007d18:	40010800 	.word	0x40010800
 8007d1c:	40010c00 	.word	0x40010c00
 8007d20:	40011000 	.word	0x40011000
 8007d24:	40011400 	.word	0x40011400
 8007d28:	40010400 	.word	0x40010400
 8007d2c:	4b0b      	ldr	r3, [pc, #44]	; (8007d5c <HAL_GPIO_Init+0x304>)
 8007d2e:	68da      	ldr	r2, [r3, #12]
 8007d30:	69bb      	ldr	r3, [r7, #24]
 8007d32:	43db      	mvns	r3, r3
 8007d34:	4909      	ldr	r1, [pc, #36]	; (8007d5c <HAL_GPIO_Init+0x304>)
 8007d36:	4013      	ands	r3, r2
 8007d38:	60cb      	str	r3, [r1, #12]
 8007d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3c:	3301      	adds	r3, #1
 8007d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d46:	fa22 f303 	lsr.w	r3, r2, r3
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	f47f ae8e 	bne.w	8007a6c <HAL_GPIO_Init+0x14>
 8007d50:	bf00      	nop
 8007d52:	bf00      	nop
 8007d54:	372c      	adds	r7, #44	; 0x2c
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bc80      	pop	{r7}
 8007d5a:	4770      	bx	lr
 8007d5c:	40010400 	.word	0x40010400

08007d60 <HAL_GPIO_ReadPin>:
 8007d60:	b480      	push	{r7}
 8007d62:	b085      	sub	sp, #20
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	460b      	mov	r3, r1
 8007d6a:	807b      	strh	r3, [r7, #2]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	689a      	ldr	r2, [r3, #8]
 8007d70:	887b      	ldrh	r3, [r7, #2]
 8007d72:	4013      	ands	r3, r2
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d002      	beq.n	8007d7e <HAL_GPIO_ReadPin+0x1e>
 8007d78:	2301      	movs	r3, #1
 8007d7a:	73fb      	strb	r3, [r7, #15]
 8007d7c:	e001      	b.n	8007d82 <HAL_GPIO_ReadPin+0x22>
 8007d7e:	2300      	movs	r3, #0
 8007d80:	73fb      	strb	r3, [r7, #15]
 8007d82:	7bfb      	ldrb	r3, [r7, #15]
 8007d84:	4618      	mov	r0, r3
 8007d86:	3714      	adds	r7, #20
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bc80      	pop	{r7}
 8007d8c:	4770      	bx	lr

08007d8e <HAL_GPIO_WritePin>:
 8007d8e:	b480      	push	{r7}
 8007d90:	b083      	sub	sp, #12
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
 8007d96:	460b      	mov	r3, r1
 8007d98:	807b      	strh	r3, [r7, #2]
 8007d9a:	4613      	mov	r3, r2
 8007d9c:	707b      	strb	r3, [r7, #1]
 8007d9e:	787b      	ldrb	r3, [r7, #1]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d003      	beq.n	8007dac <HAL_GPIO_WritePin+0x1e>
 8007da4:	887a      	ldrh	r2, [r7, #2]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	611a      	str	r2, [r3, #16]
 8007daa:	e003      	b.n	8007db4 <HAL_GPIO_WritePin+0x26>
 8007dac:	887b      	ldrh	r3, [r7, #2]
 8007dae:	041a      	lsls	r2, r3, #16
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	611a      	str	r2, [r3, #16]
 8007db4:	bf00      	nop
 8007db6:	370c      	adds	r7, #12
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bc80      	pop	{r7}
 8007dbc:	4770      	bx	lr
	...

08007dc0 <HAL_GPIO_EXTI_IRQHandler>:
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	80fb      	strh	r3, [r7, #6]
 8007dca:	4b08      	ldr	r3, [pc, #32]	; (8007dec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007dcc:	695a      	ldr	r2, [r3, #20]
 8007dce:	88fb      	ldrh	r3, [r7, #6]
 8007dd0:	4013      	ands	r3, r2
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d006      	beq.n	8007de4 <HAL_GPIO_EXTI_IRQHandler+0x24>
 8007dd6:	4a05      	ldr	r2, [pc, #20]	; (8007dec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007dd8:	88fb      	ldrh	r3, [r7, #6]
 8007dda:	6153      	str	r3, [r2, #20]
 8007ddc:	88fb      	ldrh	r3, [r7, #6]
 8007dde:	4618      	mov	r0, r3
 8007de0:	f7fc feee 	bl	8004bc0 <HAL_GPIO_EXTI_Callback>
 8007de4:	bf00      	nop
 8007de6:	3708      	adds	r7, #8
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	40010400 	.word	0x40010400

08007df0 <HAL_I2C_Init>:
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b084      	sub	sp, #16
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d101      	bne.n	8007e02 <HAL_I2C_Init+0x12>
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e12b      	b.n	800805a <HAL_I2C_Init+0x26a>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d106      	bne.n	8007e1c <HAL_I2C_Init+0x2c>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2200      	movs	r2, #0
 8007e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f7fe f8a0 	bl	8005f5c <HAL_I2C_MspInit>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2224      	movs	r2, #36	; 0x24
 8007e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f022 0201 	bic.w	r2, r2, #1
 8007e32:	601a      	str	r2, [r3, #0]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e42:	601a      	str	r2, [r3, #0]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007e52:	601a      	str	r2, [r3, #0]
 8007e54:	f001 f918 	bl	8009088 <HAL_RCC_GetPCLK1Freq>
 8007e58:	60f8      	str	r0, [r7, #12]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	4a81      	ldr	r2, [pc, #516]	; (8008064 <HAL_I2C_Init+0x274>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d807      	bhi.n	8007e74 <HAL_I2C_Init+0x84>
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	4a80      	ldr	r2, [pc, #512]	; (8008068 <HAL_I2C_Init+0x278>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	bf94      	ite	ls
 8007e6c:	2301      	movls	r3, #1
 8007e6e:	2300      	movhi	r3, #0
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	e006      	b.n	8007e82 <HAL_I2C_Init+0x92>
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	4a7d      	ldr	r2, [pc, #500]	; (800806c <HAL_I2C_Init+0x27c>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	bf94      	ite	ls
 8007e7c:	2301      	movls	r3, #1
 8007e7e:	2300      	movhi	r3, #0
 8007e80:	b2db      	uxtb	r3, r3
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d001      	beq.n	8007e8a <HAL_I2C_Init+0x9a>
 8007e86:	2301      	movs	r3, #1
 8007e88:	e0e7      	b.n	800805a <HAL_I2C_Init+0x26a>
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	4a78      	ldr	r2, [pc, #480]	; (8008070 <HAL_I2C_Init+0x280>)
 8007e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8007e92:	0c9b      	lsrs	r3, r3, #18
 8007e94:	60bb      	str	r3, [r7, #8]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	68ba      	ldr	r2, [r7, #8]
 8007ea6:	430a      	orrs	r2, r1
 8007ea8:	605a      	str	r2, [r3, #4]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	6a1b      	ldr	r3, [r3, #32]
 8007eb0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	4a6a      	ldr	r2, [pc, #424]	; (8008064 <HAL_I2C_Init+0x274>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d802      	bhi.n	8007ec4 <HAL_I2C_Init+0xd4>
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	3301      	adds	r3, #1
 8007ec2:	e009      	b.n	8007ed8 <HAL_I2C_Init+0xe8>
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007eca:	fb02 f303 	mul.w	r3, r2, r3
 8007ece:	4a69      	ldr	r2, [pc, #420]	; (8008074 <HAL_I2C_Init+0x284>)
 8007ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8007ed4:	099b      	lsrs	r3, r3, #6
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	687a      	ldr	r2, [r7, #4]
 8007eda:	6812      	ldr	r2, [r2, #0]
 8007edc:	430b      	orrs	r3, r1
 8007ede:	6213      	str	r3, [r2, #32]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	69db      	ldr	r3, [r3, #28]
 8007ee6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007eea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	495c      	ldr	r1, [pc, #368]	; (8008064 <HAL_I2C_Init+0x274>)
 8007ef4:	428b      	cmp	r3, r1
 8007ef6:	d819      	bhi.n	8007f2c <HAL_I2C_Init+0x13c>
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	1e59      	subs	r1, r3, #1
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	005b      	lsls	r3, r3, #1
 8007f02:	fbb1 f3f3 	udiv	r3, r1, r3
 8007f06:	1c59      	adds	r1, r3, #1
 8007f08:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007f0c:	400b      	ands	r3, r1
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d00a      	beq.n	8007f28 <HAL_I2C_Init+0x138>
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	1e59      	subs	r1, r3, #1
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	005b      	lsls	r3, r3, #1
 8007f1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8007f20:	3301      	adds	r3, #1
 8007f22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f26:	e051      	b.n	8007fcc <HAL_I2C_Init+0x1dc>
 8007f28:	2304      	movs	r3, #4
 8007f2a:	e04f      	b.n	8007fcc <HAL_I2C_Init+0x1dc>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d111      	bne.n	8007f58 <HAL_I2C_Init+0x168>
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	1e58      	subs	r0, r3, #1
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6859      	ldr	r1, [r3, #4]
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	005b      	lsls	r3, r3, #1
 8007f40:	440b      	add	r3, r1
 8007f42:	fbb0 f3f3 	udiv	r3, r0, r3
 8007f46:	3301      	adds	r3, #1
 8007f48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	bf0c      	ite	eq
 8007f50:	2301      	moveq	r3, #1
 8007f52:	2300      	movne	r3, #0
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	e012      	b.n	8007f7e <HAL_I2C_Init+0x18e>
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	1e58      	subs	r0, r3, #1
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6859      	ldr	r1, [r3, #4]
 8007f60:	460b      	mov	r3, r1
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	440b      	add	r3, r1
 8007f66:	0099      	lsls	r1, r3, #2
 8007f68:	440b      	add	r3, r1
 8007f6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8007f6e:	3301      	adds	r3, #1
 8007f70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	bf0c      	ite	eq
 8007f78:	2301      	moveq	r3, #1
 8007f7a:	2300      	movne	r3, #0
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d001      	beq.n	8007f86 <HAL_I2C_Init+0x196>
 8007f82:	2301      	movs	r3, #1
 8007f84:	e022      	b.n	8007fcc <HAL_I2C_Init+0x1dc>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d10e      	bne.n	8007fac <HAL_I2C_Init+0x1bc>
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	1e58      	subs	r0, r3, #1
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6859      	ldr	r1, [r3, #4]
 8007f96:	460b      	mov	r3, r1
 8007f98:	005b      	lsls	r3, r3, #1
 8007f9a:	440b      	add	r3, r1
 8007f9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8007fa0:	3301      	adds	r3, #1
 8007fa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007fa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007faa:	e00f      	b.n	8007fcc <HAL_I2C_Init+0x1dc>
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	1e58      	subs	r0, r3, #1
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6859      	ldr	r1, [r3, #4]
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	009b      	lsls	r3, r3, #2
 8007fb8:	440b      	add	r3, r1
 8007fba:	0099      	lsls	r1, r3, #2
 8007fbc:	440b      	add	r3, r1
 8007fbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8007fc2:	3301      	adds	r3, #1
 8007fc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007fc8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007fcc:	6879      	ldr	r1, [r7, #4]
 8007fce:	6809      	ldr	r1, [r1, #0]
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	61cb      	str	r3, [r1, #28]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	69da      	ldr	r2, [r3, #28]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6a1b      	ldr	r3, [r3, #32]
 8007fe6:	431a      	orrs	r2, r3
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	430a      	orrs	r2, r1
 8007fee:	601a      	str	r2, [r3, #0]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007ffa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	6911      	ldr	r1, [r2, #16]
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	68d2      	ldr	r2, [r2, #12]
 8008006:	4311      	orrs	r1, r2
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	6812      	ldr	r2, [r2, #0]
 800800c:	430b      	orrs	r3, r1
 800800e:	6093      	str	r3, [r2, #8]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	695a      	ldr	r2, [r3, #20]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	699b      	ldr	r3, [r3, #24]
 8008022:	431a      	orrs	r2, r3
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	430a      	orrs	r2, r1
 800802a:	60da      	str	r2, [r3, #12]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	681a      	ldr	r2, [r3, #0]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f042 0201 	orr.w	r2, r2, #1
 800803a:	601a      	str	r2, [r3, #0]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2200      	movs	r2, #0
 8008040:	641a      	str	r2, [r3, #64]	; 0x40
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2220      	movs	r2, #32
 8008046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	631a      	str	r2, [r3, #48]	; 0x30
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2200      	movs	r2, #0
 8008054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008058:	2300      	movs	r3, #0
 800805a:	4618      	mov	r0, r3
 800805c:	3710      	adds	r7, #16
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
 8008062:	bf00      	nop
 8008064:	000186a0 	.word	0x000186a0
 8008068:	001e847f 	.word	0x001e847f
 800806c:	003d08ff 	.word	0x003d08ff
 8008070:	431bde83 	.word	0x431bde83
 8008074:	10624dd3 	.word	0x10624dd3

08008078 <HAL_I2C_Master_Transmit>:
 8008078:	b580      	push	{r7, lr}
 800807a:	b088      	sub	sp, #32
 800807c:	af02      	add	r7, sp, #8
 800807e:	60f8      	str	r0, [r7, #12]
 8008080:	607a      	str	r2, [r7, #4]
 8008082:	461a      	mov	r2, r3
 8008084:	460b      	mov	r3, r1
 8008086:	817b      	strh	r3, [r7, #10]
 8008088:	4613      	mov	r3, r2
 800808a:	813b      	strh	r3, [r7, #8]
 800808c:	f7fe f9c4 	bl	8006418 <HAL_GetTick>
 8008090:	6178      	str	r0, [r7, #20]
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008098:	b2db      	uxtb	r3, r3
 800809a:	2b20      	cmp	r3, #32
 800809c:	f040 80e0 	bne.w	8008260 <HAL_I2C_Master_Transmit+0x1e8>
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	9300      	str	r3, [sp, #0]
 80080a4:	2319      	movs	r3, #25
 80080a6:	2201      	movs	r2, #1
 80080a8:	4970      	ldr	r1, [pc, #448]	; (800826c <HAL_I2C_Master_Transmit+0x1f4>)
 80080aa:	68f8      	ldr	r0, [r7, #12]
 80080ac:	f000 fa92 	bl	80085d4 <I2C_WaitOnFlagUntilTimeout>
 80080b0:	4603      	mov	r3, r0
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d001      	beq.n	80080ba <HAL_I2C_Master_Transmit+0x42>
 80080b6:	2302      	movs	r3, #2
 80080b8:	e0d3      	b.n	8008262 <HAL_I2C_Master_Transmit+0x1ea>
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d101      	bne.n	80080c8 <HAL_I2C_Master_Transmit+0x50>
 80080c4:	2302      	movs	r3, #2
 80080c6:	e0cc      	b.n	8008262 <HAL_I2C_Master_Transmit+0x1ea>
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2201      	movs	r2, #1
 80080cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f003 0301 	and.w	r3, r3, #1
 80080da:	2b01      	cmp	r3, #1
 80080dc:	d007      	beq.n	80080ee <HAL_I2C_Master_Transmit+0x76>
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f042 0201 	orr.w	r2, r2, #1
 80080ec:	601a      	str	r2, [r3, #0]
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80080fc:	601a      	str	r2, [r3, #0]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2221      	movs	r2, #33	; 0x21
 8008102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2210      	movs	r2, #16
 800810a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2200      	movs	r2, #0
 8008112:	641a      	str	r2, [r3, #64]	; 0x40
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	625a      	str	r2, [r3, #36]	; 0x24
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	893a      	ldrh	r2, [r7, #8]
 800811e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008124:	b29a      	uxth	r2, r3
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	851a      	strh	r2, [r3, #40]	; 0x28
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	4a50      	ldr	r2, [pc, #320]	; (8008270 <HAL_I2C_Master_Transmit+0x1f8>)
 800812e:	62da      	str	r2, [r3, #44]	; 0x2c
 8008130:	8979      	ldrh	r1, [r7, #10]
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	6a3a      	ldr	r2, [r7, #32]
 8008136:	68f8      	ldr	r0, [r7, #12]
 8008138:	f000 f9ca 	bl	80084d0 <I2C_MasterRequestWrite>
 800813c:	4603      	mov	r3, r0
 800813e:	2b00      	cmp	r3, #0
 8008140:	d001      	beq.n	8008146 <HAL_I2C_Master_Transmit+0xce>
 8008142:	2301      	movs	r3, #1
 8008144:	e08d      	b.n	8008262 <HAL_I2C_Master_Transmit+0x1ea>
 8008146:	2300      	movs	r3, #0
 8008148:	613b      	str	r3, [r7, #16]
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	695b      	ldr	r3, [r3, #20]
 8008150:	613b      	str	r3, [r7, #16]
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	699b      	ldr	r3, [r3, #24]
 8008158:	613b      	str	r3, [r7, #16]
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	e066      	b.n	800822c <HAL_I2C_Master_Transmit+0x1b4>
 800815e:	697a      	ldr	r2, [r7, #20]
 8008160:	6a39      	ldr	r1, [r7, #32]
 8008162:	68f8      	ldr	r0, [r7, #12]
 8008164:	f000 fb0c 	bl	8008780 <I2C_WaitOnTXEFlagUntilTimeout>
 8008168:	4603      	mov	r3, r0
 800816a:	2b00      	cmp	r3, #0
 800816c:	d00d      	beq.n	800818a <HAL_I2C_Master_Transmit+0x112>
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008172:	2b04      	cmp	r3, #4
 8008174:	d107      	bne.n	8008186 <HAL_I2C_Master_Transmit+0x10e>
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	681a      	ldr	r2, [r3, #0]
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008184:	601a      	str	r2, [r3, #0]
 8008186:	2301      	movs	r3, #1
 8008188:	e06b      	b.n	8008262 <HAL_I2C_Master_Transmit+0x1ea>
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800818e:	781a      	ldrb	r2, [r3, #0]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	611a      	str	r2, [r3, #16]
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819a:	1c5a      	adds	r2, r3, #1
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	625a      	str	r2, [r3, #36]	; 0x24
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	3b01      	subs	r3, #1
 80081a8:	b29a      	uxth	r2, r3
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081b2:	3b01      	subs	r3, #1
 80081b4:	b29a      	uxth	r2, r3
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	851a      	strh	r2, [r3, #40]	; 0x28
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	695b      	ldr	r3, [r3, #20]
 80081c0:	f003 0304 	and.w	r3, r3, #4
 80081c4:	2b04      	cmp	r3, #4
 80081c6:	d11b      	bne.n	8008200 <HAL_I2C_Master_Transmit+0x188>
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d017      	beq.n	8008200 <HAL_I2C_Master_Transmit+0x188>
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d4:	781a      	ldrb	r2, [r3, #0]
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	611a      	str	r2, [r3, #16]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e0:	1c5a      	adds	r2, r3, #1
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	625a      	str	r2, [r3, #36]	; 0x24
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	3b01      	subs	r3, #1
 80081ee:	b29a      	uxth	r2, r3
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081f8:	3b01      	subs	r3, #1
 80081fa:	b29a      	uxth	r2, r3
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	851a      	strh	r2, [r3, #40]	; 0x28
 8008200:	697a      	ldr	r2, [r7, #20]
 8008202:	6a39      	ldr	r1, [r7, #32]
 8008204:	68f8      	ldr	r0, [r7, #12]
 8008206:	f000 fafc 	bl	8008802 <I2C_WaitOnBTFFlagUntilTimeout>
 800820a:	4603      	mov	r3, r0
 800820c:	2b00      	cmp	r3, #0
 800820e:	d00d      	beq.n	800822c <HAL_I2C_Master_Transmit+0x1b4>
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008214:	2b04      	cmp	r3, #4
 8008216:	d107      	bne.n	8008228 <HAL_I2C_Master_Transmit+0x1b0>
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008226:	601a      	str	r2, [r3, #0]
 8008228:	2301      	movs	r3, #1
 800822a:	e01a      	b.n	8008262 <HAL_I2C_Master_Transmit+0x1ea>
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008230:	2b00      	cmp	r3, #0
 8008232:	d194      	bne.n	800815e <HAL_I2C_Master_Transmit+0xe6>
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	681a      	ldr	r2, [r3, #0]
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008242:	601a      	str	r2, [r3, #0]
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2220      	movs	r2, #32
 8008248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2200      	movs	r2, #0
 8008250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2200      	movs	r2, #0
 8008258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800825c:	2300      	movs	r3, #0
 800825e:	e000      	b.n	8008262 <HAL_I2C_Master_Transmit+0x1ea>
 8008260:	2302      	movs	r3, #2
 8008262:	4618      	mov	r0, r3
 8008264:	3718      	adds	r7, #24
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
 800826a:	bf00      	nop
 800826c:	00100002 	.word	0x00100002
 8008270:	ffff0000 	.word	0xffff0000

08008274 <HAL_I2C_IsDeviceReady>:
 8008274:	b580      	push	{r7, lr}
 8008276:	b08a      	sub	sp, #40	; 0x28
 8008278:	af02      	add	r7, sp, #8
 800827a:	60f8      	str	r0, [r7, #12]
 800827c:	607a      	str	r2, [r7, #4]
 800827e:	603b      	str	r3, [r7, #0]
 8008280:	460b      	mov	r3, r1
 8008282:	817b      	strh	r3, [r7, #10]
 8008284:	f7fe f8c8 	bl	8006418 <HAL_GetTick>
 8008288:	61f8      	str	r0, [r7, #28]
 800828a:	2301      	movs	r3, #1
 800828c:	61bb      	str	r3, [r7, #24]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008294:	b2db      	uxtb	r3, r3
 8008296:	2b20      	cmp	r3, #32
 8008298:	f040 8111 	bne.w	80084be <HAL_I2C_IsDeviceReady+0x24a>
 800829c:	69fb      	ldr	r3, [r7, #28]
 800829e:	9300      	str	r3, [sp, #0]
 80082a0:	2319      	movs	r3, #25
 80082a2:	2201      	movs	r2, #1
 80082a4:	4988      	ldr	r1, [pc, #544]	; (80084c8 <HAL_I2C_IsDeviceReady+0x254>)
 80082a6:	68f8      	ldr	r0, [r7, #12]
 80082a8:	f000 f994 	bl	80085d4 <I2C_WaitOnFlagUntilTimeout>
 80082ac:	4603      	mov	r3, r0
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d001      	beq.n	80082b6 <HAL_I2C_IsDeviceReady+0x42>
 80082b2:	2302      	movs	r3, #2
 80082b4:	e104      	b.n	80084c0 <HAL_I2C_IsDeviceReady+0x24c>
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d101      	bne.n	80082c4 <HAL_I2C_IsDeviceReady+0x50>
 80082c0:	2302      	movs	r3, #2
 80082c2:	e0fd      	b.n	80084c0 <HAL_I2C_IsDeviceReady+0x24c>
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2201      	movs	r2, #1
 80082c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f003 0301 	and.w	r3, r3, #1
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d007      	beq.n	80082ea <HAL_I2C_IsDeviceReady+0x76>
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f042 0201 	orr.w	r2, r2, #1
 80082e8:	601a      	str	r2, [r3, #0]
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	681a      	ldr	r2, [r3, #0]
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80082f8:	601a      	str	r2, [r3, #0]
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2224      	movs	r2, #36	; 0x24
 80082fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2200      	movs	r2, #0
 8008306:	641a      	str	r2, [r3, #64]	; 0x40
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	4a70      	ldr	r2, [pc, #448]	; (80084cc <HAL_I2C_IsDeviceReady+0x258>)
 800830c:	62da      	str	r2, [r3, #44]	; 0x2c
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	681a      	ldr	r2, [r3, #0]
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800831c:	601a      	str	r2, [r3, #0]
 800831e:	69fb      	ldr	r3, [r7, #28]
 8008320:	9300      	str	r3, [sp, #0]
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	2200      	movs	r2, #0
 8008326:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800832a:	68f8      	ldr	r0, [r7, #12]
 800832c:	f000 f952 	bl	80085d4 <I2C_WaitOnFlagUntilTimeout>
 8008330:	4603      	mov	r3, r0
 8008332:	2b00      	cmp	r3, #0
 8008334:	d00d      	beq.n	8008352 <HAL_I2C_IsDeviceReady+0xde>
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008340:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008344:	d103      	bne.n	800834e <HAL_I2C_IsDeviceReady+0xda>
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f44f 7200 	mov.w	r2, #512	; 0x200
 800834c:	641a      	str	r2, [r3, #64]	; 0x40
 800834e:	2303      	movs	r3, #3
 8008350:	e0b6      	b.n	80084c0 <HAL_I2C_IsDeviceReady+0x24c>
 8008352:	897b      	ldrh	r3, [r7, #10]
 8008354:	b2db      	uxtb	r3, r3
 8008356:	461a      	mov	r2, r3
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008360:	611a      	str	r2, [r3, #16]
 8008362:	f7fe f859 	bl	8006418 <HAL_GetTick>
 8008366:	61f8      	str	r0, [r7, #28]
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	695b      	ldr	r3, [r3, #20]
 800836e:	f003 0302 	and.w	r3, r3, #2
 8008372:	2b02      	cmp	r3, #2
 8008374:	bf0c      	ite	eq
 8008376:	2301      	moveq	r3, #1
 8008378:	2300      	movne	r3, #0
 800837a:	b2db      	uxtb	r3, r3
 800837c:	75fb      	strb	r3, [r7, #23]
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	695b      	ldr	r3, [r3, #20]
 8008384:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008388:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800838c:	bf0c      	ite	eq
 800838e:	2301      	moveq	r3, #1
 8008390:	2300      	movne	r3, #0
 8008392:	b2db      	uxtb	r3, r3
 8008394:	75bb      	strb	r3, [r7, #22]
 8008396:	e025      	b.n	80083e4 <HAL_I2C_IsDeviceReady+0x170>
 8008398:	f7fe f83e 	bl	8006418 <HAL_GetTick>
 800839c:	4602      	mov	r2, r0
 800839e:	69fb      	ldr	r3, [r7, #28]
 80083a0:	1ad3      	subs	r3, r2, r3
 80083a2:	683a      	ldr	r2, [r7, #0]
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d302      	bcc.n	80083ae <HAL_I2C_IsDeviceReady+0x13a>
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d103      	bne.n	80083b6 <HAL_I2C_IsDeviceReady+0x142>
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	22a0      	movs	r2, #160	; 0xa0
 80083b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	695b      	ldr	r3, [r3, #20]
 80083bc:	f003 0302 	and.w	r3, r3, #2
 80083c0:	2b02      	cmp	r3, #2
 80083c2:	bf0c      	ite	eq
 80083c4:	2301      	moveq	r3, #1
 80083c6:	2300      	movne	r3, #0
 80083c8:	b2db      	uxtb	r3, r3
 80083ca:	75fb      	strb	r3, [r7, #23]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	695b      	ldr	r3, [r3, #20]
 80083d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083da:	bf0c      	ite	eq
 80083dc:	2301      	moveq	r3, #1
 80083de:	2300      	movne	r3, #0
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	75bb      	strb	r3, [r7, #22]
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083ea:	b2db      	uxtb	r3, r3
 80083ec:	2ba0      	cmp	r3, #160	; 0xa0
 80083ee:	d005      	beq.n	80083fc <HAL_I2C_IsDeviceReady+0x188>
 80083f0:	7dfb      	ldrb	r3, [r7, #23]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d102      	bne.n	80083fc <HAL_I2C_IsDeviceReady+0x188>
 80083f6:	7dbb      	ldrb	r3, [r7, #22]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d0cd      	beq.n	8008398 <HAL_I2C_IsDeviceReady+0x124>
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2220      	movs	r2, #32
 8008400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	695b      	ldr	r3, [r3, #20]
 800840a:	f003 0302 	and.w	r3, r3, #2
 800840e:	2b02      	cmp	r3, #2
 8008410:	d129      	bne.n	8008466 <HAL_I2C_IsDeviceReady+0x1f2>
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	681a      	ldr	r2, [r3, #0]
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008420:	601a      	str	r2, [r3, #0]
 8008422:	2300      	movs	r3, #0
 8008424:	613b      	str	r3, [r7, #16]
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	695b      	ldr	r3, [r3, #20]
 800842c:	613b      	str	r3, [r7, #16]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	699b      	ldr	r3, [r3, #24]
 8008434:	613b      	str	r3, [r7, #16]
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	69fb      	ldr	r3, [r7, #28]
 800843a:	9300      	str	r3, [sp, #0]
 800843c:	2319      	movs	r3, #25
 800843e:	2201      	movs	r2, #1
 8008440:	4921      	ldr	r1, [pc, #132]	; (80084c8 <HAL_I2C_IsDeviceReady+0x254>)
 8008442:	68f8      	ldr	r0, [r7, #12]
 8008444:	f000 f8c6 	bl	80085d4 <I2C_WaitOnFlagUntilTimeout>
 8008448:	4603      	mov	r3, r0
 800844a:	2b00      	cmp	r3, #0
 800844c:	d001      	beq.n	8008452 <HAL_I2C_IsDeviceReady+0x1de>
 800844e:	2301      	movs	r3, #1
 8008450:	e036      	b.n	80084c0 <HAL_I2C_IsDeviceReady+0x24c>
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2220      	movs	r2, #32
 8008456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2200      	movs	r2, #0
 800845e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008462:	2300      	movs	r3, #0
 8008464:	e02c      	b.n	80084c0 <HAL_I2C_IsDeviceReady+0x24c>
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008474:	601a      	str	r2, [r3, #0]
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800847e:	615a      	str	r2, [r3, #20]
 8008480:	69fb      	ldr	r3, [r7, #28]
 8008482:	9300      	str	r3, [sp, #0]
 8008484:	2319      	movs	r3, #25
 8008486:	2201      	movs	r2, #1
 8008488:	490f      	ldr	r1, [pc, #60]	; (80084c8 <HAL_I2C_IsDeviceReady+0x254>)
 800848a:	68f8      	ldr	r0, [r7, #12]
 800848c:	f000 f8a2 	bl	80085d4 <I2C_WaitOnFlagUntilTimeout>
 8008490:	4603      	mov	r3, r0
 8008492:	2b00      	cmp	r3, #0
 8008494:	d001      	beq.n	800849a <HAL_I2C_IsDeviceReady+0x226>
 8008496:	2301      	movs	r3, #1
 8008498:	e012      	b.n	80084c0 <HAL_I2C_IsDeviceReady+0x24c>
 800849a:	69bb      	ldr	r3, [r7, #24]
 800849c:	3301      	adds	r3, #1
 800849e:	61bb      	str	r3, [r7, #24]
 80084a0:	69ba      	ldr	r2, [r7, #24]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	429a      	cmp	r2, r3
 80084a6:	f4ff af32 	bcc.w	800830e <HAL_I2C_IsDeviceReady+0x9a>
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2220      	movs	r2, #32
 80084ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2200      	movs	r2, #0
 80084b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80084ba:	2301      	movs	r3, #1
 80084bc:	e000      	b.n	80084c0 <HAL_I2C_IsDeviceReady+0x24c>
 80084be:	2302      	movs	r3, #2
 80084c0:	4618      	mov	r0, r3
 80084c2:	3720      	adds	r7, #32
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}
 80084c8:	00100002 	.word	0x00100002
 80084cc:	ffff0000 	.word	0xffff0000

080084d0 <I2C_MasterRequestWrite>:
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b088      	sub	sp, #32
 80084d4:	af02      	add	r7, sp, #8
 80084d6:	60f8      	str	r0, [r7, #12]
 80084d8:	607a      	str	r2, [r7, #4]
 80084da:	603b      	str	r3, [r7, #0]
 80084dc:	460b      	mov	r3, r1
 80084de:	817b      	strh	r3, [r7, #10]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084e4:	617b      	str	r3, [r7, #20]
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	2b08      	cmp	r3, #8
 80084ea:	d006      	beq.n	80084fa <I2C_MasterRequestWrite+0x2a>
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	2b01      	cmp	r3, #1
 80084f0:	d003      	beq.n	80084fa <I2C_MasterRequestWrite+0x2a>
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80084f8:	d108      	bne.n	800850c <I2C_MasterRequestWrite+0x3c>
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008508:	601a      	str	r2, [r3, #0]
 800850a:	e00b      	b.n	8008524 <I2C_MasterRequestWrite+0x54>
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008510:	2b12      	cmp	r3, #18
 8008512:	d107      	bne.n	8008524 <I2C_MasterRequestWrite+0x54>
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	681a      	ldr	r2, [r3, #0]
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008522:	601a      	str	r2, [r3, #0]
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	9300      	str	r3, [sp, #0]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2200      	movs	r2, #0
 800852c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008530:	68f8      	ldr	r0, [r7, #12]
 8008532:	f000 f84f 	bl	80085d4 <I2C_WaitOnFlagUntilTimeout>
 8008536:	4603      	mov	r3, r0
 8008538:	2b00      	cmp	r3, #0
 800853a:	d00d      	beq.n	8008558 <I2C_MasterRequestWrite+0x88>
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800854a:	d103      	bne.n	8008554 <I2C_MasterRequestWrite+0x84>
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008552:	641a      	str	r2, [r3, #64]	; 0x40
 8008554:	2303      	movs	r3, #3
 8008556:	e035      	b.n	80085c4 <I2C_MasterRequestWrite+0xf4>
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	691b      	ldr	r3, [r3, #16]
 800855c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008560:	d108      	bne.n	8008574 <I2C_MasterRequestWrite+0xa4>
 8008562:	897b      	ldrh	r3, [r7, #10]
 8008564:	b2db      	uxtb	r3, r3
 8008566:	461a      	mov	r2, r3
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008570:	611a      	str	r2, [r3, #16]
 8008572:	e01b      	b.n	80085ac <I2C_MasterRequestWrite+0xdc>
 8008574:	897b      	ldrh	r3, [r7, #10]
 8008576:	11db      	asrs	r3, r3, #7
 8008578:	b2db      	uxtb	r3, r3
 800857a:	f003 0306 	and.w	r3, r3, #6
 800857e:	b2db      	uxtb	r3, r3
 8008580:	f063 030f 	orn	r3, r3, #15
 8008584:	b2da      	uxtb	r2, r3
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	611a      	str	r2, [r3, #16]
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	490e      	ldr	r1, [pc, #56]	; (80085cc <I2C_MasterRequestWrite+0xfc>)
 8008592:	68f8      	ldr	r0, [r7, #12]
 8008594:	f000 f875 	bl	8008682 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008598:	4603      	mov	r3, r0
 800859a:	2b00      	cmp	r3, #0
 800859c:	d001      	beq.n	80085a2 <I2C_MasterRequestWrite+0xd2>
 800859e:	2301      	movs	r3, #1
 80085a0:	e010      	b.n	80085c4 <I2C_MasterRequestWrite+0xf4>
 80085a2:	897b      	ldrh	r3, [r7, #10]
 80085a4:	b2da      	uxtb	r2, r3
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	611a      	str	r2, [r3, #16]
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	4907      	ldr	r1, [pc, #28]	; (80085d0 <I2C_MasterRequestWrite+0x100>)
 80085b2:	68f8      	ldr	r0, [r7, #12]
 80085b4:	f000 f865 	bl	8008682 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80085b8:	4603      	mov	r3, r0
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d001      	beq.n	80085c2 <I2C_MasterRequestWrite+0xf2>
 80085be:	2301      	movs	r3, #1
 80085c0:	e000      	b.n	80085c4 <I2C_MasterRequestWrite+0xf4>
 80085c2:	2300      	movs	r3, #0
 80085c4:	4618      	mov	r0, r3
 80085c6:	3718      	adds	r7, #24
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}
 80085cc:	00010008 	.word	0x00010008
 80085d0:	00010002 	.word	0x00010002

080085d4 <I2C_WaitOnFlagUntilTimeout>:
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
 80085da:	60f8      	str	r0, [r7, #12]
 80085dc:	60b9      	str	r1, [r7, #8]
 80085de:	603b      	str	r3, [r7, #0]
 80085e0:	4613      	mov	r3, r2
 80085e2:	71fb      	strb	r3, [r7, #7]
 80085e4:	e025      	b.n	8008632 <I2C_WaitOnFlagUntilTimeout+0x5e>
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ec:	d021      	beq.n	8008632 <I2C_WaitOnFlagUntilTimeout+0x5e>
 80085ee:	f7fd ff13 	bl	8006418 <HAL_GetTick>
 80085f2:	4602      	mov	r2, r0
 80085f4:	69bb      	ldr	r3, [r7, #24]
 80085f6:	1ad3      	subs	r3, r2, r3
 80085f8:	683a      	ldr	r2, [r7, #0]
 80085fa:	429a      	cmp	r2, r3
 80085fc:	d302      	bcc.n	8008604 <I2C_WaitOnFlagUntilTimeout+0x30>
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d116      	bne.n	8008632 <I2C_WaitOnFlagUntilTimeout+0x5e>
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2200      	movs	r2, #0
 8008608:	631a      	str	r2, [r3, #48]	; 0x30
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2220      	movs	r2, #32
 800860e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2200      	movs	r2, #0
 8008616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800861e:	f043 0220 	orr.w	r2, r3, #32
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	641a      	str	r2, [r3, #64]	; 0x40
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2200      	movs	r2, #0
 800862a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800862e:	2301      	movs	r3, #1
 8008630:	e023      	b.n	800867a <I2C_WaitOnFlagUntilTimeout+0xa6>
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	0c1b      	lsrs	r3, r3, #16
 8008636:	b2db      	uxtb	r3, r3
 8008638:	2b01      	cmp	r3, #1
 800863a:	d10d      	bne.n	8008658 <I2C_WaitOnFlagUntilTimeout+0x84>
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	695b      	ldr	r3, [r3, #20]
 8008642:	43da      	mvns	r2, r3
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	4013      	ands	r3, r2
 8008648:	b29b      	uxth	r3, r3
 800864a:	2b00      	cmp	r3, #0
 800864c:	bf0c      	ite	eq
 800864e:	2301      	moveq	r3, #1
 8008650:	2300      	movne	r3, #0
 8008652:	b2db      	uxtb	r3, r3
 8008654:	461a      	mov	r2, r3
 8008656:	e00c      	b.n	8008672 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	699b      	ldr	r3, [r3, #24]
 800865e:	43da      	mvns	r2, r3
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	4013      	ands	r3, r2
 8008664:	b29b      	uxth	r3, r3
 8008666:	2b00      	cmp	r3, #0
 8008668:	bf0c      	ite	eq
 800866a:	2301      	moveq	r3, #1
 800866c:	2300      	movne	r3, #0
 800866e:	b2db      	uxtb	r3, r3
 8008670:	461a      	mov	r2, r3
 8008672:	79fb      	ldrb	r3, [r7, #7]
 8008674:	429a      	cmp	r2, r3
 8008676:	d0b6      	beq.n	80085e6 <I2C_WaitOnFlagUntilTimeout+0x12>
 8008678:	2300      	movs	r3, #0
 800867a:	4618      	mov	r0, r3
 800867c:	3710      	adds	r7, #16
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}

08008682 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 8008682:	b580      	push	{r7, lr}
 8008684:	b084      	sub	sp, #16
 8008686:	af00      	add	r7, sp, #0
 8008688:	60f8      	str	r0, [r7, #12]
 800868a:	60b9      	str	r1, [r7, #8]
 800868c:	607a      	str	r2, [r7, #4]
 800868e:	603b      	str	r3, [r7, #0]
 8008690:	e051      	b.n	8008736 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	695b      	ldr	r3, [r3, #20]
 8008698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800869c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086a0:	d123      	bne.n	80086ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	681a      	ldr	r2, [r3, #0]
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086b0:	601a      	str	r2, [r3, #0]
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80086ba:	615a      	str	r2, [r3, #20]
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2200      	movs	r2, #0
 80086c0:	631a      	str	r2, [r3, #48]	; 0x30
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2220      	movs	r2, #32
 80086c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2200      	movs	r2, #0
 80086ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086d6:	f043 0204 	orr.w	r2, r3, #4
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	641a      	str	r2, [r3, #64]	; 0x40
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2200      	movs	r2, #0
 80086e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80086e6:	2301      	movs	r3, #1
 80086e8:	e046      	b.n	8008778 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086f0:	d021      	beq.n	8008736 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 80086f2:	f7fd fe91 	bl	8006418 <HAL_GetTick>
 80086f6:	4602      	mov	r2, r0
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	1ad3      	subs	r3, r2, r3
 80086fc:	687a      	ldr	r2, [r7, #4]
 80086fe:	429a      	cmp	r2, r3
 8008700:	d302      	bcc.n	8008708 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d116      	bne.n	8008736 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2200      	movs	r2, #0
 800870c:	631a      	str	r2, [r3, #48]	; 0x30
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2220      	movs	r2, #32
 8008712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2200      	movs	r2, #0
 800871a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008722:	f043 0220 	orr.w	r2, r3, #32
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	641a      	str	r2, [r3, #64]	; 0x40
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2200      	movs	r2, #0
 800872e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008732:	2301      	movs	r3, #1
 8008734:	e020      	b.n	8008778 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	0c1b      	lsrs	r3, r3, #16
 800873a:	b2db      	uxtb	r3, r3
 800873c:	2b01      	cmp	r3, #1
 800873e:	d10c      	bne.n	800875a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	695b      	ldr	r3, [r3, #20]
 8008746:	43da      	mvns	r2, r3
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	4013      	ands	r3, r2
 800874c:	b29b      	uxth	r3, r3
 800874e:	2b00      	cmp	r3, #0
 8008750:	bf14      	ite	ne
 8008752:	2301      	movne	r3, #1
 8008754:	2300      	moveq	r3, #0
 8008756:	b2db      	uxtb	r3, r3
 8008758:	e00b      	b.n	8008772 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	699b      	ldr	r3, [r3, #24]
 8008760:	43da      	mvns	r2, r3
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	4013      	ands	r3, r2
 8008766:	b29b      	uxth	r3, r3
 8008768:	2b00      	cmp	r3, #0
 800876a:	bf14      	ite	ne
 800876c:	2301      	movne	r3, #1
 800876e:	2300      	moveq	r3, #0
 8008770:	b2db      	uxtb	r3, r3
 8008772:	2b00      	cmp	r3, #0
 8008774:	d18d      	bne.n	8008692 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8008776:	2300      	movs	r3, #0
 8008778:	4618      	mov	r0, r3
 800877a:	3710      	adds	r7, #16
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <I2C_WaitOnTXEFlagUntilTimeout>:
 8008780:	b580      	push	{r7, lr}
 8008782:	b084      	sub	sp, #16
 8008784:	af00      	add	r7, sp, #0
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	60b9      	str	r1, [r7, #8]
 800878a:	607a      	str	r2, [r7, #4]
 800878c:	e02d      	b.n	80087ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 800878e:	68f8      	ldr	r0, [r7, #12]
 8008790:	f000 f878 	bl	8008884 <I2C_IsAcknowledgeFailed>
 8008794:	4603      	mov	r3, r0
 8008796:	2b00      	cmp	r3, #0
 8008798:	d001      	beq.n	800879e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
 800879a:	2301      	movs	r3, #1
 800879c:	e02d      	b.n	80087fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087a4:	d021      	beq.n	80087ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 80087a6:	f7fd fe37 	bl	8006418 <HAL_GetTick>
 80087aa:	4602      	mov	r2, r0
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	1ad3      	subs	r3, r2, r3
 80087b0:	68ba      	ldr	r2, [r7, #8]
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d302      	bcc.n	80087bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d116      	bne.n	80087ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2200      	movs	r2, #0
 80087c0:	631a      	str	r2, [r3, #48]	; 0x30
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2220      	movs	r2, #32
 80087c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2200      	movs	r2, #0
 80087ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087d6:	f043 0220 	orr.w	r2, r3, #32
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	641a      	str	r2, [r3, #64]	; 0x40
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2200      	movs	r2, #0
 80087e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80087e6:	2301      	movs	r3, #1
 80087e8:	e007      	b.n	80087fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	695b      	ldr	r3, [r3, #20]
 80087f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087f4:	2b80      	cmp	r3, #128	; 0x80
 80087f6:	d1ca      	bne.n	800878e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
 80087f8:	2300      	movs	r3, #0
 80087fa:	4618      	mov	r0, r3
 80087fc:	3710      	adds	r7, #16
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}

08008802 <I2C_WaitOnBTFFlagUntilTimeout>:
 8008802:	b580      	push	{r7, lr}
 8008804:	b084      	sub	sp, #16
 8008806:	af00      	add	r7, sp, #0
 8008808:	60f8      	str	r0, [r7, #12]
 800880a:	60b9      	str	r1, [r7, #8]
 800880c:	607a      	str	r2, [r7, #4]
 800880e:	e02d      	b.n	800886c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8008810:	68f8      	ldr	r0, [r7, #12]
 8008812:	f000 f837 	bl	8008884 <I2C_IsAcknowledgeFailed>
 8008816:	4603      	mov	r3, r0
 8008818:	2b00      	cmp	r3, #0
 800881a:	d001      	beq.n	8008820 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
 800881c:	2301      	movs	r3, #1
 800881e:	e02d      	b.n	800887c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008826:	d021      	beq.n	800886c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8008828:	f7fd fdf6 	bl	8006418 <HAL_GetTick>
 800882c:	4602      	mov	r2, r0
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	1ad3      	subs	r3, r2, r3
 8008832:	68ba      	ldr	r2, [r7, #8]
 8008834:	429a      	cmp	r2, r3
 8008836:	d302      	bcc.n	800883e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d116      	bne.n	800886c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2200      	movs	r2, #0
 8008842:	631a      	str	r2, [r3, #48]	; 0x30
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2220      	movs	r2, #32
 8008848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2200      	movs	r2, #0
 8008850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008858:	f043 0220 	orr.w	r2, r3, #32
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	641a      	str	r2, [r3, #64]	; 0x40
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2200      	movs	r2, #0
 8008864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008868:	2301      	movs	r3, #1
 800886a:	e007      	b.n	800887c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	695b      	ldr	r3, [r3, #20]
 8008872:	f003 0304 	and.w	r3, r3, #4
 8008876:	2b04      	cmp	r3, #4
 8008878:	d1ca      	bne.n	8008810 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
 800887a:	2300      	movs	r3, #0
 800887c:	4618      	mov	r0, r3
 800887e:	3710      	adds	r7, #16
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <I2C_IsAcknowledgeFailed>:
 8008884:	b480      	push	{r7}
 8008886:	b083      	sub	sp, #12
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	695b      	ldr	r3, [r3, #20]
 8008892:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008896:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800889a:	d11b      	bne.n	80088d4 <I2C_IsAcknowledgeFailed+0x50>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80088a4:	615a      	str	r2, [r3, #20]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2200      	movs	r2, #0
 80088aa:	631a      	str	r2, [r3, #48]	; 0x30
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2220      	movs	r2, #32
 80088b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2200      	movs	r2, #0
 80088b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088c0:	f043 0204 	orr.w	r2, r3, #4
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	641a      	str	r2, [r3, #64]	; 0x40
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2200      	movs	r2, #0
 80088cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80088d0:	2301      	movs	r3, #1
 80088d2:	e000      	b.n	80088d6 <I2C_IsAcknowledgeFailed+0x52>
 80088d4:	2300      	movs	r3, #0
 80088d6:	4618      	mov	r0, r3
 80088d8:	370c      	adds	r7, #12
 80088da:	46bd      	mov	sp, r7
 80088dc:	bc80      	pop	{r7}
 80088de:	4770      	bx	lr

080088e0 <HAL_RCC_OscConfig>:
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b086      	sub	sp, #24
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d101      	bne.n	80088f2 <HAL_RCC_OscConfig+0x12>
 80088ee:	2301      	movs	r3, #1
 80088f0:	e272      	b.n	8008dd8 <HAL_RCC_OscConfig+0x4f8>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f003 0301 	and.w	r3, r3, #1
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	f000 8087 	beq.w	8008a0e <HAL_RCC_OscConfig+0x12e>
 8008900:	4b92      	ldr	r3, [pc, #584]	; (8008b4c <HAL_RCC_OscConfig+0x26c>)
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	f003 030c 	and.w	r3, r3, #12
 8008908:	2b04      	cmp	r3, #4
 800890a:	d00c      	beq.n	8008926 <HAL_RCC_OscConfig+0x46>
 800890c:	4b8f      	ldr	r3, [pc, #572]	; (8008b4c <HAL_RCC_OscConfig+0x26c>)
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	f003 030c 	and.w	r3, r3, #12
 8008914:	2b08      	cmp	r3, #8
 8008916:	d112      	bne.n	800893e <HAL_RCC_OscConfig+0x5e>
 8008918:	4b8c      	ldr	r3, [pc, #560]	; (8008b4c <HAL_RCC_OscConfig+0x26c>)
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008924:	d10b      	bne.n	800893e <HAL_RCC_OscConfig+0x5e>
 8008926:	4b89      	ldr	r3, [pc, #548]	; (8008b4c <HAL_RCC_OscConfig+0x26c>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800892e:	2b00      	cmp	r3, #0
 8008930:	d06c      	beq.n	8008a0c <HAL_RCC_OscConfig+0x12c>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	685b      	ldr	r3, [r3, #4]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d168      	bne.n	8008a0c <HAL_RCC_OscConfig+0x12c>
 800893a:	2301      	movs	r3, #1
 800893c:	e24c      	b.n	8008dd8 <HAL_RCC_OscConfig+0x4f8>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008946:	d106      	bne.n	8008956 <HAL_RCC_OscConfig+0x76>
 8008948:	4b80      	ldr	r3, [pc, #512]	; (8008b4c <HAL_RCC_OscConfig+0x26c>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a7f      	ldr	r2, [pc, #508]	; (8008b4c <HAL_RCC_OscConfig+0x26c>)
 800894e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008952:	6013      	str	r3, [r2, #0]
 8008954:	e02e      	b.n	80089b4 <HAL_RCC_OscConfig+0xd4>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d10c      	bne.n	8008978 <HAL_RCC_OscConfig+0x98>
 800895e:	4b7b      	ldr	r3, [pc, #492]	; (8008b4c <HAL_RCC_OscConfig+0x26c>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a7a      	ldr	r2, [pc, #488]	; (8008b4c <HAL_RCC_OscConfig+0x26c>)
 8008964:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008968:	6013      	str	r3, [r2, #0]
 800896a:	4b78      	ldr	r3, [pc, #480]	; (8008b4c <HAL_RCC_OscConfig+0x26c>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a77      	ldr	r2, [pc, #476]	; (8008b4c <HAL_RCC_OscConfig+0x26c>)
 8008970:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008974:	6013      	str	r3, [r2, #0]
 8008976:	e01d      	b.n	80089b4 <HAL_RCC_OscConfig+0xd4>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008980:	d10c      	bne.n	800899c <HAL_RCC_OscConfig+0xbc>
 8008982:	4b72      	ldr	r3, [pc, #456]	; (8008b4c <HAL_RCC_OscConfig+0x26c>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4a71      	ldr	r2, [pc, #452]	; (8008b4c <HAL_RCC_OscConfig+0x26c>)
 8008988:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800898c:	6013      	str	r3, [r2, #0]
 800898e:	4b6f      	ldr	r3, [pc, #444]	; (8008b4c <HAL_RCC_OscConfig+0x26c>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a6e      	ldr	r2, [pc, #440]	; (8008b4c <HAL_RCC_OscConfig+0x26c>)
 8008994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008998:	6013      	str	r3, [r2, #0]
 800899a:	e00b      	b.n	80089b4 <HAL_RCC_OscConfig+0xd4>
 800899c:	4b6b      	ldr	r3, [pc, #428]	; (8008b4c <HAL_RCC_OscConfig+0x26c>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a6a      	ldr	r2, [pc, #424]	; (8008b4c <HAL_RCC_OscConfig+0x26c>)
 80089a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80089a6:	6013      	str	r3, [r2, #0]
 80089a8:	4b68      	ldr	r3, [pc, #416]	; (8008b4c <HAL_RCC_OscConfig+0x26c>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a67      	ldr	r2, [pc, #412]	; (8008b4c <HAL_RCC_OscConfig+0x26c>)
 80089ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80089b2:	6013      	str	r3, [r2, #0]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d013      	beq.n	80089e4 <HAL_RCC_OscConfig+0x104>
 80089bc:	f7fd fd2c 	bl	8006418 <HAL_GetTick>
 80089c0:	6138      	str	r0, [r7, #16]
 80089c2:	e008      	b.n	80089d6 <HAL_RCC_OscConfig+0xf6>
 80089c4:	f7fd fd28 	bl	8006418 <HAL_GetTick>
 80089c8:	4602      	mov	r2, r0
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	1ad3      	subs	r3, r2, r3
 80089ce:	2b64      	cmp	r3, #100	; 0x64
 80089d0:	d901      	bls.n	80089d6 <HAL_RCC_OscConfig+0xf6>
 80089d2:	2303      	movs	r3, #3
 80089d4:	e200      	b.n	8008dd8 <HAL_RCC_OscConfig+0x4f8>
 80089d6:	4b5d      	ldr	r3, [pc, #372]	; (8008b4c <HAL_RCC_OscConfig+0x26c>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d0f0      	beq.n	80089c4 <HAL_RCC_OscConfig+0xe4>
 80089e2:	e014      	b.n	8008a0e <HAL_RCC_OscConfig+0x12e>
 80089e4:	f7fd fd18 	bl	8006418 <HAL_GetTick>
 80089e8:	6138      	str	r0, [r7, #16]
 80089ea:	e008      	b.n	80089fe <HAL_RCC_OscConfig+0x11e>
 80089ec:	f7fd fd14 	bl	8006418 <HAL_GetTick>
 80089f0:	4602      	mov	r2, r0
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	1ad3      	subs	r3, r2, r3
 80089f6:	2b64      	cmp	r3, #100	; 0x64
 80089f8:	d901      	bls.n	80089fe <HAL_RCC_OscConfig+0x11e>
 80089fa:	2303      	movs	r3, #3
 80089fc:	e1ec      	b.n	8008dd8 <HAL_RCC_OscConfig+0x4f8>
 80089fe:	4b53      	ldr	r3, [pc, #332]	; (8008b4c <HAL_RCC_OscConfig+0x26c>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d1f0      	bne.n	80089ec <HAL_RCC_OscConfig+0x10c>
 8008a0a:	e000      	b.n	8008a0e <HAL_RCC_OscConfig+0x12e>
 8008a0c:	bf00      	nop
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f003 0302 	and.w	r3, r3, #2
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d063      	beq.n	8008ae2 <HAL_RCC_OscConfig+0x202>
 8008a1a:	4b4c      	ldr	r3, [pc, #304]	; (8008b4c <HAL_RCC_OscConfig+0x26c>)
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	f003 030c 	and.w	r3, r3, #12
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d00b      	beq.n	8008a3e <HAL_RCC_OscConfig+0x15e>
 8008a26:	4b49      	ldr	r3, [pc, #292]	; (8008b4c <HAL_RCC_OscConfig+0x26c>)
 8008a28:	685b      	ldr	r3, [r3, #4]
 8008a2a:	f003 030c 	and.w	r3, r3, #12
 8008a2e:	2b08      	cmp	r3, #8
 8008a30:	d11c      	bne.n	8008a6c <HAL_RCC_OscConfig+0x18c>
 8008a32:	4b46      	ldr	r3, [pc, #280]	; (8008b4c <HAL_RCC_OscConfig+0x26c>)
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d116      	bne.n	8008a6c <HAL_RCC_OscConfig+0x18c>
 8008a3e:	4b43      	ldr	r3, [pc, #268]	; (8008b4c <HAL_RCC_OscConfig+0x26c>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f003 0302 	and.w	r3, r3, #2
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d005      	beq.n	8008a56 <HAL_RCC_OscConfig+0x176>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	691b      	ldr	r3, [r3, #16]
 8008a4e:	2b01      	cmp	r3, #1
 8008a50:	d001      	beq.n	8008a56 <HAL_RCC_OscConfig+0x176>
 8008a52:	2301      	movs	r3, #1
 8008a54:	e1c0      	b.n	8008dd8 <HAL_RCC_OscConfig+0x4f8>
 8008a56:	4b3d      	ldr	r3, [pc, #244]	; (8008b4c <HAL_RCC_OscConfig+0x26c>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	695b      	ldr	r3, [r3, #20]
 8008a62:	00db      	lsls	r3, r3, #3
 8008a64:	4939      	ldr	r1, [pc, #228]	; (8008b4c <HAL_RCC_OscConfig+0x26c>)
 8008a66:	4313      	orrs	r3, r2
 8008a68:	600b      	str	r3, [r1, #0]
 8008a6a:	e03a      	b.n	8008ae2 <HAL_RCC_OscConfig+0x202>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	691b      	ldr	r3, [r3, #16]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d020      	beq.n	8008ab6 <HAL_RCC_OscConfig+0x1d6>
 8008a74:	4b36      	ldr	r3, [pc, #216]	; (8008b50 <HAL_RCC_OscConfig+0x270>)
 8008a76:	2201      	movs	r2, #1
 8008a78:	601a      	str	r2, [r3, #0]
 8008a7a:	f7fd fccd 	bl	8006418 <HAL_GetTick>
 8008a7e:	6138      	str	r0, [r7, #16]
 8008a80:	e008      	b.n	8008a94 <HAL_RCC_OscConfig+0x1b4>
 8008a82:	f7fd fcc9 	bl	8006418 <HAL_GetTick>
 8008a86:	4602      	mov	r2, r0
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	1ad3      	subs	r3, r2, r3
 8008a8c:	2b02      	cmp	r3, #2
 8008a8e:	d901      	bls.n	8008a94 <HAL_RCC_OscConfig+0x1b4>
 8008a90:	2303      	movs	r3, #3
 8008a92:	e1a1      	b.n	8008dd8 <HAL_RCC_OscConfig+0x4f8>
 8008a94:	4b2d      	ldr	r3, [pc, #180]	; (8008b4c <HAL_RCC_OscConfig+0x26c>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f003 0302 	and.w	r3, r3, #2
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d0f0      	beq.n	8008a82 <HAL_RCC_OscConfig+0x1a2>
 8008aa0:	4b2a      	ldr	r3, [pc, #168]	; (8008b4c <HAL_RCC_OscConfig+0x26c>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	695b      	ldr	r3, [r3, #20]
 8008aac:	00db      	lsls	r3, r3, #3
 8008aae:	4927      	ldr	r1, [pc, #156]	; (8008b4c <HAL_RCC_OscConfig+0x26c>)
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	600b      	str	r3, [r1, #0]
 8008ab4:	e015      	b.n	8008ae2 <HAL_RCC_OscConfig+0x202>
 8008ab6:	4b26      	ldr	r3, [pc, #152]	; (8008b50 <HAL_RCC_OscConfig+0x270>)
 8008ab8:	2200      	movs	r2, #0
 8008aba:	601a      	str	r2, [r3, #0]
 8008abc:	f7fd fcac 	bl	8006418 <HAL_GetTick>
 8008ac0:	6138      	str	r0, [r7, #16]
 8008ac2:	e008      	b.n	8008ad6 <HAL_RCC_OscConfig+0x1f6>
 8008ac4:	f7fd fca8 	bl	8006418 <HAL_GetTick>
 8008ac8:	4602      	mov	r2, r0
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	1ad3      	subs	r3, r2, r3
 8008ace:	2b02      	cmp	r3, #2
 8008ad0:	d901      	bls.n	8008ad6 <HAL_RCC_OscConfig+0x1f6>
 8008ad2:	2303      	movs	r3, #3
 8008ad4:	e180      	b.n	8008dd8 <HAL_RCC_OscConfig+0x4f8>
 8008ad6:	4b1d      	ldr	r3, [pc, #116]	; (8008b4c <HAL_RCC_OscConfig+0x26c>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f003 0302 	and.w	r3, r3, #2
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d1f0      	bne.n	8008ac4 <HAL_RCC_OscConfig+0x1e4>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f003 0308 	and.w	r3, r3, #8
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d03a      	beq.n	8008b64 <HAL_RCC_OscConfig+0x284>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	699b      	ldr	r3, [r3, #24]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d019      	beq.n	8008b2a <HAL_RCC_OscConfig+0x24a>
 8008af6:	4b17      	ldr	r3, [pc, #92]	; (8008b54 <HAL_RCC_OscConfig+0x274>)
 8008af8:	2201      	movs	r2, #1
 8008afa:	601a      	str	r2, [r3, #0]
 8008afc:	f7fd fc8c 	bl	8006418 <HAL_GetTick>
 8008b00:	6138      	str	r0, [r7, #16]
 8008b02:	e008      	b.n	8008b16 <HAL_RCC_OscConfig+0x236>
 8008b04:	f7fd fc88 	bl	8006418 <HAL_GetTick>
 8008b08:	4602      	mov	r2, r0
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	1ad3      	subs	r3, r2, r3
 8008b0e:	2b02      	cmp	r3, #2
 8008b10:	d901      	bls.n	8008b16 <HAL_RCC_OscConfig+0x236>
 8008b12:	2303      	movs	r3, #3
 8008b14:	e160      	b.n	8008dd8 <HAL_RCC_OscConfig+0x4f8>
 8008b16:	4b0d      	ldr	r3, [pc, #52]	; (8008b4c <HAL_RCC_OscConfig+0x26c>)
 8008b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b1a:	f003 0302 	and.w	r3, r3, #2
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d0f0      	beq.n	8008b04 <HAL_RCC_OscConfig+0x224>
 8008b22:	2001      	movs	r0, #1
 8008b24:	f000 fac4 	bl	80090b0 <RCC_Delay>
 8008b28:	e01c      	b.n	8008b64 <HAL_RCC_OscConfig+0x284>
 8008b2a:	4b0a      	ldr	r3, [pc, #40]	; (8008b54 <HAL_RCC_OscConfig+0x274>)
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	601a      	str	r2, [r3, #0]
 8008b30:	f7fd fc72 	bl	8006418 <HAL_GetTick>
 8008b34:	6138      	str	r0, [r7, #16]
 8008b36:	e00f      	b.n	8008b58 <HAL_RCC_OscConfig+0x278>
 8008b38:	f7fd fc6e 	bl	8006418 <HAL_GetTick>
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	1ad3      	subs	r3, r2, r3
 8008b42:	2b02      	cmp	r3, #2
 8008b44:	d908      	bls.n	8008b58 <HAL_RCC_OscConfig+0x278>
 8008b46:	2303      	movs	r3, #3
 8008b48:	e146      	b.n	8008dd8 <HAL_RCC_OscConfig+0x4f8>
 8008b4a:	bf00      	nop
 8008b4c:	40021000 	.word	0x40021000
 8008b50:	42420000 	.word	0x42420000
 8008b54:	42420480 	.word	0x42420480
 8008b58:	4b92      	ldr	r3, [pc, #584]	; (8008da4 <HAL_RCC_OscConfig+0x4c4>)
 8008b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b5c:	f003 0302 	and.w	r3, r3, #2
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d1e9      	bne.n	8008b38 <HAL_RCC_OscConfig+0x258>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f003 0304 	and.w	r3, r3, #4
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	f000 80a6 	beq.w	8008cbe <HAL_RCC_OscConfig+0x3de>
 8008b72:	2300      	movs	r3, #0
 8008b74:	75fb      	strb	r3, [r7, #23]
 8008b76:	4b8b      	ldr	r3, [pc, #556]	; (8008da4 <HAL_RCC_OscConfig+0x4c4>)
 8008b78:	69db      	ldr	r3, [r3, #28]
 8008b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d10d      	bne.n	8008b9e <HAL_RCC_OscConfig+0x2be>
 8008b82:	4b88      	ldr	r3, [pc, #544]	; (8008da4 <HAL_RCC_OscConfig+0x4c4>)
 8008b84:	69db      	ldr	r3, [r3, #28]
 8008b86:	4a87      	ldr	r2, [pc, #540]	; (8008da4 <HAL_RCC_OscConfig+0x4c4>)
 8008b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b8c:	61d3      	str	r3, [r2, #28]
 8008b8e:	4b85      	ldr	r3, [pc, #532]	; (8008da4 <HAL_RCC_OscConfig+0x4c4>)
 8008b90:	69db      	ldr	r3, [r3, #28]
 8008b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b96:	60bb      	str	r3, [r7, #8]
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	75fb      	strb	r3, [r7, #23]
 8008b9e:	4b82      	ldr	r3, [pc, #520]	; (8008da8 <HAL_RCC_OscConfig+0x4c8>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d118      	bne.n	8008bdc <HAL_RCC_OscConfig+0x2fc>
 8008baa:	4b7f      	ldr	r3, [pc, #508]	; (8008da8 <HAL_RCC_OscConfig+0x4c8>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4a7e      	ldr	r2, [pc, #504]	; (8008da8 <HAL_RCC_OscConfig+0x4c8>)
 8008bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008bb4:	6013      	str	r3, [r2, #0]
 8008bb6:	f7fd fc2f 	bl	8006418 <HAL_GetTick>
 8008bba:	6138      	str	r0, [r7, #16]
 8008bbc:	e008      	b.n	8008bd0 <HAL_RCC_OscConfig+0x2f0>
 8008bbe:	f7fd fc2b 	bl	8006418 <HAL_GetTick>
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	1ad3      	subs	r3, r2, r3
 8008bc8:	2b64      	cmp	r3, #100	; 0x64
 8008bca:	d901      	bls.n	8008bd0 <HAL_RCC_OscConfig+0x2f0>
 8008bcc:	2303      	movs	r3, #3
 8008bce:	e103      	b.n	8008dd8 <HAL_RCC_OscConfig+0x4f8>
 8008bd0:	4b75      	ldr	r3, [pc, #468]	; (8008da8 <HAL_RCC_OscConfig+0x4c8>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d0f0      	beq.n	8008bbe <HAL_RCC_OscConfig+0x2de>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	68db      	ldr	r3, [r3, #12]
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	d106      	bne.n	8008bf2 <HAL_RCC_OscConfig+0x312>
 8008be4:	4b6f      	ldr	r3, [pc, #444]	; (8008da4 <HAL_RCC_OscConfig+0x4c4>)
 8008be6:	6a1b      	ldr	r3, [r3, #32]
 8008be8:	4a6e      	ldr	r2, [pc, #440]	; (8008da4 <HAL_RCC_OscConfig+0x4c4>)
 8008bea:	f043 0301 	orr.w	r3, r3, #1
 8008bee:	6213      	str	r3, [r2, #32]
 8008bf0:	e02d      	b.n	8008c4e <HAL_RCC_OscConfig+0x36e>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	68db      	ldr	r3, [r3, #12]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d10c      	bne.n	8008c14 <HAL_RCC_OscConfig+0x334>
 8008bfa:	4b6a      	ldr	r3, [pc, #424]	; (8008da4 <HAL_RCC_OscConfig+0x4c4>)
 8008bfc:	6a1b      	ldr	r3, [r3, #32]
 8008bfe:	4a69      	ldr	r2, [pc, #420]	; (8008da4 <HAL_RCC_OscConfig+0x4c4>)
 8008c00:	f023 0301 	bic.w	r3, r3, #1
 8008c04:	6213      	str	r3, [r2, #32]
 8008c06:	4b67      	ldr	r3, [pc, #412]	; (8008da4 <HAL_RCC_OscConfig+0x4c4>)
 8008c08:	6a1b      	ldr	r3, [r3, #32]
 8008c0a:	4a66      	ldr	r2, [pc, #408]	; (8008da4 <HAL_RCC_OscConfig+0x4c4>)
 8008c0c:	f023 0304 	bic.w	r3, r3, #4
 8008c10:	6213      	str	r3, [r2, #32]
 8008c12:	e01c      	b.n	8008c4e <HAL_RCC_OscConfig+0x36e>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	68db      	ldr	r3, [r3, #12]
 8008c18:	2b05      	cmp	r3, #5
 8008c1a:	d10c      	bne.n	8008c36 <HAL_RCC_OscConfig+0x356>
 8008c1c:	4b61      	ldr	r3, [pc, #388]	; (8008da4 <HAL_RCC_OscConfig+0x4c4>)
 8008c1e:	6a1b      	ldr	r3, [r3, #32]
 8008c20:	4a60      	ldr	r2, [pc, #384]	; (8008da4 <HAL_RCC_OscConfig+0x4c4>)
 8008c22:	f043 0304 	orr.w	r3, r3, #4
 8008c26:	6213      	str	r3, [r2, #32]
 8008c28:	4b5e      	ldr	r3, [pc, #376]	; (8008da4 <HAL_RCC_OscConfig+0x4c4>)
 8008c2a:	6a1b      	ldr	r3, [r3, #32]
 8008c2c:	4a5d      	ldr	r2, [pc, #372]	; (8008da4 <HAL_RCC_OscConfig+0x4c4>)
 8008c2e:	f043 0301 	orr.w	r3, r3, #1
 8008c32:	6213      	str	r3, [r2, #32]
 8008c34:	e00b      	b.n	8008c4e <HAL_RCC_OscConfig+0x36e>
 8008c36:	4b5b      	ldr	r3, [pc, #364]	; (8008da4 <HAL_RCC_OscConfig+0x4c4>)
 8008c38:	6a1b      	ldr	r3, [r3, #32]
 8008c3a:	4a5a      	ldr	r2, [pc, #360]	; (8008da4 <HAL_RCC_OscConfig+0x4c4>)
 8008c3c:	f023 0301 	bic.w	r3, r3, #1
 8008c40:	6213      	str	r3, [r2, #32]
 8008c42:	4b58      	ldr	r3, [pc, #352]	; (8008da4 <HAL_RCC_OscConfig+0x4c4>)
 8008c44:	6a1b      	ldr	r3, [r3, #32]
 8008c46:	4a57      	ldr	r2, [pc, #348]	; (8008da4 <HAL_RCC_OscConfig+0x4c4>)
 8008c48:	f023 0304 	bic.w	r3, r3, #4
 8008c4c:	6213      	str	r3, [r2, #32]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	68db      	ldr	r3, [r3, #12]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d015      	beq.n	8008c82 <HAL_RCC_OscConfig+0x3a2>
 8008c56:	f7fd fbdf 	bl	8006418 <HAL_GetTick>
 8008c5a:	6138      	str	r0, [r7, #16]
 8008c5c:	e00a      	b.n	8008c74 <HAL_RCC_OscConfig+0x394>
 8008c5e:	f7fd fbdb 	bl	8006418 <HAL_GetTick>
 8008c62:	4602      	mov	r2, r0
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	1ad3      	subs	r3, r2, r3
 8008c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d901      	bls.n	8008c74 <HAL_RCC_OscConfig+0x394>
 8008c70:	2303      	movs	r3, #3
 8008c72:	e0b1      	b.n	8008dd8 <HAL_RCC_OscConfig+0x4f8>
 8008c74:	4b4b      	ldr	r3, [pc, #300]	; (8008da4 <HAL_RCC_OscConfig+0x4c4>)
 8008c76:	6a1b      	ldr	r3, [r3, #32]
 8008c78:	f003 0302 	and.w	r3, r3, #2
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d0ee      	beq.n	8008c5e <HAL_RCC_OscConfig+0x37e>
 8008c80:	e014      	b.n	8008cac <HAL_RCC_OscConfig+0x3cc>
 8008c82:	f7fd fbc9 	bl	8006418 <HAL_GetTick>
 8008c86:	6138      	str	r0, [r7, #16]
 8008c88:	e00a      	b.n	8008ca0 <HAL_RCC_OscConfig+0x3c0>
 8008c8a:	f7fd fbc5 	bl	8006418 <HAL_GetTick>
 8008c8e:	4602      	mov	r2, r0
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	1ad3      	subs	r3, r2, r3
 8008c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d901      	bls.n	8008ca0 <HAL_RCC_OscConfig+0x3c0>
 8008c9c:	2303      	movs	r3, #3
 8008c9e:	e09b      	b.n	8008dd8 <HAL_RCC_OscConfig+0x4f8>
 8008ca0:	4b40      	ldr	r3, [pc, #256]	; (8008da4 <HAL_RCC_OscConfig+0x4c4>)
 8008ca2:	6a1b      	ldr	r3, [r3, #32]
 8008ca4:	f003 0302 	and.w	r3, r3, #2
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d1ee      	bne.n	8008c8a <HAL_RCC_OscConfig+0x3aa>
 8008cac:	7dfb      	ldrb	r3, [r7, #23]
 8008cae:	2b01      	cmp	r3, #1
 8008cb0:	d105      	bne.n	8008cbe <HAL_RCC_OscConfig+0x3de>
 8008cb2:	4b3c      	ldr	r3, [pc, #240]	; (8008da4 <HAL_RCC_OscConfig+0x4c4>)
 8008cb4:	69db      	ldr	r3, [r3, #28]
 8008cb6:	4a3b      	ldr	r2, [pc, #236]	; (8008da4 <HAL_RCC_OscConfig+0x4c4>)
 8008cb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008cbc:	61d3      	str	r3, [r2, #28]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	69db      	ldr	r3, [r3, #28]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	f000 8087 	beq.w	8008dd6 <HAL_RCC_OscConfig+0x4f6>
 8008cc8:	4b36      	ldr	r3, [pc, #216]	; (8008da4 <HAL_RCC_OscConfig+0x4c4>)
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	f003 030c 	and.w	r3, r3, #12
 8008cd0:	2b08      	cmp	r3, #8
 8008cd2:	d061      	beq.n	8008d98 <HAL_RCC_OscConfig+0x4b8>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	69db      	ldr	r3, [r3, #28]
 8008cd8:	2b02      	cmp	r3, #2
 8008cda:	d146      	bne.n	8008d6a <HAL_RCC_OscConfig+0x48a>
 8008cdc:	4b33      	ldr	r3, [pc, #204]	; (8008dac <HAL_RCC_OscConfig+0x4cc>)
 8008cde:	2200      	movs	r2, #0
 8008ce0:	601a      	str	r2, [r3, #0]
 8008ce2:	f7fd fb99 	bl	8006418 <HAL_GetTick>
 8008ce6:	6138      	str	r0, [r7, #16]
 8008ce8:	e008      	b.n	8008cfc <HAL_RCC_OscConfig+0x41c>
 8008cea:	f7fd fb95 	bl	8006418 <HAL_GetTick>
 8008cee:	4602      	mov	r2, r0
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	1ad3      	subs	r3, r2, r3
 8008cf4:	2b02      	cmp	r3, #2
 8008cf6:	d901      	bls.n	8008cfc <HAL_RCC_OscConfig+0x41c>
 8008cf8:	2303      	movs	r3, #3
 8008cfa:	e06d      	b.n	8008dd8 <HAL_RCC_OscConfig+0x4f8>
 8008cfc:	4b29      	ldr	r3, [pc, #164]	; (8008da4 <HAL_RCC_OscConfig+0x4c4>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d1f0      	bne.n	8008cea <HAL_RCC_OscConfig+0x40a>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6a1b      	ldr	r3, [r3, #32]
 8008d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d10:	d108      	bne.n	8008d24 <HAL_RCC_OscConfig+0x444>
 8008d12:	4b24      	ldr	r3, [pc, #144]	; (8008da4 <HAL_RCC_OscConfig+0x4c4>)
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	689b      	ldr	r3, [r3, #8]
 8008d1e:	4921      	ldr	r1, [pc, #132]	; (8008da4 <HAL_RCC_OscConfig+0x4c4>)
 8008d20:	4313      	orrs	r3, r2
 8008d22:	604b      	str	r3, [r1, #4]
 8008d24:	4b1f      	ldr	r3, [pc, #124]	; (8008da4 <HAL_RCC_OscConfig+0x4c4>)
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6a19      	ldr	r1, [r3, #32]
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d34:	430b      	orrs	r3, r1
 8008d36:	491b      	ldr	r1, [pc, #108]	; (8008da4 <HAL_RCC_OscConfig+0x4c4>)
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	604b      	str	r3, [r1, #4]
 8008d3c:	4b1b      	ldr	r3, [pc, #108]	; (8008dac <HAL_RCC_OscConfig+0x4cc>)
 8008d3e:	2201      	movs	r2, #1
 8008d40:	601a      	str	r2, [r3, #0]
 8008d42:	f7fd fb69 	bl	8006418 <HAL_GetTick>
 8008d46:	6138      	str	r0, [r7, #16]
 8008d48:	e008      	b.n	8008d5c <HAL_RCC_OscConfig+0x47c>
 8008d4a:	f7fd fb65 	bl	8006418 <HAL_GetTick>
 8008d4e:	4602      	mov	r2, r0
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	1ad3      	subs	r3, r2, r3
 8008d54:	2b02      	cmp	r3, #2
 8008d56:	d901      	bls.n	8008d5c <HAL_RCC_OscConfig+0x47c>
 8008d58:	2303      	movs	r3, #3
 8008d5a:	e03d      	b.n	8008dd8 <HAL_RCC_OscConfig+0x4f8>
 8008d5c:	4b11      	ldr	r3, [pc, #68]	; (8008da4 <HAL_RCC_OscConfig+0x4c4>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d0f0      	beq.n	8008d4a <HAL_RCC_OscConfig+0x46a>
 8008d68:	e035      	b.n	8008dd6 <HAL_RCC_OscConfig+0x4f6>
 8008d6a:	4b10      	ldr	r3, [pc, #64]	; (8008dac <HAL_RCC_OscConfig+0x4cc>)
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	601a      	str	r2, [r3, #0]
 8008d70:	f7fd fb52 	bl	8006418 <HAL_GetTick>
 8008d74:	6138      	str	r0, [r7, #16]
 8008d76:	e008      	b.n	8008d8a <HAL_RCC_OscConfig+0x4aa>
 8008d78:	f7fd fb4e 	bl	8006418 <HAL_GetTick>
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	1ad3      	subs	r3, r2, r3
 8008d82:	2b02      	cmp	r3, #2
 8008d84:	d901      	bls.n	8008d8a <HAL_RCC_OscConfig+0x4aa>
 8008d86:	2303      	movs	r3, #3
 8008d88:	e026      	b.n	8008dd8 <HAL_RCC_OscConfig+0x4f8>
 8008d8a:	4b06      	ldr	r3, [pc, #24]	; (8008da4 <HAL_RCC_OscConfig+0x4c4>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d1f0      	bne.n	8008d78 <HAL_RCC_OscConfig+0x498>
 8008d96:	e01e      	b.n	8008dd6 <HAL_RCC_OscConfig+0x4f6>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	69db      	ldr	r3, [r3, #28]
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	d107      	bne.n	8008db0 <HAL_RCC_OscConfig+0x4d0>
 8008da0:	2301      	movs	r3, #1
 8008da2:	e019      	b.n	8008dd8 <HAL_RCC_OscConfig+0x4f8>
 8008da4:	40021000 	.word	0x40021000
 8008da8:	40007000 	.word	0x40007000
 8008dac:	42420060 	.word	0x42420060
 8008db0:	4b0b      	ldr	r3, [pc, #44]	; (8008de0 <HAL_RCC_OscConfig+0x500>)
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	60fb      	str	r3, [r7, #12]
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6a1b      	ldr	r3, [r3, #32]
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	d106      	bne.n	8008dd2 <HAL_RCC_OscConfig+0x4f2>
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	d001      	beq.n	8008dd6 <HAL_RCC_OscConfig+0x4f6>
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	e000      	b.n	8008dd8 <HAL_RCC_OscConfig+0x4f8>
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3718      	adds	r7, #24
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}
 8008de0:	40021000 	.word	0x40021000

08008de4 <HAL_RCC_ClockConfig>:
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b084      	sub	sp, #16
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	6039      	str	r1, [r7, #0]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d101      	bne.n	8008df8 <HAL_RCC_ClockConfig+0x14>
 8008df4:	2301      	movs	r3, #1
 8008df6:	e0d0      	b.n	8008f9a <HAL_RCC_ClockConfig+0x1b6>
 8008df8:	4b6a      	ldr	r3, [pc, #424]	; (8008fa4 <HAL_RCC_ClockConfig+0x1c0>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f003 0307 	and.w	r3, r3, #7
 8008e00:	683a      	ldr	r2, [r7, #0]
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d910      	bls.n	8008e28 <HAL_RCC_ClockConfig+0x44>
 8008e06:	4b67      	ldr	r3, [pc, #412]	; (8008fa4 <HAL_RCC_ClockConfig+0x1c0>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f023 0207 	bic.w	r2, r3, #7
 8008e0e:	4965      	ldr	r1, [pc, #404]	; (8008fa4 <HAL_RCC_ClockConfig+0x1c0>)
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	4313      	orrs	r3, r2
 8008e14:	600b      	str	r3, [r1, #0]
 8008e16:	4b63      	ldr	r3, [pc, #396]	; (8008fa4 <HAL_RCC_ClockConfig+0x1c0>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f003 0307 	and.w	r3, r3, #7
 8008e1e:	683a      	ldr	r2, [r7, #0]
 8008e20:	429a      	cmp	r2, r3
 8008e22:	d001      	beq.n	8008e28 <HAL_RCC_ClockConfig+0x44>
 8008e24:	2301      	movs	r3, #1
 8008e26:	e0b8      	b.n	8008f9a <HAL_RCC_ClockConfig+0x1b6>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f003 0302 	and.w	r3, r3, #2
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d020      	beq.n	8008e76 <HAL_RCC_ClockConfig+0x92>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f003 0304 	and.w	r3, r3, #4
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d005      	beq.n	8008e4c <HAL_RCC_ClockConfig+0x68>
 8008e40:	4b59      	ldr	r3, [pc, #356]	; (8008fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	4a58      	ldr	r2, [pc, #352]	; (8008fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8008e46:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008e4a:	6053      	str	r3, [r2, #4]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f003 0308 	and.w	r3, r3, #8
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d005      	beq.n	8008e64 <HAL_RCC_ClockConfig+0x80>
 8008e58:	4b53      	ldr	r3, [pc, #332]	; (8008fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	4a52      	ldr	r2, [pc, #328]	; (8008fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8008e5e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8008e62:	6053      	str	r3, [r2, #4]
 8008e64:	4b50      	ldr	r3, [pc, #320]	; (8008fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8008e66:	685b      	ldr	r3, [r3, #4]
 8008e68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	689b      	ldr	r3, [r3, #8]
 8008e70:	494d      	ldr	r1, [pc, #308]	; (8008fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8008e72:	4313      	orrs	r3, r2
 8008e74:	604b      	str	r3, [r1, #4]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f003 0301 	and.w	r3, r3, #1
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d040      	beq.n	8008f04 <HAL_RCC_ClockConfig+0x120>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	685b      	ldr	r3, [r3, #4]
 8008e86:	2b01      	cmp	r3, #1
 8008e88:	d107      	bne.n	8008e9a <HAL_RCC_ClockConfig+0xb6>
 8008e8a:	4b47      	ldr	r3, [pc, #284]	; (8008fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d115      	bne.n	8008ec2 <HAL_RCC_ClockConfig+0xde>
 8008e96:	2301      	movs	r3, #1
 8008e98:	e07f      	b.n	8008f9a <HAL_RCC_ClockConfig+0x1b6>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	2b02      	cmp	r3, #2
 8008ea0:	d107      	bne.n	8008eb2 <HAL_RCC_ClockConfig+0xce>
 8008ea2:	4b41      	ldr	r3, [pc, #260]	; (8008fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d109      	bne.n	8008ec2 <HAL_RCC_ClockConfig+0xde>
 8008eae:	2301      	movs	r3, #1
 8008eb0:	e073      	b.n	8008f9a <HAL_RCC_ClockConfig+0x1b6>
 8008eb2:	4b3d      	ldr	r3, [pc, #244]	; (8008fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f003 0302 	and.w	r3, r3, #2
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d101      	bne.n	8008ec2 <HAL_RCC_ClockConfig+0xde>
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	e06b      	b.n	8008f9a <HAL_RCC_ClockConfig+0x1b6>
 8008ec2:	4b39      	ldr	r3, [pc, #228]	; (8008fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8008ec4:	685b      	ldr	r3, [r3, #4]
 8008ec6:	f023 0203 	bic.w	r2, r3, #3
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	685b      	ldr	r3, [r3, #4]
 8008ece:	4936      	ldr	r1, [pc, #216]	; (8008fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	604b      	str	r3, [r1, #4]
 8008ed4:	f7fd faa0 	bl	8006418 <HAL_GetTick>
 8008ed8:	60f8      	str	r0, [r7, #12]
 8008eda:	e00a      	b.n	8008ef2 <HAL_RCC_ClockConfig+0x10e>
 8008edc:	f7fd fa9c 	bl	8006418 <HAL_GetTick>
 8008ee0:	4602      	mov	r2, r0
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	1ad3      	subs	r3, r2, r3
 8008ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d901      	bls.n	8008ef2 <HAL_RCC_ClockConfig+0x10e>
 8008eee:	2303      	movs	r3, #3
 8008ef0:	e053      	b.n	8008f9a <HAL_RCC_ClockConfig+0x1b6>
 8008ef2:	4b2d      	ldr	r3, [pc, #180]	; (8008fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	f003 020c 	and.w	r2, r3, #12
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	009b      	lsls	r3, r3, #2
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d1eb      	bne.n	8008edc <HAL_RCC_ClockConfig+0xf8>
 8008f04:	4b27      	ldr	r3, [pc, #156]	; (8008fa4 <HAL_RCC_ClockConfig+0x1c0>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f003 0307 	and.w	r3, r3, #7
 8008f0c:	683a      	ldr	r2, [r7, #0]
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d210      	bcs.n	8008f34 <HAL_RCC_ClockConfig+0x150>
 8008f12:	4b24      	ldr	r3, [pc, #144]	; (8008fa4 <HAL_RCC_ClockConfig+0x1c0>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f023 0207 	bic.w	r2, r3, #7
 8008f1a:	4922      	ldr	r1, [pc, #136]	; (8008fa4 <HAL_RCC_ClockConfig+0x1c0>)
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	600b      	str	r3, [r1, #0]
 8008f22:	4b20      	ldr	r3, [pc, #128]	; (8008fa4 <HAL_RCC_ClockConfig+0x1c0>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f003 0307 	and.w	r3, r3, #7
 8008f2a:	683a      	ldr	r2, [r7, #0]
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d001      	beq.n	8008f34 <HAL_RCC_ClockConfig+0x150>
 8008f30:	2301      	movs	r3, #1
 8008f32:	e032      	b.n	8008f9a <HAL_RCC_ClockConfig+0x1b6>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f003 0304 	and.w	r3, r3, #4
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d008      	beq.n	8008f52 <HAL_RCC_ClockConfig+0x16e>
 8008f40:	4b19      	ldr	r3, [pc, #100]	; (8008fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	68db      	ldr	r3, [r3, #12]
 8008f4c:	4916      	ldr	r1, [pc, #88]	; (8008fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	604b      	str	r3, [r1, #4]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f003 0308 	and.w	r3, r3, #8
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d009      	beq.n	8008f72 <HAL_RCC_ClockConfig+0x18e>
 8008f5e:	4b12      	ldr	r3, [pc, #72]	; (8008fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	691b      	ldr	r3, [r3, #16]
 8008f6a:	00db      	lsls	r3, r3, #3
 8008f6c:	490e      	ldr	r1, [pc, #56]	; (8008fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	604b      	str	r3, [r1, #4]
 8008f72:	f000 f821 	bl	8008fb8 <HAL_RCC_GetSysClockFreq>
 8008f76:	4602      	mov	r2, r0
 8008f78:	4b0b      	ldr	r3, [pc, #44]	; (8008fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	091b      	lsrs	r3, r3, #4
 8008f7e:	f003 030f 	and.w	r3, r3, #15
 8008f82:	490a      	ldr	r1, [pc, #40]	; (8008fac <HAL_RCC_ClockConfig+0x1c8>)
 8008f84:	5ccb      	ldrb	r3, [r1, r3]
 8008f86:	fa22 f303 	lsr.w	r3, r2, r3
 8008f8a:	4a09      	ldr	r2, [pc, #36]	; (8008fb0 <HAL_RCC_ClockConfig+0x1cc>)
 8008f8c:	6013      	str	r3, [r2, #0]
 8008f8e:	4b09      	ldr	r3, [pc, #36]	; (8008fb4 <HAL_RCC_ClockConfig+0x1d0>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4618      	mov	r0, r3
 8008f94:	f7fd f9fe 	bl	8006394 <HAL_InitTick>
 8008f98:	2300      	movs	r3, #0
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3710      	adds	r7, #16
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
 8008fa2:	bf00      	nop
 8008fa4:	40022000 	.word	0x40022000
 8008fa8:	40021000 	.word	0x40021000
 8008fac:	0800b274 	.word	0x0800b274
 8008fb0:	2000023c 	.word	0x2000023c
 8008fb4:	20000240 	.word	0x20000240

08008fb8 <HAL_RCC_GetSysClockFreq>:
 8008fb8:	b490      	push	{r4, r7}
 8008fba:	b08a      	sub	sp, #40	; 0x28
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	4b29      	ldr	r3, [pc, #164]	; (8009064 <HAL_RCC_GetSysClockFreq+0xac>)
 8008fc0:	1d3c      	adds	r4, r7, #4
 8008fc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008fc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008fc8:	f240 2301 	movw	r3, #513	; 0x201
 8008fcc:	803b      	strh	r3, [r7, #0]
 8008fce:	2300      	movs	r3, #0
 8008fd0:	61fb      	str	r3, [r7, #28]
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	61bb      	str	r3, [r7, #24]
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8008fda:	2300      	movs	r3, #0
 8008fdc:	617b      	str	r3, [r7, #20]
 8008fde:	2300      	movs	r3, #0
 8008fe0:	623b      	str	r3, [r7, #32]
 8008fe2:	4b21      	ldr	r3, [pc, #132]	; (8009068 <HAL_RCC_GetSysClockFreq+0xb0>)
 8008fe4:	685b      	ldr	r3, [r3, #4]
 8008fe6:	61fb      	str	r3, [r7, #28]
 8008fe8:	69fb      	ldr	r3, [r7, #28]
 8008fea:	f003 030c 	and.w	r3, r3, #12
 8008fee:	2b04      	cmp	r3, #4
 8008ff0:	d002      	beq.n	8008ff8 <HAL_RCC_GetSysClockFreq+0x40>
 8008ff2:	2b08      	cmp	r3, #8
 8008ff4:	d003      	beq.n	8008ffe <HAL_RCC_GetSysClockFreq+0x46>
 8008ff6:	e02b      	b.n	8009050 <HAL_RCC_GetSysClockFreq+0x98>
 8008ff8:	4b1c      	ldr	r3, [pc, #112]	; (800906c <HAL_RCC_GetSysClockFreq+0xb4>)
 8008ffa:	623b      	str	r3, [r7, #32]
 8008ffc:	e02b      	b.n	8009056 <HAL_RCC_GetSysClockFreq+0x9e>
 8008ffe:	69fb      	ldr	r3, [r7, #28]
 8009000:	0c9b      	lsrs	r3, r3, #18
 8009002:	f003 030f 	and.w	r3, r3, #15
 8009006:	3328      	adds	r3, #40	; 0x28
 8009008:	443b      	add	r3, r7
 800900a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800900e:	617b      	str	r3, [r7, #20]
 8009010:	69fb      	ldr	r3, [r7, #28]
 8009012:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009016:	2b00      	cmp	r3, #0
 8009018:	d012      	beq.n	8009040 <HAL_RCC_GetSysClockFreq+0x88>
 800901a:	4b13      	ldr	r3, [pc, #76]	; (8009068 <HAL_RCC_GetSysClockFreq+0xb0>)
 800901c:	685b      	ldr	r3, [r3, #4]
 800901e:	0c5b      	lsrs	r3, r3, #17
 8009020:	f003 0301 	and.w	r3, r3, #1
 8009024:	3328      	adds	r3, #40	; 0x28
 8009026:	443b      	add	r3, r7
 8009028:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800902c:	61bb      	str	r3, [r7, #24]
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	4a0e      	ldr	r2, [pc, #56]	; (800906c <HAL_RCC_GetSysClockFreq+0xb4>)
 8009032:	fb03 f202 	mul.w	r2, r3, r2
 8009036:	69bb      	ldr	r3, [r7, #24]
 8009038:	fbb2 f3f3 	udiv	r3, r2, r3
 800903c:	627b      	str	r3, [r7, #36]	; 0x24
 800903e:	e004      	b.n	800904a <HAL_RCC_GetSysClockFreq+0x92>
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	4a0b      	ldr	r2, [pc, #44]	; (8009070 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009044:	fb02 f303 	mul.w	r3, r2, r3
 8009048:	627b      	str	r3, [r7, #36]	; 0x24
 800904a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800904c:	623b      	str	r3, [r7, #32]
 800904e:	e002      	b.n	8009056 <HAL_RCC_GetSysClockFreq+0x9e>
 8009050:	4b06      	ldr	r3, [pc, #24]	; (800906c <HAL_RCC_GetSysClockFreq+0xb4>)
 8009052:	623b      	str	r3, [r7, #32]
 8009054:	bf00      	nop
 8009056:	6a3b      	ldr	r3, [r7, #32]
 8009058:	4618      	mov	r0, r3
 800905a:	3728      	adds	r7, #40	; 0x28
 800905c:	46bd      	mov	sp, r7
 800905e:	bc90      	pop	{r4, r7}
 8009060:	4770      	bx	lr
 8009062:	bf00      	nop
 8009064:	0800b264 	.word	0x0800b264
 8009068:	40021000 	.word	0x40021000
 800906c:	007a1200 	.word	0x007a1200
 8009070:	003d0900 	.word	0x003d0900

08009074 <HAL_RCC_GetHCLKFreq>:
 8009074:	b480      	push	{r7}
 8009076:	af00      	add	r7, sp, #0
 8009078:	4b02      	ldr	r3, [pc, #8]	; (8009084 <HAL_RCC_GetHCLKFreq+0x10>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4618      	mov	r0, r3
 800907e:	46bd      	mov	sp, r7
 8009080:	bc80      	pop	{r7}
 8009082:	4770      	bx	lr
 8009084:	2000023c 	.word	0x2000023c

08009088 <HAL_RCC_GetPCLK1Freq>:
 8009088:	b580      	push	{r7, lr}
 800908a:	af00      	add	r7, sp, #0
 800908c:	f7ff fff2 	bl	8009074 <HAL_RCC_GetHCLKFreq>
 8009090:	4602      	mov	r2, r0
 8009092:	4b05      	ldr	r3, [pc, #20]	; (80090a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	0a1b      	lsrs	r3, r3, #8
 8009098:	f003 0307 	and.w	r3, r3, #7
 800909c:	4903      	ldr	r1, [pc, #12]	; (80090ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800909e:	5ccb      	ldrb	r3, [r1, r3]
 80090a0:	fa22 f303 	lsr.w	r3, r2, r3
 80090a4:	4618      	mov	r0, r3
 80090a6:	bd80      	pop	{r7, pc}
 80090a8:	40021000 	.word	0x40021000
 80090ac:	0800b284 	.word	0x0800b284

080090b0 <RCC_Delay>:
 80090b0:	b480      	push	{r7}
 80090b2:	b085      	sub	sp, #20
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	4b0a      	ldr	r3, [pc, #40]	; (80090e4 <RCC_Delay+0x34>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a0a      	ldr	r2, [pc, #40]	; (80090e8 <RCC_Delay+0x38>)
 80090be:	fba2 2303 	umull	r2, r3, r2, r3
 80090c2:	0a5b      	lsrs	r3, r3, #9
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	fb02 f303 	mul.w	r3, r2, r3
 80090ca:	60fb      	str	r3, [r7, #12]
 80090cc:	bf00      	nop
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	1e5a      	subs	r2, r3, #1
 80090d2:	60fa      	str	r2, [r7, #12]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d1f9      	bne.n	80090cc <RCC_Delay+0x1c>
 80090d8:	bf00      	nop
 80090da:	bf00      	nop
 80090dc:	3714      	adds	r7, #20
 80090de:	46bd      	mov	sp, r7
 80090e0:	bc80      	pop	{r7}
 80090e2:	4770      	bx	lr
 80090e4:	2000023c 	.word	0x2000023c
 80090e8:	10624dd3 	.word	0x10624dd3

080090ec <HAL_RCCEx_PeriphCLKConfig>:
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b086      	sub	sp, #24
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	2300      	movs	r3, #0
 80090f6:	613b      	str	r3, [r7, #16]
 80090f8:	2300      	movs	r3, #0
 80090fa:	60fb      	str	r3, [r7, #12]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f003 0301 	and.w	r3, r3, #1
 8009104:	2b00      	cmp	r3, #0
 8009106:	d07d      	beq.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8009108:	2300      	movs	r3, #0
 800910a:	75fb      	strb	r3, [r7, #23]
 800910c:	4b4f      	ldr	r3, [pc, #316]	; (800924c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800910e:	69db      	ldr	r3, [r3, #28]
 8009110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009114:	2b00      	cmp	r3, #0
 8009116:	d10d      	bne.n	8009134 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8009118:	4b4c      	ldr	r3, [pc, #304]	; (800924c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800911a:	69db      	ldr	r3, [r3, #28]
 800911c:	4a4b      	ldr	r2, [pc, #300]	; (800924c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800911e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009122:	61d3      	str	r3, [r2, #28]
 8009124:	4b49      	ldr	r3, [pc, #292]	; (800924c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009126:	69db      	ldr	r3, [r3, #28]
 8009128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800912c:	60bb      	str	r3, [r7, #8]
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	2301      	movs	r3, #1
 8009132:	75fb      	strb	r3, [r7, #23]
 8009134:	4b46      	ldr	r3, [pc, #280]	; (8009250 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800913c:	2b00      	cmp	r3, #0
 800913e:	d118      	bne.n	8009172 <HAL_RCCEx_PeriphCLKConfig+0x86>
 8009140:	4b43      	ldr	r3, [pc, #268]	; (8009250 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4a42      	ldr	r2, [pc, #264]	; (8009250 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800914a:	6013      	str	r3, [r2, #0]
 800914c:	f7fd f964 	bl	8006418 <HAL_GetTick>
 8009150:	6138      	str	r0, [r7, #16]
 8009152:	e008      	b.n	8009166 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009154:	f7fd f960 	bl	8006418 <HAL_GetTick>
 8009158:	4602      	mov	r2, r0
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	1ad3      	subs	r3, r2, r3
 800915e:	2b64      	cmp	r3, #100	; 0x64
 8009160:	d901      	bls.n	8009166 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009162:	2303      	movs	r3, #3
 8009164:	e06d      	b.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x156>
 8009166:	4b3a      	ldr	r3, [pc, #232]	; (8009250 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800916e:	2b00      	cmp	r3, #0
 8009170:	d0f0      	beq.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8009172:	4b36      	ldr	r3, [pc, #216]	; (800924c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009174:	6a1b      	ldr	r3, [r3, #32]
 8009176:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800917a:	60fb      	str	r3, [r7, #12]
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d02e      	beq.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800918a:	68fa      	ldr	r2, [r7, #12]
 800918c:	429a      	cmp	r2, r3
 800918e:	d027      	beq.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8009190:	4b2e      	ldr	r3, [pc, #184]	; (800924c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009192:	6a1b      	ldr	r3, [r3, #32]
 8009194:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009198:	60fb      	str	r3, [r7, #12]
 800919a:	4b2e      	ldr	r3, [pc, #184]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800919c:	2201      	movs	r2, #1
 800919e:	601a      	str	r2, [r3, #0]
 80091a0:	4b2c      	ldr	r3, [pc, #176]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80091a2:	2200      	movs	r2, #0
 80091a4:	601a      	str	r2, [r3, #0]
 80091a6:	4a29      	ldr	r2, [pc, #164]	; (800924c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	6213      	str	r3, [r2, #32]
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f003 0301 	and.w	r3, r3, #1
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d014      	beq.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80091b6:	f7fd f92f 	bl	8006418 <HAL_GetTick>
 80091ba:	6138      	str	r0, [r7, #16]
 80091bc:	e00a      	b.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80091be:	f7fd f92b 	bl	8006418 <HAL_GetTick>
 80091c2:	4602      	mov	r2, r0
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	1ad3      	subs	r3, r2, r3
 80091c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d901      	bls.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80091d0:	2303      	movs	r3, #3
 80091d2:	e036      	b.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x156>
 80091d4:	4b1d      	ldr	r3, [pc, #116]	; (800924c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80091d6:	6a1b      	ldr	r3, [r3, #32]
 80091d8:	f003 0302 	and.w	r3, r3, #2
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d0ee      	beq.n	80091be <HAL_RCCEx_PeriphCLKConfig+0xd2>
 80091e0:	4b1a      	ldr	r3, [pc, #104]	; (800924c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80091e2:	6a1b      	ldr	r3, [r3, #32]
 80091e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	4917      	ldr	r1, [pc, #92]	; (800924c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80091ee:	4313      	orrs	r3, r2
 80091f0:	620b      	str	r3, [r1, #32]
 80091f2:	7dfb      	ldrb	r3, [r7, #23]
 80091f4:	2b01      	cmp	r3, #1
 80091f6:	d105      	bne.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0x118>
 80091f8:	4b14      	ldr	r3, [pc, #80]	; (800924c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80091fa:	69db      	ldr	r3, [r3, #28]
 80091fc:	4a13      	ldr	r2, [pc, #76]	; (800924c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80091fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009202:	61d3      	str	r3, [r2, #28]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f003 0302 	and.w	r3, r3, #2
 800920c:	2b00      	cmp	r3, #0
 800920e:	d008      	beq.n	8009222 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009210:	4b0e      	ldr	r3, [pc, #56]	; (800924c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	689b      	ldr	r3, [r3, #8]
 800921c:	490b      	ldr	r1, [pc, #44]	; (800924c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800921e:	4313      	orrs	r3, r2
 8009220:	604b      	str	r3, [r1, #4]
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f003 0310 	and.w	r3, r3, #16
 800922a:	2b00      	cmp	r3, #0
 800922c:	d008      	beq.n	8009240 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800922e:	4b07      	ldr	r3, [pc, #28]	; (800924c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	68db      	ldr	r3, [r3, #12]
 800923a:	4904      	ldr	r1, [pc, #16]	; (800924c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800923c:	4313      	orrs	r3, r2
 800923e:	604b      	str	r3, [r1, #4]
 8009240:	2300      	movs	r3, #0
 8009242:	4618      	mov	r0, r3
 8009244:	3718      	adds	r7, #24
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}
 800924a:	bf00      	nop
 800924c:	40021000 	.word	0x40021000
 8009250:	40007000 	.word	0x40007000
 8009254:	42420440 	.word	0x42420440

08009258 <HAL_TIM_Base_Init>:
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d101      	bne.n	800926a <HAL_TIM_Base_Init+0x12>
 8009266:	2301      	movs	r3, #1
 8009268:	e041      	b.n	80092ee <HAL_TIM_Base_Init+0x96>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009270:	b2db      	uxtb	r3, r3
 8009272:	2b00      	cmp	r3, #0
 8009274:	d106      	bne.n	8009284 <HAL_TIM_Base_Init+0x2c>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2200      	movs	r2, #0
 800927a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f7fc feaa 	bl	8005fd8 <HAL_TIM_Base_MspInit>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2202      	movs	r2, #2
 8009288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681a      	ldr	r2, [r3, #0]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	3304      	adds	r3, #4
 8009294:	4619      	mov	r1, r3
 8009296:	4610      	mov	r0, r2
 8009298:	f001 f93e 	bl	800a518 <TIM_Base_SetConfig>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2201      	movs	r2, #1
 80092a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2201      	movs	r2, #1
 80092a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2201      	movs	r2, #1
 80092b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2201      	movs	r2, #1
 80092b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2201      	movs	r2, #1
 80092c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2201      	movs	r2, #1
 80092c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2201      	movs	r2, #1
 80092d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2201      	movs	r2, #1
 80092d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2201      	movs	r2, #1
 80092e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2201      	movs	r2, #1
 80092e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80092ec:	2300      	movs	r3, #0
 80092ee:	4618      	mov	r0, r3
 80092f0:	3708      	adds	r7, #8
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}

080092f6 <HAL_TIM_Base_DeInit>:
 80092f6:	b580      	push	{r7, lr}
 80092f8:	b082      	sub	sp, #8
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	6078      	str	r0, [r7, #4]
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2202      	movs	r2, #2
 8009302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	6a1a      	ldr	r2, [r3, #32]
 800930c:	f241 1311 	movw	r3, #4369	; 0x1111
 8009310:	4013      	ands	r3, r2
 8009312:	2b00      	cmp	r3, #0
 8009314:	d10f      	bne.n	8009336 <HAL_TIM_Base_DeInit+0x40>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	6a1a      	ldr	r2, [r3, #32]
 800931c:	f240 4344 	movw	r3, #1092	; 0x444
 8009320:	4013      	ands	r3, r2
 8009322:	2b00      	cmp	r3, #0
 8009324:	d107      	bne.n	8009336 <HAL_TIM_Base_DeInit+0x40>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	681a      	ldr	r2, [r3, #0]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f022 0201 	bic.w	r2, r2, #1
 8009334:	601a      	str	r2, [r3, #0]
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f7fc fee0 	bl	80060fc <HAL_TIM_Base_MspDeInit>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2200      	movs	r2, #0
 8009340:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2200      	movs	r2, #0
 8009348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2200      	movs	r2, #0
 8009350:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2200      	movs	r2, #0
 8009358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2200      	movs	r2, #0
 8009360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2200      	movs	r2, #0
 8009368:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2200      	movs	r2, #0
 8009370:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2200      	movs	r2, #0
 8009378:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2200      	movs	r2, #0
 8009380:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2200      	movs	r2, #0
 8009388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2200      	movs	r2, #0
 8009390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009394:	2300      	movs	r3, #0
 8009396:	4618      	mov	r0, r3
 8009398:	3708      	adds	r7, #8
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}
	...

080093a0 <HAL_TIM_Base_Start_IT>:
 80093a0:	b480      	push	{r7}
 80093a2:	b085      	sub	sp, #20
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093ae:	b2db      	uxtb	r3, r3
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d001      	beq.n	80093b8 <HAL_TIM_Base_Start_IT+0x18>
 80093b4:	2301      	movs	r3, #1
 80093b6:	e03a      	b.n	800942e <HAL_TIM_Base_Start_IT+0x8e>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2202      	movs	r2, #2
 80093bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	68da      	ldr	r2, [r3, #12]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f042 0201 	orr.w	r2, r2, #1
 80093ce:	60da      	str	r2, [r3, #12]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4a18      	ldr	r2, [pc, #96]	; (8009438 <HAL_TIM_Base_Start_IT+0x98>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d00e      	beq.n	80093f8 <HAL_TIM_Base_Start_IT+0x58>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093e2:	d009      	beq.n	80093f8 <HAL_TIM_Base_Start_IT+0x58>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	4a14      	ldr	r2, [pc, #80]	; (800943c <HAL_TIM_Base_Start_IT+0x9c>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d004      	beq.n	80093f8 <HAL_TIM_Base_Start_IT+0x58>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	4a13      	ldr	r2, [pc, #76]	; (8009440 <HAL_TIM_Base_Start_IT+0xa0>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d111      	bne.n	800941c <HAL_TIM_Base_Start_IT+0x7c>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	689b      	ldr	r3, [r3, #8]
 80093fe:	f003 0307 	and.w	r3, r3, #7
 8009402:	60fb      	str	r3, [r7, #12]
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	2b06      	cmp	r3, #6
 8009408:	d010      	beq.n	800942c <HAL_TIM_Base_Start_IT+0x8c>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	681a      	ldr	r2, [r3, #0]
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f042 0201 	orr.w	r2, r2, #1
 8009418:	601a      	str	r2, [r3, #0]
 800941a:	e007      	b.n	800942c <HAL_TIM_Base_Start_IT+0x8c>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	681a      	ldr	r2, [r3, #0]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f042 0201 	orr.w	r2, r2, #1
 800942a:	601a      	str	r2, [r3, #0]
 800942c:	2300      	movs	r3, #0
 800942e:	4618      	mov	r0, r3
 8009430:	3714      	adds	r7, #20
 8009432:	46bd      	mov	sp, r7
 8009434:	bc80      	pop	{r7}
 8009436:	4770      	bx	lr
 8009438:	40012c00 	.word	0x40012c00
 800943c:	40000400 	.word	0x40000400
 8009440:	40000800 	.word	0x40000800

08009444 <HAL_TIM_PWM_Init>:
 8009444:	b580      	push	{r7, lr}
 8009446:	b082      	sub	sp, #8
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d101      	bne.n	8009456 <HAL_TIM_PWM_Init+0x12>
 8009452:	2301      	movs	r3, #1
 8009454:	e041      	b.n	80094da <HAL_TIM_PWM_Init+0x96>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800945c:	b2db      	uxtb	r3, r3
 800945e:	2b00      	cmp	r3, #0
 8009460:	d106      	bne.n	8009470 <HAL_TIM_PWM_Init+0x2c>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2200      	movs	r2, #0
 8009466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 f88d 	bl	800958a <HAL_TIM_PWM_MspInit>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2202      	movs	r2, #2
 8009474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681a      	ldr	r2, [r3, #0]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	3304      	adds	r3, #4
 8009480:	4619      	mov	r1, r3
 8009482:	4610      	mov	r0, r2
 8009484:	f001 f848 	bl	800a518 <TIM_Base_SetConfig>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2201      	movs	r2, #1
 800948c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2201      	movs	r2, #1
 8009494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2201      	movs	r2, #1
 800949c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2201      	movs	r2, #1
 80094a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2201      	movs	r2, #1
 80094ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2201      	movs	r2, #1
 80094b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2201      	movs	r2, #1
 80094bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2201      	movs	r2, #1
 80094c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2201      	movs	r2, #1
 80094cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2201      	movs	r2, #1
 80094d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80094d8:	2300      	movs	r3, #0
 80094da:	4618      	mov	r0, r3
 80094dc:	3708      	adds	r7, #8
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}

080094e2 <HAL_TIM_PWM_DeInit>:
 80094e2:	b580      	push	{r7, lr}
 80094e4:	b082      	sub	sp, #8
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	6078      	str	r0, [r7, #4]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2202      	movs	r2, #2
 80094ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	6a1a      	ldr	r2, [r3, #32]
 80094f8:	f241 1311 	movw	r3, #4369	; 0x1111
 80094fc:	4013      	ands	r3, r2
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d10f      	bne.n	8009522 <HAL_TIM_PWM_DeInit+0x40>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	6a1a      	ldr	r2, [r3, #32]
 8009508:	f240 4344 	movw	r3, #1092	; 0x444
 800950c:	4013      	ands	r3, r2
 800950e:	2b00      	cmp	r3, #0
 8009510:	d107      	bne.n	8009522 <HAL_TIM_PWM_DeInit+0x40>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	681a      	ldr	r2, [r3, #0]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f022 0201 	bic.w	r2, r2, #1
 8009520:	601a      	str	r2, [r3, #0]
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 f83a 	bl	800959c <HAL_TIM_PWM_MspDeInit>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2200      	movs	r2, #0
 800952c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2200      	movs	r2, #0
 8009534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2200      	movs	r2, #0
 800953c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2200      	movs	r2, #0
 8009544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2200      	movs	r2, #0
 800954c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2200      	movs	r2, #0
 8009554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2200      	movs	r2, #0
 800955c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2200      	movs	r2, #0
 8009564:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2200      	movs	r2, #0
 800956c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2200      	movs	r2, #0
 8009574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2200      	movs	r2, #0
 800957c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009580:	2300      	movs	r3, #0
 8009582:	4618      	mov	r0, r3
 8009584:	3708      	adds	r7, #8
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}

0800958a <HAL_TIM_PWM_MspInit>:
 800958a:	b480      	push	{r7}
 800958c:	b083      	sub	sp, #12
 800958e:	af00      	add	r7, sp, #0
 8009590:	6078      	str	r0, [r7, #4]
 8009592:	bf00      	nop
 8009594:	370c      	adds	r7, #12
 8009596:	46bd      	mov	sp, r7
 8009598:	bc80      	pop	{r7}
 800959a:	4770      	bx	lr

0800959c <HAL_TIM_PWM_MspDeInit>:
 800959c:	b480      	push	{r7}
 800959e:	b083      	sub	sp, #12
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	bf00      	nop
 80095a6:	370c      	adds	r7, #12
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bc80      	pop	{r7}
 80095ac:	4770      	bx	lr
	...

080095b0 <HAL_TIM_PWM_Start>:
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b084      	sub	sp, #16
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	6039      	str	r1, [r7, #0]
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d109      	bne.n	80095d4 <HAL_TIM_PWM_Start+0x24>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80095c6:	b2db      	uxtb	r3, r3
 80095c8:	2b01      	cmp	r3, #1
 80095ca:	bf14      	ite	ne
 80095cc:	2301      	movne	r3, #1
 80095ce:	2300      	moveq	r3, #0
 80095d0:	b2db      	uxtb	r3, r3
 80095d2:	e022      	b.n	800961a <HAL_TIM_PWM_Start+0x6a>
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	2b04      	cmp	r3, #4
 80095d8:	d109      	bne.n	80095ee <HAL_TIM_PWM_Start+0x3e>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80095e0:	b2db      	uxtb	r3, r3
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	bf14      	ite	ne
 80095e6:	2301      	movne	r3, #1
 80095e8:	2300      	moveq	r3, #0
 80095ea:	b2db      	uxtb	r3, r3
 80095ec:	e015      	b.n	800961a <HAL_TIM_PWM_Start+0x6a>
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	2b08      	cmp	r3, #8
 80095f2:	d109      	bne.n	8009608 <HAL_TIM_PWM_Start+0x58>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80095fa:	b2db      	uxtb	r3, r3
 80095fc:	2b01      	cmp	r3, #1
 80095fe:	bf14      	ite	ne
 8009600:	2301      	movne	r3, #1
 8009602:	2300      	moveq	r3, #0
 8009604:	b2db      	uxtb	r3, r3
 8009606:	e008      	b.n	800961a <HAL_TIM_PWM_Start+0x6a>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800960e:	b2db      	uxtb	r3, r3
 8009610:	2b01      	cmp	r3, #1
 8009612:	bf14      	ite	ne
 8009614:	2301      	movne	r3, #1
 8009616:	2300      	moveq	r3, #0
 8009618:	b2db      	uxtb	r3, r3
 800961a:	2b00      	cmp	r3, #0
 800961c:	d001      	beq.n	8009622 <HAL_TIM_PWM_Start+0x72>
 800961e:	2301      	movs	r3, #1
 8009620:	e05e      	b.n	80096e0 <HAL_TIM_PWM_Start+0x130>
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d104      	bne.n	8009632 <HAL_TIM_PWM_Start+0x82>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2202      	movs	r2, #2
 800962c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009630:	e013      	b.n	800965a <HAL_TIM_PWM_Start+0xaa>
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	2b04      	cmp	r3, #4
 8009636:	d104      	bne.n	8009642 <HAL_TIM_PWM_Start+0x92>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2202      	movs	r2, #2
 800963c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009640:	e00b      	b.n	800965a <HAL_TIM_PWM_Start+0xaa>
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	2b08      	cmp	r3, #8
 8009646:	d104      	bne.n	8009652 <HAL_TIM_PWM_Start+0xa2>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2202      	movs	r2, #2
 800964c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009650:	e003      	b.n	800965a <HAL_TIM_PWM_Start+0xaa>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2202      	movs	r2, #2
 8009656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	2201      	movs	r2, #1
 8009660:	6839      	ldr	r1, [r7, #0]
 8009662:	4618      	mov	r0, r3
 8009664:	f001 fb73 	bl	800ad4e <TIM_CCxChannelCmd>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4a1e      	ldr	r2, [pc, #120]	; (80096e8 <HAL_TIM_PWM_Start+0x138>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d107      	bne.n	8009682 <HAL_TIM_PWM_Start+0xd2>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009680:	645a      	str	r2, [r3, #68]	; 0x44
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	4a18      	ldr	r2, [pc, #96]	; (80096e8 <HAL_TIM_PWM_Start+0x138>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d00e      	beq.n	80096aa <HAL_TIM_PWM_Start+0xfa>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009694:	d009      	beq.n	80096aa <HAL_TIM_PWM_Start+0xfa>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4a14      	ldr	r2, [pc, #80]	; (80096ec <HAL_TIM_PWM_Start+0x13c>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d004      	beq.n	80096aa <HAL_TIM_PWM_Start+0xfa>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	4a12      	ldr	r2, [pc, #72]	; (80096f0 <HAL_TIM_PWM_Start+0x140>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d111      	bne.n	80096ce <HAL_TIM_PWM_Start+0x11e>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	689b      	ldr	r3, [r3, #8]
 80096b0:	f003 0307 	and.w	r3, r3, #7
 80096b4:	60fb      	str	r3, [r7, #12]
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2b06      	cmp	r3, #6
 80096ba:	d010      	beq.n	80096de <HAL_TIM_PWM_Start+0x12e>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	681a      	ldr	r2, [r3, #0]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f042 0201 	orr.w	r2, r2, #1
 80096ca:	601a      	str	r2, [r3, #0]
 80096cc:	e007      	b.n	80096de <HAL_TIM_PWM_Start+0x12e>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	681a      	ldr	r2, [r3, #0]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f042 0201 	orr.w	r2, r2, #1
 80096dc:	601a      	str	r2, [r3, #0]
 80096de:	2300      	movs	r3, #0
 80096e0:	4618      	mov	r0, r3
 80096e2:	3710      	adds	r7, #16
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}
 80096e8:	40012c00 	.word	0x40012c00
 80096ec:	40000400 	.word	0x40000400
 80096f0:	40000800 	.word	0x40000800

080096f4 <HAL_TIM_PWM_Stop>:
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b082      	sub	sp, #8
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	6039      	str	r1, [r7, #0]
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	2200      	movs	r2, #0
 8009704:	6839      	ldr	r1, [r7, #0]
 8009706:	4618      	mov	r0, r3
 8009708:	f001 fb21 	bl	800ad4e <TIM_CCxChannelCmd>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	4a29      	ldr	r2, [pc, #164]	; (80097b8 <HAL_TIM_PWM_Stop+0xc4>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d117      	bne.n	8009746 <HAL_TIM_PWM_Stop+0x52>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	6a1a      	ldr	r2, [r3, #32]
 800971c:	f241 1311 	movw	r3, #4369	; 0x1111
 8009720:	4013      	ands	r3, r2
 8009722:	2b00      	cmp	r3, #0
 8009724:	d10f      	bne.n	8009746 <HAL_TIM_PWM_Stop+0x52>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	6a1a      	ldr	r2, [r3, #32]
 800972c:	f240 4344 	movw	r3, #1092	; 0x444
 8009730:	4013      	ands	r3, r2
 8009732:	2b00      	cmp	r3, #0
 8009734:	d107      	bne.n	8009746 <HAL_TIM_PWM_Stop+0x52>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009744:	645a      	str	r2, [r3, #68]	; 0x44
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	6a1a      	ldr	r2, [r3, #32]
 800974c:	f241 1311 	movw	r3, #4369	; 0x1111
 8009750:	4013      	ands	r3, r2
 8009752:	2b00      	cmp	r3, #0
 8009754:	d10f      	bne.n	8009776 <HAL_TIM_PWM_Stop+0x82>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	6a1a      	ldr	r2, [r3, #32]
 800975c:	f240 4344 	movw	r3, #1092	; 0x444
 8009760:	4013      	ands	r3, r2
 8009762:	2b00      	cmp	r3, #0
 8009764:	d107      	bne.n	8009776 <HAL_TIM_PWM_Stop+0x82>
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	681a      	ldr	r2, [r3, #0]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f022 0201 	bic.w	r2, r2, #1
 8009774:	601a      	str	r2, [r3, #0]
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d104      	bne.n	8009786 <HAL_TIM_PWM_Stop+0x92>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2201      	movs	r2, #1
 8009780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009784:	e013      	b.n	80097ae <HAL_TIM_PWM_Stop+0xba>
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	2b04      	cmp	r3, #4
 800978a:	d104      	bne.n	8009796 <HAL_TIM_PWM_Stop+0xa2>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2201      	movs	r2, #1
 8009790:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009794:	e00b      	b.n	80097ae <HAL_TIM_PWM_Stop+0xba>
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	2b08      	cmp	r3, #8
 800979a:	d104      	bne.n	80097a6 <HAL_TIM_PWM_Stop+0xb2>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2201      	movs	r2, #1
 80097a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80097a4:	e003      	b.n	80097ae <HAL_TIM_PWM_Stop+0xba>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2201      	movs	r2, #1
 80097aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80097ae:	2300      	movs	r3, #0
 80097b0:	4618      	mov	r0, r3
 80097b2:	3708      	adds	r7, #8
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}
 80097b8:	40012c00 	.word	0x40012c00

080097bc <HAL_TIM_IC_Init>:
 80097bc:	b580      	push	{r7, lr}
 80097be:	b082      	sub	sp, #8
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d101      	bne.n	80097ce <HAL_TIM_IC_Init+0x12>
 80097ca:	2301      	movs	r3, #1
 80097cc:	e041      	b.n	8009852 <HAL_TIM_IC_Init+0x96>
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097d4:	b2db      	uxtb	r3, r3
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d106      	bne.n	80097e8 <HAL_TIM_IC_Init+0x2c>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2200      	movs	r2, #0
 80097de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f000 f88d 	bl	8009902 <HAL_TIM_IC_MspInit>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2202      	movs	r2, #2
 80097ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681a      	ldr	r2, [r3, #0]
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	3304      	adds	r3, #4
 80097f8:	4619      	mov	r1, r3
 80097fa:	4610      	mov	r0, r2
 80097fc:	f000 fe8c 	bl	800a518 <TIM_Base_SetConfig>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2201      	movs	r2, #1
 8009804:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2201      	movs	r2, #1
 800980c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2201      	movs	r2, #1
 8009814:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2201      	movs	r2, #1
 800981c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2201      	movs	r2, #1
 8009824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2201      	movs	r2, #1
 800982c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2201      	movs	r2, #1
 8009834:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2201      	movs	r2, #1
 800983c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2201      	movs	r2, #1
 8009844:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2201      	movs	r2, #1
 800984c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009850:	2300      	movs	r3, #0
 8009852:	4618      	mov	r0, r3
 8009854:	3708      	adds	r7, #8
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}

0800985a <HAL_TIM_IC_DeInit>:
 800985a:	b580      	push	{r7, lr}
 800985c:	b082      	sub	sp, #8
 800985e:	af00      	add	r7, sp, #0
 8009860:	6078      	str	r0, [r7, #4]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2202      	movs	r2, #2
 8009866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	6a1a      	ldr	r2, [r3, #32]
 8009870:	f241 1311 	movw	r3, #4369	; 0x1111
 8009874:	4013      	ands	r3, r2
 8009876:	2b00      	cmp	r3, #0
 8009878:	d10f      	bne.n	800989a <HAL_TIM_IC_DeInit+0x40>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	6a1a      	ldr	r2, [r3, #32]
 8009880:	f240 4344 	movw	r3, #1092	; 0x444
 8009884:	4013      	ands	r3, r2
 8009886:	2b00      	cmp	r3, #0
 8009888:	d107      	bne.n	800989a <HAL_TIM_IC_DeInit+0x40>
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	681a      	ldr	r2, [r3, #0]
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f022 0201 	bic.w	r2, r2, #1
 8009898:	601a      	str	r2, [r3, #0]
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f000 f83a 	bl	8009914 <HAL_TIM_IC_MspDeInit>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2200      	movs	r2, #0
 80098a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2200      	movs	r2, #0
 80098ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2200      	movs	r2, #0
 80098b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2200      	movs	r2, #0
 80098bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2200      	movs	r2, #0
 80098c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2200      	movs	r2, #0
 80098cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2200      	movs	r2, #0
 80098d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2200      	movs	r2, #0
 80098dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2200      	movs	r2, #0
 80098e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2200      	movs	r2, #0
 80098ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2200      	movs	r2, #0
 80098f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80098f8:	2300      	movs	r3, #0
 80098fa:	4618      	mov	r0, r3
 80098fc:	3708      	adds	r7, #8
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}

08009902 <HAL_TIM_IC_MspInit>:
 8009902:	b480      	push	{r7}
 8009904:	b083      	sub	sp, #12
 8009906:	af00      	add	r7, sp, #0
 8009908:	6078      	str	r0, [r7, #4]
 800990a:	bf00      	nop
 800990c:	370c      	adds	r7, #12
 800990e:	46bd      	mov	sp, r7
 8009910:	bc80      	pop	{r7}
 8009912:	4770      	bx	lr

08009914 <HAL_TIM_IC_MspDeInit>:
 8009914:	b480      	push	{r7}
 8009916:	b083      	sub	sp, #12
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	bf00      	nop
 800991e:	370c      	adds	r7, #12
 8009920:	46bd      	mov	sp, r7
 8009922:	bc80      	pop	{r7}
 8009924:	4770      	bx	lr
	...

08009928 <HAL_TIM_IC_Start_DMA>:
 8009928:	b580      	push	{r7, lr}
 800992a:	b086      	sub	sp, #24
 800992c:	af00      	add	r7, sp, #0
 800992e:	60f8      	str	r0, [r7, #12]
 8009930:	60b9      	str	r1, [r7, #8]
 8009932:	607a      	str	r2, [r7, #4]
 8009934:	807b      	strh	r3, [r7, #2]
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d104      	bne.n	8009946 <HAL_TIM_IC_Start_DMA+0x1e>
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009942:	b2db      	uxtb	r3, r3
 8009944:	e013      	b.n	800996e <HAL_TIM_IC_Start_DMA+0x46>
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	2b04      	cmp	r3, #4
 800994a:	d104      	bne.n	8009956 <HAL_TIM_IC_Start_DMA+0x2e>
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009952:	b2db      	uxtb	r3, r3
 8009954:	e00b      	b.n	800996e <HAL_TIM_IC_Start_DMA+0x46>
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	2b08      	cmp	r3, #8
 800995a:	d104      	bne.n	8009966 <HAL_TIM_IC_Start_DMA+0x3e>
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009962:	b2db      	uxtb	r3, r3
 8009964:	e003      	b.n	800996e <HAL_TIM_IC_Start_DMA+0x46>
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800996c:	b2db      	uxtb	r3, r3
 800996e:	75fb      	strb	r3, [r7, #23]
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d104      	bne.n	8009980 <HAL_TIM_IC_Start_DMA+0x58>
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800997c:	b2db      	uxtb	r3, r3
 800997e:	e013      	b.n	80099a8 <HAL_TIM_IC_Start_DMA+0x80>
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	2b04      	cmp	r3, #4
 8009984:	d104      	bne.n	8009990 <HAL_TIM_IC_Start_DMA+0x68>
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800998c:	b2db      	uxtb	r3, r3
 800998e:	e00b      	b.n	80099a8 <HAL_TIM_IC_Start_DMA+0x80>
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	2b08      	cmp	r3, #8
 8009994:	d104      	bne.n	80099a0 <HAL_TIM_IC_Start_DMA+0x78>
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800999c:	b2db      	uxtb	r3, r3
 800999e:	e003      	b.n	80099a8 <HAL_TIM_IC_Start_DMA+0x80>
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099a6:	b2db      	uxtb	r3, r3
 80099a8:	75bb      	strb	r3, [r7, #22]
 80099aa:	7dfb      	ldrb	r3, [r7, #23]
 80099ac:	2b02      	cmp	r3, #2
 80099ae:	d002      	beq.n	80099b6 <HAL_TIM_IC_Start_DMA+0x8e>
 80099b0:	7dbb      	ldrb	r3, [r7, #22]
 80099b2:	2b02      	cmp	r3, #2
 80099b4:	d101      	bne.n	80099ba <HAL_TIM_IC_Start_DMA+0x92>
 80099b6:	2302      	movs	r3, #2
 80099b8:	e130      	b.n	8009c1c <HAL_TIM_IC_Start_DMA+0x2f4>
 80099ba:	7dfb      	ldrb	r3, [r7, #23]
 80099bc:	2b01      	cmp	r3, #1
 80099be:	d143      	bne.n	8009a48 <HAL_TIM_IC_Start_DMA+0x120>
 80099c0:	7dbb      	ldrb	r3, [r7, #22]
 80099c2:	2b01      	cmp	r3, #1
 80099c4:	d140      	bne.n	8009a48 <HAL_TIM_IC_Start_DMA+0x120>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d104      	bne.n	80099d6 <HAL_TIM_IC_Start_DMA+0xae>
 80099cc:	887b      	ldrh	r3, [r7, #2]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d001      	beq.n	80099d6 <HAL_TIM_IC_Start_DMA+0xae>
 80099d2:	2301      	movs	r3, #1
 80099d4:	e122      	b.n	8009c1c <HAL_TIM_IC_Start_DMA+0x2f4>
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d104      	bne.n	80099e6 <HAL_TIM_IC_Start_DMA+0xbe>
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2202      	movs	r2, #2
 80099e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80099e4:	e013      	b.n	8009a0e <HAL_TIM_IC_Start_DMA+0xe6>
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	2b04      	cmp	r3, #4
 80099ea:	d104      	bne.n	80099f6 <HAL_TIM_IC_Start_DMA+0xce>
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	2202      	movs	r2, #2
 80099f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80099f4:	e00b      	b.n	8009a0e <HAL_TIM_IC_Start_DMA+0xe6>
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	2b08      	cmp	r3, #8
 80099fa:	d104      	bne.n	8009a06 <HAL_TIM_IC_Start_DMA+0xde>
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	2202      	movs	r2, #2
 8009a00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009a04:	e003      	b.n	8009a0e <HAL_TIM_IC_Start_DMA+0xe6>
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2202      	movs	r2, #2
 8009a0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d104      	bne.n	8009a1e <HAL_TIM_IC_Start_DMA+0xf6>
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	2202      	movs	r2, #2
 8009a18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009a1c:	e016      	b.n	8009a4c <HAL_TIM_IC_Start_DMA+0x124>
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	2b04      	cmp	r3, #4
 8009a22:	d104      	bne.n	8009a2e <HAL_TIM_IC_Start_DMA+0x106>
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2202      	movs	r2, #2
 8009a28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009a2c:	e00e      	b.n	8009a4c <HAL_TIM_IC_Start_DMA+0x124>
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	2b08      	cmp	r3, #8
 8009a32:	d104      	bne.n	8009a3e <HAL_TIM_IC_Start_DMA+0x116>
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	2202      	movs	r2, #2
 8009a38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a3c:	e006      	b.n	8009a4c <HAL_TIM_IC_Start_DMA+0x124>
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	2202      	movs	r2, #2
 8009a42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009a46:	e001      	b.n	8009a4c <HAL_TIM_IC_Start_DMA+0x124>
 8009a48:	2301      	movs	r3, #1
 8009a4a:	e0e7      	b.n	8009c1c <HAL_TIM_IC_Start_DMA+0x2f4>
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	2201      	movs	r2, #1
 8009a52:	68b9      	ldr	r1, [r7, #8]
 8009a54:	4618      	mov	r0, r3
 8009a56:	f001 f97a 	bl	800ad4e <TIM_CCxChannelCmd>
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	4a71      	ldr	r2, [pc, #452]	; (8009c24 <HAL_TIM_IC_Start_DMA+0x2fc>)
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d00e      	beq.n	8009a82 <HAL_TIM_IC_Start_DMA+0x15a>
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a6c:	d009      	beq.n	8009a82 <HAL_TIM_IC_Start_DMA+0x15a>
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	4a6d      	ldr	r2, [pc, #436]	; (8009c28 <HAL_TIM_IC_Start_DMA+0x300>)
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d004      	beq.n	8009a82 <HAL_TIM_IC_Start_DMA+0x15a>
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	4a6b      	ldr	r2, [pc, #428]	; (8009c2c <HAL_TIM_IC_Start_DMA+0x304>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d111      	bne.n	8009aa6 <HAL_TIM_IC_Start_DMA+0x17e>
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	689b      	ldr	r3, [r3, #8]
 8009a88:	f003 0307 	and.w	r3, r3, #7
 8009a8c:	613b      	str	r3, [r7, #16]
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	2b06      	cmp	r3, #6
 8009a92:	d010      	beq.n	8009ab6 <HAL_TIM_IC_Start_DMA+0x18e>
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	681a      	ldr	r2, [r3, #0]
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f042 0201 	orr.w	r2, r2, #1
 8009aa2:	601a      	str	r2, [r3, #0]
 8009aa4:	e007      	b.n	8009ab6 <HAL_TIM_IC_Start_DMA+0x18e>
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	681a      	ldr	r2, [r3, #0]
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f042 0201 	orr.w	r2, r2, #1
 8009ab4:	601a      	str	r2, [r3, #0]
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	2b0c      	cmp	r3, #12
 8009aba:	f200 80ad 	bhi.w	8009c18 <HAL_TIM_IC_Start_DMA+0x2f0>
 8009abe:	a201      	add	r2, pc, #4	; (adr r2, 8009ac4 <HAL_TIM_IC_Start_DMA+0x19c>)
 8009ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ac4:	08009af9 	.word	0x08009af9
 8009ac8:	08009c19 	.word	0x08009c19
 8009acc:	08009c19 	.word	0x08009c19
 8009ad0:	08009c19 	.word	0x08009c19
 8009ad4:	08009b41 	.word	0x08009b41
 8009ad8:	08009c19 	.word	0x08009c19
 8009adc:	08009c19 	.word	0x08009c19
 8009ae0:	08009c19 	.word	0x08009c19
 8009ae4:	08009b89 	.word	0x08009b89
 8009ae8:	08009c19 	.word	0x08009c19
 8009aec:	08009c19 	.word	0x08009c19
 8009af0:	08009c19 	.word	0x08009c19
 8009af4:	08009bd1 	.word	0x08009bd1
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009afc:	4a4c      	ldr	r2, [pc, #304]	; (8009c30 <HAL_TIM_IC_Start_DMA+0x308>)
 8009afe:	629a      	str	r2, [r3, #40]	; 0x28
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b04:	4a4b      	ldr	r2, [pc, #300]	; (8009c34 <HAL_TIM_IC_Start_DMA+0x30c>)
 8009b06:	62da      	str	r2, [r3, #44]	; 0x2c
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b0c:	4a4a      	ldr	r2, [pc, #296]	; (8009c38 <HAL_TIM_IC_Start_DMA+0x310>)
 8009b0e:	631a      	str	r2, [r3, #48]	; 0x30
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	3334      	adds	r3, #52	; 0x34
 8009b1a:	4619      	mov	r1, r3
 8009b1c:	687a      	ldr	r2, [r7, #4]
 8009b1e:	887b      	ldrh	r3, [r7, #2]
 8009b20:	f7fd fb10 	bl	8007144 <HAL_DMA_Start_IT>
 8009b24:	4603      	mov	r3, r0
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d001      	beq.n	8009b2e <HAL_TIM_IC_Start_DMA+0x206>
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	e076      	b.n	8009c1c <HAL_TIM_IC_Start_DMA+0x2f4>
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	68da      	ldr	r2, [r3, #12]
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b3c:	60da      	str	r2, [r3, #12]
 8009b3e:	e06c      	b.n	8009c1a <HAL_TIM_IC_Start_DMA+0x2f2>
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b44:	4a3a      	ldr	r2, [pc, #232]	; (8009c30 <HAL_TIM_IC_Start_DMA+0x308>)
 8009b46:	629a      	str	r2, [r3, #40]	; 0x28
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b4c:	4a39      	ldr	r2, [pc, #228]	; (8009c34 <HAL_TIM_IC_Start_DMA+0x30c>)
 8009b4e:	62da      	str	r2, [r3, #44]	; 0x2c
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b54:	4a38      	ldr	r2, [pc, #224]	; (8009c38 <HAL_TIM_IC_Start_DMA+0x310>)
 8009b56:	631a      	str	r2, [r3, #48]	; 0x30
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	3338      	adds	r3, #56	; 0x38
 8009b62:	4619      	mov	r1, r3
 8009b64:	687a      	ldr	r2, [r7, #4]
 8009b66:	887b      	ldrh	r3, [r7, #2]
 8009b68:	f7fd faec 	bl	8007144 <HAL_DMA_Start_IT>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d001      	beq.n	8009b76 <HAL_TIM_IC_Start_DMA+0x24e>
 8009b72:	2301      	movs	r3, #1
 8009b74:	e052      	b.n	8009c1c <HAL_TIM_IC_Start_DMA+0x2f4>
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	68da      	ldr	r2, [r3, #12]
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009b84:	60da      	str	r2, [r3, #12]
 8009b86:	e048      	b.n	8009c1a <HAL_TIM_IC_Start_DMA+0x2f2>
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b8c:	4a28      	ldr	r2, [pc, #160]	; (8009c30 <HAL_TIM_IC_Start_DMA+0x308>)
 8009b8e:	629a      	str	r2, [r3, #40]	; 0x28
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b94:	4a27      	ldr	r2, [pc, #156]	; (8009c34 <HAL_TIM_IC_Start_DMA+0x30c>)
 8009b96:	62da      	str	r2, [r3, #44]	; 0x2c
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b9c:	4a26      	ldr	r2, [pc, #152]	; (8009c38 <HAL_TIM_IC_Start_DMA+0x310>)
 8009b9e:	631a      	str	r2, [r3, #48]	; 0x30
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	333c      	adds	r3, #60	; 0x3c
 8009baa:	4619      	mov	r1, r3
 8009bac:	687a      	ldr	r2, [r7, #4]
 8009bae:	887b      	ldrh	r3, [r7, #2]
 8009bb0:	f7fd fac8 	bl	8007144 <HAL_DMA_Start_IT>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d001      	beq.n	8009bbe <HAL_TIM_IC_Start_DMA+0x296>
 8009bba:	2301      	movs	r3, #1
 8009bbc:	e02e      	b.n	8009c1c <HAL_TIM_IC_Start_DMA+0x2f4>
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	68da      	ldr	r2, [r3, #12]
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009bcc:	60da      	str	r2, [r3, #12]
 8009bce:	e024      	b.n	8009c1a <HAL_TIM_IC_Start_DMA+0x2f2>
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bd4:	4a16      	ldr	r2, [pc, #88]	; (8009c30 <HAL_TIM_IC_Start_DMA+0x308>)
 8009bd6:	629a      	str	r2, [r3, #40]	; 0x28
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bdc:	4a15      	ldr	r2, [pc, #84]	; (8009c34 <HAL_TIM_IC_Start_DMA+0x30c>)
 8009bde:	62da      	str	r2, [r3, #44]	; 0x2c
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009be4:	4a14      	ldr	r2, [pc, #80]	; (8009c38 <HAL_TIM_IC_Start_DMA+0x310>)
 8009be6:	631a      	str	r2, [r3, #48]	; 0x30
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	3340      	adds	r3, #64	; 0x40
 8009bf2:	4619      	mov	r1, r3
 8009bf4:	687a      	ldr	r2, [r7, #4]
 8009bf6:	887b      	ldrh	r3, [r7, #2]
 8009bf8:	f7fd faa4 	bl	8007144 <HAL_DMA_Start_IT>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d001      	beq.n	8009c06 <HAL_TIM_IC_Start_DMA+0x2de>
 8009c02:	2301      	movs	r3, #1
 8009c04:	e00a      	b.n	8009c1c <HAL_TIM_IC_Start_DMA+0x2f4>
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	68da      	ldr	r2, [r3, #12]
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009c14:	60da      	str	r2, [r3, #12]
 8009c16:	e000      	b.n	8009c1a <HAL_TIM_IC_Start_DMA+0x2f2>
 8009c18:	bf00      	nop
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3718      	adds	r7, #24
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}
 8009c24:	40012c00 	.word	0x40012c00
 8009c28:	40000400 	.word	0x40000400
 8009c2c:	40000800 	.word	0x40000800
 8009c30:	0800a3e9 	.word	0x0800a3e9
 8009c34:	0800a4b1 	.word	0x0800a4b1
 8009c38:	0800a357 	.word	0x0800a357

08009c3c <HAL_TIM_IRQHandler>:
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b082      	sub	sp, #8
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	691b      	ldr	r3, [r3, #16]
 8009c4a:	f003 0302 	and.w	r3, r3, #2
 8009c4e:	2b02      	cmp	r3, #2
 8009c50:	d122      	bne.n	8009c98 <HAL_TIM_IRQHandler+0x5c>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	68db      	ldr	r3, [r3, #12]
 8009c58:	f003 0302 	and.w	r3, r3, #2
 8009c5c:	2b02      	cmp	r3, #2
 8009c5e:	d11b      	bne.n	8009c98 <HAL_TIM_IRQHandler+0x5c>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f06f 0202 	mvn.w	r2, #2
 8009c68:	611a      	str	r2, [r3, #16]
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2201      	movs	r2, #1
 8009c6e:	771a      	strb	r2, [r3, #28]
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	699b      	ldr	r3, [r3, #24]
 8009c76:	f003 0303 	and.w	r3, r3, #3
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d003      	beq.n	8009c86 <HAL_TIM_IRQHandler+0x4a>
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f7fa ff76 	bl	8004b70 <HAL_TIM_IC_CaptureCallback>
 8009c84:	e005      	b.n	8009c92 <HAL_TIM_IRQHandler+0x56>
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f000 fb38 	bl	800a2fc <HAL_TIM_OC_DelayElapsedCallback>
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f000 fb47 	bl	800a320 <HAL_TIM_PWM_PulseFinishedCallback>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2200      	movs	r2, #0
 8009c96:	771a      	strb	r2, [r3, #28]
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	691b      	ldr	r3, [r3, #16]
 8009c9e:	f003 0304 	and.w	r3, r3, #4
 8009ca2:	2b04      	cmp	r3, #4
 8009ca4:	d122      	bne.n	8009cec <HAL_TIM_IRQHandler+0xb0>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	68db      	ldr	r3, [r3, #12]
 8009cac:	f003 0304 	and.w	r3, r3, #4
 8009cb0:	2b04      	cmp	r3, #4
 8009cb2:	d11b      	bne.n	8009cec <HAL_TIM_IRQHandler+0xb0>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f06f 0204 	mvn.w	r2, #4
 8009cbc:	611a      	str	r2, [r3, #16]
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2202      	movs	r2, #2
 8009cc2:	771a      	strb	r2, [r3, #28]
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	699b      	ldr	r3, [r3, #24]
 8009cca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d003      	beq.n	8009cda <HAL_TIM_IRQHandler+0x9e>
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f7fa ff4c 	bl	8004b70 <HAL_TIM_IC_CaptureCallback>
 8009cd8:	e005      	b.n	8009ce6 <HAL_TIM_IRQHandler+0xaa>
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f000 fb0e 	bl	800a2fc <HAL_TIM_OC_DelayElapsedCallback>
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f000 fb1d 	bl	800a320 <HAL_TIM_PWM_PulseFinishedCallback>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	771a      	strb	r2, [r3, #28]
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	691b      	ldr	r3, [r3, #16]
 8009cf2:	f003 0308 	and.w	r3, r3, #8
 8009cf6:	2b08      	cmp	r3, #8
 8009cf8:	d122      	bne.n	8009d40 <HAL_TIM_IRQHandler+0x104>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	68db      	ldr	r3, [r3, #12]
 8009d00:	f003 0308 	and.w	r3, r3, #8
 8009d04:	2b08      	cmp	r3, #8
 8009d06:	d11b      	bne.n	8009d40 <HAL_TIM_IRQHandler+0x104>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f06f 0208 	mvn.w	r2, #8
 8009d10:	611a      	str	r2, [r3, #16]
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2204      	movs	r2, #4
 8009d16:	771a      	strb	r2, [r3, #28]
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	69db      	ldr	r3, [r3, #28]
 8009d1e:	f003 0303 	and.w	r3, r3, #3
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d003      	beq.n	8009d2e <HAL_TIM_IRQHandler+0xf2>
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f7fa ff22 	bl	8004b70 <HAL_TIM_IC_CaptureCallback>
 8009d2c:	e005      	b.n	8009d3a <HAL_TIM_IRQHandler+0xfe>
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f000 fae4 	bl	800a2fc <HAL_TIM_OC_DelayElapsedCallback>
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f000 faf3 	bl	800a320 <HAL_TIM_PWM_PulseFinishedCallback>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	771a      	strb	r2, [r3, #28]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	691b      	ldr	r3, [r3, #16]
 8009d46:	f003 0310 	and.w	r3, r3, #16
 8009d4a:	2b10      	cmp	r3, #16
 8009d4c:	d122      	bne.n	8009d94 <HAL_TIM_IRQHandler+0x158>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	68db      	ldr	r3, [r3, #12]
 8009d54:	f003 0310 	and.w	r3, r3, #16
 8009d58:	2b10      	cmp	r3, #16
 8009d5a:	d11b      	bne.n	8009d94 <HAL_TIM_IRQHandler+0x158>
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f06f 0210 	mvn.w	r2, #16
 8009d64:	611a      	str	r2, [r3, #16]
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2208      	movs	r2, #8
 8009d6a:	771a      	strb	r2, [r3, #28]
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	69db      	ldr	r3, [r3, #28]
 8009d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d003      	beq.n	8009d82 <HAL_TIM_IRQHandler+0x146>
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f7fa fef8 	bl	8004b70 <HAL_TIM_IC_CaptureCallback>
 8009d80:	e005      	b.n	8009d8e <HAL_TIM_IRQHandler+0x152>
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f000 faba 	bl	800a2fc <HAL_TIM_OC_DelayElapsedCallback>
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f000 fac9 	bl	800a320 <HAL_TIM_PWM_PulseFinishedCallback>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2200      	movs	r2, #0
 8009d92:	771a      	strb	r2, [r3, #28]
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	691b      	ldr	r3, [r3, #16]
 8009d9a:	f003 0301 	and.w	r3, r3, #1
 8009d9e:	2b01      	cmp	r3, #1
 8009da0:	d10e      	bne.n	8009dc0 <HAL_TIM_IRQHandler+0x184>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	68db      	ldr	r3, [r3, #12]
 8009da8:	f003 0301 	and.w	r3, r3, #1
 8009dac:	2b01      	cmp	r3, #1
 8009dae:	d107      	bne.n	8009dc0 <HAL_TIM_IRQHandler+0x184>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f06f 0201 	mvn.w	r2, #1
 8009db8:	611a      	str	r2, [r3, #16]
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f7fa ff1e 	bl	8004bfc <HAL_TIM_PeriodElapsedCallback>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	691b      	ldr	r3, [r3, #16]
 8009dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dca:	2b80      	cmp	r3, #128	; 0x80
 8009dcc:	d10e      	bne.n	8009dec <HAL_TIM_IRQHandler+0x1b0>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	68db      	ldr	r3, [r3, #12]
 8009dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dd8:	2b80      	cmp	r3, #128	; 0x80
 8009dda:	d107      	bne.n	8009dec <HAL_TIM_IRQHandler+0x1b0>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009de4:	611a      	str	r2, [r3, #16]
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f001 f83d 	bl	800ae66 <HAL_TIMEx_BreakCallback>
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	691b      	ldr	r3, [r3, #16]
 8009df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009df6:	2b40      	cmp	r3, #64	; 0x40
 8009df8:	d10e      	bne.n	8009e18 <HAL_TIM_IRQHandler+0x1dc>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	68db      	ldr	r3, [r3, #12]
 8009e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e04:	2b40      	cmp	r3, #64	; 0x40
 8009e06:	d107      	bne.n	8009e18 <HAL_TIM_IRQHandler+0x1dc>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009e10:	611a      	str	r2, [r3, #16]
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f000 fa8d 	bl	800a332 <HAL_TIM_TriggerCallback>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	691b      	ldr	r3, [r3, #16]
 8009e1e:	f003 0320 	and.w	r3, r3, #32
 8009e22:	2b20      	cmp	r3, #32
 8009e24:	d10e      	bne.n	8009e44 <HAL_TIM_IRQHandler+0x208>
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	68db      	ldr	r3, [r3, #12]
 8009e2c:	f003 0320 	and.w	r3, r3, #32
 8009e30:	2b20      	cmp	r3, #32
 8009e32:	d107      	bne.n	8009e44 <HAL_TIM_IRQHandler+0x208>
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f06f 0220 	mvn.w	r2, #32
 8009e3c:	611a      	str	r2, [r3, #16]
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f001 f808 	bl	800ae54 <HAL_TIMEx_CommutCallback>
 8009e44:	bf00      	nop
 8009e46:	3708      	adds	r7, #8
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}

08009e4c <HAL_TIM_IC_ConfigChannel>:
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b084      	sub	sp, #16
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	60f8      	str	r0, [r7, #12]
 8009e54:	60b9      	str	r1, [r7, #8]
 8009e56:	607a      	str	r2, [r7, #4]
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e5e:	2b01      	cmp	r3, #1
 8009e60:	d101      	bne.n	8009e66 <HAL_TIM_IC_ConfigChannel+0x1a>
 8009e62:	2302      	movs	r3, #2
 8009e64:	e082      	b.n	8009f6c <HAL_TIM_IC_ConfigChannel+0x120>
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2201      	movs	r2, #1
 8009e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d11b      	bne.n	8009eac <HAL_TIM_IC_ConfigChannel+0x60>
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	6818      	ldr	r0, [r3, #0]
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	6819      	ldr	r1, [r3, #0]
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	685a      	ldr	r2, [r3, #4]
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	68db      	ldr	r3, [r3, #12]
 8009e84:	f000 fdc0 	bl	800aa08 <TIM_TI1_SetConfig>
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	699a      	ldr	r2, [r3, #24]
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f022 020c 	bic.w	r2, r2, #12
 8009e96:	619a      	str	r2, [r3, #24]
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	6999      	ldr	r1, [r3, #24]
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	689a      	ldr	r2, [r3, #8]
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	430a      	orrs	r2, r1
 8009ea8:	619a      	str	r2, [r3, #24]
 8009eaa:	e05a      	b.n	8009f62 <HAL_TIM_IC_ConfigChannel+0x116>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2b04      	cmp	r3, #4
 8009eb0:	d11c      	bne.n	8009eec <HAL_TIM_IC_ConfigChannel+0xa0>
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	6818      	ldr	r0, [r3, #0]
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	6819      	ldr	r1, [r3, #0]
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	685a      	ldr	r2, [r3, #4]
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	68db      	ldr	r3, [r3, #12]
 8009ec2:	f000 fe29 	bl	800ab18 <TIM_TI2_SetConfig>
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	699a      	ldr	r2, [r3, #24]
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009ed4:	619a      	str	r2, [r3, #24]
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	6999      	ldr	r1, [r3, #24]
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	689b      	ldr	r3, [r3, #8]
 8009ee0:	021a      	lsls	r2, r3, #8
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	430a      	orrs	r2, r1
 8009ee8:	619a      	str	r2, [r3, #24]
 8009eea:	e03a      	b.n	8009f62 <HAL_TIM_IC_ConfigChannel+0x116>
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2b08      	cmp	r3, #8
 8009ef0:	d11b      	bne.n	8009f2a <HAL_TIM_IC_ConfigChannel+0xde>
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	6818      	ldr	r0, [r3, #0]
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	6819      	ldr	r1, [r3, #0]
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	685a      	ldr	r2, [r3, #4]
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	68db      	ldr	r3, [r3, #12]
 8009f02:	f000 fe74 	bl	800abee <TIM_TI3_SetConfig>
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	69da      	ldr	r2, [r3, #28]
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f022 020c 	bic.w	r2, r2, #12
 8009f14:	61da      	str	r2, [r3, #28]
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	69d9      	ldr	r1, [r3, #28]
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	689a      	ldr	r2, [r3, #8]
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	430a      	orrs	r2, r1
 8009f26:	61da      	str	r2, [r3, #28]
 8009f28:	e01b      	b.n	8009f62 <HAL_TIM_IC_ConfigChannel+0x116>
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	6818      	ldr	r0, [r3, #0]
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	6819      	ldr	r1, [r3, #0]
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	685a      	ldr	r2, [r3, #4]
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	68db      	ldr	r3, [r3, #12]
 8009f3a:	f000 fe93 	bl	800ac64 <TIM_TI4_SetConfig>
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	69da      	ldr	r2, [r3, #28]
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009f4c:	61da      	str	r2, [r3, #28]
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	69d9      	ldr	r1, [r3, #28]
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	689b      	ldr	r3, [r3, #8]
 8009f58:	021a      	lsls	r2, r3, #8
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	430a      	orrs	r2, r1
 8009f60:	61da      	str	r2, [r3, #28]
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	2200      	movs	r2, #0
 8009f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3710      	adds	r7, #16
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}

08009f74 <HAL_TIM_PWM_ConfigChannel>:
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b084      	sub	sp, #16
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	60f8      	str	r0, [r7, #12]
 8009f7c:	60b9      	str	r1, [r7, #8]
 8009f7e:	607a      	str	r2, [r7, #4]
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f86:	2b01      	cmp	r3, #1
 8009f88:	d101      	bne.n	8009f8e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009f8a:	2302      	movs	r3, #2
 8009f8c:	e0ac      	b.n	800a0e8 <HAL_TIM_PWM_ConfigChannel+0x174>
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	2201      	movs	r2, #1
 8009f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2b0c      	cmp	r3, #12
 8009f9a:	f200 809f 	bhi.w	800a0dc <HAL_TIM_PWM_ConfigChannel+0x168>
 8009f9e:	a201      	add	r2, pc, #4	; (adr r2, 8009fa4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8009fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fa4:	08009fd9 	.word	0x08009fd9
 8009fa8:	0800a0dd 	.word	0x0800a0dd
 8009fac:	0800a0dd 	.word	0x0800a0dd
 8009fb0:	0800a0dd 	.word	0x0800a0dd
 8009fb4:	0800a019 	.word	0x0800a019
 8009fb8:	0800a0dd 	.word	0x0800a0dd
 8009fbc:	0800a0dd 	.word	0x0800a0dd
 8009fc0:	0800a0dd 	.word	0x0800a0dd
 8009fc4:	0800a05b 	.word	0x0800a05b
 8009fc8:	0800a0dd 	.word	0x0800a0dd
 8009fcc:	0800a0dd 	.word	0x0800a0dd
 8009fd0:	0800a0dd 	.word	0x0800a0dd
 8009fd4:	0800a09b 	.word	0x0800a09b
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	68b9      	ldr	r1, [r7, #8]
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f000 fafc 	bl	800a5dc <TIM_OC1_SetConfig>
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	699a      	ldr	r2, [r3, #24]
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f042 0208 	orr.w	r2, r2, #8
 8009ff2:	619a      	str	r2, [r3, #24]
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	699a      	ldr	r2, [r3, #24]
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f022 0204 	bic.w	r2, r2, #4
 800a002:	619a      	str	r2, [r3, #24]
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	6999      	ldr	r1, [r3, #24]
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	691a      	ldr	r2, [r3, #16]
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	430a      	orrs	r2, r1
 800a014:	619a      	str	r2, [r3, #24]
 800a016:	e062      	b.n	800a0de <HAL_TIM_PWM_ConfigChannel+0x16a>
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	68b9      	ldr	r1, [r7, #8]
 800a01e:	4618      	mov	r0, r3
 800a020:	f000 fb42 	bl	800a6a8 <TIM_OC2_SetConfig>
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	699a      	ldr	r2, [r3, #24]
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a032:	619a      	str	r2, [r3, #24]
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	699a      	ldr	r2, [r3, #24]
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a042:	619a      	str	r2, [r3, #24]
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	6999      	ldr	r1, [r3, #24]
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	691b      	ldr	r3, [r3, #16]
 800a04e:	021a      	lsls	r2, r3, #8
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	430a      	orrs	r2, r1
 800a056:	619a      	str	r2, [r3, #24]
 800a058:	e041      	b.n	800a0de <HAL_TIM_PWM_ConfigChannel+0x16a>
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	68b9      	ldr	r1, [r7, #8]
 800a060:	4618      	mov	r0, r3
 800a062:	f000 fb8b 	bl	800a77c <TIM_OC3_SetConfig>
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	69da      	ldr	r2, [r3, #28]
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f042 0208 	orr.w	r2, r2, #8
 800a074:	61da      	str	r2, [r3, #28]
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	69da      	ldr	r2, [r3, #28]
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f022 0204 	bic.w	r2, r2, #4
 800a084:	61da      	str	r2, [r3, #28]
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	69d9      	ldr	r1, [r3, #28]
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	691a      	ldr	r2, [r3, #16]
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	430a      	orrs	r2, r1
 800a096:	61da      	str	r2, [r3, #28]
 800a098:	e021      	b.n	800a0de <HAL_TIM_PWM_ConfigChannel+0x16a>
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	68b9      	ldr	r1, [r7, #8]
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f000 fbd5 	bl	800a850 <TIM_OC4_SetConfig>
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	69da      	ldr	r2, [r3, #28]
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a0b4:	61da      	str	r2, [r3, #28]
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	69da      	ldr	r2, [r3, #28]
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a0c4:	61da      	str	r2, [r3, #28]
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	69d9      	ldr	r1, [r3, #28]
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	691b      	ldr	r3, [r3, #16]
 800a0d0:	021a      	lsls	r2, r3, #8
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	430a      	orrs	r2, r1
 800a0d8:	61da      	str	r2, [r3, #28]
 800a0da:	e000      	b.n	800a0de <HAL_TIM_PWM_ConfigChannel+0x16a>
 800a0dc:	bf00      	nop
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	3710      	adds	r7, #16
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}

0800a0f0 <HAL_TIM_ConfigClockSource>:
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b084      	sub	sp, #16
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	6039      	str	r1, [r7, #0]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a100:	2b01      	cmp	r3, #1
 800a102:	d101      	bne.n	800a108 <HAL_TIM_ConfigClockSource+0x18>
 800a104:	2302      	movs	r3, #2
 800a106:	e0b3      	b.n	800a270 <HAL_TIM_ConfigClockSource+0x180>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2201      	movs	r2, #1
 800a10c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2202      	movs	r2, #2
 800a114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	689b      	ldr	r3, [r3, #8]
 800a11e:	60fb      	str	r3, [r7, #12]
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a126:	60fb      	str	r3, [r7, #12]
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a12e:	60fb      	str	r3, [r7, #12]
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	68fa      	ldr	r2, [r7, #12]
 800a136:	609a      	str	r2, [r3, #8]
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a140:	d03e      	beq.n	800a1c0 <HAL_TIM_ConfigClockSource+0xd0>
 800a142:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a146:	f200 8087 	bhi.w	800a258 <HAL_TIM_ConfigClockSource+0x168>
 800a14a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a14e:	f000 8085 	beq.w	800a25c <HAL_TIM_ConfigClockSource+0x16c>
 800a152:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a156:	d87f      	bhi.n	800a258 <HAL_TIM_ConfigClockSource+0x168>
 800a158:	2b70      	cmp	r3, #112	; 0x70
 800a15a:	d01a      	beq.n	800a192 <HAL_TIM_ConfigClockSource+0xa2>
 800a15c:	2b70      	cmp	r3, #112	; 0x70
 800a15e:	d87b      	bhi.n	800a258 <HAL_TIM_ConfigClockSource+0x168>
 800a160:	2b60      	cmp	r3, #96	; 0x60
 800a162:	d050      	beq.n	800a206 <HAL_TIM_ConfigClockSource+0x116>
 800a164:	2b60      	cmp	r3, #96	; 0x60
 800a166:	d877      	bhi.n	800a258 <HAL_TIM_ConfigClockSource+0x168>
 800a168:	2b50      	cmp	r3, #80	; 0x50
 800a16a:	d03c      	beq.n	800a1e6 <HAL_TIM_ConfigClockSource+0xf6>
 800a16c:	2b50      	cmp	r3, #80	; 0x50
 800a16e:	d873      	bhi.n	800a258 <HAL_TIM_ConfigClockSource+0x168>
 800a170:	2b40      	cmp	r3, #64	; 0x40
 800a172:	d058      	beq.n	800a226 <HAL_TIM_ConfigClockSource+0x136>
 800a174:	2b40      	cmp	r3, #64	; 0x40
 800a176:	d86f      	bhi.n	800a258 <HAL_TIM_ConfigClockSource+0x168>
 800a178:	2b30      	cmp	r3, #48	; 0x30
 800a17a:	d064      	beq.n	800a246 <HAL_TIM_ConfigClockSource+0x156>
 800a17c:	2b30      	cmp	r3, #48	; 0x30
 800a17e:	d86b      	bhi.n	800a258 <HAL_TIM_ConfigClockSource+0x168>
 800a180:	2b20      	cmp	r3, #32
 800a182:	d060      	beq.n	800a246 <HAL_TIM_ConfigClockSource+0x156>
 800a184:	2b20      	cmp	r3, #32
 800a186:	d867      	bhi.n	800a258 <HAL_TIM_ConfigClockSource+0x168>
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d05c      	beq.n	800a246 <HAL_TIM_ConfigClockSource+0x156>
 800a18c:	2b10      	cmp	r3, #16
 800a18e:	d05a      	beq.n	800a246 <HAL_TIM_ConfigClockSource+0x156>
 800a190:	e062      	b.n	800a258 <HAL_TIM_ConfigClockSource+0x168>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6818      	ldr	r0, [r3, #0]
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	6899      	ldr	r1, [r3, #8]
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	685a      	ldr	r2, [r3, #4]
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	68db      	ldr	r3, [r3, #12]
 800a1a2:	f000 fdb5 	bl	800ad10 <TIM_ETR_SetConfig>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	689b      	ldr	r3, [r3, #8]
 800a1ac:	60fb      	str	r3, [r7, #12]
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a1b4:	60fb      	str	r3, [r7, #12]
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	68fa      	ldr	r2, [r7, #12]
 800a1bc:	609a      	str	r2, [r3, #8]
 800a1be:	e04e      	b.n	800a25e <HAL_TIM_ConfigClockSource+0x16e>
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6818      	ldr	r0, [r3, #0]
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	6899      	ldr	r1, [r3, #8]
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	685a      	ldr	r2, [r3, #4]
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	68db      	ldr	r3, [r3, #12]
 800a1d0:	f000 fd9e 	bl	800ad10 <TIM_ETR_SetConfig>
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	689a      	ldr	r2, [r3, #8]
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a1e2:	609a      	str	r2, [r3, #8]
 800a1e4:	e03b      	b.n	800a25e <HAL_TIM_ConfigClockSource+0x16e>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6818      	ldr	r0, [r3, #0]
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	6859      	ldr	r1, [r3, #4]
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	68db      	ldr	r3, [r3, #12]
 800a1f2:	461a      	mov	r2, r3
 800a1f4:	f000 fc62 	bl	800aabc <TIM_TI1_ConfigInputStage>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	2150      	movs	r1, #80	; 0x50
 800a1fe:	4618      	mov	r0, r3
 800a200:	f000 fd6c 	bl	800acdc <TIM_ITRx_SetConfig>
 800a204:	e02b      	b.n	800a25e <HAL_TIM_ConfigClockSource+0x16e>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6818      	ldr	r0, [r3, #0]
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	6859      	ldr	r1, [r3, #4]
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	68db      	ldr	r3, [r3, #12]
 800a212:	461a      	mov	r2, r3
 800a214:	f000 fcbc 	bl	800ab90 <TIM_TI2_ConfigInputStage>
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	2160      	movs	r1, #96	; 0x60
 800a21e:	4618      	mov	r0, r3
 800a220:	f000 fd5c 	bl	800acdc <TIM_ITRx_SetConfig>
 800a224:	e01b      	b.n	800a25e <HAL_TIM_ConfigClockSource+0x16e>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6818      	ldr	r0, [r3, #0]
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	6859      	ldr	r1, [r3, #4]
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	68db      	ldr	r3, [r3, #12]
 800a232:	461a      	mov	r2, r3
 800a234:	f000 fc42 	bl	800aabc <TIM_TI1_ConfigInputStage>
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	2140      	movs	r1, #64	; 0x40
 800a23e:	4618      	mov	r0, r3
 800a240:	f000 fd4c 	bl	800acdc <TIM_ITRx_SetConfig>
 800a244:	e00b      	b.n	800a25e <HAL_TIM_ConfigClockSource+0x16e>
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681a      	ldr	r2, [r3, #0]
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	4619      	mov	r1, r3
 800a250:	4610      	mov	r0, r2
 800a252:	f000 fd43 	bl	800acdc <TIM_ITRx_SetConfig>
 800a256:	e002      	b.n	800a25e <HAL_TIM_ConfigClockSource+0x16e>
 800a258:	bf00      	nop
 800a25a:	e000      	b.n	800a25e <HAL_TIM_ConfigClockSource+0x16e>
 800a25c:	bf00      	nop
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2201      	movs	r2, #1
 800a262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2200      	movs	r2, #0
 800a26a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a26e:	2300      	movs	r3, #0
 800a270:	4618      	mov	r0, r3
 800a272:	3710      	adds	r7, #16
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}

0800a278 <HAL_TIM_SlaveConfigSynchro>:
 800a278:	b580      	push	{r7, lr}
 800a27a:	b082      	sub	sp, #8
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
 800a280:	6039      	str	r1, [r7, #0]
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a288:	2b01      	cmp	r3, #1
 800a28a:	d101      	bne.n	800a290 <HAL_TIM_SlaveConfigSynchro+0x18>
 800a28c:	2302      	movs	r3, #2
 800a28e:	e031      	b.n	800a2f4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2201      	movs	r2, #1
 800a294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2202      	movs	r2, #2
 800a29c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a2a0:	6839      	ldr	r1, [r7, #0]
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f000 fb22 	bl	800a8ec <TIM_SlaveTimer_SetConfig>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d009      	beq.n	800a2c2 <HAL_TIM_SlaveConfigSynchro+0x4a>
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2201      	movs	r2, #1
 800a2b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a2be:	2301      	movs	r3, #1
 800a2c0:	e018      	b.n	800a2f4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	68da      	ldr	r2, [r3, #12]
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a2d0:	60da      	str	r2, [r3, #12]
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	68da      	ldr	r2, [r3, #12]
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a2e0:	60da      	str	r2, [r3, #12]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2201      	movs	r2, #1
 800a2e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	3708      	adds	r7, #8
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}

0800a2fc <HAL_TIM_OC_DelayElapsedCallback>:
 800a2fc:	b480      	push	{r7}
 800a2fe:	b083      	sub	sp, #12
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
 800a304:	bf00      	nop
 800a306:	370c      	adds	r7, #12
 800a308:	46bd      	mov	sp, r7
 800a30a:	bc80      	pop	{r7}
 800a30c:	4770      	bx	lr

0800a30e <HAL_TIM_IC_CaptureHalfCpltCallback>:
 800a30e:	b480      	push	{r7}
 800a310:	b083      	sub	sp, #12
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
 800a316:	bf00      	nop
 800a318:	370c      	adds	r7, #12
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bc80      	pop	{r7}
 800a31e:	4770      	bx	lr

0800a320 <HAL_TIM_PWM_PulseFinishedCallback>:
 800a320:	b480      	push	{r7}
 800a322:	b083      	sub	sp, #12
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	bf00      	nop
 800a32a:	370c      	adds	r7, #12
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bc80      	pop	{r7}
 800a330:	4770      	bx	lr

0800a332 <HAL_TIM_TriggerCallback>:
 800a332:	b480      	push	{r7}
 800a334:	b083      	sub	sp, #12
 800a336:	af00      	add	r7, sp, #0
 800a338:	6078      	str	r0, [r7, #4]
 800a33a:	bf00      	nop
 800a33c:	370c      	adds	r7, #12
 800a33e:	46bd      	mov	sp, r7
 800a340:	bc80      	pop	{r7}
 800a342:	4770      	bx	lr

0800a344 <HAL_TIM_ErrorCallback>:
 800a344:	b480      	push	{r7}
 800a346:	b083      	sub	sp, #12
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
 800a34c:	bf00      	nop
 800a34e:	370c      	adds	r7, #12
 800a350:	46bd      	mov	sp, r7
 800a352:	bc80      	pop	{r7}
 800a354:	4770      	bx	lr

0800a356 <TIM_DMAError>:
 800a356:	b580      	push	{r7, lr}
 800a358:	b084      	sub	sp, #16
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	6078      	str	r0, [r7, #4]
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a362:	60fb      	str	r3, [r7, #12]
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a368:	687a      	ldr	r2, [r7, #4]
 800a36a:	429a      	cmp	r2, r3
 800a36c:	d107      	bne.n	800a37e <TIM_DMAError+0x28>
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	2201      	movs	r2, #1
 800a372:	771a      	strb	r2, [r3, #28]
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	2201      	movs	r2, #1
 800a378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a37c:	e02a      	b.n	800a3d4 <TIM_DMAError+0x7e>
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a382:	687a      	ldr	r2, [r7, #4]
 800a384:	429a      	cmp	r2, r3
 800a386:	d107      	bne.n	800a398 <TIM_DMAError+0x42>
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	2202      	movs	r2, #2
 800a38c:	771a      	strb	r2, [r3, #28]
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	2201      	movs	r2, #1
 800a392:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a396:	e01d      	b.n	800a3d4 <TIM_DMAError+0x7e>
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a39c:	687a      	ldr	r2, [r7, #4]
 800a39e:	429a      	cmp	r2, r3
 800a3a0:	d107      	bne.n	800a3b2 <TIM_DMAError+0x5c>
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	2204      	movs	r2, #4
 800a3a6:	771a      	strb	r2, [r3, #28]
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	2201      	movs	r2, #1
 800a3ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a3b0:	e010      	b.n	800a3d4 <TIM_DMAError+0x7e>
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3b6:	687a      	ldr	r2, [r7, #4]
 800a3b8:	429a      	cmp	r2, r3
 800a3ba:	d107      	bne.n	800a3cc <TIM_DMAError+0x76>
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	2208      	movs	r2, #8
 800a3c0:	771a      	strb	r2, [r3, #28]
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	2201      	movs	r2, #1
 800a3c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a3ca:	e003      	b.n	800a3d4 <TIM_DMAError+0x7e>
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a3d4:	68f8      	ldr	r0, [r7, #12]
 800a3d6:	f7ff ffb5 	bl	800a344 <HAL_TIM_ErrorCallback>
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	2200      	movs	r2, #0
 800a3de:	771a      	strb	r2, [r3, #28]
 800a3e0:	bf00      	nop
 800a3e2:	3710      	adds	r7, #16
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}

0800a3e8 <TIM_DMACaptureCplt>:
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b084      	sub	sp, #16
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f4:	60fb      	str	r3, [r7, #12]
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3fa:	687a      	ldr	r2, [r7, #4]
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	d10f      	bne.n	800a420 <TIM_DMACaptureCplt+0x38>
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	2201      	movs	r2, #1
 800a404:	771a      	strb	r2, [r3, #28]
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	699b      	ldr	r3, [r3, #24]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d146      	bne.n	800a49c <TIM_DMACaptureCplt+0xb4>
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	2201      	movs	r2, #1
 800a412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2201      	movs	r2, #1
 800a41a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a41e:	e03d      	b.n	800a49c <TIM_DMACaptureCplt+0xb4>
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a424:	687a      	ldr	r2, [r7, #4]
 800a426:	429a      	cmp	r2, r3
 800a428:	d10f      	bne.n	800a44a <TIM_DMACaptureCplt+0x62>
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	2202      	movs	r2, #2
 800a42e:	771a      	strb	r2, [r3, #28]
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	699b      	ldr	r3, [r3, #24]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d131      	bne.n	800a49c <TIM_DMACaptureCplt+0xb4>
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	2201      	movs	r2, #1
 800a43c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	2201      	movs	r2, #1
 800a444:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a448:	e028      	b.n	800a49c <TIM_DMACaptureCplt+0xb4>
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a44e:	687a      	ldr	r2, [r7, #4]
 800a450:	429a      	cmp	r2, r3
 800a452:	d10f      	bne.n	800a474 <TIM_DMACaptureCplt+0x8c>
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	2204      	movs	r2, #4
 800a458:	771a      	strb	r2, [r3, #28]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	699b      	ldr	r3, [r3, #24]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d11c      	bne.n	800a49c <TIM_DMACaptureCplt+0xb4>
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2201      	movs	r2, #1
 800a466:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	2201      	movs	r2, #1
 800a46e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a472:	e013      	b.n	800a49c <TIM_DMACaptureCplt+0xb4>
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a478:	687a      	ldr	r2, [r7, #4]
 800a47a:	429a      	cmp	r2, r3
 800a47c:	d10e      	bne.n	800a49c <TIM_DMACaptureCplt+0xb4>
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	2208      	movs	r2, #8
 800a482:	771a      	strb	r2, [r3, #28]
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	699b      	ldr	r3, [r3, #24]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d107      	bne.n	800a49c <TIM_DMACaptureCplt+0xb4>
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	2201      	movs	r2, #1
 800a490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	2201      	movs	r2, #1
 800a498:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a49c:	68f8      	ldr	r0, [r7, #12]
 800a49e:	f7fa fb67 	bl	8004b70 <HAL_TIM_IC_CaptureCallback>
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	771a      	strb	r2, [r3, #28]
 800a4a8:	bf00      	nop
 800a4aa:	3710      	adds	r7, #16
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}

0800a4b0 <TIM_DMACaptureHalfCplt>:
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b084      	sub	sp, #16
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4bc:	60fb      	str	r3, [r7, #12]
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c2:	687a      	ldr	r2, [r7, #4]
 800a4c4:	429a      	cmp	r2, r3
 800a4c6:	d103      	bne.n	800a4d0 <TIM_DMACaptureHalfCplt+0x20>
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2201      	movs	r2, #1
 800a4cc:	771a      	strb	r2, [r3, #28]
 800a4ce:	e019      	b.n	800a504 <TIM_DMACaptureHalfCplt+0x54>
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4d4:	687a      	ldr	r2, [r7, #4]
 800a4d6:	429a      	cmp	r2, r3
 800a4d8:	d103      	bne.n	800a4e2 <TIM_DMACaptureHalfCplt+0x32>
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	2202      	movs	r2, #2
 800a4de:	771a      	strb	r2, [r3, #28]
 800a4e0:	e010      	b.n	800a504 <TIM_DMACaptureHalfCplt+0x54>
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4e6:	687a      	ldr	r2, [r7, #4]
 800a4e8:	429a      	cmp	r2, r3
 800a4ea:	d103      	bne.n	800a4f4 <TIM_DMACaptureHalfCplt+0x44>
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	2204      	movs	r2, #4
 800a4f0:	771a      	strb	r2, [r3, #28]
 800a4f2:	e007      	b.n	800a504 <TIM_DMACaptureHalfCplt+0x54>
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4f8:	687a      	ldr	r2, [r7, #4]
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d102      	bne.n	800a504 <TIM_DMACaptureHalfCplt+0x54>
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	2208      	movs	r2, #8
 800a502:	771a      	strb	r2, [r3, #28]
 800a504:	68f8      	ldr	r0, [r7, #12]
 800a506:	f7ff ff02 	bl	800a30e <HAL_TIM_IC_CaptureHalfCpltCallback>
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	2200      	movs	r2, #0
 800a50e:	771a      	strb	r2, [r3, #28]
 800a510:	bf00      	nop
 800a512:	3710      	adds	r7, #16
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}

0800a518 <TIM_Base_SetConfig>:
 800a518:	b480      	push	{r7}
 800a51a:	b085      	sub	sp, #20
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
 800a520:	6039      	str	r1, [r7, #0]
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	60fb      	str	r3, [r7, #12]
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	4a29      	ldr	r2, [pc, #164]	; (800a5d0 <TIM_Base_SetConfig+0xb8>)
 800a52c:	4293      	cmp	r3, r2
 800a52e:	d00b      	beq.n	800a548 <TIM_Base_SetConfig+0x30>
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a536:	d007      	beq.n	800a548 <TIM_Base_SetConfig+0x30>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	4a26      	ldr	r2, [pc, #152]	; (800a5d4 <TIM_Base_SetConfig+0xbc>)
 800a53c:	4293      	cmp	r3, r2
 800a53e:	d003      	beq.n	800a548 <TIM_Base_SetConfig+0x30>
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	4a25      	ldr	r2, [pc, #148]	; (800a5d8 <TIM_Base_SetConfig+0xc0>)
 800a544:	4293      	cmp	r3, r2
 800a546:	d108      	bne.n	800a55a <TIM_Base_SetConfig+0x42>
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a54e:	60fb      	str	r3, [r7, #12]
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	685b      	ldr	r3, [r3, #4]
 800a554:	68fa      	ldr	r2, [r7, #12]
 800a556:	4313      	orrs	r3, r2
 800a558:	60fb      	str	r3, [r7, #12]
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	4a1c      	ldr	r2, [pc, #112]	; (800a5d0 <TIM_Base_SetConfig+0xb8>)
 800a55e:	4293      	cmp	r3, r2
 800a560:	d00b      	beq.n	800a57a <TIM_Base_SetConfig+0x62>
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a568:	d007      	beq.n	800a57a <TIM_Base_SetConfig+0x62>
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	4a19      	ldr	r2, [pc, #100]	; (800a5d4 <TIM_Base_SetConfig+0xbc>)
 800a56e:	4293      	cmp	r3, r2
 800a570:	d003      	beq.n	800a57a <TIM_Base_SetConfig+0x62>
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	4a18      	ldr	r2, [pc, #96]	; (800a5d8 <TIM_Base_SetConfig+0xc0>)
 800a576:	4293      	cmp	r3, r2
 800a578:	d108      	bne.n	800a58c <TIM_Base_SetConfig+0x74>
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a580:	60fb      	str	r3, [r7, #12]
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	68db      	ldr	r3, [r3, #12]
 800a586:	68fa      	ldr	r2, [r7, #12]
 800a588:	4313      	orrs	r3, r2
 800a58a:	60fb      	str	r3, [r7, #12]
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	695b      	ldr	r3, [r3, #20]
 800a596:	4313      	orrs	r3, r2
 800a598:	60fb      	str	r3, [r7, #12]
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	68fa      	ldr	r2, [r7, #12]
 800a59e:	601a      	str	r2, [r3, #0]
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	689a      	ldr	r2, [r3, #8]
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	62da      	str	r2, [r3, #44]	; 0x2c
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	681a      	ldr	r2, [r3, #0]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	629a      	str	r2, [r3, #40]	; 0x28
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	4a07      	ldr	r2, [pc, #28]	; (800a5d0 <TIM_Base_SetConfig+0xb8>)
 800a5b4:	4293      	cmp	r3, r2
 800a5b6:	d103      	bne.n	800a5c0 <TIM_Base_SetConfig+0xa8>
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	691a      	ldr	r2, [r3, #16]
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	631a      	str	r2, [r3, #48]	; 0x30
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2201      	movs	r2, #1
 800a5c4:	615a      	str	r2, [r3, #20]
 800a5c6:	bf00      	nop
 800a5c8:	3714      	adds	r7, #20
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bc80      	pop	{r7}
 800a5ce:	4770      	bx	lr
 800a5d0:	40012c00 	.word	0x40012c00
 800a5d4:	40000400 	.word	0x40000400
 800a5d8:	40000800 	.word	0x40000800

0800a5dc <TIM_OC1_SetConfig>:
 800a5dc:	b480      	push	{r7}
 800a5de:	b087      	sub	sp, #28
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	6039      	str	r1, [r7, #0]
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6a1b      	ldr	r3, [r3, #32]
 800a5ea:	f023 0201 	bic.w	r2, r3, #1
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	621a      	str	r2, [r3, #32]
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6a1b      	ldr	r3, [r3, #32]
 800a5f6:	617b      	str	r3, [r7, #20]
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	685b      	ldr	r3, [r3, #4]
 800a5fc:	613b      	str	r3, [r7, #16]
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	699b      	ldr	r3, [r3, #24]
 800a602:	60fb      	str	r3, [r7, #12]
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a60a:	60fb      	str	r3, [r7, #12]
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	f023 0303 	bic.w	r3, r3, #3
 800a612:	60fb      	str	r3, [r7, #12]
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	68fa      	ldr	r2, [r7, #12]
 800a61a:	4313      	orrs	r3, r2
 800a61c:	60fb      	str	r3, [r7, #12]
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	f023 0302 	bic.w	r3, r3, #2
 800a624:	617b      	str	r3, [r7, #20]
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	689b      	ldr	r3, [r3, #8]
 800a62a:	697a      	ldr	r2, [r7, #20]
 800a62c:	4313      	orrs	r3, r2
 800a62e:	617b      	str	r3, [r7, #20]
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	4a1c      	ldr	r2, [pc, #112]	; (800a6a4 <TIM_OC1_SetConfig+0xc8>)
 800a634:	4293      	cmp	r3, r2
 800a636:	d10c      	bne.n	800a652 <TIM_OC1_SetConfig+0x76>
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	f023 0308 	bic.w	r3, r3, #8
 800a63e:	617b      	str	r3, [r7, #20]
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	68db      	ldr	r3, [r3, #12]
 800a644:	697a      	ldr	r2, [r7, #20]
 800a646:	4313      	orrs	r3, r2
 800a648:	617b      	str	r3, [r7, #20]
 800a64a:	697b      	ldr	r3, [r7, #20]
 800a64c:	f023 0304 	bic.w	r3, r3, #4
 800a650:	617b      	str	r3, [r7, #20]
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	4a13      	ldr	r2, [pc, #76]	; (800a6a4 <TIM_OC1_SetConfig+0xc8>)
 800a656:	4293      	cmp	r3, r2
 800a658:	d111      	bne.n	800a67e <TIM_OC1_SetConfig+0xa2>
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a660:	613b      	str	r3, [r7, #16]
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a668:	613b      	str	r3, [r7, #16]
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	695b      	ldr	r3, [r3, #20]
 800a66e:	693a      	ldr	r2, [r7, #16]
 800a670:	4313      	orrs	r3, r2
 800a672:	613b      	str	r3, [r7, #16]
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	699b      	ldr	r3, [r3, #24]
 800a678:	693a      	ldr	r2, [r7, #16]
 800a67a:	4313      	orrs	r3, r2
 800a67c:	613b      	str	r3, [r7, #16]
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	693a      	ldr	r2, [r7, #16]
 800a682:	605a      	str	r2, [r3, #4]
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	68fa      	ldr	r2, [r7, #12]
 800a688:	619a      	str	r2, [r3, #24]
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	685a      	ldr	r2, [r3, #4]
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	635a      	str	r2, [r3, #52]	; 0x34
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	697a      	ldr	r2, [r7, #20]
 800a696:	621a      	str	r2, [r3, #32]
 800a698:	bf00      	nop
 800a69a:	371c      	adds	r7, #28
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bc80      	pop	{r7}
 800a6a0:	4770      	bx	lr
 800a6a2:	bf00      	nop
 800a6a4:	40012c00 	.word	0x40012c00

0800a6a8 <TIM_OC2_SetConfig>:
 800a6a8:	b480      	push	{r7}
 800a6aa:	b087      	sub	sp, #28
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
 800a6b0:	6039      	str	r1, [r7, #0]
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6a1b      	ldr	r3, [r3, #32]
 800a6b6:	f023 0210 	bic.w	r2, r3, #16
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	621a      	str	r2, [r3, #32]
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6a1b      	ldr	r3, [r3, #32]
 800a6c2:	617b      	str	r3, [r7, #20]
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	685b      	ldr	r3, [r3, #4]
 800a6c8:	613b      	str	r3, [r7, #16]
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	699b      	ldr	r3, [r3, #24]
 800a6ce:	60fb      	str	r3, [r7, #12]
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a6d6:	60fb      	str	r3, [r7, #12]
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a6de:	60fb      	str	r3, [r7, #12]
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	021b      	lsls	r3, r3, #8
 800a6e6:	68fa      	ldr	r2, [r7, #12]
 800a6e8:	4313      	orrs	r3, r2
 800a6ea:	60fb      	str	r3, [r7, #12]
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	f023 0320 	bic.w	r3, r3, #32
 800a6f2:	617b      	str	r3, [r7, #20]
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	689b      	ldr	r3, [r3, #8]
 800a6f8:	011b      	lsls	r3, r3, #4
 800a6fa:	697a      	ldr	r2, [r7, #20]
 800a6fc:	4313      	orrs	r3, r2
 800a6fe:	617b      	str	r3, [r7, #20]
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	4a1d      	ldr	r2, [pc, #116]	; (800a778 <TIM_OC2_SetConfig+0xd0>)
 800a704:	4293      	cmp	r3, r2
 800a706:	d10d      	bne.n	800a724 <TIM_OC2_SetConfig+0x7c>
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a70e:	617b      	str	r3, [r7, #20]
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	68db      	ldr	r3, [r3, #12]
 800a714:	011b      	lsls	r3, r3, #4
 800a716:	697a      	ldr	r2, [r7, #20]
 800a718:	4313      	orrs	r3, r2
 800a71a:	617b      	str	r3, [r7, #20]
 800a71c:	697b      	ldr	r3, [r7, #20]
 800a71e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a722:	617b      	str	r3, [r7, #20]
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	4a14      	ldr	r2, [pc, #80]	; (800a778 <TIM_OC2_SetConfig+0xd0>)
 800a728:	4293      	cmp	r3, r2
 800a72a:	d113      	bne.n	800a754 <TIM_OC2_SetConfig+0xac>
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a732:	613b      	str	r3, [r7, #16]
 800a734:	693b      	ldr	r3, [r7, #16]
 800a736:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a73a:	613b      	str	r3, [r7, #16]
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	695b      	ldr	r3, [r3, #20]
 800a740:	009b      	lsls	r3, r3, #2
 800a742:	693a      	ldr	r2, [r7, #16]
 800a744:	4313      	orrs	r3, r2
 800a746:	613b      	str	r3, [r7, #16]
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	699b      	ldr	r3, [r3, #24]
 800a74c:	009b      	lsls	r3, r3, #2
 800a74e:	693a      	ldr	r2, [r7, #16]
 800a750:	4313      	orrs	r3, r2
 800a752:	613b      	str	r3, [r7, #16]
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	693a      	ldr	r2, [r7, #16]
 800a758:	605a      	str	r2, [r3, #4]
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	68fa      	ldr	r2, [r7, #12]
 800a75e:	619a      	str	r2, [r3, #24]
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	685a      	ldr	r2, [r3, #4]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	639a      	str	r2, [r3, #56]	; 0x38
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	697a      	ldr	r2, [r7, #20]
 800a76c:	621a      	str	r2, [r3, #32]
 800a76e:	bf00      	nop
 800a770:	371c      	adds	r7, #28
 800a772:	46bd      	mov	sp, r7
 800a774:	bc80      	pop	{r7}
 800a776:	4770      	bx	lr
 800a778:	40012c00 	.word	0x40012c00

0800a77c <TIM_OC3_SetConfig>:
 800a77c:	b480      	push	{r7}
 800a77e:	b087      	sub	sp, #28
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
 800a784:	6039      	str	r1, [r7, #0]
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6a1b      	ldr	r3, [r3, #32]
 800a78a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	621a      	str	r2, [r3, #32]
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6a1b      	ldr	r3, [r3, #32]
 800a796:	617b      	str	r3, [r7, #20]
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	685b      	ldr	r3, [r3, #4]
 800a79c:	613b      	str	r3, [r7, #16]
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	69db      	ldr	r3, [r3, #28]
 800a7a2:	60fb      	str	r3, [r7, #12]
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7aa:	60fb      	str	r3, [r7, #12]
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	f023 0303 	bic.w	r3, r3, #3
 800a7b2:	60fb      	str	r3, [r7, #12]
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	68fa      	ldr	r2, [r7, #12]
 800a7ba:	4313      	orrs	r3, r2
 800a7bc:	60fb      	str	r3, [r7, #12]
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a7c4:	617b      	str	r3, [r7, #20]
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	689b      	ldr	r3, [r3, #8]
 800a7ca:	021b      	lsls	r3, r3, #8
 800a7cc:	697a      	ldr	r2, [r7, #20]
 800a7ce:	4313      	orrs	r3, r2
 800a7d0:	617b      	str	r3, [r7, #20]
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	4a1d      	ldr	r2, [pc, #116]	; (800a84c <TIM_OC3_SetConfig+0xd0>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d10d      	bne.n	800a7f6 <TIM_OC3_SetConfig+0x7a>
 800a7da:	697b      	ldr	r3, [r7, #20]
 800a7dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a7e0:	617b      	str	r3, [r7, #20]
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	68db      	ldr	r3, [r3, #12]
 800a7e6:	021b      	lsls	r3, r3, #8
 800a7e8:	697a      	ldr	r2, [r7, #20]
 800a7ea:	4313      	orrs	r3, r2
 800a7ec:	617b      	str	r3, [r7, #20]
 800a7ee:	697b      	ldr	r3, [r7, #20]
 800a7f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a7f4:	617b      	str	r3, [r7, #20]
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	4a14      	ldr	r2, [pc, #80]	; (800a84c <TIM_OC3_SetConfig+0xd0>)
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d113      	bne.n	800a826 <TIM_OC3_SetConfig+0xaa>
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a804:	613b      	str	r3, [r7, #16]
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a80c:	613b      	str	r3, [r7, #16]
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	695b      	ldr	r3, [r3, #20]
 800a812:	011b      	lsls	r3, r3, #4
 800a814:	693a      	ldr	r2, [r7, #16]
 800a816:	4313      	orrs	r3, r2
 800a818:	613b      	str	r3, [r7, #16]
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	699b      	ldr	r3, [r3, #24]
 800a81e:	011b      	lsls	r3, r3, #4
 800a820:	693a      	ldr	r2, [r7, #16]
 800a822:	4313      	orrs	r3, r2
 800a824:	613b      	str	r3, [r7, #16]
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	693a      	ldr	r2, [r7, #16]
 800a82a:	605a      	str	r2, [r3, #4]
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	68fa      	ldr	r2, [r7, #12]
 800a830:	61da      	str	r2, [r3, #28]
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	685a      	ldr	r2, [r3, #4]
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	63da      	str	r2, [r3, #60]	; 0x3c
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	697a      	ldr	r2, [r7, #20]
 800a83e:	621a      	str	r2, [r3, #32]
 800a840:	bf00      	nop
 800a842:	371c      	adds	r7, #28
 800a844:	46bd      	mov	sp, r7
 800a846:	bc80      	pop	{r7}
 800a848:	4770      	bx	lr
 800a84a:	bf00      	nop
 800a84c:	40012c00 	.word	0x40012c00

0800a850 <TIM_OC4_SetConfig>:
 800a850:	b480      	push	{r7}
 800a852:	b087      	sub	sp, #28
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
 800a858:	6039      	str	r1, [r7, #0]
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6a1b      	ldr	r3, [r3, #32]
 800a85e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	621a      	str	r2, [r3, #32]
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6a1b      	ldr	r3, [r3, #32]
 800a86a:	613b      	str	r3, [r7, #16]
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	685b      	ldr	r3, [r3, #4]
 800a870:	617b      	str	r3, [r7, #20]
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	69db      	ldr	r3, [r3, #28]
 800a876:	60fb      	str	r3, [r7, #12]
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a87e:	60fb      	str	r3, [r7, #12]
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a886:	60fb      	str	r3, [r7, #12]
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	021b      	lsls	r3, r3, #8
 800a88e:	68fa      	ldr	r2, [r7, #12]
 800a890:	4313      	orrs	r3, r2
 800a892:	60fb      	str	r3, [r7, #12]
 800a894:	693b      	ldr	r3, [r7, #16]
 800a896:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a89a:	613b      	str	r3, [r7, #16]
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	689b      	ldr	r3, [r3, #8]
 800a8a0:	031b      	lsls	r3, r3, #12
 800a8a2:	693a      	ldr	r2, [r7, #16]
 800a8a4:	4313      	orrs	r3, r2
 800a8a6:	613b      	str	r3, [r7, #16]
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	4a0f      	ldr	r2, [pc, #60]	; (800a8e8 <TIM_OC4_SetConfig+0x98>)
 800a8ac:	4293      	cmp	r3, r2
 800a8ae:	d109      	bne.n	800a8c4 <TIM_OC4_SetConfig+0x74>
 800a8b0:	697b      	ldr	r3, [r7, #20]
 800a8b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a8b6:	617b      	str	r3, [r7, #20]
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	695b      	ldr	r3, [r3, #20]
 800a8bc:	019b      	lsls	r3, r3, #6
 800a8be:	697a      	ldr	r2, [r7, #20]
 800a8c0:	4313      	orrs	r3, r2
 800a8c2:	617b      	str	r3, [r7, #20]
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	697a      	ldr	r2, [r7, #20]
 800a8c8:	605a      	str	r2, [r3, #4]
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	68fa      	ldr	r2, [r7, #12]
 800a8ce:	61da      	str	r2, [r3, #28]
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	685a      	ldr	r2, [r3, #4]
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	641a      	str	r2, [r3, #64]	; 0x40
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	693a      	ldr	r2, [r7, #16]
 800a8dc:	621a      	str	r2, [r3, #32]
 800a8de:	bf00      	nop
 800a8e0:	371c      	adds	r7, #28
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bc80      	pop	{r7}
 800a8e6:	4770      	bx	lr
 800a8e8:	40012c00 	.word	0x40012c00

0800a8ec <TIM_SlaveTimer_SetConfig>:
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b086      	sub	sp, #24
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
 800a8f4:	6039      	str	r1, [r7, #0]
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	689b      	ldr	r3, [r3, #8]
 800a8fc:	617b      	str	r3, [r7, #20]
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a904:	617b      	str	r3, [r7, #20]
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	685b      	ldr	r3, [r3, #4]
 800a90a:	697a      	ldr	r2, [r7, #20]
 800a90c:	4313      	orrs	r3, r2
 800a90e:	617b      	str	r3, [r7, #20]
 800a910:	697b      	ldr	r3, [r7, #20]
 800a912:	f023 0307 	bic.w	r3, r3, #7
 800a916:	617b      	str	r3, [r7, #20]
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	697a      	ldr	r2, [r7, #20]
 800a91e:	4313      	orrs	r3, r2
 800a920:	617b      	str	r3, [r7, #20]
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	697a      	ldr	r2, [r7, #20]
 800a928:	609a      	str	r2, [r3, #8]
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	685b      	ldr	r3, [r3, #4]
 800a92e:	2b70      	cmp	r3, #112	; 0x70
 800a930:	d01a      	beq.n	800a968 <TIM_SlaveTimer_SetConfig+0x7c>
 800a932:	2b70      	cmp	r3, #112	; 0x70
 800a934:	d860      	bhi.n	800a9f8 <TIM_SlaveTimer_SetConfig+0x10c>
 800a936:	2b60      	cmp	r3, #96	; 0x60
 800a938:	d054      	beq.n	800a9e4 <TIM_SlaveTimer_SetConfig+0xf8>
 800a93a:	2b60      	cmp	r3, #96	; 0x60
 800a93c:	d85c      	bhi.n	800a9f8 <TIM_SlaveTimer_SetConfig+0x10c>
 800a93e:	2b50      	cmp	r3, #80	; 0x50
 800a940:	d046      	beq.n	800a9d0 <TIM_SlaveTimer_SetConfig+0xe4>
 800a942:	2b50      	cmp	r3, #80	; 0x50
 800a944:	d858      	bhi.n	800a9f8 <TIM_SlaveTimer_SetConfig+0x10c>
 800a946:	2b40      	cmp	r3, #64	; 0x40
 800a948:	d019      	beq.n	800a97e <TIM_SlaveTimer_SetConfig+0x92>
 800a94a:	2b40      	cmp	r3, #64	; 0x40
 800a94c:	d854      	bhi.n	800a9f8 <TIM_SlaveTimer_SetConfig+0x10c>
 800a94e:	2b30      	cmp	r3, #48	; 0x30
 800a950:	d054      	beq.n	800a9fc <TIM_SlaveTimer_SetConfig+0x110>
 800a952:	2b30      	cmp	r3, #48	; 0x30
 800a954:	d850      	bhi.n	800a9f8 <TIM_SlaveTimer_SetConfig+0x10c>
 800a956:	2b20      	cmp	r3, #32
 800a958:	d050      	beq.n	800a9fc <TIM_SlaveTimer_SetConfig+0x110>
 800a95a:	2b20      	cmp	r3, #32
 800a95c:	d84c      	bhi.n	800a9f8 <TIM_SlaveTimer_SetConfig+0x10c>
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d04c      	beq.n	800a9fc <TIM_SlaveTimer_SetConfig+0x110>
 800a962:	2b10      	cmp	r3, #16
 800a964:	d04a      	beq.n	800a9fc <TIM_SlaveTimer_SetConfig+0x110>
 800a966:	e047      	b.n	800a9f8 <TIM_SlaveTimer_SetConfig+0x10c>
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6818      	ldr	r0, [r3, #0]
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	68d9      	ldr	r1, [r3, #12]
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	689a      	ldr	r2, [r3, #8]
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	691b      	ldr	r3, [r3, #16]
 800a978:	f000 f9ca 	bl	800ad10 <TIM_ETR_SetConfig>
 800a97c:	e03f      	b.n	800a9fe <TIM_SlaveTimer_SetConfig+0x112>
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	2b05      	cmp	r3, #5
 800a984:	d101      	bne.n	800a98a <TIM_SlaveTimer_SetConfig+0x9e>
 800a986:	2301      	movs	r3, #1
 800a988:	e03a      	b.n	800aa00 <TIM_SlaveTimer_SetConfig+0x114>
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	6a1b      	ldr	r3, [r3, #32]
 800a990:	613b      	str	r3, [r7, #16]
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	6a1a      	ldr	r2, [r3, #32]
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f022 0201 	bic.w	r2, r2, #1
 800a9a0:	621a      	str	r2, [r3, #32]
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	699b      	ldr	r3, [r3, #24]
 800a9a8:	60fb      	str	r3, [r7, #12]
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a9b0:	60fb      	str	r3, [r7, #12]
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	691b      	ldr	r3, [r3, #16]
 800a9b6:	011b      	lsls	r3, r3, #4
 800a9b8:	68fa      	ldr	r2, [r7, #12]
 800a9ba:	4313      	orrs	r3, r2
 800a9bc:	60fb      	str	r3, [r7, #12]
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	68fa      	ldr	r2, [r7, #12]
 800a9c4:	619a      	str	r2, [r3, #24]
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	693a      	ldr	r2, [r7, #16]
 800a9cc:	621a      	str	r2, [r3, #32]
 800a9ce:	e016      	b.n	800a9fe <TIM_SlaveTimer_SetConfig+0x112>
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	6818      	ldr	r0, [r3, #0]
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	6899      	ldr	r1, [r3, #8]
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	691b      	ldr	r3, [r3, #16]
 800a9dc:	461a      	mov	r2, r3
 800a9de:	f000 f86d 	bl	800aabc <TIM_TI1_ConfigInputStage>
 800a9e2:	e00c      	b.n	800a9fe <TIM_SlaveTimer_SetConfig+0x112>
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6818      	ldr	r0, [r3, #0]
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	6899      	ldr	r1, [r3, #8]
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	691b      	ldr	r3, [r3, #16]
 800a9f0:	461a      	mov	r2, r3
 800a9f2:	f000 f8cd 	bl	800ab90 <TIM_TI2_ConfigInputStage>
 800a9f6:	e002      	b.n	800a9fe <TIM_SlaveTimer_SetConfig+0x112>
 800a9f8:	bf00      	nop
 800a9fa:	e000      	b.n	800a9fe <TIM_SlaveTimer_SetConfig+0x112>
 800a9fc:	bf00      	nop
 800a9fe:	2300      	movs	r3, #0
 800aa00:	4618      	mov	r0, r3
 800aa02:	3718      	adds	r7, #24
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}

0800aa08 <TIM_TI1_SetConfig>:
 800aa08:	b480      	push	{r7}
 800aa0a:	b087      	sub	sp, #28
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	60f8      	str	r0, [r7, #12]
 800aa10:	60b9      	str	r1, [r7, #8]
 800aa12:	607a      	str	r2, [r7, #4]
 800aa14:	603b      	str	r3, [r7, #0]
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	6a1b      	ldr	r3, [r3, #32]
 800aa1a:	f023 0201 	bic.w	r2, r3, #1
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	621a      	str	r2, [r3, #32]
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	699b      	ldr	r3, [r3, #24]
 800aa26:	617b      	str	r3, [r7, #20]
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	6a1b      	ldr	r3, [r3, #32]
 800aa2c:	613b      	str	r3, [r7, #16]
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	4a1f      	ldr	r2, [pc, #124]	; (800aab0 <TIM_TI1_SetConfig+0xa8>)
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d00b      	beq.n	800aa4e <TIM_TI1_SetConfig+0x46>
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa3c:	d007      	beq.n	800aa4e <TIM_TI1_SetConfig+0x46>
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	4a1c      	ldr	r2, [pc, #112]	; (800aab4 <TIM_TI1_SetConfig+0xac>)
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d003      	beq.n	800aa4e <TIM_TI1_SetConfig+0x46>
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	4a1b      	ldr	r2, [pc, #108]	; (800aab8 <TIM_TI1_SetConfig+0xb0>)
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d101      	bne.n	800aa52 <TIM_TI1_SetConfig+0x4a>
 800aa4e:	2301      	movs	r3, #1
 800aa50:	e000      	b.n	800aa54 <TIM_TI1_SetConfig+0x4c>
 800aa52:	2300      	movs	r3, #0
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d008      	beq.n	800aa6a <TIM_TI1_SetConfig+0x62>
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	f023 0303 	bic.w	r3, r3, #3
 800aa5e:	617b      	str	r3, [r7, #20]
 800aa60:	697a      	ldr	r2, [r7, #20]
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	4313      	orrs	r3, r2
 800aa66:	617b      	str	r3, [r7, #20]
 800aa68:	e003      	b.n	800aa72 <TIM_TI1_SetConfig+0x6a>
 800aa6a:	697b      	ldr	r3, [r7, #20]
 800aa6c:	f043 0301 	orr.w	r3, r3, #1
 800aa70:	617b      	str	r3, [r7, #20]
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aa78:	617b      	str	r3, [r7, #20]
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	011b      	lsls	r3, r3, #4
 800aa7e:	b2db      	uxtb	r3, r3
 800aa80:	697a      	ldr	r2, [r7, #20]
 800aa82:	4313      	orrs	r3, r2
 800aa84:	617b      	str	r3, [r7, #20]
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	f023 030a 	bic.w	r3, r3, #10
 800aa8c:	613b      	str	r3, [r7, #16]
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	f003 030a 	and.w	r3, r3, #10
 800aa94:	693a      	ldr	r2, [r7, #16]
 800aa96:	4313      	orrs	r3, r2
 800aa98:	613b      	str	r3, [r7, #16]
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	697a      	ldr	r2, [r7, #20]
 800aa9e:	619a      	str	r2, [r3, #24]
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	693a      	ldr	r2, [r7, #16]
 800aaa4:	621a      	str	r2, [r3, #32]
 800aaa6:	bf00      	nop
 800aaa8:	371c      	adds	r7, #28
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bc80      	pop	{r7}
 800aaae:	4770      	bx	lr
 800aab0:	40012c00 	.word	0x40012c00
 800aab4:	40000400 	.word	0x40000400
 800aab8:	40000800 	.word	0x40000800

0800aabc <TIM_TI1_ConfigInputStage>:
 800aabc:	b480      	push	{r7}
 800aabe:	b087      	sub	sp, #28
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	60f8      	str	r0, [r7, #12]
 800aac4:	60b9      	str	r1, [r7, #8]
 800aac6:	607a      	str	r2, [r7, #4]
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	6a1b      	ldr	r3, [r3, #32]
 800aacc:	617b      	str	r3, [r7, #20]
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	6a1b      	ldr	r3, [r3, #32]
 800aad2:	f023 0201 	bic.w	r2, r3, #1
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	621a      	str	r2, [r3, #32]
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	699b      	ldr	r3, [r3, #24]
 800aade:	613b      	str	r3, [r7, #16]
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aae6:	613b      	str	r3, [r7, #16]
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	011b      	lsls	r3, r3, #4
 800aaec:	693a      	ldr	r2, [r7, #16]
 800aaee:	4313      	orrs	r3, r2
 800aaf0:	613b      	str	r3, [r7, #16]
 800aaf2:	697b      	ldr	r3, [r7, #20]
 800aaf4:	f023 030a 	bic.w	r3, r3, #10
 800aaf8:	617b      	str	r3, [r7, #20]
 800aafa:	697a      	ldr	r2, [r7, #20]
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	4313      	orrs	r3, r2
 800ab00:	617b      	str	r3, [r7, #20]
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	693a      	ldr	r2, [r7, #16]
 800ab06:	619a      	str	r2, [r3, #24]
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	697a      	ldr	r2, [r7, #20]
 800ab0c:	621a      	str	r2, [r3, #32]
 800ab0e:	bf00      	nop
 800ab10:	371c      	adds	r7, #28
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bc80      	pop	{r7}
 800ab16:	4770      	bx	lr

0800ab18 <TIM_TI2_SetConfig>:
 800ab18:	b480      	push	{r7}
 800ab1a:	b087      	sub	sp, #28
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	60f8      	str	r0, [r7, #12]
 800ab20:	60b9      	str	r1, [r7, #8]
 800ab22:	607a      	str	r2, [r7, #4]
 800ab24:	603b      	str	r3, [r7, #0]
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	6a1b      	ldr	r3, [r3, #32]
 800ab2a:	f023 0210 	bic.w	r2, r3, #16
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	621a      	str	r2, [r3, #32]
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	699b      	ldr	r3, [r3, #24]
 800ab36:	617b      	str	r3, [r7, #20]
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	6a1b      	ldr	r3, [r3, #32]
 800ab3c:	613b      	str	r3, [r7, #16]
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab44:	617b      	str	r3, [r7, #20]
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	021b      	lsls	r3, r3, #8
 800ab4a:	697a      	ldr	r2, [r7, #20]
 800ab4c:	4313      	orrs	r3, r2
 800ab4e:	617b      	str	r3, [r7, #20]
 800ab50:	697b      	ldr	r3, [r7, #20]
 800ab52:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ab56:	617b      	str	r3, [r7, #20]
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	031b      	lsls	r3, r3, #12
 800ab5c:	b29b      	uxth	r3, r3
 800ab5e:	697a      	ldr	r2, [r7, #20]
 800ab60:	4313      	orrs	r3, r2
 800ab62:	617b      	str	r3, [r7, #20]
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ab6a:	613b      	str	r3, [r7, #16]
 800ab6c:	68bb      	ldr	r3, [r7, #8]
 800ab6e:	011b      	lsls	r3, r3, #4
 800ab70:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800ab74:	693a      	ldr	r2, [r7, #16]
 800ab76:	4313      	orrs	r3, r2
 800ab78:	613b      	str	r3, [r7, #16]
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	697a      	ldr	r2, [r7, #20]
 800ab7e:	619a      	str	r2, [r3, #24]
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	693a      	ldr	r2, [r7, #16]
 800ab84:	621a      	str	r2, [r3, #32]
 800ab86:	bf00      	nop
 800ab88:	371c      	adds	r7, #28
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bc80      	pop	{r7}
 800ab8e:	4770      	bx	lr

0800ab90 <TIM_TI2_ConfigInputStage>:
 800ab90:	b480      	push	{r7}
 800ab92:	b087      	sub	sp, #28
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	60f8      	str	r0, [r7, #12]
 800ab98:	60b9      	str	r1, [r7, #8]
 800ab9a:	607a      	str	r2, [r7, #4]
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	6a1b      	ldr	r3, [r3, #32]
 800aba0:	f023 0210 	bic.w	r2, r3, #16
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	621a      	str	r2, [r3, #32]
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	699b      	ldr	r3, [r3, #24]
 800abac:	617b      	str	r3, [r7, #20]
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	6a1b      	ldr	r3, [r3, #32]
 800abb2:	613b      	str	r3, [r7, #16]
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800abba:	617b      	str	r3, [r7, #20]
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	031b      	lsls	r3, r3, #12
 800abc0:	697a      	ldr	r2, [r7, #20]
 800abc2:	4313      	orrs	r3, r2
 800abc4:	617b      	str	r3, [r7, #20]
 800abc6:	693b      	ldr	r3, [r7, #16]
 800abc8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800abcc:	613b      	str	r3, [r7, #16]
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	011b      	lsls	r3, r3, #4
 800abd2:	693a      	ldr	r2, [r7, #16]
 800abd4:	4313      	orrs	r3, r2
 800abd6:	613b      	str	r3, [r7, #16]
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	697a      	ldr	r2, [r7, #20]
 800abdc:	619a      	str	r2, [r3, #24]
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	693a      	ldr	r2, [r7, #16]
 800abe2:	621a      	str	r2, [r3, #32]
 800abe4:	bf00      	nop
 800abe6:	371c      	adds	r7, #28
 800abe8:	46bd      	mov	sp, r7
 800abea:	bc80      	pop	{r7}
 800abec:	4770      	bx	lr

0800abee <TIM_TI3_SetConfig>:
 800abee:	b480      	push	{r7}
 800abf0:	b087      	sub	sp, #28
 800abf2:	af00      	add	r7, sp, #0
 800abf4:	60f8      	str	r0, [r7, #12]
 800abf6:	60b9      	str	r1, [r7, #8]
 800abf8:	607a      	str	r2, [r7, #4]
 800abfa:	603b      	str	r3, [r7, #0]
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	6a1b      	ldr	r3, [r3, #32]
 800ac00:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	621a      	str	r2, [r3, #32]
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	69db      	ldr	r3, [r3, #28]
 800ac0c:	617b      	str	r3, [r7, #20]
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	6a1b      	ldr	r3, [r3, #32]
 800ac12:	613b      	str	r3, [r7, #16]
 800ac14:	697b      	ldr	r3, [r7, #20]
 800ac16:	f023 0303 	bic.w	r3, r3, #3
 800ac1a:	617b      	str	r3, [r7, #20]
 800ac1c:	697a      	ldr	r2, [r7, #20]
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	4313      	orrs	r3, r2
 800ac22:	617b      	str	r3, [r7, #20]
 800ac24:	697b      	ldr	r3, [r7, #20]
 800ac26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ac2a:	617b      	str	r3, [r7, #20]
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	011b      	lsls	r3, r3, #4
 800ac30:	b2db      	uxtb	r3, r3
 800ac32:	697a      	ldr	r2, [r7, #20]
 800ac34:	4313      	orrs	r3, r2
 800ac36:	617b      	str	r3, [r7, #20]
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ac3e:	613b      	str	r3, [r7, #16]
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	021b      	lsls	r3, r3, #8
 800ac44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ac48:	693a      	ldr	r2, [r7, #16]
 800ac4a:	4313      	orrs	r3, r2
 800ac4c:	613b      	str	r3, [r7, #16]
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	697a      	ldr	r2, [r7, #20]
 800ac52:	61da      	str	r2, [r3, #28]
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	693a      	ldr	r2, [r7, #16]
 800ac58:	621a      	str	r2, [r3, #32]
 800ac5a:	bf00      	nop
 800ac5c:	371c      	adds	r7, #28
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bc80      	pop	{r7}
 800ac62:	4770      	bx	lr

0800ac64 <TIM_TI4_SetConfig>:
 800ac64:	b480      	push	{r7}
 800ac66:	b087      	sub	sp, #28
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	60f8      	str	r0, [r7, #12]
 800ac6c:	60b9      	str	r1, [r7, #8]
 800ac6e:	607a      	str	r2, [r7, #4]
 800ac70:	603b      	str	r3, [r7, #0]
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	6a1b      	ldr	r3, [r3, #32]
 800ac76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	621a      	str	r2, [r3, #32]
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	69db      	ldr	r3, [r3, #28]
 800ac82:	617b      	str	r3, [r7, #20]
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	6a1b      	ldr	r3, [r3, #32]
 800ac88:	613b      	str	r3, [r7, #16]
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac90:	617b      	str	r3, [r7, #20]
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	021b      	lsls	r3, r3, #8
 800ac96:	697a      	ldr	r2, [r7, #20]
 800ac98:	4313      	orrs	r3, r2
 800ac9a:	617b      	str	r3, [r7, #20]
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aca2:	617b      	str	r3, [r7, #20]
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	031b      	lsls	r3, r3, #12
 800aca8:	b29b      	uxth	r3, r3
 800acaa:	697a      	ldr	r2, [r7, #20]
 800acac:	4313      	orrs	r3, r2
 800acae:	617b      	str	r3, [r7, #20]
 800acb0:	693b      	ldr	r3, [r7, #16]
 800acb2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800acb6:	613b      	str	r3, [r7, #16]
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	031b      	lsls	r3, r3, #12
 800acbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800acc0:	693a      	ldr	r2, [r7, #16]
 800acc2:	4313      	orrs	r3, r2
 800acc4:	613b      	str	r3, [r7, #16]
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	697a      	ldr	r2, [r7, #20]
 800acca:	61da      	str	r2, [r3, #28]
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	693a      	ldr	r2, [r7, #16]
 800acd0:	621a      	str	r2, [r3, #32]
 800acd2:	bf00      	nop
 800acd4:	371c      	adds	r7, #28
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bc80      	pop	{r7}
 800acda:	4770      	bx	lr

0800acdc <TIM_ITRx_SetConfig>:
 800acdc:	b480      	push	{r7}
 800acde:	b085      	sub	sp, #20
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
 800ace4:	6039      	str	r1, [r7, #0]
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	689b      	ldr	r3, [r3, #8]
 800acea:	60fb      	str	r3, [r7, #12]
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acf2:	60fb      	str	r3, [r7, #12]
 800acf4:	683a      	ldr	r2, [r7, #0]
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	4313      	orrs	r3, r2
 800acfa:	f043 0307 	orr.w	r3, r3, #7
 800acfe:	60fb      	str	r3, [r7, #12]
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	68fa      	ldr	r2, [r7, #12]
 800ad04:	609a      	str	r2, [r3, #8]
 800ad06:	bf00      	nop
 800ad08:	3714      	adds	r7, #20
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bc80      	pop	{r7}
 800ad0e:	4770      	bx	lr

0800ad10 <TIM_ETR_SetConfig>:
 800ad10:	b480      	push	{r7}
 800ad12:	b087      	sub	sp, #28
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	60f8      	str	r0, [r7, #12]
 800ad18:	60b9      	str	r1, [r7, #8]
 800ad1a:	607a      	str	r2, [r7, #4]
 800ad1c:	603b      	str	r3, [r7, #0]
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	689b      	ldr	r3, [r3, #8]
 800ad22:	617b      	str	r3, [r7, #20]
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ad2a:	617b      	str	r3, [r7, #20]
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	021a      	lsls	r2, r3, #8
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	431a      	orrs	r2, r3
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	4313      	orrs	r3, r2
 800ad38:	697a      	ldr	r2, [r7, #20]
 800ad3a:	4313      	orrs	r3, r2
 800ad3c:	617b      	str	r3, [r7, #20]
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	697a      	ldr	r2, [r7, #20]
 800ad42:	609a      	str	r2, [r3, #8]
 800ad44:	bf00      	nop
 800ad46:	371c      	adds	r7, #28
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bc80      	pop	{r7}
 800ad4c:	4770      	bx	lr

0800ad4e <TIM_CCxChannelCmd>:
 800ad4e:	b480      	push	{r7}
 800ad50:	b087      	sub	sp, #28
 800ad52:	af00      	add	r7, sp, #0
 800ad54:	60f8      	str	r0, [r7, #12]
 800ad56:	60b9      	str	r1, [r7, #8]
 800ad58:	607a      	str	r2, [r7, #4]
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	f003 031f 	and.w	r3, r3, #31
 800ad60:	2201      	movs	r2, #1
 800ad62:	fa02 f303 	lsl.w	r3, r2, r3
 800ad66:	617b      	str	r3, [r7, #20]
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	6a1a      	ldr	r2, [r3, #32]
 800ad6c:	697b      	ldr	r3, [r7, #20]
 800ad6e:	43db      	mvns	r3, r3
 800ad70:	401a      	ands	r2, r3
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	621a      	str	r2, [r3, #32]
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	6a1a      	ldr	r2, [r3, #32]
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	f003 031f 	and.w	r3, r3, #31
 800ad80:	6879      	ldr	r1, [r7, #4]
 800ad82:	fa01 f303 	lsl.w	r3, r1, r3
 800ad86:	431a      	orrs	r2, r3
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	621a      	str	r2, [r3, #32]
 800ad8c:	bf00      	nop
 800ad8e:	371c      	adds	r7, #28
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bc80      	pop	{r7}
 800ad94:	4770      	bx	lr
	...

0800ad98 <HAL_TIMEx_MasterConfigSynchronization>:
 800ad98:	b480      	push	{r7}
 800ad9a:	b085      	sub	sp, #20
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
 800ada0:	6039      	str	r1, [r7, #0]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ada8:	2b01      	cmp	r3, #1
 800adaa:	d101      	bne.n	800adb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800adac:	2302      	movs	r3, #2
 800adae:	e046      	b.n	800ae3e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2201      	movs	r2, #1
 800adb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2202      	movs	r2, #2
 800adbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	685b      	ldr	r3, [r3, #4]
 800adc6:	60fb      	str	r3, [r7, #12]
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	689b      	ldr	r3, [r3, #8]
 800adce:	60bb      	str	r3, [r7, #8]
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800add6:	60fb      	str	r3, [r7, #12]
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	68fa      	ldr	r2, [r7, #12]
 800adde:	4313      	orrs	r3, r2
 800ade0:	60fb      	str	r3, [r7, #12]
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	68fa      	ldr	r2, [r7, #12]
 800ade8:	605a      	str	r2, [r3, #4]
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	4a16      	ldr	r2, [pc, #88]	; (800ae48 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800adf0:	4293      	cmp	r3, r2
 800adf2:	d00e      	beq.n	800ae12 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800adfc:	d009      	beq.n	800ae12 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	4a12      	ldr	r2, [pc, #72]	; (800ae4c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800ae04:	4293      	cmp	r3, r2
 800ae06:	d004      	beq.n	800ae12 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	4a10      	ldr	r2, [pc, #64]	; (800ae50 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800ae0e:	4293      	cmp	r3, r2
 800ae10:	d10c      	bne.n	800ae2c <HAL_TIMEx_MasterConfigSynchronization+0x94>
 800ae12:	68bb      	ldr	r3, [r7, #8]
 800ae14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ae18:	60bb      	str	r3, [r7, #8]
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	685b      	ldr	r3, [r3, #4]
 800ae1e:	68ba      	ldr	r2, [r7, #8]
 800ae20:	4313      	orrs	r3, r2
 800ae22:	60bb      	str	r3, [r7, #8]
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	68ba      	ldr	r2, [r7, #8]
 800ae2a:	609a      	str	r2, [r3, #8]
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2201      	movs	r2, #1
 800ae30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2200      	movs	r2, #0
 800ae38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	4618      	mov	r0, r3
 800ae40:	3714      	adds	r7, #20
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bc80      	pop	{r7}
 800ae46:	4770      	bx	lr
 800ae48:	40012c00 	.word	0x40012c00
 800ae4c:	40000400 	.word	0x40000400
 800ae50:	40000800 	.word	0x40000800

0800ae54 <HAL_TIMEx_CommutCallback>:
 800ae54:	b480      	push	{r7}
 800ae56:	b083      	sub	sp, #12
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
 800ae5c:	bf00      	nop
 800ae5e:	370c      	adds	r7, #12
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bc80      	pop	{r7}
 800ae64:	4770      	bx	lr

0800ae66 <HAL_TIMEx_BreakCallback>:
 800ae66:	b480      	push	{r7}
 800ae68:	b083      	sub	sp, #12
 800ae6a:	af00      	add	r7, sp, #0
 800ae6c:	6078      	str	r0, [r7, #4]
 800ae6e:	bf00      	nop
 800ae70:	370c      	adds	r7, #12
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bc80      	pop	{r7}
 800ae76:	4770      	bx	lr

0800ae78 <malloc>:
 800ae78:	4b02      	ldr	r3, [pc, #8]	; (800ae84 <malloc+0xc>)
 800ae7a:	4601      	mov	r1, r0
 800ae7c:	6818      	ldr	r0, [r3, #0]
 800ae7e:	f000 b82b 	b.w	800aed8 <_malloc_r>
 800ae82:	bf00      	nop
 800ae84:	20000294 	.word	0x20000294

0800ae88 <free>:
 800ae88:	4b02      	ldr	r3, [pc, #8]	; (800ae94 <free+0xc>)
 800ae8a:	4601      	mov	r1, r0
 800ae8c:	6818      	ldr	r0, [r3, #0]
 800ae8e:	f000 b909 	b.w	800b0a4 <_free_r>
 800ae92:	bf00      	nop
 800ae94:	20000294 	.word	0x20000294

0800ae98 <sbrk_aligned>:
 800ae98:	b570      	push	{r4, r5, r6, lr}
 800ae9a:	4e0e      	ldr	r6, [pc, #56]	; (800aed4 <sbrk_aligned+0x3c>)
 800ae9c:	460c      	mov	r4, r1
 800ae9e:	6831      	ldr	r1, [r6, #0]
 800aea0:	4605      	mov	r5, r0
 800aea2:	b911      	cbnz	r1, 800aeaa <sbrk_aligned+0x12>
 800aea4:	f000 f8ac 	bl	800b000 <_sbrk_r>
 800aea8:	6030      	str	r0, [r6, #0]
 800aeaa:	4621      	mov	r1, r4
 800aeac:	4628      	mov	r0, r5
 800aeae:	f000 f8a7 	bl	800b000 <_sbrk_r>
 800aeb2:	1c43      	adds	r3, r0, #1
 800aeb4:	d00a      	beq.n	800aecc <sbrk_aligned+0x34>
 800aeb6:	1cc4      	adds	r4, r0, #3
 800aeb8:	f024 0403 	bic.w	r4, r4, #3
 800aebc:	42a0      	cmp	r0, r4
 800aebe:	d007      	beq.n	800aed0 <sbrk_aligned+0x38>
 800aec0:	1a21      	subs	r1, r4, r0
 800aec2:	4628      	mov	r0, r5
 800aec4:	f000 f89c 	bl	800b000 <_sbrk_r>
 800aec8:	3001      	adds	r0, #1
 800aeca:	d101      	bne.n	800aed0 <sbrk_aligned+0x38>
 800aecc:	f04f 34ff 	mov.w	r4, #4294967295
 800aed0:	4620      	mov	r0, r4
 800aed2:	bd70      	pop	{r4, r5, r6, pc}
 800aed4:	20000784 	.word	0x20000784

0800aed8 <_malloc_r>:
 800aed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aedc:	1ccd      	adds	r5, r1, #3
 800aede:	f025 0503 	bic.w	r5, r5, #3
 800aee2:	3508      	adds	r5, #8
 800aee4:	2d0c      	cmp	r5, #12
 800aee6:	bf38      	it	cc
 800aee8:	250c      	movcc	r5, #12
 800aeea:	2d00      	cmp	r5, #0
 800aeec:	4607      	mov	r7, r0
 800aeee:	db01      	blt.n	800aef4 <_malloc_r+0x1c>
 800aef0:	42a9      	cmp	r1, r5
 800aef2:	d905      	bls.n	800af00 <_malloc_r+0x28>
 800aef4:	230c      	movs	r3, #12
 800aef6:	2600      	movs	r6, #0
 800aef8:	603b      	str	r3, [r7, #0]
 800aefa:	4630      	mov	r0, r6
 800aefc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af00:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800afd4 <_malloc_r+0xfc>
 800af04:	f000 f868 	bl	800afd8 <__malloc_lock>
 800af08:	f8d8 3000 	ldr.w	r3, [r8]
 800af0c:	461c      	mov	r4, r3
 800af0e:	bb5c      	cbnz	r4, 800af68 <_malloc_r+0x90>
 800af10:	4629      	mov	r1, r5
 800af12:	4638      	mov	r0, r7
 800af14:	f7ff ffc0 	bl	800ae98 <sbrk_aligned>
 800af18:	1c43      	adds	r3, r0, #1
 800af1a:	4604      	mov	r4, r0
 800af1c:	d155      	bne.n	800afca <_malloc_r+0xf2>
 800af1e:	f8d8 4000 	ldr.w	r4, [r8]
 800af22:	4626      	mov	r6, r4
 800af24:	2e00      	cmp	r6, #0
 800af26:	d145      	bne.n	800afb4 <_malloc_r+0xdc>
 800af28:	2c00      	cmp	r4, #0
 800af2a:	d048      	beq.n	800afbe <_malloc_r+0xe6>
 800af2c:	6823      	ldr	r3, [r4, #0]
 800af2e:	4631      	mov	r1, r6
 800af30:	4638      	mov	r0, r7
 800af32:	eb04 0903 	add.w	r9, r4, r3
 800af36:	f000 f863 	bl	800b000 <_sbrk_r>
 800af3a:	4581      	cmp	r9, r0
 800af3c:	d13f      	bne.n	800afbe <_malloc_r+0xe6>
 800af3e:	6821      	ldr	r1, [r4, #0]
 800af40:	4638      	mov	r0, r7
 800af42:	1a6d      	subs	r5, r5, r1
 800af44:	4629      	mov	r1, r5
 800af46:	f7ff ffa7 	bl	800ae98 <sbrk_aligned>
 800af4a:	3001      	adds	r0, #1
 800af4c:	d037      	beq.n	800afbe <_malloc_r+0xe6>
 800af4e:	6823      	ldr	r3, [r4, #0]
 800af50:	442b      	add	r3, r5
 800af52:	6023      	str	r3, [r4, #0]
 800af54:	f8d8 3000 	ldr.w	r3, [r8]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d038      	beq.n	800afce <_malloc_r+0xf6>
 800af5c:	685a      	ldr	r2, [r3, #4]
 800af5e:	42a2      	cmp	r2, r4
 800af60:	d12b      	bne.n	800afba <_malloc_r+0xe2>
 800af62:	2200      	movs	r2, #0
 800af64:	605a      	str	r2, [r3, #4]
 800af66:	e00f      	b.n	800af88 <_malloc_r+0xb0>
 800af68:	6822      	ldr	r2, [r4, #0]
 800af6a:	1b52      	subs	r2, r2, r5
 800af6c:	d41f      	bmi.n	800afae <_malloc_r+0xd6>
 800af6e:	2a0b      	cmp	r2, #11
 800af70:	d917      	bls.n	800afa2 <_malloc_r+0xca>
 800af72:	1961      	adds	r1, r4, r5
 800af74:	42a3      	cmp	r3, r4
 800af76:	6025      	str	r5, [r4, #0]
 800af78:	bf18      	it	ne
 800af7a:	6059      	strne	r1, [r3, #4]
 800af7c:	6863      	ldr	r3, [r4, #4]
 800af7e:	bf08      	it	eq
 800af80:	f8c8 1000 	streq.w	r1, [r8]
 800af84:	5162      	str	r2, [r4, r5]
 800af86:	604b      	str	r3, [r1, #4]
 800af88:	4638      	mov	r0, r7
 800af8a:	f104 060b 	add.w	r6, r4, #11
 800af8e:	f000 f829 	bl	800afe4 <__malloc_unlock>
 800af92:	f026 0607 	bic.w	r6, r6, #7
 800af96:	1d23      	adds	r3, r4, #4
 800af98:	1af2      	subs	r2, r6, r3
 800af9a:	d0ae      	beq.n	800aefa <_malloc_r+0x22>
 800af9c:	1b9b      	subs	r3, r3, r6
 800af9e:	50a3      	str	r3, [r4, r2]
 800afa0:	e7ab      	b.n	800aefa <_malloc_r+0x22>
 800afa2:	42a3      	cmp	r3, r4
 800afa4:	6862      	ldr	r2, [r4, #4]
 800afa6:	d1dd      	bne.n	800af64 <_malloc_r+0x8c>
 800afa8:	f8c8 2000 	str.w	r2, [r8]
 800afac:	e7ec      	b.n	800af88 <_malloc_r+0xb0>
 800afae:	4623      	mov	r3, r4
 800afb0:	6864      	ldr	r4, [r4, #4]
 800afb2:	e7ac      	b.n	800af0e <_malloc_r+0x36>
 800afb4:	4634      	mov	r4, r6
 800afb6:	6876      	ldr	r6, [r6, #4]
 800afb8:	e7b4      	b.n	800af24 <_malloc_r+0x4c>
 800afba:	4613      	mov	r3, r2
 800afbc:	e7cc      	b.n	800af58 <_malloc_r+0x80>
 800afbe:	230c      	movs	r3, #12
 800afc0:	4638      	mov	r0, r7
 800afc2:	603b      	str	r3, [r7, #0]
 800afc4:	f000 f80e 	bl	800afe4 <__malloc_unlock>
 800afc8:	e797      	b.n	800aefa <_malloc_r+0x22>
 800afca:	6025      	str	r5, [r4, #0]
 800afcc:	e7dc      	b.n	800af88 <_malloc_r+0xb0>
 800afce:	605b      	str	r3, [r3, #4]
 800afd0:	deff      	udf	#255	; 0xff
 800afd2:	bf00      	nop
 800afd4:	20000780 	.word	0x20000780

0800afd8 <__malloc_lock>:
 800afd8:	4801      	ldr	r0, [pc, #4]	; (800afe0 <__malloc_lock+0x8>)
 800afda:	f000 b84b 	b.w	800b074 <__retarget_lock_acquire_recursive>
 800afde:	bf00      	nop
 800afe0:	200008c4 	.word	0x200008c4

0800afe4 <__malloc_unlock>:
 800afe4:	4801      	ldr	r0, [pc, #4]	; (800afec <__malloc_unlock+0x8>)
 800afe6:	f000 b846 	b.w	800b076 <__retarget_lock_release_recursive>
 800afea:	bf00      	nop
 800afec:	200008c4 	.word	0x200008c4

0800aff0 <memset>:
 800aff0:	4603      	mov	r3, r0
 800aff2:	4402      	add	r2, r0
 800aff4:	4293      	cmp	r3, r2
 800aff6:	d100      	bne.n	800affa <memset+0xa>
 800aff8:	4770      	bx	lr
 800affa:	f803 1b01 	strb.w	r1, [r3], #1
 800affe:	e7f9      	b.n	800aff4 <memset+0x4>

0800b000 <_sbrk_r>:
 800b000:	b538      	push	{r3, r4, r5, lr}
 800b002:	2300      	movs	r3, #0
 800b004:	4d05      	ldr	r5, [pc, #20]	; (800b01c <_sbrk_r+0x1c>)
 800b006:	4604      	mov	r4, r0
 800b008:	4608      	mov	r0, r1
 800b00a:	602b      	str	r3, [r5, #0]
 800b00c:	f7fb f94a 	bl	80062a4 <_sbrk>
 800b010:	1c43      	adds	r3, r0, #1
 800b012:	d102      	bne.n	800b01a <_sbrk_r+0x1a>
 800b014:	682b      	ldr	r3, [r5, #0]
 800b016:	b103      	cbz	r3, 800b01a <_sbrk_r+0x1a>
 800b018:	6023      	str	r3, [r4, #0]
 800b01a:	bd38      	pop	{r3, r4, r5, pc}
 800b01c:	200008c0 	.word	0x200008c0

0800b020 <__errno>:
 800b020:	4b01      	ldr	r3, [pc, #4]	; (800b028 <__errno+0x8>)
 800b022:	6818      	ldr	r0, [r3, #0]
 800b024:	4770      	bx	lr
 800b026:	bf00      	nop
 800b028:	20000294 	.word	0x20000294

0800b02c <__libc_init_array>:
 800b02c:	b570      	push	{r4, r5, r6, lr}
 800b02e:	2600      	movs	r6, #0
 800b030:	4d0c      	ldr	r5, [pc, #48]	; (800b064 <__libc_init_array+0x38>)
 800b032:	4c0d      	ldr	r4, [pc, #52]	; (800b068 <__libc_init_array+0x3c>)
 800b034:	1b64      	subs	r4, r4, r5
 800b036:	10a4      	asrs	r4, r4, #2
 800b038:	42a6      	cmp	r6, r4
 800b03a:	d109      	bne.n	800b050 <__libc_init_array+0x24>
 800b03c:	f000 f87a 	bl	800b134 <_init>
 800b040:	2600      	movs	r6, #0
 800b042:	4d0a      	ldr	r5, [pc, #40]	; (800b06c <__libc_init_array+0x40>)
 800b044:	4c0a      	ldr	r4, [pc, #40]	; (800b070 <__libc_init_array+0x44>)
 800b046:	1b64      	subs	r4, r4, r5
 800b048:	10a4      	asrs	r4, r4, #2
 800b04a:	42a6      	cmp	r6, r4
 800b04c:	d105      	bne.n	800b05a <__libc_init_array+0x2e>
 800b04e:	bd70      	pop	{r4, r5, r6, pc}
 800b050:	f855 3b04 	ldr.w	r3, [r5], #4
 800b054:	4798      	blx	r3
 800b056:	3601      	adds	r6, #1
 800b058:	e7ee      	b.n	800b038 <__libc_init_array+0xc>
 800b05a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b05e:	4798      	blx	r3
 800b060:	3601      	adds	r6, #1
 800b062:	e7f2      	b.n	800b04a <__libc_init_array+0x1e>
 800b064:	0800b28c 	.word	0x0800b28c
 800b068:	0800b28c 	.word	0x0800b28c
 800b06c:	0800b28c 	.word	0x0800b28c
 800b070:	0800b290 	.word	0x0800b290

0800b074 <__retarget_lock_acquire_recursive>:
 800b074:	4770      	bx	lr

0800b076 <__retarget_lock_release_recursive>:
 800b076:	4770      	bx	lr

0800b078 <strcpy>:
 800b078:	4603      	mov	r3, r0
 800b07a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b07e:	f803 2b01 	strb.w	r2, [r3], #1
 800b082:	2a00      	cmp	r2, #0
 800b084:	d1f9      	bne.n	800b07a <strcpy+0x2>
 800b086:	4770      	bx	lr

0800b088 <memcpy>:
 800b088:	440a      	add	r2, r1
 800b08a:	4291      	cmp	r1, r2
 800b08c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b090:	d100      	bne.n	800b094 <memcpy+0xc>
 800b092:	4770      	bx	lr
 800b094:	b510      	push	{r4, lr}
 800b096:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b09a:	4291      	cmp	r1, r2
 800b09c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b0a0:	d1f9      	bne.n	800b096 <memcpy+0xe>
 800b0a2:	bd10      	pop	{r4, pc}

0800b0a4 <_free_r>:
 800b0a4:	b538      	push	{r3, r4, r5, lr}
 800b0a6:	4605      	mov	r5, r0
 800b0a8:	2900      	cmp	r1, #0
 800b0aa:	d040      	beq.n	800b12e <_free_r+0x8a>
 800b0ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0b0:	1f0c      	subs	r4, r1, #4
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	bfb8      	it	lt
 800b0b6:	18e4      	addlt	r4, r4, r3
 800b0b8:	f7ff ff8e 	bl	800afd8 <__malloc_lock>
 800b0bc:	4a1c      	ldr	r2, [pc, #112]	; (800b130 <_free_r+0x8c>)
 800b0be:	6813      	ldr	r3, [r2, #0]
 800b0c0:	b933      	cbnz	r3, 800b0d0 <_free_r+0x2c>
 800b0c2:	6063      	str	r3, [r4, #4]
 800b0c4:	6014      	str	r4, [r2, #0]
 800b0c6:	4628      	mov	r0, r5
 800b0c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0cc:	f7ff bf8a 	b.w	800afe4 <__malloc_unlock>
 800b0d0:	42a3      	cmp	r3, r4
 800b0d2:	d908      	bls.n	800b0e6 <_free_r+0x42>
 800b0d4:	6820      	ldr	r0, [r4, #0]
 800b0d6:	1821      	adds	r1, r4, r0
 800b0d8:	428b      	cmp	r3, r1
 800b0da:	bf01      	itttt	eq
 800b0dc:	6819      	ldreq	r1, [r3, #0]
 800b0de:	685b      	ldreq	r3, [r3, #4]
 800b0e0:	1809      	addeq	r1, r1, r0
 800b0e2:	6021      	streq	r1, [r4, #0]
 800b0e4:	e7ed      	b.n	800b0c2 <_free_r+0x1e>
 800b0e6:	461a      	mov	r2, r3
 800b0e8:	685b      	ldr	r3, [r3, #4]
 800b0ea:	b10b      	cbz	r3, 800b0f0 <_free_r+0x4c>
 800b0ec:	42a3      	cmp	r3, r4
 800b0ee:	d9fa      	bls.n	800b0e6 <_free_r+0x42>
 800b0f0:	6811      	ldr	r1, [r2, #0]
 800b0f2:	1850      	adds	r0, r2, r1
 800b0f4:	42a0      	cmp	r0, r4
 800b0f6:	d10b      	bne.n	800b110 <_free_r+0x6c>
 800b0f8:	6820      	ldr	r0, [r4, #0]
 800b0fa:	4401      	add	r1, r0
 800b0fc:	1850      	adds	r0, r2, r1
 800b0fe:	4283      	cmp	r3, r0
 800b100:	6011      	str	r1, [r2, #0]
 800b102:	d1e0      	bne.n	800b0c6 <_free_r+0x22>
 800b104:	6818      	ldr	r0, [r3, #0]
 800b106:	685b      	ldr	r3, [r3, #4]
 800b108:	4408      	add	r0, r1
 800b10a:	6010      	str	r0, [r2, #0]
 800b10c:	6053      	str	r3, [r2, #4]
 800b10e:	e7da      	b.n	800b0c6 <_free_r+0x22>
 800b110:	d902      	bls.n	800b118 <_free_r+0x74>
 800b112:	230c      	movs	r3, #12
 800b114:	602b      	str	r3, [r5, #0]
 800b116:	e7d6      	b.n	800b0c6 <_free_r+0x22>
 800b118:	6820      	ldr	r0, [r4, #0]
 800b11a:	1821      	adds	r1, r4, r0
 800b11c:	428b      	cmp	r3, r1
 800b11e:	bf01      	itttt	eq
 800b120:	6819      	ldreq	r1, [r3, #0]
 800b122:	685b      	ldreq	r3, [r3, #4]
 800b124:	1809      	addeq	r1, r1, r0
 800b126:	6021      	streq	r1, [r4, #0]
 800b128:	6063      	str	r3, [r4, #4]
 800b12a:	6054      	str	r4, [r2, #4]
 800b12c:	e7cb      	b.n	800b0c6 <_free_r+0x22>
 800b12e:	bd38      	pop	{r3, r4, r5, pc}
 800b130:	20000780 	.word	0x20000780

0800b134 <_init>:
 800b134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b136:	bf00      	nop
 800b138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b13a:	bc08      	pop	{r3}
 800b13c:	469e      	mov	lr, r3
 800b13e:	4770      	bx	lr

0800b140 <_fini>:
 800b140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b142:	bf00      	nop
 800b144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b146:	bc08      	pop	{r3}
 800b148:	469e      	mov	lr, r3
 800b14a:	4770      	bx	lr
